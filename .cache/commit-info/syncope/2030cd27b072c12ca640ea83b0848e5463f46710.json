{"sha":"2030cd27b072c12ca640ea83b0848e5463f46710","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIwMzBjZDI3YjA3MmMxMmNhNjQwZWE4M2IwODQ4ZTU0NjNmNDY3MTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-28T09:48:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-28T09:48:28Z"},"message":"Upgrading Commons Collections","tree":{"sha":"8a494d31637cf0b12720ccc9ac53ee027f3e0c3b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8a494d31637cf0b12720ccc9ac53ee027f3e0c3b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2030cd27b072c12ca640ea83b0848e5463f46710","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2030cd27b072c12ca640ea83b0848e5463f46710","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2030cd27b072c12ca640ea83b0848e5463f46710","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2030cd27b072c12ca640ea83b0848e5463f46710/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"073e29a16c6885163c94d7f5d3a9a5553a3ae231","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/073e29a16c6885163c94d7f5d3a9a5553a3ae231","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/073e29a16c6885163c94d7f5d3a9a5553a3ae231"}],"stats":{"total":351,"additions":183,"deletions":168},"files":[{"sha":"b7dca181e45317b54c29f4bef79bc5a8ebc6be9d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnectorModal.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -23,6 +23,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.AbstractBasePage;\n@@ -61,11 +62,11 @@ public ConnectorModal(\n         this.bundles = CollectionUtils.select(connectorRestClient.getAllBundles(),\n                 new Predicate<ConnBundleTO>() {\n \n-                    @Override\n-                    public boolean evaluate(final ConnBundleTO object) {\n-                        return object.getLocation().equals(model.getObject().getLocation());\n-                    }\n-                }, new ArrayList<ConnBundleTO>());\n+            @Override\n+            public boolean evaluate(final ConnBundleTO object) {\n+                return object.getLocation().equals(model.getObject().getLocation());\n+            }\n+        }, new ArrayList<ConnBundleTO>());\n \n         //--------------------------------\n         // Connector details panel\n@@ -175,7 +176,7 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n     }\n \n     protected static ConnBundleTO getBundle(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n-        return CollectionUtils.find(bundles, new Predicate<ConnBundleTO>() {\n+        return IterableUtils.find(bundles, new Predicate<ConnBundleTO>() {\n \n             @Override\n             public boolean evaluate(final ConnBundleTO bundle) {"},{"sha":"5f06c14451512b0d1eeadac3384f460268d75180","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceModal.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -21,7 +21,7 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -220,7 +220,7 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 if (provision.getMapping() == null || provision.getMapping().getItems().isEmpty()) {\n                     resourceTO.getProvisions().remove(provision);\n                 } else {\n-                    int uConnObjectKeyCount = CollectionUtils.countMatches(\n+                    long uConnObjectKeyCount = IterableUtils.countMatches(\n                             provision.getMapping().getItems(), new Predicate<MappingItemTO>() {\n \n                         @Override"},{"sha":"d4a76443fc83dfff31f5f3a7622234d9a9cd8a1e","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/SelectChoiceRenderer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectChoiceRenderer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectChoiceRenderer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectChoiceRenderer.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.wicket.markup.html.form;\n \n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.model.IModel;\n@@ -44,7 +44,7 @@ public String getIdValue(final T obj, final int i) {\n \n     @Override\n     public T getObject(final String id, final IModel<? extends List<? extends T>> choices) {\n-        return CollectionUtils.find(choices.getObject(), new Predicate<T>() {\n+        return IterableUtils.find(choices.getObject(), new Predicate<T>() {\n \n             @Override\n             public boolean evaluate(final T object) {"},{"sha":"f9d4372bdd696ea95e29e841f537b3af383a7896","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -24,6 +24,7 @@\n import java.util.Set;\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n@@ -106,7 +107,7 @@ private static void diff(\n         result.getPlainAttrs().clear();\n \n         if (!incremental) {\n-            CollectionUtils.forAllDo(CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet()),\n+            IterableUtils.forEach(CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet()),\n                     new Closure<String>() {\n \n                 @Override"},{"sha":"b338df817eb54aa07319525ae7572a9fa43ad1b2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeClientCompositeException.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -21,7 +21,7 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n \n@@ -68,7 +68,7 @@ public boolean addException(final SyncopeClientException exception) {\n                     + ClientExceptionType.class.getName() + \" set\");\n         }\n \n-        SyncopeClientException alreadyAdded = CollectionUtils.find(exceptions, new Predicate<SyncopeClientException>() {\n+        SyncopeClientException alreadyAdded = IterableUtils.find(exceptions, new Predicate<SyncopeClientException>() {\n \n             @Override\n             public boolean evaluate(final SyncopeClientException ex) {"},{"sha":"250194a8e711336b80495561de57d898e682efba","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -26,7 +26,7 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n \n@@ -90,7 +90,7 @@ public void setUDynMembershipCond(final StringReplacePatchItem udynMembershipCon\n \n     @JsonIgnore\n     public TypeExtensionTO getTypeExtension(final String anyType) {\n-        return CollectionUtils.find(typeExtensions, new Predicate<TypeExtensionTO>() {\n+        return IterableUtils.find(typeExtensions, new Predicate<TypeExtensionTO>() {\n \n             @Override\n             public boolean evaluate(final TypeExtensionTO typeExtension) {"},{"sha":"c8b917cc0e3cd48d5c141ae519f9230276d422b4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -19,14 +19,15 @@\n package org.apache.syncope.common.lib.search;\n \n import java.util.Arrays;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n \n public enum SpecialAttr {\n \n     /**\n      * Applies to users, groups and any objects.\n-     *//**\n+     */\n+    /**\n      * Applies to users, groups and any objects.\n      */\n     NULL(\"$null\"),\n@@ -71,7 +72,7 @@ public String toString() {\n     }\n \n     public static SpecialAttr fromString(final String value) {\n-        return CollectionUtils.find(Arrays.asList(values()), new Predicate<SpecialAttr>() {\n+        return IterableUtils.find(Arrays.asList(values()), new Predicate<SpecialAttr>() {\n \n             @Override\n             public boolean evaluate(final SpecialAttr specialAttr) {"},{"sha":"bedd2f3ed7cfc6eb3bf3c646f9f6327af441529d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -26,7 +26,7 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n@@ -100,7 +100,7 @@ public void setUDynMembershipCond(final String uDynMembershipCond) {\n \n     @JsonIgnore\n     public TypeExtensionTO getTypeExtension(final String anyType) {\n-        return CollectionUtils.find(typeExtensions, new Predicate<TypeExtensionTO>() {\n+        return IterableUtils.find(typeExtensions, new Predicate<TypeExtensionTO>() {\n \n             @Override\n             public boolean evaluate(final TypeExtensionTO typeExtension) {"},{"sha":"89fab1e2a1ff1bc28736d4ed0703c97d5e3487e1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -25,7 +25,7 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -51,7 +51,7 @@ public void setConnObjectLink(final String connObjectLink) {\n     }\n \n     public MappingItemTO getConnObjectKeyItem() {\n-        return CollectionUtils.find(getItems(), new Predicate<MappingItemTO>() {\n+        return IterableUtils.find(getItems(), new Predicate<MappingItemTO>() {\n \n             @Override\n             public boolean evaluate(final MappingItemTO item) {"},{"sha":"a4f56abcf191455d5e7330fd0028a0b048ff57a7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -30,7 +30,7 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n@@ -183,7 +183,7 @@ public void setSyncPolicy(final Long syncPolicy) {\n \n     @JsonIgnore\n     public ProvisionTO getProvision(final String anyType) {\n-        return CollectionUtils.find(provisions, new Predicate<ProvisionTO>() {\n+        return IterableUtils.find(provisions, new Predicate<ProvisionTO>() {\n \n             @Override\n             public boolean evaluate(final ProvisionTO provisionTO) {"},{"sha":"f10805282e139d966df0ecd441481249ca9343da","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -179,7 +180,7 @@ private static class StartsWithPredicate implements Predicate<String> {\n \n         @Override\n         public boolean evaluate(final String realm) {\n-            return CollectionUtils.exists(targets, new Predicate<String>() {\n+            return IterableUtils.matchesAny(targets, new Predicate<String>() {\n \n                 @Override\n                 public boolean evaluate(final String target) {\n@@ -205,7 +206,7 @@ protected Set<String> getEffectiveRealms(\n     }\n \n     protected void securityChecks(final Set<String> effectiveRealms, final String realm, final Long key) {\n-        if (!CollectionUtils.exists(effectiveRealms, new Predicate<String>() {\n+        if (!IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String ownedRealm) {"},{"sha":"0e9850bd957b82b00d0840f016ea47c25a2de715","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -81,7 +82,7 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {\n \n     @Override\n     protected void securityChecks(final Set<String> effectiveRealms, final String realm, final Long key) {\n-        if (!CollectionUtils.exists(effectiveRealms, new Predicate<String>() {\n+        if (!IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String ownedRealm) {"},{"sha":"7e880b45de8d8d1dc3160228e78cbd464ce2e375","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthDataAccessor.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -28,6 +28,7 @@\n import javax.annotation.Resource;\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n@@ -265,7 +266,7 @@ public SyncopeGrantedAuthority transform(final String entitlement) {\n                 // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n                 // statically and dynamically\n                 for (final Role role : userDAO.findAllRoles(user)) {\n-                    CollectionUtils.forAllDo(role.getEntitlements(), new Closure<String>() {\n+                    IterableUtils.forEach(role.getEntitlements(), new Closure<String>() {\n \n                         @Override\n                         public void execute(final String entitlement) {"},{"sha":"c52d355a9003af1d3430d51a34b6a2ad708e1d0e","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/MustChangePasswordFilter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -25,7 +25,7 @@\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -55,7 +55,7 @@ public void doFilter(final ServletRequest request, final ServletResponse respons\n             throws IOException, ServletException {\n \n         if (request instanceof SecurityContextHolderAwareRequestWrapper) {\n-            boolean isMustChangePassword = CollectionUtils.exists(\n+            boolean isMustChangePassword = IterableUtils.matchesAny(\n                     SecurityContextHolder.getContext().getAuthentication().getAuthorities(),\n                     new Predicate<GrantedAuthority>() {\n "},{"sha":"706bf1512a45eb12b24c55e4e725231671e422b4","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeGrantedAuthority.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -23,7 +23,7 @@\n import java.util.HashSet;\n import java.util.Set;\n import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n@@ -54,7 +54,7 @@ public boolean addRealm(final String newRealm) {\n     }\n \n     public void addRealms(final Collection<String> newRealms) {\n-        CollectionUtils.forAllDo(newRealms, new Closure<String>() {\n+        IterableUtils.forEach(newRealms, new Closure<String>() {\n \n             @Override\n             public void execute(final String newRealm) {"},{"sha":"e0d69743f5c175c4437f2e4c1b60e9f25f56ef7c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -24,7 +24,7 @@\n import java.util.Set;\n import javax.validation.ConstraintViolation;\n import javax.validation.ValidationException;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n \n@@ -99,7 +99,7 @@ public InvalidEntityException(final String entityClassSimpleName,\n     }\n \n     public final boolean hasViolation(final EntityViolationType type) {\n-        return CollectionUtils.exists(violations.keySet(), new Predicate<Class<?>>() {\n+        return IterableUtils.matchesAny(violations.keySet(), new Predicate<Class<?>>() {\n \n             @Override\n             public boolean evaluate(final Class<?> entity) {"},{"sha":"193ed8f96ec4ef43e5ecad2268d62a1cc89c0d3b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -25,6 +25,7 @@\n import java.util.Set;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -64,7 +65,7 @@ protected AnyUtils init() {\n     protected void securityChecks(final AnyObject anyObject) {\n         Set<String> authRealms = AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                 getFor(anyObject.getType().getKey(), EntitlementsHolder.AnyEntitlement.READ));\n-        boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n+        boolean authorized = IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String realm) {"},{"sha":"de2be18c8699fa14976156916daead81d0f2324b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -22,7 +22,7 @@\n import java.util.concurrent.CopyOnWriteArrayList;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -76,15 +76,14 @@ public void delete(final Long key) {\n             return;\n         }\n \n-        CollectionUtils.forAllDo(new CopyOnWriteArrayList<>(connInstance.getResources()),\n-                new Closure<ExternalResource>() {\n+        IterableUtils.forEach(new CopyOnWriteArrayList<>(connInstance.getResources()), new Closure<ExternalResource>() {\n \n-                    @Override\n-                    public void execute(final ExternalResource input) {\n-                        resourceDAO.delete(input.getKey());\n-                    }\n+            @Override\n+            public void execute(final ExternalResource input) {\n+                resourceDAO.delete(input.getKey());\n+            }\n \n-                });\n+        });\n \n         entityManager().remove(connInstance);\n "},{"sha":"d050d4c841b6a5075b4d88d9f2f61864f60c4fce","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -25,7 +25,7 @@\n import java.util.Set;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -75,7 +75,7 @@ protected AnyUtils init() {\n     @Override\n     protected void securityChecks(final Group group) {\n         Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_READ);\n-        boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n+        boolean authorized = IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String realm) {"},{"sha":"ecd5050c3b8ad377bc9a9c876fd45d3d540905c9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -23,7 +23,7 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -84,7 +84,7 @@ public Realm find(final String fullPath) {\n \n         Realm current = root;\n         for (final String pathElement : fullPath.substring(1).split(\"/\")) {\n-            current = CollectionUtils.find(findChildren(current), new Predicate<Realm>() {\n+            current = IterableUtils.find(findChildren(current), new Predicate<Realm>() {\n \n                 @Override\n                 public boolean evaluate(final Realm realm) {"},{"sha":"1ea89686e1409d417d700bb5f1ff34a9343aa70a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n@@ -168,8 +168,8 @@ public <T extends Task> List<T> findAll(\n \n         StringBuilder queryString = buildFindAllQuery(type, resource, anyTypeKind, anyTypeKey).\n                 append(orderByClauses.isEmpty()\n-                                ? \"ORDER BY t.id DESC\"\n-                                : toOrderByStatement(getEntityReference(type), orderByClauses));\n+                        ? \"ORDER BY t.id DESC\"\n+                        : toOrderByStatement(getEntityReference(type), orderByClauses));\n \n         Query query = entityManager().createQuery(queryString.toString());\n         query.setParameter(\"type\", type);\n@@ -239,14 +239,14 @@ public void delete(final Task task) {\n \n     @Override\n     public void deleteAll(final ExternalResource resource, final TaskType type) {\n-        CollectionUtils.forAllDo(\n+        IterableUtils.forEach(\n                 findAll(type, resource, null, null, -1, -1, Collections.<OrderByClause>emptyList()),\n                 new Closure<Task>() {\n \n-                    @Override\n-                    public void execute(final Task input) {\n-                        delete(input.getKey());\n-                    }\n-                });\n+            @Override\n+            public void execute(final Task input) {\n+                delete(input.getKey());\n+            }\n+        });\n     }\n }"},{"sha":"a669e24f1cdfa2d1119d9a0503591f7461cd2b7f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -27,6 +27,7 @@\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n@@ -104,7 +105,7 @@ protected void securityChecks(final User user) {\n                 && !AuthContextUtils.getUsername().equals(user.getUsername())) {\n \n             Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_READ);\n-            boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n+            boolean authorized = IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n \n                 @Override\n                 public boolean evaluate(final String realm) {"},{"sha":"bb2b855343a3d1dea84859174bae48a41d32bca0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n@@ -29,6 +28,7 @@\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Transient;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -39,6 +39,7 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.AnyCheck;\n \n @AnyCheck\n@@ -99,7 +100,7 @@ public void setStatus(final String status) {\n \n     @Override\n     public P getPlainAttr(final String plainSchemaName) {\n-        return CollectionUtils.find(getPlainAttrs(), new Predicate<P>() {\n+        return IterableUtils.find(getPlainAttrs(), new Predicate<P>() {\n \n             @Override\n             public boolean evaluate(final P plainAttr) {"},{"sha":"da253deba401c37ae46135fcc984e1e4f5683a9d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -37,7 +37,7 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n@@ -173,7 +173,7 @@ public boolean remove(final AnyAbout about) {\n \n     @Override\n     public AnyAbout getAbout(final AnyType anyType) {\n-        return CollectionUtils.find(abouts, new Predicate<AnyAbout>() {\n+        return IterableUtils.find(abouts, new Predicate<AnyAbout>() {\n \n             @Override\n             public boolean evaluate(final AnyAbout about) {"},{"sha":"a784c68aa9105bbc76dfc5e1cae3cdcfce4756ae","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -22,8 +22,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n@@ -38,7 +36,7 @@\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.Size;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -48,6 +46,8 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.validation.entity.RealmCheck;\n \n @Entity\n@@ -160,7 +160,7 @@ public boolean remove(final AnyTemplateRealm template) {\n \n     @Override\n     public AnyTemplateRealm getTemplate(final AnyType anyType) {\n-        return CollectionUtils.find(templates, new Predicate<AnyTemplate>() {\n+        return IterableUtils.find(templates, new Predicate<AnyTemplate>() {\n \n             @Override\n             public boolean evaluate(final AnyTemplate template) {"},{"sha":"955d1686956c993704722573bae5512e2a0e3598","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -35,6 +35,7 @@\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -159,7 +160,7 @@ public boolean remove(final ARelationship relationship) {\n \n     @Override\n     public ARelationship getRelationship(final RelationshipType relationshipType, final Long anyObjectKey) {\n-        return CollectionUtils.find(getRelationships(), new Predicate<ARelationship>() {\n+        return IterableUtils.find(getRelationships(), new Predicate<ARelationship>() {\n \n             @Override\n             public boolean evaluate(final ARelationship relationship) {\n@@ -211,7 +212,7 @@ public boolean remove(final AMembership membership) {\n \n     @Override\n     public AMembership getMembership(final Long groupKey) {\n-        return CollectionUtils.find(getMemberships(), new Predicate<AMembership>() {\n+        return IterableUtils.find(getMemberships(), new Predicate<AMembership>() {\n \n             @Override\n             public boolean evaluate(final AMembership membership) {"},{"sha":"48453ca5761f21cd2e5cf85155eb5decff2a49fe","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -28,7 +28,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.Valid;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -78,7 +78,7 @@ public boolean remove(final CPlainAttr attr) {\n \n     @Override\n     public CPlainAttr getPlainAttr(final String plainSchemaName) {\n-        return CollectionUtils.find(plainAttrs, new Predicate<CPlainAttr>() {\n+        return IterableUtils.find(plainAttrs, new Predicate<CPlainAttr>() {\n \n             @Override\n             public boolean evaluate(final CPlainAttr plainAttr) {"},{"sha":"e7a5579149463449dfb3784f89be28b8ef6dedd0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -35,7 +35,7 @@\n import javax.persistence.Table;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -230,7 +230,7 @@ public boolean remove(final TypeExtension typeExtension) {\n \n     @Override\n     public TypeExtension getTypeExtension(final AnyType anyType) {\n-        return CollectionUtils.find(typeExtensions, new Predicate<TypeExtension>() {\n+        return IterableUtils.find(typeExtensions, new Predicate<TypeExtension>() {\n \n             @Override\n             public boolean evaluate(final TypeExtension typeExtension) {"},{"sha":"1f10447339ad90e1c6a30a95091010ac04cac198","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -41,6 +41,7 @@\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -217,7 +218,7 @@ public boolean remove(final Provision provision) {\n \n     @Override\n     public Provision getProvision(final ObjectClass objectClass) {\n-        return CollectionUtils.find(provisions, new Predicate<Provision>() {\n+        return IterableUtils.find(provisions, new Predicate<Provision>() {\n \n             @Override\n             public boolean evaluate(final Provision provision) {\n@@ -228,7 +229,7 @@ public boolean evaluate(final Provision provision) {\n \n     @Override\n     public Provision getProvision(final AnyType anyType) {\n-        return CollectionUtils.find(provisions, new Predicate<Provision>() {\n+        return IterableUtils.find(provisions, new Predicate<Provision>() {\n \n             @Override\n             public boolean evaluate(final Provision provision) {"},{"sha":"752115c8998a44513683e283d9ebef27fa07ed8a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMapping.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -29,7 +29,7 @@\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -96,7 +96,7 @@ public List<? extends MappingItem> getItems() {\n \n     @Override\n     public MappingItem getConnObjectKeyItem() {\n-        return CollectionUtils.find(getItems(), new Predicate<MappingItem>() {\n+        return IterableUtils.find(getItems(), new Predicate<MappingItem>() {\n \n             @Override\n             public boolean evaluate(final MappingItem item) {"},{"sha":"bbf32428aa040dd8d2bedc654538db490649fc8e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -31,7 +31,7 @@\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n import javax.persistence.OneToMany;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -80,7 +80,7 @@ public boolean remove(final AnyFilter filter) {\n \n     @Override\n     public AnyFilter getFilter(final AnyType anyType) {\n-        return CollectionUtils.find(filters, new Predicate<AnyFilter>() {\n+        return IterableUtils.find(filters, new Predicate<AnyFilter>() {\n \n             @Override\n             public boolean evaluate(final AnyFilter filter) {"},{"sha":"b48a6e31201a740f623c40eef5cbc91c56ca26a4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASyncTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -35,7 +35,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.SyncMode;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -128,7 +128,7 @@ public boolean remove(final AnyTemplateSyncTask template) {\n \n     @Override\n     public AnyTemplateSyncTask getTemplate(final AnyType anyType) {\n-        return CollectionUtils.find(templates, new Predicate<AnyTemplate>() {\n+        return IterableUtils.find(templates, new Predicate<AnyTemplate>() {\n \n             @Override\n             public boolean evaluate(final AnyTemplate template) {"},{"sha":"e4a671163ffc9306e6c79f6131df4070f4699030","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -49,6 +49,7 @@\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n@@ -504,7 +505,7 @@ public boolean remove(final URelationship relationship) {\n \n     @Override\n     public URelationship getRelationship(final RelationshipType relationshipType, final Long anyObjectKey) {\n-        return CollectionUtils.find(getRelationships(), new Predicate<URelationship>() {\n+        return IterableUtils.find(getRelationships(), new Predicate<URelationship>() {\n \n             @Override\n             public boolean evaluate(final URelationship relationship) {\n@@ -556,7 +557,7 @@ public boolean remove(final UMembership membership) {\n \n     @Override\n     public UMembership getMembership(final Long groupKey) {\n-        return CollectionUtils.find(getMemberships(), new Predicate<UMembership>() {\n+        return IterableUtils.find(getMemberships(), new Predicate<UMembership>() {\n \n             @Override\n             public boolean evaluate(final UMembership membership) {"},{"sha":"941e63c2cfc2b0f31ab5fa087cd05dba8dc65924","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -21,7 +21,7 @@\n import java.util.HashSet;\n import java.util.Set;\n import javax.validation.ConstraintValidatorContext;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n@@ -122,7 +122,7 @@ private boolean isValid(final AnyType anyType, final Mapping mapping, final Cons\n             return true;\n         }\n \n-        int connObjectKeys = CollectionUtils.countMatches(mapping.getItems(), new Predicate<MappingItem>() {\n+        long connObjectKeys = IterableUtils.countMatches(mapping.getItems(), new Predicate<MappingItem>() {\n \n             @Override\n             public boolean evaluate(final MappingItem item) {\n@@ -218,7 +218,7 @@ public boolean isValid(final ExternalResource resource, final ConstraintValidato\n \n         final Set<AnyType> anyTypes = new HashSet<>();\n         final Set<String> objectClasses = new HashSet<>();\n-        boolean validMappings = CollectionUtils.matchesAll(resource.getProvisions(), new Predicate<Provision>() {\n+        boolean validMappings = IterableUtils.matchesAll(resource.getProvisions(), new Predicate<Provision>() {\n \n             @Override\n             public boolean evaluate(final Provision provision) {"},{"sha":"db26b96f16fda3eb2e2e662bae24da69bb829ce2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -28,7 +28,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -383,7 +383,7 @@ public void searchById() {\n         users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n-        assertTrue(CollectionUtils.exists(users, new Predicate<User>() {\n+        assertTrue(IterableUtils.matchesAny(users, new Predicate<User>() {\n \n             @Override\n             public boolean evaluate(User user) {\n@@ -426,14 +426,14 @@ public void searchByRelationshipType() {\n         List<Any<?>> matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n         assertNotNull(matching);\n         assertEquals(2, matching.size());\n-        assertTrue(CollectionUtils.exists(matching, new Predicate<Any<?>>() {\n+        assertTrue(IterableUtils.matchesAny(matching, new Predicate<Any<?>>() {\n \n             @Override\n             public boolean evaluate(final Any<?> any) {\n                 return any.getKey() == 1L;\n             }\n         }));\n-        assertTrue(CollectionUtils.exists(matching, new Predicate<Any<?>>() {\n+        assertTrue(IterableUtils.matchesAny(matching, new Predicate<Any<?>>() {\n \n             @Override\n             public boolean evaluate(final Any<?> any) {\n@@ -446,7 +446,7 @@ public boolean evaluate(final Any<?> any) {\n         matching = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(matching);\n         assertEquals(2, matching.size());\n-        assertTrue(CollectionUtils.exists(matching, new Predicate<Any<?>>() {\n+        assertTrue(IterableUtils.matchesAny(matching, new Predicate<Any<?>>() {\n \n             @Override\n             public boolean evaluate(final Any<?> any) {\n@@ -508,14 +508,14 @@ public void assignable() {\n         assertTrue(searchCondition.isValid());\n \n         List<Group> groups = searchDAO.search(searchCondition, AnyTypeKind.GROUP);\n-        assertTrue(CollectionUtils.exists(groups, new Predicate<Group>() {\n+        assertTrue(IterableUtils.matchesAny(groups, new Predicate<Group>() {\n \n             @Override\n             public boolean evaluate(final Group group) {\n                 return group.getKey().equals(15L);\n             }\n         }));\n-        assertFalse(CollectionUtils.exists(groups, new Predicate<Group>() {\n+        assertFalse(IterableUtils.matchesAny(groups, new Predicate<Group>() {\n \n             @Override\n             public boolean evaluate(final Group group) {\n@@ -529,7 +529,7 @@ public boolean evaluate(final Group group) {\n         assertTrue(searchCondition.isValid());\n \n         List<AnyObject> anyObjects = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n-        assertFalse(CollectionUtils.exists(anyObjects, new Predicate<AnyObject>() {\n+        assertFalse(IterableUtils.matchesAny(anyObjects, new Predicate<AnyObject>() {\n \n             @Override\n             public boolean evaluate(final AnyObject anyObject) {\n@@ -553,7 +553,7 @@ public void issue202() {\n         List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n-        assertTrue(CollectionUtils.exists(users, new Predicate<User>() {\n+        assertTrue(IterableUtils.matchesAny(users, new Predicate<User>() {\n \n             @Override\n             public boolean evaluate(User user) {"},{"sha":"828ce6cbcf0b5d7f28172502e23cb009b24b6c80","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -26,7 +26,7 @@\n import static org.junit.Assert.fail;\n \n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n@@ -69,7 +69,7 @@ public void findById() {\n         Mapping mapping = resource.getProvision(anyTypeDAO.findUser()).getMapping();\n         assertFalse(\"no mapping specified\", mapping.getItems().isEmpty());\n \n-        assertTrue(CollectionUtils.exists(mapping.getItems(), new Predicate<MappingItem>() {\n+        assertTrue(IterableUtils.matchesAny(mapping.getItems(), new Predicate<MappingItem>() {\n \n             @Override\n             public boolean evaluate(final MappingItem item) {"},{"sha":"aa0549b643fa289c84ebb8cad8778f6c5f20c437","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import java.util.Arrays;\n import java.util.Collection;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n@@ -190,7 +190,7 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         for (final String propName : properties.getPropertyNames()) {\n             ConnConfPropSchema schema = build(properties.getProperty(propName));\n \n-            ConnConfProperty property = CollectionUtils.find(connInstanceTO.getConf(),\n+            ConnConfProperty property = IterableUtils.find(connInstanceTO.getConf(),\n                     new Predicate<ConnConfProperty>() {\n \n                         @Override"},{"sha":"9fe5ee280c733922f779f833d6bf464e4489469d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -27,6 +27,7 @@\n import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n@@ -275,7 +276,7 @@ private boolean isPasswordMapped(final ExternalResource resource) {\n \n         Provision provision = resource.getProvision(anyTypeDAO.findUser());\n         if (provision != null && provision.getMapping() != null) {\n-            result = CollectionUtils.exists(provision.getMapping().getItems(), new Predicate<MappingItem>() {\n+            result = IterableUtils.matchesAny(provision.getMapping().getItems(), new Predicate<MappingItem>() {\n \n                 @Override\n                 public boolean evaluate(final MappingItem item) {"},{"sha":"117722c34291dc109385d91e0fc2e8d4bc1927c8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DBPasswordPropagationActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -20,7 +20,7 @@\n \n import java.util.HashSet;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -88,7 +88,7 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n \n     private String getCipherAlgorithm(final ConnInstance connInstance) {\n         ConnConfProperty cipherAlgorithm =\n-                CollectionUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n+                IterableUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n \n                     @Override\n                     public boolean evaluate(final ConnConfProperty property) {"},{"sha":"55c4a0bd9357ff10fc693393bb0373fb08253e62","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -22,7 +22,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n@@ -44,7 +44,7 @@ public class DefaultPropagationReporter implements PropagationReporter {\n     protected final List<PropagationStatus> statuses = new ArrayList<>();\n \n     protected boolean add(final PropagationStatus status) {\n-        return CollectionUtils.exists(statuses, new Predicate<PropagationStatus>() {\n+        return IterableUtils.matchesAny(statuses, new Predicate<PropagationStatus>() {\n \n             @Override\n             public boolean evaluate(final PropagationStatus item) {\n@@ -83,7 +83,7 @@ public void onSuccessOrNonPriorityResourceFailures(\n     public void onPriorityResourceFailure(final String failingResource, final Collection<PropagationTask> tasks) {\n         LOG.debug(\"Propagation error: {} priority resource failed to propagate\", failingResource);\n \n-        final PropagationTask propagationTask = CollectionUtils.find(tasks, new Predicate<PropagationTask>() {\n+        final PropagationTask propagationTask = IterableUtils.find(tasks, new Predicate<PropagationTask>() {\n \n             @Override\n             public boolean evaluate(final PropagationTask task) {"},{"sha":"1447f43b41a87d81036d57dc1dfa3a01cee8a7d5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -20,7 +20,7 @@\n \n import java.util.HashSet;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -94,7 +94,7 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n \n     private String getCipherAlgorithm(final ConnInstance connInstance) {\n         ConnConfProperty cipherAlgorithm =\n-                CollectionUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n+                IterableUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n \n                     @Override\n                     public boolean evaluate(final ConnConfProperty property) {"},{"sha":"6e8af5903ee4b832500c2e19f8208936628d8396","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DBPasswordSyncActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n@@ -108,7 +108,7 @@ private void parseEncodedPassword(final String password, final Connector connect\n \n     private String getCipherAlgorithm(final ConnInstance connInstance) {\n         ConnConfProperty cipherAlgorithm =\n-                CollectionUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n+                IterableUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n \n                     @Override\n                     public boolean evaluate(final ConnConfProperty property) {"},{"sha":"4cf1b548348b7ea90b39a65ae96a836a8391d3b4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -22,7 +22,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n@@ -110,7 +110,7 @@ public class LDAPMembershipSyncActions extends DefaultSyncActions {\n      * @return the name of the attribute used to keep track of group memberships\n      */\n     protected String getGroupMembershipAttrName(final Connector connector) {\n-        ConnConfProperty groupMembership = CollectionUtils.find(connector.getConnInstance().getConf(),\n+        ConnConfProperty groupMembership = IterableUtils.find(connector.getConnInstance().getConf(),\n                 new Predicate<ConnConfProperty>() {\n \n                     @Override"},{"sha":"a11dcfa5b5fff7ce81787058d448b52a968c660f","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUtils.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.activiti;\n \n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -28,7 +28,7 @@ public class ActivitiUtils {\n \n     @Transactional(readOnly = true)\n     public boolean isUserIngroup(final User user, final Long groupKey) {\n-        return CollectionUtils.exists(user.getMemberships(), new Predicate<UMembership>() {\n+        return IterableUtils.matchesAny(user.getMemberships(), new Predicate<UMembership>() {\n \n             @Override\n             public boolean evaluate(final UMembership membership) {"},{"sha":"dbe1bd1aebec30224c72e43e2de5242e53dbe3a8","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSyncActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -45,7 +45,7 @@ public <A extends AnyTO> SyncDelta beforeProvision(\n \n         AttrTO attrTO = null;\n         for (int i = 0; i < any.getPlainAttrs().size(); i++) {\n-            AttrTO plainAttr = CollectionUtils.get(any.getPlainAttrs(), i);\n+            AttrTO plainAttr = IterableUtils.get(any.getPlainAttrs(), i);\n             if (\"fullname\".equals(plainAttr.getSchema())) {\n                 attrTO = plainAttr;\n             }"},{"sha":"c0991a420072110c039d3022fcbabd6114a4281f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -33,7 +33,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n@@ -170,7 +170,7 @@ protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n-        return CollectionUtils.find(tasks.getResult(), new Predicate<NotificationTaskTO>() {\n+        return IterableUtils.find(tasks.getResult(), new Predicate<NotificationTaskTO>() {\n \n             @Override\n             public boolean evaluate(final NotificationTaskTO task) {"},{"sha":"a7f74ee48323238fc431b04c4d57e47bed6479c8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -31,6 +31,7 @@\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -226,7 +227,7 @@ public Long transform(final UserTO input) {\n                 new AnySearchQuery.Builder().realm(\"/even/two\").\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query()).build());\n         assertNotNull(matchedUsers);\n-        assertTrue(CollectionUtils.matchesAll(matchedUsers.getResult(), new Predicate<UserTO>() {\n+        assertTrue(IterableUtils.matchesAll(matchedUsers.getResult(), new Predicate<UserTO>() {\n \n             @Override\n             public boolean evaluate(final UserTO matched) {\n@@ -398,7 +399,7 @@ public void anyTypeEntitlement() {\n         final String anyTypeKey = \"FOLDER \" + getUUIDString();\n \n         // 1. no entitlement exists (yet) for the any type to be created\n-        assertFalse(CollectionUtils.exists(syncopeService.info().getEntitlements(), new Predicate<String>() {\n+        assertFalse(IterableUtils.matchesAny(syncopeService.info().getEntitlements(), new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String entitlement) {\n@@ -424,7 +425,7 @@ public boolean evaluate(final String entitlement) {\n         anyTypeService.create(anyTypeTO);\n \n         // 2. now entitlement exists for the any type just created\n-        assertTrue(CollectionUtils.exists(syncopeService.info().getEntitlements(), new Predicate<String>() {\n+        assertTrue(IterableUtils.matchesAny(syncopeService.info().getEntitlements(), new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String entitlement) {"},{"sha":"e346e955193a71c7d2d1fc0145db46358638dedb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/CLIITCase.java","status":"modified","additions":24,"deletions":23,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCLIITCase.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -29,6 +29,7 @@\n import java.util.List;\n import java.util.Properties;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.SystemUtils;\n@@ -108,14 +109,14 @@ public void entitlementCount() {\n             PROCESS_BUILDER.command(getCommand(\"entitlement\", \"--list\"));\n             Process process = PROCESS_BUILDER.start();\n \n-            int entitlements = CollectionUtils.countMatches(IOUtils.readLines(process.getInputStream()),\n+            long entitlements = IterableUtils.countMatches(IOUtils.readLines(process.getInputStream()),\n                     new Predicate<String>() {\n \n-                        @Override\n-                        public boolean evaluate(final String line) {\n-                            return line.startsWith(\"-\");\n-                        }\n-                    });\n+                @Override\n+                public boolean evaluate(final String line) {\n+                    return line.startsWith(\"-\");\n+                }\n+            });\n             assertEquals(syncopeService.info().getEntitlements().size(), entitlements);\n \n             process.destroy();\n@@ -130,14 +131,14 @@ public void connectorCount() {\n             PROCESS_BUILDER.command(getCommand(\"connector\", \"--list-bundles\"));\n             Process process = PROCESS_BUILDER.start();\n \n-            int bundles = CollectionUtils.countMatches(IOUtils.readLines(process.getInputStream()),\n+            long bundles = IterableUtils.countMatches(IOUtils.readLines(process.getInputStream()),\n                     new Predicate<String>() {\n \n-                        @Override\n-                        public boolean evaluate(final String line) {\n-                            return line.startsWith(\" > BUNDLE NAME:\");\n-                        }\n-                    });\n+                @Override\n+                public boolean evaluate(final String line) {\n+                    return line.startsWith(\" > BUNDLE NAME:\");\n+                }\n+            });\n             assertEquals(connectorService.getBundles(null).size(), bundles);\n \n             process.destroy();\n@@ -155,30 +156,30 @@ public void userRead() {\n         final long userId5 = 5;\n         try {\n             PROCESS_BUILDER.command(getCommand(\"user\", \"--read\", String.valueOf(userId1)));\n-            final Process process = PROCESS_BUILDER.start();\n-            final String result = IOUtils.toString(process.getInputStream());\n+            Process process = PROCESS_BUILDER.start();\n+            String result = IOUtils.toString(process.getInputStream());\n             assertTrue(result.contains(\"username: \" + userService.read(userId1).getUsername()));\n             process.destroy();\n \n             PROCESS_BUILDER.command(getCommand(\"user\", \"--read\", String.valueOf(userId1), String.valueOf(userId2),\n                     String.valueOf(userId3), String.valueOf(userId4), String.valueOf(userId5)));\n-            final Process process2 = PROCESS_BUILDER.start();\n-            int users = CollectionUtils.countMatches(IOUtils.readLines(process2.getInputStream()),\n+            Process process2 = PROCESS_BUILDER.start();\n+            long users = IterableUtils.countMatches(IOUtils.readLines(process2.getInputStream()),\n                     new Predicate<String>() {\n \n-                        @Override\n-                        public boolean evaluate(final String line) {\n-                            return line.startsWith(\" > USER ID:\");\n-                        }\n-                    });\n+                @Override\n+                public boolean evaluate(final String line) {\n+                    return line.startsWith(\" > USER ID:\");\n+                }\n+            });\n             assertEquals(5, users);\n \n             process2.destroy();\n \n             PROCESS_BUILDER.command(getCommand(\"user\", \"--read\", String.valueOf(userId1), String.valueOf(userId2),\n                     String.valueOf(userId3), String.valueOf(userId4), String.valueOf(userId5)));\n-            final Process process3 = PROCESS_BUILDER.start();\n-            final String result3 = IOUtils.toString(process3.getInputStream());\n+            Process process3 = PROCESS_BUILDER.start();\n+            String result3 = IOUtils.toString(process3.getInputStream());\n             assertTrue(\n                     result3.contains(\"username: \" + userService.read(userId1).getUsername())\n                     && result3.contains(\"username: \" + userService.read(userId2).getUsername())"},{"sha":"0ef0dd50b37f65eee0f224b553e02030c95c2f69","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/CamelRouteITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -22,7 +22,7 @@\n import static org.junit.Assert.assertNotNull;\n \n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n@@ -166,7 +166,7 @@ public void scriptingUpdate() {\n \n             userTO = createUser(userTO).getAny();\n             assertNotNull(userTO);\n-            assertEquals(\"true\", CollectionUtils.get(userTO.getPlainAttrs(), 3).getValues().get(0));\n+            assertEquals(\"true\", IterableUtils.get(userTO.getPlainAttrs(), 3).getValues().get(0));\n         } finally {\n             doUpdate(oldRoute.getKey(), oldRoute.getContent());\n         }"},{"sha":"811d2bd2d736e24a76ace668769ccdef9eb4d54f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -36,7 +36,7 @@\n import javax.naming.directory.SearchResult;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -198,7 +198,7 @@ public void selfRead() {\n \n         List<GroupTO> groups = groupService2.own();\n         assertNotNull(groups);\n-        assertTrue(CollectionUtils.exists(groups, new Predicate<GroupTO>() {\n+        assertTrue(IterableUtils.matchesAny(groups, new Predicate<GroupTO>() {\n \n             @Override\n             public boolean evaluate(final GroupTO group) {"},{"sha":"edd32ec4e6f2dbe0505c08f5427e31603050fcc5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PlainSchemaITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -28,7 +28,7 @@\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -172,15 +172,15 @@ public void listByAnyTypeClass() {\n         List<PlainSchemaTO> userSchemas = schemaService.list(\n                 new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClass(clazz).build());\n \n-        assertTrue(CollectionUtils.exists(userSchemas, new Predicate<PlainSchemaTO>() {\n+        assertTrue(IterableUtils.matchesAny(userSchemas, new Predicate<PlainSchemaTO>() {\n \n             @Override\n             public boolean evaluate(final PlainSchemaTO object) {\n                 return \"fullname\".equals(object.getKey());\n             }\n         }));\n \n-        assertFalse(CollectionUtils.exists(userSchemas, new Predicate<PlainSchemaTO>() {\n+        assertFalse(IterableUtils.matchesAny(userSchemas, new Predicate<PlainSchemaTO>() {\n \n             @Override\n             public boolean evaluate(final PlainSchemaTO object) {"},{"sha":"11892afbd4e8eeaaa8700c3b9fa80e08a1945962","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RealmITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -27,7 +27,7 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -44,7 +44,7 @@\n public class RealmITCase extends AbstractITCase {\n \n     private RealmTO getRealm(final String fullPath) {\n-        return CollectionUtils.find(realmService.list(fullPath), new Predicate<RealmTO>() {\n+        return IterableUtils.find(realmService.list(fullPath), new Predicate<RealmTO>() {\n \n             @Override\n             public boolean evaluate(final RealmTO object) {\n@@ -105,7 +105,7 @@ public void createUpdate() {\n         assertNotNull(actual);\n         assertEquals(\"/odd/last\", actual.getFullPath());\n \n-        assertEquals(1, CollectionUtils.countMatches(realmService.list(), new Predicate<RealmTO>() {\n+        assertEquals(1, IterableUtils.countMatches(realmService.list(), new Predicate<RealmTO>() {\n \n             @Override\n             public boolean evaluate(final RealmTO object) {"},{"sha":"db9156ae28d0881fb242a357756d1bd6cf462ecf","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SearchITCase.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -26,6 +26,7 @@\n import java.util.Collection;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -107,7 +108,7 @@ public void searchByGroup() {\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n-        assertTrue(CollectionUtils.exists(matchingUsers.getResult(), new Predicate<UserTO>() {\n+        assertTrue(IterableUtils.matchesAny(matchingUsers.getResult(), new Predicate<UserTO>() {\n \n             @Override\n             public boolean evaluate(final UserTO user) {\n@@ -130,7 +131,7 @@ public void searchByDynGroup() {\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n-        assertTrue(CollectionUtils.exists(matchingUsers.getResult(), new Predicate<UserTO>() {\n+        assertTrue(IterableUtils.matchesAny(matchingUsers.getResult(), new Predicate<UserTO>() {\n \n             @Override\n             public boolean evaluate(final UserTO user) {\n@@ -148,7 +149,7 @@ public void searchByRole() {\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n-        assertTrue(CollectionUtils.exists(matchingUsers.getResult(), new Predicate<UserTO>() {\n+        assertTrue(IterableUtils.matchesAny(matchingUsers.getResult(), new Predicate<UserTO>() {\n \n             @Override\n             public boolean evaluate(final UserTO user) {\n@@ -172,7 +173,7 @@ public void searchByDynRole() {\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n-        assertTrue(CollectionUtils.exists(matchingUsers.getResult(), new Predicate<UserTO>() {\n+        assertTrue(IterableUtils.matchesAny(matchingUsers.getResult(), new Predicate<UserTO>() {\n \n             @Override\n             public boolean evaluate(final UserTO user) {\n@@ -190,7 +191,7 @@ public void searchUserByResourceName() {\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n-        assertTrue(CollectionUtils.exists(matchingUsers.getResult(), new Predicate<UserTO>() {\n+        assertTrue(IterableUtils.matchesAny(matchingUsers.getResult(), new Predicate<UserTO>() {\n \n             @Override\n             public boolean evaluate(final UserTO user) {\n@@ -283,7 +284,7 @@ public void searchByRelationship() {\n                         inRelationships(2L).query()).\n                 build());\n         assertNotNull(anyObjects);\n-        assertTrue(CollectionUtils.exists(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n+        assertTrue(IterableUtils.matchesAny(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n \n             @Override\n             public boolean evaluate(final AnyObjectTO anyObject) {\n@@ -296,7 +297,7 @@ public boolean evaluate(final AnyObjectTO anyObject) {\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inRelationships(1L).query()).\n                 build());\n         assertNotNull(users);\n-        assertTrue(CollectionUtils.exists(users.getResult(), new Predicate<UserTO>() {\n+        assertTrue(IterableUtils.matchesAny(users.getResult(), new Predicate<UserTO>() {\n \n             @Override\n             public boolean evaluate(final UserTO user) {\n@@ -313,14 +314,14 @@ public void searchByRelationshipType() {\n                         inRelationshipTypes(\"neighborhood\").query()).\n                 build());\n         assertNotNull(anyObjects);\n-        assertTrue(CollectionUtils.exists(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n+        assertTrue(IterableUtils.matchesAny(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n \n             @Override\n             public boolean evaluate(final AnyObjectTO anyObject) {\n                 return anyObject.getKey() == 1L;\n             }\n         }));\n-        assertTrue(CollectionUtils.exists(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n+        assertTrue(IterableUtils.matchesAny(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n \n             @Override\n             public boolean evaluate(final AnyObjectTO anyObject) {\n@@ -333,7 +334,7 @@ public boolean evaluate(final AnyObjectTO anyObject) {\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inRelationshipTypes(\"neighborhood\").query()).\n                 build());\n         assertNotNull(users);\n-        assertTrue(CollectionUtils.exists(users.getResult(), new Predicate<UserTO>() {\n+        assertTrue(IterableUtils.matchesAny(users.getResult(), new Predicate<UserTO>() {\n \n             @Override\n             public boolean evaluate(final UserTO user) {\n@@ -350,14 +351,14 @@ public void assignable() {\n                         and(\"name\").equalTo(\"*\").query()).\n                 build());\n         assertNotNull(groups);\n-        assertTrue(CollectionUtils.exists(groups.getResult(), new Predicate<GroupTO>() {\n+        assertTrue(IterableUtils.matchesAny(groups.getResult(), new Predicate<GroupTO>() {\n \n             @Override\n             public boolean evaluate(final GroupTO group) {\n                 return group.getKey() == 15L;\n             }\n         }));\n-        assertFalse(CollectionUtils.exists(groups.getResult(), new Predicate<GroupTO>() {\n+        assertFalse(IterableUtils.matchesAny(groups.getResult(), new Predicate<GroupTO>() {\n \n             @Override\n             public boolean evaluate(final GroupTO group) {\n@@ -371,7 +372,7 @@ public boolean evaluate(final GroupTO group) {\n                         and(\"name\").equalTo(\"*\").query()).\n                 build());\n         assertNotNull(anyObjects);\n-        assertFalse(CollectionUtils.exists(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n+        assertFalse(IterableUtils.matchesAny(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n \n             @Override\n             public boolean evaluate(final AnyObjectTO anyObject) {"},{"sha":"eeabd8f1997800fc0208915664495c5f11102911","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -30,7 +30,7 @@\n import java.util.Map;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -199,7 +199,7 @@ public void sync() throws Exception {\n \n             // Unmatching --> Assign (link) - SYNCOPE-658\n             assertTrue(userTO.getResources().contains(RESOURCE_NAME_CSV));\n-            assertEquals(1, CollectionUtils.countMatches(userTO.getDerAttrs(), new Predicate<AttrTO>() {\n+            assertEquals(1, IterableUtils.countMatches(userTO.getDerAttrs(), new Predicate<AttrTO>() {\n \n                 @Override\n                 public boolean evaluate(final AttrTO attributeTO) {\n@@ -382,7 +382,7 @@ public void reconcileFromScriptedSQL() {\n         try {\n             provision.setSyncToken(null);\n \n-            MappingItemTO mappingItem = CollectionUtils.find(\n+            MappingItemTO mappingItem = IterableUtils.find(\n                     provision.getMapping().getItems(), new Predicate<MappingItemTO>() {\n \n                 @Override"},{"sha":"4ed8c84ba93edf221fe0200fc2fb3beeaa738b6e","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2030cd27b072c12ca640ea83b0848e5463f46710/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2030cd27b072c12ca640ea83b0848e5463f46710/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=2030cd27b072c12ca640ea83b0848e5463f46710","patch":"@@ -357,7 +357,7 @@ under the License.\n     <commons-codec.version>1.10</commons-codec.version>\n     <commons-jexl.version>2.1.1</commons-jexl.version>\n     <commons-lang.version>3.4</commons-lang.version>\n-    <commons-collection.version>4.0</commons-collection.version>\n+    <commons-collection.version>4.1</commons-collection.version>\n     <commons-logging.version>1.1.3</commons-logging.version>\n \n     <h2.version>1.4.190</h2.version>"}]}