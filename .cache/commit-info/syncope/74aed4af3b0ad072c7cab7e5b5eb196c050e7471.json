{"sha":"74aed4af3b0ad072c7cab7e5b5eb196c050e7471","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc0YWVkNGFmM2IwYWQwNzJjN2NhYjdlNWI1ZWIxOTZjMDUwZTc0NzE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-13T10:30:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-13T15:16:51Z"},"message":"[SYNCOPE-652] More tests and console support","tree":{"sha":"d474a194dcdf16a369ac2853f0a1b36e0712f540","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d474a194dcdf16a369ac2853f0a1b36e0712f540"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/74aed4af3b0ad072c7cab7e5b5eb196c050e7471","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/74aed4af3b0ad072c7cab7e5b5eb196c050e7471","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/74aed4af3b0ad072c7cab7e5b5eb196c050e7471","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"feba6991edfa551d02bec421b2ec576e083755ec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/feba6991edfa551d02bec421b2ec576e083755ec","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/feba6991edfa551d02bec421b2ec576e083755ec"}],"stats":{"total":718,"additions":602,"deletions":116},"files":[{"sha":"8d716457a2e933a5660834e9152a0312219d1302","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":39,"deletions":4,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -19,19 +19,27 @@\n package org.apache.syncope.client.console;\n \n import java.text.DateFormat;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.DomainTO;\n import org.apache.syncope.common.lib.to.SyncopeTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.Session;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n@@ -51,12 +59,16 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeConsoleSession.class);\n \n-    private final SyncopeClientFactoryBean clientFactory;\n-\n     private final String version;\n \n     private final SyncopeTO syncopeTO;\n \n+    private final List<String> domains;\n+\n+    private String domain;\n+\n+    private final SyncopeClientFactoryBean clientFactory;\n+\n     private final Map<Class<?>, Object> services = Collections.synchronizedMap(new HashMap<Class<?>, Object>());\n \n     private SyncopeClient client;\n@@ -88,7 +100,18 @@ public SyncopeConsoleSession(final Request request) {\n \n         version = ctx.getBean(\"version\", String.class);\n \n-        syncopeTO = clientFactory.create(anonymousUser, anonymousKey).getService(SyncopeService.class).info();\n+        SyncopeClient anonymousClient = clientFactory.create(anonymousUser, anonymousKey);\n+        syncopeTO = anonymousClient.getService(SyncopeService.class).info();\n+        domains = new ArrayList<>();\n+        domains.add(SyncopeConstants.MASTER_DOMAIN);\n+        CollectionUtils.collect(anonymousClient.getService(DomainService.class).list(),\n+                new Transformer<DomainTO, String>() {\n+\n+                    @Override\n+                    public String transform(final DomainTO domain) {\n+                        return domain.getKey();\n+                    }\n+                }, domains);\n     }\n \n     public String getVersion() {\n@@ -99,12 +122,24 @@ public SyncopeTO getSyncopeTO() {\n         return syncopeTO;\n     }\n \n+    public List<String> getDomains() {\n+        return domains;\n+    }\n+\n+    public void setDomain(final String domain) {\n+        this.domain = domain;\n+    }\n+\n+    public String getDomain() {\n+        return StringUtils.isBlank(domain) ? SyncopeConstants.MASTER_DOMAIN : domain;\n+    }\n+\n     @Override\n     public boolean authenticate(final String username, final String password) {\n         boolean authenticated = false;\n \n         try {\n-            client = clientFactory.create(username, password);\n+            client = clientFactory.setDomain(getDomain()).create(username, password);\n \n             Pair<Map<String, Set<String>>, UserTO> self = client.self();\n             auth = self.getKey();"},{"sha":"a6e737bcb1c412369b7bc4439050974bf0693b57","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -92,11 +92,12 @@ public BasePage(final PageParameters parameters) {\n         liContainer = new WebMarkupContainer(getLIContainerId(\"realms\"));\n         add(liContainer);\n         liContainer.add(new BookmarkablePageLink<>(\"realms\", Realms.class));\n-        \n+\n         liContainer = new WebMarkupContainer(getLIContainerId(\"topology\"));\n         add(liContainer);\n         liContainer.add(new BookmarkablePageLink<>(\"topology\", Topology.class));\n-        \n+\n+        add(new Label(\"domain\", SyncopeConsoleSession.get().getDomain()));\n         add(new BookmarkablePageLink<Page>(\"logout\", Logout.class));\n \n         // set 'active' menu item"},{"sha":"8d9d5ff67e8a3bb5c6c2600327a873340cee1979","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java","status":"modified","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -21,8 +21,10 @@\n import java.security.AccessControlException;\n import java.util.Locale;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.NotificationPanel;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.authentication.IAuthenticationStrategy;\n@@ -56,6 +58,8 @@ public class Login extends WebPage {\n \n     private final DropDownChoice<Locale> languageSelect;\n \n+    private final DropDownChoice<String> domainSelect;\n+\n     public Login(final PageParameters parameters) {\n         super(parameters);\n         setStatelessHint(true);\n@@ -76,6 +80,12 @@ public Login(final PageParameters parameters) {\n         languageSelect = new LocaleDropDown(\"language\");\n         form.add(languageSelect);\n \n+        domainSelect = new DomainDropDown(\"domain\");\n+        if (SyncopeConsoleSession.get().getDomains().size() == 1) {\n+            domainSelect.setOutputMarkupPlaceholderTag(true);\n+        }\n+        form.add(domainSelect);\n+\n         AjaxButton submitButton = new AjaxButton(\"submit\", new Model<>(getString(\"submit\"))) {\n \n             private static final long serialVersionUID = 429178684321093953L;\n@@ -157,4 +167,43 @@ protected boolean wantOnSelectionChangedNotifications() {\n         }\n     }\n \n+    /**\n+     * Inner class which implements (custom) Domain DropDownChoice component.\n+     */\n+    private class DomainDropDown extends DropDownChoice<String> {\n+\n+        private static final long serialVersionUID = -7401167913360133325L;\n+\n+        public DomainDropDown(final String id) {\n+            super(id, SyncopeConsoleSession.get().getDomains());\n+\n+            setModel(new IModel<String>() {\n+\n+                private static final long serialVersionUID = -1124206668056084806L;\n+\n+                @Override\n+                public String getObject() {\n+                    return SyncopeConsoleSession.get().getDomain();\n+                }\n+\n+                @Override\n+                public void setObject(final String object) {\n+                    SyncopeConsoleSession.get().setDomain(object);\n+                }\n+\n+                @Override\n+                public void detach() {\n+                    // Empty.\n+                }\n+            });\n+\n+            // set default value to Master Domain\n+            getModel().setObject(SyncopeConstants.MASTER_DOMAIN);\n+        }\n+\n+        @Override\n+        protected boolean wantOnSelectionChangedNotifications() {\n+            return true;\n+        }\n+    }\n }"},{"sha":"011d51951f76896fc0fcd5fc5bc76f2090446c04","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -40,15 +40,11 @@\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n public class Realms extends BasePage {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(Realms.class);\n-\n     @SpringBean\n     private RealmRestClient realmRestClient;\n "},{"sha":"0e6fe2c5898b4f5910c3ffcbb7b6d525619092c4","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/BaseRestClient.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -28,9 +28,6 @@\n \n public abstract class BaseRestClient implements Serializable {\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(BaseRestClient.class);\n \n     private static final long serialVersionUID = 1523999867826481989L;"},{"sha":"6ea095dda44c9a03dc2d1b7932e15fc29969665f","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/RealmRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -25,7 +25,7 @@\n import org.springframework.stereotype.Component;\n \n /**\n- * Console client for invoking Rest Group's services.\n+ * Console client for invoking REST Realm's services.\n  */\n @Component\n public class RealmRestClient extends BaseRestClient {"},{"sha":"3a874b8408bc063c109fcc19f092861283de5e4a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/BasePage.html","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -63,6 +63,13 @@\n           <a href=\"#\" class=\"sidebar-toggle\" data-toggle=\"offcanvas\" role=\"button\">\n             <span class=\"sr-only\">Toggle navigation</span>\n           </a>\n+          <ul class=\"nav navbar-nav\">\n+            <li>\n+              <a href=\"#\" class=\"dropdown-toggle\">\n+                <span class=\"hidden-xs\"><label wicket:id=\"domain\"/></span>\n+              </a>\n+            </li>\n+          </ul>\n           <div class=\"navbar-custom-menu\">\n             <ul class=\"nav navbar-nav\">\n "},{"sha":"e6230dba61abaa0dc67d39bfdd86a45e74305054","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Login.html","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.html?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -51,6 +51,7 @@\n           <input type=\"password\" wicket:id=\"password\" id=\"password\" class=\"form-control\" \n                  wicket:message=\"placeholder:password\" required=\"required\" />\n           <select wicket:id=\"language\" id=\"language\" class=\"selectpicker\"/>\n+          <select wicket:id=\"domain\" id=\"domain\" class=\"selectpicker\"/>\n           <button wicket:id=\"submit\" type=\"submit\" \n                   class=\"btn btn-lg btn-primary btn-block btn-signin\"><wicket:message key=\"submit\"/></button>\n         </form>"},{"sha":"ccb4fcec95f9529289b1b7f58ffff5889dfcafe4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -28,8 +28,6 @@ public final class Entitlement {\n \n     public static final String ANONYMOUS = \"ANONYMOUS\";\n \n-    public static final String DOMAIN_LIST = \"DOMAIN_LIST\";\n-\n     public static final String DOMAIN_CREATE = \"DOMAIN_CREATE\";\n \n     public static final String DOMAIN_READ = \"DOMAIN_READ\";"},{"sha":"c946fb1e9df72ca460ec37b638a4a00e749b4e33","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -27,6 +27,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.DomainTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n@@ -38,6 +39,9 @@\n @Component\n public class DomainLogic extends AbstractTransactionalLogic<DomainTO> {\n \n+    @Autowired\n+    private DomainsHolder domainsHolder;\n+\n     @Autowired\n     private DomainDataBinder binder;\n \n@@ -57,8 +61,7 @@ public DomainTO read(final String key) {\n         return binder.getDomainTO(domain);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_LIST + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    @PreAuthorize(\"isAuthenticated()\")\n     public List<DomainTO> list() {\n         return CollectionUtils.collect(domainDAO.findAll(), new Transformer<Domain, DomainTO>() {\n \n@@ -72,6 +75,10 @@ public DomainTO transform(final Domain input) {\n     @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_CREATE + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public DomainTO create(final DomainTO domainTO) {\n+        if (!domainsHolder.getDomains().keySet().contains(domainTO.getKey())) {\n+            throw new NotFoundException(\"No configuration is available for domain '\" + domainTO.getKey());\n+        }\n+\n         return binder.getDomainTO(domainDAO.save(binder.create(domainTO)));\n     }\n "},{"sha":"d7a4dd719614812d4fc3b251fdea552c1b3ecd67","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -99,7 +99,8 @@ public LoggerTO transform(final Logger logger) {\n         }, new ArrayList<LoggerTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_LIST + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n     public List<LoggerTO> listLogs() {\n         return list(LoggerType.LOG);\n@@ -165,7 +166,8 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_SET_LEVEL + \"')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_SET_LEVEL + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public LoggerTO setLogLevel(final String name, final Level level) {\n         return setLevel(name, level, LoggerType.LOG);\n     }\n@@ -206,7 +208,8 @@ private LoggerTO delete(final String name, final LoggerType expectedType) {\n         return loggerToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_DELETE + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public LoggerTO deleteLog(final String name) {\n         return delete(name, LoggerType.LOG);\n     }"},{"sha":"f95f7ed40e791f11cfc271e0a8c9739cebac32c7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -50,7 +50,6 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -89,9 +88,6 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private ConnectorFactory connFactory;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n     @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_CREATE + \"')\")\n     public ResourceTO create(final ResourceTO resourceTO) {\n         if (StringUtils.isBlank(resourceTO.getKey())) {"},{"sha":"23740d631f9e55435e508a954736f1d663f523d4","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/AccountPolicyEnforcer.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -25,11 +25,10 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class AccountPolicyEnforcer implements PolicyEnforcer<AccountPolicySpec, User> {\n+public class AccountPolicyEnforcer {\n \n     private static final Pattern DEFAULT_PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n \n-    @Override\n     public boolean enforce(final AccountPolicySpec policy, final PolicyType type, final User user) {\n         if (user.getUsername() == null) {\n             throw new PolicyEnforceException(\"Invalid account\");"},{"sha":"1458bf3952980c61c457dd221880494cc1c96170","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PasswordPolicyEnforcer.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -24,9 +24,8 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class PasswordPolicyEnforcer implements PolicyEnforcer<PasswordPolicySpec, User> {\n+public class PasswordPolicyEnforcer {\n \n-    @Override\n     public boolean enforce(final PasswordPolicySpec policy, final PolicyType type, final User user) {\n         final String clearPassword = user.getClearPassword();\n         final String password = user.getPassword();"},{"sha":"86e658388b3d2005c4d041f91cae0b5c143970ae","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PolicyEnforcer.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEnforcer.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -1,35 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.misc.policy;\n-\n-import org.apache.syncope.common.lib.types.PolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-\n-public interface PolicyEnforcer<T extends PolicySpec, E> {\n-\n-    /**\n-     * Check the given entity to see if it conforms with the indicated policy.\n-     *\n-     * @param policy\n-     * @param type\n-     * @param entity\n-     * @return whether user is to be suspended\n-     */\n-    boolean enforce(final T policy, final PolicyType type, final E entity);\n-}"},{"sha":"f6324a18c2959fd6e3d2a86355d82abf006e503d","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthDataAccessor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n@@ -59,6 +58,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.AuthenticationServiceException;\n import org.springframework.security.authentication.DisabledException;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n@@ -110,7 +110,7 @@ public class AuthDataAccessor {\n     public Domain findDomain(final String key) {\n         Domain domain = domainDAO.find(key);\n         if (domain == null) {\n-            throw new NotFoundException(\"Could not find domain \" + key);\n+            throw new AuthenticationServiceException(\"Could not find domain \" + key);\n         }\n         return domain;\n     }"},{"sha":"9514f275b8575d31c8f76159c7e8e065dbc076a3","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/PasswordGenerator.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -56,9 +56,7 @@ public class PasswordGenerator {\n     @Autowired\n     private RealmDAO realmDAO;\n \n-    public String generate(final List<PasswordPolicySpec> ppSpecs)\n-            throws InvalidPasswordPolicySpecException {\n-\n+    public String generate(final List<PasswordPolicySpec> ppSpecs) throws InvalidPasswordPolicySpecException {\n         PasswordPolicySpec policySpec = merge(ppSpecs);\n \n         check(policySpec);"},{"sha":"a447f2980e66a5fce79bb48ef360682f3da7eea6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DomainTest.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class DomainTest extends AbstractTest {\n+\n+    @Autowired\n+    private DomainDAO domainDAO;\n+\n+    @Test\n+    public void find() {\n+        Domain two = domainDAO.find(\"Two\");\n+        assertNotNull(two);\n+        assertEquals(CipherAlgorithm.SHA, two.getAdminCipherAlgorithm());\n+\n+        assertNull(domainDAO.find(\"none\"));\n+    }\n+\n+    @Test\n+    public void findAll() {\n+        List<Domain> list = domainDAO.findAll();\n+        assertNotNull(list);\n+        assertFalse(list.isEmpty());\n+        for (Domain domain : list) {\n+            assertNotNull(domain);\n+        }\n+    }\n+\n+    @Test\n+    public void save() {\n+        Domain domain = entityFactory.newEntity(Domain.class);\n+        domain.setKey(\"new\");\n+        domain.setPassword(\"password\", CipherAlgorithm.SSHA512);\n+\n+        Domain actual = domainDAO.save(domain);\n+        assertNotNull(actual);\n+        assertEquals(CipherAlgorithm.SSHA512, actual.getAdminCipherAlgorithm());\n+        assertNotEquals(\"password\", actual.getAdminPwd());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        Domain domain = entityFactory.newEntity(Domain.class);\n+        domain.setKey(\"todelete\");\n+        domain.setPassword(\"password\", CipherAlgorithm.SSHA512);\n+\n+        Domain actual = domainDAO.save(domain);\n+        assertNotNull(actual);\n+\n+        String key = actual.getKey();\n+        assertNotNull(domainDAO.find(key));\n+\n+        domainDAO.delete(key);\n+        assertNull(domainDAO.find(key));\n+    }\n+}"},{"sha":"39cdae23c361f52fbc264923b5b2ff0af3739970","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -121,4 +121,14 @@ under the License.\n                 traceLevel=\"FAILURES\"/> \n   <Notification_events Notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n \n+  <ConnInstance id=\"100\" bundleName=\"net.tirasa.connid.bundles.ldap\" displayName=\"LDAP\"\n+                location=\"${connid.location}\"\n+                connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n+                version=\"${connid.ldap.version}\" \n+                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"blockSize\",\"displayName\":\"Block Size\",\"helpMessage\":\"The maximum number of accounts that can be in a block when retrieving accounts in blocks.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"useBlocks\",\"displayName\":\"Use Blocks\",\"helpMessage\":\"When performing operations on large numbers of accounts, the accounts are processed in blocks to reduce the amount of memory used by the operation. Select this option to process accounts in blocks.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[false]},{\"schema\":{\"name\":\"usePagedResultControl\",\"displayName\":\"Use Paged Result Control\",\"helpMessage\":\"When enabled, the LDAP Paged Results control is preferred over the VLV control when retrieving accounts.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"truemaintainLdapGroupMembership\"]}]'/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"ONE_PHASE_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"ONE_PHASE_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"ONE_PHASE_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"SEARCH\"/>\n+  \n </dataset>"},{"sha":"e54d33ecd004da5f6eca9fa80155936e8517b063","filename":"fit/core-reference/src/main/webapp/db.jsp","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Fmain%2Fwebapp%2Fdb.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Fmain%2Fwebapp%2Fdb.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fwebapp%2Fdb.jsp?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -30,7 +30,6 @@ under the License.\n         } catch (SQLException e) {\n             getServletConfig().getServletContext().log(\"Could not start H2 web console (datastore)\", e);\n         }\n-\n-        response.sendRedirect(\"http://localhost:8082\");\n     }\n+    response.sendRedirect(\"http://localhost:8082\");\n %>\n\\ No newline at end of file"},{"sha":"871155a094f2bb66686d255acbeb341c93150e75","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n+import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n@@ -86,20 +87,15 @@\n @ContextConfiguration(locations = { \"classpath:testJDBCContext.xml\" })\n public abstract class AbstractITCase {\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractITCase.class);\n \n     protected static final String ADMIN_UNAME = \"admin\";\n \n     protected static final String ADMIN_PWD = \"password\";\n \n-    private static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n+    protected static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n \n-    private static final String ENV_KEY_CONTENT_TYPE = \"jaxrsContentType\";\n-\n-    protected static final SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS);\n+    protected static final String ENV_KEY_CONTENT_TYPE = \"jaxrsContentType\";\n \n     protected static final String RESOURCE_NAME_WS1 = \"ws-target-resource-1\";\n \n@@ -151,10 +147,14 @@ public abstract class AbstractITCase {\n \n     protected static String ANONYMOUS_KEY;\n \n+    protected static SyncopeClientFactoryBean clientFactory;\n+\n     protected static SyncopeClient adminClient;\n \n     protected static SyncopeService syncopeService;\n \n+    protected static DomainService domainService;\n+\n     protected static AnyTypeClassService anyTypeClassService;\n \n     protected static AnyTypeService anyTypeService;\n@@ -224,7 +224,9 @@ public static void securitySetup() {\n \n     @BeforeClass\n     public static void restSetup() {\n-        final String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n+        clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS);\n+\n+        String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n         if (StringUtils.isNotBlank(envContentType)) {\n             clientFactory.setContentType(envContentType);\n         }\n@@ -233,6 +235,7 @@ public static void restSetup() {\n         adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n \n         syncopeService = adminClient.getService(SyncopeService.class);\n+        domainService = adminClient.getService(DomainService.class);\n         anyTypeClassService = adminClient.getService(AnyTypeClassService.class);\n         anyTypeService = adminClient.getService(AnyTypeService.class);\n         relationshipTypeService = adminClient.getService(RelationshipTypeService.class);"},{"sha":"2d9dae1ab3f4e73afad43a9b5cc08ebbf10f69b0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n \n public abstract class AbstractTaskITCase extends AbstractITCase {\n \n@@ -51,24 +52,27 @@ protected static class ThreadExec implements Callable<TaskExecTO> {\n \n         private final AbstractTaskITCase test;\n \n+        private final TaskService taskService;\n+\n         private final Long taskKey;\n \n         private final int maxWaitSeconds;\n \n         private final boolean dryRun;\n \n-        public ThreadExec(\n-                final AbstractTaskITCase test, final Long taskKey, final int maxWaitSeconds, final boolean dryRun) {\n+        public ThreadExec(final AbstractTaskITCase test, final TaskService taskService, final Long taskKey,\n+                final int maxWaitSeconds, final boolean dryRun) {\n \n             this.test = test;\n+            this.taskService = taskService;\n             this.taskKey = taskKey;\n             this.maxWaitSeconds = maxWaitSeconds;\n             this.dryRun = dryRun;\n         }\n \n         @Override\n         public TaskExecTO call() throws Exception {\n-            return test.execProvisioningTask(taskKey, maxWaitSeconds, dryRun);\n+            return test.execProvisioningTask(taskService, taskKey, maxWaitSeconds, dryRun);\n         }\n     }\n \n@@ -87,7 +91,9 @@ protected void removeTestUsers() {\n         }\n     }\n \n-    protected TaskExecTO execProvisioningTask(final Long taskKey, final int maxWaitSeconds, final boolean dryRun) {\n+    public static TaskExecTO execProvisioningTask(\n+            final TaskService taskService, final Long taskKey, final int maxWaitSeconds, final boolean dryRun) {\n+\n         AbstractTaskTO taskTO = taskService.read(taskKey);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n@@ -119,14 +125,14 @@ protected TaskExecTO execProvisioningTask(final Long taskKey, final int maxWaitS\n         return taskTO.getExecutions().get(taskTO.getExecutions().size() - 1);\n     }\n \n-    protected Map<Long, TaskExecTO> execProvisioningTasks(\n+    protected Map<Long, TaskExecTO> execProvisioningTasks(final TaskService taskService,\n             final Set<Long> taskKeys, final int maxWaitSeconds, final boolean dryRun) throws Exception {\n \n         ExecutorService service = Executors.newFixedThreadPool(taskKeys.size());\n         List<Future<TaskExecTO>> futures = new ArrayList<>();\n \n         for (Long key : taskKeys) {\n-            futures.add(service.submit(new ThreadExec(this, key, maxWaitSeconds, dryRun)));\n+            futures.add(service.submit(new ThreadExec(this, taskService, key, maxWaitSeconds, dryRun)));\n         }\n \n         Map<Long, TaskExecTO> res = new HashMap<>();"},{"sha":"44ebf33320987153b3ca60fa21c7d9b4522c4570","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConnectorITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -193,7 +193,7 @@ public void create() {\n         assertNotNull(actual);\n         assertEquals(EnumSet.of(ConnectorCapability.ONE_PHASE_CREATE, ConnectorCapability.TWO_PHASES_CREATE),\n                 actual.getCapabilities());\n-        assertEquals(10, actual.getPoolConf().getMaxObjects().intValue());\n+        assertEquals(10, actual.getPoolConf().getMaxObjects(), 0);\n \n         // check also for the deletion of the created object\n         try {\n@@ -232,7 +232,7 @@ public void update() {\n         connectorTO.setConnRequestTimeout(20);\n \n         // set the connector configuration using PropertyTO\n-        Set<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n+        Set<ConnConfProperty> conf = new HashSet<>();\n \n         ConnConfPropSchema endpointSchema = new ConnConfPropSchema();\n         endpointSchema.setName(\"endpoint\");\n@@ -685,7 +685,7 @@ public void reload() {\n \n     @Test\n     public void bulkAction() {\n-        final BulkAction bulkAction = new BulkAction();\n+        BulkAction bulkAction = new BulkAction();\n         bulkAction.setType(BulkAction.Type.DELETE);\n \n         ConnInstanceTO conn = connectorService.read(101L);\n@@ -727,7 +727,6 @@ public void bulkAction() {\n \n     @Test\n     public void issueSYNCOPE605() {\n-\n         ConnInstanceTO connectorInstanceTO = connectorService.read(103L);\n         assertTrue(connectorInstanceTO.getCapabilities().isEmpty());\n "},{"sha":"e6b1984847a95dd7d58d3b7f271c34d3a7376a50","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/DomainITCase.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDomainITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDomainITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDomainITCase.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import java.security.AccessControlException;\n+import java.util.List;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.DomainTO;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class DomainITCase extends AbstractITCase {\n+\n+    @Test\n+    public void list() {\n+        List<DomainTO> domains = domainService.list();\n+        assertNotNull(domains);\n+        assertFalse(domains.isEmpty());\n+        for (DomainTO domain : domains) {\n+            assertNotNull(domain);\n+        }\n+    }\n+\n+    @Test\n+    public void create() {\n+        DomainTO domain = new DomainTO();\n+        domain.setKey(\"last\");\n+        domain.setAdminCipherAlgorithm(CipherAlgorithm.SSHA512);\n+        domain.setAdminPwd(\"password\");\n+\n+        try {\n+            domainService.create(domain);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void update() {\n+        DomainTO two = domainService.read(\"Two\");\n+        assertNotNull(two);\n+        DomainTO origTwo = SerializationUtils.clone(two);\n+\n+        try {\n+            // 1. change admin pwd for domain Two\n+            two.setAdminCipherAlgorithm(CipherAlgorithm.AES);\n+            two.setAdminPwd(\"password3\");\n+            domainService.update(two);\n+\n+            // 2. attempt to access with old pwd -> fail\n+            try {\n+                new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(\"Two\").\n+                        create(ADMIN_UNAME, \"password2\").self();\n+            } catch (AccessControlException e) {\n+                assertNotNull(e);\n+            }\n+\n+            // 3. access with new pwd -> succeed\n+            new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(\"Two\").\n+                    create(ADMIN_UNAME, \"password3\").self();\n+        } finally {\n+            // restore old password\n+            domainService.create(origTwo);\n+        }\n+    }\n+\n+    @Test\n+    public void delete() {\n+        DomainTO two = domainService.read(\"Two\");\n+        assertNotNull(two);\n+\n+        try {\n+            domainService.delete(two.getKey());\n+\n+            try {\n+                domainService.read(two.getKey());\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.NotFound, e.getType());\n+            }\n+        } finally {\n+            // restore old password\n+            two.setAdminPwd(\"password2\");\n+            domainService.create(two);\n+        }\n+    }\n+}"},{"sha":"dda5f52cd81d8987eca0a871fb09c9ac7e77cdaa","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/MultitenancyITCase.java","status":"added","additions":214,"deletions":0,"changes":214,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.security.AccessControlException;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.service.ConnectorService;\n+import org.apache.syncope.common.rest.api.service.DomainService;\n+import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.common.rest.api.service.RealmService;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class MultitenancyITCase extends AbstractITCase {\n+\n+    @BeforeClass\n+    public static void restSetup() {\n+        clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(\"Two\");\n+\n+        String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n+        if (StringUtils.isNotBlank(envContentType)) {\n+            clientFactory.setContentType(envContentType);\n+        }\n+        LOG.info(\"Performing IT with content type {}\", clientFactory.getContentType().getMediaType());\n+\n+        adminClient = clientFactory.create(ADMIN_UNAME, \"password2\");\n+    }\n+\n+    @Test\n+    public void masterOnly() {\n+        try {\n+            adminClient.getService(DomainService.class).read(\"Two\");\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        try {\n+            adminClient.getService(LoggerService.class).list(LoggerType.LOG);\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        adminClient.getService(LoggerService.class).list(LoggerType.AUDIT);\n+    }\n+\n+    @Test\n+    public void readPlainSchemas() {\n+        assertEquals(18, adminClient.getService(SchemaService.class).list(SchemaType.PLAIN).size());\n+    }\n+\n+    @Test\n+    public void readRealm() {\n+        List<RealmTO> realms = adminClient.getService(RealmService.class).list();\n+        assertEquals(1, realms.size());\n+        assertEquals(SyncopeConstants.ROOT_REALM, realms.get(0).getName());\n+    }\n+\n+    @Test\n+    public void createUser() {\n+        assertNull(adminClient.getService(RealmService.class).list().get(0).getPasswordPolicy());\n+\n+        UserTO user = new UserTO();\n+        user.setRealm(SyncopeConstants.ROOT_REALM);\n+        user.setUsername(getUUIDString());\n+        user.setPassword(\"password\");\n+\n+        Response response = adminClient.getService(UserService.class).create(user);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(UserTO.class);\n+        assertNotNull(user);\n+    }\n+\n+    @Test\n+    public void createResourceAndSync() {\n+        // read connector\n+        ConnInstanceTO conn = adminClient.getService(ConnectorService.class).read(100L);\n+        assertNotNull(conn);\n+        assertEquals(\"LDAP\", conn.getDisplayName());\n+\n+        // prepare resource\n+        ResourceTO resource = new ResourceTO();\n+        resource.setKey(\"new-ldap-resource\");\n+        resource.setConnector(conn.getKey());\n+\n+        ProvisionTO provisionTO = new ProvisionTO();\n+        provisionTO.setAnyType(AnyTypeKind.USER.name());\n+        provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+        resource.getProvisions().add(provisionTO);\n+\n+        MappingTO mapping = new MappingTO();\n+        mapping.setConnObjectLink(\"'uid=' + username + ',ou=people,o=isp'\");\n+        provisionTO.setMapping(mapping);\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntAttrName(\"username\");\n+        item.setIntMappingType(IntMappingType.Username);\n+        item.setExtAttrName(\"cn\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.setConnObjectKeyItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setPassword(true);\n+        item.setIntMappingType(IntMappingType.Password);\n+        item.setExtAttrName(\"userPassword\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+        item.setMandatoryCondition(\"true\");\n+        mapping.add(item);\n+\n+        item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.UserKey);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        item.setExtAttrName(\"sn\");\n+        item.setMandatoryCondition(\"true\");\n+        mapping.add(item);\n+\n+        item = new MappingItemTO();\n+        item.setIntAttrName(\"email\");\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        item.setExtAttrName(\"mail\");\n+        mapping.add(item);\n+\n+        // create resource\n+        Response response = adminClient.getService(ResourceService.class).create(resource);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+        resource = adminClient.getService(ResourceService.class).read(resource.getKey());\n+        assertNotNull(resource);\n+\n+        // create sync task\n+        SyncTaskTO task = new SyncTaskTO();\n+        task.setName(\"LDAP Sync Task\");\n+        task.setDestinationRealm(\"/\");\n+        task.setResource(resource.getKey());\n+        task.setFullReconciliation(true);\n+        task.setPerformCreate(true);\n+\n+        response = adminClient.getService(TaskService.class).create(task);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+        task = adminClient.getService(TaskService.class).read(\n+                Long.valueOf(StringUtils.substringAfterLast(response.getLocation().toASCIIString(), \"/\")));\n+        assertNotNull(resource);\n+\n+        // synchronize\n+        TaskExecTO execution = AbstractTaskITCase.execProvisioningTask(\n+                adminClient.getService(TaskService.class), task.getKey(), 50, false);\n+\n+        // verify execution status\n+        String status = execution.getStatus();\n+        assertNotNull(status);\n+        assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n+\n+        // verify that synchronized user is found\n+        PagedResult<UserTO> matchingUsers = adminClient.getService(UserService.class).search(\n+                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query()).\n+                build());\n+        assertNotNull(matchingUsers);\n+        assertEquals(1, matchingUsers.getResult().size());\n+    }\n+}"},{"sha":"dff129ec6449a955946eae58bbb673118aa3bee8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -121,12 +121,12 @@ public void createPushTask() {\n     public void pushMatchingUnmatchingGroups() {\n         assertFalse(groupService.read(3L).getResources().contains(RESOURCE_NAME_LDAP));\n \n-        execProvisioningTask(23L, 50, false);\n+        execProvisioningTask(taskService, 23L, 50, false);\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), 3L));\n         assertTrue(groupService.read(3L).getResources().contains(RESOURCE_NAME_LDAP));\n \n-        execProvisioningTask(23L, 50, false);\n+        execProvisioningTask(taskService, 23L, 50, false);\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), 3L));\n         assertFalse(groupService.read(3L).getResources().contains(RESOURCE_NAME_LDAP));\n@@ -145,7 +145,7 @@ public void pushUnmatchingUsers() throws Exception {\n         // ------------------------------------------\n         // Unmatching --> Assign --> dryRuyn\n         // ------------------------------------------\n-        execProvisioningTask(13L, 50, true);\n+        execProvisioningTask(taskService, 13L, 50, true);\n         assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='vivaldi'\").size());\n         assertFalse(userService.read(3L).getResources().contains(RESOURCE_NAME_TESTDB2));\n         // ------------------------------------------\n@@ -155,7 +155,7 @@ public void pushUnmatchingUsers() throws Exception {\n         pushTaskIds.add(14L);\n         pushTaskIds.add(15L);\n         pushTaskIds.add(16L);\n-        execProvisioningTasks(pushTaskIds, 50, false);\n+        execProvisioningTasks(taskService, pushTaskIds, 50, false);\n \n         // ------------------------------------------\n         // Unatching --> Ignore\n@@ -200,7 +200,7 @@ public void pushMatchingUser() throws Exception {\n         // ------------------------------------------\n         // Matching --> Deprovision --> dryRuyn\n         // ------------------------------------------\n-        execProvisioningTask(19L, 50, true);\n+        execProvisioningTask(taskService, 19L, 50, true);\n         assertTrue(userService.read(1L).getResources().contains(RESOURCE_NAME_TESTDB2));\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n         // ------------------------------------------\n@@ -210,7 +210,7 @@ public void pushMatchingUser() throws Exception {\n         pushTaskKeys.add(19L);\n         pushTaskKeys.add(16L);\n \n-        execProvisioningTasks(pushTaskKeys, 50, false);\n+        execProvisioningTasks(taskService, pushTaskKeys, 50, false);\n \n         // ------------------------------------------\n         // Matching --> Deprovision && Ignore\n@@ -231,7 +231,7 @@ public void pushMatchingUser() throws Exception {\n         // ------------------------------------------\n         // Matching --> Link\n         // ------------------------------------------\n-        execProvisioningTask(20L, 50, false);\n+        execProvisioningTask(taskService, 20L, 50, false);\n         assertTrue(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n         // ------------------------------------------\n@@ -240,7 +240,7 @@ public void pushMatchingUser() throws Exception {\n         pushTaskKeys.add(21L);\n         pushTaskKeys.add(22L);\n \n-        execProvisioningTasks(pushTaskKeys, 50, false);\n+        execProvisioningTasks(taskService, pushTaskKeys, 50, false);\n \n         // ------------------------------------------\n         // Matching --> Unlink && Update\n@@ -325,7 +325,7 @@ public void issueSYNCOPE598() {\n             assertNotNull(push);\n \n             // execute the new task\n-            TaskExecTO pushExec = execProvisioningTask(push.getKey(), 50, false);\n+            TaskExecTO pushExec = execProvisioningTask(taskService, push.getKey(), 50, false);\n             assertTrue(PropagationTaskExecStatus.valueOf(pushExec.getStatus()).isSuccessful());\n         } finally {\n             groupService.delete(groupTO.getKey());\n@@ -373,7 +373,7 @@ public void issueSYNCOPE648() {\n         notification = getObject(responseNotification.getLocation(), NotificationService.class, NotificationTO.class);\n         assertNotNull(notification);\n \n-        execProvisioningTask(actual.getKey(), 50, false);\n+        execProvisioningTask(taskService, actual.getKey(), 50, false);\n \n         NotificationTaskTO taskTO = findNotificationTaskBySender(\"syncope648@syncope.apache.org\");\n         assertNotNull(taskTO);"},{"sha":"4313c0000e3abc1d8ec896e99b8b9301c3a75f85","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74aed4af3b0ad072c7cab7e5b5eb196c050e7471/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=74aed4af3b0ad072c7cab7e5b5eb196c050e7471","patch":"@@ -163,7 +163,7 @@ public void sync() throws Exception {\n                     page(1).size(1).build()).getTotalCount();\n             assertNotNull(usersPre);\n \n-            execProvisioningTask(SYNC_TASK_ID, 50, false);\n+            execProvisioningTask(taskService, SYNC_TASK_ID, 50, false);\n \n             // after execution of the sync task the user data should have been synced from CSV\n             // and processed by user template\n@@ -234,7 +234,7 @@ public boolean evaluate(final AttrTO attributeTO) {\n             Set<Long> otherSyncTaskKeys = new HashSet<>();\n             otherSyncTaskKeys.add(25L);\n             otherSyncTaskKeys.add(26L);\n-            execProvisioningTasks(otherSyncTaskKeys, 50, false);\n+            execProvisioningTasks(taskService, otherSyncTaskKeys, 50, false);\n \n             // Matching --> UNLINK\n             assertFalse(readUser(\"test9\").getResources().contains(RESOURCE_NAME_CSV));\n@@ -246,15 +246,15 @@ public boolean evaluate(final AttrTO attributeTO) {\n \n     @Test\n     public void dryRun() {\n-        TaskExecTO execution = execProvisioningTask(SYNC_TASK_ID, 50, true);\n+        TaskExecTO execution = execProvisioningTask(taskService, SYNC_TASK_ID, 50, true);\n         assertEquals(\"Execution of task \" + execution.getTask() + \" failed with message \" + execution.getMessage(),\n                 \"SUCCESS\", execution.getStatus());\n     }\n \n     @Test\n     public void reconcileFromDB() {\n         // update sync task\n-        TaskExecTO execution = execProvisioningTask(7L, 50, false);\n+        TaskExecTO execution = execProvisioningTask(taskService, 7L, 50, false);\n         assertNotNull(execution.getStatus());\n         assertTrue(PropagationTaskExecStatus.valueOf(execution.getStatus()).isSuccessful());\n \n@@ -268,7 +268,7 @@ public void reconcileFromDB() {\n         jdbcTemplate.execute(\"UPDATE TEST SET STATUS=TRUE\");\n \n         // re-execute the same SyncTask: now user must be active\n-        execution = execProvisioningTask(7L, 50, false);\n+        execution = execProvisioningTask(taskService, 7L, 50, false);\n         assertNotNull(execution.getStatus());\n         assertTrue(PropagationTaskExecStatus.valueOf(execution.getStatus()).isSuccessful());\n \n@@ -313,21 +313,22 @@ public void reconcileFromLDAP() {\n         ldapCleanup();\n \n         // 0. synchronize\n-        TaskExecTO execution = execProvisioningTask(11L, 50, false);\n+        TaskExecTO execution = execProvisioningTask(taskService, 11L, 50, false);\n \n         // 1. verify execution status\n         String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n-        // 2. verify that synchronized group is found, with expected attributes\n+        // 2. verify that synchronized group is found\n         PagedResult<GroupTO> matchingGroups = groupService.search(\n                 SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query()).\n                 build());\n         assertNotNull(matchingGroups);\n         assertEquals(1, matchingGroups.getResult().size());\n \n+        // 3. verify that synchronized user is found\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query()).\n@@ -351,7 +352,7 @@ public void reconcileFromLDAP() {\n         assertNull(groupTO.getGroupOwner());\n \n         // SYNCOPE-317\n-        execProvisioningTask(11L, 50, false);\n+        execProvisioningTask(taskService, 11L, 50, false);\n     }\n \n     @Test\n@@ -383,7 +384,7 @@ public void reconcileFromScriptedSQL() {\n         }\n \n         // 3. synchronize\n-        execProvisioningTask(28L, 50, false);\n+        execProvisioningTask(taskService, 28L, 50, false);\n \n         // 4. verify that printer was re-created in Syncope\n         matchingPrinters = anyObjectService.search(\n@@ -456,7 +457,7 @@ public void issueSYNCOPE68() {\n             assertFalse(actual.getTemplates().get(AnyTypeKind.USER.name()).getResources().isEmpty());\n             assertFalse(((UserTO) actual.getTemplates().get(AnyTypeKind.USER.name())).getMemberships().isEmpty());\n \n-            TaskExecTO execution = execProvisioningTask(actual.getKey(), 50, false);\n+            TaskExecTO execution = execProvisioningTask(taskService, actual.getKey(), 50, false);\n             final String status = execution.getStatus();\n             assertNotNull(status);\n             assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n@@ -475,7 +476,7 @@ public void issueSYNCOPE68() {\n     @Test\n     public void issueSYNCOPE230() {\n         // 1. read SyncTask for resource-db-sync (table TESTSYNC on external H2)\n-        execProvisioningTask(10L, 50, false);\n+        execProvisioningTask(taskService, 10L, 50, false);\n \n         // 3. read e-mail address for user created by the SyncTask first execution\n         UserTO userTO = readUser(\"issuesyncope230\");\n@@ -488,7 +489,7 @@ public void issueSYNCOPE230() {\n         jdbcTemplate.execute(\"UPDATE TESTSYNC SET email='updatedSYNCOPE230@syncope.apache.org'\");\n \n         // 5. re-execute the SyncTask\n-        execProvisioningTask(10L, 50, false);\n+        execProvisioningTask(taskService, 10L, 50, false);\n \n         // 6. verify that the e-mail was updated\n         userTO = readUser(\"issuesyncope230\");\n@@ -550,7 +551,7 @@ public void issueSYNCOPE258() {\n \n         userService.update(userMod);\n \n-        execProvisioningTask(actual.getKey(), 50, false);\n+        execProvisioningTask(taskService, actual.getKey(), 50, false);\n \n         SyncTaskTO executed = taskService.read(actual.getKey());\n         assertEquals(1, executed.getExecutions().size());\n@@ -574,7 +575,7 @@ public void issueSYNCOPE272() {\n             assertEquals(1, userTO.getPropagationStatusTOs().size());\n             assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n \n-            TaskExecTO taskExecTO = execProvisioningTask(24L, 50, false);\n+            TaskExecTO taskExecTO = execProvisioningTask(taskService, 24L, 50, false);\n \n             assertNotNull(taskExecTO.getStatus());\n             assertTrue(PropagationTaskExecStatus.valueOf(taskExecTO.getStatus()).isSuccessful());\n@@ -623,7 +624,7 @@ public void issueSYNCOPE307() {\n         task.getTemplates().put(AnyTypeKind.USER.name(), template);\n \n         taskService.update(task);\n-        execProvisioningTask(task.getKey(), 50, false);\n+        execProvisioningTask(taskService, task.getKey(), 50, false);\n \n         // check for sync policy\n         userTO = userService.read(userTO.getKey());\n@@ -680,7 +681,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         assertEquals(actual.getKey(), syncTask.getKey());\n         assertEquals(actual.getJobDelegateClassName(), syncTask.getJobDelegateClassName());\n \n-        TaskExecTO execution = execProvisioningTask(syncTask.getKey(), 50, false);\n+        TaskExecTO execution = execProvisioningTask(taskService, syncTask.getKey(), 50, false);\n         final String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n@@ -757,7 +758,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         assertEquals(actual.getKey(), syncTask.getKey());\n         assertEquals(actual.getJobDelegateClassName(), syncTask.getJobDelegateClassName());\n \n-        TaskExecTO execution = execProvisioningTask(syncTask.getKey(), 50, false);\n+        TaskExecTO execution = execProvisioningTask(taskService, syncTask.getKey(), 50, false);\n         String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());"}]}