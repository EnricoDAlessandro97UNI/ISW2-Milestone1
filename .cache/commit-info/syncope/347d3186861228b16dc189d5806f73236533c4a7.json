{"sha":"347d3186861228b16dc189d5806f73236533c4a7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM0N2QzMTg2ODYxMjI4YjE2ZGMxODlkNTgwNmY3MzIzNjUzM2M0YTc=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-07-08T15:26:36Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-07-08T15:26:36Z"},"message":"(Fixes issue 120)(Fixes issue 121)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247016 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8ffae07889c6605ff0271ec6ab4cabe426312b87","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8ffae07889c6605ff0271ec6ab4cabe426312b87"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/347d3186861228b16dc189d5806f73236533c4a7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/347d3186861228b16dc189d5806f73236533c4a7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/347d3186861228b16dc189d5806f73236533c4a7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/347d3186861228b16dc189d5806f73236533c4a7/comments","author":null,"committer":null,"parents":[{"sha":"1e3d57c4f834f32f23d3e9fb0f25b72f73cd1a40","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1e3d57c4f834f32f23d3e9fb0f25b72f73cd1a40","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1e3d57c4f834f32f23d3e9fb0f25b72f73cd1a40"}],"stats":{"total":783,"additions":374,"deletions":409},"files":[{"sha":"aea219e18f3f81ae9b0ad060399365b345efc4f9","filename":"core/src/main/java/org/syncope/core/init/ConnInstanceLoader.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -65,16 +65,11 @@ private DefaultListableBeanFactory getBeanFactory() {\n     }\n \n     public ConnectorInfoManager getConnectorManager()\n-            throws NotFoundException {\n+            throws NotFoundException, MissingConfKeyException {\n \n         // 1. Bundles directory\n-        SyncopeConf connectorBundleDir = null;\n-        try {\n-            connectorBundleDir = confDAO.find(\n-                    \"connid.bundles.directory\");\n-        } catch (MissingConfKeyException e) {\n-            LOG.error(\"Missing configuration\", e);\n-        }\n+        SyncopeConf connectorBundleDir =\n+                confDAO.find(\"connid.bundles.directory\");\n \n         // 2. Find bundles inside that directory\n         File bundleDirectory = new File(connectorBundleDir.getValue());"},{"sha":"9f6ec730335d7b82f5843169e2900344f4fba984","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -27,6 +27,8 @@\n @AttrCheck\n public abstract class AbstractAttr extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -9115431608821806124L;\n+\n     public abstract Long getId();\n \n     public <T extends AbstractAttrValue> T addValue(final String value,\n@@ -36,7 +38,7 @@ public <T extends AbstractAttrValue> T addValue(final String value,\n         T attrValue;\n         if (getSchema().isUniqueConstraint()) {\n             attrValue = (T) attributableUtil.newAttributeUniqueValue();\n-            ((AbstractAttrUniqueValue) attrValue).setSchema(getSchema());\n+            ( (AbstractAttrUniqueValue) attrValue ).setSchema(getSchema());\n         } else {\n             attrValue = (T) attributableUtil.newAttributeValue();\n         }"},{"sha":"e9d41f165684ed45444e840123c3829cbc0816a0","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -111,16 +111,6 @@ public Set<TargetResource> getTargetResources() {\n                 : targetResources;\n     }\n \n-    /**\n-     * Provide al inherited target resources.\n-     * This method must be implemented by all that beans that can be indirectly\n-     * associated to some target resources (SyncopeUser for example).\n-     * @return\n-     */\n-    public Set<TargetResource> getInheritedTargetResources() {\n-        return Collections.EMPTY_SET;\n-    }\n-\n     public void setResources(Set<TargetResource> resources) {\n         this.targetResources = resources;\n     }"},{"sha":"41238fd750f4c87a3e1e3838ce514802e1049406","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -20,14 +20,14 @@\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n import org.apache.commons.jexl2.JexlContext;\n-import org.apache.commons.jexl2.MapContext;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.syncope.core.util.ApplicationContextManager;\n import org.syncope.core.util.JexlUtil;\n \n @MappedSuperclass\n public abstract class AbstractDerAttr extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = 4740924251090424771L;\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     protected Long id;\n@@ -47,16 +47,14 @@ public String getValue(\n \n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n-        JexlUtil jexlUtil = (JexlUtil) context.getBean(\"jexlUtil\");\n+        JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n \n         // Prepare context using user attributes\n-        JexlContext jexlContext = new MapContext();\n-\n-        jexlContext = jexlUtil.addAttributesToContext(\n-                attributes, jexlContext);\n+        JexlContext jexlContext = jexlUtil.addAttributesToContext(\n+                attributes, null);\n \n         // Evaluate expression using the context prepared before\n-        return jexlUtil.evaluateWithAttributes(\n+        return jexlUtil.evaluate(\n                 getDerivedSchema().getExpression(), jexlContext);\n     }\n "},{"sha":"ab362504769209f03ad13fffcdba18dde4114ee5","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractVirAttr.java","status":"modified","additions":102,"deletions":28,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -15,21 +15,29 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Transient;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.syncope.core.persistence.propagation.PropagationManager;\n+import org.syncope.core.init.ConnInstanceLoader;\n+import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n import org.syncope.core.util.ApplicationContextManager;\n+import org.syncope.core.util.JexlUtil;\n import org.syncope.types.SourceMappingType;\n \n @MappedSuperclass\n public abstract class AbstractVirAttr extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = 5023204776925954907L;\n+\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     protected Long id;\n@@ -45,42 +53,108 @@ public void setValues(List<String> values) {\n         this.values = values;\n     }\n \n-    /**\n-     * @see http://commons.apache.org/jexl/reference/index.html\n-     * @return the value of this virtual attribute\n-     */\n-    public List<String> getValues() {\n+    protected <T extends AbstractAttributable> List<Object> retrieveValues(\n+            final T attributable, final String attributeName,\n+            final SourceMappingType sourceMappingType) {\n \n-        LOG.debug(\"{}: retrieve value for attribute {}\",\n-                new Object[]{getOwner(), getVirtualSchema().getName()});\n+        LOG.debug(\"{}: retrieving external values for {}\",\n+                new Object[]{attributable, attributeName});\n \n-        if (values != null) {\n-            return values;\n-        }\n+        List<Object> values;\n \n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n-\n-        PropagationManager propagationManager =\n-                (PropagationManager) context.getBean(\"propagationManager\");\n-\n-        final Set<String> retrievedValues = propagationManager.getObjectAttributeValue(\n-                getOwner(),\n-                getVirtualSchema().getName(),\n-                SourceMappingType.UserVirtualSchema);\n-\n-        LOG.debug(\"Retrieved external values {}\", retrievedValues);\n-\n-        try {\n-\n-            return new ArrayList<String>(retrievedValues);\n-\n-        } catch (Throwable t) {\n-            // NullPointerException and ArrayIndexOutOfBoundsException\n+        ConnInstanceLoader connInstanceLoader =\n+                context.getBean(ConnInstanceLoader.class);\n+        if (connInstanceLoader == null) {\n+            LOG.error(\"Could not get to ConnInstanceLoader\");\n             return null;\n+        } else {\n+            values = new ArrayList<Object>();\n+        }\n+\n+        JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n+\n+        Set<String> attributeNames;\n+        ConnInstance connectorInstance;\n+        ConnectorFacadeProxy connector;\n+        Set<Attribute> attributes;\n+        String accountLink;\n+        String accountId = null;\n+        for (TargetResource resource : attributable.getTargetResources()) {\n+            LOG.debug(\"Retrieving attribute mapped on {}\", resource);\n+\n+            attributeNames = new HashSet<String>();\n+\n+            accountLink = resource.getAccountLink();\n+\n+            for (SchemaMapping mapping : resource.getMappings()) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Processing mapping.\"\n+                            + \"\\n\\tID: \" + mapping.getId()\n+                            + \"\\n\\tSource: \" + mapping.getSourceAttrName()\n+                            + \"\\n\\tDestination: \" + mapping.getDestAttrName()\n+                            + \"\\n\\tType: \" + mapping.getSourceMappingType()\n+                            + \"\\n\\tMandatory condition: \"\n+                            + mapping.getMandatoryCondition()\n+                            + \"\\n\\tAccountId: \" + mapping.isAccountid()\n+                            + \"\\n\\tPassword: \" + mapping.isPassword());\n+                }\n+\n+                if (mapping.getSourceAttrName().equals(attributeName)\n+                        && mapping.getSourceMappingType() == sourceMappingType) {\n+\n+                    attributeNames.add(mapping.getDestAttrName());\n+                }\n+\n+                if (mapping.isAccountid()) {\n+                    try {\n+                        accountId = attributable.getAttribute(\n+                                mapping.getSourceAttrName()).\n+                                getValuesAsStrings().get(0);\n+                    } catch (NullPointerException e) {\n+                        // ignore exception\n+                        LOG.debug(\"Invalid accountId specified\", e);\n+                    }\n+                }\n+            }\n+\n+            if (accountId == null && accountLink != null) {\n+                accountId = jexlUtil.evaluate(accountLink, attributable);\n+            }\n+\n+            if (attributeNames != null && accountId != null) {\n+                LOG.debug(\"Get object attribute for entry {}\", accountId);\n+\n+                connectorInstance = resource.getConnector();\n+\n+                connector = connInstanceLoader.getConnector(\n+                        connectorInstance.getId().toString());\n+\n+                try {\n+                    attributes = connector.getObjectAttributes(\n+                            ObjectClass.ACCOUNT,\n+                            new Uid(accountId),\n+                            null,\n+                            attributeNames);\n+\n+                    LOG.debug(\"Retrieved {}\", attributes);\n+\n+                    for (Attribute attribute : attributes) {\n+                        values.addAll(attribute.getValue());\n+                    }\n+                } catch (Exception e) {\n+                    LOG.warn(\"Error connecting to {}\", resource.getName(), e);\n+                    // ignore exception and go ahead\n+                }\n+            }\n         }\n+\n+        return values;\n     }\n \n+    public abstract List<String> getValues();\n+\n     public abstract <T extends AbstractAttributable> T getOwner();\n \n     public abstract <T extends AbstractAttributable> void setOwner(T owner);"},{"sha":"e91e2ac188ea9b69e13764f638eb71cf1d3db8e6","filename":"core/src/main/java/org/syncope/core/persistence/beans/Task.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -42,6 +42,8 @@\n @Entity\n public class Task extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = 7086054884614511210L;\n+\n     /**\n      * Id.\n      */\n@@ -126,7 +128,7 @@ public Set<Attribute> getAttributes() {\n \n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n-        XStream xStream = (XStream) context.getBean(\"xStream\");\n+        XStream xStream = context.getBean(XStream.class);\n         try {\n             result = (Set<Attribute>) xStream.fromXML(\n                     URLDecoder.decode(xmlAttributes, \"UTF-8\"));\n@@ -140,7 +142,7 @@ public Set<Attribute> getAttributes() {\n     public void setAttributes(final Set<Attribute> attributes) {\n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n-        XStream xStream = (XStream) context.getBean(\"xStream\");\n+        XStream xStream = context.getBean(XStream.class);\n         try {\n             xmlAttributes = URLEncoder.encode(\n                     xStream.toXML(attributes), \"UTF-8\");"},{"sha":"4c4b7e8b403bceb9a846ebe77be65f09e3344115","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MVirAttr.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -14,6 +14,8 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n+import java.util.Collections;\n+import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n@@ -24,11 +26,13 @@\n @Entity\n public class MVirAttr extends AbstractVirAttr {\n \n+    private static final long serialVersionUID = 7774760571251641332L;\n+\n     @ManyToOne\n     private Membership owner;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n-    MVirSchema virtualSchema;\n+    private MVirSchema virtualSchema;\n \n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n@@ -51,4 +55,9 @@ public <T extends AbstractVirSchema> void setVirtualSchema(\n \n         this.virtualSchema = (MVirSchema) virtualSchema;\n     }\n+\n+    @Override\n+    public List<String> getValues() {\n+        return Collections.EMPTY_LIST;\n+    }\n }"},{"sha":"58f3523dcf9ecd2fbdbb3e13d3b716e4101e8ecf","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -42,6 +42,8 @@\n }))\n public class Membership extends AbstractAttributable {\n \n+    private static final long serialVersionUID = 5030106264797289469L;\n+\n     @Id\n     private Long id;\n \n@@ -64,6 +66,8 @@ public class Membership extends AbstractAttributable {\n     private List<MVirAttr> virtualAttributes;\n \n     public Membership() {\n+        super();\n+\n         attributes = new ArrayList<MAttr>();\n         derivedAttributes = new ArrayList<MDerAttr>();\n         virtualAttributes = new ArrayList<MVirAttr>();"},{"sha":"e36ff52bed6b50202032ab467f172c781c61be59","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RVirAttr.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -14,6 +14,8 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n+import java.util.Collections;\n+import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n@@ -24,11 +26,13 @@\n @Entity\n public class RVirAttr extends AbstractVirAttr {\n \n+    private static final long serialVersionUID = -1747430556914428649L;\n+\n     @ManyToOne\n     private SyncopeRole owner;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n-    RVirSchema virtualSchema;\n+    private RVirSchema virtualSchema;\n \n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n@@ -51,4 +55,9 @@ public <T extends AbstractVirSchema> void setVirtualSchema(\n \n         this.virtualSchema = (RVirSchema) virtualSchema;\n     }\n+\n+    @Override\n+    public List<String> getValues() {\n+        return Collections.EMPTY_LIST;\n+    }\n }"},{"sha":"66b202336cbf445c5b5a074d5d24561089088c92","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -48,6 +48,8 @@\n @Cacheable\n public class SyncopeRole extends AbstractAttributable {\n \n+    private static final long serialVersionUID = -5281258853142421875L;\n+\n     @Id\n     private Long id;\n "},{"sha":"ec410b2af624253607a5b8e894d980318935384a","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":16,"deletions":26,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -52,14 +52,14 @@\n @Cacheable\n public class SyncopeUser extends AbstractAttributable {\n \n+    private static final long serialVersionUID = -3905046855521446823L;\n+\n     private static SecretKeySpec keySpec;\n \n     static {\n         try {\n-\n             keySpec = new SecretKeySpec(\n                     \"1abcdefghilmnopqrstuvz2!\".getBytes(\"UTF8\"), \"AES\");\n-\n         } catch (Exception e) {\n             LOG.error(\"Error during key specification\", e);\n         }\n@@ -97,9 +97,11 @@ public class SyncopeUser extends AbstractAttributable {\n \n     @Column(nullable = true)\n     @Enumerated(STRING)\n-    CipherAlgorithm cipherAlgorithm;\n+    private CipherAlgorithm cipherAlgorithm;\n \n     public SyncopeUser() {\n+        super();\n+\n         memberships = new ArrayList<Membership>();\n         attributes = new ArrayList<UAttr>();\n         derivedAttributes = new ArrayList<UDerAttr>();\n@@ -121,9 +123,8 @@ public boolean removeMembership(Membership membership) {\n \n     public Membership getMembership(Long syncopeRoleId) {\n         Membership result = null;\n-        Membership membership = null;\n-        for (Iterator<Membership> itor =\n-                getMemberships().iterator();\n+        Membership membership;\n+        for (Iterator<Membership> itor = getMemberships().iterator();\n                 result == null && itor.hasNext();) {\n \n             membership = itor.next();\n@@ -152,34 +153,23 @@ public Set<SyncopeRole> getRoles() {\n         Set<SyncopeRole> result = new HashSet<SyncopeRole>();\n \n         for (Membership membership : memberships) {\n-            result.add(membership.getSyncopeRole());\n+            if (membership.getSyncopeRole() != null) {\n+                result.add(membership.getSyncopeRole());\n+            }\n         }\n \n         return result;\n     }\n \n     @Override\n-    public Set<TargetResource> getInheritedTargetResources() {\n-        Set<TargetResource> inheritedTargetResources =\n-                new HashSet<TargetResource>();\n-\n-        SyncopeRole role = null;\n-\n-        for (Membership membership : memberships) {\n-            role = membership.getSyncopeRole();\n-\n-            try {\n-\n-                inheritedTargetResources.addAll(role.getTargetResources());\n-\n-            } catch (Throwable t) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Invalid role \" + role, t);\n-                }\n-            }\n+    public Set<TargetResource> getTargetResources() {\n+        Set<TargetResource> result = new HashSet<TargetResource>();\n+        result.addAll(super.getTargetResources());\n+        for (SyncopeRole role : getRoles()) {\n+            result.addAll(role.getTargetResources());\n         }\n \n-        return inheritedTargetResources;\n+        return result;\n     }\n \n     public String getPassword() {"},{"sha":"1d6cc1822c9e6836f3dbde4b0eba559ef2308a52","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UVirAttr.java","status":"modified","additions":30,"deletions":1,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -14,21 +14,26 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n+import org.syncope.types.SourceMappingType;\n \n @Entity\n public class UVirAttr extends AbstractVirAttr {\n \n+    private static final long serialVersionUID = 2943450934283989741L;\n+\n     @ManyToOne\n     private SyncopeUser owner;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n-    UVirSchema virtualSchema;\n+    private UVirSchema virtualSchema;\n \n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n@@ -51,4 +56,28 @@ public <T extends AbstractVirSchema> void setVirtualSchema(\n \n         this.virtualSchema = (UVirSchema) virtualSchema;\n     }\n+\n+    @Override\n+    public List<String> getValues() {\n+        LOG.debug(\"{}: retrieve value for attribute {}\",\n+                new Object[]{getOwner(), getVirtualSchema().getName()});\n+\n+        if (values != null) {\n+            return values;\n+        }\n+\n+        final List<Object> retrievedValues =\n+                retrieveValues(getOwner(),\n+                getVirtualSchema().getName(),\n+                SourceMappingType.UserVirtualSchema);\n+\n+        LOG.debug(\"Retrieved external values {}\", retrievedValues);\n+\n+        List<String> stringValues = new ArrayList<String>();\n+        for (Object value : retrievedValues) {\n+            stringValues.add(value.toString());\n+        }\n+\n+        return stringValues;\n+    }\n }"},{"sha":"d11235b1835b73d02f57760c24a95de53d67e21f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -89,18 +89,6 @@ public List<SyncopeRole> findChildren(final Long roleId) {\n         return query.getResultList();\n     }\n \n-    private List<Long> getAncestors(final SyncopeRole role,\n-            final List<Long> ancestors) {\n-\n-        ancestors.add(role.getId());\n-\n-        if (role.getParent() != null && role.isInheritAttributes()) {\n-            return getAncestors(role.getParent(), ancestors);\n-        }\n-\n-        return ancestors;\n-    }\n-\n     @Override\n     public List<SyncopeRole> findAll() {\n         Query query = entityManager.createQuery(\"SELECT e FROM SyncopeRole e\");"},{"sha":"74d066ac1c07bd59ce5d2085c98231f93300a6f2","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ConnectorFacadeProxy.java","status":"modified","additions":21,"deletions":15,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -37,6 +37,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.util.ClassUtils;\n import org.syncope.core.init.ConnInstanceLoader;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.types.ConnConfProperty;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.types.ConnectorCapability;\n@@ -55,10 +56,12 @@ public class ConnectorFacadeProxy {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(\n             ConnectorFacadeProxy.class);\n+\n     /**\n      * Connector facade wrapped instance.\n      */\n     private final ConnectorFacade connector;\n+\n     /**\n      * Set of configure connecto instance capabilities.\n      * @see org.syncope.core.persistence.beans.ConnInstance\n@@ -98,10 +101,15 @@ public ConnectorFacadeProxy(final ConnInstance connInstance,\n         }\n \n         // get the specified connector.\n-        ConnectorInfo info = connInstanceLoader.getConnectorManager().\n-                findConnectorInfo(key);\n-        if (info == null) {\n-            throw new NotFoundException(\"Connector Info for key \" + key);\n+        ConnectorInfo info;\n+        try {\n+            info = connInstanceLoader.getConnectorManager().\n+                    findConnectorInfo(key);\n+            if (info == null) {\n+                throw new NotFoundException(\"Connector Info for key \" + key);\n+            }\n+        } catch (MissingConfKeyException e) {\n+            throw new NotFoundException(\"Connector Info for key \" + key, e);\n         }\n \n         // create default configuration\n@@ -183,8 +191,7 @@ public ConnectorFacadeProxy(final ConnInstance connInstance,\n \n                     properties.setPropertyValue(\n                             property.getSchema().getName(), propertyValue);\n-                }\n-                catch (Throwable t) {\n+                } catch (Throwable t) {\n                     LOG.error(\"Invalid ConnConfProperty specified: {}\",\n                             property, t);\n                 }\n@@ -316,23 +323,23 @@ public ConnectorObject getObject(\n                 switch (operationType) {\n                     case CREATE:\n                         if (propagationMode == null\n-                                || ( propagationMode == PropagationMode.SYNC\n+                                || (propagationMode == PropagationMode.SYNC\n                                 ? capabitilies.contains(\n                                 ConnectorCapability.SYNC_CREATE)\n                                 : capabitilies.contains(\n-                                ConnectorCapability.ASYNC_CREATE) )) {\n+                                ConnectorCapability.ASYNC_CREATE))) {\n \n                             result = connector.getObject(\n                                     objectClass, uid, options);\n                         }\n                         break;\n                     case UPDATE:\n                         if (propagationMode == null\n-                                || ( propagationMode == PropagationMode.SYNC\n+                                || (propagationMode == PropagationMode.SYNC\n                                 ? capabitilies.contains(\n                                 ConnectorCapability.SYNC_UPDATE)\n                                 : capabitilies.contains(\n-                                ConnectorCapability.ASYNC_UPDATE) )) {\n+                                ConnectorCapability.ASYNC_UPDATE))) {\n \n                             result = connector.getObject(\n                                     objectClass, uid, options);\n@@ -365,8 +372,7 @@ public Attribute getObjectAttribute(\n \n             attribute = object.getAttributeByName(attributeName);\n \n-        }\n-        catch (NullPointerException e) {\n+        } catch (NullPointerException e) {\n             // ignore exception\n             LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n         }\n@@ -384,14 +390,14 @@ public Set<Attribute> getObjectAttributes(\n \n         try {\n \n-            final ConnectorObject object = connector.getObject(objClass, uid, options);\n+            final ConnectorObject object = connector.getObject(objClass, uid,\n+                    options);\n \n             for (String attribute : attributeNames) {\n                 attributes.add(object.getAttributeByName(attribute));\n             }\n \n-        }\n-        catch (NullPointerException e) {\n+        } catch (NullPointerException e) {\n             // ignore exception\n             LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n         }"},{"sha":"a8a804c8380ca6dcb09be482706aa1381efb3ecf","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":7,"deletions":133,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -27,8 +27,6 @@\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n-import org.apache.commons.jexl2.JexlContext;\n-import org.apache.commons.jexl2.MapContext;\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -44,7 +42,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n-import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n@@ -53,7 +50,6 @@\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TaskExecution;\n-import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n@@ -166,16 +162,9 @@ public void create(final SyncopeUser user,\n             mandatoryResourceNames = Collections.EMPTY_SET;\n         }\n \n-        Set<TargetResource> resources = new HashSet<TargetResource>();\n-        for (TargetResource resource : user.getTargetResources()) {\n-            resources.add(resource);\n-        }\n-        for (Membership membership : user.getMemberships()) {\n-            resources.addAll(membership.getSyncopeRole().getTargetResources());\n-        }\n-\n         ResourceOperations resourceOperations = new ResourceOperations();\n-        resourceOperations.set(ResourceOperationType.CREATE, resources);\n+        resourceOperations.set(ResourceOperationType.CREATE,\n+                user.getTargetResources());\n \n         provision(user, password, resourceOperations, mandatoryResourceNames);\n     }\n@@ -224,16 +213,9 @@ public void delete(SyncopeUser user, Set<String> mandatoryResourceNames)\n             mandatoryResourceNames = Collections.EMPTY_SET;\n         }\n \n-        Set<TargetResource> resources = new HashSet<TargetResource>();\n-        for (TargetResource resource : user.getTargetResources()) {\n-            resources.add(resource);\n-        }\n-        for (Membership membership : user.getMemberships()) {\n-            resources.addAll(membership.getSyncopeRole().getTargetResources());\n-        }\n-\n         ResourceOperations resourceOperations = new ResourceOperations();\n-        resourceOperations.set(ResourceOperationType.DELETE, resources);\n+        resourceOperations.set(ResourceOperationType.DELETE,\n+                user.getTargetResources());\n \n         provision(user, null, resourceOperations, mandatoryResourceNames);\n     }\n@@ -344,7 +326,8 @@ private Class getSourceMappingTypeClass(\n     }\n \n     private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n-            String password, TargetResource resource) throws PropagationException {\n+            String password, TargetResource resource)\n+            throws PropagationException {\n \n         LOG.debug(\"Preparing resource attributes for {}\"\n                 + \" on resource {}\"\n@@ -600,7 +583,7 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n \n         // Evaluate AccountLink expression\n         String evaluatedAccountLink =\n-                evaluateAccountLink(user, resource.getAccountLink());\n+                jexlUtil.evaluate(resource.getAccountLink(), user);\n \n         // AccountId must be propagated. It could be a simple attribute for\n         // the target resource or the key (depending on the accountLink)\n@@ -773,113 +756,4 @@ public void propagate(final TaskExecution execution) {\n             }\n         }\n     }\n-\n-    public <T extends AbstractAttributable> Set<String> getObjectAttributeValue(\n-            final T attributable,\n-            final String attributeName,\n-            final SourceMappingType sourceMappingType) {\n-\n-        List values = new ArrayList();\n-\n-        Set<String> attributeNames;\n-        ConnInstance connectorInstance;\n-        ConnectorFacadeProxy connector;\n-        Set<Attribute> attributes;\n-        String accountLink;\n-        String accountId = null;\n-\n-        LOG.debug(\"{}: retrieving external values for {}\",\n-                new Object[]{attributable, attributeName});\n-\n-        for (TargetResource resource :\n-                attributable.getInheritedTargetResources()) {\n-\n-            LOG.debug(\"Retrieving attribute mapped on {}\", resource);\n-\n-            attributeNames = new HashSet<String>();\n-\n-            accountLink = resource.getAccountLink();\n-\n-            for (SchemaMapping mapping : resource.getMappings()) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Processing mapping.\"\n-                            + \"\\n\\tID: \" + mapping.getId()\n-                            + \"\\n\\tSource: \" + mapping.getSourceAttrName()\n-                            + \"\\n\\tDestination: \" + mapping.getDestAttrName()\n-                            + \"\\n\\tType: \" + mapping.getSourceMappingType()\n-                            + \"\\n\\tMandatory condition: \"\n-                            + mapping.getMandatoryCondition()\n-                            + \"\\n\\tAccountId: \" + mapping.isAccountid()\n-                            + \"\\n\\tPassword: \" + mapping.isPassword());\n-                }\n-\n-                if (mapping.getSourceAttrName().equals(attributeName)\n-                        && mapping.getSourceMappingType() == sourceMappingType) {\n-\n-                    attributeNames.add(mapping.getDestAttrName());\n-                }\n-\n-                if (mapping.isAccountid()) {\n-                    try {\n-                        accountId = attributable.getAttribute(\n-                                mapping.getSourceAttrName()).\n-                                getValuesAsStrings().get(0);\n-                    } catch (NullPointerException e) {\n-                        // ignore exception\n-                        LOG.debug(\"Invalid accountId specified\", e);\n-                    }\n-                }\n-            }\n-\n-            if (accountId == null && accountLink != null) {\n-                accountId = evaluateAccountLink(attributable, accountLink);\n-            }\n-\n-            if (attributeNames != null && accountId != null) {\n-                LOG.debug(\"Get object attribute for entry {}\", accountId);\n-\n-                connectorInstance = resource.getConnector();\n-\n-                connector = connInstanceLoader.getConnector(\n-                        connectorInstance.getId().toString());\n-\n-                try {\n-                    attributes = connector.getObjectAttributes(\n-                            ObjectClass.ACCOUNT,\n-                            new Uid(accountId),\n-                            null,\n-                            attributeNames);\n-\n-                    LOG.debug(\"Retrieved {}\", attributes);\n-\n-                    for (Attribute attribute : attributes) {\n-                        values.addAll(attribute.getValue());\n-                    }\n-                } catch (Exception e) {\n-                    LOG.warn(\"Error connecting to {}\", resource.getName(), e);\n-                    // ignore exception and go ahead\n-                }\n-            }\n-        }\n-\n-        return new HashSet<String>(values);\n-    }\n-\n-    private String evaluateAccountLink(\n-            final AbstractAttributable attributable, final String accountLink) {\n-\n-        final JexlContext jexlContext = new MapContext();\n-\n-        jexlUtil.addAttributesToContext(\n-                attributable.getAttributes(),\n-                jexlContext);\n-\n-        jexlUtil.addDerAttributesToContext(\n-                attributable.getDerivedAttributes(),\n-                attributable.getAttributes(),\n-                jexlContext);\n-\n-        // Evaluate expression using the context prepared before\n-        return jexlUtil.evaluateWithAttributes(accountLink, jexlContext);\n-    }\n }"},{"sha":"27425049ec077200e62648d2d5ec64ddf08f905e","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":113,"deletions":87,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -46,6 +46,7 @@\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -91,16 +92,18 @@ private SyncopeUser getUserFromId(final Long userId)\n             throw new NotFoundException(\"User \" + userId);\n         }\n \n-        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n-                EntitlementUtil.getOwnedEntitlementNames());\n-        Set<Long> notAdminRoleIds = new HashSet<Long>();\n+        // Check if roles requested for this user are allowed to be\n+        // administrated by the caller\n+        Set<Long> roleIds =\n+                new HashSet<Long>(user.getRoles().size());\n         for (SyncopeRole role : user.getRoles()) {\n-            if (!adminRoleIds.contains(role.getId())) {\n-                notAdminRoleIds.add(role.getId());\n-            }\n+            roleIds.add(role.getId());\n         }\n-        if (!notAdminRoleIds.isEmpty()) {\n-            throw new UnauthorizedRoleException(notAdminRoleIds);\n+        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+        roleIds.removeAll(adminRoleIds);\n+        if (!roleIds.isEmpty()) {\n+            throw new UnauthorizedRoleException(roleIds);\n         }\n \n         return user;\n@@ -340,7 +343,8 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n         }\n \n         List<SyncopeUser> matchingUsers = userSearchDAO.search(\n-                EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()), searchCondition);\n+                EntitlementUtil.getRoleIds(EntitlementUtil.\n+                getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user, workflow));\n@@ -427,6 +431,52 @@ private Set<String> getMandatoryResourceNames(SyncopeUser user,\n         return mandatoryResourceNames;\n     }\n \n+    public SyncopeUser create(UserTO userTO, Set<Long> mandatoryRoles,\n+            Set<String> mandatoryResources)\n+            throws SyncopeClientCompositeErrorException, NotFoundException,\n+            WorkflowException, PropagationException {\n+\n+        // Create the user\n+        SyncopeUser user = new SyncopeUser();\n+        userDataBinder.create(user, userTO);\n+        user = userDAO.save(user);\n+\n+        // User is created locally and propagated, let's advance on the workflow\n+        final Long workflowId =\n+                workflow.initialize(Constants.USER_WORKFLOW, 0, null);\n+        user.setWorkflowId(workflowId);\n+\n+        Map<String, Object> inputs = new HashMap<String, Object>();\n+        inputs.put(Constants.SYNCOPE_USER, user);\n+        inputs.put(Constants.USER_TO, userTO);\n+\n+        int[] wfActions = workflow.getAvailableActions(workflowId, null);\n+        LOG.debug(\"Available workflow actions for user {}: {}\",\n+                user, wfActions);\n+\n+        for (int wfAction : wfActions) {\n+            LOG.debug(\"About to execute action {} on user {}\", wfAction, user);\n+            workflow.doAction(workflowId, wfAction, inputs);\n+            LOG.debug(\"Action {} on user {} run successfully\", wfAction, user);\n+        }\n+\n+        // Save possible modifications made by workflow actions\n+        user = userDAO.save(user);\n+\n+        // Now that user is created locally, let's propagate\n+        Set<String> mandatoryResourceNames = getMandatoryResourceNames(user,\n+                mandatoryRoles, mandatoryResources);\n+        if (!mandatoryResourceNames.isEmpty()) {\n+            LOG.debug(\"About to propagate mandatory onto resources {}\",\n+                    mandatoryResourceNames);\n+        }\n+\n+        propagationManager.create(\n+                user, userTO.getPassword(), mandatoryResourceNames);\n+\n+        return user;\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n@@ -443,6 +493,20 @@ public UserTO create(HttpServletResponse response,\n         LOG.debug(\"User create called with parameters {}\\n{}\\n{}\",\n                 new Object[]{userTO, mandatoryRoles, mandatoryResources});\n \n+        // Check if roles requested for this user are allowed to be\n+        // administrated by the caller\n+        Set<Long> requestRoleIds =\n+                new HashSet<Long>(userTO.getMemberships().size());\n+        for (MembershipTO membership : userTO.getMemberships()) {\n+            requestRoleIds.add(membership.getRoleId());\n+        }\n+        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+        requestRoleIds.removeAll(adminRoleIds);\n+        if (!requestRoleIds.isEmpty()) {\n+            throw new UnauthorizedRoleException(requestRoleIds);\n+        }\n+\n         CheckInResult checkInResult = userDataBinder.checkIn(userTO);\n         LOG.debug(\"Check-in result: {}\", checkInResult);\n \n@@ -471,82 +535,17 @@ public UserTO create(HttpServletResponse response,\n             default:\n         }\n \n-        // The user to be created\n-        SyncopeUser user = new SyncopeUser();\n-        userDataBinder.create(user, userTO);\n-\n-        // Check if roles requested for this user are allowed to be\n-        // administrated by the caller\n-        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n-                EntitlementUtil.getOwnedEntitlementNames());\n-        Set<Long> notAdminRoleIds = new HashSet<Long>();\n-        for (SyncopeRole role : user.getRoles()) {\n-            if (!adminRoleIds.contains(role.getId())) {\n-                notAdminRoleIds.add(role.getId());\n-            }\n-        }\n-        if (!notAdminRoleIds.isEmpty()) {\n-            throw new UnauthorizedRoleException(notAdminRoleIds);\n-        }\n-\n-        // Create the user\n-        user = userDAO.save(user);\n-\n-        // User is created locally and propagated, let's advance on the workflow\n-        final Long workflowId =\n-                workflow.initialize(Constants.USER_WORKFLOW, 0, null);\n-        user.setWorkflowId(workflowId);\n-\n-        Map<String, Object> inputs = new HashMap<String, Object>();\n-        inputs.put(Constants.SYNCOPE_USER, user);\n-        inputs.put(Constants.USER_TO, userTO);\n-\n-        int[] wfActions = workflow.getAvailableActions(workflowId, null);\n-        LOG.debug(\"Available workflow actions for user {}: {}\",\n-                user, wfActions);\n-\n-        for (int wfAction : wfActions) {\n-            LOG.debug(\"About to execute action {} on user {}\", wfAction, user);\n-            workflow.doAction(workflowId, wfAction, inputs);\n-            LOG.debug(\"Action {} on user {} run successfully\", wfAction, user);\n-        }\n-\n-        // Save possible modifications made by workflow actions\n-        user = userDAO.save(user);\n-\n-        // Now that user is created locally, let's propagate\n-        Set<String> mandatoryResourceNames = getMandatoryResourceNames(user,\n-                mandatoryRoles, mandatoryResources);\n-        if (!mandatoryResourceNames.isEmpty()) {\n-            LOG.debug(\"About to propagate mandatory onto resources {}\",\n-                    mandatoryResourceNames);\n-        }\n-\n-        propagationManager.create(\n-                user, userTO.getPassword(), mandatoryResourceNames);\n-\n-        final UserTO savedTO = userDataBinder.getUserTO(user, workflow);\n+        final UserTO savedTO = userDataBinder.getUserTO(\n+                create(userTO, mandatoryRoles, mandatoryResources), workflow);\n         LOG.debug(\"About to return create user\\n{}\", savedTO);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedTO;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/update\")\n-    public UserTO update(@RequestBody UserMod userMod,\n-            @RequestParam(value = \"mandatoryRoles\",\n-            required = false) Set<Long> mandatoryRoles,\n-            @RequestParam(value = \"mandatoryResources\",\n-            required = false) Set<String> mandatoryResources)\n-            throws NotFoundException, PropagationException, WorkflowException,\n-            UnauthorizedRoleException {\n-\n-        LOG.debug(\"User update called with parameters {}\\n{}\\n{}\",\n-                new Object[]{userMod, mandatoryRoles, mandatoryResources});\n-\n-        SyncopeUser user = getUserFromId(userMod.getId());\n+    public SyncopeUser update(SyncopeUser user, UserMod userMod,\n+            Set<Long> mandatoryRoles, Set<String> mandatoryResources)\n+            throws WorkflowException, NotFoundException, PropagationException {\n \n         // First of all, let's check if update is allowed\n         Map<String, Object> inputs = new HashMap<String, Object>();\n@@ -575,21 +574,34 @@ public UserTO update(@RequestBody UserMod userMod,\n         propagationManager.update(user, userMod.getPassword(),\n                 resourceOperations, mandatoryResourceNames);\n \n-        return userDataBinder.getUserTO(user, workflow);\n+        return user;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE,\n-    value = \"/delete/{userId}\")\n-    public void delete(@PathVariable(\"userId\") Long userId,\n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/update\")\n+    public UserTO update(@RequestBody UserMod userMod,\n             @RequestParam(value = \"mandatoryRoles\",\n             required = false) Set<Long> mandatoryRoles,\n             @RequestParam(value = \"mandatoryResources\",\n             required = false) Set<String> mandatoryResources)\n-            throws NotFoundException, WorkflowException, PropagationException,\n+            throws NotFoundException, PropagationException, WorkflowException,\n             UnauthorizedRoleException {\n \n-        SyncopeUser user = getUserFromId(userId);\n+        LOG.debug(\"User update called with parameters {}\\n{}\\n{}\",\n+                new Object[]{userMod, mandatoryRoles, mandatoryResources});\n+\n+        UserTO updatedTO =\n+                userDataBinder.getUserTO(update(getUserFromId(userMod.getId()),\n+                userMod, mandatoryRoles, mandatoryResources), workflow);\n+        LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n+\n+        return updatedTO;\n+    }\n+\n+    public void delete(SyncopeUser user, Set<Long> mandatoryRoles,\n+            Set<String> mandatoryResources)\n+            throws WorkflowException, NotFoundException, PropagationException {\n \n         WFUtils.doExecuteAction(workflow,\n                 Constants.USER_WORKFLOW,\n@@ -612,6 +624,20 @@ public void delete(@PathVariable(\"userId\") Long userId,\n         if (user.getWorkflowId() != null) {\n             workflowEntryDAO.delete(user.getWorkflowId());\n         }\n-        userDAO.delete(userId);\n+        userDAO.delete(user);\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_DELETE')\")\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{userId}\")\n+    public void delete(@PathVariable(\"userId\") Long userId,\n+            @RequestParam(value = \"mandatoryRoles\",\n+            required = false) Set<Long> mandatoryRoles,\n+            @RequestParam(value = \"mandatoryResources\",\n+            required = false) Set<String> mandatoryResources)\n+            throws NotFoundException, WorkflowException, PropagationException,\n+            UnauthorizedRoleException {\n+\n+        delete(getUserFromId(userId), mandatoryRoles, mandatoryResources);\n     }\n }"},{"sha":"db3927d8a1dcb0875e192af33f6e5698d71248ce","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -201,7 +201,7 @@ private boolean evaluateMandatoryCondition(\n         jexlUtil.addAttributesToContext(attributes, jexlContext);\n \n         return Boolean.parseBoolean(\n-                jexlUtil.evaluateWithAttributes(\n+                jexlUtil.evaluate(\n                 mandatoryCondition, jexlContext));\n     }\n \n@@ -259,11 +259,8 @@ private SyncopeClientException checkMandatory(\n                 new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);\n \n-        Set<TargetResource> resources = new HashSet<TargetResource>();\n-        resources.addAll(attributable.getTargetResources());\n-        resources.addAll(attributable.getInheritedTargetResources());\n-\n-        LOG.debug(\"Check mandatory constraint among resources {}\", resources);\n+        LOG.debug(\"Check mandatory constraint among resources {}\",\n+                attributable.getTargetResources());\n         // Check if there is some mandatory schema defined for which no value\n         // has been provided\n         List<AbstractSchema> allSchemas =\n@@ -275,7 +272,8 @@ private SyncopeClientException checkMandatory(\n                     && (evaluateMandatoryCondition(\n                     schema.getMandatoryCondition(),\n                     attributable.getAttributes())\n-                    || evaluateMandatoryCondition(resources,\n+                    || evaluateMandatoryCondition(\n+                    attributable.getTargetResources(),\n                     attributable.getAttributes(),\n                     schema.getName(),\n                     attributableUtil))) {\n@@ -297,10 +295,6 @@ protected ResourceOperations fill(\n             final SyncopeClientCompositeErrorException compositeErrorException)\n             throws SyncopeClientCompositeErrorException {\n \n-        Set<TargetResource> resources = new HashSet<TargetResource>();\n-        resources.addAll(attributable.getTargetResources());\n-        resources.addAll(attributable.getInheritedTargetResources());\n-\n         ResourceOperations resourceOperations = new ResourceOperations();\n \n         SyncopeClientException invalidValues = new SyncopeClientException(\n@@ -336,7 +330,8 @@ protected ResourceOperations fill(\n                             && mapping.getSourceMappingType()\n                             == attributableUtil.sourceMappingType()\n                             && mapping.getResource() != null\n-                            && resources.contains(mapping.getResource())) {\n+                            && attributable.getTargetResources().\n+                            contains(mapping.getResource())) {\n \n                         resourceOperations.add(ResourceOperationType.UPDATE,\n                                 mapping.getResource());\n@@ -370,7 +365,8 @@ protected ResourceOperations fill(\n                             && mapping.getSourceMappingType()\n                             == attributableUtil.sourceMappingType()\n                             && mapping.getResource() != null\n-                            && resources.contains(mapping.getResource())) {\n+                            && attributable.getTargetResources().\n+                            contains(mapping.getResource())) {\n \n                         resourceOperations.add(ResourceOperationType.UPDATE,\n                                 mapping.getResource());\n@@ -461,7 +457,8 @@ protected ResourceOperations fill(\n                             && mapping.getSourceMappingType()\n                             == attributableUtil.derivedSourceMappingType()\n                             && mapping.getResource() != null\n-                            && resources.contains(mapping.getResource())) {\n+                            && attributable.getTargetResources().\n+                            contains(mapping.getResource())) {\n \n                         resourceOperations.add(ResourceOperationType.UPDATE,\n                                 mapping.getResource());\n@@ -508,7 +505,8 @@ protected ResourceOperations fill(\n                             && mapping.getSourceMappingType()\n                             == attributableUtil.virtualSourceMappingType()\n                             && mapping.getResource() != null\n-                            && resources.contains(mapping.getResource())) {\n+                            && attributable.getTargetResources().\n+                            contains(mapping.getResource())) {\n \n                         resourceOperations.add(ResourceOperationType.UPDATE,\n                                 mapping.getResource());\n@@ -542,7 +540,8 @@ protected ResourceOperations fill(\n                             && mapping.getSourceMappingType()\n                             == attributableUtil.derivedSourceMappingType()\n                             && mapping.getResource() != null\n-                            && resources.contains(mapping.getResource())) {\n+                            && attributable.getTargetResources().\n+                            contains(mapping.getResource())) {\n \n                         resourceOperations.add(ResourceOperationType.UPDATE,\n                                 mapping.getResource());\n@@ -573,7 +572,8 @@ protected ResourceOperations fill(\n                             && mapping.getSourceMappingType()\n                             == attributableUtil.virtualSourceMappingType()\n                             && mapping.getResource() != null\n-                            && resources.contains(mapping.getResource())) {\n+                            && attributable.getTargetResources().\n+                            contains(mapping.getResource())) {\n \n                         resourceOperations.add(ResourceOperationType.UPDATE,\n                                 mapping.getResource());"},{"sha":"dae3eb586eaaaa9fa5a0ef48dad3bd14f314ef27","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -42,9 +42,6 @@\n import org.syncope.core.persistence.beans.membership.MVirAttr;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UAttr;\n-import org.syncope.core.persistence.beans.user.UDerAttr;\n-import org.syncope.core.persistence.beans.user.UVirAttr;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.types.CipherAlgorithm;\n import org.syncope.types.ResourceOperationType;\n@@ -103,50 +100,6 @@ public CheckInResult checkIn(final UserTO userTO) {\n         return result;\n     }\n \n-    public void empty(final SyncopeUser user) {\n-        Set<Long> ids = new HashSet<Long>();\n-        for (AbstractAttr attribute : user.getAttributes()) {\n-            ids.add(attribute.getId());\n-        }\n-        for (Long attrId : ids) {\n-            attributeDAO.delete(attrId, UAttr.class);\n-        }\n-        user.getAttributes().clear();\n-\n-        ids.clear();\n-        for (AbstractDerAttr derivedAttribute : user.getDerivedAttributes()) {\n-            ids.add(derivedAttribute.getId());\n-        }\n-        for (Long derAttrId : ids) {\n-            derivedAttributeDAO.delete(derAttrId, UDerAttr.class);\n-        }\n-        user.getDerivedAttributes().clear();\n-\n-        ids.clear();\n-        for (AbstractVirAttr virtualAttribute : user.getVirtualAttributes()) {\n-            ids.add(virtualAttribute.getId());\n-        }\n-        for (Long virAttrId : ids) {\n-            virtualAttributeDAO.delete(virAttrId, UVirAttr.class);\n-        }\n-        user.getVirtualAttributes().clear();\n-\n-        ids.clear();\n-        for (Membership membership : user.getMemberships()) {\n-            ids.add(membership.getId());\n-        }\n-        for (Long membershipId : ids) {\n-            membershipDAO.delete(membershipId);\n-        }\n-\n-        for (TargetResource resource : user.getTargetResources()) {\n-            resource.removeUser(user);\n-        }\n-        user.getTargetResources().clear();\n-\n-        user.setPassword(null, getCipherAlgoritm());\n-    }\n-\n     public void create(final SyncopeUser user, final UserTO userTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n "},{"sha":"6a721003d8ca1d044375c23e4611a048c73f72a4","filename":"core/src/main/java/org/syncope/core/util/JexlUtil.java","status":"modified","additions":23,"deletions":2,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -26,6 +26,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n \n@@ -43,17 +44,19 @@ public class JexlUtil {\n     private JexlEngine jexlEngine;\n \n     public boolean isExpressionValid(final String expression) {\n-        boolean result = true;\n+        boolean result;\n         try {\n             jexlEngine.createExpression(expression);\n+            result = true;\n         } catch (JexlException e) {\n             LOG.error(\"Invalid jexl expression: \" + expression, e);\n             result = false;\n         }\n+\n         return result;\n     }\n \n-    public String evaluateWithAttributes(final String expression,\n+    public String evaluate(final String expression,\n             final JexlContext jexlContext) {\n \n         String result;\n@@ -78,6 +81,24 @@ public String evaluateWithAttributes(final String expression,\n         return result;\n     }\n \n+    public String evaluate(final String expression,\n+            final AbstractAttributable attributable) {\n+\n+        final JexlContext jexlContext = new MapContext();\n+\n+        addAttributesToContext(\n+                attributable.getAttributes(),\n+                jexlContext);\n+\n+        addDerAttributesToContext(\n+                attributable.getDerivedAttributes(),\n+                attributable.getAttributes(),\n+                jexlContext);\n+\n+        // Evaluate expression using the context prepared before\n+        return evaluate(expression, jexlContext);\n+    }\n+\n     public JexlContext addAttributesToContext(\n             final Collection<? extends AbstractAttr> attributes,\n             JexlContext jexlContext) {"},{"sha":"f13a9d76860dfa007f01a5bea47d557f19968d70","filename":"core/src/main/java/org/syncope/core/workflow/AbstractSendEmail.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractSendEmail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractSendEmail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractSendEmail.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -28,7 +28,7 @@ public abstract class AbstractSendEmail extends OSWorkflowComponent\n     public AbstractSendEmail() {\n         super();\n \n-        confDAO = (ConfDAO) context.getBean(\"confDAOImpl\");\n+        confDAO = context.getBean(ConfDAO.class);\n     }\n \n     protected void sendMail(final String smtpHost,"},{"sha":"72a69d017c2c9fbc510ff7f5f999d5108932f900","filename":"core/src/main/java/org/syncope/core/workflow/GenerateToken.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -31,7 +31,7 @@ public class GenerateToken extends OSWorkflowComponent\n     public void execute(Map transientVars, Map args, PropertySet ps)\n             throws WorkflowException {\n \n-        final ConfDAO confDAO = (ConfDAO) context.getBean(\"confDAOImpl\");\n+        final ConfDAO confDAO = context.getBean(ConfDAO.class);\n \n         SyncopeUser user = (SyncopeUser) transientVars.get(\n                 Constants.SYNCOPE_USER);"},{"sha":"8d6ad3aa77709b6b92e520cbf09ebc2d35176aea","filename":"core/src/main/java/org/syncope/core/workflow/SendVelocityEmail.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSendVelocityEmail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSendVelocityEmail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSendVelocityEmail.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -53,8 +53,7 @@ public void execute(final Map transientVars, final Map args,\n         final SyncopeUser user =\n                 (SyncopeUser) transientVars.get(Constants.SYNCOPE_USER);\n \n-        VelocityEngine velocityEngine =\n-                (VelocityEngine) context.getBean(\"velocityEngine\");\n+        VelocityEngine velocityEngine = context.getBean(VelocityEngine.class);\n \n         final Map<String, Object> model = new HashMap<String, Object>();\n         List<String> values;"},{"sha":"60eba7fb20a3370cd785c1e91d9e51ebbde94ab4","filename":"core/src/main/java/org/syncope/core/workflow/StoreAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -69,7 +69,7 @@ private AbstractAttr getAttribute(Map transientVars, Map args)\n                     + attributableUtil);\n         }\n \n-        SchemaDAO schemaDAO = (SchemaDAO) context.getBean(\"schemaDAOImpl\");\n+        SchemaDAO schemaDAO = context.getBean(SchemaDAO.class);\n         AbstractSchema schema = schemaDAO.find(schemaName,\n                 attributableUtil.schemaClass());\n         if (schema == null) {"},{"sha":"5c6927c67b6e88bd64fa0d7b4a74b685ddf68603","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/347d3186861228b16dc189d5806f73236533c4a7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=347d3186861228b16dc189d5806f73236533c4a7","patch":"@@ -123,10 +123,4 @@ public final void delete() {\n         SyncopeUser actual = userDAO.find(3L);\n         assertNull(\"delete did not work\", actual);\n     }\n-\n-    @Test\n-    public final void getRoleResources() {\n-        SyncopeUser user = userDAO.find(1L);\n-        assertFalse(user.getInheritedTargetResources().isEmpty());\n-    }\n }"}]}