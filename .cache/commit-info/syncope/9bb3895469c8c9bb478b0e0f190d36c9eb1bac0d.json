{"sha":"9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","node_id":"C_kwDOJfYA1toAKDliYjM4OTU0NjljOGM5YmI0NzhiMGUwZjE5MGQzNmM5ZWIxYmFjMGQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-03-27T06:51:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-03-27T13:30:34Z"},"message":"Upgrading Wicket jQuery UI, checkstyle","tree":{"sha":"d92e9313c67d3d8feaf941787b6e80e44d0f17f8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d92e9313c67d3d8feaf941787b6e80e44d0f17f8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"37db31c5ef93a212c623cfc40af74ea882006479","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/37db31c5ef93a212c623cfc40af74ea882006479","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/37db31c5ef93a212c623cfc40af74ea882006479"}],"stats":{"total":674,"additions":304,"deletions":370},"files":[{"sha":"81102bb71a7a0e220ba01fa5b3c5f94247f5a303","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMAnyDirectoryPanelAdditionalActionsProvider.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAdditionalActionsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAdditionalActionsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAdditionalActionsProvider.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -91,8 +91,8 @@ public void onEvent(final IEvent<?> event) {\n \n                     if (payload.getResult() instanceof ArrayList) {\n                         modal.setContent(new ResultPanel<>(\n-                            null,\n-                            payload.getResult()) {\n+                                null,\n+                                payload.getResult()) {\n \n                             private static final long serialVersionUID = -2630573849050255233L;\n \n@@ -103,7 +103,7 @@ protected void closeAction(final AjaxRequestTarget target) {\n \n                             @Override\n                             protected Panel customResultBody(\n-                                final String panelId, final Serializable item, final Serializable result) {\n+                                    final String panelId, final Serializable item, final Serializable result) {\n \n                                 @SuppressWarnings(\"unchecked\")\n                                 ArrayList<ProvisioningReport> reports = (ArrayList<ProvisioningReport>) result;\n@@ -122,10 +122,10 @@ protected Panel customResultBody(\n                         SyncopeConsoleSession.get().error(payload.getResult());\n                     }\n \n-                    if (target.isPresent()) {\n-                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target.get());\n-                        target.get().add(container);\n-                    }\n+                    target.ifPresent(t -> {\n+                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(t);\n+                        t.add(container);\n+                    });\n                 }\n             }\n         };\n@@ -141,8 +141,8 @@ public void onClick(final AjaxRequestTarget target) {\n                 AnyQuery query = csvAnyQuery(realm, fiql, rows, panel.getDataProvider());\n \n                 target.add(modal.setContent(new CSVPushWizardBuilder(spec, query, csvDownloadBehavior, pageRef).\n-                    setEventSink(csvEventSink).\n-                    build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT)));\n+                        setEventSink(csvEventSink).\n+                        build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT)));\n \n                 modal.header(new StringResourceModel(\"csvPush\", panel, Model.of(spec)));\n                 modal.show(true);\n@@ -161,8 +161,8 @@ public void onClick(final AjaxRequestTarget target) {\n                 CSVPullSpec spec = csvPullSpec(type, realm);\n \n                 target.add(modal.setContent(new CSVPullWizardBuilder(spec, pageRef).\n-                    setEventSink(csvEventSink).\n-                    build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT)));\n+                        setEventSink(csvEventSink).\n+                        build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT)));\n \n                 modal.header(new StringResourceModel(\"csvPull\", panel, Model.of(spec)));\n                 modal.show(true);"},{"sha":"a14ab67ce20ee7833025f9e41cb381949d759a08","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -194,12 +194,11 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n                                 }\n                             });\n                 } else {\n-                    Optional<Attr> attr =\n-                            bean.getAttrs().stream().filter(object -> object.getSchema().equals(key)).findAny();\n-\n-                    return attr.isEmpty() || attr.get().getValues().isEmpty()\n-                            ? new Label(\"field\", StringUtils.EMPTY)\n-                            : new CollectionPanel(\"field\", attr.get().getValues());\n+                    Optional<Attr> attr = bean.getAttrs().stream().\n+                            filter(object -> object.getSchema().equals(key)).findAny();\n+                    return attr.filter(a -> !a.getValues().isEmpty()).\n+                            map(a -> (Component) new CollectionPanel(\"field\", a.getValues())).\n+                            orElseGet(() -> new Label(\"field\", StringUtils.EMPTY));\n                 }\n             }\n "},{"sha":"33b0bf25c13ef40633e3bc2aef6567963c941033","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -639,13 +639,12 @@ public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);\n \n         if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n-            final AjaxWizard.NewItemFinishEvent<?> item = AjaxWizard.NewItemFinishEvent.class.cast(event.getPayload());\n-            final Serializable result = item.getResult();\n-            final Optional<AjaxRequestTarget> target = item.getTarget();\n-            if (result != null && result instanceof ConnInstanceTO && target.isPresent()) {\n+            AjaxWizard.NewItemFinishEvent<?> item = AjaxWizard.NewItemFinishEvent.class.cast(event.getPayload());\n+            Serializable result = item.getResult();\n+            Optional<AjaxRequestTarget> target = item.getTarget();\n+            if (result instanceof ConnInstanceTO) {\n                 // update Toggle Panel header\n-                ConnInstanceTO conn = ConnInstanceTO.class.cast(result);\n-                setHeader(target.get(), conn.getDisplayName());\n+                target.ifPresent(t -> setHeader(t, ConnInstanceTO.class.cast(result).getDisplayName()));\n             }\n         }\n     }"},{"sha":"6408ca706dfc472b548ff3d2291923402abe7ede","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/LinkedAccountDetailsPanel.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountDetailsPanel.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -21,6 +21,8 @@\n import java.time.Duration;\n import java.time.temporal.ChronoUnit;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -68,19 +70,16 @@ public LinkedAccountDetailsPanel(final LinkedAccountTO linkedAccountTO) {\n                 \"resource\",\n                 new PropertyModel<>(linkedAccountTO, \"resource\"),\n                 false);\n+\n         dropdownResourceField.setChoices(ResourceRestClient.list().stream().\n-                filter(resource -> resource.getProvision(AnyTypeKind.USER.name()).isPresent()\n-                && resource.getProvision(AnyTypeKind.USER.name()).get().getMapping() != null\n-                && !resource.getProvision(AnyTypeKind.USER.name()).get().getMapping().getItems().isEmpty()).\n+                filter(resource -> resource.getProvision(AnyTypeKind.USER.name()).\n+                flatMap(provision -> Optional.ofNullable(provision.getMapping())).\n+                filter(mapping -> !mapping.getItems().isEmpty()).isPresent()).\n                 map(ResourceTO::getKey).\n                 collect(Collectors.toList()));\n-        dropdownResourceField.setOutputMarkupId(true);\n-        dropdownResourceField.addRequiredLabel();\n-        dropdownResourceField.setNullValid(false);\n-        dropdownResourceField.setRequired(true);\n-        add(dropdownResourceField);\n+        add(dropdownResourceField.setNullValid(false).addRequiredLabel().setOutputMarkupId(true));\n \n-        final String connObjectKeyFieldId = \"connObjectKeyValue\";\n+        String connObjectKeyFieldId = \"connObjectKeyValue\";\n         AjaxTextFieldPanel connObjectKeyField = new AjaxTextFieldPanel(\n                 \"connObjectKeyValue\",\n                 \"connObjectKeyValue\",\n@@ -157,8 +156,10 @@ private void setConnObjectFieldChoices(\n \n         AtomicReference<String> resourceRemoteKey = new AtomicReference<>(ConnIdSpecialName.NAME);\n         try {\n-            resourceRemoteKey.set(ResourceRestClient.read(resource).getProvision(AnyTypeKind.USER.name()).get().\n-                    getMapping().getConnObjectKeyItem().get().getExtAttrName());\n+            ResourceRestClient.read(resource).getProvision(AnyTypeKind.USER.name()).\n+                    flatMap(provision -> Optional.ofNullable(provision.getMapping())).\n+                    flatMap(mapping -> mapping.getConnObjectKeyItem()).\n+                    ifPresent(connObjectKeyItem -> resourceRemoteKey.set(connObjectKeyItem.getExtAttrName()));\n         } catch (Exception ex) {\n             LOG.error(\"While reading mapping for resource {}\", resource, ex);\n         }\n@@ -175,9 +176,9 @@ private void setConnObjectFieldChoices(\n                 new SortParam<>(resourceRemoteKey.get(), true));\n \n         connObjectKeyFieldValues = items.getRight().stream().\n-                map(item -> item.getAttr(resourceRemoteKey.get()).get().getValues().get(0)).\n+                map(item -> item.getAttr(resourceRemoteKey.get()).map(attr -> attr.getValues().get(0)).orElse(null)).\n+                filter(Objects::nonNull).\n                 collect(Collectors.toList());\n         ajaxTextFieldPanel.setChoices(connObjectKeyFieldValues);\n     }\n-\n }"},{"sha":"2fca17b0b455ef747702a3959cb6b2bffbb9bf54","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/LinkedAccountPlainAttrsPanel.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -216,13 +216,9 @@ protected List<Attr> getAttrsFromTO() {\n     }\n \n     private void setFixedAttr(final Collection<PlainSchemaTO> values) {\n-        values.forEach(schema -> {\n-            if (linkedAccountTO.getPlainAttr(schema.getKey()).isPresent()) {\n-                fixedAttrs.add(linkedAccountTO.getPlainAttr(schema.getKey()).get());\n-            } else if (userTO.getPlainAttr(schema.getKey()).isPresent()) {\n-                fixedAttrs.add(userTO.getPlainAttr(schema.getKey()).get());\n-            }\n-        });\n+        values.forEach(schema -> linkedAccountTO.getPlainAttr(schema.getKey()).ifPresentOrElse(\n+                fixedAttrs::add,\n+                () -> userTO.getPlainAttr(schema.getKey()).ifPresent(fixedAttrs::add)));\n     }\n \n     private boolean checkIsReadonlyAttr(final String schema) {\n@@ -250,9 +246,9 @@ protected void populateItem(final ListItem<Attr> item) {\n                     final boolean isMultivalue = schemas.get(attrTO.getSchema()).isMultivalue();\n \n                     AbstractFieldPanel<?> panel = setPanel(\n-                        schemas,\n-                        item,\n-                        linkedAccountTO.getPlainAttr(attrTO.getSchema()).isEmpty());\n+                            schemas,\n+                            item,\n+                            linkedAccountTO.getPlainAttr(attrTO.getSchema()).isEmpty());\n \n                     panel.showExternAction(checkboxToggle(attrTO, panel, isMultivalue));\n                 }"},{"sha":"af581d4af8d92f53b65df9a2429435bf1426bf38","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxCheckBoxPanel.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -21,8 +21,10 @@\n import java.io.Serializable;\n import java.util.List;\n import java.util.Optional;\n+import java.util.function.Predicate;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.Attributable;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.markup.html.form.CheckBox;\n@@ -118,7 +120,7 @@ public Boolean getObject() {\n             @SuppressWarnings(\"unchecked\")\n             public void setObject(final Boolean object) {\n                 item.setModelObject(Optional.ofNullable(object)\n-                    .map(Object::toString).orElseGet(Boolean.FALSE::toString));\n+                        .map(Object::toString).orElseGet(Boolean.FALSE::toString));\n             }\n         };\n \n@@ -128,27 +130,25 @@ public void setObject(final Boolean object) {\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     @Override\n-    public FieldPanel<Boolean> setNewModel(final Attributable attributableTO, final String schema) {\n+    public FieldPanel<Boolean> setNewModel(final Attributable attributable, final String schema) {\n         field.setModel(new Model() {\n \n             private static final long serialVersionUID = -4214654722524358000L;\n \n             @Override\n             public Serializable getObject() {\n-                if (!attributableTO.getPlainAttr(schema).get().getValues().isEmpty()) {\n-                    return Boolean.TRUE.toString().equalsIgnoreCase(\n-                            attributableTO.getPlainAttr(schema).get().getValues().get(0));\n-                }\n-                return null;\n+                return attributable.getPlainAttr(schema).map(Attr::getValues).filter(Predicate.not(List::isEmpty)).\n+                        map(values -> Boolean.TRUE.toString().equalsIgnoreCase(values.get(0))).\n+                        orElse(null);\n             }\n \n             @Override\n             public void setObject(final Serializable object) {\n-                attributableTO.getPlainAttr(schema).get().getValues().clear();\n-                attributableTO.getPlainAttr(schema).get().getValues().add(\n-                        object == null ? Boolean.FALSE.toString() : object.toString());\n+                attributable.getPlainAttr(schema).ifPresent(plainAttr -> {\n+                    plainAttr.getValues().clear();\n+                    plainAttr.getValues().add(object == null ? Boolean.FALSE.toString() : object.toString());\n+                });\n             }\n-\n         });\n \n         return this;"},{"sha":"04c20391ae807977aceeffb6a0d9d91521ca68ee","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxSpinnerFieldPanel.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -26,10 +26,12 @@\n import java.io.Serializable;\n import java.util.List;\n import java.util.Optional;\n+import java.util.function.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.Attributable;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.markup.html.list.ListItem;\n@@ -102,19 +104,19 @@ public T getObject() {\n                 T value = null;\n \n                 if (list != null && !list.isEmpty()\n-                    && list.get(0) != null && StringUtils.isNotBlank(list.get(0).toString())) {\n+                        && list.get(0) != null && StringUtils.isNotBlank(list.get(0).toString())) {\n \n                     value = reference.equals(Integer.class)\n-                        ? reference.cast(NumberUtils.toInt(list.get(0).toString()))\n-                        : reference.equals(Long.class)\n-                        ? reference.cast(NumberUtils.toLong(list.get(0).toString()))\n-                        : reference.equals(Short.class)\n-                        ? reference.cast(NumberUtils.toShort(list.get(0).toString()))\n-                        : reference.equals(Float.class)\n-                        ? reference.cast(NumberUtils.toFloat(list.get(0).toString()))\n-                        : reference.equals(byte.class)\n-                        ? reference.cast(NumberUtils.toByte(list.get(0).toString()))\n-                        : reference.cast(NumberUtils.toDouble(list.get(0).toString()));\n+                            ? reference.cast(NumberUtils.toInt(list.get(0).toString()))\n+                            : reference.equals(Long.class)\n+                            ? reference.cast(NumberUtils.toLong(list.get(0).toString()))\n+                            : reference.equals(Short.class)\n+                            ? reference.cast(NumberUtils.toShort(list.get(0).toString()))\n+                            : reference.equals(Float.class)\n+                            ? reference.cast(NumberUtils.toFloat(list.get(0).toString()))\n+                            : reference.equals(byte.class)\n+                            ? reference.cast(NumberUtils.toByte(list.get(0).toString()))\n+                            : reference.cast(NumberUtils.toDouble(list.get(0).toString()));\n                 }\n \n                 return value;\n@@ -149,16 +151,16 @@ public T getObject() {\n                     if (obj instanceof String) {\n                         try {\n                             number = reference.equals(Integer.class)\n-                                ? reference.cast(Integer.valueOf((String) obj))\n-                                : reference.equals(Long.class)\n-                                ? reference.cast(Long.valueOf((String) obj))\n-                                : reference.equals(Short.class)\n-                                ? reference.cast(Short.valueOf((String) obj))\n-                                : reference.equals(Float.class)\n-                                ? reference.cast(Float.valueOf((String) obj))\n-                                : reference.equals(byte.class)\n-                                ? reference.cast(Byte.valueOf((String) obj))\n-                                : reference.cast(Double.valueOf((String) obj));\n+                                    ? reference.cast(Integer.valueOf((String) obj))\n+                                    : reference.equals(Long.class)\n+                                    ? reference.cast(Long.valueOf((String) obj))\n+                                    : reference.equals(Short.class)\n+                                    ? reference.cast(Short.valueOf((String) obj))\n+                                    : reference.equals(Float.class)\n+                                    ? reference.cast(Float.valueOf((String) obj))\n+                                    : reference.equals(byte.class)\n+                                    ? reference.cast(Byte.valueOf((String) obj))\n+                                    : reference.cast(Double.valueOf((String) obj));\n                         } catch (NumberFormatException e) {\n                             LOG.error(\"While attempting to parse {}\", obj, e);\n                         }\n@@ -183,36 +185,34 @@ public void setObject(final T object) {\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @Override\n-    public FieldPanel<T> setNewModel(final Attributable attributableTO, final String schema) {\n+    public FieldPanel<T> setNewModel(final Attributable attributable, final String schema) {\n         field.setModel(new Model() {\n \n             private static final long serialVersionUID = -4214654722524358000L;\n \n             @Override\n             public Serializable getObject() {\n-                List<String> values = attributableTO.getPlainAttr(schema).get().getValues();\n-                if (!values.isEmpty()) {\n-                    return reference.equals(Integer.class)\n-                            ? reference.cast(NumberUtils.toInt(values.get(0)))\n-                            : reference.equals(Long.class)\n-                            ? reference.cast(NumberUtils.toLong(values.get(0)))\n-                            : reference.equals(Short.class)\n-                            ? reference.cast(NumberUtils.toShort(values.get(0)))\n-                            : reference.equals(Float.class)\n-                            ? reference.cast(NumberUtils.toFloat(values.get(0)))\n-                            : reference.equals(byte.class)\n-                            ? reference.cast(NumberUtils.toByte(values.get(0)))\n-                            : reference.cast(NumberUtils.toDouble(values.get(0)));\n-                }\n-                return null;\n+                return attributable.getPlainAttr(schema).map(Attr::getValues).filter(Predicate.not(List::isEmpty)).\n+                        map(values -> reference.equals(Integer.class)\n+                        ? reference.cast(NumberUtils.toInt(values.get(0)))\n+                        : reference.equals(Long.class)\n+                        ? reference.cast(NumberUtils.toLong(values.get(0)))\n+                        : reference.equals(Short.class)\n+                        ? reference.cast(NumberUtils.toShort(values.get(0)))\n+                        : reference.equals(Float.class)\n+                        ? reference.cast(NumberUtils.toFloat(values.get(0)))\n+                        : reference.equals(byte.class)\n+                        ? reference.cast(NumberUtils.toByte(values.get(0)))\n+                        : reference.cast(NumberUtils.toDouble(values.get(0)))).\n+                        orElse(null);\n             }\n \n             @Override\n             public void setObject(final Serializable object) {\n-                attributableTO.getPlainAttr(schema).get().getValues().clear();\n-                if (object != null) {\n-                    attributableTO.getPlainAttr(schema).get().getValues().add(object.toString());\n-                }\n+                attributable.getPlainAttr(schema).ifPresent(plainAttr -> {\n+                    plainAttr.getValues().clear();\n+                    Optional.ofNullable(object).ifPresent(o -> plainAttr.getValues().add(o.toString()));\n+                });\n             }\n         });\n "},{"sha":"694cea0ecb3cb64bad5dcbec79ce2d1de15ea3ec","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/DateFieldPanel.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -24,7 +24,9 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n+import java.util.function.Predicate;\n import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.Attributable;\n import org.apache.wicket.markup.head.IHeaderResponse;\n import org.apache.wicket.markup.head.JavaScriptHeaderItem;\n@@ -129,22 +131,23 @@ public FieldPanel<Date> setNewModel(final Attributable attributable, final Strin\n \n             @Override\n             public Date getObject() {\n-                if (!attributable.getPlainAttr(schema).get().getValues().isEmpty()) {\n-                    try {\n-                        return fmt.parse(attributable.getPlainAttr(schema).get().getValues().get(0));\n-                    } catch (ParseException ex) {\n-                        LOG.error(\"While parsing date\", ex);\n-                    }\n-                }\n-                return null;\n+                return attributable.getPlainAttr(schema).map(Attr::getValues).filter(Predicate.not(List::isEmpty)).\n+                        map(values -> {\n+                            try {\n+                                return fmt.parse(values.get(0));\n+                            } catch (ParseException e) {\n+                                LOG.error(\"While parsing date\", e);\n+                                return null;\n+                            }\n+                        }).orElse(null);\n             }\n \n             @Override\n             public void setObject(final Date object) {\n-                attributable.getPlainAttr(schema).get().getValues().clear();\n-                if (object != null) {\n-                    attributable.getPlainAttr(schema).get().getValues().add(fmt.format(object));\n-                }\n+                attributable.getPlainAttr(schema).ifPresent(plainAttr -> {\n+                    plainAttr.getValues().clear();\n+                    Optional.ofNullable(object).ifPresent(o -> plainAttr.getValues().add(fmt.format(object)));\n+                });\n             }\n         });\n "},{"sha":"66bca8006136a1c21bc94d81a50bb369a4b87ea5","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/FieldPanel.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -24,8 +24,10 @@\n import java.io.Serializable;\n import java.util.List;\n import java.util.Optional;\n+import java.util.function.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.Attributable;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.PageReference;\n@@ -130,24 +132,24 @@ public FieldPanel<T> setNewModel(final IModel<T> model) {\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-    public FieldPanel<T> setNewModel(final Attributable attributableTO, final String schema) {\n+    public FieldPanel<T> setNewModel(final Attributable attributable, final String schema) {\n         field.setModel(new Model() {\n \n             private static final long serialVersionUID = -4214654722524358000L;\n \n             @Override\n             public Serializable getObject() {\n-                return (!attributableTO.getPlainAttr(schema).get().getValues().isEmpty())\n-                        ? attributableTO.getPlainAttr(schema).get().getValues().get(0)\n-                        : null;\n+                return attributable.getPlainAttr(schema).map(Attr::getValues).filter(Predicate.not(List::isEmpty)).\n+                        map(values -> values.get(0)).\n+                        orElse(null);\n             }\n \n             @Override\n             public void setObject(final Serializable object) {\n-                attributableTO.getPlainAttr(schema).get().getValues().clear();\n-                if (object != null) {\n-                    attributableTO.getPlainAttr(schema).get().getValues().add(object.toString());\n-                }\n+                attributable.getPlainAttr(schema).ifPresent(plainAttr -> {\n+                    plainAttr.getValues().clear();\n+                    Optional.ofNullable(object).ifPresent(o -> plainAttr.getValues().add(o.toString()));\n+                });\n             }\n         });\n "},{"sha":"29c83a79c164431aaff9f2d785c141c0d13e1521","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/status/StatusUtils.java","status":"modified","additions":19,"deletions":20,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FStatusUtils.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.client.ui.commons.ConnIdSpecialName;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.panels.LabelPanel;\n-import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ConnObject;\n@@ -42,18 +41,18 @@ public final class StatusUtils implements Serializable {\n     public static StatusBean getStatusBean(\n             final AnyTO anyTO,\n             final String resource,\n-            final ConnObject connObjectTO,\n+            final ConnObject connObject,\n             final boolean notUser) {\n \n         StatusBean statusBean = new StatusBean(anyTO, resource);\n \n-        if (connObjectTO != null) {\n-            Boolean enabled = isEnabled(connObjectTO);\n+        if (connObject != null) {\n+            Boolean enabled = isEnabled(connObject);\n             statusBean.setStatus(Optional.ofNullable(enabled).map(aBoolean -> aBoolean\n                     ? Status.ACTIVE\n                     : Status.SUSPENDED).orElseGet(() -> (notUser ? Status.ACTIVE : Status.UNDEFINED)));\n \n-            statusBean.setConnObjectLink(getConnObjectLink(connObjectTO));\n+            statusBean.setConnObjectLink(getConnObjectLink(connObject));\n         }\n \n         return statusBean;\n@@ -62,33 +61,33 @@ public static StatusBean getStatusBean(\n     public static StatusBean getStatusBean(\n             final RealmTO realmTO,\n             final String resource,\n-            final ConnObject connObjectTO) {\n+            final ConnObject connObject) {\n \n         StatusBean statusBean = new StatusBean(realmTO, resource);\n \n-        if (connObjectTO != null) {\n-            Boolean enabled = isEnabled(connObjectTO);\n+        if (connObject != null) {\n+            Boolean enabled = isEnabled(connObject);\n             statusBean.setStatus(Optional.ofNullable(enabled)\n                     .filter(aBoolean -> !aBoolean).map(aBoolean -> Status.SUSPENDED).orElse(Status.ACTIVE));\n \n-            statusBean.setConnObjectLink(getConnObjectLink(connObjectTO));\n+            statusBean.setConnObjectLink(getConnObjectLink(connObject));\n         }\n \n         return statusBean;\n     }\n \n-    public static Boolean isEnabled(final ConnObject objectTO) {\n-        Optional<Attr> status = objectTO.getAttr(ConnIdSpecialName.ENABLE);\n-        return status.isPresent() && status.get().getValues() != null && !status.get().getValues().isEmpty()\n-                ? Boolean.valueOf(status.get().getValues().get(0))\n-                : Boolean.FALSE;\n+    public static Boolean isEnabled(final ConnObject connObject) {\n+        return connObject.getAttr(ConnIdSpecialName.ENABLE).\n+                filter(s -> !s.getValues().isEmpty()).\n+                map(s -> Boolean.valueOf(s.getValues().get(0))).\n+                orElse(Boolean.FALSE);\n     }\n \n-    private static String getConnObjectLink(final ConnObject objectTO) {\n-        Optional<Attr> name = Optional.ofNullable(objectTO).map(to -> to.getAttr(ConnIdSpecialName.NAME)).orElse(null);\n-        return name != null && name.isPresent() && name.get().getValues() != null && !name.get().getValues().isEmpty()\n-                ? name.get().getValues().get(0)\n-                : null;\n+    public static String getConnObjectLink(final ConnObject connObject) {\n+        return connObject.getAttr(ConnIdSpecialName.NAME).\n+                filter(s -> !s.getValues().isEmpty()).\n+                map(s -> s.getValues().get(0)).\n+                orElse(null);\n     }\n \n     public static StatusR.Builder statusR(final Collection<StatusBean> statuses) {\n@@ -207,7 +206,7 @@ public static Panel getWarningStatusPanel(final String componentId) {\n         return new LabelPanel(componentId,\n                 getLabel(\"label\", \"warning icon\", \"Propagation failed\", Constants.WARNING_ICON));\n     }\n-    \n+\n     public static Label getLabel(final String componentId, final String alt, final String title, final String clazz) {\n         return new Label(componentId, StringUtils.EMPTY) {\n "},{"sha":"d8c2afaa2c152bf7c02a911300e6298b79d6ecec","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -160,15 +160,13 @@ public void onEvent(final IEvent<?> event) {\n                 newItemEvent.getTarget().ifPresent(t -> t.add(templateModal.setContent(modalPanel)));\n                 templateModal.show(true);\n             } else if (event.getPayload() instanceof AjaxWizard.NewItemCancelEvent) {\n-                if (newItemEvent.getTarget().isPresent()) {\n-                    templateModal.close(newItemEvent.getTarget().get());\n-                }\n+                newItemEvent.getTarget().ifPresent(templateModal::close);\n             } else if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n                 SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n-                if (newItemEvent.getTarget().isPresent()) {\n-                    ((BasePage) getPage()).getNotificationPanel().refresh(newItemEvent.getTarget().get());\n-                    templateModal.close(newItemEvent.getTarget().get());\n-                }\n+                newItemEvent.getTarget().ifPresent(t -> {\n+                    ((BasePage) getPage()).getNotificationPanel().refresh(t);\n+                    templateModal.close(t);\n+                });\n             }\n         }\n     }"},{"sha":"49f9e996de7b5402604c751a6efbc297e2a22469","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -23,6 +23,7 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -162,14 +163,10 @@ protected Panel customResultBody(final String panelId, final RealmTO item, final\n             @Override\n             protected Component getValueComponent(final String key, final PropagationStatus bean) {\n                 if (\"afterObj\".equalsIgnoreCase(key)) {\n-                    ConnObject afterObj = bean.getAfterObj();\n-                    String remoteId = afterObj == null\n-                            || afterObj.getAttrs().isEmpty()\n-                            || afterObj.getAttr(ConnIdSpecialName.NAME).isEmpty()\n-                            || afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues() == null\n-                            || afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues().isEmpty()\n-                            ? StringUtils.EMPTY\n-                            : afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues().get(0);\n+                    String remoteId = Optional.ofNullable(bean.getAfterObj()).\n+                            flatMap(afterObj -> afterObj.getAttr(ConnIdSpecialName.NAME).\n+                            filter(s -> !s.getValues().isEmpty()).map(s -> s.getValues().get(0))).\n+                            orElse(StringUtils.EMPTY);\n \n                     return new Label(\"field\", remoteId);\n                 }"},{"sha":"6b472df7c7b32fe44713adff589e8a1218b2a86a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -485,15 +485,11 @@ protected boolean statusCondition(final JobTO modelObject) {\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public void onEvent(final IEvent<?> event) {\n-            if (event.getPayload() instanceof AjaxWizard.NewItemEvent) {\n-                Optional<AjaxRequestTarget> target = ((AjaxWizard.NewItemEvent<?>) event.getPayload()).getTarget();\n-\n-                if (target.isPresent()\n-                        && event.getPayload() instanceof AjaxWizard.NewItemCancelEvent\n-                        || event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n+            if (event.getPayload() instanceof AjaxWizard.NewItemCancelEvent\n+                    || event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n \n-                    jobModal.close(target.get());\n-                }\n+                Optional<AjaxRequestTarget> target = ((AjaxWizard.NewItemEvent<?>) event.getPayload()).getTarget();\n+                target.ifPresent(jobModal::close);\n             }\n \n             super.onEvent(event);"},{"sha":"1860c0c606fe756efb61af09e8103ebfd01dcbed","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -22,7 +22,6 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n@@ -41,13 +40,9 @@\n import org.apache.wicket.markup.head.OnDomReadyHeaderItem;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.util.ListModel;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n public abstract class AbstractAttrs<S extends SchemaTO> extends AbstractAttrsWizardStep<S> {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AbstractAttrs.class);\n-\n     private static final long serialVersionUID = -5387344116983102292L;\n \n     private final GroupRestClient groupRestClient = new GroupRestClient();\n@@ -110,14 +105,10 @@ private void setSchemas(final String membership, final List<String> anyTypeClass\n \n     protected List<String> getMembershipAuxClasses(final MembershipTO membershipTO, final String anyType) {\n         try {\n-            final GroupTO groupTO = groupRestClient.read(membershipTO.getGroupKey());\n-            Optional<TypeExtensionTO> typeExtension = groupTO.getTypeExtension(anyType);\n-            if (typeExtension.isEmpty()) {\n-                LOG.trace(\"Unable to locate type extension for \" + anyType);\n-                return List.of();\n-            }\n-            return typeExtension.get().getAuxClasses();\n-\n+            GroupTO groupTO = groupRestClient.read(membershipTO.getGroupKey());\n+            return groupTO.getTypeExtension(anyType).\n+                    map(TypeExtensionTO::getAuxClasses).\n+                    orElse(List.of());\n         } catch (Exception e) {\n             return List.of();\n         }"},{"sha":"2a864702f32f05f824ac3f510aed8b48fea24f1b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrsWizardStep.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -422,20 +422,17 @@ protected AbstractFieldPanel<?> setPanel(\n         }\n \n         protected void setExternalAction(final Attr attr, final AbstractFieldPanel<?> panel) {\n-            Optional<Attr> prevAttr = previousObject == null\n-                    ? Optional.empty()\n-                    : previousObject.getPlainAttr(attr.getSchema());\n-            if (previousObject != null\n-                    && ((prevAttr.isEmpty() && attr.getValues().stream().anyMatch(StringUtils::isNotBlank))\n-                    || (prevAttr.isPresent() && !ListUtils.isEqualList(\n-                    prevAttr.get().getValues().stream().\n-                            filter(StringUtils::isNotBlank).collect(Collectors.toList()),\n-                    attr.getValues().stream().\n-                            filter(StringUtils::isNotBlank).collect(Collectors.toList()))))) {\n-\n-                List<String> oldValues = prevAttr.isPresent()\n-                        ? prevAttr.get().getValues()\n-                        : List.of();\n+            if (previousObject == null) {\n+                return;\n+            }\n+            \n+            Optional<Attr> prevAttr = previousObject.getPlainAttr(attr.getSchema());\n+            if (prevAttr.map(a -> !ListUtils.isEqualList(\n+                    a.getValues().stream().filter(StringUtils::isNotBlank).collect(Collectors.toList()),\n+                    attr.getValues().stream().filter(StringUtils::isNotBlank).collect(Collectors.toList()))).\n+                    orElseGet(() -> attr.getValues().stream().anyMatch(StringUtils::isNotBlank))) {\n+\n+                List<String> oldValues = prevAttr.map(Attr::getValues).orElse(List.of());\n                 panel.showExternAction(new LabelInfo(\"externalAction\", oldValues));\n             }\n         }"},{"sha":"4ca73069b7ba774c5f092b01d8b9012f85d48fbf","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectTemplateWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectTemplateWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectTemplateWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectTemplateWizardBuilder.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -61,8 +61,8 @@ public AnyObjectTemplateWizardBuilder(\n     @Override\n     protected Optional<Details<AnyObjectTO>> addOptionalDetailsPanel(final AnyWrapper<AnyObjectTO> modelObject) {\n         Optional<Details<AnyObjectTO>> details = super.addOptionalDetailsPanel(modelObject);\n-        if (templatable instanceof RealmTO && details.isPresent()) {\n-            details.get().disableRealmSpecification();\n+        if (templatable instanceof RealmTO) {\n+            details.ifPresent(Details::disableRealmSpecification);\n         }\n         return details;\n     }"},{"sha":"ed7f013132e21ddbcaf0343871794f235bb1fb8a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/DerAttrs.java","status":"modified","additions":24,"deletions":30,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -79,19 +79,19 @@ public WebMarkupContainer getPanel(final String panelId) {\n             protected void populateItem(final ListItem<MembershipTO> item) {\n                 final MembershipTO membershipTO = item.getModelObject();\n                 item.add(new Accordion(\"membershipDerSchemas\", List.of(new AbstractTab(\n-                    new StringResourceModel(\n-                        \"attributes.membership.accordion\",\n-                        DerAttrs.this,\n-                        Model.of(membershipTO))) {\n+                        new StringResourceModel(\n+                                \"attributes.membership.accordion\",\n+                                DerAttrs.this,\n+                                Model.of(membershipTO))) {\n \n                     private static final long serialVersionUID = 1037272333056449378L;\n \n                     @Override\n                     public WebMarkupContainer getPanel(final String panelId) {\n                         return new DerAttrs.DerSchemas(\n-                            panelId,\n-                            membershipSchemas.get(membershipTO.getGroupKey()),\n-                            new ListModel<>(getAttrsFromTO(membershipTO)));\n+                                panelId,\n+                                membershipSchemas.get(membershipTO.getGroupKey()),\n+                                new ListModel<>(getAttrsFromTO(membershipTO)));\n                     }\n                 }), Model.of(-1)).setOutputMarkupId(true));\n             }\n@@ -115,7 +115,7 @@ protected List<Attr> getAttrsFromTO(final MembershipTO membershipTO) {\n \n     @Override\n     protected void setAttrs() {\n-        List<Attr> attrs = new ArrayList<>();\n+        List<Attr> derAttrs = new ArrayList<>();\n \n         Map<String, Attr> attrMap = EntityTOUtils.buildAttrMap(anyTO.getDerAttrs());\n \n@@ -126,37 +126,31 @@ protected void setAttrs() {\n                 attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             }\n \n-            attrs.add(attrTO);\n+            derAttrs.add(attrTO);\n         });\n \n         anyTO.getDerAttrs().clear();\n-        anyTO.getDerAttrs().addAll(attrs);\n+        anyTO.getDerAttrs().addAll(derAttrs);\n     }\n \n     @Override\n     protected void setAttrs(final MembershipTO membershipTO) {\n-        List<Attr> attrs = new ArrayList<>();\n-\n-        final Map<String, Attr> attrMap;\n-        if (GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).isPresent()) {\n-            attrMap = EntityTOUtils.buildAttrMap(GroupableRelatableTO.class.cast(anyTO)\n-                    .getMembership(membershipTO.getGroupKey()).get().getDerAttrs());\n-        } else {\n-            attrMap = new HashMap<>();\n-        }\n+        Map<String, Attr> attrMap = GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).\n+                map(gr -> EntityTOUtils.buildAttrMap(gr.getDerAttrs())).\n+                orElseGet(() -> new HashMap<>());\n \n-        membershipSchemas.get(membershipTO.getGroupKey()).values().forEach(schema -> {\n-            Attr attrTO = new Attr();\n-            attrTO.setSchema(schema.getKey());\n+        List<Attr> derAttrs = membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n+            Attr attr = new Attr();\n+            attr.setSchema(schema.getKey());\n             if (attrMap.containsKey(schema.getKey())) {\n-                attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n+                attr.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             }\n \n-            attrs.add(attrTO);\n-        });\n+            return attr;\n+        }).collect(Collectors.toList());\n \n         membershipTO.getDerAttrs().clear();\n-        membershipTO.getDerAttrs().addAll(attrs);\n+        membershipTO.getDerAttrs().addAll(derAttrs);\n     }\n \n     public static class DerSchemas extends Schemas {\n@@ -193,10 +187,10 @@ protected void populateItem(final ListItem<Attr> item) {\n                     }\n \n                     AjaxTextFieldPanel panel = new AjaxTextFieldPanel(\n-                        \"panel\",\n-                        schemas.get(attrTO.getSchema()).getLabel(SyncopeConsoleSession.get().getLocale()),\n-                        model,\n-                        false);\n+                            \"panel\",\n+                            schemas.get(attrTO.getSchema()).getLabel(SyncopeConsoleSession.get().getLocale()),\n+                            model,\n+                            false);\n                     panel.setEnabled(false);\n                     panel.setRequired(true);\n                     panel.setOutputMarkupId(true);"},{"sha":"4cd19d0026d94d8108a5e4d167efc40f934902e5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupTemplateWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupTemplateWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupTemplateWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupTemplateWizardBuilder.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -59,8 +59,8 @@ public GroupTemplateWizardBuilder(\n     @Override\n     protected Optional<Details<GroupTO>> addOptionalDetailsPanel(final AnyWrapper<GroupTO> modelObject) {\n         Optional<Details<GroupTO>> details = super.addOptionalDetailsPanel(modelObject);\n-        if (templatable instanceof RealmTO && details.isPresent()) {\n-            details.get().disableRealmSpecification();\n+        if (templatable instanceof RealmTO) {\n+            details.ifPresent(Details::disableRealmSpecification);\n         }\n         return details;\n     }"},{"sha":"aa536bb9c316767a736be5ac6240a094fc68a5ae","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":21,"deletions":23,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -96,27 +96,27 @@ public WebMarkupContainer getPanel(final String panelId) {\n             protected void populateItem(final ListItem<MembershipTO> item) {\n                 final MembershipTO membershipTO = item.getModelObject();\n                 item.add(new Accordion(\"membershipPlainSchemas\", List.of(new AbstractTab(\n-                    new StringResourceModel(\n-                        \"attributes.membership.accordion\",\n-                        PlainAttrs.this,\n-                        Model.of(membershipTO))) {\n+                        new StringResourceModel(\n+                                \"attributes.membership.accordion\",\n+                                PlainAttrs.this,\n+                                Model.of(membershipTO))) {\n \n                     private static final long serialVersionUID = 1037272333056449378L;\n \n                     @Override\n                     public WebMarkupContainer getPanel(final String panelId) {\n                         return new PlainSchemasMemberships(\n-                            panelId,\n-                            membershipSchemas.get(membershipTO.getGroupKey()),\n-                            new LoadableDetachableModel<>() { // SYNCOPE-1439\n+                                panelId,\n+                                membershipSchemas.get(membershipTO.getGroupKey()),\n+                                new LoadableDetachableModel<>() { // SYNCOPE-1439\n \n-                                private static final long serialVersionUID = 526768546610546553L;\n+                            private static final long serialVersionUID = 526768546610546553L;\n \n-                                @Override\n-                                protected Attributable load() {\n-                                    return membershipTO;\n-                                }\n-                            });\n+                            @Override\n+                            protected Attributable load() {\n+                                return membershipTO;\n+                            }\n+                        });\n                     }\n                 }), Model.of(-1)).setOutputMarkupId(true));\n             }\n@@ -147,7 +147,7 @@ protected List<Attr> getAttrsFromTO(final MembershipTO membershipTO) {\n     protected void setAttrs() {\n         Map<String, Attr> attrMap = EntityTOUtils.buildAttrMap(anyTO.getPlainAttrs());\n \n-        List<Attr> attrs = schemas.values().stream().map(schema -> {\n+        List<Attr> plainAttrs = schemas.values().stream().map(schema -> {\n             Attr attr = new Attr();\n             attr.setSchema(schema.getKey());\n             if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n@@ -159,18 +159,16 @@ protected void setAttrs() {\n         }).collect(Collectors.toList());\n \n         anyTO.getPlainAttrs().clear();\n-        anyTO.getPlainAttrs().addAll(attrs);\n+        anyTO.getPlainAttrs().addAll(plainAttrs);\n     }\n \n     @Override\n     protected void setAttrs(final MembershipTO membershipTO) {\n-        Map<String, Attr> attrMap =\n-                GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).isPresent()\n-                ? EntityTOUtils.buildAttrMap(GroupableRelatableTO.class.cast(anyTO).\n-                        getMembership(membershipTO.getGroupKey()).get().getPlainAttrs())\n-                : new HashMap<>();\n+        Map<String, Attr> attrMap = GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).\n+                map(gr -> EntityTOUtils.buildAttrMap(gr.getPlainAttrs())).\n+                orElseGet(() -> new HashMap<>());\n \n-        List<Attr> attrs = membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n+        List<Attr> plainAttrs = membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n             Attr attr = new Attr();\n             attr.setSchema(schema.getKey());\n             if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n@@ -182,7 +180,7 @@ protected void setAttrs(final MembershipTO membershipTO) {\n         }).collect(Collectors.toList());\n \n         membershipTO.getPlainAttrs().clear();\n-        membershipTO.getPlainAttrs().addAll(attrs);\n+        membershipTO.getPlainAttrs().addAll(plainAttrs);\n     }\n \n     protected class PlainSchemasOwn extends PlainSchemas<List<Attr>> {\n@@ -221,7 +219,7 @@ public PlainSchemasMemberships(\n             super(id);\n \n             add(new ListView<>(\"schemas\", new ListModel<>(attributableTO.getObject().\n-                getPlainAttrs().stream().sorted(attrComparator).collect(Collectors.toList()))) {\n+                    getPlainAttrs().stream().sorted(attrComparator).collect(Collectors.toList()))) {\n \n                 private static final long serialVersionUID = 5306618783986001008L;\n "},{"sha":"cc828362cf5b46f4bdaa35ad0682d5915dc8f403","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserTemplateWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserTemplateWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserTemplateWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserTemplateWizardBuilder.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -77,8 +77,8 @@ public UserTemplateWizardBuilder(\n     @Override\n     protected Optional<Details<UserTO>> addOptionalDetailsPanel(final AnyWrapper<UserTO> modelObject) {\n         Optional<Details<UserTO>> details = super.addOptionalDetailsPanel(modelObject);\n-        if (templatable instanceof RealmTO && details.isPresent()) {\n-            details.get().disableRealmSpecification();\n+        if (templatable instanceof RealmTO) {\n+            details.ifPresent(Details::disableRealmSpecification);\n         }\n         return details;\n     }"},{"sha":"4d4eae7aab38b67cab554c91d1ae2e70727e33fe","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/VirAttrs.java","status":"modified","additions":16,"deletions":22,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -120,11 +120,11 @@ protected List<Attr> getAttrsFromTO(final MembershipTO membershipTO) {\n \n     @Override\n     protected void setAttrs() {\n-        List<Attr> attrs = new ArrayList<>();\n+        List<Attr> virAttrs = new ArrayList<>();\n \n         Map<String, Attr> attrMap = EntityTOUtils.buildAttrMap(anyTO.getVirAttrs());\n \n-        attrs.addAll(schemas.values().stream().map(schema -> {\n+        virAttrs.addAll(schemas.values().stream().map(schema -> {\n             Attr attrTO = new Attr();\n             attrTO.setSchema(schema.getKey());\n             if (attrMap.containsKey(schema.getKey())) {\n@@ -136,34 +136,28 @@ protected void setAttrs() {\n         }).collect(Collectors.toList()));\n \n         anyTO.getVirAttrs().clear();\n-        anyTO.getVirAttrs().addAll(attrs);\n+        anyTO.getVirAttrs().addAll(virAttrs);\n     }\n \n     @Override\n     protected void setAttrs(final MembershipTO membershipTO) {\n-        List<Attr> attrs = new ArrayList<>();\n-\n-        final Map<String, Attr> attrMap;\n-        if (GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).isPresent()) {\n-            attrMap = EntityTOUtils.buildAttrMap(GroupableRelatableTO.class.cast(anyTO)\n-                    .getMembership(membershipTO.getGroupKey()).get().getVirAttrs());\n-        } else {\n-            attrMap = new HashMap<>();\n-        }\n-\n-        attrs.addAll(membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n-            Attr attrTO = new Attr();\n-            attrTO.setSchema(schema.getKey());\n-            if (attrMap.containsKey(schema.getKey())) {\n-                attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n+        Map<String, Attr> attrMap = GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).\n+                map(gr -> EntityTOUtils.buildAttrMap(gr.getVirAttrs())).\n+                orElseGet(() -> new HashMap<>());\n+\n+        List<Attr> virAttrs = membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n+            Attr attr = new Attr();\n+            attr.setSchema(schema.getKey());\n+            if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n+                attr.getValues().add(StringUtils.EMPTY);\n             } else {\n-                attrTO.getValues().add(StringUtils.EMPTY);\n+                attr.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             }\n-            return attrTO;\n-        }).collect(Collectors.toList()));\n+            return attr;\n+        }).collect(Collectors.toList());\n \n         membershipTO.getVirAttrs().clear();\n-        membershipTO.getVirAttrs().addAll(attrs);\n+        membershipTO.getVirAttrs().addAll(virAttrs);\n     }\n \n     public class VirSchemas extends Schemas {"},{"sha":"ebb7d35e8c6f6e936476765d8b5be419fd8f11d4","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/DerAttrs.java","status":"modified","additions":20,"deletions":26,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FDerAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FDerAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FDerAttrs.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -69,19 +69,19 @@ public <T extends AnyTO> DerAttrs(\n             protected void populateItem(final ListItem<MembershipTO> item) {\n                 MembershipTO membershipTO = item.getModelObject();\n                 item.add(new Accordion(\"membershipDerSchemas\", List.of(new AbstractTab(\n-                    new StringResourceModel(\n-                        \"attributes.membership.accordion\",\n-                        DerAttrs.this,\n-                        Model.of(membershipTO))) {\n+                        new StringResourceModel(\n+                                \"attributes.membership.accordion\",\n+                                DerAttrs.this,\n+                                Model.of(membershipTO))) {\n \n                     private static final long serialVersionUID = 1037272333056449378L;\n \n                     @Override\n                     public WebMarkupContainer getPanel(final String panelId) {\n                         return new DerAttrs.DerSchemas(\n-                            panelId,\n-                            membershipSchemas.get(membershipTO.getGroupKey()),\n-                            new ListModel<>(getAttrsFromTO(membershipTO)));\n+                                panelId,\n+                                membershipSchemas.get(membershipTO.getGroupKey()),\n+                                new ListModel<>(getAttrsFromTO(membershipTO)));\n                     }\n                 }), Model.of(-1)).setOutputMarkupId(true));\n             }\n@@ -125,25 +125,19 @@ protected void setAttrs() {\n \n     @Override\n     protected void setAttrs(final MembershipTO membershipTO) {\n-        List<Attr> derAttrs = new ArrayList<>();\n-\n-        final Map<String, Attr> attrMap;\n-        if (GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).isPresent()) {\n-            attrMap = EntityTOUtils.buildAttrMap(GroupableRelatableTO.class.cast(anyTO)\n-                    .getMembership(membershipTO.getGroupKey()).get().getDerAttrs());\n-        } else {\n-            attrMap = new HashMap<>();\n-        }\n+        Map<String, Attr> attrMap = GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).\n+                map(gr -> EntityTOUtils.buildAttrMap(gr.getDerAttrs())).\n+                orElseGet(() -> new HashMap<>());\n \n-        membershipSchemas.get(membershipTO.getGroupKey()).values().forEach(schema -> {\n-            Attr attrTO = new Attr();\n-            attrTO.setSchema(schema.getKey());\n+        List<Attr> derAttrs = membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n+            Attr attr = new Attr();\n+            attr.setSchema(schema.getKey());\n             if (attrMap.containsKey(schema.getKey())) {\n-                attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n+                attr.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             }\n \n-            derAttrs.add(attrTO);\n-        });\n+            return attr;\n+        }).collect(Collectors.toList());\n \n         membershipTO.getDerAttrs().clear();\n         membershipTO.getDerAttrs().addAll(derAttrs);\n@@ -182,10 +176,10 @@ protected void populateItem(final ListItem<Attr> item) {\n                     }\n \n                     AjaxTextFieldPanel panel = new AjaxTextFieldPanel(\n-                        \"panel\",\n-                        schemas.get(attrTO.getSchema()).getLabel(SyncopeEnduserSession.get().getLocale()),\n-                        model,\n-                        false);\n+                            \"panel\",\n+                            schemas.get(attrTO.getSchema()).getLabel(SyncopeEnduserSession.get().getLocale()),\n+                            model,\n+                            false);\n                     panel.setEnabled(false);\n                     panel.setRequired(true);\n                     panel.setOutputMarkupId(true);"},{"sha":"14b26067e16d5460afa2b6579c7c4d4a278b0727","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/PlainAttrs.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -161,17 +161,11 @@ protected void setAttrs() {\n \n     @Override\n     protected void setAttrs(final MembershipTO membershipTO) {\n-        List<Attr> plainAttrs = new ArrayList<>();\n-\n-        final Map<String, Attr> attrMap;\n-        if (GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).isPresent()) {\n-            attrMap = EntityTOUtils.buildAttrMap(GroupableRelatableTO.class.cast(anyTO)\n-                    .getMembership(membershipTO.getGroupKey()).get().getPlainAttrs());\n-        } else {\n-            attrMap = new HashMap<>();\n-        }\n+        Map<String, Attr> attrMap = GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).\n+                map(gr -> EntityTOUtils.buildAttrMap(gr.getPlainAttrs())).\n+                orElseGet(() -> new HashMap<>());\n \n-        plainAttrs.addAll(membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n+        List<Attr> plainAttrs = membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n             Attr attr = new Attr();\n             attr.setSchema(schema.getKey());\n             if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n@@ -180,7 +174,7 @@ protected void setAttrs(final MembershipTO membershipTO) {\n                 attr.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             }\n             return attr;\n-        }).collect(Collectors.toList()));\n+        }).collect(Collectors.toList());\n \n         membershipTO.getPlainAttrs().clear();\n         membershipTO.getPlainAttrs().addAll(plainAttrs);"},{"sha":"bbcaecd8ed09e9a7e2e9ee1d7a8aa3b41ce873d2","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/VirAttrs.java","status":"modified","additions":31,"deletions":43,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FVirAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FVirAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FVirAttrs.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -60,7 +60,7 @@ public <T extends AnyTO> VirAttrs(\n \n         super(id, modelObject, anyTypeClasses, whichVirAttrs);\n \n-        add(new VirAttrs.VirSchemas(\"virSchemas\", schemas, attrs).setOutputMarkupId(true));\n+        add(new VirAttrs.VirSchemas(\"virSchemas\", null, schemas, attrs).setOutputMarkupId(true));\n         add(new ListView<>(\"membershipsVirSchemas\", membershipTOs) {\n \n             private static final long serialVersionUID = 9101744072914090143L;\n@@ -69,20 +69,20 @@ public <T extends AnyTO> VirAttrs(\n             protected void populateItem(final ListItem<MembershipTO> item) {\n                 MembershipTO membershipTO = item.getModelObject();\n                 item.add(new Accordion(\"membershipVirSchemas\", List.of(\n-                    new AbstractTab(new StringResourceModel(\n-                        \"attributes.membership.accordion\", VirAttrs.this, Model.of(membershipTO))) {\n+                        new AbstractTab(new StringResourceModel(\n+                                \"attributes.membership.accordion\", VirAttrs.this, Model.of(membershipTO))) {\n \n-                        private static final long serialVersionUID = 1037272333056449378L;\n+                    private static final long serialVersionUID = 1037272333056449378L;\n \n-                        @Override\n-                        public WebMarkupContainer getPanel(final String panelId) {\n-                            return new VirAttrs.VirSchemas(\n+                    @Override\n+                    public WebMarkupContainer getPanel(final String panelId) {\n+                        return new VirAttrs.VirSchemas(\n                                 panelId,\n                                 membershipTO.getGroupName(),\n                                 membershipSchemas.get(membershipTO.getGroupKey()),\n                                 new ListModel<>(getAttrsFromTO(membershipTO)));\n-                        }\n-                    }), Model.of(-1)).setOutputMarkupId(true));\n+                    }\n+                }), Model.of(-1)).setOutputMarkupId(true));\n             }\n         }).setOutputMarkupId(true);\n     }\n@@ -125,26 +125,20 @@ protected void setAttrs() {\n \n     @Override\n     protected void setAttrs(final MembershipTO membershipTO) {\n-        List<Attr> virAttrs = new ArrayList<>();\n-\n-        final Map<String, Attr> attrMap;\n-        if (GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).isPresent()) {\n-            attrMap = EntityTOUtils.buildAttrMap(GroupableRelatableTO.class.cast(anyTO)\n-                    .getMembership(membershipTO.getGroupKey()).get().getVirAttrs());\n-        } else {\n-            attrMap = new HashMap<>();\n-        }\n-\n-        virAttrs.addAll(membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n-            Attr attrTO = new Attr();\n-            attrTO.setSchema(schema.getKey());\n-            if (attrMap.containsKey(schema.getKey())) {\n-                attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n+        Map<String, Attr> attrMap = GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).\n+                map(gr -> EntityTOUtils.buildAttrMap(gr.getVirAttrs())).\n+                orElseGet(() -> new HashMap<>());\n+\n+        List<Attr> virAttrs = membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n+            Attr attr = new Attr();\n+            attr.setSchema(schema.getKey());\n+            if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n+                attr.getValues().add(StringUtils.EMPTY);\n             } else {\n-                attrTO.getValues().add(StringUtils.EMPTY);\n+                attr.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             }\n-            return attrTO;\n-        }).collect(Collectors.toList()));\n+            return attr;\n+        }).collect(Collectors.toList());\n \n         membershipTO.getVirAttrs().clear();\n         membershipTO.getVirAttrs().addAll(virAttrs);\n@@ -154,18 +148,12 @@ public class VirSchemas extends Schemas {\n \n         private static final long serialVersionUID = -4730563859116024676L;\n \n-        public VirSchemas(\n-                final String id,\n-                final Map<String, VirSchemaTO> schemas,\n-                final IModel<List<Attr>> attrTOs) {\n-            this(id, null, schemas, attrTOs);\n-        }\n-\n         public VirSchemas(\n                 final String id,\n                 final String groupName,\n                 final Map<String, VirSchemaTO> schemas,\n                 final IModel<List<Attr>> attrTOs) {\n+\n             super(id);\n \n             add(new ListView<>(\"schemas\", attrTOs) {\n@@ -179,24 +167,24 @@ protected void populateItem(final ListItem<Attr> item) {\n \n                     // set default values, if any\n                     if (attrTO.getValues().stream().filter(StringUtils::isNotBlank)\n-                        .collect(Collectors.toList()).isEmpty()) {\n+                            .collect(Collectors.toList()).isEmpty()) {\n                         attrTO.getValues().clear();\n                         attrTO.getValues().addAll(getDefaultValues(attrTO.getSchema(), groupName));\n                     }\n \n                     VirSchemaTO virSchemaTO = schemas.get(attrTO.getSchema());\n \n                     AbstractFieldPanel<?> panel = new AjaxTextFieldPanel(\n-                        \"panel\",\n-                        virSchemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n-                        new Model<>(),\n-                        false);\n+                            \"panel\",\n+                            virSchemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n+                            new Model<>(),\n+                            false);\n \n                     panel = new MultiFieldPanel.Builder<>(\n-                        new PropertyModel<List<String>>(attrTO, \"values\")).build(\n-                        \"panel\",\n-                        virSchemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n-                        AjaxTextFieldPanel.class.cast(panel));\n+                            new PropertyModel<List<String>>(attrTO, \"values\")).build(\n+                            \"panel\",\n+                            virSchemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n+                            AjaxTextFieldPanel.class.cast(panel));\n                     panel.setEnabled(!virSchemaTO.isReadonly() && !renderAsReadonly(attrTO.getSchema(), groupName));\n \n                     item.add(panel);"},{"sha":"8d937ea8a6c8d9bcf938ab736eda75451309a25a","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import java.util.Optional;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n@@ -44,15 +43,15 @@ public void beforeProvision(\n             final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final AnyCR anyCR)\n             throws JobExecutionException {\n \n-        Optional<Attr> attrTO = anyCR.getPlainAttrs().stream().\n-                filter(attr -> \"fullname\".equals(attr.getSchema())).findFirst();\n-        if (attrTO.isEmpty()) {\n-            attrTO = Optional.of(new Attr());\n-            attrTO.get().setSchema(\"fullname\");\n-            anyCR.getPlainAttrs().add(attrTO.get());\n-        }\n-        attrTO.get().getValues().clear();\n-        attrTO.get().getValues().add(String.valueOf(counter++));\n+        Attr attrTO = anyCR.getPlainAttrs().stream().\n+                filter(attr -> \"fullname\".equals(attr.getSchema())).findFirst().\n+                orElseGet(() -> {\n+                    Attr a = new Attr();\n+                    a.setSchema(\"fullname\");\n+                    return a;\n+                });\n+        attrTO.getValues().clear();\n+        attrTO.getValues().add(String.valueOf(counter++));\n     }\n \n     @Override"},{"sha":"2c25bcfd5e8ddc051b7f50db856a0a8e45ec0e9c","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -458,7 +458,7 @@ under the License.\n \n     <wicket.version>10.0.0-M1-SNAPSHOT</wicket.version>\n     <wicketstuff.version>10.0.0-SNAPSHOT</wicketstuff.version>\n-    <wicket-jqueryui.version>9.11.0</wicket-jqueryui.version>\n+    <wicket-jqueryui.version>9.12.0</wicket-jqueryui.version>\n     <wicket-bootstrap.version>5.0.6</wicket-bootstrap.version>\n     <wicket-spring-boot.version>4.0.0-SNAPSHOT</wicket-spring-boot.version>\n \n@@ -1660,7 +1660,7 @@ under the License.\n             <dependency>\n               <groupId>com.puppycrawl.tools</groupId>\n               <artifactId>checkstyle</artifactId>\n-              <version>10.9.2</version>\n+              <version>10.9.3</version>\n             </dependency>\n           </dependencies>\n           <configuration>"},{"sha":"5696bce4c0234539578333a7acaabb0c341e1072","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAWebExceptionHandler.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAWebExceptionHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAWebExceptionHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAWebExceptionHandler.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -72,14 +72,12 @@ private URI getError(final ServerWebExchange exchange) {\n         String routeId = exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_PREDICATE_ROUTE_ATTR);\n         if (StringUtils.isNotBlank(routeId)) {\n             Optional<URI> routeError = Optional.ofNullable(CACHE.get(routeId)).orElseGet(() -> {\n-                URI uri = null;\n                 Optional<SRARouteTO> route = routeProvider.getRouteTOs().stream().\n                         filter(r -> routeId.equals(r.getKey())).findFirst();\n-                if (route.isPresent()) {\n-                    uri = route.get().getError();\n-                }\n+                URI uri = route.map(SRARouteTO::getError).orElse(null);\n \n-                return CACHE.put(routeId, Optional.ofNullable(uri));\n+                CACHE.put(routeId, Optional.ofNullable(uri));\n+                return CACHE.get(routeId);\n             });\n             if (routeError.isPresent()) {\n                 error = routeError.get();"},{"sha":"1a91b1b1927bd7e0c8b0b7dee4d37832c0769211","filename":"sra/src/main/java/org/apache/syncope/sra/security/AbstractServerLogoutSuccessHandler.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FAbstractServerLogoutSuccessHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FAbstractServerLogoutSuccessHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FAbstractServerLogoutSuccessHandler.java?ref=9bb3895469c8c9bb478b0e0f190d36c9eb1bac0d","patch":"@@ -58,12 +58,9 @@ protected URI getPostLogout(final WebFilterExchange exchange) {\n         String routeId = exchange.getExchange().getAttribute(ServerWebExchangeUtils.GATEWAY_PREDICATE_ROUTE_ATTR);\n         if (StringUtils.isNotBlank(routeId)) {\n             Optional<URI> routePostLogout = Optional.ofNullable(CACHE.get(routeId)).orElseGet(() -> {\n-                URI uri = null;\n                 Optional<SRARouteTO> route = routeProvider.getRouteTOs().stream().\n                         filter(r -> routeId.equals(r.getKey())).findFirst();\n-                if (route.isPresent()) {\n-                    uri = route.get().getPostLogout();\n-                }\n+                URI uri = route.map(SRARouteTO::getPostLogout).orElse(null);\n \n                 CACHE.put(routeId, Optional.ofNullable(uri));\n                 return CACHE.get(routeId);"}]}