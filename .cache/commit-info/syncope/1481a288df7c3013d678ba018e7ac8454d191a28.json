{"sha":"1481a288df7c3013d678ba018e7ac8454d191a28","node_id":"C_kwDOJfYA1toAKDE0ODFhMjg4ZGY3YzMwMTNkNjc4YmEwMThlN2FjODQ1NGQxOTFhMjg","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-11-12T16:19:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-11-12T16:19:23Z"},"message":"[SYNCOPE-1650] Enforcing general id pattern for usernames only when either no account policy is defined or no pattern is defined with DefaultAccountRule config","tree":{"sha":"e29cc18fd09143e25839e34a8b10602de12e3ea9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e29cc18fd09143e25839e34a8b10602de12e3ea9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1481a288df7c3013d678ba018e7ac8454d191a28","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1481a288df7c3013d678ba018e7ac8454d191a28","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1481a288df7c3013d678ba018e7ac8454d191a28","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1481a288df7c3013d678ba018e7ac8454d191a28/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a3d01f17c65179ede73161fcc380cd4fc857be13","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a3d01f17c65179ede73161fcc380cd4fc857be13","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a3d01f17c65179ede73161fcc380cd4fc857be13"}],"stats":{"total":246,"additions":120,"deletions":126},"files":[{"sha":"c2ff1322e1850f5e3607ab48d6832eff78d9c02c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":2,"deletions":19,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -27,16 +27,12 @@ public final class SyncopeConstants {\n \n     public static final String ROOT_REALM = \"/\";\n \n-    public static final String REALM_ANYTYPE = \"REALM\";\n-\n-    public static final Set<String> FULL_ADMIN_REALMS = Set.of(\"/\");\n+    public static final Set<String> FULL_ADMIN_REALMS = Set.of(ROOT_REALM);\n \n-    public static final String UNAUTHENTICATED = \"unauthenticated\";\n+    public static final String REALM_ANYTYPE = \"REALM\";\n \n     public static final String ENUM_VALUES_SEPARATOR = \";\";\n \n-    public static final String NAME_PATTERN = \"[\\\\p{L}\\\\p{gc=Mn}\\\\p{gc=Me}\\\\p{gc=Mc}\\\\p{Digit}\\\\p{gc=Pc} \\\\-@.~]+\";\n-\n     public static final String[] DATE_PATTERNS = {\n         \"yyyy-MM-dd'T'HH:mm:ssZ\",\n         \"EEE, dd MMM yyyy HH:mm:ss z\",\n@@ -47,25 +43,12 @@ public final class SyncopeConstants {\n \n     public static final String DEFAULT_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\n \n-    public static final String ROOT_LOGGER = \"ROOT\";\n-\n-    public static final String GROUP_OWNER_ROLE = \"GROUP_OWNER\";\n-\n-    public static final Pattern EMAIL_PATTERN = Pattern.compile(\n-            \"^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*\"\n-            + \"@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$\",\n-            Pattern.CASE_INSENSITIVE);\n-\n     public static final String UUID_REGEX = \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\";\n \n     public static final Pattern UUID_PATTERN = Pattern.compile(UUID_REGEX);\n \n     public static final String ENCRYPTED_DECODE_CONVERSION_PATTERN = \"ENCRYPTED_DECODE_CONVERSION_PATTERN\";\n \n-    public static final String DOUBLE_DASH = \"--\";\n-\n-    public static final String CRLF = \"\\r\\n\";\n-\n     private SyncopeConstants() {\n         // private constructor for utility class\n     }"},{"sha":"681a3466faebb3b6740f285fca349115724b8143","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadGenerator.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadGenerator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public final class BatchPayloadGenerator {\n \n@@ -31,10 +31,10 @@ public static <T extends BatchItem> String generate(final List<T> items, final S\n         StringBuilder payload = new StringBuilder();\n \n         items.forEach(item -> {\n-            payload.append(boundary).append(SyncopeConstants.CRLF);\n+            payload.append(boundary).append(JAXRSService.CRLF);\n             payload.append(HttpHeaders.CONTENT_TYPE).append(\": \").append(\"application/http\").append('\\n');\n             payload.append(\"Content-Transfer-Encoding: binary\").append('\\n');\n-            payload.append(SyncopeConstants.CRLF);\n+            payload.append(JAXRSService.CRLF);\n \n             if (item instanceof BatchRequestItem) {\n                 BatchRequestItem bri = BatchRequestItem.class.cast(item);\n@@ -56,15 +56,15 @@ public static <T extends BatchItem> String generate(final List<T> items, final S\n             if (item.getHeaders() != null && !item.getHeaders().isEmpty()) {\n                 item.getHeaders().forEach((key, values) -> values.forEach(\n                         value -> payload.append(key).append(\": \").append(value).append('\\n')));\n-                payload.append(SyncopeConstants.CRLF);\n+                payload.append(JAXRSService.CRLF);\n             }\n \n             if (item.getContent() != null) {\n                 payload.append(item.getContent()).append('\\n');\n             }\n         });\n \n-        payload.append(boundary).append(SyncopeConstants.DOUBLE_DASH).append('\\n');\n+        payload.append(boundary).append(JAXRSService.DOUBLE_DASH).append('\\n');\n \n         return payload.toString();\n     }"},{"sha":"a0e267a6692089ba6734c0d5477930c7c6f4dd04","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLineReader.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLineReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLineReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLineReader.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -26,11 +26,10 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n-\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public class BatchPayloadLineReader implements AutoCloseable {\n \n@@ -71,8 +70,8 @@ public void close() throws IOException {\n     }\n \n     private boolean isBoundary(final String currentLine) {\n-        return (currentBoundary + SyncopeConstants.CRLF).equals(currentLine)\n-                || (currentBoundary + SyncopeConstants.DOUBLE_DASH + SyncopeConstants.CRLF).equals(currentLine);\n+        return (currentBoundary + JAXRSService.CRLF).equals(currentLine)\n+                || (currentBoundary + JAXRSService.DOUBLE_DASH + JAXRSService.CRLF).equals(currentLine);\n     }\n \n     private int fillBuffer() throws IOException {\n@@ -137,9 +136,9 @@ private String readLine() throws IOException {\n                 String charsetString = multipartMixed.getParameters().get(MediaType.CHARSET_PARAMETER);\n                 currentCharset = Optional.ofNullable(charsetString).map(Charset::forName).orElse(DEFAULT_CHARSET);\n \n-                currentBoundary = SyncopeConstants.DOUBLE_DASH + multipartMixed.getParameters().\n+                currentBoundary = JAXRSService.DOUBLE_DASH + multipartMixed.getParameters().\n                         get(RESTHeaders.BOUNDARY_PARAMETER);\n-            } else if (SyncopeConstants.CRLF.equals(currentLine)) {\n+            } else if (JAXRSService.CRLF.equals(currentLine)) {\n                 readState.foundLinebreak();\n             } else if (isBoundary(currentLine)) {\n                 readState.foundBoundary();"},{"sha":"6ebdfd3bafafb74d8e9acbf188ef0c5cf904188e","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -48,4 +48,8 @@ public interface JAXRSService {\n \n     String PARAM_ANYTYPEKEY = \"anyTypeKey\";\n \n+    String DOUBLE_DASH = \"--\";\n+\n+    String CRLF = \"\\r\\n\";\n+\n }"},{"sha":"70e0f78cb9dcf473f9f6130350761bd160662fd2","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -24,14 +24,14 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.provisioning.api.data.RoleDataBinder;\n+import org.apache.syncope.core.spring.security.AuthDataAccessor;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -83,7 +83,7 @@ public RoleTO update(final RoleTO roleTO) {\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ROLE_DELETE + \"')\")\n     public RoleTO delete(final String key) {\n-        if (SyncopeConstants.GROUP_OWNER_ROLE.equals(key)) {\n+        if (AuthDataAccessor.GROUP_OWNER_ROLE.equals(key)) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRole);\n             sce.getElements().add(\"This Role cannot be deleted\");\n             throw sce;"},{"sha":"5b668f4701f67540d10f5e19d7f2b0e56cef3232","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/AuditLoader.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -41,6 +41,8 @@\n \n public class AuditLoader implements SyncopeCoreLoader {\n \n+    protected static final String ROOT_LOGGER = \"ROOT\";\n+\n     protected final AuditAccessor auditAccessor;\n \n     protected final ImplementationLookup implementationLookup;"},{"sha":"2c130956b6dbde636366e3db8f23a3cce6ffc588","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchProcess.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchProcess.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -25,10 +25,10 @@\n import javax.servlet.http.HttpServletRequest;\n import org.apache.cxf.transport.http.AbstractHTTPDestination;\n import org.apache.cxf.transport.http.DestinationRegistry;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.batch.BatchPayloadGenerator;\n import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n import org.apache.syncope.core.persistence.api.entity.Batch;\n import org.slf4j.Logger;\n@@ -131,7 +131,7 @@ public void run() {\n             }\n         });\n \n-        String results = BatchPayloadGenerator.generate(batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary);\n+        String results = BatchPayloadGenerator.generate(batchResponseItems, JAXRSService.DOUBLE_DASH + boundary);\n \n         Batch batch = batchDAO.find(boundary);\n         if (batch == null) {"},{"sha":"d64cfab5d25d2f32b35ab4900296196057cead53","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -286,7 +287,7 @@ public Response deassociate(final ResourceDR req) {\n \n         String boundary = \"deassociate_\" + SecureRandomUtils.generateRandomUUID().toString();\n         return Response.ok(BatchPayloadGenerator.generate(\n-                batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary)).\n+                batchResponseItems, JAXRSService.DOUBLE_DASH + boundary)).\n                 type(RESTHeaders.multipartMixedWith(boundary)).\n                 build();\n     }\n@@ -375,7 +376,7 @@ public Response associate(final ResourceAR req) {\n \n         String boundary = \"associate_\" + SecureRandomUtils.generateRandomUUID().toString();\n         return Response.ok(BatchPayloadGenerator.generate(\n-                batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary)).\n+                batchResponseItems, JAXRSService.DOUBLE_DASH + boundary)).\n                 type(RESTHeaders.multipartMixedWith(boundary)).\n                 build();\n     }"},{"sha":"4d8015610b3d50d319c8b390b56438ca11c49677","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -21,7 +21,6 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -33,6 +32,7 @@\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ExecutableService;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.core.logic.AbstractExecutableLogic;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n@@ -71,7 +71,7 @@ public Response deleteExecutions(final ExecDeleteQuery query) {\n \n         String boundary = \"deleteExecutions_\" + SecureRandomUtils.generateRandomUUID().toString();\n         return Response.ok(BatchPayloadGenerator.generate(\n-                batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary)).\n+                batchResponseItems, JAXRSService.DOUBLE_DASH + boundary)).\n                 type(RESTHeaders.multipartMixedWith(boundary)).\n                 build();\n     }"},{"sha":"e0d6f58c04d3cd14ecdf3f143edad728728f0ff5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Entity.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntity.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -19,9 +19,19 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.io.Serializable;\n+import java.util.regex.Pattern;\n \n @FunctionalInterface\n public interface Entity extends Serializable {\n \n+    String ID_REGEX = \"[\\\\p{L}\\\\p{gc=Mn}\\\\p{gc=Me}\\\\p{gc=Mc}\\\\p{Digit}\\\\p{gc=Pc} \\\\-@.~]+\";\n+\n+    Pattern ID_PATTERN = Pattern.compile('^' + Entity.ID_REGEX, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+    Pattern EMAIL_PATTERN = Pattern.compile(\n+            \"^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*\"\n+            + \"@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n     String getKey();\n }"},{"sha":"ebc9e9d044bc3654df03d475ae8082cbf9952278","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/EmailAddressValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.attrvalue.validation;\n \n import java.util.regex.Matcher;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n \n public class EmailAddressValidator extends AbstractValidator {\n@@ -29,7 +29,7 @@ public class EmailAddressValidator extends AbstractValidator {\n \n     @Override\n     protected void doValidate(final PlainAttrValue attrValue) {\n-        Matcher matcher = SyncopeConstants.EMAIL_PATTERN.matcher(attrValue.<CharSequence>getValue());\n+        Matcher matcher = Entity.EMAIL_PATTERN.matcher(attrValue.<CharSequence>getValue());\n         if (!matcher.matches()) {\n             throw new InvalidPlainAttrValueException(\"\\\"\" + attrValue.getValue() + \"\\\" is not a valid email address\");\n         }"},{"sha":"4143c2cef5c3962ff2bff48d2d6bab8404ae823d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":27,"deletions":28,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -27,14 +27,12 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import javax.persistence.NoResultException;\n import javax.persistence.PersistenceException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -55,6 +53,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Delegation;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -84,9 +83,6 @@\n \n public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n-    protected static final Pattern USERNAME_PATTERN =\n-            Pattern.compile('^' + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n-\n     protected final RoleDAO roleDAO;\n \n     protected final AccessTokenDAO accessTokenDAO;\n@@ -416,31 +412,34 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                 throw new AccountPolicyException(\"Not allowed: \" + user.getUsername());\n             }\n \n-            if (!USERNAME_PATTERN.matcher(user.getUsername()).matches()) {\n-                throw new AccountPolicyException(\"Character(s) not allowed: \" + user.getUsername());\n-            }\n-            user.getLinkedAccounts().stream().\n-                    filter(account -> account.getUsername() != null).\n-                    forEach(account -> {\n-                        if (!USERNAME_PATTERN.matcher(account.getUsername()).matches()) {\n-                            throw new AccountPolicyException(\"Character(s) not allowed: \" + account.getUsername());\n-                        }\n-                    });\n-\n-            for (AccountPolicy policy : getAccountPolicies(user)) {\n-                for (Implementation impl : policy.getRules()) {\n-                    ImplementationManager.buildAccountRule(impl).ifPresent(rule -> {\n-                        rule.enforce(user);\n-\n-                        user.getLinkedAccounts().stream().\n-                                filter(account -> account.getUsername() != null).\n-                                forEach(rule::enforce);\n-                    });\n+            List<AccountPolicy> accountPolicies = getAccountPolicies(user);\n+            if (accountPolicies.isEmpty()) {\n+                if (!Entity.ID_PATTERN.matcher(user.getUsername()).matches()) {\n+                    throw new AccountPolicyException(\"Character(s) not allowed: \" + user.getUsername());\n                 }\n+                user.getLinkedAccounts().stream().\n+                        filter(account -> account.getUsername() != null).\n+                        forEach(account -> {\n+                            if (!Entity.ID_PATTERN.matcher(account.getUsername()).matches()) {\n+                                throw new AccountPolicyException(\"Character(s) not allowed: \" + account.getUsername());\n+                            }\n+                        });\n+            } else {\n+                for (AccountPolicy policy : accountPolicies) {\n+                    for (Implementation impl : policy.getRules()) {\n+                        ImplementationManager.buildAccountRule(impl).ifPresent(rule -> {\n+                            rule.enforce(user);\n+\n+                            user.getLinkedAccounts().stream().\n+                                    filter(account -> account.getUsername() != null).\n+                                    forEach(rule::enforce);\n+                        });\n+                    }\n \n-                suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n-                        && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended();\n-                propagateSuspension |= policy.isPropagateSuspension();\n+                    suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n+                            && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended();\n+                    propagateSuspension |= policy.isPropagateSuspension();\n+                }\n             }\n         } catch (PersistenceException | InvalidEntityException e) {\n             throw e;"},{"sha":"ff376909d149e2cdd2e43deca1e26c035dbe7ae5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AbstractValidator.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import java.lang.annotation.Annotation;\n-import java.util.regex.Pattern;\n import javax.validation.ConstraintValidator;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -30,9 +28,6 @@\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractValidator.class);\n \n-    protected static final Pattern KEY_PATTERN =\n-            Pattern.compile('^' + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n-\n     @Override\n     public void initialize(final A annotation) {\n         // no initialization"},{"sha":"319b3f0f9179595e8c58fe37263f02ec127cf476","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyObjectValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyObjectValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyObjectValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyObjectValidator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -20,6 +20,7 @@\n \n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n \n public class AnyObjectValidator extends AbstractValidator<AnyObjectCheck, AnyObject> {\n@@ -28,7 +29,7 @@ public class AnyObjectValidator extends AbstractValidator<AnyObjectCheck, AnyObj\n     public boolean isValid(final AnyObject anyObject, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        boolean isValid = anyObject.getName() != null && KEY_PATTERN.matcher(anyObject.getName()).matches();\n+        boolean isValid = anyObject.getName() != null && Entity.ID_PATTERN.matcher(anyObject.getName()).matches();\n \n         if (!isValid) {\n             context.buildConstraintViolationWithTemplate("},{"sha":"314ce9b28e215b35bf0379ac5f4fec55cd21893e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ApplicationValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FApplicationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FApplicationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FApplicationValidator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -21,14 +21,15 @@\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n \n public class ApplicationValidator extends AbstractValidator<ApplicationCheck, Application> {\n \n     @Override\n     public boolean isValid(final Application application, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (application.getKey() == null || !KEY_PATTERN.matcher(application.getKey()).matches()) {\n+        if (application.getKey() == null || !Entity.ID_PATTERN.matcher(application.getKey()).matches()) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidKey, application.getKey())).\n                     addPropertyNode(\"key\").addConstraintViolation();"},{"sha":"62fc7b6ef4d59ded026d7df7d14a4ffab288cad5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -24,6 +24,7 @@\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -75,7 +76,7 @@ private static boolean isValid(final Mapping mapping, final ConstraintValidatorC\n     public boolean isValid(final ExternalResource resource, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (resource.getKey() == null || !KEY_PATTERN.matcher(resource.getKey()).matches()) {\n+        if (resource.getKey() == null || !Entity.ID_PATTERN.matcher(resource.getKey()).matches()) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidKey, resource.getKey())).\n                     addPropertyNode(\"key\").addConstraintViolation();"},{"sha":"3ff9e8f31a70f7e1fc2a44c91f56b627aec9fe8f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/GroupValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGroupValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGroupValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGroupValidator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n@@ -44,7 +45,7 @@ public boolean isValid(final Group group, final ConstraintValidatorContext conte\n                     addPropertyNode(\"owner\").addConstraintViolation();\n         }\n \n-        if (isValid && (group.getName() == null || !KEY_PATTERN.matcher(group.getName()).matches())) {\n+        if (isValid && (group.getName() == null || !Entity.ID_PATTERN.matcher(group.getName()).matches())) {\n             isValid = false;\n \n             context.buildConstraintViolationWithTemplate("},{"sha":"3efdf92ad8a80559bc46f2af6e40b9b0fb19cc21","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FImplementationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FImplementationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FImplementationValidator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -20,6 +20,7 @@\n \n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n \n public class ImplementationValidator extends AbstractValidator<ImplementationCheck, Implementation> {\n@@ -28,7 +29,7 @@ public class ImplementationValidator extends AbstractValidator<ImplementationChe\n     public boolean isValid(final Implementation resource, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (resource.getKey() == null || !KEY_PATTERN.matcher(resource.getKey()).matches()) {\n+        if (resource.getKey() == null || !Entity.ID_PATTERN.matcher(resource.getKey()).matches()) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidKey, resource.getKey())).\n                     addPropertyNode(\"key\").addConstraintViolation();"},{"sha":"6d4019f95afeea6a8bc3c33f3fcdc6e5af06bdd7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PrivilegeValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPrivilegeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPrivilegeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPrivilegeValidator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -20,6 +20,7 @@\n \n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n \n public class PrivilegeValidator extends AbstractValidator<PrivilegeCheck, Privilege> {\n@@ -28,7 +29,7 @@ public class PrivilegeValidator extends AbstractValidator<PrivilegeCheck, Privil\n     public boolean isValid(final Privilege privilege, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (privilege.getKey() == null || !KEY_PATTERN.matcher(privilege.getKey()).matches()) {\n+        if (privilege.getKey() == null || !Entity.ID_PATTERN.matcher(privilege.getKey()).matches()) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidKey, privilege.getKey())).\n                     addPropertyNode(\"key\").addConstraintViolation();"},{"sha":"19bf173364d12c5a758b98b3879216361aeb3cad","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RoleValidator.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -19,9 +19,10 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import javax.validation.ConstraintValidatorContext;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.spring.security.AuthDataAccessor;\n \n public class RoleValidator extends AbstractValidator<RoleCheck, Role> {\n \n@@ -30,8 +31,8 @@ public boolean isValid(final Role role, final ConstraintValidatorContext context\n         context.disableDefaultConstraintViolation();\n \n         if (role.getKey() == null\n-                || (!SyncopeConstants.GROUP_OWNER_ROLE.equals(role.getKey())\n-                && !KEY_PATTERN.matcher(role.getKey()).matches())) {\n+                || (!AuthDataAccessor.GROUP_OWNER_ROLE.equals(role.getKey())\n+                && !Entity.ID_PATTERN.matcher(role.getKey()).matches())) {\n \n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidKey, role.getKey()))."},{"sha":"5369b310d59894f68411afd8e01b11e8158af63b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SchemaKeyValidator.java","status":"modified","additions":11,"deletions":21,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaKeyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaKeyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaKeyValidator.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -20,41 +20,31 @@\n \n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtils;\n \n-import java.util.Objects;\n-\n-public class SchemaKeyValidator extends AbstractValidator<SchemaKeyCheck, Object> {\n+public class SchemaKeyValidator extends AbstractValidator<SchemaKeyCheck, Schema> {\n \n     @Override\n-    public boolean isValid(final Object object, final ConstraintValidatorContext context) {\n-        String key = null;\n-        if (object instanceof PlainSchema) {\n-            key = ((PlainSchema) object).getKey();\n-        } else if (object instanceof DerSchema) {\n-            key = ((DerSchema) object).getKey();\n-        } else if (object instanceof VirSchema) {\n-            key = ((VirSchema) object).getKey();\n-        }\n+    public boolean isValid(final Schema schema, final ConstraintValidatorContext context) {\n \n-        boolean isValid = KEY_PATTERN.matcher(Objects.requireNonNull(key)).matches();\n-        if (!isValid) {\n+        if (schema.getKey() == null || !Entity.ID_PATTERN.matcher(schema.getKey()).matches()) {\n             context.disableDefaultConstraintViolation();\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidKey, key)).\n+                    getTemplate(EntityViolationType.InvalidKey, schema.getKey())).\n                     addPropertyNode(\"key\").addConstraintViolation();\n-        } else if (JPAAnyUtils.matchesFieldName(key)) {\n+\n+            return false;\n+        } else if (JPAAnyUtils.matchesFieldName(schema.getKey())) {\n             context.disableDefaultConstraintViolation();\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidKey, \"Schema key not allowed: \" + key)).\n+                    getTemplate(EntityViolationType.InvalidKey, \"Schema key not allowed: \" + schema.getKey())).\n                     addPropertyNode(\"key\").addConstraintViolation();\n \n             return false;\n         }\n \n-        return isValid;\n+        return true;\n     }\n }"},{"sha":"a067afeb114a48b8e6bb0dfcaeb0108f68c285b1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -67,6 +67,7 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.AuthDataAccessor;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.junit.jupiter.api.Test;\n@@ -619,7 +620,7 @@ public void member() {\n     public void asGroupOwner() {\n         // prepare authentication\n         Map<String, Set<String>> entForRealms = new HashMap<>();\n-        roleDAO.find(SyncopeConstants.GROUP_OWNER_ROLE).getEntitlements().forEach(entitlement -> {\n+        roleDAO.find(AuthDataAccessor.GROUP_OWNER_ROLE).getEntitlements().forEach(entitlement -> {\n             Set<String> realms = Optional.ofNullable(entForRealms.get(entitlement)).orElseGet(() -> {\n                 Set<String> r = new HashSet<>();\n                 entForRealms.put(entitlement, r);"},{"sha":"6783418c9cd55c17a7df47ca30bfc26957f79fcb","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrNameParser.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -22,13 +22,13 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -38,23 +38,23 @@ public class IntAttrNameParser {\n     protected static final String END_PATTERN = \")\\\\]\\\\.(.+)\";\n \n     protected static final Pattern PRIVILEGE_PATTERN = Pattern.compile(\n-            \"^privileges\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\");\n+            \"^privileges\\\\[(\" + Entity.ID_REGEX + \")\\\\]\");\n \n     protected static final Pattern ENCLOSING_GROUP_PATTERN = Pattern.compile(\n-            \"^groups\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n+            \"^groups\\\\[(\" + Entity.ID_REGEX + END_PATTERN);\n \n     protected static final Pattern RELATED_USER_PATTERN = Pattern.compile(\n-            \"^users\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n+            \"^users\\\\[(\" + Entity.ID_REGEX + END_PATTERN);\n \n     protected static final Pattern RELATED_ANY_OBJECT_PATTERN = Pattern.compile(\n-            \"^anyObjects\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n+            \"^anyObjects\\\\[(\" + Entity.ID_REGEX + END_PATTERN);\n \n     protected static final Pattern MEMBERSHIP_PATTERN = Pattern.compile(\n-            \"^memberships\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n+            \"^memberships\\\\[(\" + Entity.ID_REGEX + END_PATTERN);\n \n     protected static final Pattern RELATIONSHIP_PATTERN = Pattern.compile(\n-            \"^relationships\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\"\n-            + \"\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n+            \"^relationships\\\\[(\" + Entity.ID_REGEX + \")\\\\]\"\n+            + \"\\\\[(\" + Entity.ID_REGEX + END_PATTERN);\n \n     protected final PlainSchemaDAO plainSchemaDAO;\n "},{"sha":"3e4f674b2c575813a86bc9a9e73fdf57b9ccffcc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -22,7 +22,6 @@\n import java.util.regex.Matcher;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.provisioning.api.data.NotificationDataBinder;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -34,6 +33,7 @@\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n@@ -131,7 +131,7 @@ public void update(final Notification notification, final NotificationTO notific\n \n         if (!notification.getStaticRecipients().isEmpty()) {\n             notification.getStaticRecipients().forEach(mail -> {\n-                Matcher matcher = SyncopeConstants.EMAIL_PATTERN.matcher(mail);\n+                Matcher matcher = Entity.EMAIL_PATTERN.matcher(mail);\n                 if (!matcher.matches()) {\n                     LOG.error(\"Invalid mail address: {}\", mail);\n                     sce.getElements().add(\"staticRecipients: \" + mail);"},{"sha":"90114b9222d6fc2749498f26b5ffdf6d9c460af4","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/DefaultAccountRule.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.springframework.transaction.annotation.Transactional;\n@@ -37,8 +38,6 @@\n @AccountRuleConfClass(DefaultAccountRuleConf.class)\n public class DefaultAccountRule implements AccountRule {\n \n-    private static final Pattern DEFAULT_PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n-\n     private DefaultAccountRuleConf conf;\n \n     @Override\n@@ -78,22 +77,22 @@ protected void enforce(final String username, final Set<String> wordsNotPermitte\n         }\n \n         // check pattern\n-        Pattern pattern = (conf.getPattern() == null) ? DEFAULT_PATTERN : Pattern.compile(conf.getPattern());\n+        Pattern pattern = conf.getPattern() == null ? Entity.ID_PATTERN : Pattern.compile(conf.getPattern());\n         if (!pattern.matcher(username).matches()) {\n             throw new AccountPolicyException(\"Username does not match pattern\");\n         }\n \n         // check prefix\n         conf.getPrefixesNotPermitted().stream().\n-                filter(username::startsWith).\n-                forEach(item -> {\n+                filter(username::startsWith).findAny().\n+                ifPresent(item -> {\n                     throw new AccountPolicyException(\"Prefix not permitted\");\n                 });\n \n         // check suffix\n         conf.getSuffixesNotPermitted().stream().\n-                filter(username::endsWith).\n-                forEach(item -> {\n+                filter(username::endsWith).findAny().\n+                ifPresent(item -> {\n                     throw new AccountPolicyException(\"Suffix not permitted\");\n                 });\n     }"},{"sha":"e9d66592404900c4a270704b3b925b719bd92fe2","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -44,9 +44,11 @@ public final class AuthContextUtils {\n \n     private static final String FAKE_PASSWORD = \"FAKE_PASSWORD\";\n \n+    private static final String UNAUTHENTICATED = \"unauthenticated\";\n+\n     public static String getUsername() {\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n-        return authentication == null ? SyncopeConstants.UNAUTHENTICATED : authentication.getName();\n+        return authentication == null ? UNAUTHENTICATED : authentication.getName();\n     }\n \n     public static void updateUsername(final String newUsername) {"},{"sha":"d05715088a672b18dd295638473982ccb838250c","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1481a288df7c3013d678ba018e7ac8454d191a28/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=1481a288df7c3013d678ba018e7ac8454d191a28","patch":"@@ -86,6 +86,8 @@ public class AuthDataAccessor {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AuthDataAccessor.class);\n \n+    public static final String GROUP_OWNER_ROLE = \"GROUP_OWNER\";\n+\n     protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n     protected static final Set<SyncopeGrantedAuthority> ANONYMOUS_AUTHORITIES =\n@@ -358,7 +360,7 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n         // Give entitlements as assigned by roles (with static or dynamic realms, where applicable) - assigned\n         // either statically and dynamically\n         userDAO.findAllRoles(user).stream().\n-                filter(role -> !SyncopeConstants.GROUP_OWNER_ROLE.equals(role.getKey())).\n+                filter(role -> !GROUP_OWNER_ROLE.equals(role.getKey())).\n                 forEach(role -> role.getEntitlements().forEach(entitlement -> {\n             Set<String> realms = Optional.ofNullable(entForRealms.get(entitlement)).orElseGet(() -> {\n                 Set<String> r = new HashSet<>();\n@@ -374,9 +376,9 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n \n         // Give group entitlements for owned groups\n         groupDAO.findOwnedByUser(user.getKey()).forEach(group -> {\n-            Role groupOwnerRole = roleDAO.find(SyncopeConstants.GROUP_OWNER_ROLE);\n+            Role groupOwnerRole = roleDAO.find(GROUP_OWNER_ROLE);\n             if (groupOwnerRole == null) {\n-                LOG.warn(\"Role {} was not found\", SyncopeConstants.GROUP_OWNER_ROLE);\n+                LOG.warn(\"Role {} was not found\", GROUP_OWNER_ROLE);\n             } else {\n                 groupOwnerRole.getEntitlements().forEach(entitlement -> {\n                     Set<String> realms = Optional.ofNullable(entForRealms.get(entitlement)).orElseGet(() -> {\n@@ -396,7 +398,7 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n     protected Set<SyncopeGrantedAuthority> getDelegatedAuthorities(final Delegation delegation) {\n         Map<String, Set<String>> entForRealms = new HashMap<>();\n \n-        delegation.getRoles().stream().filter(role -> !SyncopeConstants.GROUP_OWNER_ROLE.equals(role.getKey())).\n+        delegation.getRoles().stream().filter(role -> !GROUP_OWNER_ROLE.equals(role.getKey())).\n                 forEach(role -> role.getEntitlements().forEach(entitlement -> {\n             Set<String> realms = Optional.ofNullable(entForRealms.get(entitlement)).orElseGet(() -> {\n                 HashSet<String> r = new HashSet<>();"}]}