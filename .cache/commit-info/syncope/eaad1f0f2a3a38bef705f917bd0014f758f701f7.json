{"sha":"eaad1f0f2a3a38bef705f917bd0014f758f701f7","node_id":"C_kwDOJfYA1toAKGVhYWQxZjBmMmEzYTM4YmVmNzA1ZjkxN2JkMDAxNGY3NThmNzAxZjc","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-25T07:36:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-25T09:58:31Z"},"message":"[SYNCOPE-1726] Ensuring Core and calling WA instance are both available in Keymaster before refreshing","tree":{"sha":"54a073434b4fdad99bfb0b060760164a8988b5ff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/54a073434b4fdad99bfb0b060760164a8988b5ff"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/eaad1f0f2a3a38bef705f917bd0014f758f701f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eaad1f0f2a3a38bef705f917bd0014f758f701f7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eaad1f0f2a3a38bef705f917bd0014f758f701f7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eaad1f0f2a3a38bef705f917bd0014f758f701f7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7388f21987e3cc6ade291691a2ced6e6fa292cd4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7388f21987e3cc6ade291691a2ced6e6fa292cd4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7388f21987e3cc6ade291691a2ced6e6fa292cd4"}],"stats":{"total":127,"additions":70,"deletions":57},"files":[{"sha":"67681a51c6593f4c4e375a0867707881e133ae41","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -394,14 +394,9 @@ protected Query getQuery(final SearchCond cond, final AnyTypeKind kind) {\n                 }\n \n                 if (query == null) {\n-                    Optional<AnyCond> anyCond = cond.getLeaf(AnyCond.class);\n-                    if (anyCond.isPresent()) {\n-                        query = getQuery(anyCond.get(), kind);\n-                    } else {\n-                        query = cond.getLeaf(AttrCond.class).\n-                                map(leaf -> getQuery(leaf, kind)).\n-                                orElse(null);\n-                    }\n+                    query = cond.getLeaf(AnyCond.class).map(ac -> getQuery(ac, kind)).\n+                            or(() -> cond.getLeaf(AttrCond.class).map(ac -> getQuery(ac, kind))).\n+                            orElse(null);\n                 }\n \n                 // allow for additional search conditions"},{"sha":"fe0dcf95a9cfa47602be4d77a4cee16babbf4bd2","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -413,7 +413,7 @@ under the License.\n \n     <cxf.version>4.0.0</cxf.version>\n     <bouncycastle.version>1.72</bouncycastle.version>\n-    <nimbus-jose-jwt.version>9.28</nimbus-jose-jwt.version>\n+    <nimbus-jose-jwt.version>9.29</nimbus-jose-jwt.version>\n \n     <spring-boot.version>3.0.2</spring-boot.version>\n     <spring-cloud-gateway.version>4.0.0</spring-cloud-gateway.version>\n@@ -1488,7 +1488,7 @@ under the License.\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-dependency-plugin</artifactId>\n-          <version>3.3.0</version>\n+          <version>3.5.0</version>\n           <configuration>\n             <outputDirectory>${bundles.directory}</outputDirectory>\n             <artifactItems>"},{"sha":"db42addb119361b518f8083bb1b6724547df857d","filename":"sra/src/main/java/org/apache/syncope/sra/actuate/SRASessions.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSRASessions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSRASessions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSRASessions.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -67,12 +67,12 @@ protected static AMSession map(final MapSession mapSession) {\n         session.setAuthenticationDate(mapSession.getCreationTime().atOffset(OffsetDateTime.now().getOffset()));\n \n         String principal;\n-        if (ctx.getAuthentication() instanceof SAML2AuthenticationToken) {\n-            principal = ((SAML2AuthenticationToken) ctx.getAuthentication()).getPrincipal().getNameId().getValue();\n-        } else if (ctx.getAuthentication() instanceof CASAuthenticationToken) {\n-            principal = ((CASAuthenticationToken) ctx.getAuthentication()).getPrincipal().getPrincipal().getName();\n-        } else if (ctx.getAuthentication() instanceof OAuth2AuthenticationToken) {\n-            principal = ((OAuth2AuthenticationToken) ctx.getAuthentication()).getPrincipal().getName();\n+        if (ctx.getAuthentication() instanceof SAML2AuthenticationToken saml2AuthenticationToken) {\n+            principal = saml2AuthenticationToken.getPrincipal().getUserProfile().getUsername();\n+        } else if (ctx.getAuthentication() instanceof CASAuthenticationToken casAuthenticationToken) {\n+            principal = casAuthenticationToken.getPrincipal().getPrincipal().getName();\n+        } else if (ctx.getAuthentication() instanceof OAuth2AuthenticationToken oauth2AuthenticationToken) {\n+            principal = oauth2AuthenticationToken.getPrincipal().getName();\n         } else {\n             principal = ctx.getAuthentication().getPrincipal().toString();\n         }"},{"sha":"2215b28130f1f3a7bbc600cdfbb4a15855393609","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WABootstrapConfiguration.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWABootstrapConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWABootstrapConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWABootstrapConfiguration.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -42,9 +42,12 @@ public static class WAClientConfiguration {\n         @Value(\"${wa.useGZIPCompression:true}\")\n         private boolean useGZIPCompression;\n \n+        @Value(\"${service.discovery.address}\")\n+        private String serviceDiscoveryAddress;\n+\n         @Bean\n         public WARestClient waRestClient() {\n-            return new WARestClient(anonymousUser, anonymousKey, useGZIPCompression);\n+            return new WARestClient(anonymousUser, anonymousKey, useGZIPCompression, serviceDiscoveryAddress);\n         }\n     }\n "},{"sha":"7d71da2e59ee5f8ecc15c0e89e56c0a90061cca1","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WARestClient.java","status":"modified","additions":34,"deletions":22,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWARestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWARestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWARestClient.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -41,16 +41,47 @@ public class WARestClient {\n \n     private final boolean useGZIPCompression;\n \n+    private final String serviceDiscoveryAddress;\n+\n     private SyncopeClient client;\n \n     public WARestClient(\n             final String anonymousUser,\n             final String anonymousKey,\n-            final boolean useGZIPCompression) {\n+            final boolean useGZIPCompression,\n+            final String serviceDiscoveryAddress) {\n \n         this.anonymousUser = anonymousUser;\n         this.anonymousKey = anonymousKey;\n         this.useGZIPCompression = useGZIPCompression;\n+        this.serviceDiscoveryAddress = serviceDiscoveryAddress;\n+    }\n+\n+    private Optional<NetworkService> getCore() {\n+        try {\n+            ApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+            if (context == null) {\n+                return Optional.empty();\n+            }\n+\n+            Collection<ServiceOps> serviceOpsList = context.getBeansOfType(ServiceOps.class).values();\n+            if (serviceOpsList.isEmpty()) {\n+                return Optional.empty();\n+            }\n+\n+            ServiceOps serviceOps = serviceOpsList.iterator().next();\n+\n+            if (serviceOps.list(NetworkService.Type.WA).\n+                    stream().anyMatch(s -> s.getAddress().equals(serviceDiscoveryAddress))) {\n+\n+                return Optional.of(serviceOps.get(NetworkService.Type.CORE));\n+            }\n+\n+            return Optional.empty();\n+        } catch (KeymasterException e) {\n+            LOG.trace(e.getMessage());\n+        }\n+        return Optional.empty();\n     }\n \n     public SyncopeClient getSyncopeClient() {\n@@ -72,30 +103,11 @@ public SyncopeClient getSyncopeClient() {\n         }\n     }\n \n-    private static Optional<NetworkService> getCore() {\n-        try {\n-            ApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-            if (context == null) {\n-                return Optional.empty();\n-            }\n-\n-            Collection<ServiceOps> serviceOpsList = context.getBeansOfType(ServiceOps.class).values();\n-            if (serviceOpsList.isEmpty()) {\n-                return Optional.empty();\n-            }\n-            ServiceOps serviceOps = serviceOpsList.iterator().next();\n-            return Optional.of(serviceOps.get(NetworkService.Type.CORE));\n-        } catch (KeymasterException e) {\n-            LOG.trace(e.getMessage());\n-        }\n-        return Optional.empty();\n-    }\n-\n-    public static boolean isReady() {\n+    public boolean isReady() {\n         try {\n             return getCore().isPresent();\n         } catch (Exception e) {\n-            LOG.trace(e.getMessage());\n+            LOG.trace(\"While checking Core's availability: {}\", e.getMessage());\n         }\n         return false;\n     }"},{"sha":"06a7203064066fc26a6068b40c226e2668f2c7a0","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/WARefreshContextJob.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWARefreshContextJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWARefreshContextJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWARefreshContextJob.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -36,6 +36,9 @@ public class WARefreshContextJob implements Job {\n \n     private static final Logger LOG = LoggerFactory.getLogger(WARefreshContextJob.class);\n \n+    @Autowired\n+    private WARestClient waRestClient;\n+\n     @Autowired\n     private ContextRefresher contextRefresher;\n \n@@ -46,7 +49,7 @@ public class WARefreshContextJob implements Job {\n     public void execute(final JobExecutionContext jobExecutionContext) throws JobExecutionException {\n         try {\n             LOG.debug(\"Attempting to refresh WA application context\");\n-            if (!WARestClient.isReady()) {\n+            if (!waRestClient.isReady()) {\n                 LOG.debug(\"Syncope client is not yet ready\");\n                 throw new IllegalStateException(\"Syncope core is not yet ready to access requests\");\n             }"},{"sha":"bfa6865ea129018d1e28fe0375ab2945253da35a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/oidc/WAOIDCJWKSGeneratorService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FWAOIDCJWKSGeneratorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FWAOIDCJWKSGeneratorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FWAOIDCJWKSGeneratorService.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -47,20 +47,20 @@ public class WAOIDCJWKSGeneratorService implements OidcJsonWebKeystoreGeneratorS\n     protected final int jwksKeySize;\n \n     public WAOIDCJWKSGeneratorService(\n-            final WARestClient restClient,\n+            final WARestClient waRestClient,\n             final String jwksKeyId,\n             final String jwksType,\n             final int jwksKeySize) {\n \n-        this.waRestClient = restClient;\n+        this.waRestClient = waRestClient;\n         this.jwksKeyId = jwksKeyId;\n         this.jwksType = jwksType;\n         this.jwksKeySize = jwksKeySize;\n     }\n \n     @Override\n     public JsonWebKeySet store(final JsonWebKeySet jsonWebKeySet) throws Exception {\n-        if (!WARestClient.isReady()) {\n+        if (!waRestClient.isReady()) {\n             throw new IllegalStateException(\"Syncope core is not yet ready\");\n         }\n         OIDCJWKSService service = waRestClient.getSyncopeClient().getService(OIDCJWKSService.class);\n@@ -77,7 +77,7 @@ public Optional<Resource> find() {\n \n     @Override\n     public Resource generate() {\n-        if (!WARestClient.isReady()) {\n+        if (!waRestClient.isReady()) {\n             throw new IllegalStateException(\"Syncope core is not yet ready\");\n         }\n "},{"sha":"2161f118cedf9c6cbf50d12ebdf5f754c89ee611","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -37,14 +37,14 @@ public class RestfulSamlIdPMetadataGenerator extends BaseSamlIdPMetadataGenerato\n \n     private static final Logger LOG = LoggerFactory.getLogger(RestfulSamlIdPMetadataGenerator.class);\n \n-    private final WARestClient restClient;\n+    private final WARestClient waRestClient;\n \n     public RestfulSamlIdPMetadataGenerator(\n             final SamlIdPMetadataGeneratorConfigurationContext samlIdPMetadataGeneratorConfigurationContext,\n-            final WARestClient restClient) {\n+            final WARestClient waRestClient) {\n \n         super(samlIdPMetadataGeneratorConfigurationContext);\n-        this.restClient = restClient;\n+        this.waRestClient = waRestClient;\n     }\n \n     @Override\n@@ -97,10 +97,10 @@ public Pair<String, String> buildSelfSignedSigningCert(final Optional<SamlRegist\n     }\n \n     private SyncopeClient getSyncopeClient() {\n-        if (!WARestClient.isReady()) {\n+        if (!waRestClient.isReady()) {\n             LOG.info(\"Syncope client is not yet ready\");\n             throw new IllegalStateException(\"Syncope core is not yet ready to access requests\");\n         }\n-        return restClient.getSyncopeClient();\n+        return waRestClient.getSyncopeClient();\n     }\n }"},{"sha":"71c8fa1d5e06c64c7e8ba86d732c9de88b128c55","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -39,15 +39,15 @@ public class RestfulSamlIdPMetadataLocator extends AbstractSamlIdPMetadataLocato\n \n     private static final Logger LOG = LoggerFactory.getLogger(RestfulSamlIdPMetadataLocator.class);\n \n-    private final WARestClient restClient;\n+    private final WARestClient waRestClient;\n \n     public RestfulSamlIdPMetadataLocator(\n             final CipherExecutor<String, String> metadataCipherExecutor,\n             final Cache<String, SamlIdPMetadataDocument> metadataCache,\n-            final WARestClient restClient) {\n+            final WARestClient waRestClient) {\n \n         super(metadataCipherExecutor, metadataCache);\n-        this.restClient = restClient;\n+        this.waRestClient = waRestClient;\n     }\n \n     @Override\n@@ -122,10 +122,10 @@ private SAML2IdPEntityTO fetchFromCore(final Optional<SamlRegisteredService> reg\n     }\n \n     private SyncopeClient getSyncopeClient() {\n-        if (!WARestClient.isReady()) {\n+        if (!waRestClient.isReady()) {\n             LOG.info(\"Syncope client is not yet ready\");\n             throw new IllegalStateException(\"Syncope core is not yet ready to access requests\");\n         }\n-        return restClient.getSyncopeClient();\n+        return waRestClient.getSyncopeClient();\n     }\n }"},{"sha":"0c44fb9f2582d28f66c68142ff0cf39f0b884f12","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/surrogate/WASurrogateAuthenticationService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FWASurrogateAuthenticationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FWASurrogateAuthenticationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FWASurrogateAuthenticationService.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -63,7 +63,7 @@ public Collection<String> getImpersonationAccounts(final String username) {\n     }\n \n     private ImpersonationService getImpersonationService() {\n-        if (!WARestClient.isReady()) {\n+        if (!waRestClient.isReady()) {\n             throw new IllegalStateException(\"Syncope core is not yet ready\");\n         }\n         return waRestClient.getSyncopeClient().getService(ImpersonationService.class);"},{"sha":"6210ca349e6686dd1a7f7ab3ba4107067cd58d00","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/u2f/WAU2FDeviceRepository.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FWAU2FDeviceRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FWAU2FDeviceRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FWAU2FDeviceRepository.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -133,7 +133,7 @@ public void removeAll() {\n     }\n \n     private U2FRegistrationService getU2FService() {\n-        if (!WARestClient.isReady()) {\n+        if (!waRestClient.isReady()) {\n             throw new IllegalStateException(\"Syncope core is not yet ready\");\n         }\n         return waRestClient.getSyncopeClient().getService(U2FRegistrationService.class);"},{"sha":"6b3e8ac2f2b51b1464ddf3e510b6054f81c58560","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/webauthn/WAWebAuthnCredentialRepository.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FWAWebAuthnCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaad1f0f2a3a38bef705f917bd0014f758f701f7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FWAWebAuthnCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FWAWebAuthnCredentialRepository.java?ref=eaad1f0f2a3a38bef705f917bd0014f758f701f7","patch":"@@ -128,7 +128,7 @@ public Collection<CredentialRegistration> getRegistrationsByUsername(final Strin\n     }\n \n     private WebAuthnRegistrationService getService() {\n-        if (!WARestClient.isReady()) {\n+        if (!waRestClient.isReady()) {\n             throw new IllegalStateException(\"Syncope core is not yet ready\");\n         }\n         return waRestClient.getSyncopeClient().getService(WebAuthnRegistrationService.class);"}]}