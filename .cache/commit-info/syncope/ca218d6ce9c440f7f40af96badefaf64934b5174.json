{"sha":"ca218d6ce9c440f7f40af96badefaf64934b5174","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNhMjE4ZDZjZTljNDQwZjdmNDBhZjk2YmFkZWZhZjY0OTM0YjUxNzQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-24T16:26:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-24T16:26:50Z"},"message":"Using SpinnerFieldPanel everywhere + fixing some minor quirks\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1553298 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9013da3b297264bdea560c01269f512e2c1f1c34","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9013da3b297264bdea560c01269f512e2c1f1c34"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ca218d6ce9c440f7f40af96badefaf64934b5174","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ca218d6ce9c440f7f40af96badefaf64934b5174","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ca218d6ce9c440f7f40af96badefaf64934b5174","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ca218d6ce9c440f7f40af96badefaf64934b5174/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b1ec1c2e176871449398a0677fecbfa4795aa1f4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b1ec1c2e176871449398a0677fecbfa4795aa1f4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b1ec1c2e176871449398a0677fecbfa4795aa1f4"}],"stats":{"total":710,"additions":333,"deletions":377},"files":[{"sha":"f9d5ca60ea18d18e8e68efc18108dbde61cb5ba0","filename":"common/src/main/java/org/apache/syncope/common/annotation/FormAttributeField.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -25,9 +25,13 @@\n \r\n import org.apache.syncope.common.types.IntMappingType;\r\n \r\n-@Target( { ElementType.FIELD })\r\n+@Target({ ElementType.FIELD })\r\n @Retention(RetentionPolicy.RUNTIME)\r\n public @interface FormAttributeField {\r\n \r\n+    boolean userSearch() default false;\r\n+\r\n+    boolean roleSearch() default false;\r\n+\r\n     IntMappingType schema() default IntMappingType.UserSchema;\r\n }\r"},{"sha":"4e4042d89b9b8f21d32e8758cd0d3efd0544a41e","filename":"common/src/main/java/org/apache/syncope/common/report/RoleReportletConf.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FRoleReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FRoleReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FRoleReportletConf.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -50,30 +50,26 @@ public enum Feature {\n \n     }\n \n+    @FormAttributeField(userSearch = true)\n     private String matchingCond;\n \n     @FormAttributeField(schema = IntMappingType.RoleSchema)\n-    private List<String> attrs;\n+    private final List<String> attrs = new ArrayList<String>();\n \n     @FormAttributeField(schema = IntMappingType.RoleDerivedSchema)\n-    private List<String> derAttrs;\n+    private final List<String> derAttrs = new ArrayList<String>();\n \n     @FormAttributeField(schema = IntMappingType.RoleVirtualSchema)\n-    private List<String> virAttrs;\n+    private final List<String> virAttrs = new ArrayList<String>();\n \n-    private List<Feature> features;\n+    private final List<Feature> features = new ArrayList<Feature>();\n \n     public RoleReportletConf() {\n         super();\n     }\n \n     public RoleReportletConf(final String name) {\n         super(name);\n-\n-        attrs = new ArrayList<String>();\n-        derAttrs = new ArrayList<String>();\n-        virAttrs = new ArrayList<String>();\n-        features = new ArrayList<Feature>();\n     }\n \n     @XmlElementWrapper(name = \"attributes\")"},{"sha":"84da2d18ca2a124244df90f3f58f037705c1e6ce","filename":"common/src/main/java/org/apache/syncope/common/report/StaticReportletConf.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -46,15 +46,14 @@ public class StaticReportletConf extends AbstractReportletConf {\n \r\n     private TraceLevel traceLevel;\r\n \r\n-    private List<String> listField;\r\n+    private final List<String> listField = new ArrayList<String>();\r\n \r\n     public StaticReportletConf() {\r\n         super();\r\n     }\r\n \r\n     public StaticReportletConf(final String name) {\r\n         super(name);\r\n-        listField = new ArrayList<String>();\r\n     }\r\n \r\n     public Date getDateField() {\r"},{"sha":"436805024cb7c113a31a369ed685d14a996b687f","filename":"common/src/main/java/org/apache/syncope/common/report/UserReportletConf.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -55,18 +55,19 @@ public enum Feature {\n \r\n     private static final long serialVersionUID = 6602717600064602764L;\r\n \r\n+    @FormAttributeField(userSearch = true)\r\n     private String matchingCond;\r\n \r\n     @FormAttributeField(schema = IntMappingType.UserSchema)\r\n-    private List<String> attrs = new ArrayList<String>();\r\n+    private final List<String> attrs = new ArrayList<String>();\r\n \r\n     @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\r\n-    private List<String> derAttrs = new ArrayList<String>();\r\n+    private final List<String> derAttrs = new ArrayList<String>();\r\n \r\n     @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\r\n-    private List<String> virAttrs = new ArrayList<String>();\r\n+    private final List<String> virAttrs = new ArrayList<String>();\r\n \r\n-    private List<Feature> features = new ArrayList<Feature>();\r\n+    private final List<Feature> features = new ArrayList<Feature>();\r\n \r\n     public UserReportletConf() {\r\n         super();\r"},{"sha":"a046dda4f7ca7b91d5a6113fa8d15f8be418ec78","filename":"common/src/main/java/org/apache/syncope/common/types/SyncPolicySpec.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -36,7 +36,7 @@ public class SyncPolicySpec extends AbstractPolicySpec {\n      * SyncopeUser attributes and fields for matching during synchronization.\r\n      */\r\n     @SchemaList(extended = true)\r\n-    private List<String> uAltSearchSchemas = new ArrayList<String>();\r\n+    private final List<String> uAltSearchSchemas = new ArrayList<String>();\r\n \r\n     @ClassList\r\n     private String userJavaRule;\r\n@@ -45,7 +45,7 @@ public class SyncPolicySpec extends AbstractPolicySpec {\n      * SyncopeRole attributes and fields for matching during synchronization.\r\n      */\r\n     @SchemaList(extended = true)\r\n-    private List<String> rAltSearchSchemas = new ArrayList<String>();\r\n+    private final List<String> rAltSearchSchemas = new ArrayList<String>();\r\n \r\n     @ClassList\r\n     private String roleJavaRule;\r"},{"sha":"5c8d4b48b89dec7c69e33efa39ca805e37ad6a58","filename":"console/src/main/java/org/apache/syncope/console/commons/Constants.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -90,6 +90,16 @@ public final class Constants {\n \n     public static final String PREF_POLICY_PAGINATOR_ROWS = \"policy.paginator.rows\";\n \n+    /**\n+     * ConnId's GuardedString is not in the classpath.\n+     */\n+    public static final String GUARDED_STRING = \"org.identityconnectors.common.security.GuardedString\";\n+\n+    /**\n+     * ConnId's GuardedByteArray is not in the classpath.\n+     */\n+    public static final String GUARDED_BYTE_ARRAY = \"org.identityconnectors.common.security.GuardedByteArray\";\n+\n     private Constants() {\n         // private constructor for static utility class\n     }"},{"sha":"9b4e29b25ae6a565b914c9516f8fe89aedee8b9e","filename":"console/src/main/java/org/apache/syncope/console/commons/PreferenceManager.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -28,14 +28,14 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.wicket.request.Request;\n import org.apache.wicket.request.Response;\n import org.apache.wicket.util.cookies.CookieDefaults;\n import org.apache.wicket.util.cookies.CookieUtils;\n import org.apache.wicket.util.crypt.Base64;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.util.StringUtils;\n \n public class PreferenceManager {\n@@ -52,15 +52,15 @@ public class PreferenceManager {\n     private static final TypeReference MAP_TYPE_REF = new TypeReference<Map<String, String>>() {\n     };\n \n-    private static final List<Integer> PAGINATOR_CHOICES = Arrays.asList(new Integer[]{10, 25, 50});\n+    private static final List<Integer> PAGINATOR_CHOICES = Arrays.asList(new Integer[] { 10, 25, 50 });\n \n     private final ObjectMapper mapper;\n \n     private final CookieUtils cookieUtils;\n \n     public PreferenceManager() {\n         this.mapper = new ObjectMapper();\n-        \n+\n         CookieDefaults cookieDefaults = new CookieDefaults();\n         cookieDefaults.setMaxAge(ONE_YEAR_TIME);\n         this.cookieUtils = new CookieUtils(cookieDefaults);\n@@ -110,11 +110,7 @@ public Integer getPaginatorRows(final Request request, final String key) {\n \n         String value = get(request, key);\n         if (value != null) {\n-            try {\n-                result = Integer.valueOf(value);\n-            } catch (NumberFormatException e) {\n-                LOG.error(\"Unparsable value \" + value, e);\n-            }\n+            result = NumberUtils.toInt(value, 10);\n         }\n \n         return result;"},{"sha":"387ff4d55e81737cb8d38d6f0b7e79a5a513f1b3","filename":"console/src/main/java/org/apache/syncope/console/pages/ApprovalModalPage.java","status":"modified","additions":83,"deletions":80,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -27,6 +27,7 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.SyncopeClientException;\n@@ -35,10 +36,10 @@\n import org.apache.syncope.console.markup.html.list.AltListView;\n import org.apache.syncope.console.rest.ApprovalRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.DateTimeFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.SpinnerFieldPanel;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -85,108 +86,110 @@ protected List<WorkflowFormPropertyTO> load() {\n         final ListView<WorkflowFormPropertyTO> propView =\n                 new AltListView<WorkflowFormPropertyTO>(\"propView\", formProps) {\n \n-            private static final long serialVersionUID = 9101744072914090143L;\n+                    private static final long serialVersionUID = 9101744072914090143L;\n \n-            @Override\n-            @SuppressWarnings(\"unchecked\")\n-            protected void populateItem(final ListItem<WorkflowFormPropertyTO> item) {\n-                final WorkflowFormPropertyTO prop = item.getModelObject();\n-\n-                Label label = new Label(\"key\", prop.getName() == null\n-                        ? prop.getId()\n-                        : prop.getName());\n-                item.add(label);\n-\n-                FieldPanel field;\n-                switch (prop.getType()) {\n-                    case Boolean:\n-                        field = new AjaxDropDownChoicePanel(\"value\", label.getDefaultModelObjectAsString(),\n-                                new Model(Boolean.valueOf(prop.getValue()))).setChoices(Arrays.asList(\n-                                new String[]{\"Yes\", \"No\"}));\n-                        break;\n-\n-                    case Date:\n-                        SimpleDateFormat df = StringUtils.isNotBlank(prop.getDatePattern())\n+                    @Override\n+                    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+                    protected void populateItem(final ListItem<WorkflowFormPropertyTO> item) {\n+                        final WorkflowFormPropertyTO prop = item.getModelObject();\n+\n+                        Label label = new Label(\"key\", prop.getName() == null\n+                                ? prop.getId()\n+                                : prop.getName());\n+                        item.add(label);\n+\n+                        FieldPanel field;\n+                        switch (prop.getType()) {\n+                            case Boolean:\n+                                field = new AjaxDropDownChoicePanel(\"value\", label.getDefaultModelObjectAsString(),\n+                                        new Model<Boolean>(Boolean.valueOf(prop.getValue()))).setChoices(Arrays.asList(\n+                                                new String[] { \"Yes\", \"No\" }));\n+                                break;\n+\n+                            case Date:\n+                                SimpleDateFormat df = StringUtils.isNotBlank(prop.getDatePattern())\n                                 ? new SimpleDateFormat(prop.getDatePattern())\n                                 : new SimpleDateFormat();\n-                        Date parsedDate = null;\n-                        if (StringUtils.isNotBlank(prop.getValue())) {\n-                            try {\n-                                parsedDate = df.parse(prop.getValue());\n-                            } catch (ParseException e) {\n-                                LOG.error(\"Unparsable date: {}\", prop.getValue(), e);\n-                            }\n-                        }\n-\n-                        field = new DateTimeFieldPanel(\"value\", label.getDefaultModelObjectAsString(),\n-                                new Model(parsedDate), df.toLocalizedPattern());\n-                        break;\n+                                Date parsedDate = null;\n+                                if (StringUtils.isNotBlank(prop.getValue())) {\n+                                    try {\n+                                        parsedDate = df.parse(prop.getValue());\n+                                    } catch (ParseException e) {\n+                                        LOG.error(\"Unparsable date: {}\", prop.getValue(), e);\n+                                    }\n+                                }\n+\n+                                field = new DateTimeFieldPanel(\"value\", label.getDefaultModelObjectAsString(),\n+                                        new Model<Date>(parsedDate), df.toLocalizedPattern());\n+                                break;\n \n-                    case Enum:\n-                        MapChoiceRenderer<String, String> enumCR =\n+                            case Enum:\n+                                MapChoiceRenderer<String, String> enumCR =\n                                 new MapChoiceRenderer<String, String>(prop.getEnumValues());\n \n-                        field = new AjaxDropDownChoicePanel(\"value\", label.getDefaultModelObjectAsString(),\n-                                new Model(prop.getValue())).setChoiceRenderer(enumCR).setChoices(new Model() {\n+                                field = new AjaxDropDownChoicePanel(\"value\", label.getDefaultModelObjectAsString(),\n+                                        new Model(prop.getValue())).setChoiceRenderer(enumCR).setChoices(new Model() {\n \n-                            private static final long serialVersionUID = -858521070366432018L;\n+                                    private static final long serialVersionUID = -858521070366432018L;\n \n-                            @Override\n-                            public Serializable getObject() {\n-                                return new ArrayList(prop.getEnumValues().keySet());\n-                            }\n-                        });\n-                        break;\n+                                    @Override\n+                                    public Serializable getObject() {\n+                                        return new ArrayList<String>(prop.getEnumValues().keySet());\n+                                    }\n+                                });\n+                                break;\n \n-                    case Long:\n-                        field = new AjaxNumberFieldPanel(\"value\", label.getDefaultModelObjectAsString(),\n-                                new Model(Long.valueOf(prop.getValue())), Long.class);\n-                        break;\n+                            case Long:\n+                                field = new SpinnerFieldPanel<Long>(\"value\", label.getDefaultModelObjectAsString(),\n+                                        Long.class, new Model<Long>(NumberUtils.toLong(prop.getValue())),\n+                                        null, null, false);\n+                                break;\n \n-                    case String:\n-                    default:\n-                        field = new AjaxTextFieldPanel(\"value\", PARENT_PATH, new Model(prop.getValue()));\n-                        break;\n-                }\n+                            case String:\n+                            default:\n+                                field = new AjaxTextFieldPanel(\"value\", PARENT_PATH,\n+                                        new Model<String>(prop.getValue()));\n+                                break;\n+                        }\n \n-                field.setReadOnly(!prop.isWritable());\n-                if (prop.isRequired()) {\n-                    field.addRequiredLabel();\n-                }\n+                        field.setReadOnly(!prop.isWritable());\n+                        if (prop.isRequired()) {\n+                            field.addRequiredLabel();\n+                        }\n \n-                item.add(field);\n-            }\n-        };\n+                        item.add(field);\n+                    }\n+                };\n \n         final AjaxButton userDetails = new IndicatingAjaxButton(\"userDetails\",\n                 new Model<String>(getString(\"userDetails\"))) {\n \n-            private static final long serialVersionUID = -4804368561204623354L;\n-\n-            @Override\n-            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                editUserWin.setPageCreator(new ModalWindow.PageCreator() {\n-\n-                    private static final long serialVersionUID = -7834632442532690940L;\n+                    private static final long serialVersionUID = -4804368561204623354L;\n \n                     @Override\n-                    public Page createPage() {\n-                        return new ViewUserModalPage(ApprovalModalPage.this.getPageReference(), editUserWin,\n-                                userRestClient.read(formTO.getUserId())) {\n+                    protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                        editUserWin.setPageCreator(new ModalWindow.PageCreator() {\n \n-                            private static final long serialVersionUID = -2819994749866481607L;\n+                            private static final long serialVersionUID = -7834632442532690940L;\n \n                             @Override\n-                            protected void closeAction(final AjaxRequestTarget target, final Form form) {\n-                                setResponsePage(ApprovalModalPage.this);\n+                            public Page createPage() {\n+                                return new ViewUserModalPage(ApprovalModalPage.this.getPageReference(), editUserWin,\n+                                        userRestClient.read(formTO.getUserId())) {\n+\n+                                    private static final long serialVersionUID = -2819994749866481607L;\n+\n+                                    @Override\n+                                    protected void closeAction(final AjaxRequestTarget target, final Form form) {\n+                                        setResponsePage(ApprovalModalPage.this);\n+                                    }\n+                                };\n                             }\n-                        };\n-                    }\n-                });\n+                        });\n \n-                editUserWin.show(target);\n-            }\n-        };\n+                        editUserWin.show(target);\n+                    }\n+                };\n         MetaDataRoleAuthorizationStrategy.authorize(userDetails, ENABLE,\n                 xmlRolesReader.getAllAllowedRoles(\"Users\", \"read\"));\n "},{"sha":"e63b6f6809cdd15ec104effd084a7b46a96c47d2","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":23,"deletions":36,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -25,21 +25,19 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.to.ConnBundleTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n import org.apache.syncope.common.to.ConnPoolConfTO;\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ConnectorCapability;\n-import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.markup.html.list.AltListView;\n import org.apache.syncope.console.rest.ConnectorRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n@@ -79,15 +77,6 @@ public class ConnectorModalPage extends BaseModalPage {\n \n     private static final long serialVersionUID = -2025535531121434050L;\n \n-    // GuardedString is not in classpath\n-    private static final String GUARDED_STRING = \"org.identityconnectors.common.security.GuardedString\";\n-\n-    // GuardedByteArray is not in classpath\n-    private static final String GUARDED_BYTE_ARRAY = \"org.identityconnectors.common.security.GuardedByteArray\";\n-\n-    private static final Class[] NUMBER = { Integer.class, Double.class, Long.class,\n-        Float.class, Number.class, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE };\n-\n     @SpringBean\n     private ConnectorRestClient restClient;\n \n@@ -201,38 +190,38 @@ public ConnectorModalPage(final PageReference pageRef, final ModalWindow window,\n         connectorForm.add(version);\n \n         final SpinnerFieldPanel<Integer> connRequestTimeout =\n-                new SpinnerFieldPanel<Integer>(\"connRequestTimeout\", \"connRequestTimeout\",\n-                        new PropertyModel<Integer>(connInstanceTO, \"connRequestTimeout\"), 0, null);\n+                new SpinnerFieldPanel<Integer>(\"connRequestTimeout\", \"connRequestTimeout\", Integer.class,\n+                        new PropertyModel<Integer>(connInstanceTO, \"connRequestTimeout\"), 0, null, true);\n         connRequestTimeout.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n         connectorForm.add(connRequestTimeout);\n \n         if (connInstanceTO.getPoolConf() == null) {\n             connInstanceTO.setPoolConf(new ConnPoolConfTO());\n         }\n         final SpinnerFieldPanel<Integer> poolMaxObjects =\n-                new SpinnerFieldPanel<Integer>(\"poolMaxObjects\", \"poolMaxObjects\",\n-                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxObjects\"), 0, null);\n+                new SpinnerFieldPanel<Integer>(\"poolMaxObjects\", \"poolMaxObjects\", Integer.class,\n+                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxObjects\"), 0, null, true);\n         poolMaxObjects.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n         connectorForm.add(poolMaxObjects);\n         final SpinnerFieldPanel<Integer> poolMinIdle =\n-                new SpinnerFieldPanel<Integer>(\"poolMinIdle\", \"poolMinIdle\",\n-                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"minIdle\"), 0, null);\n+                new SpinnerFieldPanel<Integer>(\"poolMinIdle\", \"poolMinIdle\", Integer.class,\n+                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"minIdle\"), 0, null, true);\n         poolMinIdle.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n         connectorForm.add(poolMinIdle);\n         final SpinnerFieldPanel<Integer> poolMaxIdle =\n-                new SpinnerFieldPanel<Integer>(\"poolMaxIdle\", \"poolMaxIdle\",\n-                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxIdle\"), 0, null);\n+                new SpinnerFieldPanel<Integer>(\"poolMaxIdle\", \"poolMaxIdle\", Integer.class,\n+                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxIdle\"), 0, null, true);\n         poolMaxIdle.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n         connectorForm.add(poolMaxIdle);\n         final SpinnerFieldPanel<Long> poolMaxWait =\n-                new SpinnerFieldPanel<Long>(\"poolMaxWait\", \"poolMaxWait\",\n-                        new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"maxWait\"), 0L, null);\n+                new SpinnerFieldPanel<Long>(\"poolMaxWait\", \"poolMaxWait\", Long.class,\n+                        new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"maxWait\"), 0L, null, true);\n         poolMaxWait.getField().add(new RangeValidator<Long>(0L, Long.MAX_VALUE));\n         connectorForm.add(poolMaxWait);\n         final SpinnerFieldPanel<Long> poolMinEvictableIdleTime =\n-                new SpinnerFieldPanel<Long>(\n-                        \"poolMinEvictableIdleTime\", \"poolMinEvictableIdleTime\",\n-                        new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"minEvictableIdleTimeMillis\"), 0L, null);\n+                new SpinnerFieldPanel<Long>(\"poolMinEvictableIdleTime\", \"poolMinEvictableIdleTime\", Long.class,\n+                        new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"minEvictableIdleTimeMillis\"),\n+                        0L, null, true);\n         poolMinEvictableIdleTime.getField().add(new RangeValidator<Long>(0L, Long.MAX_VALUE));\n         connectorForm.add(poolMinEvictableIdleTime);\n \n@@ -304,12 +293,12 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     private static final long serialVersionUID = 9101744072914090143L;\n \n                     @Override\n+                    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n                     protected void populateItem(final ListItem<ConnConfProperty> item) {\n                         final ConnConfProperty property = item.getModelObject();\n \n-                        final Label label = new Label(\"connPropAttrSchema\", property.getSchema().getDisplayName()\n-                                == null\n-                                || property.getSchema().getDisplayName().isEmpty()\n+                        final Label label = new Label(\"connPropAttrSchema\",\n+                                StringUtils.isBlank(property.getSchema().getDisplayName())\n                                 ? property.getSchema().getName()\n                                 : property.getSchema().getDisplayName());\n \n@@ -319,8 +308,8 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                         boolean required = false;\n                         boolean isArray = false;\n                         if (property.getSchema().isConfidential()\n-                        || GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n-                        || GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n+                        || Constants.GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n+                        || Constants.GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n \n                             field = new AjaxPasswordFieldPanel(\"panel\",\n                                     label.getDefaultModelObjectAsString(), new Model<String>());\n@@ -338,14 +327,12 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                                 LOG.error(\"Error parsing attribute type\", e);\n                                 propertySchemaClass = String.class;\n                             }\n-                            if (ArrayUtils.contains(NUMBER, propertySchemaClass)) {\n-                                field = new AjaxNumberFieldPanel(\"panel\",\n-                                        label.getDefaultModelObjectAsString(), new Model<Number>(),\n-                                        ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass));\n+                            if (ClassUtils.isAssignable(Number.class, propertySchemaClass)) {\n+                                field = new SpinnerFieldPanel<Number>(\"panel\", label.getDefaultModelObjectAsString(),\n+                                        (Class<Number>) propertySchemaClass, new Model<Number>(), null, null, false);\n \n                                 required = property.getSchema().isRequired();\n-                            } else if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(\n-                                    propertySchemaClass)) {\n+                            } else if (ClassUtils.isAssignable(Boolean.class, propertySchemaClass)) {\n                                 field = new AjaxCheckBoxPanel(\"panel\",\n                                         label.getDefaultModelObjectAsString(), new Model<Boolean>());\n                             } else {"},{"sha":"4a51ab6b02ccab2a7e6e132f9dd47f90a65933ee","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportletConfModalPage.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -32,17 +32,18 @@\n import org.apache.syncope.common.report.AbstractReportletConf;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.pages.panels.RoleSearchPanel;\n import org.apache.syncope.console.pages.panels.UserSearchPanel;\n import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.CheckBoxMultipleChoiceFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.DateTimeFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.SpinnerFieldPanel;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -198,17 +199,15 @@ protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> fo\n     private FieldPanel buildSinglePanel(final Class<?> type, final String fieldName, final String id) {\n         FieldPanel result = null;\n         PropertyModel model = new PropertyModel(ReportletConfModalPage.this.reportletConf, fieldName);\n-        if (Boolean.TYPE.equals(type) || Boolean.class.equals(type)) {\n+        if (ClassUtils.isAssignable(Boolean.class, type)) {\n             result = new AjaxCheckBoxPanel(id, fieldName, model);\n-        } else if (Integer.TYPE.equals(type) || Integer.class.equals(type) || Long.TYPE.equals(type)\n-                || Long.class.equals(type) || Double.TYPE.equals(type) || Double.class.equals(type)) {\n-\n-            result = new AjaxNumberFieldPanel(id, fieldName, model, ClassUtils.resolvePrimitiveIfNecessary(type));\n+        } else if (ClassUtils.isAssignable(Number.class, type)) {\n+            result = new SpinnerFieldPanel<Number>(id, fieldName, (Class<Number>) type, model, null, null, false);\n         } else if (Date.class.equals(type)) {\n             result = new DateTimeFieldPanel(id, fieldName, model, SyncopeConstants.DEFAULT_DATE_PATTERN);\n         } else if (type.isEnum()) {\n-            result = new AjaxDropDownChoicePanel(id, fieldName, model).setChoices(Arrays\n-                    .asList(type.getEnumConstants()));\n+            result = new AjaxDropDownChoicePanel(id, fieldName, model).setChoices(\n+                    Arrays.asList(type.getEnumConstants()));\n         }\n \n         // treat as String if nothing matched above\n@@ -261,29 +260,30 @@ protected void populateItem(final ListItem<String> item) {\n                     return;\n                 }\n \n+                FormAttributeField annotation = field.getAnnotation(FormAttributeField.class);\n+\n                 BeanWrapper wrapper = PropertyAccessorFactory.\n                         forBeanPropertyAccess(ReportletConfModalPage.this.reportletConf);\n \n                 Panel panel;\n \n-                if (String.class.equals(field.getType())) {\n-                    panel = new UserSearchPanel.Builder(\"value\")\n-                            .fiql((String) wrapper.getPropertyValue(fieldName)).required(false).build();\n+                if (String.class.equals(field.getType()) && annotation != null && annotation.userSearch()) {\n+                    panel = new UserSearchPanel.Builder(\"value\").\n+                            fiql((String) wrapper.getPropertyValue(fieldName)).required(false).build();\n+                    // This is needed in order to manually update this.reportletConf with search panel selections\n+                    panel.setDefaultModel(new Model<String>(fieldName));\n+                } else if (String.class.equals(field.getType()) && annotation != null && annotation.roleSearch()) {\n+                    panel = new RoleSearchPanel.Builder(\"value\").\n+                            fiql((String) wrapper.getPropertyValue(fieldName)).required(false).build();\n                     // This is needed in order to manually update this.reportletConf with search panel selections\n                     panel.setDefaultModel(new Model<String>(fieldName));\n                 } else if (List.class.equals(field.getType())) {\n-                    if (wrapper.getPropertyValue(fieldName) == null) {\n-                        wrapper.setPropertyValue(fieldName, new ArrayList());\n-                    }\n-\n                     Class<?> listItemType = String.class;\n                     if (field.getGenericType() instanceof ParameterizedType) {\n                         listItemType =\n                                 (Class<?>) ((ParameterizedType) field.getGenericType()).getActualTypeArguments()[0];\n                     }\n \n-                    FormAttributeField annotation = field.getAnnotation(FormAttributeField.class);\n-\n                     if (listItemType.equals(String.class) && annotation != null) {\n                         List<String> choices;\n                         switch (annotation.schema()) {\n@@ -332,16 +332,16 @@ protected void populateItem(final ListItem<String> item) {\n                                 true);\n                     } else if (listItemType.isEnum()) {\n                         panel = new CheckBoxMultipleChoiceFieldPanel(\"value\", new PropertyModel(\n-                                ReportletConfModalPage.this.reportletConf, fieldName), new ListModel(Arrays\n-                                        .asList(listItemType.getEnumConstants())));\n+                                ReportletConfModalPage.this.reportletConf, fieldName),\n+                                new ListModel(Arrays.asList(listItemType.getEnumConstants())));\n                     } else {\n                         if (((List) wrapper.getPropertyValue(fieldName)).isEmpty()) {\n                             ((List) wrapper.getPropertyValue(fieldName)).add(null);\n                         }\n \n                         panel = new MultiValueSelectorPanel(\"value\", new PropertyModel<List>(\n-                                ReportletConfModalPage.this.reportletConf, fieldName), buildSinglePanel(\n-                                        field.getType(), fieldName, \"panel\"));\n+                                ReportletConfModalPage.this.reportletConf, fieldName),\n+                                buildSinglePanel(field.getType(), fieldName, \"panel\"));\n                     }\n                 } else {\n                     panel = buildSinglePanel(field.getType(), fieldName, \"value\");"},{"sha":"ee483a58c78f687f1b53c78205f261beaec5297e","filename":"console/src/main/java/org/apache/syncope/console/pages/Resources.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -405,8 +405,8 @@ public Page createPage() {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                prefMan.set(getRequest(), getResponse(), Constants.PREF_RESOURCES_PAGINATOR_ROWS, String\n-                        .valueOf(resourcePaginatorRows));\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_RESOURCES_PAGINATOR_ROWS,\n+                        String.valueOf(resourcePaginatorRows));\n \n                 table.setItemsPerPage(resourcePaginatorRows);\n                 target.add(resourceContainer);\n@@ -569,8 +569,8 @@ public Page createPage() {\n \n             @Override\n             protected void onUpdate(AjaxRequestTarget target) {\n-                prefMan.set(getRequest(), getResponse(), Constants.PREF_CONNECTORS_PAGINATOR_ROWS, String\n-                        .valueOf(connectorPaginatorRows));\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_CONNECTORS_PAGINATOR_ROWS,\n+                        String.valueOf(connectorPaginatorRows));\n                 table.setItemsPerPage(connectorPaginatorRows);\n \n                 target.add(connectorContainer);"},{"sha":"413eea8c653a35344d7f7254968539ec5006369d","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AbstractSearchPanel.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -301,6 +301,10 @@ private List<SearchClause> getSearchClauses(final SearchCondition<SearchBean> sc\n     public String buildFIQL() {\n         LOG.debug(\"Generating FIQL from List<SearchClause>: {}\", searchClauses);\n \n+        if (searchClauses.isEmpty() || searchClauses.get(0).getType() == null) {\n+            return StringUtils.EMPTY;\n+        }\n+\n         SyncopeFiqlSearchConditionBuilder builder = getSearchConditionBuilder();\n \n         CompleteCondition prevCondition;\n@@ -318,7 +322,7 @@ public String buildFIQL() {\n                     break;\n \n                 case MEMBERSHIP:\n-                    Long roleId = Long.valueOf(searchClauses.get(i).getProperty().split(\" \")[0]);\n+                    Long roleId = NumberUtils.toLong(searchClauses.get(i).getProperty().split(\" \")[0]);\n                     condition = searchClauses.get(i).getComparator() == SearchClause.Comparator.EQUALS\n                             ? ((UserFiqlSearchConditionBuilder) builder).hasRoles(roleId)\n                             : ((UserFiqlSearchConditionBuilder) builder).hasNotRoles(roleId);"},{"sha":"f59ccc956259721c1d84db7ca721156f2509b549","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AttributesPanel.java","status":"modified","additions":24,"deletions":23,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -101,34 +101,35 @@ public <T extends AbstractAttributableTO> AttributesPanel(final String id, final\n         final ListView<AttributeTO> attributeView = new AltListView<AttributeTO>(\"schemas\",\n                 new PropertyModel<List<? extends AttributeTO>>(entityTO, \"attrs\")) {\n \n-            private static final long serialVersionUID = 9101744072914090143L;\n+                    private static final long serialVersionUID = 9101744072914090143L;\n \n-            @Override\n-            protected void populateItem(final ListItem<AttributeTO> item) {\n-                final AttributeTO attributeTO = (AttributeTO) item.getDefaultModelObject();\n+                    @Override\n+                    protected void populateItem(final ListItem<AttributeTO> item) {\n+                        final AttributeTO attributeTO = (AttributeTO) item.getDefaultModelObject();\n \n-                final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n-                item.add(jexlHelp);\n+                        final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n+                        item.add(jexlHelp);\n \n-                final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n-                item.add(questionMarkJexlHelp);\n+                        final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp,\n+                                \"questionMarkJexlHelp\");\n+                        item.add(questionMarkJexlHelp);\n \n-                if (!templateMode) {\n-                    questionMarkJexlHelp.setVisible(false);\n-                }\n+                        if (!templateMode) {\n+                            questionMarkJexlHelp.setVisible(false);\n+                        }\n \n-                item.add(new Label(\"name\", attributeTO.getSchema()));\n+                        item.add(new Label(\"name\", attributeTO.getSchema()));\n \n-                final FieldPanel panel = getFieldPanel(schemas.get(attributeTO.getSchema()), form, attributeTO);\n+                        final FieldPanel panel = getFieldPanel(schemas.get(attributeTO.getSchema()), form, attributeTO);\n \n-                if (templateMode || !schemas.get(attributeTO.getSchema()).isMultivalue()) {\n-                    item.add(panel);\n-                } else {\n-                    item.add(new MultiValueSelectorPanel<String>(\n-                            \"panel\", new PropertyModel<List<String>>(attributeTO, \"values\"), panel));\n-                }\n-            }\n-        };\n+                        if (templateMode || !schemas.get(attributeTO.getSchema()).isMultivalue()) {\n+                            item.add(panel);\n+                        } else {\n+                            item.add(new MultiValueSelectorPanel<String>(\n+                                            \"panel\", new PropertyModel<List<String>>(attributeTO, \"values\"), panel));\n+                        }\n+                    }\n+                };\n \n         add(attributeView);\n     }\n@@ -144,7 +145,7 @@ private void filter(final List<SchemaTO> schemaTOs, final Set<String> allowed) {\n \n     private void setSchemas() {\n         List<SchemaTO> schemaTOs;\n-        \n+\n         if (entityTO instanceof RoleTO) {\n             final RoleTO roleTO = (RoleTO) entityTO;\n \n@@ -199,7 +200,7 @@ private void setAttrs() {\n         entityTO.getAttrs().addAll(entityData);\n     }\n \n-    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     private FieldPanel getFieldPanel(final SchemaTO schemaTO, final Form form, final AttributeTO attributeTO) {\n         final boolean required = templateMode ? false : schemaTO.getMandatoryCondition().equalsIgnoreCase(\"true\");\n "},{"sha":"8aecaedfbeb0e8a61edb0f6b1849480c8e6ac4c6","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PolicyBeanPanel.java","status":"modified","additions":11,"deletions":15,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.SpinnerFieldPanel;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -56,6 +57,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n+import org.springframework.util.ClassUtils;\n \n public class PolicyBeanPanel extends Panel {\n \n@@ -128,6 +130,7 @@ public PolicyBeanPanel(final String id, final AbstractPolicySpec policy) {\n             private static final long serialVersionUID = 9101744072914090143L;\n \n             @Override\n+            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n             protected void populateItem(final ListItem<FieldWrapper> item) {\n \n                 final FieldWrapper field = item.getModelObject();\n@@ -174,9 +177,9 @@ protected void populateItem(final ListItem<FieldWrapper> item) {\n                                 values[0],\n                                 values[0]));\n \n-                    } else if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {\n-                        item.add(new AjaxCheckBoxPanel(\"check\", field.getName(), new PropertyModel(policy,\n-                                field.getName())));\n+                    } else if (ClassUtils.isAssignable(Boolean.class, field.getType())) {\n+                        item.add(new AjaxCheckBoxPanel(\"check\", field.getName(),\n+                                new PropertyModel<Boolean>(policy, field.getName())));\n \n                         item.add(new Label(\"field\", new Model(null)));\n                     } else if (Collection.class.isAssignableFrom(field.getType())) {\n@@ -197,18 +200,11 @@ protected void populateItem(final ListItem<FieldWrapper> item) {\n                                 }\n                             }\n \n-                            Collection collection =\n-                                    (Collection) propDesc.getReadMethod().invoke(policy, new Object[] {});\n-\n-                            if (collection == null) {\n-                                collection = new ArrayList();\n-                                propDesc.getWriteMethod().invoke(policy, collection);\n-                            }\n-\n                             component = new AjaxPalettePanel(\"field\", new PropertyModel(policy, field.getName()),\n                                     new ListModel<String>(values));\n                             item.add(component);\n \n+                            Collection<?> collection = (Collection) propDesc.getReadMethod().invoke(policy);\n                             item.add(getActivationControl(component,\n                                     !collection.isEmpty(), new ArrayList<String>(), new ArrayList<String>()));\n                         } else {\n@@ -229,10 +225,10 @@ protected void populateItem(final ListItem<FieldWrapper> item) {\n                                     !((Collection) propDesc.getReadMethod().invoke(policy, new Object[] {})).isEmpty(),\n                                     new ArrayList<String>(), (Serializable) reinitializedValue));\n                         }\n-                    } else if (field.getType().equals(int.class) || field.getType().equals(Integer.class)) {\n-                        component = new AjaxTextFieldPanel(\"field\", field.getName(),\n-                                new PropertyModel(policy, field.getName()));\n-\n+                    } else if (ClassUtils.isAssignable(Number.class, field.getType())) {\n+                        component = new SpinnerFieldPanel<Number>(\"field\", field.getName(),\n+                                (Class<Number>) field.getType(), new PropertyModel<Number>(policy, field.getName()),\n+                                null, null, false);\n                         item.add(component);\n \n                         item.add(getActivationControl(component,"},{"sha":"7029e747bbcf85e0c7a6d105b19a234e312a53b7","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceConnConfPanel.java","status":"modified","additions":74,"deletions":86,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.console.pages.panels;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.console.commons.Constants;\n@@ -31,12 +31,12 @@\n import org.apache.syncope.console.pages.panels.ResourceDetailsPanel.DetailsModEvent;\n import org.apache.syncope.console.rest.ConnectorRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel.MultiValueSelectorEvent;\n+import org.apache.syncope.console.wicket.markup.html.form.SpinnerFieldPanel;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -62,23 +62,7 @@ public class ResourceConnConfPanel extends Panel {\n     /**\n      * Logger.\n      */\n-    protected static final Logger LOG = LoggerFactory.getLogger(ResourceConnConfPanel.class);\n-\n-    /**\n-     * GuardedString is not in classpath.\n-     */\n-    private static final String GUARDED_STRING = \"org.identityconnectors.common.security.GuardedString\";\n-\n-    /**\n-     * GuardedByteArray is not in classpath.\n-     */\n-    private static final String GUARDED_BYTE_ARRAY = \"org.identityconnectors.common.security.GuardedByteArray\";\n-\n-    /**\n-     * Number java types.\n-     */\n-    private static final List<Class> NUMBER = Arrays.asList(new Class[]{Integer.class, Double.class, Long.class,\n-                Float.class, Number.class, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE});\n+    private static final Logger LOG = LoggerFactory.getLogger(ResourceConnConfPanel.class);\n \n     @SpringBean\n     private ConnectorRestClient connRestClient;\n@@ -93,6 +77,7 @@ public class ResourceConnConfPanel extends Panel {\n \n     private ResourceTO resourceTO;\n \n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public ResourceConnConfPanel(final String id, final ResourceTO resourceTO, final boolean createFlag) {\n         super(id);\n         setOutputMarkupId(true);\n@@ -131,97 +116,100 @@ public void onClick(final AjaxRequestTarget target) {\n         connConfPropContainer.add(new AltListView<ConnConfProperty>(\"connectorProperties\",\n                 new PropertyModel(this, \"connConfProperties\")) {\n \n-            private static final long serialVersionUID = 9101744072914090143L;\n+                    private static final long serialVersionUID = 9101744072914090143L;\n \n-            @Override\n-            protected void populateItem(final ListItem<ConnConfProperty> item) {\n-                final ConnConfProperty property = item.getModelObject();\n+                    @Override\n+                    protected void populateItem(final ListItem<ConnConfProperty> item) {\n+                        final ConnConfProperty property = item.getModelObject();\n \n-                final Label label = new Label(\"connPropAttrSchema\", property.getSchema().getDisplayName() == null\n-                        || property.getSchema().getDisplayName().isEmpty()\n-                        ? property.getSchema().getName()\n-                        : property.getSchema().getDisplayName());\n+                        final Label label = new Label(\"connPropAttrSchema\",\n+                                StringUtils.isBlank(property.getSchema().getDisplayName())\n+                                ? property.getSchema().getName()\n+                                : property.getSchema().getDisplayName());\n \n-                item.add(label);\n+                        item.add(label);\n \n-                final FieldPanel field;\n+                        final FieldPanel field;\n \n-                boolean required = false;\n+                        boolean required = false;\n \n-                boolean isArray = false;\n+                        boolean isArray = false;\n \n-                if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n-                        || GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n+                        if (Constants.GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n+                        || Constants.GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n \n-                    field = new AjaxPasswordFieldPanel(\"panel\", label.getDefaultModelObjectAsString(), new Model());\n-                    ((PasswordTextField) field.getField()).setResetPassword(false);\n+                            field = new AjaxPasswordFieldPanel(\"panel\", label.getDefaultModelObjectAsString(),\n+                                    new Model());\n+                            ((PasswordTextField) field.getField()).setResetPassword(false);\n \n-                    required = property.getSchema().isRequired();\n+                            required = property.getSchema().isRequired();\n+                        } else {\n+                            Class<?> propertySchemaClass;\n \n-                } else {\n-                    Class<?> propertySchemaClass;\n-\n-                    try {\n-                        propertySchemaClass = ClassUtils.forName(property.getSchema().getType(), ClassUtils.\n-                                getDefaultClassLoader());\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error parsing attribute type\", e);\n-                        propertySchemaClass = String.class;\n-                    }\n+                            try {\n+                                propertySchemaClass = ClassUtils.forName(property.getSchema().getType(), ClassUtils.\n+                                        getDefaultClassLoader());\n+                            } catch (Exception e) {\n+                                LOG.error(\"Error parsing attribute type\", e);\n+                                propertySchemaClass = String.class;\n+                            }\n \n-                    if (NUMBER.contains(propertySchemaClass)) {\n-                        field = new AjaxNumberFieldPanel(\"panel\", label.getDefaultModelObjectAsString(), new Model(),\n-                                ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass));\n+                            if (ClassUtils.isAssignable(Number.class, propertySchemaClass)) {\n+                                field = new SpinnerFieldPanel<Number>(\"panel\", label.getDefaultModelObjectAsString(),\n+                                        (Class<Number>) propertySchemaClass, new Model<Number>(), null, null, false);\n \n-                        required = property.getSchema().isRequired();\n-                    } else if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(propertySchemaClass)) {\n-                        field = new AjaxCheckBoxPanel(\"panel\", label.getDefaultModelObjectAsString(), new Model());\n-                    } else {\n-                        field = new AjaxTextFieldPanel(\"panel\", label.getDefaultModelObjectAsString(), new Model());\n+                                required = property.getSchema().isRequired();\n+                            } else if (ClassUtils.isAssignable(Boolean.class, propertySchemaClass)) {\n+                                field = new AjaxCheckBoxPanel(\"panel\", label.getDefaultModelObjectAsString(),\n+                                        new Model());\n+                            } else {\n+                                field = new AjaxTextFieldPanel(\"panel\", label.getDefaultModelObjectAsString(),\n+                                        new Model());\n \n-                        required = property.getSchema().isRequired();\n-                    }\n+                                required = property.getSchema().isRequired();\n+                            }\n \n-                    if (String[].class.equals(propertySchemaClass)) {\n-                        isArray = true;\n-                    }\n-                }\n+                            if (String[].class.equals(propertySchemaClass)) {\n+                                isArray = true;\n+                            }\n+                        }\n \n-                field.setTitle(property.getSchema().getHelpMessage());\n+                        field.setTitle(property.getSchema().getHelpMessage());\n \n-                if (isArray) {\n-                    field.removeRequiredLabel();\n+                        if (isArray) {\n+                            field.removeRequiredLabel();\n \n-                    if (property.getValues().isEmpty()) {\n-                        property.getValues().add(null);\n-                    }\n+                            if (property.getValues().isEmpty()) {\n+                                property.getValues().add(null);\n+                            }\n \n-                    final MultiValueSelectorPanel multiFields = new MultiValueSelectorPanel<String>(\"panel\",\n-                            new PropertyModel<List<String>>(property, \"values\"), field, true);\n+                            final MultiValueSelectorPanel multiFields = new MultiValueSelectorPanel<String>(\"panel\",\n+                                    new PropertyModel<List<String>>(property, \"values\"), field, true);\n \n-                    item.add(multiFields);\n-                } else {\n-                    if (required) {\n-                        field.addRequiredLabel();\n-                    }\n+                            item.add(multiFields);\n+                        } else {\n+                            if (required) {\n+                                field.addRequiredLabel();\n+                            }\n \n-                    field.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+                            field.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n-                        private static final long serialVersionUID = -1107858522700306810L;\n+                                private static final long serialVersionUID = -1107858522700306810L;\n \n-                        @Override\n-                        protected void onUpdate(final AjaxRequestTarget target) {\n-                            send(getPage(), Broadcast.BREADTH, new ConnConfModEvent(target, connConfProperties));\n-                        }\n-                    });\n+                                @Override\n+                                protected void onUpdate(final AjaxRequestTarget target) {\n+                                    send(getPage(), Broadcast.BREADTH,\n+                                            new ConnConfModEvent(target, connConfProperties));\n+                                }\n+                            });\n \n-                    field.setNewModel(property.getValues());\n-                    item.add(field);\n-                }\n+                            field.setNewModel(property.getValues());\n+                            item.add(field);\n+                        }\n \n-                resourceTO.getConnConfProperties().add(property);\n-            }\n-        });\n+                        resourceTO.getConnConfProperties().add(property);\n+                    }\n+                });\n     }\n \n     /**"},{"sha":"31a65b7e1dfae8d7be55d2c45d4cf2679c99d921","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceDetailsPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -29,8 +29,8 @@\n import org.apache.syncope.console.rest.ConnectorRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.SpinnerFieldPanel;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.event.Broadcast;\n@@ -79,12 +79,12 @@ public ResourceDetailsPanel(final String id, final ResourceTO resourceTO, final\n \n         final AjaxCheckBoxPanel propagationPrimary = new AjaxCheckBoxPanel(\"propagationPrimary\", new ResourceModel(\n                 \"propagationPrimary\", \"propagationPrimary\").getObject(), new PropertyModel<Boolean>(resourceTO,\n-                \"propagationPrimary\"));\n+                        \"propagationPrimary\"));\n         add(propagationPrimary);\n \n-        final AjaxNumberFieldPanel propagationPriority = new AjaxNumberFieldPanel(\"propagationPriority\",\n-                new ResourceModel(\"propagationPriority\", \"propagationPriority\").getObject(), new PropertyModel<Number>(\n-                resourceTO, \"propagationPriority\"), Integer.class);\n+        final SpinnerFieldPanel<Integer> propagationPriority =\n+                new SpinnerFieldPanel<Integer>(\"propagationPriority\", \"propagationPriority\", Integer.class,\n+                        new PropertyModel<Integer>(resourceTO, \"propagationPriority\"), null, null, false);\n         add(propagationPriority);\n \n         final AjaxDropDownChoicePanel<PropagationMode> propagationMode = new AjaxDropDownChoicePanel<PropagationMode>("},{"sha":"f1935aad5b2d59b83ecbe7013563e29e13e93a4e","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSearchPanel.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -39,22 +39,29 @@ public static class Builder implements Serializable {\n \n         private String fiql = null;\n \n+        private boolean required = true;\n+\n         public Builder(final String id) {\n             this.id = id;\n         }\n \n-        public RoleSearchPanel.Builder fiql(final String fiql) {\n+        public Builder fiql(final String fiql) {\n             this.fiql = fiql;\n             return this;\n         }\n \n+        public Builder required(final boolean required) {\n+            this.required = required;\n+            return this;\n+        }\n+\n         public RoleSearchPanel build() {\n             return new RoleSearchPanel(this);\n         }\n     }\n \n     private RoleSearchPanel(final Builder builder) {\n-        super(builder.id, AttributableType.ROLE, builder.fiql, true);\n+        super(builder.id, AttributableType.ROLE, builder.fiql, builder.required);\n     }\n \n     @Override"},{"sha":"9ad9547ff7b601282844a02d747ac26e318d4ff9","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserSearchPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -50,12 +50,12 @@ public Builder(final String id) {\n             this.id = id;\n         }\n \n-        public UserSearchPanel.Builder fiql(final String fiql) {\n+        public Builder fiql(final String fiql) {\n             this.fiql = fiql;\n             return this;\n         }\n \n-        public UserSearchPanel.Builder required(final boolean required) {\n+        public Builder required(final boolean required) {\n             this.required = required;\n             return this;\n         }"},{"sha":"b477ff8d6af749a189a575e2b08ab9fc97702f2f","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AjaxNumberFieldPanel.java","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b1ec1c2e176871449398a0677fecbfa4795aa1f4/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxNumberFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b1ec1c2e176871449398a0677fecbfa4795aa1f4/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxNumberFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxNumberFieldPanel.java?ref=b1ec1c2e176871449398a0677fecbfa4795aa1f4","patch":"@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.console.wicket.markup.html.form;\n-\n-import org.apache.syncope.console.commons.Constants;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.markup.html.form.TextField;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.Model;\n-\n-public class AjaxNumberFieldPanel extends FieldPanel<Number> {\n-\n-    private static final long serialVersionUID = 238940918106696068L;\n-\n-    public AjaxNumberFieldPanel(final String id, final String name, final IModel<Number> model, final Class reference) {\n-\n-        super(id, name, model);\n-\n-        field = new TextField<Number>(\"numberField\", model, reference);\n-\n-        add(field.setLabel(new Model(name)).setOutputMarkupId(true));\n-\n-        if (!isReadOnly()) {\n-            field.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-                private static final long serialVersionUID = -1107858522700306810L;\n-\n-                @Override\n-                protected void onUpdate(AjaxRequestTarget art) {\n-                    // nothing to do\n-                }\n-            });\n-        }\n-    }\n-}"},{"sha":"b0e2bbbc45b2e7539363dd421d1391d2e078652b","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/SpinnerFieldPanel.java","status":"modified","additions":34,"deletions":20,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.console.wicket.markup.html.form;\n \n+import java.util.UUID;\n+import org.apache.syncope.console.commons.Constants;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n-import org.apache.wicket.markup.head.IHeaderResponse;\n-import org.apache.wicket.markup.head.JavaScriptHeaderItem;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n@@ -30,55 +32,66 @@\n \n     private static final long serialVersionUID = 6413819574530703577L;\n \n+    private final String uuid;\n+\n     private final T min;\n \n     private final T max;\n \n-    public SpinnerFieldPanel(final String id, final String name, final IModel<T> model,\n-            final T min, final T max) {\n+    public SpinnerFieldPanel(final String id, final String name, final Class<T> reference, final IModel<T> model,\n+            final T min, final T max, final boolean disableVisible) {\n \n         super(id, name, model);\n         this.min = min;\n         this.max = max;\n \n-        field = new TextField<T>(\"spinnerField\", model);\n-        field.setMarkupId(id);\n+        uuid = UUID.randomUUID().toString();\n+        field = new TextField<T>(\"spinnerField\", model, reference);\n+        field.setMarkupId(uuid);\n         add(field.setLabel(new Model<String>(name)));\n \n+        if (!isReadOnly()) {\n+            field.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -1107858522700306810L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    // nothing to do\n+                }\n+            });\n+        }\n+\n         AjaxLink<Void> spinnerFieldDisable = new AjaxLink<Void>(\"spinnerFieldDisable\") {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n+                // nothing to do\n             }\n \n         };\n-        spinnerFieldDisable.setMarkupId(\"spinnerFieldDisable-\" + id);\n+        spinnerFieldDisable.setMarkupId(\"spinnerFieldDisable-\" + uuid);\n+        spinnerFieldDisable.setOutputMarkupPlaceholderTag(true);\n+        spinnerFieldDisable.setVisible(disableVisible);\n         add(spinnerFieldDisable);\n-    }\n-\n-    @Override\n-    public void renderHead(final IHeaderResponse response) {\n-        super.renderHead(response);\n \n         final StringBuilder statements = new StringBuilder();\n         statements.append(\"jQuery(function() {\").\n-                append(\"var spinner = $('#\").append(id).append(\"').spinner();\");\n-\n+                append(\"var spinner = $('#\").append(uuid).append(\"').spinner();\");\n         if (this.min != null) {\n             statements.\n-                    append(\"$('#\").append(id).append(\"').spinner(\").\n+                    append(\"$('#\").append(uuid).append(\"').spinner(\").\n                     append(\"'option', 'min', \").append(this.min).append(\");\");\n         }\n         if (this.max != null) {\n             statements.\n-                    append(\"$('#\").append(id).append(\"').spinner(\").\n+                    append(\"$('#\").append(uuid).append(\"').spinner(\").\n                     append(\"'option', 'max', \").append(this.max).append(\");\");\n         }\n-\n         statements.\n-                append(\"$('#spinnerFieldDisable-\").append(id).append(\"').click(function() {\").\n+                append(\"$('#spinnerFieldDisable-\").append(uuid).append(\"').click(function() {\").\n                 append(\"if (spinner.spinner('option', 'disabled')) {\").\n                 append(\"spinner.spinner('enable');\").\n                 append(\"} else {\").\n@@ -87,8 +100,9 @@ public void renderHead(final IHeaderResponse response) {\n                 append(\"}\").\n                 append(\"});\").\n                 append(\"});\");\n-\n-        response.render(JavaScriptHeaderItem.forScript(statements, \"script-\" + id));\n+        Label spinnerFieldJS = new Label(\"spinnerFieldJS\", statements.toString());\n+        spinnerFieldJS.setEscapeModelStrings(false);\n+        add(spinnerFieldJS);\n     }\n \n }"},{"sha":"0890fb3913c03e2ed27725ae8064dc3d14498863","filename":"console/src/main/resources/org/apache/syncope/console/wicket/markup/html/form/SpinnerFieldPanel.html","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.html?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -18,6 +18,8 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:extend>\n+    <script type=\"text/javascript\" wicket:id=\"spinnerFieldJS\">\n+    </script>\n     <div style=\"display: inline-table;\">\n       <div style=\"display: table-cell;\">\n         <input wicket:id=\"spinnerField\"/>"},{"sha":"b1ed6f525d62f5c5e8917562d8ff1dd23737865e","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca218d6ce9c440f7f40af96badefaf64934b5174/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca218d6ce9c440f7f40af96badefaf64934b5174/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=ca218d6ce9c440f7f40af96badefaf64934b5174","patch":"@@ -32,15 +32,15 @@ under the License.\n   <SyncopeConf confKey=\"authentication.statuses\" confValue=\"created|active\"/>\n \n   <!-- sample policies -->\n-  <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"sync policy 1\" type=\"GLOBAL_SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%2F%3E\"/>\n+  <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"global sync policy\" type=\"GLOBAL_SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%3E%0A++%3CuAltSearchSchemas%2F%3E%0A++%3CrAltSearchSchemas%2F%3E%0A%3C%2Forg.apache.syncope.common.types.SyncPolicySpec%3E\"/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"global password policy\" type=\"GLOBAL_PASSWORD\" specification=\"%3Corg.apache.syncope.common.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E1%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E8%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Efalse%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Efalse%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Efalse%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Efalse%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Efalse%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Efalse%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.common.types.PasswordPolicySpec%3E\"/>\n-  <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%3E%0A++%3CuAltSearchSchemas%3E%0A++++%3Cstring%3Eusername%3C%2Fstring%3E%0A++++%3Cstring%3Efirstname%3C%2Fstring%3E%0A++%3C%2FuAltSearchSchemas%3E%0A++%3CconflictResolutionAction%3EALL%3C%2FconflictResolutionAction%3E%0A%3C%2Forg.apache.syncope.common.types.SyncPolicySpec%3E\"/>\n+  <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%3E%0A++%3CuAltSearchSchemas%3E%0A++++%3Cstring%3Eusername%3C%2Fstring%3E%0A++++%3Cstring%3Efirstname%3C%2Fstring%3E%0A++%3C%2FuAltSearchSchemas%3E%0A++%3CrAltSearchSchemas%2F%3E%0A++%3CconflictResolutionAction%3EALL%3C%2FconflictResolutionAction%3E%0A%3C%2Forg.apache.syncope.common.types.SyncPolicySpec%3E\"/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3Corg.apache.syncope.common.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E0%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E10%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Efalse%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Etrue%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Efalse%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Efalse%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Efalse%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Efalse%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.common.types.PasswordPolicySpec%3E\"/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"global account policy\" type=\"GLOBAL_ACCOUNT\" specification=\"%3Corg.apache.syncope.common.types.AccountPolicySpec%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E0%3C%2FminLength%3E%0A++%3CallUpperCase%3Efalse%3C%2FallUpperCase%3E%0A++%3CallLowerCase%3Efalse%3C%2FallLowerCase%3E%0A++%3CpropagateSuspension%3Efalse%3C%2FpropagateSuspension%3E%0A++%3CpermittedLoginRetries%3E0%3C%2FpermittedLoginRetries%3E%0A%3C%2Forg.apache.syncope.common.types.AccountPolicySpec%3E\"/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3Corg.apache.syncope.common.types.AccountPolicySpec%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E4%3C%2FminLength%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A++%3CallUpperCase%3Efalse%3C%2FallUpperCase%3E%0A++%3CallLowerCase%3Efalse%3C%2FallLowerCase%3E%0A++%3CpropagateSuspension%3Efalse%3C%2FpropagateSuspension%3E%0A++%3CpermittedLoginRetries%3E3%3C%2FpermittedLoginRetries%3E%0A%3C%2Forg.apache.syncope.common.types.AccountPolicySpec%3E\"/>\n-  <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%2F%3E\"/>\n+  <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%3E%0A++%3CuAltSearchSchemas%2F%3E%0A++%3CrAltSearchSchemas%2F%3E%0A%3C%2Forg.apache.syncope.common.types.SyncPolicySpec%3E\"/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3Corg.apache.syncope.common.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E0%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E10%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Etrue%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Etrue%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Etrue%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Etrue%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Etrue%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Etrue%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.common.types.PasswordPolicySpec%3E\"/>\n-  <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%3E%0A++%3CconflictResolutionAction%3EIGNORE%3C/conflictResolutionAction%3E%0A%3C/org.apache.syncope.common.types.SyncPolicySpec%3E\"/>\n+  <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%3E%0A++%3CuAltSearchSchemas%2F%3E%0A++%3CrAltSearchSchemas%2F%3E%0A++%3CconflictResolutionAction%3EIGNORE%3C%2FconflictResolutionAction%3E%0A%3C%2Forg.apache.syncope.common.types.SyncPolicySpec%3E\"/>\n     \n   <SyncopeUser id=\"1\" workflowId=\"4\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                username=\"rossini\" creator=\"admin\" lastModifier=\"admin\""}]}