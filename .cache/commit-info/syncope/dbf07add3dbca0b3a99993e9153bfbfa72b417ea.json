{"sha":"dbf07add3dbca0b3a99993e9153bfbfa72b417ea","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRiZjA3YWRkM2RiY2EwYjNhOTk5OTNlOTE1M2JmYmZhNzJiNDE3ZWE=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-04-07T14:57:24Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-04-07T14:57:54Z"},"message":"[SYNCOPE-1060] fixed wrong dates propagation to/from enduser","tree":{"sha":"d1946c448d9804b20a8960775cd3340bd25b3cab","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d1946c448d9804b20a8960775cd3340bd25b3cab"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dbf07add3dbca0b3a99993e9153bfbfa72b417ea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dbf07add3dbca0b3a99993e9153bfbfa72b417ea","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dbf07add3dbca0b3a99993e9153bfbfa72b417ea","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dbf07add3dbca0b3a99993e9153bfbfa72b417ea/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"832453828fdb274e3530a8c3e1392b99224558e9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/832453828fdb274e3530a8c3e1392b99224558e9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/832453828fdb274e3530a8c3e1392b99224558e9"}],"stats":{"total":95,"additions":56,"deletions":39},"files":[{"sha":"3d913e2a894d80768f8d2f4caddcd11ca10c4744","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java","status":"modified","additions":21,"deletions":12,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dbf07add3dbca0b3a99993e9153bfbfa72b417ea/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dbf07add3dbca0b3a99993e9153bfbfa72b417ea/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java?ref=dbf07add3dbca0b3a99993e9153bfbfa72b417ea","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -59,22 +60,15 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n             UserTO userTO = SerializationUtils.clone(SyncopeEnduserSession.get().getSelfTO());\n             Map<String, AttrTO> userPlainAttrMap = userTO.getPlainAttrMap();\n \n-            // Date -> millis conversion\n+            // 1. Date -> millis conversion for PLAIN attributes of USER and its MEMBERSHIPS\n             for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n-                if (userPlainAttrMap.containsKey(plainSchema.getKey())) {\n-                    FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n-\n-                    AttrTO dateAttr = userPlainAttrMap.get(plainSchema.getKey());\n-                    List<String> milliValues = new ArrayList<>(dateAttr.getValues().size());\n-                    for (String value : dateAttr.getValues()) {\n-                        milliValues.add(String.valueOf(fmt.parse(value).getTime()));\n-                    }\n-                    dateAttr.getValues().clear();\n-                    dateAttr.getValues().addAll(milliValues);\n+                dateToMillis(userPlainAttrMap, plainSchema);\n+                for (MembershipTO membership : userTO.getMemberships()) {\n+                    dateToMillis(membership.getPlainAttrMap(), plainSchema);\n                 }\n             }\n \n-            // membership attributes management\n+            // 2. membership attributes management\n             for (MembershipTO membership : userTO.getMemberships()) {\n                 String groupName = membership.getGroupName();\n                 for (AttrTO attr : membership.getPlainAttrs()) {\n@@ -116,4 +110,19 @@ public void writeData(final Attributes attributes) throws IOException {\n         }\n         return response;\n     }\n+\n+    private void dateToMillis(final Map<String, AttrTO> plainAttrMap, final PlainSchemaTO plainSchema)\n+            throws ParseException {\n+        if (plainAttrMap.containsKey(plainSchema.getKey())) {\n+            FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n+\n+            AttrTO dateAttr = plainAttrMap.get(plainSchema.getKey());\n+            List<String> milliValues = new ArrayList<>(dateAttr.getValues().size());\n+            for (String value : dateAttr.getValues()) {\n+                milliValues.add(String.valueOf(fmt.parse(value).getTime()));\n+            }\n+            dateAttr.getValues().clear();\n+            dateAttr.getValues().addAll(milliValues);\n+        }\n+    }\n }"},{"sha":"9934aadbf7f227e75c034bda61ce1a1f5ab366aa","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":34,"deletions":26,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dbf07add3dbca0b3a99993e9153bfbfa72b417ea/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dbf07add3dbca0b3a99993e9153bfbfa72b417ea/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=dbf07add3dbca0b3a99993e9153bfbfa72b417ea","patch":"@@ -70,52 +70,40 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n \n             UserTO userTO = MAPPER.readValue(request.getReader().readLine(), UserTO.class);\n \n-            Map<String, AttrTO> userPlainAttrMap = userTO.getPlainAttrMap();\n-\n-            // millis -> Date conversion\n-            for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n-                if (userPlainAttrMap.containsKey(plainSchema.getKey())) {\n-                    FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n-\n-                    AttrTO dateAttr = userPlainAttrMap.get(plainSchema.getKey());\n-                    List<String> formattedValues = new ArrayList<>(dateAttr.getValues().size());\n-                    for (String value : dateAttr.getValues()) {\n-                        try {\n-                            formattedValues.add(fmt.format(Long.valueOf(value)));\n-                        } catch (NumberFormatException e) {\n-                            throw new IllegalArgumentException(\"Invalid format value for \" + value);\n-                        }\n-                    }\n-                    dateAttr.getValues().clear();\n-                    dateAttr.getValues().addAll(formattedValues);\n-                }\n-            }\n-\n-            // membership attributes management\n+            // 1. membership attributes management\n             Set<AttrTO> membAttrs = new HashSet<>();\n             for (AttrTO attr : userTO.getPlainAttrs()) {\n                 if (attr.getSchema().contains(\"#\")) {\n-                    final String[] simpleAttrs = attr.getSchema().split(\"#\");\n+                    final String[] compositeSchemaKey = attr.getSchema().split(\"#\");\n                     MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n                             new Predicate<MembershipTO>() {\n \n                         @Override\n                         public boolean evaluate(final MembershipTO item) {\n-                            return simpleAttrs[0].equals(item.getGroupName());\n+                            return compositeSchemaKey[0].equals(item.getGroupName());\n                         }\n                     });\n                     if (membership == null) {\n-                        membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                        membership = new MembershipTO.Builder().group(null, compositeSchemaKey[0]).build();\n                         userTO.getMemberships().add(membership);\n                     }\n                     AttrTO clone = SerializationUtils.clone(attr);\n-                    clone.setSchema(simpleAttrs[1]);\n+                    clone.setSchema(compositeSchemaKey[1]);\n                     membership.getPlainAttrs().add(clone);\n                     membAttrs.add(attr);\n                 }\n             }\n             userTO.getPlainAttrs().removeAll(membAttrs);\n \n+            // 2. millis -> Date conversion for PLAIN attributes of USER and its MEMBERSHIPS\n+            Map<String, AttrTO> userPlainAttrMap = userTO.getPlainAttrMap();\n+            for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n+                millisToDate(userPlainAttrMap, plainSchema);\n+                for (MembershipTO membership : userTO.getMemberships()) {\n+                    millisToDate(membership.getPlainAttrMap(), plainSchema);\n+                }\n+            }\n+\n             membAttrs.clear();\n             for (AttrTO attr : userTO.getDerAttrs()) {\n                 if (attr.getSchema().contains(\"#\")) {\n@@ -198,4 +186,24 @@ public void writeData(final Attributes attributes) throws IOException {\n         }\n         return response;\n     }\n+\n+    private void millisToDate(final Map<String, AttrTO> plainAttrMap, final PlainSchemaTO plainSchema)\n+            throws IllegalArgumentException {\n+        LOG.info(\"CONVERTING >>>>>>>>>> {}\", plainSchema.getKey());\n+        if (plainAttrMap.containsKey(plainSchema.getKey())) {\n+            FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n+\n+            AttrTO dateAttr = plainAttrMap.get(plainSchema.getKey());\n+            List<String> formattedValues = new ArrayList<>(dateAttr.getValues().size());\n+            for (String value : dateAttr.getValues()) {\n+                try {\n+                    formattedValues.add(fmt.format(Long.valueOf(value)));\n+                } catch (NumberFormatException e) {\n+                    throw new IllegalArgumentException(\"Invalid format value for \" + value);\n+                }\n+            }\n+            dateAttr.getValues().clear();\n+            dateAttr.getValues().addAll(formattedValues);\n+        }\n+    }\n }"},{"sha":"0967ef424bce6791893e9a57bb952f80fd536e93","filename":"client/enduser/src/main/resources/META-INF/resources/app/configuration/customForm.json","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dbf07add3dbca0b3a99993e9153bfbfa72b417ea/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fconfiguration%2FcustomForm.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dbf07add3dbca0b3a99993e9153bfbfa72b417ea/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fconfiguration%2FcustomForm.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fconfiguration%2FcustomForm.json?ref=dbf07add3dbca0b3a99993e9153bfbfa72b417ea","patch":"@@ -1 +1 @@\n-{}\n\\ No newline at end of file\n+{}"}]}