{"sha":"d9250efade3793edeb35be10f72890a98090438c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ5MjUwZWZhZGUzNzkzZWRlYjM1YmUxMGY3Mjg5MGE5ODA5MDQzOGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-08-02T15:23:43Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-08-02T15:23:53Z"},"message":"[SYNCOPE-1348] Batch is in, now need to kick Bulk out","tree":{"sha":"63bf8312e4c80cdd4c0640ef001c2c2a32a8a061","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/63bf8312e4c80cdd4c0640ef001c2c2a32a8a061"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d9250efade3793edeb35be10f72890a98090438c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9250efade3793edeb35be10f72890a98090438c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d9250efade3793edeb35be10f72890a98090438c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9250efade3793edeb35be10f72890a98090438c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d2ff6e4a44c660c9c9c91524c91eaad5dfe2d473","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d2ff6e4a44c660c9c9c91524c91eaad5dfe2d473","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d2ff6e4a44c660c9c9c91524c91eaad5dfe2d473"}],"stats":{"total":3261,"additions":2898,"deletions":363},"files":[{"sha":"a614dd1d5e6f6fab7fa6e30e9b35c3440293b2bc","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.lib;\n \n+import org.apache.syncope.client.lib.batch.BatchRequest;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n@@ -358,4 +359,12 @@ public <T> T ifNoneMatch(final T service, final EntityTag etag) {\n     public <T> EntityTag getLatestEntityTag(final T service) {\n         return WebClient.client(service).getResponse().getEntityTag();\n     }\n+\n+    public BatchRequest batch() {\n+        return new BatchRequest(\n+                mediaType,\n+                restClientFactory.getAddress(),\n+                restClientFactory.getProviders(),\n+                getJWT());\n+    }\n }"},{"sha":"90105d08068c7a162b62f0b3de111ae12b042e44","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -34,7 +34,6 @@\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n import org.apache.cxf.staxutils.DocumentDepthProperties;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.rest.api.DateParamConverterProvider;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -48,7 +47,7 @@ public class SyncopeClientFactoryBean {\n     public enum ContentType {\n \n         JSON(MediaType.APPLICATION_JSON_TYPE),\n-        YAML(SyncopeConstants.APPLICATION_YAML_TYPE),\n+        YAML(RESTHeaders.APPLICATION_YAML_TYPE),\n         XML(MediaType.APPLICATION_XML_TYPE);\n \n         private final MediaType mediaType;"},{"sha":"a8858dc209fbf900289c3dcaedf2d03c0249ffc2","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientFactoryBean.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchClientFactoryBean.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.batch;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.cxf.endpoint.ConduitSelector;\n+import org.apache.cxf.endpoint.Endpoint;\n+import org.apache.cxf.endpoint.UpfrontConduitSelector;\n+import org.apache.cxf.jaxrs.client.ClientProxyImpl;\n+import org.apache.cxf.jaxrs.client.ClientState;\n+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n+\n+public class BatchClientFactoryBean extends JAXRSClientFactoryBean {\n+\n+    private final List<BatchRequestItem> batchRequestItems = new ArrayList<>();\n+\n+    private ClassLoader proxyLoader;\n+\n+    private boolean inheritHeaders;\n+\n+    @Override\n+    public void setClassLoader(final ClassLoader loader) {\n+        this.proxyLoader = loader;\n+    }\n+\n+    @Override\n+    public void setInheritHeaders(final boolean inheritHeaders) {\n+        this.inheritHeaders = inheritHeaders;\n+    }\n+\n+    @Override\n+    protected ConduitSelector getConduitSelector(final Endpoint ep) {\n+        ConduitSelector cs = getConduitSelector();\n+        if (cs == null) {\n+            try {\n+                cs = new UpfrontConduitSelector(new BatchOfflineHTTPConduit(bus, ep.getEndpointInfo()));\n+            } catch (IOException e) {\n+                throw new IllegalArgumentException(\"Could not create \" + BatchOfflineHTTPConduit.class.getName(), e);\n+            }\n+        }\n+        cs.setEndpoint(ep);\n+        return cs;\n+    }\n+\n+    @Override\n+    protected ClientProxyImpl createClientProxy(\n+            final ClassResourceInfo cri,\n+            final boolean isRoot,\n+            final ClientState actualState,\n+            final Object[] varValues) {\n+\n+        if (actualState == null) {\n+            return new BatchClientProxyImpl(\n+                    this, URI.create(getAddress()), proxyLoader, cri, isRoot, inheritHeaders, varValues);\n+        } else {\n+            return new BatchClientProxyImpl(\n+                    this, actualState, proxyLoader, cri, isRoot, inheritHeaders, varValues);\n+        }\n+    }\n+\n+    public boolean add(final BatchRequestItem item) {\n+        return this.batchRequestItems.add(item);\n+    }\n+\n+    public List<BatchRequestItem> getBatchRequestItems() {\n+        return batchRequestItems;\n+    }\n+}"},{"sha":"3e736e08a8c1ae6f57eabd99be2e60dd2256b8c8","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientProxyImpl.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchClientProxyImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchClientProxyImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchClientProxyImpl.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.batch;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.ClientProxyImpl;\n+import org.apache.cxf.jaxrs.client.ClientState;\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n+import org.apache.cxf.message.Message;\n+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n+\n+public class BatchClientProxyImpl extends ClientProxyImpl {\n+\n+    private final BatchClientFactoryBean factory;\n+\n+    public BatchClientProxyImpl(\n+            final BatchClientFactoryBean factory,\n+            final URI baseURI,\n+            final ClassLoader loader,\n+            final ClassResourceInfo cri,\n+            final boolean isRoot,\n+            final boolean inheritHeaders,\n+            final Object... varValues) {\n+\n+        super(baseURI, loader, cri, isRoot, inheritHeaders, varValues);\n+        this.factory = factory;\n+    }\n+\n+    public BatchClientProxyImpl(\n+            final BatchClientFactoryBean factory,\n+            final ClientState initialState,\n+            final ClassLoader loader,\n+            final ClassResourceInfo cri,\n+            final boolean isRoot,\n+            final boolean inheritHeaders,\n+            final Object... varValues) {\n+\n+        super(initialState, loader, cri, isRoot, inheritHeaders, varValues);\n+        this.factory = factory;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected Object[] preProcessResult(final Message message) throws Exception {\n+        BatchRequestItem bri = new BatchRequestItem();\n+        bri.setMethod((String) message.get(Message.HTTP_REQUEST_METHOD));\n+        bri.setRequestURI(StringUtils.substringAfter(\n+                (String) message.getContextualProperty(Message.REQUEST_URI),\n+                getState().getBaseURI().toASCIIString()));\n+        bri.setHeaders((Map<String, List<Object>>) message.get(Message.PROTOCOL_HEADERS));\n+\n+        BatchOfflineHTTPConduit conduit = (BatchOfflineHTTPConduit) message.getExchange().getConduit(message);\n+        bri.setContent(conduit.getOutputStream().toString(StandardCharsets.UTF_8.name()));\n+\n+        factory.add(bri);\n+        return null;\n+    }\n+\n+    @Override\n+    protected Object handleResponse(final Message outMessage, final Class<?> serviceCls) throws Throwable {\n+        return null;\n+    }\n+}"},{"sha":"e4587bec90a0fe993f3aa56298401d7a981bff51","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchOfflineHTTPConduit.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchOfflineHTTPConduit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchOfflineHTTPConduit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchOfflineHTTPConduit.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.batch;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.configuration.security.ProxyAuthorizationPolicy;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.service.model.EndpointInfo;\n+import org.apache.cxf.transport.http.Address;\n+import org.apache.cxf.transport.http.HTTPConduit;\n+import org.apache.cxf.transport.http.auth.DefaultBasicAuthSupplier;\n+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;\n+import org.apache.cxf.ws.addressing.EndpointReferenceType;\n+\n+public class BatchOfflineHTTPConduit extends HTTPConduit {\n+\n+    private ByteArrayOutputStream baos;\n+\n+    public BatchOfflineHTTPConduit(final Bus bus, final EndpointInfo ei) throws IOException {\n+        this(bus, ei, null);\n+    }\n+\n+    public BatchOfflineHTTPConduit(\n+            final Bus bus,\n+            final EndpointInfo ei,\n+            final EndpointReferenceType t) throws IOException {\n+\n+        super(bus, ei, t);\n+        this.proxyAuthSupplier = new DefaultBasicAuthSupplier();\n+        this.proxyAuthorizationPolicy = new ProxyAuthorizationPolicy();\n+    }\n+\n+    @Override\n+    protected void setupConnection(\n+            final Message message, final Address address,\n+            final HTTPClientPolicy csPolicy) throws IOException {\n+    }\n+\n+    @Override\n+    public HTTPClientPolicy getClient(final Message message) {\n+        return new HTTPClientPolicy();\n+    }\n+\n+    @Override\n+    protected OutputStream createOutputStream(\n+            final Message message,\n+            final boolean needToCacheRequest,\n+            final boolean isChunking,\n+            final int chunkThreshold) throws IOException {\n+\n+        baos = new ByteArrayOutputStream();\n+        return baos;\n+    }\n+\n+    public ByteArrayOutputStream getOutputStream() {\n+        return baos;\n+    }\n+}"},{"sha":"580c95a389fdecec2e289b8247562ff893346e4c","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchRequest.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchRequest.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.batch;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.cxf.jaxrs.client.Client;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.common.rest.api.Preference;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadGenerator;\n+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BatchRequest {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BatchRequest.class);\n+\n+    private final MediaType mediaType;\n+\n+    private final String jwt;\n+\n+    private final String address;\n+\n+    private final List<?> providers;\n+\n+    private BatchClientFactoryBean bcfb;\n+\n+    public BatchRequest(\n+            final MediaType mediaType,\n+            final String address,\n+            final List<?> providers,\n+            final String jwt) {\n+\n+        this.mediaType = mediaType;\n+        this.jwt = jwt;\n+        this.address = address;\n+        this.providers = providers;\n+        initBatchClientFactoryBean();\n+    }\n+\n+    private void initBatchClientFactoryBean() {\n+        this.bcfb = new BatchClientFactoryBean();\n+        this.bcfb.setAddress(address);\n+        this.bcfb.setProviders(providers);\n+    }\n+\n+    public <T> T getService(final Class<T> serviceClass) {\n+        bcfb.setServiceClass(serviceClass);\n+        T serviceInstance = bcfb.create(serviceClass);\n+\n+        Client client = WebClient.client(serviceInstance);\n+        client.type(mediaType).accept(mediaType);\n+\n+        return serviceInstance;\n+    }\n+\n+    public List<BatchRequestItem> getItems() {\n+        return bcfb.getBatchRequestItems();\n+    }\n+\n+    public BatchResponse commit() {\n+        return commit(false);\n+    }\n+\n+    public BatchResponse commit(final boolean async) {\n+        String boundary = \"--batch_\" + UUID.randomUUID().toString();\n+\n+        WebClient webClient = WebClient.create(bcfb.getAddress()).path(\"batch\").\n+                header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwt).\n+                type(RESTHeaders.multipartMixedWith(boundary.substring(2)));\n+        if (async) {\n+            webClient.header(RESTHeaders.PREFER, Preference.RESPOND_ASYNC);\n+        }\n+\n+        String body = BatchPayloadGenerator.generate(bcfb.getBatchRequestItems(), boundary);\n+        LOG.debug(\"Batch request body:\\n{}\", body);\n+\n+        initBatchClientFactoryBean();\n+\n+        return new BatchResponse(boundary, jwt, webClient.post(body));\n+    }\n+}"},{"sha":"89cd0e7fc909492aea14c46a43192c66e636acb0","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchResponse.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchResponse.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.batch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadParser;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BatchResponse {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BatchResponse.class);\n+\n+    private final String boundary;\n+\n+    private final String jwt;\n+\n+    private final URI monitor;\n+\n+    private Response response;\n+\n+    public BatchResponse(final String boundary, final String jwt, final Response response) {\n+        this.boundary = boundary;\n+        this.jwt = jwt;\n+        this.monitor = response.getLocation();\n+        this.response = response;\n+    }\n+\n+    /**\n+     * Gives the last Response received from the Batch service.\n+     *\n+     * @return the last Response received from the Batch service\n+     */\n+    public Response getResponse() {\n+        return response;\n+    }\n+\n+    /**\n+     * If asynchronous processing was requested, query the monitor URI.\n+     *\n+     * @return the last Response received from the Batch service\n+     */\n+    public Response poll() {\n+        if (monitor != null) {\n+            response = WebClient.create(monitor).\n+                    header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwt).\n+                    type(RESTHeaders.multipartMixedWith(boundary.substring(2))).get();\n+        }\n+\n+        return response;\n+    }\n+\n+    /**\n+     * Parses the latest Response received into a list of {@link BatchResponseItem}s.\n+     *\n+     * @return the Batch Response parsed as list of {@link BatchResponseItem}s\n+     * @throws IOException if there are issues when reading the response body\n+     */\n+    public List<BatchResponseItem> getItems() throws IOException {\n+        String body = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8.name());\n+        LOG.debug(\"Batch response body:\\n{}\", body);\n+\n+        return BatchPayloadParser.parse(\n+                new ByteArrayInputStream(body.getBytes()),\n+                response.getMediaType(),\n+                new BatchResponseItem());\n+    }\n+}"},{"sha":"b8a7ee4caf331fcc8a11e42015059609a75a263d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -21,7 +21,6 @@\n import java.util.Collections;\n import java.util.Set;\n import java.util.regex.Pattern;\n-import javax.ws.rs.core.MediaType;\n \n public final class SyncopeConstants {\n \n@@ -64,9 +63,9 @@ public final class SyncopeConstants {\n \n     public static final Pattern UUID_PATTERN = Pattern.compile(UUID_REGEX);\n \n-    public static final String APPLICATION_YAML = \"application/yaml\";\n+    public static final String DOUBLE_DASH = \"--\";\n \n-    public static final MediaType APPLICATION_YAML_TYPE = new MediaType(\"application\", \"yaml\");\n+    public static final String CRLF = \"\\r\\n\";\n \n     private SyncopeConstants() {\n         // private constructor for utility class"},{"sha":"a2e6fb2356940945c1300c542b459b58d393e1ae","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/Preference.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -28,7 +28,8 @@ public enum Preference {\n \n     NONE(\"\"),\n     RETURN_CONTENT(\"return-content\"),\n-    RETURN_NO_CONTENT(\"return-no-content\");\n+    RETURN_NO_CONTENT(\"return-no-content\"),\n+    RESPOND_ASYNC(\"respond-async\");\n \n     private final String literal;\n "},{"sha":"f99331767ae764648eae6d544118c0c87e498fe8","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":33,"deletions":3,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.rest.api;\n \n+import javax.ws.rs.core.MediaType;\n+\n /**\n  * Custom HTTP headers in use with REST services.\n  */\n@@ -51,12 +53,40 @@ public final class RESTHeaders {\n     public static final String ERROR_INFO = \"X-Application-Error-Info\";\n \n     /**\n-     * Mediatype for PNG images, not defined in <tt>javax.ws.rs.core.MediaType</tt>.\n-     *\n-     * @see javax.ws.rs.core.MediaType\n+     * Mediatype for PNG images, not defined in {@link javax.ws.rs.core.MediaType}.\n      */\n     public static final String MEDIATYPE_IMAGE_PNG = \"image/png\";\n \n+    /**\n+     * Mediatype for YAML, not defined in {@link javax.ws.rs.core.MediaType}.\n+     */\n+    public static final String APPLICATION_YAML = \"application/yaml\";\n+\n+    /**\n+     * Mediatype for YAML, not defined in {@link javax.ws.rs.core.MediaType}.\n+     */\n+    public static final MediaType APPLICATION_YAML_TYPE = new MediaType(\"application\", \"yaml\");\n+\n+    /**\n+     * Mediatype for multipart/mixed, not defined in {@link javax.ws.rs.core.MediaType}.\n+     */\n+    public static final String MULTIPART_MIXED = \"multipart/mixed\";\n+\n+    /**\n+     * The boundary parameter name for multipart, not defined in {@link javax.ws.rs.core.MediaType}.\n+     */\n+    public static final String BOUNDARY_PARAMETER = \"boundary\";\n+\n+    /**\n+     * Builds Content-Type string for multipart/mixed and the given boundary.\n+     * \n+     * @param boundary multipart boundary value\n+     * @return multipart/mixed Content-Type string, with given boundary\n+     */\n+    public static String multipartMixedWith(final String boundary) {\n+        return MULTIPART_MIXED + \";\" + BOUNDARY_PARAMETER + \"=\" + boundary;\n+    }\n+\n     /**\n      * Allows the client to specify a preference for the result to be returned from the server.\n      * <a href=\"http://msdn.microsoft.com/en-us/library/hh537533.aspx\">More information</a>."},{"sha":"561ac6a5be3370786b013f2e27770522bb11737a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchItem.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchItem.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.batch;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+\n+public abstract class BatchItem implements Serializable {\n+\n+    private static final long serialVersionUID = -1393976266651766259L;\n+\n+    private final Map<String, List<Object>> headers = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    private String content;\n+\n+    public Map<String, List<Object>> getHeaders() {\n+        return headers;\n+    }\n+\n+    public void setHeaders(final Map<String, List<Object>> headers) {\n+        this.headers.clear();\n+        this.headers.putAll(headers);\n+    }\n+\n+    public String getContent() {\n+        return content;\n+    }\n+\n+    public void setContent(final String content) {\n+        this.content = content;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n+    }\n+}"},{"sha":"18d5f64c5e413d6c4964c1531ccea1e41f9f700e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadGenerator.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadGenerator.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.batch;\n+\n+import java.util.List;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+\n+public final class BatchPayloadGenerator {\n+\n+    private static final String HTTP_1_1 = \"HTTP/1.1\";\n+\n+    public static <T extends BatchItem> String generate(final List<T> items, final String boundary) {\n+        StringBuilder payload = new StringBuilder();\n+\n+        items.forEach(item -> {\n+            payload.append(boundary).append(SyncopeConstants.CRLF);\n+            payload.append(HttpHeaders.CONTENT_TYPE).append(\": \").append(\"application/http\").append('\\n');\n+            payload.append(\"Content-Transfer-Encoding: binary\").append('\\n');\n+            payload.append(SyncopeConstants.CRLF);\n+\n+            if (item instanceof BatchRequestItem) {\n+                BatchRequestItem bri = BatchRequestItem.class.cast(item);\n+                payload.append(bri.getMethod()).append(' ').append(bri.getRequestURI());\n+                if (bri.getQueryString() != null) {\n+                    payload.append('?').append(bri.getQueryString());\n+                }\n+                payload.append(' ').append(HTTP_1_1).append('\\n');\n+            }\n+\n+            if (item instanceof BatchResponseItem) {\n+                BatchResponseItem bri = BatchResponseItem.class.cast(item);\n+                payload.append(HTTP_1_1).append(' ').\n+                        append(bri.getStatus()).append(' ').\n+                        append(Response.Status.fromStatusCode(bri.getStatus()).getReasonPhrase()).\n+                        append('\\n');\n+            }\n+\n+            if (item.getHeaders() != null && !item.getHeaders().isEmpty()) {\n+                item.getHeaders().forEach((key, values) -> {\n+                    values.forEach(value -> {\n+                        payload.append(key).append(\": \").append(value).append('\\n');\n+                    });\n+                });\n+                payload.append(SyncopeConstants.CRLF);\n+            }\n+\n+            if (item.getContent() != null) {\n+                payload.append(item.getContent()).append('\\n');\n+            }\n+        });\n+\n+        payload.append(boundary).append(SyncopeConstants.DOUBLE_DASH).append('\\n');\n+\n+        return payload.toString();\n+    }\n+\n+    private BatchPayloadGenerator() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"aa2cf419088b2c7f561cdf3a3af8a67649be8a3e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLine.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLine.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLine.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLine.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.batch;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+public class BatchPayloadLine {\n+\n+    private final int lineNumber;\n+\n+    private final String content;\n+\n+    public BatchPayloadLine(final String content, final int lineNumber) {\n+        this.content = content;\n+        this.lineNumber = lineNumber;\n+    }\n+\n+    public int getLineNumber() {\n+        return lineNumber;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return content;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+}"},{"sha":"b4a4d9f1500486d8a0478c58d1547822b3f660d5","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLineReader.java","status":"added","additions":193,"deletions":0,"changes":193,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLineReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLineReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLineReader.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.batch;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+public class BatchPayloadLineReader implements AutoCloseable {\n+\n+    private static final byte CR = '\\r';\n+\n+    private static final byte LF = '\\n';\n+\n+    private static final int EOF = -1;\n+\n+    private static final int BUFFER_SIZE = 8192;\n+\n+    private static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;\n+\n+    private final ReadState readState = new ReadState();\n+\n+    private final InputStream in;\n+\n+    private final MediaType multipartMixed;\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];\n+\n+    private Charset currentCharset = DEFAULT_CHARSET;\n+\n+    private String currentBoundary = null;\n+\n+    private int offset = 0;\n+\n+    private int limit = 0;\n+\n+    public BatchPayloadLineReader(final InputStream in, final MediaType multipartMixed) {\n+        this.in = in;\n+        this.multipartMixed = multipartMixed;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        in.close();\n+    }\n+\n+    private boolean isBoundary(final String currentLine) {\n+        return (currentBoundary + SyncopeConstants.CRLF).equals(currentLine)\n+                || (currentBoundary + SyncopeConstants.DOUBLE_DASH + SyncopeConstants.CRLF).equals(currentLine);\n+    }\n+\n+    private int fillBuffer() throws IOException {\n+        limit = in.read(buffer, 0, buffer.length);\n+        offset = 0;\n+\n+        return limit;\n+    }\n+\n+    private String readLine() throws IOException {\n+        if (limit == EOF) {\n+            return null;\n+        }\n+\n+        ByteBuffer innerBuffer = ByteBuffer.allocate(BUFFER_SIZE);\n+        // EOF will be considered as line ending\n+        boolean foundLineEnd = false;\n+\n+        while (!foundLineEnd) {\n+            // Is buffer refill required?\n+            if (limit == offset && fillBuffer() == EOF) {\n+                foundLineEnd = true;\n+            }\n+\n+            if (!foundLineEnd) {\n+                byte currentChar = buffer[offset++];\n+                if (!innerBuffer.hasRemaining()) {\n+                    innerBuffer.flip();\n+                    ByteBuffer tmp = ByteBuffer.allocate(innerBuffer.limit() * 2);\n+                    tmp.put(innerBuffer);\n+                    innerBuffer = tmp;\n+                }\n+                innerBuffer.put(currentChar);\n+\n+                if (currentChar == LF) {\n+                    foundLineEnd = true;\n+                } else if (currentChar == CR) {\n+                    foundLineEnd = true;\n+\n+                    // Check next byte. Consume \\n if available\n+                    // Is buffer refill required?\n+                    if (limit == offset) {\n+                        fillBuffer();\n+                    }\n+\n+                    // Check if there is at least one character\n+                    if (limit != EOF && buffer[offset] == LF) {\n+                        innerBuffer.put(LF);\n+                        offset++;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (innerBuffer.position() == 0) {\n+            return null;\n+        } else {\n+            String currentLine = new String(innerBuffer.array(), 0, innerBuffer.position(),\n+                    readState.isReadBody() ? currentCharset : DEFAULT_CHARSET);\n+\n+            if (currentLine.startsWith(HttpHeaders.CONTENT_TYPE)) {\n+                String charsetString = multipartMixed.getParameters().get(MediaType.CHARSET_PARAMETER);\n+                currentCharset = charsetString == null\n+                        ? DEFAULT_CHARSET\n+                        : Charset.forName(charsetString);\n+\n+                currentBoundary = SyncopeConstants.DOUBLE_DASH + multipartMixed.getParameters().\n+                        get(RESTHeaders.BOUNDARY_PARAMETER);\n+            } else if (SyncopeConstants.CRLF.equals(currentLine)) {\n+                readState.foundLinebreak();\n+            } else if (isBoundary(currentLine)) {\n+                readState.foundBoundary();\n+            }\n+\n+            return currentLine;\n+        }\n+    }\n+\n+    public List<BatchPayloadLine> read() throws IOException {\n+        List<BatchPayloadLine> result = new ArrayList<>();\n+\n+        String currentLine = readLine();\n+        if (currentLine != null) {\n+            currentBoundary = currentLine.trim();\n+            int counter = 1;\n+            result.add(new BatchPayloadLine(currentLine, counter++));\n+\n+            while ((currentLine = readLine()) != null) {\n+                result.add(new BatchPayloadLine(currentLine, counter++));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Read state indicator (whether currently the {@code body} or {@code header} part is read).\n+     */\n+    private static class ReadState {\n+\n+        private int state = 0;\n+\n+        public void foundLinebreak() {\n+            state++;\n+        }\n+\n+        public void foundBoundary() {\n+            state = 0;\n+        }\n+\n+        public boolean isReadBody() {\n+            return state >= 2;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return String.valueOf(state);\n+        }\n+    }\n+}"},{"sha":"a558db1d288afe207e8a17421b39e4dab758e6cc","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadParser.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadParser.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.batch;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.ws.rs.HttpMethod;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class BatchPayloadParser {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BatchPayloadParser.class);\n+\n+    private static final Pattern PATTERN_LAST_CRLF = Pattern.compile(\"(.*)\\\\r\\\\n\\\\s*\", Pattern.DOTALL);\n+\n+    private static final Pattern PATTERN_HEADER_LINE = Pattern.compile(\"((?:\\\\w|[!#$%\\\\&'*+\\\\-.^`|~])+):\\\\s?(.*)\\\\s*\");\n+\n+    private static final Pattern PATTERN_BLANK_LINE = Pattern.compile(\"\\\\s*\\r?\\n\\\\s*\");\n+\n+    private static final String[] HTTP_METHODS = {\n+        HttpMethod.DELETE,\n+        HttpMethod.PATCH,\n+        HttpMethod.POST,\n+        HttpMethod.PUT\n+    };\n+\n+    private static BatchPayloadLine removeEndingCRLF(final BatchPayloadLine line) {\n+        Matcher matcher = PATTERN_LAST_CRLF.matcher(line.toString());\n+        return matcher.matches()\n+                ? new BatchPayloadLine(matcher.group(1), line.getLineNumber())\n+                : line;\n+    }\n+\n+    private static void removeEndingCRLFFromList(final List<BatchPayloadLine> lines) {\n+        if (!lines.isEmpty()) {\n+            BatchPayloadLine lastLine = lines.remove(lines.size() - 1);\n+            lines.add(removeEndingCRLF(lastLine));\n+        }\n+    }\n+\n+    private static List<List<BatchPayloadLine>> split(final List<BatchPayloadLine> lines, final String boundary) {\n+        List<List<BatchPayloadLine>> messageParts = new ArrayList<>();\n+        List<BatchPayloadLine> currentPart = new ArrayList<>();\n+        boolean isEndReached = false;\n+\n+        String quotedBoundary = Pattern.quote(boundary);\n+        Pattern boundaryDelimiterPattern = Pattern.compile(\"--\" + quotedBoundary + \"--\\\\s*\");\n+        Pattern boundaryPattern = Pattern.compile(\"--\" + quotedBoundary + \"\\\\s*\");\n+\n+        for (BatchPayloadLine line : lines) {\n+            if (boundaryDelimiterPattern.matcher(line.toString()).matches()) {\n+                removeEndingCRLFFromList(currentPart);\n+                messageParts.add(currentPart);\n+                isEndReached = true;\n+            } else if (boundaryPattern.matcher(line.toString()).matches()) {\n+                removeEndingCRLFFromList(currentPart);\n+                messageParts.add(currentPart);\n+                currentPart = new ArrayList<>();\n+            } else {\n+                currentPart.add(line);\n+            }\n+\n+            if (isEndReached) {\n+                break;\n+            }\n+        }\n+\n+        // Remove preamble\n+        if (!messageParts.isEmpty()) {\n+            messageParts.remove(0);\n+        }\n+\n+        if (!isEndReached) {\n+            int lineNumber = lines.isEmpty() ? 0 : lines.get(0).getLineNumber();\n+            throw new IllegalArgumentException(\"Missing close boundary delimiter around line \" + lineNumber);\n+        }\n+\n+        return messageParts;\n+    }\n+\n+    private static void consumeHeaders(final List<BatchPayloadLine> bodyPart, final BatchItem item) {\n+        Map<String, List<Object>> headers = new HashMap<>();\n+\n+        boolean isHeader = true;\n+        for (Iterator<BatchPayloadLine> itor = bodyPart.iterator(); itor.hasNext() && isHeader;) {\n+            BatchPayloadLine currentLine = itor.next();\n+\n+            Matcher headerMatcher = PATTERN_HEADER_LINE.matcher(currentLine.toString());\n+            if (headerMatcher.matches() && headerMatcher.groupCount() == 2) {\n+                itor.remove();\n+            } else {\n+                isHeader = false;\n+            }\n+        }\n+        consumeBlankLine(bodyPart);\n+\n+        isHeader = true;\n+        for (Iterator<BatchPayloadLine> itor = bodyPart.iterator(); itor.hasNext() && isHeader;) {\n+            BatchPayloadLine currentLine = itor.next();\n+\n+            if (currentLine.toString().contains(\"HTTP/1.1\")) {\n+                itor.remove();\n+\n+                if (ArrayUtils.contains(HTTP_METHODS, StringUtils.substringBefore(currentLine.toString(), \" \"))\n+                        && item instanceof BatchRequestItem) {\n+\n+                    BatchRequestItem bri = BatchRequestItem.class.cast(item);\n+                    String[] parts = currentLine.toString().split(\" \");\n+                    bri.setMethod(parts[0]);\n+                    String[] target = parts[1].split(\"\\\\?\");\n+                    bri.setRequestURI(target[0]);\n+                    if (target.length > 1) {\n+                        bri.setQueryString(target[1]);\n+                    }\n+                } else if (item instanceof BatchResponseItem) {\n+                    BatchResponseItem bri = BatchResponseItem.class.cast(item);\n+                    bri.setStatus(Integer.valueOf(StringUtils.substringBefore(\n+                            StringUtils.substringAfter(currentLine.toString(), \" \"), \" \").trim()));\n+                }\n+            } else {\n+                Matcher headerMatcher = PATTERN_HEADER_LINE.matcher(currentLine.toString());\n+                if (headerMatcher.matches() && headerMatcher.groupCount() == 2) {\n+                    itor.remove();\n+\n+                    String headerName = headerMatcher.group(1).trim();\n+                    String headerValue = headerMatcher.group(2).trim();\n+\n+                    List<Object> header = headers.get(headerName);\n+                    if (header == null) {\n+                        header = new ArrayList<>();\n+                        headers.put(headerName, header);\n+                    }\n+                    header.addAll(Stream.of(headerValue.split(\",\")).map(String::trim).collect(Collectors.toList()));\n+                } else {\n+                    isHeader = false;\n+                }\n+            }\n+        }\n+        consumeBlankLine(bodyPart);\n+\n+        item.setHeaders(headers);\n+    }\n+\n+    private static void consumeBlankLine(final List<BatchPayloadLine> bodyPart) {\n+        if (!bodyPart.isEmpty() && PATTERN_BLANK_LINE.matcher(bodyPart.get(0).toString()).matches()) {\n+            bodyPart.remove(0);\n+        }\n+    }\n+\n+    public static <T extends BatchItem> List<T> parse(\n+            final InputStream in,\n+            final MediaType multipartMixed,\n+            final T template) throws IOException {\n+\n+        List<BatchPayloadLine> lines;\n+        try (BatchPayloadLineReader lineReader = new BatchPayloadLineReader(in, multipartMixed)) {\n+            lines = lineReader.read();\n+        }\n+\n+        return split(lines, multipartMixed.getParameters().get(RESTHeaders.BOUNDARY_PARAMETER)).stream().\n+                map(bodyPart -> {\n+                    LOG.debug(\"Body part:\\n{}\", bodyPart);\n+\n+                    T item = SerializationUtils.clone(template);\n+\n+                    consumeHeaders(bodyPart, item);\n+                    item.setContent(\n+                            bodyPart.stream().map(BatchPayloadLine::toString).collect(Collectors.joining()));\n+\n+                    return item;\n+                }).collect(Collectors.toList());\n+    }\n+\n+    private BatchPayloadParser() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"834b0fe8d9dfaba24e86b0174ed43448a39e2a7d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchRequestItem.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchRequestItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchRequestItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchRequestItem.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.batch;\n+\n+public class BatchRequestItem extends BatchItem {\n+\n+    private static final long serialVersionUID = -986002485818968262L;\n+\n+    private String method;\n+\n+    private String requestURI;\n+\n+    private String queryString;\n+\n+    public String getMethod() {\n+        return method;\n+    }\n+\n+    public void setMethod(final String method) {\n+        this.method = method;\n+    }\n+\n+    public String getRequestURI() {\n+        return requestURI;\n+    }\n+\n+    public void setRequestURI(final String requestURI) {\n+        this.requestURI = requestURI;\n+    }\n+\n+    public String getQueryString() {\n+        return queryString;\n+    }\n+\n+    public void setQueryString(final String queryString) {\n+        this.queryString = queryString;\n+    }\n+}"},{"sha":"e989b6571272cb448acbaf945cab2bd0a9cdf5aa","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchResponseItem.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchResponseItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchResponseItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchResponseItem.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.batch;\n+\n+public class BatchResponseItem extends BatchItem {\n+\n+    private static final long serialVersionUID = -2163506313221985565L;\n+\n+    private int status;\n+\n+    public int getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final int status) {\n+        this.status = status;\n+    }\n+}"},{"sha":"e26b2e8aa0d22922b1394b52dfa4aaba93cf282e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAccessTokenService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAccessTokenService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAccessTokenService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -35,7 +35,6 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -67,7 +66,7 @@ public interface AccessTokenService extends JAXRSService {\n     })\n     @POST\n     @Path(\"login\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response login();\n \n     /**\n@@ -89,7 +88,7 @@ public interface AccessTokenService extends JAXRSService {\n                         description = \"Expiration of the refreshed JWT\") }))\n     @POST\n     @Path(\"refresh\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response refresh();\n \n     /**\n@@ -101,7 +100,7 @@ public interface AccessTokenService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"logout\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void logout();\n \n     /**\n@@ -114,8 +113,8 @@ public interface AccessTokenService extends JAXRSService {\n         @SecurityRequirement(name = \"BasicAuthentication\"),\n         @SecurityRequirement(name = \"Bearer\") })\n     @GET\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<AccessTokenTO> list(@BeanParam AccessTokenQuery query);\n \n     /**\n@@ -130,6 +129,6 @@ public interface AccessTokenService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@PathParam(\"key\") String key);\n }"},{"sha":"f9b628743e24dbe81cdd74b7bd21f3422f048b4c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -38,7 +38,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -105,8 +104,8 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {\n                         description = \"Allows the server to inform the \"\n                         + \"client about the fact that a specified preference was applied\") }))\n     @POST\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull AnyObjectTO anyObjectTO);\n \n     /**\n@@ -148,8 +147,8 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {\n                 + \" date of the entity\") })\n     @PATCH\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(@NotNull AnyObjectPatch anyObjectPatch);\n \n     /**\n@@ -191,7 +190,7 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {\n                 + \" date of the entity\") })\n     @PUT\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(@NotNull AnyObjectTO anyObjectTO);\n }"},{"sha":"7bb78d8841caf50bbf07db22a6e291b84d9e5282","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -39,7 +39,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AssociationPatch;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -68,7 +67,7 @@\n      */\n     @GET\n     @Path(\"{key}/{schemaType}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Set<AttrTO> read(@NotNull @PathParam(\"key\") String key, @NotNull @PathParam(\"schemaType\") SchemaType schemaType);\n \n     /**\n@@ -84,7 +83,7 @@\n      */\n     @GET\n     @Path(\"{key}/{schemaType}/{schema}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     AttrTO read(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"schemaType\") SchemaType schemaType,\n@@ -98,7 +97,7 @@ AttrTO read(\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     TO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -108,7 +107,7 @@ AttrTO read(\n      * @return paged list of any objects matching the given query\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<TO> search(@BeanParam AnyQuery anyQuery);\n \n     /**\n@@ -123,8 +122,8 @@ AttrTO read(\n             @Schema(type = \"string\"))\n     @PUT\n     @Path(\"{key}/{schemaType}/{schema}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"schemaType\") SchemaType schemaType,\n@@ -141,7 +140,7 @@ Response update(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}/{schemaType}/{schema}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"schemaType\") SchemaType schemaType,\n@@ -184,7 +183,7 @@ void delete(\n                 + \" date of the entity\") })\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response delete(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -227,8 +226,8 @@ void delete(\n                 + \" date of the entity\") })\n     @POST\n     @Path(\"{key}/deassociate/{action}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response deassociate(@NotNull DeassociationPatch patch);\n \n     /**\n@@ -271,8 +270,8 @@ void delete(\n                 + \" date of the entity\") })\n     @POST\n     @Path(\"{key}/associate/{action}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response associate(@NotNull AssociationPatch patch);\n \n     /**\n@@ -303,7 +302,7 @@ void delete(\n                         + \"client about the fact that a specified preference was applied\")) })\n     @POST\n     @Path(\"bulk\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response bulk(@NotNull BulkAction bulkAction);\n }"},{"sha":"6b90a1b07c86086c69c01883331076e811e8c949","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -40,7 +40,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -60,7 +59,7 @@ public interface AnyTypeClassService extends JAXRSService {\n      * @return list of all anyTypeClasss.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<AnyTypeClassTO> list();\n \n     /**\n@@ -71,7 +70,7 @@ public interface AnyTypeClassService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     AnyTypeClassTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -90,8 +89,8 @@ public interface AnyTypeClassService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull AnyTypeClassTO anyTypeClassTO);\n \n     /**\n@@ -105,8 +104,8 @@ public interface AnyTypeClassService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull AnyTypeClassTO anyTypeClassTO);\n \n     /**\n@@ -118,6 +117,6 @@ public interface AnyTypeClassService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"e5db5063d1545aeb7a56a742074111c0d8aa6d3a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -40,7 +40,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -60,7 +59,7 @@ public interface AnyTypeService extends JAXRSService {\n      * @return list of all anyTypes.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<AnyTypeTO> list();\n \n     /**\n@@ -71,7 +70,7 @@ public interface AnyTypeService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     AnyTypeTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -90,7 +89,7 @@ public interface AnyTypeService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull AnyTypeTO anyTypeTO);\n \n     /**\n@@ -104,7 +103,7 @@ public interface AnyTypeService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull AnyTypeTO anyTypeTO);\n \n     /**\n@@ -116,6 +115,6 @@ public interface AnyTypeService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"e8e8b19a82396b02f63bc7325735268845e2133e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ApplicationService.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FApplicationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FApplicationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FApplicationService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -40,7 +40,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ApplicationTO;\n import org.apache.syncope.common.lib.to.PrivilegeTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -61,7 +60,7 @@ public interface ApplicationService extends JAXRSService {\n      * @return list of all applications.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ApplicationTO> list();\n \n     /**\n@@ -72,7 +71,7 @@ public interface ApplicationService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ApplicationTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -83,7 +82,7 @@ public interface ApplicationService extends JAXRSService {\n      */\n     @GET\n     @Path(\"privileges/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PrivilegeTO readPrivilege(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -102,8 +101,8 @@ public interface ApplicationService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull ApplicationTO applicationTO);\n \n     /**\n@@ -117,8 +116,8 @@ public interface ApplicationService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull ApplicationTO applicationTO);\n \n     /**\n@@ -130,6 +129,6 @@ public interface ApplicationService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"02871541f0264c84adae9d36d2e60deed3f09481","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -37,8 +37,8 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for configuration.\n@@ -65,7 +65,7 @@ public interface ConfigurationService extends JAXRSService {\n      * @return all configuration parameters\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<AttrTO> list();\n \n     /**\n@@ -76,7 +76,7 @@ public interface ConfigurationService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{schema}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     AttrTO get(@NotNull @PathParam(\"schema\") String schema);\n \n     /**\n@@ -90,8 +90,8 @@ public interface ConfigurationService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{schema}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void set(@NotNull AttrTO value);\n \n     /**\n@@ -103,6 +103,6 @@ public interface ConfigurationService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{schema}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"schema\") String schema);\n }"},{"sha":"c94799f5cf0d11bf590b67d8bb2c380f7849ee37","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorHistoryService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorHistoryService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorHistoryService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -32,8 +32,8 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for connector configuration versioning.\n@@ -53,7 +53,7 @@ public interface ConnectorHistoryService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{connectorKey}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ConnInstanceHistoryConfTO> list(@NotNull @PathParam(\"connectorKey\") String connectorKey);\n \n     /**\n@@ -65,7 +65,7 @@ public interface ConnectorHistoryService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void restore(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -77,6 +77,6 @@ public interface ConnectorHistoryService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"a301e89ded04d3f21859f3a2a1f9399f8c0e4f8e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -42,7 +42,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n@@ -66,7 +65,7 @@ public interface ConnectorService extends JAXRSService {\n      */\n     @GET\n     @Path(\"bundles\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);\n \n     /**\n@@ -83,8 +82,8 @@ public interface ConnectorService extends JAXRSService {\n             @Schema(type = \"string\"))\n     @POST\n     @Path(\"{key}/supportedObjectClasses\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ConnIdObjectClassTO> buildObjectClassInfo(\n             @NotNull ConnInstanceTO connInstanceTO,\n             @QueryParam(\"includeSpecial\") @DefaultValue(\"false\") boolean includeSpecial);\n@@ -99,7 +98,7 @@ List<ConnIdObjectClassTO> buildObjectClassInfo(\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ConnInstanceTO read(@NotNull @PathParam(\"key\") String key, @QueryParam(\"lang\") String lang);\n \n     /**\n@@ -112,7 +111,7 @@ List<ConnIdObjectClassTO> buildObjectClassInfo(\n      */\n     @GET\n     @Path(\"byResource/{resourceName}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ConnInstanceTO readByResource(\n             @NotNull @PathParam(\"resourceName\") String resourceName, @QueryParam(\"lang\") String lang);\n \n@@ -124,7 +123,7 @@ ConnInstanceTO readByResource(\n      * @return list of all connector instances with property keys in the matching language\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ConnInstanceTO> list(@QueryParam(\"lang\") String lang);\n \n     /**\n@@ -143,8 +142,8 @@ ConnInstanceTO readByResource(\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull ConnInstanceTO connInstanceTO);\n \n     /**\n@@ -158,8 +157,8 @@ ConnInstanceTO readByResource(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull ConnInstanceTO connInstanceTO);\n \n     /**\n@@ -171,7 +170,7 @@ ConnInstanceTO readByResource(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -183,8 +182,8 @@ ConnInstanceTO readByResource(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"check\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void check(@NotNull ConnInstanceTO connInstanceTO);\n \n     /**\n@@ -194,6 +193,6 @@ ConnInstanceTO readByResource(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"reload\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void reload();\n }"},{"sha":"93c717ac6af0d758c7124904ab53f3165a62bbdd","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -40,7 +40,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DomainTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -60,7 +59,7 @@ public interface DomainService extends JAXRSService {\n      * @return list of all domains.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<DomainTO> list();\n \n     /**\n@@ -71,7 +70,7 @@ public interface DomainService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     DomainTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -90,8 +89,8 @@ public interface DomainService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull DomainTO domainTO);\n \n     /**\n@@ -105,8 +104,8 @@ public interface DomainService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull DomainTO domainTO);\n \n     /**\n@@ -118,6 +117,6 @@ public interface DomainService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"0de27f7581a990ff0a5311d1e40b615dbdd689f6","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDynRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDynRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDynRealmService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -40,7 +40,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -60,7 +59,7 @@ public interface DynRealmService extends JAXRSService {\n      * @return list of all dynamic realms.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<DynRealmTO> list();\n \n     /**\n@@ -71,7 +70,7 @@ public interface DynRealmService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     DynRealmTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -90,8 +89,8 @@ public interface DynRealmService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull DynRealmTO dynDynRealmTO);\n \n     /**\n@@ -105,8 +104,8 @@ public interface DynRealmService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull DynRealmTO dynDynRealmTO);\n \n     /**\n@@ -118,7 +117,7 @@ public interface DynRealmService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n }"},{"sha":"416bcdca3441d2e8a83bd4063c02b8f7eabb014c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -33,12 +33,12 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -53,7 +53,7 @@ public interface ExecutableService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}/executions\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<ExecTO> listExecutions(@BeanParam ExecQuery query);\n \n     /**\n@@ -64,7 +64,7 @@ public interface ExecutableService extends JAXRSService {\n      */\n     @GET\n     @Path(\"executions/recent\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n \n     /**\n@@ -76,7 +76,7 @@ public interface ExecutableService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"executions/{executionKey}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void deleteExecution(@NotNull @PathParam(\"executionKey\") String executionKey);\n \n     /**\n@@ -87,7 +87,7 @@ public interface ExecutableService extends JAXRSService {\n      */\n     @DELETE\n     @Path(\"{key}/executions\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);\n \n     /**\n@@ -98,7 +98,7 @@ public interface ExecutableService extends JAXRSService {\n      */\n     @POST\n     @Path(\"{key}/execute\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ExecTO execute(@BeanParam ExecuteQuery query);\n \n     /**\n@@ -109,7 +109,7 @@ public interface ExecutableService extends JAXRSService {\n      */\n     @GET\n     @Path(\"jobs/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     JobTO getJob(@PathParam(\"key\") String key);\n \n     /**\n@@ -119,7 +119,7 @@ public interface ExecutableService extends JAXRSService {\n      */\n     @GET\n     @Path(\"jobs\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<JobTO> listJobs();\n \n     /**"},{"sha":"8b7d89360e68966989ce8c7486376808c441d48f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -41,7 +41,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -109,8 +108,8 @@ public interface GroupService extends AnyService<GroupTO> {\n                         description = \"Allows the server to inform the \"\n                         + \"client about the fact that a specified preference was applied\") }))\n     @POST\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull GroupTO groupTO);\n \n     /**\n@@ -152,8 +151,8 @@ public interface GroupService extends AnyService<GroupTO> {\n                 + \" date of the entity\") })\n     @PATCH\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(@NotNull GroupPatch groupPatch);\n \n     /**\n@@ -195,8 +194,8 @@ public interface GroupService extends AnyService<GroupTO> {\n                 + \" date of the entity\") })\n     @PUT\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(@NotNull GroupTO groupTO);\n \n     /**\n@@ -206,7 +205,7 @@ public interface GroupService extends AnyService<GroupTO> {\n      */\n     @GET\n     @Path(\"own\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<GroupTO> own();\n \n     /**\n@@ -218,7 +217,7 @@ public interface GroupService extends AnyService<GroupTO> {\n      */\n     @POST\n     @Path(\"{key}/members/{actionType}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ExecTO bulkMembersAction(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"actionType\") BulkMembersActionType actionType);"},{"sha":"912b4ab53c5b4ec6217924b1f78a4d28848f6d1a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -36,9 +36,9 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for implementations.\n@@ -58,7 +58,7 @@ public interface ImplementationService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{type}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ImplementationTO> list(@NotNull @PathParam(\"type\") ImplementationType type);\n \n     /**\n@@ -70,7 +70,7 @@ public interface ImplementationService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{type}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ImplementationTO read(@NotNull @PathParam(\"type\") ImplementationType type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -85,8 +85,8 @@ public interface ImplementationService extends JAXRSService {\n             @Schema(type = \"string\"))\n     @POST\n     @Path(\"{type}/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull ImplementationTO implementationTO);\n \n     /**\n@@ -101,8 +101,8 @@ public interface ImplementationService extends JAXRSService {\n             @Schema(type = \"string\"))\n     @PUT\n     @Path(\"{type}/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(@NotNull ImplementationTO implementationTO);\n \n     /**\n@@ -114,7 +114,7 @@ public interface ImplementationService extends JAXRSService {\n      */\n     @DELETE\n     @Path(\"{type}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response delete(@NotNull @PathParam(\"type\") ImplementationType type, @NotNull @PathParam(\"key\") String key);\n \n }"},{"sha":"6be90200a499ce7aea5107bcbcb6f6b5ffcd4522","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -36,12 +36,12 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.log.EventCategoryTO;\n import org.apache.syncope.common.lib.log.LogAppender;\n import org.apache.syncope.common.lib.log.LogStatementTO;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for logging and auditing.\n@@ -60,7 +60,7 @@ public interface LoggerService extends JAXRSService {\n      */\n     @GET\n     @Path(\"memoryAppenders\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<LogAppender> memoryAppenders();\n \n     /**\n@@ -71,7 +71,7 @@ public interface LoggerService extends JAXRSService {\n      */\n     @GET\n     @Path(\"memoryAppenders/{memoryAppender}/lastLogStatements\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<LogStatementTO> getLastLogStatements(@NotNull @PathParam(\"memoryAppender\") String memoryAppender);\n \n     /**\n@@ -81,7 +81,7 @@ public interface LoggerService extends JAXRSService {\n      */\n     @GET\n     @Path(\"events\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<EventCategoryTO> events();\n \n     /**\n@@ -93,7 +93,7 @@ public interface LoggerService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{type}/{name}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     LoggerTO read(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") final String name);\n \n     /**\n@@ -104,7 +104,7 @@ public interface LoggerService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{type}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<LoggerTO> list(@NotNull @PathParam(\"type\") LoggerType type);\n \n     /**\n@@ -119,8 +119,8 @@ public interface LoggerService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{type}/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull @PathParam(\"type\") LoggerType type, @NotNull LoggerTO logger);\n \n     /**\n@@ -133,7 +133,7 @@ public interface LoggerService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{type}/{name}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);\n \n }"},{"sha":"2757fe405bf53aa143ef01b93fffa57a912078df","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FMailTemplateService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FMailTemplateService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FMailTemplateService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -39,7 +39,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -60,7 +59,7 @@ public interface MailTemplateService extends JAXRSService {\n      * @return list of all mail templates.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<MailTemplateTO> list();\n \n     /**\n@@ -79,8 +78,8 @@ public interface MailTemplateService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull MailTemplateTO mailTemplateTO);\n \n     /**\n@@ -91,7 +90,7 @@ public interface MailTemplateService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     MailTemplateTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -103,7 +102,7 @@ public interface MailTemplateService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -130,7 +129,7 @@ Response getFormat(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}/{format}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void setFormat(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"format\") MailTemplateFormat format,\n@@ -146,7 +145,7 @@ void setFormat(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}/{format}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void removeFormat(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"format\") MailTemplateFormat format);"},{"sha":"06fc7a4ec1e4bdb8cb5923548ae0cef223961ec4","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -41,7 +41,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.types.JobAction;\n@@ -65,7 +64,7 @@ public interface NotificationService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     NotificationTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -74,7 +73,7 @@ public interface NotificationService extends JAXRSService {\n      * @return list of all notifications.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<NotificationTO> list();\n \n     /**\n@@ -93,8 +92,8 @@ public interface NotificationService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull NotificationTO notificationTO);\n \n     /**\n@@ -108,8 +107,8 @@ public interface NotificationService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull NotificationTO notificationTO);\n \n     /**\n@@ -121,7 +120,7 @@ public interface NotificationService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -131,7 +130,7 @@ public interface NotificationService extends JAXRSService {\n      */\n     @GET\n     @Path(\"job\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     JobTO getJob();\n \n     /**\n@@ -143,6 +142,6 @@ public interface NotificationService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"job\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void actionJob(@QueryParam(\"action\") JobAction action);\n }"},{"sha":"3fbb4ad149dd11730538336938efddf8f771909c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -40,7 +40,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -65,7 +64,7 @@ public interface PolicyService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{type}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     <T extends PolicyTO> T read(@NotNull @PathParam(\"type\") PolicyType type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -77,7 +76,7 @@ public interface PolicyService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{type}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     <T extends PolicyTO> List<T> list(@NotNull @PathParam(\"type\") PolicyType type);\n \n     /**\n@@ -98,8 +97,8 @@ public interface PolicyService extends JAXRSService {\n                         description = \"URL of the entity created\") }))\n     @POST\n     @Path(\"{type}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull @PathParam(\"type\") PolicyType type, @NotNull PolicyTO policyTO);\n \n     /**\n@@ -114,8 +113,8 @@ public interface PolicyService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{type}/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull @PathParam(\"type\") PolicyType type, @NotNull PolicyTO policyTO);\n \n     /**\n@@ -128,7 +127,7 @@ public interface PolicyService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{type}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"type\") PolicyType type, @NotNull @PathParam(\"key\") String key);\n \n }"},{"sha":"c7617a965a456945a538f5bcedb982156009a03f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -41,7 +41,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -62,7 +61,7 @@ public interface RealmService extends JAXRSService {\n      * @return list of all realms.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<RealmTO> list();\n \n     /**\n@@ -73,7 +72,7 @@ public interface RealmService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{fullPath:.*}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<RealmTO> list(@NotNull @PathParam(\"fullPath\") String fullPath);\n \n     /**\n@@ -112,8 +111,8 @@ public interface RealmService extends JAXRSService {\n                         + \"client about the fact that a specified preference was applied\") }))\n     @POST\n     @Path(\"{parentPath:.*}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull @PathParam(\"parentPath\") String parentPath, @NotNull RealmTO realmTO);\n \n     /**\n@@ -147,8 +146,8 @@ public interface RealmService extends JAXRSService {\n                         + \"client about the fact that a specified preference was applied\")) })\n     @PUT\n     @Path(\"{fullPath:.*}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(@NotNull RealmTO realmTO);\n \n     /**\n@@ -180,6 +179,6 @@ public interface RealmService extends JAXRSService {\n                         + \"client about the fact that a specified preference was applied\")) })\n     @DELETE\n     @Path(\"{fullPath:.*}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response delete(@NotNull @PathParam(\"fullPath\") String fullPath);\n }"},{"sha":"68e4179f8616397b0dcd008f113a7336f3e55e50","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -31,11 +31,11 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for tasks.\n@@ -58,7 +58,7 @@ public interface ReconciliationService extends JAXRSService {\n      * @return reconciliation status\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ReconStatus status(\n             @NotNull @QueryParam(\"anyTypeKind\") AnyTypeKind anyTypeKind,\n             @NotNull @QueryParam(\"anyKey\") String anyKey,\n@@ -77,8 +77,8 @@ ReconStatus status(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"push\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void push(\n             @NotNull @QueryParam(\"anyTypeKind\") AnyTypeKind anyTypeKind,\n             @NotNull @QueryParam(\"anyKey\") String anyKey,\n@@ -98,8 +98,8 @@ void push(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"pull\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void pull(\n             @NotNull @QueryParam(\"anyTypeKind\") AnyTypeKind anyTypeKind,\n             @NotNull @QueryParam(\"anyKey\") String anyKey,"},{"sha":"245d6a360ac4a76b354546c05c1c03b3b3f3066c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRelationshipTypeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRelationshipTypeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRelationshipTypeService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -40,7 +40,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -60,7 +59,7 @@ public interface RelationshipTypeService extends JAXRSService {\n      * @return list of all relationshipTypes.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<RelationshipTypeTO> list();\n \n     /**\n@@ -71,7 +70,7 @@ public interface RelationshipTypeService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     RelationshipTypeTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -90,8 +89,8 @@ public interface RelationshipTypeService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull RelationshipTypeTO relationshipTypeTO);\n \n     /**\n@@ -105,8 +104,8 @@ public interface RelationshipTypeService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull RelationshipTypeTO relationshipTypeTO);\n \n     /**\n@@ -118,6 +117,6 @@ public interface RelationshipTypeService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"2e1fe92a08f2c810f64d5443dec189b019419e57","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RemediationService.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -41,7 +41,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -67,7 +66,7 @@ public interface RemediationService extends JAXRSService {\n      * @return list of all remediations.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<RemediationTO> list(@BeanParam RemediationQuery query);\n \n     /**\n@@ -78,7 +77,7 @@ public interface RemediationService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     RemediationTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -89,7 +88,7 @@ public interface RemediationService extends JAXRSService {\n      */\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response delete(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -130,8 +129,8 @@ public interface RemediationService extends JAXRSService {\n                         + \"client about the fact that a specified preference was applied\") }))\n     @POST\n     @Path(\"{remediationKey}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response remedy(@NotNull @PathParam(\"remediationKey\") String remediationKey, @NotNull AnyTO anyTO);\n \n     /**\n@@ -174,8 +173,8 @@ public interface RemediationService extends JAXRSService {\n                 + \" date of the entity\") })\n     @PATCH\n     @Path(\"{remediationKey}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response remedy(@NotNull @PathParam(\"remediationKey\") String remediationKey, @NotNull AnyPatch anyPatch);\n \n     /**\n@@ -216,7 +215,7 @@ public interface RemediationService extends JAXRSService {\n                 + \" date of the entity\") })\n     @DELETE\n     @Path(\"{remediationKey}/{anyKey}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response remedy(\n             @NotNull @PathParam(\"remediationKey\") String remediationKey,\n             @NotNull @PathParam(\"anyKey\") String anyKey);"},{"sha":"9f1bf2966564c7ab7d21eae78ea645aaa85b65b1","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -41,7 +41,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -64,7 +63,7 @@ public interface ReportService extends ExecutableService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ReportTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -73,7 +72,7 @@ public interface ReportService extends ExecutableService {\n      * @return paged list of existing reports matching the given query\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ReportTO> list();\n \n     /**\n@@ -92,8 +91,8 @@ public interface ReportService extends ExecutableService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull ReportTO reportTO);\n \n     /**\n@@ -107,8 +106,8 @@ public interface ReportService extends ExecutableService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull ReportTO reportTO);\n \n     /**\n@@ -120,7 +119,7 @@ public interface ReportService extends ExecutableService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -132,7 +131,7 @@ public interface ReportService extends ExecutableService {\n      */\n     @GET\n     @Path(\"executions/{executionKey}/stream\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response exportExecutionResult(\n             @NotNull @PathParam(\"executionKey\") String executionKey,\n             @QueryParam(\"format\") ReportExecExportFormat fmt);"},{"sha":"37474e9fc2dadeb06bdd1828f8cf7e171308ac1d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportTemplateService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportTemplateService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportTemplateService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -39,7 +39,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -60,7 +59,7 @@ public interface ReportTemplateService extends JAXRSService {\n      * @return list of all report templates.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ReportTemplateTO> list();\n \n     /**\n@@ -79,7 +78,7 @@ public interface ReportTemplateService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull ReportTemplateTO reportTemplateTO);\n \n     /**\n@@ -90,7 +89,7 @@ public interface ReportTemplateService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ReportTemplateTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -102,7 +101,7 @@ public interface ReportTemplateService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n     /**"},{"sha":"1024f6ef0315964c1d15f657d4484bb23922b3e4","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceHistoryService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceHistoryService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceHistoryService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -32,8 +32,8 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for resource configuration versioning.\n@@ -53,7 +53,7 @@ public interface ResourceHistoryService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{resourceKey}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ResourceHistoryConfTO> list(@NotNull @PathParam(\"resourceKey\") String resourceKey);\n \n     /**\n@@ -65,7 +65,7 @@ public interface ResourceHistoryService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void restore(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -77,6 +77,6 @@ public interface ResourceHistoryService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"6aaa3a82a862f96d13098da015a913624893d168","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -41,7 +41,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.ResourceDeassociationPatch;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -71,7 +70,7 @@ public interface ResourceService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}/{anyTypeKey}/{anyKey}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ConnObjectTO readConnObject(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n@@ -88,7 +87,7 @@ ConnObjectTO readConnObject(\n      */\n     @GET\n     @Path(\"{key}/{anyTypeKey}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedConnObjectTOResult listConnObjects(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n@@ -102,7 +101,7 @@ PagedConnObjectTOResult listConnObjects(\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ResourceTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -111,7 +110,7 @@ PagedConnObjectTOResult listConnObjects(\n      * @return list of all resources\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<ResourceTO> list();\n \n     /**\n@@ -130,8 +129,8 @@ PagedConnObjectTOResult listConnObjects(\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull ResourceTO resourceTO);\n \n     /**\n@@ -145,8 +144,8 @@ PagedConnObjectTOResult listConnObjects(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull ResourceTO resourceTO);\n \n     /**\n@@ -160,7 +159,7 @@ PagedConnObjectTOResult listConnObjects(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"{key}/{anyTypeKey}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void setLatestSyncToken(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey);\n@@ -175,7 +174,7 @@ void setLatestSyncToken(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}/{anyTypeKey}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void removeSyncToken(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey);\n@@ -189,8 +188,8 @@ void removeSyncToken(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -202,8 +201,8 @@ void removeSyncToken(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"check\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void check(@NotNull ResourceTO resourceTO);\n \n     /**\n@@ -220,7 +219,7 @@ void removeSyncToken(\n             @Schema(implementation = ResourceDeassociationAction.class))\n     @POST\n     @Path(\"{key}/bulkDeassociation/{anyTypeKey}/{action}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     BulkActionResult bulkDeassociation(@NotNull ResourceDeassociationPatch patch);\n }"},{"sha":"4db8fb79d47e279d23896f5b47ddf9b0c50cecea","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -41,7 +41,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -61,7 +60,7 @@ public interface RoleService extends JAXRSService {\n      * @return list of all roles.\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<RoleTO> list();\n \n     /**\n@@ -72,7 +71,7 @@ public interface RoleService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     RoleTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -91,8 +90,8 @@ public interface RoleService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull RoleTO roleTO);\n \n     /**\n@@ -106,8 +105,8 @@ public interface RoleService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull RoleTO roleTO);\n \n     /**\n@@ -119,7 +118,7 @@ public interface RoleService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -144,7 +143,7 @@ public interface RoleService extends JAXRSService {\n     @PUT\n     @Path(\"{key}/consoleLayout\")\n     @Consumes({ MediaType.APPLICATION_JSON })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void setConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key, InputStream consoleLayoutInfoIn);\n \n     /**\n@@ -156,6 +155,6 @@ public interface RoleService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}/consoleLayout\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void removeConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"96995200e286af8473227b6e8b13d67248222c92","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -41,7 +41,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -67,7 +66,7 @@ public interface SchemaService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{type}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     <T extends SchemaTO> List<T> search(@BeanParam SchemaQuery query);\n \n     /**\n@@ -80,7 +79,7 @@ public interface SchemaService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{type}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     <T extends SchemaTO> T read(\n             @NotNull @PathParam(\"type\") SchemaType type, @NotNull @PathParam(\"key\") String key);\n \n@@ -102,8 +101,8 @@ <T extends SchemaTO> T read(\n                         description = \"URL of the entity created\") }))\n     @POST\n     @Path(\"{type}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull @PathParam(\"type\") SchemaType type, @NotNull SchemaTO schemaTO);\n \n     /**\n@@ -118,8 +117,8 @@ <T extends SchemaTO> T read(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{type}/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull @PathParam(\"type\") SchemaType type, @NotNull SchemaTO schemaTO);\n \n     /**\n@@ -132,6 +131,6 @@ <T extends SchemaTO> T read(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{type}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"type\") SchemaType type, @NotNull @PathParam(\"key\") String key);\n }"},{"sha":"3eb45a4e60c5e2fe8320da1e5ec9ea0023dbd61d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -40,7 +40,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -60,7 +59,7 @@ public interface SecurityQuestionService extends JAXRSService {\n      * @return list of all security questions\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<SecurityQuestionTO> list();\n \n     /**\n@@ -71,7 +70,7 @@ public interface SecurityQuestionService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     SecurityQuestionTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -90,8 +89,8 @@ public interface SecurityQuestionService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull SecurityQuestionTO securityQuestionTO);\n \n     /**\n@@ -105,8 +104,8 @@ public interface SecurityQuestionService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull SecurityQuestionTO securityQuestionTO);\n \n     /**\n@@ -118,7 +117,7 @@ public interface SecurityQuestionService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -129,7 +128,7 @@ public interface SecurityQuestionService extends JAXRSService {\n      */\n     @GET\n     @Path(\"byUser/{username}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     SecurityQuestionTO readByUser(@NotNull @PathParam(\"username\") String username);\n }"},{"sha":"26332e83520cdb75567aab9b52a7d1f483d971d3","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java","status":"modified","additions":69,"deletions":7,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -18,26 +18,36 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.io.InputStream;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * General info about this Apache Syncope deployment.\n@@ -58,7 +68,7 @@ public interface SyncopeService extends JAXRSService {\n      */\n     @GET\n     @Path(\"/platform\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PlatformInfo platform();\n \n     /**\n@@ -68,19 +78,71 @@ public interface SyncopeService extends JAXRSService {\n      */\n     @GET\n     @Path(\"/system\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     SystemInfo system();\n \n-    /** *\n+    /**\n      * Provides some numbers about the managed entities (users, groups, any objects...).\n      *\n      * @return some numbers about the managed entities (users, groups, any objects...)\n      */\n     @GET\n     @Path(\"/numbers\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     NumbersInfo numbers();\n \n+    /**\n+     * Requests for batch execution.\n+     *\n+     * @param input batch request\n+     * @return batch results returned as Response entity, in case no 'Prefer: respond-async' was specified\n+     */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference to process the batch request asynchronously\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"\", allowableValues = { \"respond-async\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"Batch request processed, results returned as Response entity, \"\n+                + \"in case no 'Prefer: respond-async' was specified\"),\n+        @ApiResponse(responseCode = \"202\",\n+                description = \"Batch accepted for asynchronous processing, \"\n+                + \"in case 'Prefer: respond-async' was specified\", headers = {\n+                    @Header(name = HttpHeaders.LOCATION, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"URL to poll in order to get the results of the requested batch processing\"),\n+                    @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"Allows the server to inform the \"\n+                            + \"client about the fact that a specified preference was applied\") }) })\n+    @POST\n+    @Path(\"/batch\")\n+    @Consumes(RESTHeaders.MULTIPART_MIXED)\n+    @Produces(RESTHeaders.MULTIPART_MIXED)\n+    Response batch(InputStream input);\n+\n+    /**\n+     * Gets batch results, in case asynchronous was requested.\n+     *\n+     * @return batch results returned as Response entity\n+     */\n+    @GET\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"Batch results available, returned as Response entity\"),\n+        @ApiResponse(responseCode = \"202\",\n+                description = \"Batch results not yet available, retry later\", headers = {\n+                    @Header(name = HttpHeaders.LOCATION, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"URL to poll in order to get the results of the requested batch processing\"),\n+                    @Header(name = HttpHeaders.RETRY_AFTER, schema =\n+                            @Schema(type = \"integer\"),\n+                            description = \"seconds after which attempt again to get batch results\") }),\n+        @ApiResponse(responseCode = \"404\", description = \"No batch process was found for the provided boundary\") })\n+    @Path(\"/batch\")\n+    @Produces(RESTHeaders.MULTIPART_MIXED)\n+    Response batch();\n+\n     /**\n      * Returns the list of Groups, according to provided paging instructions, assignable to Users and Any Objects of\n      * the provided Realm.\n@@ -94,7 +156,7 @@ public interface SyncopeService extends JAXRSService {\n      */\n     @POST\n     @Path(\"/assignableGroups/{realm:.*}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<GroupTO> searchAssignableGroups(\n             @NotNull @PathParam(\"realm\") String realm,\n             @QueryParam(\"term\") String term,\n@@ -109,6 +171,6 @@ PagedResult<GroupTO> searchAssignableGroups(\n      */\n     @GET\n     @Path(\"/userTypeExtension/{groupName}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     TypeExtensionTO readUserTypeExtension(@NotNull @PathParam(\"groupName\") String groupName);\n }"},{"sha":"70f59350dee95fc202145004ea8470b5e8a49f0e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -42,7 +42,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -73,7 +72,7 @@ public interface TaskService extends ExecutableService {\n      */\n     @GET\n     @Path(\"{type}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     <T extends TaskTO> T read(\n             @NotNull @PathParam(\"type\") TaskType type,\n             @NotNull @PathParam(\"key\") String key,\n@@ -88,7 +87,7 @@ <T extends TaskTO> T read(\n      */\n     @GET\n     @Path(\"{type}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     <T extends TaskTO> PagedResult<T> search(@BeanParam TaskQuery query);\n \n     /**\n@@ -109,8 +108,8 @@ <T extends TaskTO> T read(\n                         description = \"URL of the entity created\") }))\n     @POST\n     @Path(\"{type}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull @PathParam(\"type\") TaskType type, @NotNull SchedTaskTO taskTO);\n \n     /**\n@@ -125,8 +124,8 @@ <T extends TaskTO> T read(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{type}/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull @PathParam(\"type\") TaskType type, @NotNull SchedTaskTO taskTO);\n \n     /**\n@@ -139,7 +138,7 @@ <T extends TaskTO> T read(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{type}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"type\") TaskType type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -150,7 +149,7 @@ <T extends TaskTO> T read(\n      */\n     @POST\n     @Path(\"bulk\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     BulkActionResult bulk(@NotNull BulkAction bulkAction);\n }"},{"sha":"b655e8b5149024bf1280dd12c031dde0ef4749ad","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -42,7 +42,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -77,7 +76,7 @@ public interface UserSelfService extends JAXRSService {\n                         description = \"List of entitlements owned by the calling user\")\n             }))\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response read();\n \n     /**\n@@ -110,8 +109,8 @@ public interface UserSelfService extends JAXRSService {\n                         description = \"Allows the server to inform the \"\n                         + \"client about the fact that a specified preference was applied\") }))\n     @POST\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(@NotNull UserTO userTO,\n             @DefaultValue(\"true\") @QueryParam(\"storePassword\") boolean storePassword);\n \n@@ -144,8 +143,8 @@ Response create(@NotNull UserTO userTO,\n                         + \"client about the fact that a specified preference was applied\")) })\n     @PATCH\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(@NotNull UserPatch patch);\n \n     /**\n@@ -177,8 +176,8 @@ Response create(@NotNull UserTO userTO,\n                         + \"client about the fact that a specified preference was applied\")) })\n     @PUT\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(@NotNull UserTO user);\n \n     /**\n@@ -210,8 +209,8 @@ Response create(@NotNull UserTO userTO,\n                         + \"client about the fact that a specified preference was applied\")) })\n     @POST\n     @Path(\"{key}/status\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response status(@NotNull StatusPatch statusPatch);\n \n     /**\n@@ -223,7 +222,7 @@ Response create(@NotNull UserTO userTO,\n         @SecurityRequirement(name = \"BasicAuthentication\"),\n         @SecurityRequirement(name = \"Bearer\") })\n     @DELETE\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response delete();\n \n     /**\n@@ -238,7 +237,7 @@ Response create(@NotNull UserTO userTO,\n         @SecurityRequirement(name = \"Bearer\") })\n     @POST\n     @Path(\"mustChangePassword\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response mustChangePassword(String password);\n \n     /**\n@@ -253,7 +252,7 @@ Response create(@NotNull UserTO userTO,\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"requestPasswordReset\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void requestPasswordReset(@NotNull @QueryParam(\"username\") String username, String securityAnswer);\n \n     /**\n@@ -269,6 +268,6 @@ Response create(@NotNull UserTO userTO,\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"confirmPasswordReset\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void confirmPasswordReset(@NotNull @QueryParam(\"token\") String token, String password);\n }"},{"sha":"0274acd0b32453dec59ecc003737c321ee7116f5","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -40,7 +40,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -108,8 +107,8 @@ public interface UserService extends AnyService<UserTO> {\n                         description = \"Allows the server to inform the \"\n                         + \"client about the fact that a specified preference was applied\") }))\n     @POST\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(\n             @NotNull UserTO userTO,\n             @DefaultValue(\"true\") @QueryParam(\"storePassword\") boolean storePassword);\n@@ -153,8 +152,8 @@ Response create(\n                 + \" date of the entity\") })\n     @PATCH\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(@NotNull UserPatch userPatch);\n \n     /**\n@@ -197,8 +196,8 @@ Response create(\n                 + \" date of the entity\") })\n     @PUT\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response update(@NotNull UserTO userTO);\n \n     /**\n@@ -241,7 +240,7 @@ Response create(\n                 + \" date of the entity\") })\n     @POST\n     @Path(\"{key}/status\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response status(@NotNull StatusPatch statusPatch);\n }"},{"sha":"c38746f9ca3feee0fb3c7d4419d5788b5101cb6f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -31,11 +31,11 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.to.WorkflowTaskTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.WorkflowFormQuery;\n \n /**\n@@ -56,7 +56,7 @@ public interface UserWorkflowService extends JAXRSService {\n      */\n     @GET\n     @Path(\"forms\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<WorkflowFormTO> getForms(@BeanParam WorkflowFormQuery query);\n \n     /**\n@@ -67,7 +67,7 @@ public interface UserWorkflowService extends JAXRSService {\n      */\n     @GET\n     @Path(\"forms/{userKey}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     WorkflowFormTO getFormForUser(@NotNull @PathParam(\"userKey\") String userKey);\n \n     /**\n@@ -78,7 +78,7 @@ public interface UserWorkflowService extends JAXRSService {\n      */\n     @POST\n     @Path(\"forms/{taskId}/claim\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     WorkflowFormTO claimForm(@NotNull @PathParam(\"taskId\") String taskId);\n \n     /**\n@@ -89,8 +89,8 @@ public interface UserWorkflowService extends JAXRSService {\n      */\n     @POST\n     @Path(\"forms\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     UserTO submitForm(@NotNull WorkflowFormTO form);\n \n     /**\n@@ -112,7 +112,7 @@ public interface UserWorkflowService extends JAXRSService {\n      */\n     @POST\n     @Path(\"tasks/{taskId}/execute\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     UserTO executeTask(@NotNull @PathParam(\"taskId\") String taskId, @NotNull UserTO userTO);\n }"},{"sha":"25e3f7adcbc5888ad5a4f693b748a698c63441be","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -34,7 +34,6 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.WorkflowDefinitionTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -56,7 +55,7 @@ public interface WorkflowService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{anyType}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<WorkflowDefinitionTO> list(@NotNull @PathParam(\"anyType\") String anyType);\n \n     /**\n@@ -68,7 +67,7 @@ public interface WorkflowService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{anyType}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response get(\n             @NotNull @PathParam(\"anyType\") String anyType,\n             @NotNull @PathParam(\"key\") String key);\n@@ -98,8 +97,8 @@ Response exportDiagram(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{anyType}/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void set(\n             @NotNull @PathParam(\"anyType\") String anyType,\n             @NotNull @PathParam(\"key\") String key,\n@@ -115,7 +114,7 @@ void set(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{anyType}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(\n             @NotNull @PathParam(\"anyType\") String anyType,\n             @NotNull @PathParam(\"key\") String key);"},{"sha":"b5e11660275f281962851b13e6300e8c6afe3041","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/BatchDAO.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FBatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FBatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FBatchDAO.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import org.apache.syncope.core.persistence.api.entity.Batch;\n+\n+public interface BatchDAO extends DAO<Batch> {\n+\n+    Batch find(String key);\n+\n+    Batch save(Batch batch);\n+\n+    void delete(String key);\n+\n+    int deleteExpired();\n+}"},{"sha":"86fa647545abd446d7fd1ed3515014e8599d6985","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Batch.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FBatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FBatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FBatch.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.Date;\n+\n+public interface Batch extends ProvidedKeyEntity {\n+\n+    Date getExpiryTime();\n+\n+    void setExpiryTime(Date expiryTime);\n+\n+    String getResults();\n+\n+    void setResults(String results);\n+}"},{"sha":"7470c5a3489366a5f3989e5d57446724edfa97e6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPABatchDAO.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.Date;\n+import javax.persistence.Query;\n+import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n+import org.apache.syncope.core.persistence.api.entity.Batch;\n+import org.apache.syncope.core.persistence.jpa.entity.JPABatch;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(rollbackFor = Throwable.class)\n+@Repository\n+public class JPABatchDAO extends AbstractDAO<Batch> implements BatchDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Batch find(final String key) {\n+        return entityManager().find(JPABatch.class, key);\n+    }\n+\n+    @Override\n+    public Batch save(final Batch batch) {\n+        return entityManager().merge(batch);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        Batch batch = find(key);\n+        if (batch == null) {\n+            return;\n+        }\n+\n+        entityManager().remove(batch);\n+    }\n+\n+    @Override\n+    public int deleteExpired() {\n+        Query query = entityManager().createQuery(\n+                \"DELETE FROM \" + JPABatch.class.getSimpleName() + \" e \"\n+                + \"WHERE e.expiryTime < :now\");\n+        query.setParameter(\"now\", new Date());\n+        return query.executeUpdate();\n+    }\n+}"},{"sha":"26c068c37aea8f1488786daddd85dce757111754","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPABatch.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPABatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPABatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPABatch.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import org.apache.syncope.core.persistence.api.entity.Batch;\n+\n+@Entity\n+@Table(name = JPABatch.TABLE)\n+public class JPABatch extends AbstractProvidedKeyEntity implements Batch {\n+\n+    private static final long serialVersionUID = 468423182798249255L;\n+\n+    public static final String TABLE = \"SyncopeBatch\";\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date expiryTime;\n+\n+    @Lob\n+    private String results;\n+\n+    @Override\n+    public Date getExpiryTime() {\n+        return expiryTime == null\n+                ? null\n+                : new Date(expiryTime.getTime());\n+    }\n+\n+    @Override\n+    public void setExpiryTime(final Date expiryTime) {\n+        if (expiryTime == null) {\n+            this.expiryTime = null;\n+        } else {\n+            this.expiryTime = new Date(expiryTime.getTime());\n+        }\n+    }\n+\n+    @Override\n+    public String getResults() {\n+        return results;\n+    }\n+\n+    @Override\n+    public void setResults(final String results) {\n+        this.results = results;\n+    }\n+}"},{"sha":"1fa7787bda009fa1427c49bf7d668b5902169887","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.Batch;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n@@ -295,6 +296,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAImplementation();\n         } else if (reference.equals(Remediation.class)) {\n             result = (E) new JPARemediation();\n+        } else if (reference.equals(Batch.class)) {\n+            result = (E) new JPABatch();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"123e5002d613cd17ef582d81f5924479c9823fd4","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -194,6 +194,10 @@ under the License.\n                   body=\"org.apache.syncope.core.provisioning.java.job.ExpiredAccessTokenCleanup\"/>\n   <Task DTYPE=\"SchedTask\" id=\"89de5014-e3f5-4462-84d8-d97575740baf\" name=\"Access Token Cleanup Task\"  active=\"1\"\n         jobDelegate_id=\"ExpiredAccessTokenCleanup\" cronExpression=\"0 0/5 * * * ?\"/>\n+  <Implementation id=\"ExpiredBatchCleanup\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.job.ExpiredBatchCleanup\"/>\n+  <Task DTYPE=\"SchedTask\" id=\"8ea0ea51-ce08-4fe3-a0c8-c281b31b5893\" name=\"Access Token Cleanup Task\"  active=\"1\"\n+        jobDelegate_id=\"ExpiredBatchCleanup\" cronExpression=\"0 0/5 * * * ?\"/>\n \n   <!-- Password reset notifications -->\n   <MailTemplate id=\"requestPasswordReset\""},{"sha":"f505fbe79dde748db06d77e0ffcd75fee3ff1e79","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -43,7 +43,7 @@ public void findAll() {\n         List<Implementation> implementations = implementationDAO.findAll();\n         assertFalse(implementations.isEmpty());\n \n-        assertEquals(18, implementations.size());\n+        assertEquals(19, implementations.size());\n \n         implementations = implementationDAO.find(ImplementationType.PULL_ACTIONS);\n         assertEquals(1, implementations.size());\n@@ -52,7 +52,7 @@ public void findAll() {\n         assertEquals(1, implementations.size());\n \n         implementations = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE);\n-        assertEquals(5, implementations.size());\n+        assertEquals(6, implementations.size());\n \n         implementations = implementationDAO.find(ImplementationType.REPORTLET);\n         assertEquals(2, implementations.size());"},{"sha":"a912d420ce800869306984d5a6235ee13fffee1d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -97,7 +97,7 @@ public void findPaginated() {\n     public void findAll() {\n         assertEquals(5, taskDAO.findAll(TaskType.PROPAGATION).size());\n         assertEquals(1, taskDAO.findAll(TaskType.NOTIFICATION).size());\n-        assertEquals(3, taskDAO.findAll(TaskType.SCHEDULED).size());\n+        assertEquals(4, taskDAO.findAll(TaskType.SCHEDULED).size());\n         assertEquals(10, taskDAO.findAll(TaskType.PULL).size());\n         assertEquals(11, taskDAO.findAll(TaskType.PUSH).size());\n     }"},{"sha":"1f0fd4470324937c72b55fcf98ff1938edb8e4ca","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -1333,6 +1333,10 @@ under the License.\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"30cfd653-257b-495f-8665-281281dbcb3d\" name=\"Scripted SQL\" resource_id=\"resource-db-scripted\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" pullMode=\"INCREMENTAL\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n+  <Implementation id=\"ExpiredBatchCleanup\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.job.ExpiredBatchCleanup\"/>\n+  <Task DTYPE=\"SchedTask\" id=\"8ea0ea51-ce08-4fe3-a0c8-c281b31b5893\" name=\"Access Token Cleanup Task\"  active=\"1\"\n+        jobDelegate_id=\"ExpiredBatchCleanup\" cronExpression=\"0 0/5 * * * ?\"/>\n \n   <MailTemplate id=\"requestPasswordReset\"\n                 textTemplate=\"Hi,"},{"sha":"351d21d87bf09f979d830dfdad41d029cfc2efb2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -87,9 +87,9 @@ public Pair<String, Date> generateJWT(\n         jwtClaims.setIssuer(jwtIssuer);\n         jwtClaims.setExpiryTime(expiryTime);\n         jwtClaims.setNotBefore(currentTime);\n-        for (Map.Entry<String, Object> entry : claims.entrySet()) {\n-            jwtClaims.setClaim(entry.getKey(), entry.getValue());\n-        }\n+        claims.forEach((key, value) -> {\n+            jwtClaims.setClaim(key, value);\n+        });\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, jwsSignatureProvider.getAlgorithm());\n         JwtToken token = new JwtToken(jwsHeaders, jwtClaims);"},{"sha":"9d8e7bc82e74a92c708ec82b6276d42c6f989638","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ExpiredBatchCleanup.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FExpiredBatchCleanup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FExpiredBatchCleanup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FExpiredBatchCleanup.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class ExpiredBatchCleanup extends AbstractSchedTaskJobDelegate {\n+\n+    @Autowired\n+    private BatchDAO batchDAO;\n+\n+    @Override\n+    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n+        if (!dryRun) {\n+            int deleted = batchDAO.deleteExpired();\n+            LOG.debug(\"Successfully deleted {} expired batch requests\", deleted);\n+        }\n+\n+        return \"SUCCESS\";\n+    }\n+}"},{"sha":"d56efe07205ab1a00810a8d2ae5d0e39174f8491","filename":"core/rest-cxf/pom.xml","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fpom.xml?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -154,6 +154,17 @@ under the License.\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>\n       </plugin>\n+      \n+      <plugin>\n+        <groupId>org.gaul</groupId>\n+        <artifactId>modernizer-maven-plugin</artifactId>\n+        <configuration>\n+          <exclusions>\n+            <!-- required by HttpServletRequest's override in BatchItemRequest -->\n+            java/lang/StringBuffer.\"&lt;init&gt;\":(Ljava/lang/String;)V\n+          </exclusions>\n+        </configuration>\n+      </plugin>\n     </plugins>\n \n     <resources>"},{"sha":"cc1cd224047ae7383819325a7c8ac5110096cfa8","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemRequest.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.batch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.stream.Collectors;\n+import javax.servlet.ReadListener;\n+import javax.servlet.ServletInputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.ws.rs.core.HttpHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n+import org.springframework.http.MediaType;\n+\n+public class BatchItemRequest extends HttpServletRequestWrapper {\n+\n+    private final String basePath;\n+\n+    private final BatchRequestItem batchItem;\n+\n+    private final ServletInputStream inputStream;\n+\n+    public BatchItemRequest(\n+            final String basePath,\n+            final HttpServletRequest request,\n+            final BatchRequestItem batchItem) {\n+\n+        super(request);\n+        this.basePath = basePath;\n+        this.batchItem = batchItem;\n+        this.inputStream = new ServletInputStream() {\n+\n+            private final ByteArrayInputStream bais = new ByteArrayInputStream(batchItem.getContent().getBytes());\n+\n+            private boolean isFinished = false;\n+\n+            private boolean isReady = true;\n+\n+            @Override\n+            public boolean isFinished() {\n+                return isFinished;\n+            }\n+\n+            @Override\n+            public boolean isReady() {\n+                return isReady;\n+            }\n+\n+            @Override\n+            public void setReadListener(final ReadListener readListener) {\n+                // nope\n+            }\n+\n+            @Override\n+            public int read() {\n+                isFinished = true;\n+                isReady = false;\n+                return bais.read();\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public String getMethod() {\n+        return batchItem.getMethod();\n+    }\n+\n+    @Override\n+    public StringBuffer getRequestURL() {\n+        return new StringBuffer(basePath).append(getRequestURI());\n+    }\n+\n+    @Override\n+    public String getRequestURI() {\n+        return batchItem.getRequestURI();\n+    }\n+\n+    @Override\n+    public String getQueryString() {\n+        return batchItem.getQueryString();\n+    }\n+\n+    @Override\n+    public String getContentType() {\n+        return batchItem.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)\n+                ? batchItem.getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0).toString()\n+                : MediaType.ALL_VALUE;\n+    }\n+\n+    @Override\n+    public int getContentLength() {\n+        return batchItem.getHeaders().containsKey(HttpHeaders.CONTENT_LENGTH)\n+                ? Integer.valueOf(batchItem.getHeaders().get(HttpHeaders.CONTENT_LENGTH).get(0).toString())\n+                : 0;\n+    }\n+\n+    @Override\n+    public long getContentLengthLong() {\n+        return getContentLength();\n+    }\n+\n+    @Override\n+    public String getHeader(final String name) {\n+        return batchItem.getHeaders().containsKey(name)\n+                ? batchItem.getHeaders().get(name).get(0).toString()\n+                : HttpHeaders.CONTENT_TYPE.equals(name) || HttpHeaders.ACCEPT.equals(name)\n+                ? MediaType.ALL_VALUE\n+                : super.getHeader(name);\n+    }\n+\n+    @Override\n+    public Enumeration<String> getHeaders(final String name) {\n+        return batchItem.getHeaders().containsKey(name)\n+                ? Collections.enumeration(\n+                        batchItem.getHeaders().get(name).stream().map(Object::toString).collect(Collectors.toList()))\n+                : HttpHeaders.CONTENT_TYPE.equals(name) || HttpHeaders.ACCEPT.equals(name)\n+                ? Collections.enumeration(Arrays.asList(MediaType.ALL_VALUE))\n+                : super.getHeaders(name);\n+    }\n+\n+    @Override\n+    public ServletInputStream getInputStream() throws IOException {\n+        return inputStream;\n+    }\n+}"},{"sha":"e16fed992d08a7df413ac9d9de3be967993933ec","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemResponse.java","status":"added","additions":310,"deletions":0,"changes":310,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemResponse.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.batch;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.WriteListener;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+\n+public class BatchItemResponse implements HttpServletResponse {\n+\n+    private final Set<Cookie> cookies = new HashSet<>();\n+\n+    private final Map<String, List<Object>> headers = new HashMap<>();\n+\n+    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+    private final ServletOutputStream servletOuputStream = new ServletOutputStream() {\n+\n+        @Override\n+        public boolean isReady() {\n+            return true;\n+        }\n+\n+        @Override\n+        public void setWriteListener(final WriteListener writeListener) {\n+            // nope\n+        }\n+\n+        @Override\n+        public void write(final int b) throws IOException {\n+            baos.write(b);\n+        }\n+    };\n+\n+    private final PrintWriter writer = new PrintWriter(baos);\n+\n+    private int status;\n+\n+    private Locale locale;\n+\n+    public Set<Cookie> getCookies() {\n+        return cookies;\n+    }\n+\n+    public Map<String, List<Object>> getHeaders() {\n+        return headers;\n+    }\n+\n+    @Override\n+    public void addCookie(final Cookie cookie) {\n+        this.cookies.add(cookie);\n+    }\n+\n+    @Override\n+    public boolean containsHeader(final String name) {\n+        return headers.containsKey(name);\n+    }\n+\n+    @Override\n+    public void setDateHeader(final String name, final long date) {\n+        List<Object> values = headers.get(name);\n+        if (values == null) {\n+            values = new ArrayList<>();\n+            headers.put(name, values);\n+        } else {\n+            values.clear();\n+        }\n+        values.add(date);\n+    }\n+\n+    @Override\n+    public void addDateHeader(final String name, final long date) {\n+        List<Object> values = headers.get(name);\n+        if (values == null) {\n+            values = new ArrayList<>();\n+            headers.put(name, values);\n+        }\n+        values.add(date);\n+    }\n+\n+    @Override\n+    public void setHeader(final String name, final String value) {\n+        List<Object> values = headers.get(name);\n+        if (values == null) {\n+            values = new ArrayList<>();\n+            headers.put(name, values);\n+        } else {\n+            values.clear();\n+        }\n+        values.add(value);\n+    }\n+\n+    @Override\n+    public void addHeader(final String name, final String value) {\n+        List<Object> values = headers.get(name);\n+        if (values == null) {\n+            values = new ArrayList<>();\n+            headers.put(name, values);\n+        }\n+        values.add(value);\n+    }\n+\n+    @Override\n+    public void setIntHeader(final String name, final int value) {\n+        List<Object> values = headers.get(name);\n+        if (values == null) {\n+            values = new ArrayList<>();\n+            headers.put(name, values);\n+        } else {\n+            values.clear();\n+        }\n+        values.add(value);\n+    }\n+\n+    @Override\n+    public void addIntHeader(final String name, final int value) {\n+        List<Object> values = headers.get(name);\n+        if (values == null) {\n+            values = new ArrayList<>();\n+            headers.put(name, values);\n+        }\n+        values.add(value);\n+    }\n+\n+    @Override\n+    public String getHeader(final String name) {\n+        return headers.containsKey(name) ? headers.get(name).get(0).toString() : null;\n+    }\n+\n+    @Override\n+    public Collection<String> getHeaders(final String name) {\n+        return headers.containsKey(name)\n+                ? headers.get(name).stream().map(Object::toString).collect(Collectors.toList())\n+                : Collections.emptyList();\n+    }\n+\n+    @Override\n+    public Collection<String> getHeaderNames() {\n+        return headers.keySet();\n+    }\n+\n+    @Override\n+    public String encodeURL(final String url) {\n+        return url;\n+    }\n+\n+    @Override\n+    public String encodeRedirectURL(final String url) {\n+        return url;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"deprecation\")\n+    public String encodeUrl(final String url) {\n+        return encodeURL(url);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"deprecation\")\n+    public String encodeRedirectUrl(final String url) {\n+        return encodeRedirectURL(url);\n+    }\n+\n+    @Override\n+    public void sendError(final int sc, final String msg) throws IOException {\n+        setStatus(sc);\n+    }\n+\n+    @Override\n+    public void sendError(final int sc) throws IOException {\n+        setStatus(sc);\n+    }\n+\n+    @Override\n+    public void sendRedirect(final String location) throws IOException {\n+        setStatus(SC_MOVED_TEMPORARILY);\n+        setHeader(HttpHeaders.LOCATION, location);\n+    }\n+\n+    @Override\n+    public void setStatus(final int sc) {\n+        this.status = sc;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"deprecation\")\n+    public void setStatus(final int sc, final String sm) {\n+        setStatus(sc);\n+    }\n+\n+    @Override\n+    public int getStatus() {\n+        return status;\n+    }\n+\n+    @Override\n+    public String getCharacterEncoding() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public String getContentType() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public ByteArrayOutputStream getUnderlyingOutputStream() {\n+        return baos;\n+    }\n+\n+    @Override\n+    public ServletOutputStream getOutputStream() throws IOException {\n+        return servletOuputStream;\n+    }\n+\n+    @Override\n+    public PrintWriter getWriter() throws IOException {\n+        return writer;\n+    }\n+\n+    @Override\n+    public void setCharacterEncoding(final String charset) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void setContentLength(final int len) {\n+        setIntHeader(HttpHeaders.CONTENT_LENGTH, len);\n+    }\n+\n+    @Override\n+    public void setContentLengthLong(final long len) {\n+        setContentLength((int) len);\n+    }\n+\n+    @Override\n+    public void setContentType(final String type) {\n+        setHeader(HttpHeaders.CONTENT_TYPE, type);\n+    }\n+\n+    @Override\n+    public void setBufferSize(final int size) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int getBufferSize() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void flushBuffer() throws IOException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void resetBuffer() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean isCommitted() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void reset() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void setLocale(final Locale loc) {\n+        this.locale = loc;\n+    }\n+\n+    @Override\n+    public Locale getLocale() {\n+        return locale;\n+    }\n+}"},{"sha":"a76d418f84536ee789b3e53ab192a018e01967cb","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchProcess.java","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchProcess.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.batch;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.cxf.transport.http.AbstractHTTPDestination;\n+import org.apache.cxf.transport.http.DestinationRegistry;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadGenerator;\n+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n+import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n+import org.apache.syncope.core.persistence.api.entity.Batch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+\n+public class BatchProcess implements Runnable {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BatchProcess.class);\n+\n+    @Autowired\n+    private BatchDAO batchDAO;\n+\n+    private String boundary;\n+\n+    private String basePath;\n+\n+    private List<BatchRequestItem> batchRequestItems;\n+\n+    private DestinationRegistry destinationRegistry;\n+\n+    private ServletConfig servletConfig;\n+\n+    private HttpServletRequest servletRequest;\n+\n+    private Authentication authentication;\n+\n+    public void setBoundary(final String boundary) {\n+        this.boundary = boundary;\n+    }\n+\n+    public void setBasePath(final String basePath) {\n+        this.basePath = basePath;\n+    }\n+\n+    public void setBatchRequestItems(final List<BatchRequestItem> batchRequestItems) {\n+        this.batchRequestItems = batchRequestItems;\n+    }\n+\n+    public void setDestinationRegistry(final DestinationRegistry destinationRegistry) {\n+        this.destinationRegistry = destinationRegistry;\n+    }\n+\n+    public void setServletConfig(final ServletConfig servletConfig) {\n+        this.servletConfig = servletConfig;\n+    }\n+\n+    public void setServletRequest(final HttpServletRequest servletRequest) {\n+        this.servletRequest = servletRequest;\n+    }\n+\n+    public void setAuthentication(final Authentication authentication) {\n+        this.authentication = authentication;\n+    }\n+\n+    @Override\n+    public void run() {\n+        SecurityContextHolder.getContext().setAuthentication(authentication);\n+\n+        List<BatchResponseItem> batchResponseItems = new ArrayList<>(batchRequestItems.size());\n+\n+        batchRequestItems.forEach((BatchRequestItem reqItem) -> {\n+            LOG.debug(\"Batch item:\\n{}\", reqItem);\n+\n+            AbstractHTTPDestination dest = destinationRegistry.getDestinationForPath(reqItem.getRequestURI(), true);\n+            if (dest == null) {\n+                dest = destinationRegistry.checkRestfulRequest(reqItem.getRequestURI());\n+            }\n+            LOG.debug(\"Destination found for {}: {}\", reqItem.getRequestURI(), dest);\n+\n+            if (dest == null) {\n+                BatchResponseItem resItem = new BatchResponseItem();\n+                resItem.setStatus(404);\n+                batchResponseItems.add(resItem);\n+            } else {\n+                BatchItemRequest request = new BatchItemRequest(basePath, servletRequest, reqItem);\n+                BatchItemResponse response = new BatchItemResponse();\n+                try {\n+                    dest.invoke(servletConfig, servletConfig.getServletContext(), request, response);\n+                    LOG.debug(\"Returned:\\nstatus: {}\\nheaders: {}\\nbody:\\n{}\", response.getStatus(),\n+                            response.getHeaders(), new String(response.getUnderlyingOutputStream().toByteArray()));\n+\n+                    BatchResponseItem resItem = new BatchResponseItem();\n+                    resItem.setStatus(response.getStatus());\n+                    resItem.setHeaders(response.getHeaders());\n+                    String output = new String(response.getUnderlyingOutputStream().toByteArray());\n+                    if (output.length() > 0) {\n+                        resItem.setContent(output);\n+                    }\n+                    batchResponseItems.add(resItem);\n+                } catch (IOException e) {\n+                    LOG.error(\"Invocation of {} failed\", dest.getPath(), e);\n+\n+                    BatchResponseItem resItem = new BatchResponseItem();\n+                    resItem.setStatus(404);\n+                    batchResponseItems.add(resItem);\n+                }\n+            }\n+        });\n+\n+        String results = BatchPayloadGenerator.generate(batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary);\n+\n+        Batch batch = batchDAO.find(boundary);\n+        if (batch == null) {\n+            LOG.error(\"Could not find batch {}, cannot save results hence reporting here:\\n{}\", boundary, results);\n+        } else {\n+            batch.setResults(results);\n+            batchDAO.save(batch);\n+        }\n+    }\n+}"},{"sha":"2e9a0c0fe8ed8d5d53d952d85b2435a287a59a90","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -80,7 +80,8 @@ protected String getActualKey(final AnyDAO<?> dao, final String pretendingKey) {\n     }\n \n     protected boolean isNullPriorityAsync() {\n-        return BooleanUtils.toBoolean(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.NULL_PRIORITY_ASYNC));\n+        return BooleanUtils.toBoolean(\n+                messageContext.getHttpServletRequest().getHeader(RESTHeaders.NULL_PRIORITY_ASYNC));\n     }\n \n     /**\n@@ -89,8 +90,8 @@ protected boolean isNullPriorityAsync() {\n      * @return a {@code Preference} instance matching the passed {@code Prefer} header,\n      * or {@code Preference.NONE} if missing.\n      */\n-    private Preference getPreference() {\n-        return Preference.fromString(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.PREFER));\n+    protected Preference getPreference() {\n+        return Preference.fromString(messageContext.getHttpServletRequest().getHeader(RESTHeaders.PREFER));\n     }\n \n     protected Response.ResponseBuilder applyPreference("},{"sha":"1deaa379fe94879a64816dae0cc0c61116af172b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java","status":"modified","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -18,27 +18,65 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Date;\n import java.util.List;\n+import javax.annotation.Resource;\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.transport.DestinationFactoryManager;\n+import org.apache.cxf.transport.http.DestinationRegistry;\n+import org.apache.cxf.transport.http.HTTPTransportFactory;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.Preference;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadParser;\n+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.syncope.core.logic.SyncopeLogic;\n+import org.apache.syncope.core.rest.cxf.batch.BatchProcess;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n+import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n+import org.apache.syncope.core.persistence.api.entity.Batch;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import org.springframework.security.core.context.SecurityContextHolder;\n \n @Service\n public class SyncopeServiceImpl extends AbstractServiceImpl implements SyncopeService {\n \n+    @Resource(name = \"batchExecutor\")\n+    private ThreadPoolTaskExecutor batchExecutor;\n+\n     @Autowired\n     private SyncopeLogic logic;\n \n+    @Autowired\n+    private Bus bus;\n+\n+    @Autowired\n+    private BatchDAO batchDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n     @Override\n     public PlatformInfo platform() {\n         return logic.platform();\n@@ -68,4 +106,95 @@ public TypeExtensionTO readUserTypeExtension(final String groupName) {\n         return logic.readTypeExtension(groupName);\n     }\n \n+    private DestinationRegistry getDestinationRegistryFromBusOrDefault() {\n+        DestinationFactoryManager dfm = bus.getExtension(DestinationFactoryManager.class);\n+        try {\n+            HTTPTransportFactory df = (HTTPTransportFactory) dfm.\n+                    getDestinationFactory(\"http://cxf.apache.org/transports/http/configuration\");\n+            return df.getRegistry();\n+        } catch (Exception e) {\n+            throw new InternalServerErrorException(\"Could not find CXF's DestinationRegistry\", e);\n+        }\n+    }\n+\n+    @Override\n+    public Response batch(final InputStream input) {\n+        // parse Content-Type, expect appropriate boundary\n+        MediaType mediaType = MediaType.valueOf(messageContext.getHttpServletRequest().getContentType());\n+        String boundary = mediaType.getParameters().get(RESTHeaders.BOUNDARY_PARAMETER);\n+\n+        if (batchDAO.find(boundary) != null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.EntityExists);\n+            sce.getElements().add(\"Batch with boundary \" + boundary + \" already processing\");\n+            throw sce;\n+        }\n+\n+        // parse batch request\n+        List<BatchRequestItem> batchRequestItems;\n+        try {\n+            batchRequestItems = BatchPayloadParser.parse(input, mediaType, new BatchRequestItem());\n+        } catch (IOException e) {\n+            LOG.error(\"Could not parse batch request with boundary {}\", boundary, e);\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n+            sce.getElements().add(\"Batch request with boundary \" + boundary);\n+            throw sce;\n+        }\n+\n+        // prepare for batch processing\n+        Batch batch = entityFactory.newEntity(Batch.class);\n+        batch.setKey(boundary);\n+        batch.setExpiryTime(new Date(System.currentTimeMillis() + 5 * 60 * 1000));\n+        batchDAO.save(batch);\n+\n+        BatchProcess batchProcess = ApplicationContextProvider.getBeanFactory().createBean(BatchProcess.class);\n+        batchProcess.setBoundary(boundary);\n+        batchProcess.setBasePath(uriInfo.getBaseUri().toASCIIString());\n+        batchProcess.setBatchRequestItems(batchRequestItems);\n+        batchProcess.setDestinationRegistry(getDestinationRegistryFromBusOrDefault());\n+        batchProcess.setServletConfig(messageContext.getServletConfig());\n+        batchProcess.setServletRequest(messageContext.getHttpServletRequest());\n+        batchProcess.setAuthentication(SecurityContextHolder.getContext().getAuthentication());\n+\n+        // manage synchronous Vs asynchronous batch processing\n+        if (getPreference() == Preference.RESPOND_ASYNC) {\n+            batchExecutor.execute(batchProcess);\n+\n+            return Response.accepted().\n+                    header(RESTHeaders.PREFERENCE_APPLIED, getPreference().toString()).\n+                    header(HttpHeaders.LOCATION, uriInfo.getAbsolutePathBuilder().build()).\n+                    type(RESTHeaders.multipartMixedWith(boundary)).\n+                    build();\n+        } else {\n+            batchProcess.run();\n+            return batch();\n+        }\n+    }\n+\n+    @Override\n+    public Response batch() {\n+        MediaType mediaType = MediaType.valueOf(messageContext.getHttpServletRequest().getContentType());\n+        String boundary = mediaType.getParameters().get(RESTHeaders.BOUNDARY_PARAMETER);\n+\n+        Batch batch = batchDAO.find(boundary);\n+        if (batch == null) {\n+            throw new NotFoundException(\"Batch \" + boundary);\n+        }\n+\n+        if (batch.getResults() == null) {\n+            return Response.accepted().\n+                    type(RESTHeaders.multipartMixedWith(boundary)).\n+                    header(HttpHeaders.RETRY_AFTER, 5).\n+                    header(HttpHeaders.LOCATION, uriInfo.getAbsolutePathBuilder().build()).\n+                    build();\n+        }\n+\n+        Response response = Response.ok(batch.getResults()).\n+                type(RESTHeaders.multipartMixedWith(boundary)).\n+                build();\n+\n+        batchDAO.delete(boundary);\n+\n+        return response;\n+    }\n }"},{"sha":"dd3ff1870856fb03c864bd54d9e1a7981cfc3f35","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -21,18 +21,23 @@ under the License.\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:task=\"http://www.springframework.org/schema/task\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://cxf.apache.org/jaxrs\n                            http://cxf.apache.org/schemas/jaxrs.xsd\n                            http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\">\n+                           http://www.springframework.org/schema/context/spring-context.xsd\n+                           http://www.springframework.org/schema/task\n+                           http://www.springframework.org/schema/task/spring-task.xsd\">\n \n   <import resource=\"classpath:META-INF/cxf/cxf.xml\"/>\n   <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>\n \n   <context:component-scan base-package=\"org.apache.syncope.core.rest.cxf.service\"/>  \n \n+  <task:executor id=\"batchExecutor\" pool-size=\"10\"/>\n+\n   <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n     <property name=\"namespacePrefixes\">\n       <map>"},{"sha":"020b4a2a6826c0704fa90b0da6db7ccbe2d46895","filename":"ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/ext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/ext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -36,10 +36,10 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.CamelMetrics;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for Camel routes.\n@@ -59,7 +59,7 @@ public interface CamelRouteService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{anyTypeKind}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<CamelRouteTO> list(@NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind);\n \n     /**\n@@ -71,7 +71,7 @@ public interface CamelRouteService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{anyTypeKind}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     CamelRouteTO read(\n             @NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind,\n             @NotNull @PathParam(\"key\") String key);\n@@ -88,8 +88,8 @@ CamelRouteTO read(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{anyTypeKind}/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind, @NotNull CamelRouteTO route);\n \n     /**\n@@ -99,7 +99,7 @@ CamelRouteTO read(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"restartContext\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void restartContext();\n \n     /**\n@@ -109,6 +109,6 @@ CamelRouteTO read(\n      */\n     @GET\n     @Path(\"metrics\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     CamelMetrics metrics();\n }"},{"sha":"39b719c5c9315940d16548120c6a09697af7f005","filename":"ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCClientService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCClientService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCClientService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCClientService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -27,10 +27,10 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.OIDCConstants;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.OIDCLoginRequestTO;\n import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n import org.apache.syncope.common.lib.to.OIDCLogoutRequestTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for OpenID Connect Clients.\n@@ -51,7 +51,7 @@ public interface OIDCClientService extends JAXRSService {\n      */\n     @POST\n     @Path(\"loginRequest\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     OIDCLoginRequestTO createLoginRequest(\n             @QueryParam(OIDCConstants.REDIRECT_URI) String redirectURI,\n             @QueryParam(OIDCConstants.OP) String op);\n@@ -67,7 +67,7 @@ OIDCLoginRequestTO createLoginRequest(\n      */\n     @POST\n     @Path(\"login\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     OIDCLoginResponseTO login(\n             @QueryParam(OIDCConstants.REDIRECT_URI) String redirectURI,\n             @QueryParam(\"authorizationCode\") String authorizationCode,\n@@ -81,7 +81,7 @@ OIDCLoginResponseTO login(\n      */\n     @POST\n     @Path(\"logout\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     OIDCLogoutRequestTO createLogoutRequest(@QueryParam(OIDCConstants.OP) String op);\n \n }"},{"sha":"ca55a4ad0241b57260cd5efc9ab5ceaf05c00484","filename":"ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCProviderService.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCProviderService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCProviderService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCProviderService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -42,7 +42,6 @@\n import javax.ws.rs.PUT;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.core.HttpHeaders;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n@@ -71,7 +70,7 @@ public interface OIDCProviderService extends JAXRSService {\n      * @return list of all defined OIDC Providers\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<OIDCProviderTO> list();\n \n     /**\n@@ -82,7 +81,7 @@ public interface OIDCProviderService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     OIDCProviderTO read(@PathParam(\"key\") String key);\n \n     /**\n@@ -101,14 +100,14 @@ public interface OIDCProviderService extends JAXRSService {\n                         @Schema(type = \"string\"),\n                         description = \"URL of the entity created\") }))\n     @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response create(OIDCProviderTO oidcProviderTO);\n \n     /**\n      * Creates a new OIDC Provider by using its Discovery Document.\n      *\n-     * @param oidcProviderTO OpenID Connect Provider configuration to be stored  \n+     * @param oidcProviderTO OpenID Connect Provider configuration to be stored\n      * @return Response object featuring Location header of created OIDC Provider\n      */\n     @ApiResponses(\n@@ -122,8 +121,8 @@ public interface OIDCProviderService extends JAXRSService {\n                         description = \"URL of the entity created\") }))\n     @POST\n     @Path(\"fromDiscovery\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response createFromDiscovery(OIDCProviderTO oidcProviderTO);\n \n     /**\n@@ -137,8 +136,8 @@ public interface OIDCProviderService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull OIDCProviderTO oidcProviderTO);\n \n     /**\n@@ -150,7 +149,7 @@ public interface OIDCProviderService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@PathParam(\"key\") String key);\n \n }"},{"sha":"acfbeb2be20353da89b4b98cc7e26ba122e84f77","filename":"ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -40,8 +40,8 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for SAML 2.0 Identity Providers.\n@@ -69,7 +69,7 @@ public interface SAML2IdPService extends JAXRSService {\n      * @return list of all defined SAML 2.0 Identity Providers\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<SAML2IdPTO> list();\n \n     /**\n@@ -80,7 +80,7 @@ public interface SAML2IdPService extends JAXRSService {\n      */\n     @GET\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     SAML2IdPTO read(@PathParam(\"key\") String key);\n \n     /**\n@@ -91,7 +91,7 @@ public interface SAML2IdPService extends JAXRSService {\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response importFromMetadata(@NotNull InputStream input);\n \n     /**\n@@ -105,8 +105,8 @@ public interface SAML2IdPService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull SAML2IdPTO saml2IdpTO);\n \n     /**\n@@ -118,6 +118,6 @@ public interface SAML2IdPService extends JAXRSService {\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@PathParam(\"key\") String key);\n }"},{"sha":"06d09965ee23201563f95352b12d1cb23bad514a","filename":"ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -31,10 +31,10 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for the provided SAML 2.0 Service Provider.\n@@ -66,7 +66,7 @@ public interface SAML2SPService extends JAXRSService {\n      */\n     @POST\n     @Path(\"loginRequest\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     SAML2RequestTO createLoginRequest(\n             @QueryParam(\"spEntityID\") String spEntityID,\n             @QueryParam(\"idpEntityID\") String idpEntityID);\n@@ -79,8 +79,8 @@ SAML2RequestTO createLoginRequest(\n      */\n     @POST\n     @Path(\"loginResponse\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     SAML2LoginResponseTO validateLoginResponse(SAML2ReceivedResponseTO response);\n \n     /**\n@@ -91,7 +91,7 @@ SAML2RequestTO createLoginRequest(\n      */\n     @POST\n     @Path(\"logoutRequest\")\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     SAML2RequestTO createLogoutRequest(@QueryParam(\"spEntityID\") String spEntityID);\n \n     /**\n@@ -103,7 +103,7 @@ SAML2RequestTO createLoginRequest(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"logoutResponse\")\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void validateLogoutResponse(SAML2ReceivedResponseTO response);\n }"},{"sha":"7e10f45de8031c1378c8b183cbcc80c1f426667d","filename":"ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/ext%2Fscimv2%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSCIMConfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/ext%2Fscimv2%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSCIMConfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSCIMConfService.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -30,8 +30,8 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for SCIM 2.0 configuration.\n@@ -49,7 +49,7 @@ public interface SCIMConfService extends JAXRSService {\n      * @return SCIM configuration\n      */\n     @GET\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     SCIMConf get();\n \n     /**\n@@ -60,7 +60,7 @@ public interface SCIMConfService extends JAXRSService {\n     @ApiResponses(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void set(@NotNull SCIMConf conf);\n }"},{"sha":"80851f53fdc08f03e4250ff0a45e5b93ad6c8aa8","filename":"fit/core-reference/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -1267,7 +1267,7 @@ under the License.\n             <inherited>true</inherited>\n             <configuration>\n               <container>\n-                <containerId>wildfly12x</containerId>\n+                <containerId>wildfly13x</containerId>\n                 <zipUrlInstaller>\n                   <url>http://download.jboss.org/wildfly/13.0.0.Final/wildfly-13.0.0.Final.zip</url>\n                   <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>"},{"sha":"b06589b44b7a1bda09c5e25bfdc7b3dd9b4a4ac6","filename":"fit/core-reference/src/main/resources/jboss/restCXFContext.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -21,18 +21,23 @@ under the License.\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:task=\"http://www.springframework.org/schema/task\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://cxf.apache.org/jaxrs\n                            http://cxf.apache.org/schemas/jaxrs.xsd\n                            http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\">\n+                           http://www.springframework.org/schema/context/spring-context.xsd\n+                           http://www.springframework.org/schema/task\n+                           http://www.springframework.org/schema/task/spring-task.xsd\">\n \n   <import resource=\"classpath:META-INF/cxf/cxf.xml\"/>\n   <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>\n \n   <context:component-scan base-package=\"org.apache.syncope.core.rest.cxf.service\"/>  \n \n+  <task:executor id=\"batchExecutor\" pool-size=\"10\"/>\n+\n   <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n     <property name=\"namespacePrefixes\">\n       <map>"},{"sha":"25980ed0932aaf1b513ca41ae4e37a7748d906f3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BatchITCase.java","status":"added","additions":345,"deletions":0,"changes":345,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -0,0 +1,345 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.ws.rs.HttpMethod;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.cxf.jaxrs.client.Client;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n+import org.apache.syncope.client.lib.batch.BatchResponse;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.Preference;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadGenerator;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadParser;\n+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n+import org.apache.syncope.common.rest.api.service.GroupService;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+public class BatchITCase extends AbstractITCase {\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private String requestBody(final String boundary) throws JsonProcessingException, JAXBException {\n+        List<BatchRequestItem> reqItems = new ArrayList<>();\n+\n+        // 1. create user as JSON\n+        UserTO user = UserITCase.getUniqueSampleTO(\"batch@syncope.apache.org\");\n+        assertNotEquals(\"/odd\", user.getRealm());\n+        String createUserPayload = MAPPER.writeValueAsString(user);\n+\n+        BatchRequestItem createUser = new BatchRequestItem();\n+        createUser.setMethod(HttpMethod.POST);\n+        createUser.setRequestURI(\"/users\");\n+        createUser.setHeaders(new HashMap<>());\n+        createUser.getHeaders().put(HttpHeaders.ACCEPT, Arrays.asList(MediaType.APPLICATION_JSON));\n+        createUser.getHeaders().put(HttpHeaders.CONTENT_TYPE, Arrays.asList(MediaType.APPLICATION_JSON));\n+        createUser.getHeaders().put(HttpHeaders.CONTENT_LENGTH, Arrays.asList(createUserPayload.length()));\n+        createUser.setContent(createUserPayload);\n+        reqItems.add(createUser);\n+\n+        // 2. create group as XML\n+        GroupTO group = GroupITCase.getBasicSampleTO(\"batch\");\n+        JAXBContext context = JAXBContext.newInstance(GroupTO.class);\n+        Marshaller marshaller = context.createMarshaller();\n+        StringWriter writer = new StringWriter();\n+        marshaller.marshal(group, writer);\n+        String createGroupPayload = writer.toString();\n+\n+        BatchRequestItem createGroup = new BatchRequestItem();\n+        createGroup.setMethod(HttpMethod.POST);\n+        createGroup.setRequestURI(\"/groups\");\n+        createGroup.setHeaders(new HashMap<>());\n+        createGroup.getHeaders().put(HttpHeaders.ACCEPT, Arrays.asList(MediaType.APPLICATION_XML));\n+        createGroup.getHeaders().put(HttpHeaders.CONTENT_TYPE, Arrays.asList(MediaType.APPLICATION_XML));\n+        createGroup.getHeaders().put(HttpHeaders.CONTENT_LENGTH, Arrays.asList(createGroupPayload.length()));\n+        createGroup.setContent(createGroupPayload);\n+        reqItems.add(createGroup);\n+\n+        // 3. update the user above as JSON, request for no user data being returned\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(user.getUsername());\n+        userPatch.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n+        String updateUserPayload = MAPPER.writeValueAsString(userPatch);\n+\n+        BatchRequestItem updateUser = new BatchRequestItem();\n+        updateUser.setMethod(HttpMethod.PATCH);\n+        updateUser.setRequestURI(\"/users/\" + user.getUsername());\n+        updateUser.setHeaders(new HashMap<>());\n+        updateUser.getHeaders().put(RESTHeaders.PREFER, Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n+        updateUser.getHeaders().put(HttpHeaders.ACCEPT, Arrays.asList(MediaType.APPLICATION_JSON));\n+        updateUser.getHeaders().put(HttpHeaders.CONTENT_TYPE, Arrays.asList(MediaType.APPLICATION_JSON));\n+        updateUser.getHeaders().put(HttpHeaders.CONTENT_LENGTH, Arrays.asList(updateUserPayload.length()));\n+        updateUser.setContent(updateUserPayload);\n+        reqItems.add(updateUser);\n+\n+        // 4. attempt to invoke an unexisting endpoint\n+        BatchRequestItem endpointNotFound = new BatchRequestItem();\n+        endpointNotFound.setMethod(HttpMethod.PATCH);\n+        endpointNotFound.setRequestURI(\"/missing\");\n+        reqItems.add(endpointNotFound);\n+\n+        // 5. attempt to delete an unexisting group\n+        BatchRequestItem groupNotFound = new BatchRequestItem();\n+        groupNotFound.setMethod(HttpMethod.DELETE);\n+        groupNotFound.setRequestURI(\"/groups/\" + UUID.randomUUID());\n+        reqItems.add(groupNotFound);\n+\n+        // 6, delete the group created above, expect deleted group as JSON\n+        BatchRequestItem deleteGroup = new BatchRequestItem();\n+        deleteGroup.setMethod(HttpMethod.DELETE);\n+        deleteGroup.setRequestURI(\"/groups/\" + group.getName());\n+        reqItems.add(deleteGroup);\n+\n+        String body = BatchPayloadGenerator.generate(reqItems, boundary);\n+        LOG.debug(\"Batch request body:\\n{}\", body);\n+\n+        return body;\n+    }\n+\n+    private void check(final List<BatchResponseItem> resItems) throws IOException, JAXBException {\n+        assertEquals(6, resItems.size());\n+\n+        assertEquals(Response.Status.CREATED.getStatusCode(), resItems.get(0).getStatus());\n+        assertNotNull(resItems.get(0).getHeaders().get(HttpHeaders.LOCATION));\n+        assertNotNull(resItems.get(0).getHeaders().get(HttpHeaders.ETAG));\n+        assertNotNull(resItems.get(0).getHeaders().get(RESTHeaders.DOMAIN));\n+        assertNotNull(resItems.get(0).getHeaders().get(RESTHeaders.RESOURCE_KEY));\n+        assertEquals(MediaType.APPLICATION_JSON, resItems.get(0).getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0));\n+        ProvisioningResult<UserTO> user = MAPPER.readValue(\n+                resItems.get(0).getContent(), new TypeReference<ProvisioningResult<UserTO>>() {\n+        });\n+        assertNotNull(user.getEntity().getKey());\n+\n+        assertEquals(Response.Status.CREATED.getStatusCode(), resItems.get(1).getStatus());\n+        assertNotNull(resItems.get(1).getHeaders().get(HttpHeaders.LOCATION));\n+        assertNotNull(resItems.get(1).getHeaders().get(HttpHeaders.ETAG));\n+        assertNotNull(resItems.get(1).getHeaders().get(RESTHeaders.DOMAIN));\n+        assertNotNull(resItems.get(1).getHeaders().get(RESTHeaders.RESOURCE_KEY));\n+        assertEquals(MediaType.APPLICATION_XML, resItems.get(1).getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0));\n+\n+        JAXBContext context = JAXBContext.newInstance(ProvisioningResult.class, GroupTO.class);\n+        Unmarshaller unmarshaller = context.createUnmarshaller();\n+        @SuppressWarnings(\"unchecked\")\n+        ProvisioningResult<GroupTO> group = (ProvisioningResult<GroupTO>) unmarshaller.unmarshal(\n+                IOUtils.toInputStream(resItems.get(1).getContent(), StandardCharsets.UTF_8));\n+        assertNotNull(group.getEntity().getKey());\n+\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), resItems.get(2).getStatus());\n+        assertNotNull(resItems.get(2).getHeaders().get(RESTHeaders.DOMAIN));\n+        assertEquals(\n+                Preference.RETURN_NO_CONTENT.toString(),\n+                resItems.get(2).getHeaders().get(RESTHeaders.PREFERENCE_APPLIED).get(0));\n+\n+        assertEquals(Response.Status.NOT_FOUND.getStatusCode(), resItems.get(3).getStatus());\n+\n+        assertEquals(Response.Status.NOT_FOUND.getStatusCode(), resItems.get(4).getStatus());\n+        assertNotNull(resItems.get(4).getHeaders().get(RESTHeaders.DOMAIN));\n+        assertNotNull(resItems.get(4).getHeaders().get(RESTHeaders.ERROR_CODE));\n+        assertNotNull(resItems.get(4).getHeaders().get(RESTHeaders.ERROR_INFO));\n+        assertEquals(MediaType.APPLICATION_JSON, resItems.get(4).getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0));\n+\n+        assertEquals(Response.Status.OK.getStatusCode(), resItems.get(5).getStatus());\n+        assertNotNull(resItems.get(5).getHeaders().get(RESTHeaders.DOMAIN));\n+        assertEquals(MediaType.APPLICATION_JSON, resItems.get(5).getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0));\n+        group = MAPPER.readValue(\n+                resItems.get(5).getContent(), new TypeReference<ProvisioningResult<GroupTO>>() {\n+        });\n+        assertNotNull(group);\n+    }\n+\n+    @Test\n+    public void webClientSync() throws IOException, JAXBException {\n+        String boundary = \"--batch_\" + UUID.randomUUID().toString();\n+\n+        Response response = WebClient.create(ADDRESS).path(\"batch\").\n+                header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT()).\n+                type(RESTHeaders.multipartMixedWith(boundary.substring(2))).\n+                post(requestBody(boundary));\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        assertTrue(response.getMediaType().toString().\n+                startsWith(RESTHeaders.multipartMixedWith(boundary.substring(2))));\n+\n+        String body = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8);\n+        LOG.debug(\"Batch response body:\\n{}\", body);\n+\n+        check(BatchPayloadParser.parse(\n+                new ByteArrayInputStream(body.getBytes()),\n+                response.getMediaType(),\n+                new BatchResponseItem()));\n+    }\n+\n+    @Test\n+    public void webClientAsync() throws IOException, JAXBException {\n+        String boundary = \"--batch_\" + UUID.randomUUID().toString();\n+\n+        // request async processing\n+        Response response = WebClient.create(ADDRESS).path(\"batch\").\n+                header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT()).\n+                header(RESTHeaders.PREFER, Preference.RESPOND_ASYNC).\n+                type(RESTHeaders.multipartMixedWith(boundary.substring(2))).\n+                post(requestBody(boundary));\n+        assertEquals(Response.Status.ACCEPTED.getStatusCode(), response.getStatus());\n+        assertTrue(response.getMediaType().toString().\n+                startsWith(RESTHeaders.multipartMixedWith(boundary.substring(2))));\n+        assertEquals(Preference.RESPOND_ASYNC.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        URI monitor = response.getLocation();\n+        assertNotNull(monitor);\n+\n+        // wait a bit...\n+        try {\n+            Thread.sleep(5000);\n+        } catch (InterruptedException e) {\n+        }\n+\n+        // check results: now available\n+        response = WebClient.create(monitor).\n+                header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT()).\n+                type(RESTHeaders.multipartMixedWith(boundary.substring(2))).get();\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        assertTrue(response.getMediaType().toString().\n+                startsWith(RESTHeaders.multipartMixedWith(boundary.substring(2))));\n+\n+        String body = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8);\n+        LOG.debug(\"Batch response body:\\n{}\", body);\n+\n+        check(BatchPayloadParser.parse(\n+                new ByteArrayInputStream(body.getBytes()),\n+                response.getMediaType(),\n+                new BatchResponseItem()));\n+\n+        // check results again: removed since they were returned above\n+        response = WebClient.create(monitor).\n+                header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT()).\n+                type(RESTHeaders.multipartMixedWith(boundary.substring(2))).get();\n+        assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());\n+    }\n+\n+    private BatchRequest batchRequest() {\n+        BatchRequest batchRequest = adminClient.batch();\n+\n+        // 1. create user as JSON\n+        UserService batchUserService = batchRequest.getService(UserService.class);\n+        UserTO user = UserITCase.getUniqueSampleTO(\"batch@syncope.apache.org\");\n+        assertNotEquals(\"/odd\", user.getRealm());\n+        batchUserService.create(user, true);\n+\n+        // 2. create group as XML\n+        GroupService batchGroupService = batchRequest.getService(GroupService.class);\n+        Client client = WebClient.client(batchGroupService).reset();\n+        client.type(MediaType.APPLICATION_XML).accept(MediaType.APPLICATION_XML);\n+        GroupTO group = GroupITCase.getBasicSampleTO(\"batch\");\n+        batchGroupService.create(group);\n+\n+        // 3. update the user above as JSON, request for no user data being returned\n+        client = WebClient.client(batchUserService).reset();\n+        client.type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);\n+        client.header(RESTHeaders.PREFER, Preference.RETURN_NO_CONTENT.toString());\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(user.getUsername());\n+        userPatch.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n+        batchUserService.update(userPatch);\n+\n+        // 4. generate not found\n+        batchRequest.getService(ResourceService.class).read(UUID.randomUUID().toString());\n+\n+        // 5. attempt to delete an unexisting group\n+        client = WebClient.client(batchGroupService).reset();\n+        client.type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);\n+        batchGroupService.delete(UUID.randomUUID().toString());\n+\n+        // 6, delete the group created above, expect deleted group as JSON\n+        batchGroupService.delete(group.getName());\n+\n+        return batchRequest;\n+    }\n+\n+    @Test\n+    public void syncopeClientSync() throws IOException, JAXBException {\n+        BatchResponse batchResponse = batchRequest().commit();\n+\n+        Response response = batchResponse.getResponse();\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        assertTrue(response.getMediaType().toString().startsWith(RESTHeaders.MULTIPART_MIXED));\n+\n+        check(batchResponse.getItems());\n+    }\n+\n+    @Test\n+    public void syncopeClientAsync() throws IOException, JAXBException {\n+        // request async processing\n+        BatchResponse batchResponse = batchRequest().commit(true);\n+\n+        Response response = batchResponse.getResponse();\n+        assertEquals(Response.Status.ACCEPTED.getStatusCode(), response.getStatus());\n+        assertTrue(response.getMediaType().toString().startsWith(RESTHeaders.MULTIPART_MIXED));\n+\n+        // wait a bit...\n+        try {\n+            Thread.sleep(5000);\n+        } catch (InterruptedException e) {\n+        }\n+\n+        // check results: now available\n+        response = batchResponse.poll();\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        assertTrue(response.getMediaType().toString().startsWith(RESTHeaders.MULTIPART_MIXED));\n+\n+        check(batchResponse.getItems());\n+\n+        // check results again: removed since they were returned above\n+        response = batchResponse.poll();\n+        assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());\n+    }\n+}"},{"sha":"d7278ac0f5698e3ec2bb409f75c9a8509f8487cb","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9250efade3793edeb35be10f72890a98090438c/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9250efade3793edeb35be10f72890a98090438c/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=d9250efade3793edeb35be10f72890a98090438c","patch":"@@ -1880,7 +1880,7 @@ under the License.\n         <plugin>\n           <groupId>org.codehaus.cargo</groupId>\n           <artifactId>cargo-maven2-plugin</artifactId>\n-          <version>1.6.8</version>\n+          <version>1.6.9</version>\n           <configuration>\n             <container>\n               <containerId>tomcat9x</containerId>"}]}