{"sha":"9dfcc57a1d33b0bb8be888050d42cac877d2e412","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlkZmNjNTdhMWQzM2IwYmI4YmU4ODgwNTBkNDJjYWM4NzdkMmU0MTI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-01-30T12:59:20Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-01-30T12:59:20Z"},"message":"[SYNCOPE-462] Update to Spring 3.2.7, Spring Security 3.2.0 + updating local BeanUtils\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1562803 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"75544bfc4ffa3ef90c28d13279235e9a23ed6b41","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/75544bfc4ffa3ef90c28d13279235e9a23ed6b41"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9dfcc57a1d33b0bb8be888050d42cac877d2e412","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9dfcc57a1d33b0bb8be888050d42cac877d2e412","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9dfcc57a1d33b0bb8be888050d42cac877d2e412","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9dfcc57a1d33b0bb8be888050d42cac877d2e412/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"562f472f99ee9c7571bb4f1daa26ff6aefea15a6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/562f472f99ee9c7571bb4f1daa26ff6aefea15a6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/562f472f99ee9c7571bb4f1daa26ff6aefea15a6"},{"sha":"e9c813556781360223a8a7f8c2ddb8074470ee75","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e9c813556781360223a8a7f8c2ddb8074470ee75","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e9c813556781360223a8a7f8c2ddb8074470ee75"}],"stats":{"total":147,"additions":108,"deletions":39},"files":[{"sha":"34f724df265b178a090e70e7f175cb13885e9915","filename":"common/src/main/java/org/apache/syncope/common/util/BeanUtils.java","status":"modified","additions":106,"deletions":37,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9dfcc57a1d33b0bb8be888050d42cac877d2e412/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FBeanUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9dfcc57a1d33b0bb8be888050d42cac877d2e412/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FBeanUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FBeanUtils.java?ref=9dfcc57a1d33b0bb8be888050d42cac877d2e412","patch":"@@ -24,12 +24,15 @@\n import java.beans.PropertyDescriptor;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n-import org.apache.commons.lang3.ArrayUtils;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.FatalBeanException;\n import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n \n /**\n  * Overrides Spring's BeanUtils not using collection setters but instead getters + addAll() / putAll(),\n@@ -52,15 +55,62 @@ private BeanUtils() {\n      * from each other, as long as the properties match. Any bean properties that the\n      * source bean exposes but the target bean does not will silently be ignored.\n      * <br/>\n-     * This is just a convenience method. For more complex transfer needs, consider using a full BeanWrapper.\n+     * This is just a convenience method. For more complex transfer needs,\n+     * consider using a full BeanWrapper.\n      *\n      * @param source the source bean\n      * @param target the target bean\n      * @throws BeansException if the copying failed\n      * @see org.springframework.beans.BeanWrapper\n      */\n     public static void copyProperties(final Object source, final Object target) throws BeansException {\n-        copyProperties(source, target, null);\n+        copyProperties(source, target, null, (String[]) null);\n+    }\n+\n+    /**\n+     * Copy the property values of the given source bean into the given target bean,\n+     * only setting properties defined in the given \"editable\" class (or interface).\n+     * <br/>\n+     * Note: The source and target classes do not have to match or even be derived\n+     * from each other, as long as the properties match. Any bean properties that the\n+     * source bean exposes but the target bean does not will silently be ignored.\n+     * <br/>\n+     * This is just a convenience method. For more complex transfer needs,\n+     * consider using a full BeanWrapper.\n+     *\n+     * @param source the source bean\n+     * @param target the target bean\n+     * @param editable the class (or interface) to restrict property setting to\n+     * @throws BeansException if the copying failed\n+     * @see org.springframework.beans.BeanWrapper\n+     */\n+    public static void copyProperties(final Object source, final Object target, final Class<?> editable)\n+            throws BeansException {\n+\n+        copyProperties(source, target, editable, (String[]) null);\n+    }\n+\n+    /**\n+     * Copy the property values of the given source bean into the given target bean,\n+     * ignoring the given \"ignoreProperties\".\n+     * <br/>\n+     * Note: The source and target classes do not have to match or even be derived\n+     * from each other, as long as the properties match. Any bean properties that the\n+     * source bean exposes but the target bean does not will silently be ignored.\n+     * <br/>\n+     * This is just a convenience method. For more complex transfer needs,\n+     * consider using a full BeanWrapper.\n+     *\n+     * @param source the source bean\n+     * @param target the target bean\n+     * @param ignoreProperties array of property names to ignore\n+     * @throws BeansException if the copying failed\n+     * @see org.springframework.beans.BeanWrapper\n+     */\n+    public static void copyProperties(final Object source, final Object target, final String... ignoreProperties)\n+            throws BeansException {\n+\n+        copyProperties(source, target, null, ignoreProperties);\n     }\n \n     /**\n@@ -72,55 +122,74 @@ public static void copyProperties(final Object source, final Object target) thro\n      *\n      * @param source the source bean\n      * @param target the target bean\n+     * @param editable the class (or interface) to restrict property setting to\n      * @param ignoreProperties array of property names to ignore\n      * @throws BeansException if the copying failed\n      * @see org.springframework.beans.BeanWrapper\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static void copyProperties(final Object source, final Object target, final String[] ignoreProperties)\n-            throws BeansException {\n+    private static void copyProperties(final Object source, final Object target, final Class<?> editable,\n+            final String... ignoreProperties) throws BeansException {\n \n         Assert.notNull(source, \"Source must not be null\");\n         Assert.notNull(target, \"Target must not be null\");\n \n-        for (PropertyDescriptor targetPd : getPropertyDescriptors(target.getClass())) {\n-            if (!ArrayUtils.contains(ignoreProperties, targetPd.getName())) {\n-                PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName());\n-                if (sourcePd != null && sourcePd.getReadMethod() != null) {\n-                    try {\n-                        Method readMethod = sourcePd.getReadMethod();\n-                        if (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) {\n-                            readMethod.setAccessible(true);\n-                        }\n-                        Object value = readMethod.invoke(source);\n+        Class<?> actualEditable = target.getClass();\n+        if (editable != null) {\n+            if (!editable.isInstance(target)) {\n+                throw new IllegalArgumentException(\"Target class [\" + target.getClass().getName()\n+                        + \"] not assignable to Editable class [\" + editable.getName() + \"]\");\n+            }\n+            actualEditable = editable;\n+        }\n+        PropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable);\n+        List<String> ignoreList = (ignoreProperties == null)\n+                ? Collections.<String>emptyList() : Arrays.asList(ignoreProperties);\n \n+        for (PropertyDescriptor targetPd : targetPds) {\n+            if (ignoreProperties == null || (!ignoreList.contains(targetPd.getName()))) {\n+                PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName());\n+                if (sourcePd != null) {\n+                    Method readMethod = sourcePd.getReadMethod();\n+                    if (readMethod != null) {\n                         Method writeMethod = targetPd.getWriteMethod();\n-                        // Diverts from Spring's BeanUtils: if no write method is found and property is collection,\n-                        // try to use addAll() / putAll().\n-                        if (writeMethod == null) {\n-                            Method targetReadMethod = targetPd.getReadMethod();\n-                            if (targetReadMethod != null) {\n-                                if (!Modifier.isPublic(targetReadMethod.getDeclaringClass().getModifiers())) {\n-                                    targetReadMethod.setAccessible(true);\n+\n+                        try {\n+                            // Diverts from Spring's BeanUtils: if no write method is found and property is collection,\n+                            // try to use addAll() / putAll().\n+                            if (writeMethod == null) {\n+                                Object value = readMethod.invoke(source);\n+                                Method targetReadMethod = targetPd.getReadMethod();\n+                                if (targetReadMethod != null) {\n+                                    if (!Modifier.isPublic(targetReadMethod.getDeclaringClass().getModifiers())) {\n+                                        targetReadMethod.setAccessible(true);\n+                                    }\n+                                    Object destValue = targetReadMethod.invoke(target);\n+\n+                                    if (value instanceof Collection && destValue instanceof Collection) {\n+                                        ((Collection) destValue).clear();\n+                                        ((Collection) destValue).addAll((Collection) value);\n+                                    } else if (value instanceof Map && destValue instanceof Map) {\n+                                        ((Map) destValue).clear();\n+                                        ((Map) destValue).putAll((Map) value);\n+                                    }\n                                 }\n-                                Object destValue = targetReadMethod.invoke(target);\n-\n-                                if (value instanceof Collection && destValue instanceof Collection) {\n-                                    ((Collection) destValue).clear();\n-                                    ((Collection) destValue).addAll((Collection) value);\n-                                } else if (value instanceof Map && destValue instanceof Map) {\n-                                    ((Map) destValue).clear();\n-                                    ((Map) destValue).putAll((Map) value);\n+                            } else if (ClassUtils.isAssignable(\n+                                    writeMethod.getParameterTypes()[0], readMethod.getReturnType())) {\n+\n+                                if (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) {\n+                                    readMethod.setAccessible(true);\n                                 }\n+                                Object value = readMethod.invoke(source);\n+                                if (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) {\n+                                    writeMethod.setAccessible(true);\n+                                }\n+                                writeMethod.invoke(target, value);\n                             }\n-                        } else {\n-                            if (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) {\n-                                writeMethod.setAccessible(true);\n-                            }\n-                            writeMethod.invoke(target, value);\n+                        } catch (Throwable ex) {\n+                            throw new FatalBeanException(\n+                                    \"Could not copy property '\" + targetPd.getName() + \"' from source to target\", ex);\n                         }\n-                    } catch (Throwable ex) {\n-                        throw new FatalBeanException(\"Could not copy properties from source to target\", ex);\n                     }\n                 }\n             }"},{"sha":"0675a70dee7a8948e8e5d3e068d631fd46c9df94","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9dfcc57a1d33b0bb8be888050d42cac877d2e412/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9dfcc57a1d33b0bb8be888050d42cac877d2e412/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=9dfcc57a1d33b0bb8be888050d42cac877d2e412","patch":"@@ -317,8 +317,8 @@ under the License.\n     <aspectj.version>1.7.4</aspectj.version>\n \n     <cxf.version>3.0.0-SNAPSHOT</cxf.version>\t\n-    <spring.version>3.2.6.RELEASE</spring.version>\n-    <spring-security.version>3.1.4.RELEASE</spring-security.version>\n+    <spring.version>3.2.7.RELEASE</spring.version>\n+    <spring-security.version>3.2.0.RELEASE</spring-security.version>\n     <jackson.version>2.3.1</jackson.version>\n     <xstream.version>1.4.6</xstream.version>\n     <velocity.version>1.7</velocity.version>"}]}