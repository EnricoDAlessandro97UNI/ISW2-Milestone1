{"sha":"425f9b9ed1a26fa016d8799ccb611c24cf25a04a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQyNWY5YjllZDFhMjZmYTAxNmQ4Nzk5Y2NiNjExYzI0Y2YyNWEwNGE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-15T13:10:26Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-15T13:10:26Z"},"message":"[SYNCOPE-1821] Implementation on Core completed; still missing console + doc","tree":{"sha":"f8b9b1a3ed2d5c4b93e4831032073b5e08dacd6b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f8b9b1a3ed2d5c4b93e4831032073b5e08dacd6b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/425f9b9ed1a26fa016d8799ccb611c24cf25a04a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/425f9b9ed1a26fa016d8799ccb611c24cf25a04a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/425f9b9ed1a26fa016d8799ccb611c24cf25a04a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5724a50ca71a6bd07cc8aeb43e0ec1a6d5e22961","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5724a50ca71a6bd07cc8aeb43e0ec1a6d5e22961","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5724a50ca71a6bd07cc8aeb43e0ec1a6d5e22961"}],"stats":{"total":1856,"additions":1758,"deletions":98},"files":[{"sha":"7675f0a4d4cd95ca1bac30196d273a187aa84baa","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -57,6 +57,8 @@ public class SyncopeClient {\n \n     private static final String HEADER_SPLIT_PROPERTY = \"org.apache.cxf.http.header.split\";\n \n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n     private final MediaType mediaType;\n \n     private final JAXRSClientFactoryBean restClientFactory;\n@@ -244,7 +246,6 @@ public <T> T getService(final Class<T> serviceClass) {\n         }\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public Pair<Map<String, Set<String>>, UserTO> self() {\n         // Explicitly disable header value split because it interferes with JSON deserialization below\n         UserSelfService service = getService(UserSelfService.class);\n@@ -260,9 +261,9 @@ public Pair<Map<String, Set<String>>, UserTO> self() {\n \n         try {\n             return Pair.of(\n-                    (Map<String, Set<String>>) new ObjectMapper().readValue(\n+                    OBJECT_MAPPER.readValue(\n                             response.getHeaderString(RESTHeaders.OWNED_ENTITLEMENTS),\n-                            new TypeReference<HashMap<String, Set<String>>>() {\n+                            new TypeReference<Map<String, Set<String>>>() {\n                     }),\n                     response.readEntity(UserTO.class));\n         } catch (IOException e) {"},{"sha":"80858e894e2847ec4cff867c9901f50fb6207778","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -54,6 +54,10 @@ public enum SpecialAttr {\n      * Applies to users.\n      */\n     ROLES(\"$roles\"),\n+    /**\n+     * Applies to users.\n+     */\n+    PRIVILEGES(\"$privileges\"),\n     /**\n      * Applies to users, groups and any objects.\n      */"},{"sha":"88cdc6bd3c3f957292442d7eb8e70a7d78c2dd82","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/UserFiqlSearchConditionBuilder.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -88,6 +88,18 @@ public CompleteCondition notInRoles(final String role, final String... moreRoles\n                 notInRoles(role, moreRoles);\n     }\n \n+    public CompleteCondition withPrivileges(final String privilege, final String... morePrivileges) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.PRIVILEGES.toString()).\n+                withPrivileges(privilege, morePrivileges);\n+    }\n+\n+    public CompleteCondition withoutPrivileges(final String privilege, final String... morePrivileges) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.PRIVILEGES.toString()).\n+                withoutPrivileges(privilege, morePrivileges);\n+    }\n+\n     protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n             implements UserProperty, CompleteCondition {\n \n@@ -153,5 +165,17 @@ public CompleteCondition notInRoles(final String role, final String... moreRoles\n             this.result = SpecialAttr.ROLES.toString();\n             return condition(FiqlParser.NEQ, role, (Object[]) moreRoles);\n         }\n+\n+        @Override\n+        public CompleteCondition withPrivileges(final String privilege, final String... morePrivileges) {\n+            this.result = SpecialAttr.PRIVILEGES.toString();\n+            return condition(FiqlParser.EQ, privilege, (Object[]) morePrivileges);\n+        }\n+\n+        @Override\n+        public CompleteCondition withoutPrivileges(final String privilege, final String... morePrivileges) {\n+            this.result = SpecialAttr.PRIVILEGES.toString();\n+            return condition(FiqlParser.NEQ, privilege, (Object[]) morePrivileges);\n+        }\n     }\n }"},{"sha":"7ac5be6d21cdaaf1dac9d5ee86ffed2975ff2f4d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/UserProperty.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -38,4 +38,8 @@ public interface UserProperty extends SyncopeProperty {\n \n     CompleteCondition notInRoles(String role, String... moreRoles);\n \n+    CompleteCondition withPrivileges(String privilege, String... morePrivileges);\n+\n+    CompleteCondition withoutPrivileges(String privilege, String... morePrivileges);\n+\n }"},{"sha":"798c0be9db546b3d6a9210290c494e96e09ced4e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ApplicationTO.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FApplicationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FApplicationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FApplicationTO.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"application\")\n+@XmlType\n+public class ApplicationTO extends AbstractBaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = -4117796727736925215L;\n+\n+    private String key;\n+\n+    private String description;\n+\n+    private final List<PrivilegeTO> privileges = new ArrayList<>();\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    @XmlElementWrapper(name = \"privileges\")\n+    @XmlElement(name = \"privilege\")\n+    @JsonProperty(\"privileges\")\n+    public List<PrivilegeTO> getPrivileges() {\n+        return privileges;\n+    }\n+\n+}"},{"sha":"5c9ed8940289caffc29c75f56b2fbdba04f32127","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PrivilegeTO.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPrivilegeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPrivilegeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPrivilegeTO.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"privilege\")\n+@XmlType\n+public class PrivilegeTO extends AbstractBaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = 5461846770586031758L;\n+\n+    private String key;\n+\n+    private String description;\n+\n+    private String application;\n+\n+    private String specMimeType;\n+\n+    private String spec;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    public String getApplication() {\n+        return application;\n+    }\n+\n+    public void setApplication(final String application) {\n+        this.application = application;\n+    }\n+\n+    public String getSpecMimeType() {\n+        return specMimeType;\n+    }\n+\n+    public void setSpecMimeType(final String specMimeType) {\n+        this.specMimeType = specMimeType;\n+    }\n+\n+    public String getSpec() {\n+        return spec;\n+    }\n+\n+    public void setSpec(final String specification) {\n+        this.spec = specification;\n+    }\n+\n+}"},{"sha":"a474b6b6fb99eba0aca5ad7c70d26c713d3aefe2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -46,6 +46,8 @@ public class RoleTO extends AbstractBaseBean implements EntityTO {\n \n     private String dynMembershipCond;\n \n+    private final Set<String> privileges = new HashSet<>();\n+\n     @Override\n     public String getKey() {\n         return key;\n@@ -86,4 +88,11 @@ public void setDynMembershipCond(final String dynMembershipCond) {\n         this.dynMembershipCond = dynMembershipCond;\n     }\n \n+    @XmlElementWrapper(name = \"privileges\")\n+    @XmlElement(name = \"privilege\")\n+    @JsonProperty(\"privileges\")\n+    public Set<String> getPrivileges() {\n+        return privileges;\n+    }\n+\n }"},{"sha":"66873eefaa4bf73c38b42c4cfee9fd5f0e48c763","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -23,8 +23,10 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.Date;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -46,6 +48,8 @@ public class UserTO extends AnyTO implements GroupableRelatableTO {\n \n     private final List<String> dynRoles = new ArrayList<>();\n \n+    private final Set<String> privileges = new HashSet<>();\n+\n     private String token;\n \n     private Date tokenExpireTime;\n@@ -112,6 +116,13 @@ public List<String> getDynRoles() {\n         return dynRoles;\n     }\n \n+    @XmlElementWrapper(name = \"privileges\")\n+    @XmlElement(name = \"privilege\")\n+    @JsonProperty(\"privileges\")\n+    public Set<String> getPrivileges() {\n+        return privileges;\n+    }\n+\n     @Schema(readOnly = true)\n     public String getToken() {\n         return token;"},{"sha":"ada4a1e6260a4db6c09cfda8b6401aa2e6a506e4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -31,6 +31,7 @@ public enum ClientExceptionType {\n     EntityExists(Response.Status.CONFLICT),\n     GenericPersistence(Response.Status.BAD_REQUEST),\n     HasChildren(Response.Status.BAD_REQUEST),\n+    InvalidPrivilege(Response.Status.BAD_REQUEST),\n     InvalidImplementation(Response.Status.BAD_REQUEST),\n     InvalidSecurityAnswer(Response.Status.BAD_REQUEST),\n     InvalidEntity(Response.Status.BAD_REQUEST),"},{"sha":"00a663809a2d89f36e7275b33167de09a21f1b97","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -86,6 +86,16 @@ public final class StandardEntitlement {\n \n     public static final String ROLE_DELETE = \"ROLE_DELETE\";\n \n+    public static final String APPLICATION_LIST = \"APPLICATION_LIST\";\n+\n+    public static final String APPLICATION_CREATE = \"APPLICATION_CREATE\";\n+\n+    public static final String APPLICATION_READ = \"APPLICATION_READ\";\n+\n+    public static final String APPLICATION_UPDATE = \"APPLICATION_UPDATE\";\n+\n+    public static final String APPLICATION_DELETE = \"APPLICATION_DELETE\";\n+\n     public static final String DYNREALM_CREATE = \"DYNREALM_CREATE\";\n \n     public static final String DYNREALM_READ = \"DYNREALM_READ\";"},{"sha":"5f3c893578b3998a389920b6ad35e8db019d3e18","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ApplicationService.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FApplicationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FApplicationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FApplicationService.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.ApplicationTO;\n+import org.apache.syncope.common.lib.to.PrivilegeTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+/**\n+ * REST operations for applications.\n+ */\n+@Tag(name = \"Applications\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\")\n+    ,\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"applications\")\n+public interface ApplicationService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all applications.\n+     *\n+     * @return list of all applications.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    List<ApplicationTO> list();\n+\n+    /**\n+     * Returns application with matching key.\n+     *\n+     * @param key application key to be read\n+     * @return application with matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    ApplicationTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Returns privilege with matching key.\n+     *\n+     * @param key privilege key to be read\n+     * @return privilege with matching key\n+     */\n+    @GET\n+    @Path(\"privileges/{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    PrivilegeTO readPrivilege(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Creates a new application.\n+     *\n+     * @param applicationTO application to be created\n+     * @return Response object featuring Location header of created application\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Application successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                ,\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    Response create(@NotNull ApplicationTO applicationTO);\n+\n+    /**\n+     * Updates the application matching the provided key.\n+     *\n+     * @param applicationTO application to be stored\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    void update(@NotNull ApplicationTO applicationTO);\n+\n+    /**\n+     * Deletes the application matching the provided key.\n+     *\n+     * @param key application key to be deleted\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"8b4db6fd6882a8c20af4e0d0361e9ca5915f227a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":23,"deletions":24,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -61,17 +61,16 @@ public interface UserSelfService extends JAXRSService {\n      * @return calling user data, including own UUID and entitlements\n      */\n     @Operation(security = {\n-        @SecurityRequirement(name = \"BasicAuthentication\")\n-        , @SecurityRequirement(name = \"Bearer\") })\n+        @SecurityRequirement(name = \"BasicAuthentication\"),\n+        @SecurityRequirement(name = \"Bearer\") })\n     @ApiResponses(\n             @ApiResponse(responseCode = \"200\", description = \"Calling user data, including own UUID and entitlements\",\n                     content =\n                     @Content(schema =\n                             @Schema(implementation = UserTO.class)), headers = {\n                 @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n                         @Schema(type = \"string\"),\n-                        description = \"UUID of the calling user\")\n-                ,\n+                        description = \"UUID of the calling user\"),\n                 @Header(name = RESTHeaders.OWNED_ENTITLEMENTS, schema =\n                         @Schema(type = \"string\"),\n                         description = \"List of entitlements owned by the calling user\")\n@@ -101,11 +100,11 @@ public interface UserSelfService extends JAXRSService {\n                             @Schema(implementation = ProvisioningResult.class)), headers = {\n                 @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n                         @Schema(type = \"string\"),\n-                        description = \"UUID generated for the user created\")\n-                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        description = \"UUID generated for the user created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n                         @Schema(type = \"string\"),\n-                        description = \"URL of the user created\")\n-                , @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        description = \"URL of the user created\"),\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n                         description = \"Allows the server to inform the \"\n                         + \"client about the fact that a specified preference was applied\") }))\n@@ -122,8 +121,8 @@ Response create(@NotNull UserTO userTO,\n      * @return Response object featuring the updated user\n      */\n     @Operation(security = {\n-        @SecurityRequirement(name = \"BasicAuthentication\")\n-        , @SecurityRequirement(name = \"Bearer\") })\n+        @SecurityRequirement(name = \"BasicAuthentication\"),\n+        @SecurityRequirement(name = \"Bearer\") })\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n             description = \"Allows client to specify a preference for the result to be returned from the server\",\n             allowEmptyValue = true, schema =\n@@ -133,8 +132,8 @@ Response create(@NotNull UserTO userTO,\n                 description = \"User successfully updated enriched with propagation status information, as Entity\",\n                 content =\n                 @Content(schema =\n-                        @Schema(implementation = ProvisioningResult.class)))\n-        , @ApiResponse(responseCode = \"204\",\n+                        @Schema(implementation = ProvisioningResult.class))),\n+        @ApiResponse(responseCode = \"204\",\n                 description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n@@ -153,8 +152,8 @@ Response create(@NotNull UserTO userTO,\n      * @return Response object featuring the updated user\n      */\n     @Operation(security = {\n-        @SecurityRequirement(name = \"BasicAuthentication\")\n-        , @SecurityRequirement(name = \"Bearer\") })\n+        @SecurityRequirement(name = \"BasicAuthentication\"),\n+        @SecurityRequirement(name = \"Bearer\") })\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n             description = \"Allows client to specify a preference for the result to be returned from the server\",\n             allowEmptyValue = true, schema =\n@@ -164,8 +163,8 @@ Response create(@NotNull UserTO userTO,\n                 description = \"User successfully updated enriched with propagation status information, as Entity\",\n                 content =\n                 @Content(schema =\n-                        @Schema(implementation = ProvisioningResult.class)))\n-        , @ApiResponse(responseCode = \"204\",\n+                        @Schema(implementation = ProvisioningResult.class))),\n+        @ApiResponse(responseCode = \"204\",\n                 description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n@@ -184,8 +183,8 @@ Response create(@NotNull UserTO userTO,\n      * @return Response object featuring the updated user enriched with propagation status information\n      */\n     @Operation(security = {\n-        @SecurityRequirement(name = \"BasicAuthentication\")\n-        , @SecurityRequirement(name = \"Bearer\") })\n+        @SecurityRequirement(name = \"BasicAuthentication\"),\n+        @SecurityRequirement(name = \"Bearer\") })\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n             description = \"Allows client to specify a preference for the result to be returned from the server\",\n             allowEmptyValue = true, schema =\n@@ -195,8 +194,8 @@ Response create(@NotNull UserTO userTO,\n                 description = \"User successfully updated enriched with propagation status information, as Entity\",\n                 content =\n                 @Content(schema =\n-                        @Schema(implementation = ProvisioningResult.class)))\n-        , @ApiResponse(responseCode = \"204\",\n+                        @Schema(implementation = ProvisioningResult.class))),\n+        @ApiResponse(responseCode = \"204\",\n                 description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n@@ -214,8 +213,8 @@ Response create(@NotNull UserTO userTO,\n      * @return Response object featuring the deleted user\n      */\n     @Operation(security = {\n-        @SecurityRequirement(name = \"BasicAuthentication\")\n-        , @SecurityRequirement(name = \"Bearer\") })\n+        @SecurityRequirement(name = \"BasicAuthentication\"),\n+        @SecurityRequirement(name = \"Bearer\") })\n     @DELETE\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     Response delete();\n@@ -228,8 +227,8 @@ Response create(@NotNull UserTO userTO,\n      * @return Response object featuring the updated user\n      */\n     @Operation(security = {\n-        @SecurityRequirement(name = \"BasicAuthentication\")\n-        , @SecurityRequirement(name = \"Bearer\") })\n+        @SecurityRequirement(name = \"BasicAuthentication\"),\n+        @SecurityRequirement(name = \"Bearer\") })\n     @POST\n     @Path(\"changePassword\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"3bb014855e1556388cbf730003a2300d8359a7e0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -54,7 +54,8 @@\n @Tag(name = \"Users\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\")\n-    , @SecurityRequirement(name = \"Bearer\") })\n+    ,\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"users\")\n public interface UserService extends AnyService<UserTO> {\n \n@@ -99,10 +100,12 @@ public interface UserService extends AnyService<UserTO> {\n                 @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n                         @Schema(type = \"string\"),\n                         description = \"UUID generated for the user created\")\n-                , @Header(name = HttpHeaders.LOCATION, schema =\n+                ,\n+                @Header(name = HttpHeaders.LOCATION, schema =\n                         @Schema(type = \"string\"),\n                         description = \"URL of the user created\")\n-                , @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                ,\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n                         description = \"Allows the server to inform the \"\n                         + \"client about the fact that a specified preference was applied\") }))\n@@ -139,13 +142,15 @@ Response create(\n                 content =\n                 @Content(schema =\n                         @Schema(implementation = ProvisioningResult.class)))\n-        , @ApiResponse(responseCode = \"204\",\n+        ,\n+        @ApiResponse(responseCode = \"204\",\n                 description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n                         description = \"Allows the server to inform the \"\n                         + \"client about the fact that a specified preference was applied\"))\n-        , @ApiResponse(responseCode = \"412\",\n+        ,\n+        @ApiResponse(responseCode = \"412\",\n                 description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n                 + \" date of the entity\") })\n     @PATCH\n@@ -188,7 +193,8 @@ Response create(\n                         @Schema(type = \"string\"),\n                         description = \"Allows the server to inform the \"\n                         + \"client about the fact that a specified preference was applied\"))\n-        , @ApiResponse(responseCode = \"412\",\n+        ,\n+        @ApiResponse(responseCode = \"412\",\n                 description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n                 + \" date of the entity\") })\n     @PUT\n@@ -224,13 +230,15 @@ Response create(\n                 content =\n                 @Content(schema =\n                         @Schema(implementation = ProvisioningResult.class)))\n-        , @ApiResponse(responseCode = \"204\",\n+        ,\n+        @ApiResponse(responseCode = \"204\",\n                 description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n                         description = \"Allows the server to inform the \"\n                         + \"client about the fact that a specified preference was applied\"))\n-        , @ApiResponse(responseCode = \"412\",\n+        ,\n+        @ApiResponse(responseCode = \"412\",\n                 description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n                 + \" date of the entity\") })\n     @POST"},{"sha":"e25f532615250957353d7978301933a385d87260","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ApplicationLogic.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.ApplicationTO;\n+import org.apache.syncope.common.lib.to.PrivilegeTO;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+import org.apache.syncope.core.provisioning.api.data.ApplicationDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class ApplicationLogic extends AbstractTransactionalLogic<ApplicationTO> {\n+\n+    @Autowired\n+    private ApplicationDataBinder binder;\n+\n+    @Autowired\n+    private ApplicationDAO applicationDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public ApplicationTO read(final String key) {\n+        Application application = applicationDAO.find(key);\n+        if (application == null) {\n+            LOG.error(\"Could not find application '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        return binder.getApplicationTO(application);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public PrivilegeTO readPrivilege(final String key) {\n+        Privilege privilege = applicationDAO.findPrivilege(key);\n+        if (privilege == null) {\n+            LOG.error(\"Could not find privilege '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        return binder.getPrivilegeTO(privilege);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_LIST + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<ApplicationTO> list() {\n+        return applicationDAO.findAll().stream().\n+                map(application -> binder.getApplicationTO(application)).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_CREATE + \"')\")\n+    public ApplicationTO create(final ApplicationTO applicationTO) {\n+        return binder.getApplicationTO(applicationDAO.save(binder.create(applicationTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_UPDATE + \"')\")\n+    public ApplicationTO update(final ApplicationTO applicationTO) {\n+        Application application = applicationDAO.find(applicationTO.getKey());\n+        if (application == null) {\n+            LOG.error(\"Could not find application '\" + applicationTO.getKey() + \"'\");\n+            throw new NotFoundException(applicationTO.getKey());\n+        }\n+\n+        return binder.getApplicationTO(applicationDAO.save(binder.update(application, applicationTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_DELETE + \"')\")\n+    public ApplicationTO delete(final String key) {\n+        Application application = applicationDAO.find(key);\n+        if (application == null) {\n+            LOG.error(\"Could not find application '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        ApplicationTO deleted = binder.getApplicationTO(application);\n+        applicationDAO.delete(key);\n+        return deleted;\n+    }\n+\n+    @Override\n+    protected ApplicationTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof ApplicationTO) {\n+                    key = ((ApplicationTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getApplicationTO(applicationDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"d094652c2dc3a3a77e5234b6b003fcfbf5463057","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -27,7 +27,6 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n@@ -81,7 +80,7 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public Pair<String, UserTO> selfRead() {\n-        return ImmutablePair.of(\n+        return Pair.of(\n                 POJOHelper.serialize(AuthContextUtils.getAuthorizations()),\n                 binder.returnUserTO(binder.getAuthenticatedUserTO()));\n     }"},{"sha":"e46667c02877520af169dd0708b9e840e9d2981b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ApplicationDAO.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FApplicationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FApplicationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FApplicationDAO.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+\n+public interface ApplicationDAO extends DAO<Application> {\n+\n+    Application find(String key);\n+\n+    Privilege findPrivilege(String key);\n+\n+    List<Application> findAll();\n+\n+    Application save(Application application);\n+\n+    void delete(Application application);\n+\n+    void delete(String key);\n+\n+}"},{"sha":"0d6aea1f15bf329d315bea8af6f36ec3f42169ae","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RoleDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -31,6 +32,8 @@ public interface RoleDAO extends DAO<Role> {\n \n     List<Role> findByRealm(Realm realm);\n \n+    List<Role> findByPrivilege(Privilege privilege);\n+\n     List<Role> findAll();\n \n     Role save(Role role);"},{"sha":"1647cdbe2921c075e7605b8be841f35f83d1787c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/PrivilegeCond.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FPrivilegeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FPrivilegeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FPrivilegeCond.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.search;\n+\n+public class PrivilegeCond extends AbstractSearchCond {\n+\n+    private static final long serialVersionUID = -8095105031495519762L;\n+\n+    private String privilege;\n+\n+    public String getPrivilege() {\n+        return privilege;\n+    }\n+\n+    public void setPrivilege(final String privilege) {\n+        this.privilege = privilege;\n+    }\n+\n+    @Override\n+    public final boolean isValid() {\n+        return privilege != null;\n+    }\n+}"},{"sha":"bb1dfa2fdcb6c9fdc3080c24190b01feedbd0306","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -49,6 +49,8 @@ public enum Type {\n \n     private RoleCond roleCond;\n \n+    private PrivilegeCond privilegeCond;\n+\n     private DynRealmCond dynRealmCond;\n \n     private ResourceCond resourceCond;\n@@ -119,6 +121,15 @@ public static SearchCond getLeafCond(final RoleCond roleCond) {\n         return nodeCond;\n     }\n \n+    public static SearchCond getLeafCond(final PrivilegeCond privilegeCond) {\n+        SearchCond nodeCond = new SearchCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.privilegeCond = privilegeCond;\n+\n+        return nodeCond;\n+    }\n+\n     public static SearchCond getLeafCond(final DynRealmCond dynRealmCond) {\n         SearchCond nodeCond = new SearchCond();\n \n@@ -179,6 +190,12 @@ public static SearchCond getNotLeafCond(final RoleCond roleCond) {\n         return nodeCond;\n     }\n \n+    public static SearchCond getNotLeafCond(final PrivilegeCond privilegeCond) {\n+        SearchCond nodeCond = getLeafCond(privilegeCond);\n+        nodeCond.type = Type.NOT_LEAF;\n+        return nodeCond;\n+    }\n+\n     public static SearchCond getNotLeafCond(final ResourceCond resourceCond) {\n         SearchCond nodeCond = getLeafCond(resourceCond);\n         nodeCond.type = Type.NOT_LEAF;\n@@ -306,6 +323,10 @@ public RoleCond getRoleCond() {\n         return roleCond;\n     }\n \n+    public PrivilegeCond getPrivilegeCond() {\n+        return privilegeCond;\n+    }\n+\n     public DynRealmCond getDynRealmCond() {\n         return dynRealmCond;\n     }\n@@ -347,12 +368,14 @@ public boolean isValid() {\n             case NOT_LEAF:\n                 isValid = (anyTypeCond != null || anyCond != null || attributeCond != null || dynRealmCond != null\n                         || relationshipCond != null || relationshipTypeCond != null || membershipCond != null\n-                        || roleCond != null || resourceCond != null || assignableCond != null || memberCond != null)\n+                        || roleCond != null || privilegeCond != null || resourceCond != null\n+                        || assignableCond != null || memberCond != null)\n                         && (anyTypeCond == null || anyTypeCond.isValid())\n                         && (anyCond == null || anyCond.isValid())\n                         && (attributeCond == null || attributeCond.isValid())\n                         && (membershipCond == null || membershipCond.isValid())\n                         && (roleCond == null || roleCond.isValid())\n+                        && (privilegeCond == null || privilegeCond.isValid())\n                         && (resourceCond == null || resourceCond.isValid())\n                         && (memberCond == null || memberCond.isValid());\n                 break;"},{"sha":"525d02a684f30e72d300255caca79b1887ca1be7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Application.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FApplication.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public interface Application extends ProvidedKeyEntity {\n+\n+    String getDescription();\n+\n+    void setDescription(String description);\n+\n+    boolean add(Privilege privilege);\n+\n+    Optional<? extends Privilege> getPrivilege(String key);\n+\n+    List<? extends Privilege> getPrivileges();\n+}"},{"sha":"44744e6342ab3f1c1dcce7d2e5b421f0b6d2c3be","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Privilege.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPrivilege.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPrivilege.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPrivilege.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface Privilege extends ProvidedKeyEntity {\n+\n+    Application getApplication();\n+\n+    void setApplication(Application application);\n+\n+    String getDescription();\n+\n+    void setDescription(String description);\n+\n+    String getSpecMimeType();\n+\n+    void setSpecMimeType(String specMimeType);\n+\n+    byte[] getSpec();\n+\n+    void setSpec(byte[] spec);\n+}"},{"sha":"619c2285e846de23cb114611be495b599bc651bd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -41,4 +41,8 @@ public interface Role extends ProvidedKeyEntity {\n     String getConsoleLayoutInfo();\n \n     void setConsoleLayoutInfo(String consoleLayoutInfo);\n+\n+    boolean add(Privilege privilege);\n+\n+    Set<? extends Privilege> getPrivileges();\n }"},{"sha":"103d3d6c54b0cdd34e4118ad6748493e808ad8b4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n+import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n \n@@ -159,6 +160,12 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                             leaf = SearchCond.getLeafCond(roleCond);\n                             break;\n \n+                        case PRIVILEGES:\n+                            PrivilegeCond privilegeCond = new PrivilegeCond();\n+                            privilegeCond.setPrivilege(value);\n+                            leaf = SearchCond.getLeafCond(privilegeCond);\n+                            break;\n+\n                         case DYNREALMS:\n                             DynRealmCond dynRealmCond = new DynRealmCond();\n                             dynRealmCond.setDynRealm(value);"},{"sha":"8e4946ce7c6718ac8b3b123c7e27e3b717e0626b","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n+import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.junit.jupiter.api.Test;\n@@ -198,6 +199,18 @@ public void roles() {\n         assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n+    @Test\n+    public void privileges() {\n+        String fiql = new UserFiqlSearchConditionBuilder().withPrivileges(\"postMighty\").query();\n+        assertEquals(SpecialAttr.PRIVILEGES + \"==postMighty\", fiql);\n+\n+        PrivilegeCond privilegeCond = new PrivilegeCond();\n+        privilegeCond.setPrivilege(\"postMighty\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(privilegeCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+    }\n+\n     @Test\n     public void dynRealms() {\n         String dynRealm = UUID.randomUUID().toString();"},{"sha":"0211404be8b7fb6f530edba0cbbe520f0cbe1ff7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -108,7 +108,7 @@ private void createViews(final String domain, final DataSource dataSource) throw\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n \n         Properties views = PropertiesLoaderUtils.loadProperties(viewsXML.getResource());\n-        views.stringPropertyNames().stream().forEach(idx -> {\n+        views.stringPropertyNames().stream().sorted().forEachOrdered(idx -> {\n             LOG.debug(\"[{}] Creating view {}\", domain, views.get(idx).toString());\n             try {\n                 jdbcTemplate.execute(views.get(idx).toString().replaceAll(\"\\\\n\", \" \"));\n@@ -126,7 +126,7 @@ private void createIndexes(final String domain, final DataSource dataSource) thr\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n \n         Properties indexes = PropertiesLoaderUtils.loadProperties(indexesXML.getResource());\n-        indexes.stringPropertyNames().stream().forEach(idx -> {\n+        indexes.stringPropertyNames().stream().sorted().forEachOrdered(idx -> {\n             LOG.debug(\"[{}] Creating index {}\", domain, indexes.get(idx).toString());\n             try {\n                 jdbcTemplate.execute(indexes.get(idx).toString());"},{"sha":"7d0ba9f247d34ea487f4ea638152a4e250cf739e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":39,"deletions":4,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n+import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -70,7 +71,7 @@ private Pair<String, Set<String>> getAdminRealmsFilter(\n \n         Set<String> realmKeys = new HashSet<>();\n         Set<String> dynRealmKeys = new HashSet<>();\n-        for (String realmPath : RealmUtils.normalize(adminRealms)) {\n+        RealmUtils.normalize(adminRealms).forEach(realmPath -> {\n             if (realmPath.startsWith(\"/\")) {\n                 Realm realm = realmDAO.findByFullPath(realmPath);\n                 if (realm == null) {\n@@ -89,7 +90,7 @@ private Pair<String, Set<String>> getAdminRealmsFilter(\n                     dynRealmKeys.add(dynRealm.getKey());\n                 }\n             }\n-        }\n+        });\n         if (!dynRealmKeys.isEmpty()) {\n             realmKeys.addAll(realmDAO.findAll().stream().\n                     map(r -> r.getKey()).collect(Collectors.toSet()));\n@@ -366,6 +367,9 @@ private StringBuilder getQuery(final SearchCond cond, final List<Object> paramet\n                 } else if (cond.getRoleCond() != null && AnyTypeKind.USER == svs.anyTypeKind) {\n                     query.append(getQuery(cond.getRoleCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (cond.getPrivilegeCond() != null && AnyTypeKind.USER == svs.anyTypeKind) {\n+                    query.append(getQuery(cond.getPrivilegeCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (cond.getDynRealmCond() != null) {\n                     query.append(getQuery(cond.getDynRealmCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n@@ -549,6 +553,37 @@ private String getQuery(\n         return query.toString();\n     }\n \n+    private String getQuery(\n+            final PrivilegeCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.field().name).append(\" WHERE (\");\n+\n+        if (not) {\n+            query.append(\"any_id NOT IN (\");\n+        } else {\n+            query.append(\"any_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.priv().name).append(\" WHERE \").\n+                append(\"privilege_id=?\").append(setParameter(parameters, cond.getPrivilege())).\n+                append(\") \");\n+\n+        if (not) {\n+            query.append(\"AND any_id NOT IN (\");\n+        } else {\n+            query.append(\"OR any_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.dynpriv().name).append(\" WHERE \").\n+                append(\"privilege_id=?\").append(setParameter(parameters, cond.getPrivilege())).\n+                append(\"))\");\n+\n+        return query.toString();\n+    }\n+\n     private String getQuery(\n             final DynRealmCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n@@ -609,9 +644,9 @@ private String getQuery(final AssignableCond cond, final List<Object> parameters\n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n         if (cond.isFromGroup()) {\n-            for (Realm current : realmDAO.findDescendants(realm)) {\n+            realmDAO.findDescendants(realm).forEach(current -> {\n                 query.append(\"realm_id=?\").append(setParameter(parameters, current.getKey())).append(\" OR \");\n-            }\n+            });\n             query.setLength(query.length() - 4);\n         } else {\n             for (Realm current = realm; current.getParent() != null; current = current.getParent()) {"},{"sha":"dd6958d4cd91a3a013ac8fd13b02fd3b24df94eb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAApplicationDAO.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAApplication;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPrivilege;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAApplicationDAO extends AbstractDAO<Application> implements ApplicationDAO {\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Override\n+    public Application find(final String key) {\n+        return entityManager().find(JPAApplication.class, key);\n+    }\n+\n+    @Override\n+    public Privilege findPrivilege(final String key) {\n+        return entityManager().find(JPAPrivilege.class, key);\n+    }\n+\n+    @Override\n+    public List<Application> findAll() {\n+        TypedQuery<Application> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAApplication.class.getSimpleName() + \" e \", Application.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Application save(final Application application) {\n+        return entityManager().merge(application);\n+    }\n+\n+    @Override\n+    public void delete(final Application application) {\n+        application.getPrivileges().forEach(privilege -> {\n+            roleDAO.findByPrivilege(privilege).forEach(role -> {\n+                role.getPrivileges().remove(privilege);\n+            });\n+\n+            privilege.setApplication(null);\n+        });\n+        application.getPrivileges().clear();\n+\n+        entityManager().remove(application);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        Application application = find(key);\n+        if (application == null) {\n+            return;\n+        }\n+\n+        delete(application);\n+    }\n+\n+}"},{"sha":"dda23b22dd6ab1bc001278302c887c5722a5eefd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":27,"deletions":19,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -79,6 +80,15 @@ public List<Role> findByRealm(final Realm realm) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<Role> findByPrivilege(final Privilege privilege) {\n+        TypedQuery<Role> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e WHERE :privilege MEMBER OF e.privileges\",\n+                Role.class);\n+        query.setParameter(\"privilege\", privilege);\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<Role> findAll() {\n         TypedQuery<Role> query = entityManager().createQuery(\n@@ -97,14 +107,14 @@ public Role save(final Role role) {\n \n             clearDynMembers(merged);\n \n-            for (User user : matching) {\n+            matching.forEach((user) -> {\n                 Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n                 insert.setParameter(1, user.getKey());\n                 insert.setParameter(2, merged.getKey());\n                 insert.executeUpdate();\n \n                 publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));\n-            }\n+            });\n         }\n \n         return merged;\n@@ -116,10 +126,10 @@ public void delete(final Role role) {\n                 \"SELECT e FROM \" + JPAUser.class.getSimpleName() + \" e WHERE :role MEMBER OF e.roles\", User.class);\n         query.setParameter(\"role\", role);\n \n-        for (User user : query.getResultList()) {\n+        query.getResultList().forEach(user -> {\n             user.getRoles().remove(role);\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));\n-        }\n+        });\n \n         clearDynMembers(role);\n \n@@ -166,22 +176,20 @@ public void clearDynMembers(final Role role) {\n     @Transactional\n     @Override\n     public void refreshDynMemberships(final User user) {\n-        for (Role role : findAll()) {\n-            if (role.getDynMembership() != null) {\n-                Query delete = entityManager().createNativeQuery(\n-                        \"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE role_id=? AND any_id=?\");\n-                delete.setParameter(1, role.getKey());\n-                delete.setParameter(2, user.getKey());\n-                delete.executeUpdate();\n-\n-                if (searchDAO().matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {\n-                    Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n-                    insert.setParameter(1, user.getKey());\n-                    insert.setParameter(2, role.getKey());\n-                    insert.executeUpdate();\n-                }\n+        findAll().stream().filter(role -> role.getDynMembership() != null).forEach(role -> {\n+            Query delete = entityManager().createNativeQuery(\n+                    \"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE role_id=? AND any_id=?\");\n+            delete.setParameter(1, role.getKey());\n+            delete.setParameter(2, user.getKey());\n+            delete.executeUpdate();\n+\n+            if (searchDAO().matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {\n+                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                insert.setParameter(1, user.getKey());\n+                insert.setParameter(2, role.getKey());\n+                insert.executeUpdate();\n             }\n-        }\n+        });\n     }\n \n     @Override"},{"sha":"aa65aea7187933fad0adf04004939d60c7c4f0d1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -131,6 +131,14 @@ public SearchView role() {\n         return new SearchView(\"svr\", field().name + \"_role\");\n     }\n \n+    public SearchView priv() {\n+        return new SearchView(\"svp\", field().name + \"_priv\");\n+    }\n+\n+    public SearchView dynpriv() {\n+        return new SearchView(\"svdp\", field().name + \"_dynpriv\");\n+    }\n+\n     public SearchView dynrolemembership() {\n         return new SearchView(\"svdr\", JPARoleDAO.DYNMEMB_TABLE);\n     }"},{"sha":"0b5f0937ece2a6bc32af5dc86c18aad2fb2f3c1f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAApplication.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAApplication.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+\n+@Entity\n+@Table(name = JPAApplication.TABLE)\n+public class JPAApplication extends AbstractProvidedKeyEntity implements Application {\n+\n+    private static final long serialVersionUID = -5951400197744722305L;\n+\n+    public static final String TABLE = \"Application\";\n+\n+    private String description;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"application\")\n+    private List<JPAPrivilege> privileges = new ArrayList<>();\n+\n+    @Override\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public boolean add(final Privilege privilege) {\n+        checkType(privilege, JPAPrivilege.class);\n+        return privileges.contains((JPAPrivilege) privilege) || privileges.add((JPAPrivilege) privilege);\n+    }\n+\n+    @Override\n+    public Optional<? extends Privilege> getPrivilege(final String key) {\n+        return privileges.stream().filter(privilege -> privilege.getKey().equals(key)).findFirst();\n+    }\n+\n+    @Override\n+    public List<? extends Privilege> getPrivileges() {\n+        return privileges;\n+    }\n+\n+}"},{"sha":"aa2809ab35a4e6eadce014ef312d94317ed1f805","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.Application;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n@@ -128,6 +129,7 @@\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n@@ -171,6 +173,10 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAAnyObject();\n         } else if (reference.equals(Role.class)) {\n             result = (E) new JPARole();\n+        } else if (reference.equals(Application.class)) {\n+            result = (E) new JPAApplication();\n+        } else if (reference.equals(Privilege.class)) {\n+            result = (E) new JPAPrivilege();\n         } else if (reference.equals(User.class)) {\n             result = (E) new JPAUser();\n         } else if (reference.equals(Group.class)) {"},{"sha":"a01bb5f59d77f0de4be8bb4db9511015aa22642a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPrivilege.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPrivilege.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPrivilege.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPrivilege.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+\n+@Entity\n+@Table(name = JPAPrivilege.TABLE)\n+public class JPAPrivilege extends AbstractProvidedKeyEntity implements Privilege {\n+\n+    private static final long serialVersionUID = -6479069294944858456L;\n+\n+    public static final String TABLE = \"Privilege\";\n+\n+    @ManyToOne\n+    private JPAApplication application;\n+\n+    private String description;\n+\n+    @NotNull\n+    private String specMimeType;\n+\n+    @Lob\n+    private byte[] spec;\n+\n+    @Override\n+    public Application getApplication() {\n+        return application;\n+    }\n+\n+    @Override\n+    public void setApplication(final Application application) {\n+        checkType(application, JPAApplication.class);\n+        this.application = (JPAApplication) application;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public String getSpecMimeType() {\n+        return specMimeType;\n+    }\n+\n+    @Override\n+    public void setSpecMimeType(final String specMimeType) {\n+        this.specMimeType = specMimeType;\n+    }\n+\n+    @Override\n+    public byte[] getSpec() {\n+        return spec;\n+    }\n+\n+    @Override\n+    public void setSpec(final byte[] spec) {\n+        this.spec = ArrayUtils.clone(spec);\n+    }\n+\n+}"},{"sha":"728c360157328f103989bd525123ad1235a65b93","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.validation.entity.RoleCheck;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n \n @Entity\n @Table(name = JPARole.TABLE)\n@@ -83,6 +84,14 @@ public class JPARole extends AbstractProvidedKeyEntity implements Role {\n     @Lob\n     private String consoleLayoutInfo;\n \n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"role_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"privilege_id\"))\n+    @Valid\n+    private Set<JPAPrivilege> privileges = new HashSet<>();\n+\n     @Override\n     public Set<String> getEntitlements() {\n         return entitlements;\n@@ -131,4 +140,15 @@ public void setConsoleLayoutInfo(final String consoleLayoutInfo) {\n         this.consoleLayoutInfo = consoleLayoutInfo;\n     }\n \n+    @Override\n+    public boolean add(final Privilege privilege) {\n+        checkType(privilege, JPAPrivilege.class);\n+        return privileges.add((JPAPrivilege) privilege);\n+    }\n+\n+    @Override\n+    public Set<? extends Privilege> getPrivileges() {\n+        return privileges;\n+    }\n+\n }"},{"sha":"37fd4315503e949c98ef17e57c310ccaa8009c84","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -111,6 +111,20 @@ under the License.\n     SELECT ss.user_id AS any_id, ss.role_id AS role_id\n     FROM SyncopeUser_SyncopeRole ss\n   </entry>\n+  <entry key=\"user_search_priv\">\n+    CREATE VIEW user_search_priv AS\n+\n+    SELECT ss.user_id AS any_id, sp.privilege_id AS privilege_id\n+    FROM SyncopeUser_SyncopeRole ss, SyncopeRole_Privilege sp\n+    WHERE ss.role_id = sp.role_id\n+  </entry>\n+  <entry key=\"user_search_dynpriv\">\n+    CREATE VIEW user_search_dynpriv AS\n+\n+    SELECT any_id, privilege_id\n+    FROM DynRoleMembers drm, SyncopeRole_Privilege rp\n+    WHERE drm.role_id = rp.role_id\n+  </entry>\n   <entry key=\"user_search_resource\">\n     CREATE VIEW user_search_resource AS\n "},{"sha":"bac5f532d5e4540d3245d8a64e1e53e0e36f2ab1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n+import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -110,6 +111,10 @@ public void userMatch() {\n         roleCond.setRole(\"Other\");\n         assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(roleCond)));\n \n+        PrivilegeCond privilegeCond = new PrivilegeCond();\n+        privilegeCond.setPrivilege(\"postMighty\");\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(privilegeCond)));\n+\n         user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n         assertNotNull(user);\n \n@@ -302,6 +307,16 @@ public void searchByRole() {\n         assertEquals(1, users.size());\n     }\n \n+    @Test\n+    public void searchByPrivilege() {\n+        PrivilegeCond privilegeCond = new PrivilegeCond();\n+        privilegeCond.setPrivilege(\"postMighty\");\n+\n+        List<User> users = searchDAO.search(SearchCond.getLeafCond(privilegeCond), AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+    }\n+\n     @Test\n     public void searchByIsNull() {\n         AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.ISNULL);"},{"sha":"ab5da9211b7ce8d4ffab1e510d17b06d1ea29739","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ApplicationTest.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FApplicationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FApplicationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FApplicationTest.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class ApplicationTest extends AbstractTest {\n+\n+    @Autowired\n+    private ApplicationDAO applicationDAO;\n+\n+    @Test\n+    public void findAll() {\n+        List<Application> applications = applicationDAO.findAll();\n+        assertFalse(applications.isEmpty());\n+        assertEquals(1, applications.size());\n+    }\n+\n+    @Test\n+    public void find() {\n+        Application mightyApp = applicationDAO.find(\"mightyApp\");\n+        assertNotNull(mightyApp);\n+        assertEquals(2, mightyApp.getPrivileges().size());\n+\n+        Privilege getMighty = applicationDAO.findPrivilege(\"getMighty\");\n+        assertNotNull(getMighty);\n+        assertEquals(getMighty, mightyApp.getPrivilege(\"getMighty\").get());\n+\n+    }\n+\n+    @Test\n+    public void crud() {\n+        // 1. create application\n+        Application application = entityFactory.newEntity(Application.class);\n+        application.setKey(UUID.randomUUID().toString());\n+\n+        String privilege1Key = UUID.randomUUID().toString();\n+        Privilege privilege = entityFactory.newEntity(Privilege.class);\n+        privilege.setKey(privilege1Key);\n+        privilege.setSpecMimeType(\"application/xml\");\n+        privilege.setSpec(\"<one/>\".getBytes());\n+        application.add(privilege);\n+\n+        String privilege2Key = UUID.randomUUID().toString();\n+        privilege = entityFactory.newEntity(Privilege.class);\n+        privilege.setKey(privilege2Key);\n+        privilege.setSpecMimeType(\"application/xml\");\n+        privilege.setSpec(\"<one><two/></one>\".getBytes());\n+        application.add(privilege);\n+\n+        String privilege3Key = UUID.randomUUID().toString();\n+        privilege = entityFactory.newEntity(Privilege.class);\n+        privilege.setKey(privilege3Key);\n+        privilege.setSpecMimeType(\"application/xml\");\n+        privilege.setSpec(\"<one><two><three/></two></one>\".getBytes());\n+        application.add(privilege);\n+\n+        application = applicationDAO.save(application);\n+        assertNotNull(application);\n+        assertNull(application.getDescription());\n+        assertEquals(3, application.getPrivileges().size());\n+\n+        // 2. update application\n+        application.setDescription(\"A description\");\n+\n+        Privilege priv3 = applicationDAO.findPrivilege(privilege3Key);\n+        priv3.setApplication(null);\n+        application.getPrivileges().remove(priv3);\n+        assertEquals(2, application.getPrivileges().size());\n+\n+        applicationDAO.save(application);\n+\n+        applicationDAO.flush();\n+\n+        application = applicationDAO.find(application.getKey());\n+        assertNotNull(application);\n+        assertNotNull(application.getDescription());\n+        assertEquals(2, application.getPrivileges().size());\n+\n+        // 3. delete application\n+        applicationDAO.delete(application);\n+\n+        applicationDAO.flush();\n+\n+        assertNull(applicationDAO.find(application.getKey()));\n+        assertNull(applicationDAO.findPrivilege(privilege1Key));\n+        assertNull(applicationDAO.findPrivilege(privilege2Key));\n+    }\n+}"},{"sha":"f68e9aa0f208291dae408cfcbccb92742e7ec874","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -235,6 +235,16 @@ under the License.\n                  left_anyObject_id=\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\"\n                  right_anyObject_id=\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\"/>\n   \n+  <Application id=\"mightyApp\" description=\"A cool application\"/>\n+  <Privilege id=\"postMighty\" description=\"Ability to POST\"\n+             spec=\"7B20226D6574686F64223A2022504F5354222C202275726C223A20222F612F622F6322207D\"\n+             specmimetype=\"application/json\"\n+             application_id=\"mightyApp\"/>\n+  <Privilege id=\"getMighty\" description=\"Ability to GET\"\n+             spec=\"7B20226D6574686F64223A2022474554222C202275726C223A20222F612F622F6322207D\"\n+             specmimetype=\"application/json\"\n+             application_id=\"mightyApp\"/>\n+\n   <SyncopeRole id=\"User reviewer\"/>\n   <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"User reviewer\"/>\n   <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_id=\"User reviewer\"/>\n@@ -263,6 +273,7 @@ under the License.\n   <SyncopeRole_entitlements entitlement=\"GROUP_READ\" role_id=\"Other\"/>\n   <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"Other\"/>\n   <SyncopeRole_Realm role_id=\"Other\" realm_id=\"722f3d84-9c2b-4525-8f6e-e4b82c55a36c\"/>\n+  <SyncopeRole_Privilege role_id=\"Other\" privilege_id=\"postMighty\"/>\n   \n   <SyncopeRole id=\"Search for realm evenTwo\"/>\n   <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"Search for realm evenTwo\"/>"},{"sha":"c8b779563439adfc8a758e65ce11b23b09343e27","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ApplicationDataBinder.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FApplicationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FApplicationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FApplicationDataBinder.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.ApplicationTO;\n+import org.apache.syncope.common.lib.to.PrivilegeTO;\n+import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+\n+public interface ApplicationDataBinder {\n+\n+    Application create(ApplicationTO applicationTO);\n+\n+    Application update(Application application, ApplicationTO applicationTO);\n+\n+    PrivilegeTO getPrivilegeTO(Privilege privilege);\n+\n+    ApplicationTO getApplicationTO(Application application);\n+}"},{"sha":"635ba57e13b697e5c230377ced250483557131a1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ApplicationDataBinderImpl.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FApplicationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FApplicationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FApplicationDataBinderImpl.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ApplicationTO;\n+import org.apache.syncope.common.lib.to.PrivilegeTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+import org.apache.syncope.core.provisioning.api.data.ApplicationDataBinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ApplicationDataBinderImpl implements ApplicationDataBinder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ApplicationDataBinder.class);\n+\n+    @Autowired\n+    private ApplicationDAO applicationDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public Application create(final ApplicationTO applicationTO) {\n+        return update(entityFactory.newEntity(Application.class), applicationTO);\n+    }\n+\n+    @Override\n+    public Application update(final Application toBeUpdated, final ApplicationTO applicationTO) {\n+        toBeUpdated.setKey(applicationTO.getKey());\n+        Application application = applicationDAO.save(toBeUpdated);\n+\n+        application.setDescription(applicationTO.getDescription());\n+\n+        // 1. add or update all (valid) privileges from TO\n+        applicationTO.getPrivileges().forEach(privilegeTO -> {\n+            if (privilegeTO == null) {\n+                LOG.error(\"Null {}\", PrivilegeTO.class.getSimpleName());\n+            } else {\n+                Privilege privilege = applicationDAO.findPrivilege(privilegeTO.getKey());\n+                if (privilege == null) {\n+                    privilege = entityFactory.newEntity(Privilege.class);\n+                    privilege.setKey(privilegeTO.getKey());\n+                    privilege.setApplication(application);\n+\n+                    application.add(privilege);\n+                } else if (!application.equals(privilege.getApplication())) {\n+                    SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPrivilege);\n+                    sce.getElements().add(\n+                            \"Privilege \" + privilege.getKey() + \" already owned by \" + privilege.getApplication());\n+                    throw sce;\n+                }\n+\n+                privilege.setDescription(privilegeTO.getDescription());\n+                privilege.setSpecMimeType(privilegeTO.getSpecMimeType());\n+                privilege.setSpec(Base64.getDecoder().decode(privilegeTO.getSpec()));\n+            }\n+        });\n+\n+        // 2. remove all privileges not contained in the TO\n+        for (Iterator<? extends Privilege> itor = application.getPrivileges().iterator(); itor.hasNext();) {\n+            Privilege privilege = itor.next();\n+            if (!applicationTO.getPrivileges().stream().\n+                    anyMatch(privilegeTO -> privilege.getKey().equals(privilegeTO.getKey()))) {\n+\n+                privilege.setApplication(null);\n+                itor.remove();\n+            }\n+        }\n+\n+        return application;\n+    }\n+\n+    @Override\n+    public PrivilegeTO getPrivilegeTO(final Privilege privilege) {\n+        PrivilegeTO privilegeTO = new PrivilegeTO();\n+        privilegeTO.setKey(privilege.getKey());\n+        privilegeTO.setDescription(privilege.getDescription());\n+        privilegeTO.setApplication(privilege.getApplication().getKey());\n+        privilegeTO.setSpecMimeType(privilege.getSpecMimeType());\n+        privilegeTO.setSpec(Base64.getEncoder().encodeToString(privilege.getSpec()));\n+        return privilegeTO;\n+    }\n+\n+    @Override\n+    public ApplicationTO getApplicationTO(final Application application) {\n+        ApplicationTO applicationTO = new ApplicationTO();\n+\n+        applicationTO.setKey(application.getKey());\n+        applicationTO.setDescription(application.getDescription());\n+        applicationTO.getPrivileges().addAll(\n+                application.getPrivileges().stream().map(privilege -> getPrivilegeTO(privilege)).\n+                        collect(Collectors.toList()));\n+\n+        return applicationTO;\n+    }\n+\n+}"},{"sha":"25717d30b66deee958216e28ad3d599fe0372df2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -22,13 +22,16 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n@@ -52,6 +55,9 @@ public class RoleDataBinderImpl implements RoleDataBinder {\n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @Autowired\n+    private ApplicationDAO applicationDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -123,6 +129,16 @@ public Role update(final Role toBeUpdated, final RoleTO roleTO) {\n             setDynMembership(role, roleTO.getDynMembershipCond());\n         }\n \n+        role.getPrivileges().clear();\n+        for (String key : roleTO.getPrivileges()) {\n+            Privilege privilege = applicationDAO.findPrivilege(key);\n+            if (privilege == null) {\n+                LOG.debug(\"Invalid privilege {}, ignoring\", key);\n+            } else {\n+                role.add(privilege);\n+            }\n+        }\n+\n         return role;\n     }\n \n@@ -134,15 +150,18 @@ public RoleTO getRoleTO(final Role role) {\n         roleTO.getEntitlements().addAll(role.getEntitlements());\n \n         roleTO.getRealms().addAll(role.getRealms().stream().\n-                map(r -> r.getFullPath()).collect(Collectors.toList()));\n+                map(Realm::getFullPath).collect(Collectors.toList()));\n \n         roleTO.getDynRealms().addAll(role.getDynRealms().stream().\n-                map(r -> r.getKey()).collect(Collectors.toList()));\n+                map(Entity::getKey).collect(Collectors.toList()));\n \n         if (role.getDynMembership() != null) {\n             roleTO.setDynMembershipCond(role.getDynMembership().getFIQLCond());\n         }\n \n+        roleTO.getPrivileges().addAll(role.getPrivileges().stream().\n+                map(Entity::getKey).collect(Collectors.toList()));\n+\n         return roleTO;\n     }\n "},{"sha":"6cffa6bb5662b1e03d874b91430ab1518fcd6246","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -603,7 +603,15 @@ public UserTO getUserTO(final User user, final boolean details) {\n             userTO.getDynRealms().addAll(userDAO.findDynRealms(user.getKey()));\n \n             // roles\n-            userTO.getRoles().addAll(user.getRoles().stream().map(r -> r.getKey()).collect(Collectors.toList()));\n+            userTO.getRoles().addAll(user.getRoles().stream().map(Entity::getKey).collect(Collectors.toList()));\n+\n+            // dynamic roles\n+            userTO.getDynRoles().addAll(\n+                    userDAO.findDynRoles(user.getKey()).stream().map(Entity::getKey).collect(Collectors.toList()));\n+\n+            // privileges\n+            userTO.getPrivileges().addAll(userDAO.findAllRoles(user).stream().\n+                    flatMap(role -> role.getPrivileges().stream()).map(Entity::getKey).collect(Collectors.toSet()));\n \n             // relationships\n             userTO.getRelationships().addAll(\n@@ -622,9 +630,6 @@ public UserTO getUserTO(final User user, final boolean details) {\n                     }).collect(Collectors.toList()));\n \n             // dynamic memberships\n-            userTO.getDynRoles().addAll(\n-                    userDAO.findDynRoles(user.getKey()).stream().map(Entity::getKey).collect(Collectors.toList()));\n-\n             userTO.getDynMemberships().addAll(\n                     userDAO.findDynGroups(user.getKey()).stream().map(group -> {\n                         return new MembershipTO.Builder()."},{"sha":"ed944dadf2b4f354b3e27e53dd593e5cfbc50497","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ApplicationServiceImpl.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FApplicationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FApplicationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FApplicationServiceImpl.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.ApplicationTO;\n+import org.apache.syncope.common.lib.to.PrivilegeTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ApplicationService;\n+import org.apache.syncope.core.logic.ApplicationLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ApplicationServiceImpl extends AbstractServiceImpl implements ApplicationService {\n+\n+    @Autowired\n+    private ApplicationLogic logic;\n+\n+    @Override\n+    public List<ApplicationTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public ApplicationTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public PrivilegeTO readPrivilege(final String key) {\n+        return logic.readPrivilege(key);\n+    }\n+\n+    @Override\n+    public Response create(final ApplicationTO applicationTO) {\n+        ApplicationTO created = logic.create(applicationTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final ApplicationTO applicationTO) {\n+        logic.update(applicationTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+}"},{"sha":"4a08852e52bb2bef1a4a045ebc42a7bc7cd8acbc","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -59,9 +59,9 @@ public Response create(final UserTO userTO, final boolean storePassword) {\n     public Response read() {\n         Pair<String, UserTO> self = logic.selfRead();\n         return Response.ok().\n-                header(RESTHeaders.RESOURCE_KEY, self.getValue().getKey()).\n-                header(RESTHeaders.OWNED_ENTITLEMENTS, self.getKey()).\n-                entity(self.getValue()).\n+                header(RESTHeaders.RESOURCE_KEY, self.getRight().getKey()).\n+                header(RESTHeaders.OWNED_ENTITLEMENTS, self.getLeft()).\n+                entity(self.getRight()).\n                 build();\n     }\n \n@@ -74,7 +74,7 @@ public Response update(final UserPatch patch) {\n     @Override\n     public Response update(final UserTO user) {\n         Pair<String, UserTO> self = logic.selfRead();\n-        return update(AnyOperations.diff(user, self.getValue(), false));\n+        return update(AnyOperations.diff(user, self.getRight(), false));\n     }\n \n     @Override"},{"sha":"c3f296f61290f8a983a707ac32ad5be8052f6c83","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -147,6 +148,10 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n                     map(r -> r.getKey()).collect(Collectors.toList());\n             builder = builder.field(\"roles\", roles);\n \n+            Set<Object> privileges = userDAO.findAllRoles(user).stream().\n+                    flatMap(role -> role.getPrivileges().stream()).map(Entity::getKey).collect(Collectors.toSet());\n+            builder = builder.field(\"privileges\", privileges);\n+\n             List<Object> memberships = new ArrayList<>(userDAO.findAllGroupKeys(user));\n             builder = builder.field(\"memberships\", memberships);\n "},{"sha":"de070f1b997c739da22ced71d221474130f76258","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n@@ -211,6 +212,8 @@ private QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind ki\n                     builder = getQueryBuilder(cond.getAssignableCond());\n                 } else if (cond.getRoleCond() != null && AnyTypeKind.USER == kind) {\n                     builder = getQueryBuilder(cond.getRoleCond());\n+                } else if (cond.getPrivilegeCond() != null && AnyTypeKind.USER == kind) {\n+                    builder = getQueryBuilder(cond.getPrivilegeCond());\n                 } else if (cond.getDynRealmCond() != null) {\n                     builder = getQueryBuilder(cond.getDynRealmCond());\n                 } else if (cond.getMemberCond() != null && AnyTypeKind.GROUP == kind) {\n@@ -306,6 +309,10 @@ private QueryBuilder getQueryBuilder(final RoleCond cond) {\n         return QueryBuilders.termQuery(\"roles\", cond.getRole());\n     }\n \n+    private QueryBuilder getQueryBuilder(final PrivilegeCond cond) {\n+        return QueryBuilders.termQuery(\"privileges\", cond.getPrivilege());\n+    }\n+\n     private QueryBuilder getQueryBuilder(final DynRealmCond cond) {\n         return QueryBuilders.termQuery(\"dynRealms\", cond.getDynRealm());\n     }"},{"sha":"05555a940680688befda582cb5a832c4112dc46a","filename":"fit/core-reference/pom.xml","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -199,6 +199,30 @@ under the License.\n       <artifactId>bcpkix-jdk15on</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.seleniumhq.selenium</groupId>\n+      <artifactId>selenium-java</artifactId>\n+      <scope>test</scope>\n+      <version>2.44.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.opera</groupId>\n+      <artifactId>operadriver</artifactId>\n+      <scope>test</scope>\n+      <version>1.5</version>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.seleniumhq.selenium</groupId>\n+          <artifactId>selenium-remote-driver</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <scope>test</scope>\n+      <version>4.11</version>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"7143545cf3fd9451bba2e13a67f6f6d11331ff12","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -69,6 +69,7 @@\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n+import org.apache.syncope.common.rest.api.service.ApplicationService;\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n import org.apache.syncope.common.rest.api.service.ConnectorHistoryService;\n@@ -184,6 +185,8 @@ public abstract class AbstractITCase {\n \n     protected static DomainService domainService;\n \n+    protected static ApplicationService applicationService;\n+\n     protected static AnyTypeClassService anyTypeClassService;\n \n     protected static AnyTypeService anyTypeService;\n@@ -280,6 +283,7 @@ public static void restSetup() {\n \n         syncopeService = adminClient.getService(SyncopeService.class);\n         domainService = adminClient.getService(DomainService.class);\n+        applicationService = adminClient.getService(ApplicationService.class);\n         anyTypeClassService = adminClient.getService(AnyTypeClassService.class);\n         anyTypeService = adminClient.getService(AnyTypeService.class);\n         relationshipTypeService = adminClient.getService(RelationshipTypeService.class);"},{"sha":"5cc79b05f3e4ed06ea3df45c4dba5b4e78c271c5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ApplicationITCase.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FApplicationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FApplicationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FApplicationITCase.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Base64;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ApplicationTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.PrivilegeTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.ApplicationService;\n+import org.apache.syncope.common.rest.api.service.RoleService;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+public class ApplicationITCase extends AbstractITCase {\n+\n+    @Test\n+    public void read() {\n+        ApplicationTO mightyApp = applicationService.read(\"mightyApp\");\n+        assertNotNull(mightyApp);\n+        assertEquals(2, mightyApp.getPrivileges().size());\n+        assertTrue(mightyApp.getPrivileges().stream().anyMatch(privilege -> \"postMighty\".equals(privilege.getKey())));\n+\n+        PrivilegeTO getMighty = applicationService.readPrivilege(\"getMighty\");\n+        assertNotNull(getMighty);\n+        assertEquals(\"mightyApp\", getMighty.getApplication());\n+\n+        RoleTO role = roleService.read(\"Other\");\n+        assertFalse(role.getPrivileges().isEmpty());\n+        assertEquals(1, role.getPrivileges().size());\n+        assertTrue(role.getPrivileges().stream().anyMatch(privilege -> \"postMighty\".equals(privilege)));\n+    }\n+\n+    @Test\n+    public void crud() {\n+        // 1. create application\n+        ApplicationTO application = new ApplicationTO();\n+        application.setKey(UUID.randomUUID().toString());\n+\n+        PrivilegeTO privilegeTO = new PrivilegeTO();\n+        privilegeTO.setKey(UUID.randomUUID().toString());\n+        privilegeTO.setSpecMimeType(\"application/xml\");\n+        privilegeTO.setSpec(Base64.getEncoder().encodeToString(\"<one/>\".getBytes()));\n+        application.getPrivileges().add(privilegeTO);\n+\n+        privilegeTO = new PrivilegeTO();\n+        privilegeTO.setKey(UUID.randomUUID().toString());\n+        privilegeTO.setSpecMimeType(\"application/xml\");\n+        privilegeTO.setSpec(Base64.getEncoder().encodeToString(\"<one><two/></one>\".getBytes()));\n+        application.getPrivileges().add(privilegeTO);\n+\n+        privilegeTO = new PrivilegeTO();\n+        privilegeTO.setKey(UUID.randomUUID().toString());\n+        privilegeTO.setSpecMimeType(\"application/xml\");\n+        privilegeTO.setSpec(Base64.getEncoder().encodeToString(\"<one><two><three/></two></one>\".getBytes()));\n+        application.getPrivileges().add(privilegeTO);\n+\n+        Response response = applicationService.create(application);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n+\n+        application = getObject(response.getLocation(), ApplicationService.class, ApplicationTO.class);\n+        assertNotNull(application);\n+        assertNull(application.getDescription());\n+        assertEquals(3, application.getPrivileges().size());\n+\n+        // 2. update application\n+        application.setDescription(\"A description\");\n+        application.getPrivileges().remove(1);\n+\n+        applicationService.update(application);\n+\n+        application = applicationService.read(application.getKey());\n+        assertNotNull(application);\n+        assertNotNull(application.getDescription());\n+        assertEquals(2, application.getPrivileges().size());\n+\n+        // 3. assign application's privileges to a new role\n+        RoleTO role = new RoleTO();\n+        role.setKey(\"privileged\");\n+        role.getPrivileges().addAll(\n+                application.getPrivileges().stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+\n+        response = roleService.create(role);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n+\n+        role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+        assertNotNull(role);\n+        assertEquals(2, role.getPrivileges().size());\n+\n+        // 4. delete application => delete privileges\n+        applicationService.delete(application.getKey());\n+\n+        try {\n+            applicationService.read(application.getKey());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+\n+        role = roleService.read(role.getKey());\n+        assertNotNull(role);\n+        assertTrue(role.getPrivileges().isEmpty());\n+    }\n+}"},{"sha":"1c3eba77f14ed839a4161f07750ca5d161b8234c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -104,21 +104,21 @@ public void readEntitlements() {\n         // 2. as anonymous\n         Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(\n                 new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY)).self();\n-        assertEquals(1, self.getKey().size());\n-        assertTrue(self.getKey().keySet().contains(StandardEntitlement.ANONYMOUS));\n-        assertEquals(ANONYMOUS_UNAME, self.getValue().getUsername());\n+        assertEquals(1, self.getLeft().size());\n+        assertTrue(self.getLeft().keySet().contains(StandardEntitlement.ANONYMOUS));\n+        assertEquals(ANONYMOUS_UNAME, self.getRight().getUsername());\n \n         // 3. as admin\n         self = adminClient.self();\n-        assertEquals(syncopeService.platform().getEntitlements().size(), self.getKey().size());\n-        assertFalse(self.getKey().keySet().contains(StandardEntitlement.ANONYMOUS));\n-        assertEquals(ADMIN_UNAME, self.getValue().getUsername());\n+        assertEquals(syncopeService.platform().getEntitlements().size(), self.getLeft().size());\n+        assertFalse(self.getLeft().keySet().contains(StandardEntitlement.ANONYMOUS));\n+        assertEquals(ADMIN_UNAME, self.getRight().getUsername());\n \n         // 4. as user\n         self = clientFactory.create(\"bellini\", ADMIN_PWD).self();\n-        assertFalse(self.getKey().isEmpty());\n-        assertFalse(self.getKey().keySet().contains(StandardEntitlement.ANONYMOUS));\n-        assertEquals(\"bellini\", self.getValue().getUsername());\n+        assertFalse(self.getLeft().isEmpty());\n+        assertFalse(self.getLeft().keySet().contains(StandardEntitlement.ANONYMOUS));\n+        assertEquals(\"bellini\", self.getRight().getUsername());\n     }\n \n     @Test\n@@ -404,7 +404,7 @@ public void checkUserSuspension() {\n         assertEquals(\"active\", userTO.getStatus());\n \n         SyncopeClient goodPwdClient = clientFactory.create(userTO.getUsername(), \"password123\");\n-        assertEquals(0, goodPwdClient.self().getValue().getFailedLogins().intValue());\n+        assertEquals(0, goodPwdClient.self().getRight().getFailedLogins().intValue());\n     }\n \n     @Test\n@@ -507,8 +507,8 @@ public void issueSYNCOPE434() {\n         Pair<Map<String, Set<String>>, UserTO> self =\n                 clientFactory.create(userTO.getUsername(), \"password123\").self();\n         assertNotNull(self);\n-        assertNotNull(self.getKey());\n-        assertNotNull(self.getValue());\n+        assertNotNull(self.getLeft());\n+        assertNotNull(self.getRight());\n     }\n \n     @Test"},{"sha":"b349d608c172ff1f48496b49c4cac53fcdd20f79","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RoleITCase.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.service.RoleService;\n@@ -122,20 +123,26 @@ public void delete() {\n \n     @Test\n     public void dynMembership() {\n-        assertTrue(userService.read(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\").getDynRoles().isEmpty());\n+        UserTO bellini = userService.read(\"bellini\");\n+        assertTrue(bellini.getDynRoles().isEmpty());\n+        assertTrue(bellini.getPrivileges().isEmpty());\n \n         RoleTO role = getSampleRoleTO(\"dynMembership\");\n+        role.getPrivileges().add(\"getMighty\");\n         role.setDynMembershipCond(\"cool==true\");\n         Response response = roleService.create(role);\n         role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n         assertNotNull(role);\n \n-        assertTrue(userService.read(\n-                \"c9b2dec2-00a7-4855-97c0-d854842b4b24\").getDynRoles().contains(role.getKey()));\n+        bellini = userService.read(\"bellini\");\n+        assertTrue(bellini.getDynRoles().contains(role.getKey()));\n+        assertTrue(bellini.getPrivileges().contains(\"getMighty\"));\n \n         role.setDynMembershipCond(\"cool==false\");\n         roleService.update(role);\n \n-        assertTrue(userService.read(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\").getDynMemberships().isEmpty());\n+        bellini = userService.read(\"bellini\");\n+        assertTrue(bellini.getDynMemberships().isEmpty());\n+        assertTrue(bellini.getPrivileges().isEmpty());\n     }\n }"},{"sha":"bc743ab4b7d062b999a195926f34eefb457595c8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -170,6 +170,19 @@ public void searchByRole() {\n                 anyMatch(user -> \"1417acbe-cbf6-4277-9372-e75e04f97000\".equals(user.getKey())));\n     }\n \n+    @Test\n+    public void searchByPrivilege() {\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().withPrivileges(\"postMighty\").query()).\n+                        build());\n+        assertNotNull(matchingUsers);\n+        assertFalse(matchingUsers.getResult().isEmpty());\n+\n+        assertTrue(matchingUsers.getResult().stream().\n+                anyMatch(user -> \"1417acbe-cbf6-4277-9372-e75e04f97000\".equals(user.getKey())));\n+    }\n+\n     @Test\n     public void searchByDynRole() {\n         RoleTO role = RoleITCase.getSampleRoleTO(\"dynMembership\");"},{"sha":"490859b5a9c2a31e92800e8317d3fbd37e02a418","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -121,6 +121,13 @@ public static UserTO getSampleTO(final String email) {\n         return userTO;\n     }\n \n+    @Test\n+    public void readPrivileges() {\n+        Set<String> privileges = userService.read(\"rossini\").getPrivileges();\n+        assertNotNull(privileges);\n+        assertEquals(1, privileges.size());\n+    }\n+\n     @Test\n     public void createUserWithNoPropagation() {\n         // create a new user"},{"sha":"541f9050ce5fb4a385c649492edd7195dfb6a924","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -141,7 +141,7 @@ public void read() {\n         }\n \n         Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(\"rossini\", ADMIN_PWD).self();\n-        assertEquals(\"rossini\", self.getValue().getUsername());\n+        assertEquals(\"rossini\", self.getRight().getUsername());\n     }\n \n     @Test\n@@ -152,7 +152,7 @@ public void authenticateByPlainAttribute() {\n         assertNotNull(userId);\n \n         Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(userId, ADMIN_PWD).self();\n-        assertEquals(rossini.getUsername(), self.getValue().getUsername());\n+        assertEquals(rossini.getUsername(), self.getRight().getUsername());\n     }\n \n     @Test\n@@ -248,7 +248,7 @@ public void delete() {\n \n     @Test\n     public void issueSYNCOPE373() {\n-        UserTO userTO = adminClient.self().getValue();\n+        UserTO userTO = adminClient.self().getRight();\n         assertEquals(ADMIN_UNAME, userTO.getUsername());\n     }\n \n@@ -272,7 +272,7 @@ public void passwordReset() {\n \n         // 2. verify that new user is able to authenticate\n         SyncopeClient authClient = clientFactory.create(user.getUsername(), \"password123\");\n-        UserTO read = authClient.self().getValue();\n+        UserTO read = authClient.self().getRight();\n         assertNotNull(read);\n \n         // 3. request password reset (as anonymous) providing the expected security answer\n@@ -301,7 +301,7 @@ public void passwordReset() {\n \n         // 6. verify that password was reset and token removed\n         authClient = clientFactory.create(user.getUsername(), \"newPassword123\");\n-        read = authClient.self().getValue();\n+        read = authClient.self().getRight();\n         assertNotNull(read);\n         assertNull(read.getToken());\n \n@@ -323,7 +323,7 @@ public void passwordResetWithoutSecurityQuestion() {\n \n         // 2. verify that new user is able to authenticate\n         SyncopeClient authClient = clientFactory.create(user.getUsername(), \"password123\");\n-        UserTO read = authClient.self().getValue();\n+        UserTO read = authClient.self().getRight();\n         assertNotNull(read);\n \n         // 3. request password reset (as anonymous) with no security answer\n@@ -346,7 +346,7 @@ public void passwordResetWithoutSecurityQuestion() {\n \n         // 6. verify that password was reset and token removed\n         authClient = clientFactory.create(user.getUsername(), \"newPassword123\");\n-        read = authClient.self().getValue();\n+        read = authClient.self().getRight();\n         assertNotNull(read);\n         assertNull(read.getToken());\n "},{"sha":"a4c1fd8a89a76b28dce5aad802454cdd32d5db88","filename":"src/main/asciidoc/reference-guide/concepts/concepts.adoc","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fconcepts.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fconcepts.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fconcepts.adoc?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -28,6 +28,8 @@ include::realms.adoc[]\n \n include::entitlements.adoc[]\n \n+include::privileges.adoc[]\n+\n include::roles.adoc[]\n \n include::provisioning/provisioning.adoc[]"},{"sha":"7bfa9e62dbcc8e8404e37803a3cf632e0e01bfc5","filename":"src/main/asciidoc/reference-guide/concepts/entitlements.adoc","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -18,7 +18,7 @@\n //\n === Entitlements\n \n-Entitlements are basically strings describing the right to perform an operation.\n+Entitlements are basically strings describing the right to perform an operation on Syncope.\n \n The components in the <<logic,logic layer>> are annotated with\n http://projects.spring.io/spring-security/[Spring Security^] to implement declarative security; in the following\n@@ -60,4 +60,6 @@ ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n https://github.com/apache/syncope/blob/master/ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/types/CamelEntitlement.java[enlarge the initial list^]\n endif::[]\n : this is because entitlements are the pillars of the internal security model and are not meant for external usage.\n+\n+If you need to model the rights that Users own on external applications, look at <<privileges,privileges>>, instead.\n ===="},{"sha":"77fbfa50a45a168122458e758ea0edfb2a3d0af7","filename":"src/main/asciidoc/reference-guide/concepts/privileges.adoc","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprivileges.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprivileges.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprivileges.adoc?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -0,0 +1,21 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+=== Privileges\n+\n+Privileges model the rights that Users own on external applications."},{"sha":"f1fe2f5cd879cfe72930af5fc23e25b528ec2892","filename":"src/main/asciidoc/reference-guide/concepts/roles.adoc","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Froles.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Froles.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Froles.adoc?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -21,6 +21,8 @@\n Roles map a set of <<entitlements,entitlements>> to a set of <<realms,realms>> and / or\n <<dynamic-realms, dynamic realms>>.\n \n+In addition, Roles can be used to assign <<privileges,privileges>> to Users.\n+\n [TIP]\n .Static and Dynamic Memberships\n ===="},{"sha":"e12dfc71aa1e5282aee244a3918ee948f30eb441","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/425f9b9ed1a26fa016d8799ccb611c24cf25a04a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc?ref=425f9b9ed1a26fa016d8799ccb611c24cf25a04a","patch":"@@ -56,7 +56,7 @@ based on owned <<entitlements,entitlements>>.\n \n [NOTE]\n Users can examine their own entitlements looking at the `<<x-syncope-entitlements,X-Syncope-Entitlements>>`\n-header value.\n+header value, and their own privileges looking at the `<<x-syncope-privileges,X-Syncope-Privileges>>` header value.\n \n [TIP]\n ====\n@@ -196,6 +196,11 @@ Groups and Any Objects operations.\n When invoking the REST endpoint `/users/self` in `GET`, the `X-Syncope-Entitlements` response header will list all\n the <<entitlements,entitlements>> owned by the requesting user.\n \n+===== X-Syncope-Privileges\n+\n+When invoking the REST endpoint `/users/self` in `GET`, the `X-Syncope-Privileges` response header will list all\n+the <<privileges,privileges>> owned by the requesting user.\n+\n ==== Bulk Operations\n \n Some REST endpoints feature the _bulk mode_, e.g. the capability to perform a given operation onto several items at the"}]}