{"sha":"83a805a463c2cabaa53d217f7bed9361dd42e208","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgzYTgwNWE0NjNjMmNhYmFhNTNkMjE3ZjdiZWQ5MzYxZGQ0MmUyMDg=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2014-09-08T08:41:20Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2014-09-08T08:41:20Z"},"message":"[SYNCOPE-543]\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1623333 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c0bcfbd73e434d403c8d4fc5034101f1f6bc980","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7c0bcfbd73e434d403c8d4fc5034101f1f6bc980"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/83a805a463c2cabaa53d217f7bed9361dd42e208","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/83a805a463c2cabaa53d217f7bed9361dd42e208","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/83a805a463c2cabaa53d217f7bed9361dd42e208","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/83a805a463c2cabaa53d217f7bed9361dd42e208/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"c20d01f802bbac6fb568db7e68b0da8530adb993","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c20d01f802bbac6fb568db7e68b0da8530adb993","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c20d01f802bbac6fb568db7e68b0da8530adb993"}],"stats":{"total":153,"additions":100,"deletions":53},"files":[{"sha":"6b80b3c09973a5a5ad24e41ac88d02d531c8ad31","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":29,"deletions":43,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83a805a463c2cabaa53d217f7bed9361dd42e208/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83a805a463c2cabaa53d217f7bed9361dd42e208/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=83a805a463c2cabaa53d217f7bed9361dd42e208","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.beans.role;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -334,28 +333,24 @@ public void setInheritAttributes(final boolean inheritAttributes) {\n      *\n      * @return a list of inherited and only inherited attributes.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public List<RAttr> findInheritedAttributes() {\n+    @SuppressWarnings({ \"unchecked\" })\n+    public List<RAttr> findLastInheritedAncestorAttributes() {\n         final Map<RSchema, RAttr> result = new HashMap<RSchema, RAttr>();\n \n+        if (!isInheritAttributes()) {\n+            return attributes;\n+        }\n         if (isInheritAttributes() && getParent() != null) {\n             final Map<AbstractSchema, AbstractAttr> attrMap = getAttrMap();\n \n-            // Add attributes not specialized\n-            for (RAttr attr : (Collection<RAttr>) getParent().getAttributes()) {\n-                if (!attrMap.containsKey(attr.getSchema())) {\n-                    result.put((RSchema) attr.getSchema(), attr);\n-                }\n-            }\n-\n-            // Add attributes not specialized and not already added\n-            for (RAttr attr : getParent().findInheritedAttributes()) {\n-                if (!attrMap.containsKey(attr.getSchema()) && !result.containsKey((RSchema) attr.getSchema())) {\n-                    result.put((RSchema) attr.getSchema(), attr);\n+            // Add inherit attributes\n+            for (RAttr attr : getParent().findLastInheritedAncestorAttributes()) {\n+                if (attrMap.containsKey(attr.getSchema())) {\n+                    result.remove((RSchema) attr.getSchema());\n                 }\n+                result.put((RSchema) attr.getSchema(), attr);\n             }\n         }\n-\n         return new ArrayList<RAttr>(result.values());\n     }\n \n@@ -374,28 +369,23 @@ public void setInheritDerivedAttributes(final boolean inheritDerivedAttributes)\n      * @return a list of inherited and only inherited attributes.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public List<RDerAttr> findInheritedDerivedAttributes() {\n+    public List<RDerAttr> findLastInheritedAncestorDerivedAttributes() {\n         final Map<RDerSchema, RDerAttr> result = new HashMap<RDerSchema, RDerAttr>();\n \n+        if (!isInheritDerivedAttributes()) {\n+            return derivedAttributes;\n+        }\n         if (isInheritDerivedAttributes() && getParent() != null) {\n             final Map<AbstractDerSchema, AbstractDerAttr> attrMap = getDerAttrMap();\n \n-            // Add attributes not specialized\n-            for (RDerAttr attr : (Collection<RDerAttr>) getParent().getDerivedAttributes()) {\n-                if (!attrMap.containsKey(attr.getDerivedSchema())) {\n-                    result.put((RDerSchema) attr.getDerivedSchema(), attr);\n-                }\n-            }\n-\n-            // Add attributes not specialized and not already added\n-            for (RDerAttr attr : getParent().findInheritedDerivedAttributes()) {\n-                if (!attrMap.containsKey(attr.getDerivedSchema())\n-                        && !result.containsKey((RDerSchema) attr.getDerivedSchema())) {\n-                    result.put((RDerSchema) attr.getDerivedSchema(), attr);\n+            // Add inherit derived attributes\n+            for (RDerAttr attr : getParent().findLastInheritedAncestorDerivedAttributes()) {\n+                if (attrMap.containsKey(attr.getDerivedSchema())) {\n+                    result.remove((RDerSchema) attr.getDerivedSchema());\n                 }\n+                result.put((RDerSchema) attr.getDerivedSchema(), attr);\n             }\n         }\n-\n         return new ArrayList<RDerAttr>(result.values());\n     }\n \n@@ -414,28 +404,24 @@ public void setInheritVirtualAttributes(final boolean inheritVirtualAttributes)\n      * @return a list of inherited and only inherited attributes.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public List<RVirAttr> findInheritedVirtualAttributes() {\n+    public List<RVirAttr> findLastInheritedAncestorVirtualAttributes() {\n         final Map<RVirSchema, RVirAttr> result = new HashMap<RVirSchema, RVirAttr>();\n \n+        if (!isInheritVirtualAttributes()) {\n+            return virtualAttributes;\n+        }\n+\n         if (isInheritVirtualAttributes() && getParent() != null) {\n             final Map<AbstractVirSchema, AbstractVirAttr> attrMap = getVirAttrMap();\n \n-            // Add attributes not specialized\n-            for (RVirAttr attr : (Collection<RVirAttr>) getParent().getVirtualAttributes()) {\n-                if (!attrMap.containsKey(attr.getVirtualSchema())) {\n-                    result.put((RVirSchema) attr.getVirtualSchema(), attr);\n-                }\n-            }\n-\n-            // Add attributes not specialized and not already added\n-            for (RVirAttr attr : getParent().findInheritedVirtualAttributes()) {\n-                if (!attrMap.containsKey(attr.getVirtualSchema())\n-                        && !result.containsKey((RVirSchema) attr.getVirtualSchema())) {\n-                    result.put((RVirSchema) attr.getVirtualSchema(), attr);\n+            // Add inherit virtual attributes\n+            for (RVirAttr attr : getParent().findLastInheritedAncestorVirtualAttributes()) {\n+                if (attrMap.containsKey(attr.getVirtualSchema())) {\n+                    result.remove((RVirSchema) attr.getVirtualSchema());\n                 }\n+                result.put((RVirSchema) attr.getVirtualSchema(), attr);\n             }\n         }\n-\n         return new ArrayList<RVirAttr>(result.values());\n     }\n "},{"sha":"21f8bb3114fb686cf082edb17b993d37aaf71a89","filename":"core/src/main/java/org/apache/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83a805a463c2cabaa53d217f7bed9361dd42e208/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83a805a463c2cabaa53d217f7bed9361dd42e208/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=83a805a463c2cabaa53d217f7bed9361dd42e208","patch":"@@ -313,15 +313,15 @@ public RoleTO getRoleTO(final SyncopeRole role) {\n \n         // -------------------------\n         // Retrieve all [derived/virtual] attributes (inherited and not)\n-        // -------------------------\n-        final List<RAttr> allAttributes = role.findInheritedAttributes();\n-        allAttributes.addAll((List<RAttr>) role.getAttributes());\n+        // -------------------------        \n+        final List<RAttr> allAttributes = role.findLastInheritedAncestorAttributes();\n+        //allAttributes.addAll((List<RAttr>) role.getAttributes());\n \n-        final List<RDerAttr> allDerAttributes = role.findInheritedDerivedAttributes();\n-        allDerAttributes.addAll((List<RDerAttr>) role.getDerivedAttributes());\n+        final List<RDerAttr> allDerAttributes = role.findLastInheritedAncestorDerivedAttributes();\n+        //allDerAttributes.addAll((List<RDerAttr>) role.getDerivedAttributes());\n \n-        final List<RVirAttr> allVirAttributes = role.findInheritedVirtualAttributes();\n-        allVirAttributes.addAll((List<RVirAttr>) role.getVirtualAttributes());\n+        final List<RVirAttr> allVirAttributes = role.findLastInheritedAncestorVirtualAttributes();\n+        //allVirAttributes.addAll((List<RVirAttr>) role.getVirtualAttributes());\n         // -------------------------\n \n         fillTO(roleTO, allAttributes, allDerAttributes, allVirAttributes, role.getResources());"},{"sha":"429a7b78f0f3e2946094a9ca3e67a7bacfe068d8","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83a805a463c2cabaa53d217f7bed9361dd42e208/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83a805a463c2cabaa53d217f7bed9361dd42e208/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=83a805a463c2cabaa53d217f7bed9361dd42e208","patch":"@@ -63,21 +63,21 @@ public void find() {\n     public void inheritedAttributes() {\n         SyncopeRole director = roleDAO.find(7L);\n \n-        assertEquals(1, director.findInheritedAttributes().size());\n+        assertEquals(1, director.findLastInheritedAncestorAttributes().size());\n     }\n \n     @Test\n     public void inheritedDerivedAttributes() {\n         SyncopeRole director = roleDAO.find(7L);\n \n-        assertEquals(1, director.findInheritedDerivedAttributes().size());\n+        assertEquals(1, director.findLastInheritedAncestorDerivedAttributes().size());\n     }\n \n     @Test\n     public void inheritedVirtualAttributes() {\n         SyncopeRole director = roleDAO.find(7L);\n \n-        assertEquals(1, director.findInheritedVirtualAttributes().size());\n+        assertEquals(1, director.findLastInheritedAncestorVirtualAttributes().size());\n     }\n \n     @Test"},{"sha":"afd37f9b0d35da485bfe1f76b48fa15588e8ee6d","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83a805a463c2cabaa53d217f7bed9361dd42e208/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83a805a463c2cabaa53d217f7bed9361dd42e208/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=83a805a463c2cabaa53d217f7bed9361dd42e208","patch":"@@ -432,4 +432,65 @@ public void issueSYNCOPE455() {\n         assertNull(getLdapRemoteObject(parentRemoteObject.getAttributeMap().get(Name.NAME).getValues().get(0)));\n         assertNull(getLdapRemoteObject(childRemoteObject.getAttributeMap().get(Name.NAME).getValues().get(0)));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE543() {\n+        final String ancestorName = \"issueSYNCOPE543-ARole\";\n+        final String parentName = \"issueSYNCOPE543-PRole\";\n+        final String childName = \"issueSYNCOPE543-CRole\";\n+\n+        // 1. create ancestor role\n+        RoleTO ancestor = buildBasicRoleTO(ancestorName);\n+        ancestor.setParent(0L);\n+        ancestor.addAttribute(attributeTO(\"icon\", \"ancestorIcon\"));\n+        ancestor = createRole(roleService, ancestor);\n+        assertEquals(\"ancestorIcon\", ancestor.getAttributeMap().get(\"icon\").getValues().get(0));\n+\n+        // 2. create parent role\n+        RoleTO parent = buildBasicRoleTO(parentName);\n+        parent.setParent(ancestor.getId());\n+        parent.addAttribute(attributeTO(\"icon\", \"parentIcon\"));\n+        parent = createRole(roleService, parent);\n+        assertEquals(\"parentIcon\", parent.getAttributeMap().get(\"icon\").getValues().get(0));\n+\n+        // 3. create child role\n+        RoleTO child = buildBasicRoleTO(childName);\n+        child.setParent(parent.getId());\n+        child.addAttribute(attributeTO(\"icon\", \"childIcon\"));\n+        child = createRole(roleService, child);\n+        assertEquals(\"childIcon\", child.getAttributeMap().get(\"icon\").getValues().get(0));\n+\n+        final RoleMod roleChildMod = new RoleMod();\n+        roleChildMod.setId(child.getId());\n+        roleChildMod.setInheritAttributes(Boolean.TRUE);\n+        roleService.update(roleChildMod.getId(), roleChildMod);\n+\n+        child = roleService.read(child.getId());\n+        assertNotNull(child);\n+        assertNotNull(child.getAttributeMap().get(\"icon\").getValues());\n+        assertEquals(\"parentIcon\", child.getAttributeMap().get(\"icon\").getValues().get(0));\n+\n+        final RoleMod roleParentMod = new RoleMod();\n+        roleParentMod.setId(parent.getId());\n+        roleParentMod.setInheritAttributes(Boolean.TRUE);\n+        roleService.update(roleParentMod.getId(), roleParentMod);\n+\n+        child = roleService.read(child.getId());\n+        assertNotNull(child);\n+        assertNotNull(child.getAttributeMap().get(\"icon\").getValues());\n+        assertEquals(\"ancestorIcon\", child.getAttributeMap().get(\"icon\").getValues().get(0));\n+\n+        parent = roleService.read(parent.getId());\n+        assertNotNull(parent);\n+        assertNotNull(parent.getAttributeMap().get(\"icon\").getValues());\n+        assertEquals(\"ancestorIcon\", parent.getAttributeMap().get(\"icon\").getValues().get(0));\n+\n+        roleParentMod.setInheritAttributes(Boolean.FALSE);\n+        roleService.update(roleParentMod.getId(), roleParentMod);\n+\n+        child = roleService.read(child.getId());\n+        assertNotNull(child);\n+        assertNotNull(child.getAttributeMap().get(\"icon\").getValues());\n+        assertEquals(\"parentIcon\", child.getAttributeMap().get(\"icon\").getValues().get(0));\n+    }\n }"}]}