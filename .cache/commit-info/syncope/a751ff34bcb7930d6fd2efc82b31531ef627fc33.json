{"sha":"a751ff34bcb7930d6fd2efc82b31531ef627fc33","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE3NTFmZjM0YmNiNzkzMGQ2ZmQyZWZjODJiMzE1MzFlZjYyN2ZjMzM=","commit":{"author":{"name":"Adrian Gonzalez","email":"adr_gonzalez@yahoo.fr","date":"2016-08-29T09:36:44Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2016-09-06T06:02:07Z"},"message":"[SYNCOPE-926] Restrict startup classpath scan - This closes #36\n\nIn order to improve performance, restrict\nstartup scanning to syncope packages.","tree":{"sha":"7a87989cfdfdb644f67c6d397833b3d3e5f6c200","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7a87989cfdfdb644f67c6d397833b3d3e5f6c200"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a751ff34bcb7930d6fd2efc82b31531ef627fc33","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a751ff34bcb7930d6fd2efc82b31531ef627fc33","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a751ff34bcb7930d6fd2efc82b31531ef627fc33","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a751ff34bcb7930d6fd2efc82b31531ef627fc33/comments","author":{"login":"gonzalad","id":777485,"node_id":"MDQ6VXNlcjc3NzQ4NQ==","avatar_url":"https://avatars.githubusercontent.com/u/777485?v=4","gravatar_id":"","url":"https://api.github.com/users/gonzalad","html_url":"https://github.com/gonzalad","followers_url":"https://api.github.com/users/gonzalad/followers","following_url":"https://api.github.com/users/gonzalad/following{/other_user}","gists_url":"https://api.github.com/users/gonzalad/gists{/gist_id}","starred_url":"https://api.github.com/users/gonzalad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gonzalad/subscriptions","organizations_url":"https://api.github.com/users/gonzalad/orgs","repos_url":"https://api.github.com/users/gonzalad/repos","events_url":"https://api.github.com/users/gonzalad/events{/privacy}","received_events_url":"https://api.github.com/users/gonzalad/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"81f2e00c857758b1da8bc12459358c1c25642ffa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/81f2e00c857758b1da8bc12459358c1c25642ffa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/81f2e00c857758b1da8bc12459358c1c25642ffa"}],"stats":{"total":30,"additions":24,"deletions":6},"files":[{"sha":"1244075e8628f771c52921c4753ce29cba474e5d","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a751ff34bcb7930d6fd2efc82b31531ef627fc33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a751ff34bcb7930d6fd2efc82b31531ef627fc33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=a751ff34bcb7930d6fd2efc82b31531ef627fc33","patch":"@@ -25,7 +25,6 @@\n import java.util.List;\n import org.apache.commons.collections4.ComparatorUtils;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.pages.BaseExtPage;\n import org.apache.syncope.client.console.annotations.BinaryPreview;\n import org.apache.syncope.client.console.annotations.ExtPage;\n@@ -44,6 +43,8 @@ public class ClassPathScanImplementationLookup {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ClassPathScanImplementationLookup.class);\n \n+    private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.client.console\";\n+\n     private List<Class<? extends BasePage>> pages;\n \n     private List<Class<? extends AbstractBinaryPreviewer>> previewers;\n@@ -52,6 +53,15 @@ public class ClassPathScanImplementationLookup {\n \n     private List<Class<? extends BaseExtWidget>> extWidgets;\n \n+    /**\n+     * This method can be overridden by subclasses to customize classpath scan.\n+     *\n+     * @return basePackage for classpath scanning\n+     */\n+    protected String getBasePackage() {\n+        return DEFAULT_BASE_PACKAGE;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     public void load() {\n         pages = new ArrayList<>();\n@@ -65,7 +75,7 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(BaseExtPage.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(BaseExtWidget.class));\n \n-        for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n+        for (BeanDefinition bd : scanner.findCandidateComponents(getBasePackage())) {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(\n                         bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n@@ -161,5 +171,4 @@ public List<Class<? extends BaseExtPage>> getExtPageClasses() {\n     public List<Class<? extends BaseExtWidget>> getExtWidgetClasses() {\n         return extWidgets;\n     }\n-\n }"},{"sha":"b91f2aa052e6fc7a81a9fb20477f979c1b7ec039","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a751ff34bcb7930d6fd2efc82b31531ef627fc33/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a751ff34bcb7930d6fd2efc82b31531ef627fc33/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=a751ff34bcb7930d6fd2efc82b31531ef627fc33","patch":"@@ -25,7 +25,6 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n@@ -65,6 +64,8 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ImplementationLookup.class);\n \n+    private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.core\";\n+\n     private Map<Type, Set<String>> classNames;\n \n     private Map<Class<? extends ReportletConf>, Class<? extends Reportlet>> reportletClasses;\n@@ -78,6 +79,15 @@ public Integer getPriority() {\n         return 400;\n     }\n \n+    /**\n+     * This method can be overridden by subclasses to customize classpath scan.\n+     *\n+     * @return basePackage for classpath scanning\n+     */\n+    protected String getBasePackage() {\n+        return DEFAULT_BASE_PACKAGE;\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void load() {\n@@ -105,7 +115,7 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(Validator.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(NotificationRecipientsProvider.class));\n \n-        for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n+        for (BeanDefinition bd : scanner.findCandidateComponents(getBasePackage())) {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(\n                         bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n@@ -224,5 +234,4 @@ public Class<? extends PasswordRule> getPasswordRuleClass(\n \n         return passwordRuleClasses.get(passwordRuleConfClass);\n     }\n-\n }"}]}