{"sha":"fedae9c765091c278026e84fa998c029578ab674","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZlZGFlOWM3NjUwOTFjMjc4MDI2ZTg0ZmE5OThjMDI5NTc4YWI2NzQ=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-06-29T15:26:04Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-06-29T15:26:37Z"},"message":"[SYNCOPE-1135] provides dynamicac reload of groups and memberships if the realm changes","tree":{"sha":"0cb398c68e6b8a8f2d9b5f20e19d4437b0da9cc6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0cb398c68e6b8a8f2d9b5f20e19d4437b0da9cc6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fedae9c765091c278026e84fa998c029578ab674","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fedae9c765091c278026e84fa998c029578ab674","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fedae9c765091c278026e84fa998c029578ab674","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fedae9c765091c278026e84fa998c029578ab674/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"4e8680b3f11064035d7a2038e7d50d085145c78b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4e8680b3f11064035d7a2038e7d50d085145c78b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4e8680b3f11064035d7a2038e7d50d085145c78b"}],"stats":{"total":281,"additions":197,"deletions":84},"files":[{"sha":"0a8e9ad52a4ae77179fc86d0c98e163717205cde","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fedae9c765091c278026e84fa998c029578ab674/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fedae9c765091c278026e84fa998c029578ab674/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=fedae9c765091c278026e84fa998c029578ab674","patch":"@@ -254,4 +254,8 @@ protected void onClickDelete(final AjaxRequestTarget target, final RealmTO realm\n         });\n         return content;\n     }\n+\n+    public RealmChoicePanel getRealmChoicePanel() {\n+        return realmChoicePanel;\n+    }\n }"},{"sha":"bfbb46056fb96cee374ce98de2d97ef8a3177f6d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fedae9c765091c278026e84fa998c029578ab674/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fedae9c765091c278026e84fa998c029578ab674/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=fedae9c765091c278026e84fa998c029578ab674","patch":"@@ -76,6 +76,8 @@ public class RealmChoicePanel extends Panel {\n \n     private final Map<String, Pair<RealmTO, List<RealmTO>>> tree;\n \n+    private final List<AbstractLink> links = new ArrayList<>();\n+\n     public RealmChoicePanel(final String id, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n@@ -172,11 +174,11 @@ public final void reloadRealmTree() {\n \n             @Override\n             protected List<AbstractLink> newSubMenuButtons(final String buttonMarkupId) {\n-                List<AbstractLink> links = new ArrayList<>();\n+                RealmChoicePanel.this.links.clear();\n \n-                links.add(new BootstrapAjaxLink<String>(\n+                RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n                         ButtonList.getButtonMarkupId(),\n-                        new Model<String>(),\n+                        new Model<RealmTO>(),\n                         Buttons.Type.Link,\n                         new ResourceModel(\"realms\", \"Realms\")) {\n \n@@ -201,9 +203,9 @@ protected void onComponentTag(final ComponentTag tag) {\n \n                 for (Pair<String, RealmTO> link : realmTree.getObject()) {\n                     final RealmTO realmTO = link.getValue();\n-                    links.add(new BootstrapAjaxLink<String>(\n+                    RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n                             ButtonList.getButtonMarkupId(),\n-                            new Model<String>(),\n+                            Model.of(realmTO),\n                             Buttons.Type.Link,\n                             new Model<>(link.getKey())) {\n \n@@ -232,9 +234,9 @@ public boolean evaluate(final String availableRealm) {\n                 }\n \n                 if (!dynRealmTree.getObject().isEmpty()) {\n-                    links.add(new BootstrapAjaxLink<String>(\n+                    RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n                             ButtonList.getButtonMarkupId(),\n-                            new Model<String>(),\n+                            new Model<RealmTO>(),\n                             Buttons.Type.Link,\n                             new ResourceModel(\"dynrealms\", \"Dynamic Realms\")) {\n \n@@ -263,9 +265,9 @@ protected void onComponentTag(final ComponentTag tag) {\n                         realmTO.setName(dynRealmTO.getKey());\n                         realmTO.setFullPath(dynRealmTO.getKey());\n \n-                        links.add(new BootstrapAjaxLink<String>(\n+                        RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n                                 ButtonList.getButtonMarkupId(),\n-                                new Model<String>(),\n+                                new Model<RealmTO>(),\n                                 Buttons.Type.Link,\n                                 new Model<>(realmTO.getKey())) {\n \n@@ -295,7 +297,7 @@ public boolean evaluate(final String availableRealm) {\n                     }\n                 }\n \n-                return links;\n+                return RealmChoicePanel.this.links;\n             }\n         };\n         realms.setOutputMarkupId(true);\n@@ -404,4 +406,8 @@ public AjaxRequestTarget getTarget() {\n             return target;\n         }\n     }\n+\n+    public List<AbstractLink> getLinks() {\n+        return links;\n+    }\n }"},{"sha":"e5a92d241d86090fc627775c3ac9991a5b0581ca","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Details.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fedae9c765091c278026e84fa998c029578ab674/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fedae9c765091c278026e84fa998c029578ab674/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java?ref=fedae9c765091c278026e84fa998c029578ab674","patch":"@@ -19,16 +19,18 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.ArrayList;\n+import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.client.console.rest.RealmRestClient;\n+import org.apache.syncope.client.console.pages.Realms;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.markup.html.link.AbstractLink;\n import org.apache.wicket.model.PropertyModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -58,11 +60,20 @@ public Details(\n                     \"destinationRealm\", \"destinationRealm\", new PropertyModel<String>(inner, \"realm\"), false);\n             AjaxTextFieldPanel.class.cast(realm).enableJexlHelp();\n         } else {\n+            final List<AbstractLink> realmLinks = Realms.class.cast(pageRef.getPage()).getRealmChoicePanel().getLinks();\n+            final List<RealmTO> realms = new ArrayList<>();\n+            for (AbstractLink link : realmLinks) {\n+                Object obj = link.getDefaultModelObject();\n+                if (obj instanceof RealmTO) {\n+                    realms.add((RealmTO) obj);\n+                }\n+            }\n+\n             realm = new AjaxDropDownChoicePanel<>(\n                     \"destinationRealm\", \"destinationRealm\", new PropertyModel<String>(inner, \"realm\"), false);\n \n             ((AjaxDropDownChoicePanel<String>) realm).setChoices(CollectionUtils.collect(\n-                    new RealmRestClient().list(),\n+                    realms,\n                     new Transformer<RealmTO, String>() {\n \n                 @Override"},{"sha":"8e640fdf69b94b5e0b4efc02a028f52db4c096f5","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":164,"deletions":72,"changes":236,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fedae9c765091c278026e84fa998c029578ab674/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fedae9c765091c278026e84fa998c029578ab674/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=fedae9c765091c278026e84fa998c029578ab674","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.ListUtils;\n@@ -62,15 +64,19 @@ public class Groups extends WizardStep implements ICondition {\n \n     private final List<DynRealmTO> allDynRealms = new DynRealmRestClient().list();\n \n-    private List<GroupTO> allGroups;\n+    private GroupsModel groupsModel;\n \n     private final AnyTO anyTO;\n \n+    private boolean templateMode;\n+\n     public <T extends AnyTO> Groups(final AnyWrapper<T> modelObject, final boolean templateMode) {\n         super();\n+        this.templateMode = templateMode;\n \n         this.anyTO = modelObject.getInnerObject();\n-        final String realm = templateMode ? \"/\" : this.anyTO.getRealm();\n+\n+        groupsModel = new GroupsModel();\n \n         // -----------------------------------------------------------------\n         // Pre-Authorizations\n@@ -127,59 +133,29 @@ public boolean evaluate(final MembershipTO object) {\n                         }\n                     });\n \n-            allGroups = groupRestClient.search(\n-                    realm,\n-                    SyncopeClient.getGroupSearchConditionBuilder().isAssignable().query(),\n-                    1,\n-                    MAX_GROUP_LIST_CARDINALITY,\n-                    new SortParam<>(\"name\", true),\n-                    null);\n-\n-            // ---------------------------------\n-            // Retrieve group memberships\n-            // ---------------------------------\n-            // this is to be sure to have group names (required to see membership details in approval page)\n-            GroupFiqlSearchConditionBuilder searchConditionBuilder = SyncopeClient.getGroupSearchConditionBuilder();\n-\n-            List<CompleteCondition> conditions = new ArrayList<>();\n-            for (MembershipTO membershipTO : GroupableRelatableTO.class.cast(anyTO).getMemberships()) {\n-                conditions.add(searchConditionBuilder.is(\"key\").equalTo(membershipTO.getGroupKey()).wrap());\n-            }\n+            groupsContainer.add(builder.setAllowOrder(true).withFilter().build(\"groups\",\n+                    new ListModel<MembershipTO>() {\n \n-            List<GroupTO> groups = new ArrayList<>();\n-            if (!conditions.isEmpty()) {\n-                groups.addAll(groupRestClient.search(\n-                        \"/\",\n-                        searchConditionBuilder.or(conditions).query(),\n-                        -1,\n-                        -1,\n-                        new SortParam<>(\"name\", true),\n-                        null));\n-            }\n+                private static final long serialVersionUID = -2583290457773357445L;\n \n-            // set group names in membership TOs\n-            for (GroupTO group : groups) {\n-                MembershipTO membership = GroupableRelatableTO.class.cast(anyTO).getMembership(group.getKey());\n-                if (membership != null) {\n-                    membership.setGroupName(group.getName());\n+                @Override\n+                public List<MembershipTO> getObject() {\n+                    return Groups.this.groupsModel.getMemberships();\n                 }\n-            }\n \n-            groupsContainer.add(builder.setAllowOrder(true).withFilter().build(\"groups\",\n-                    new ListModel<>(GroupableRelatableTO.class.cast(anyTO).getMemberships()),\n-                    new AjaxPalettePanel.Builder.Query<MembershipTO>() {\n+            }, new AjaxPalettePanel.Builder.Query<MembershipTO>() {\n \n                 private static final long serialVersionUID = -7223078772249308813L;\n \n                 @Override\n                 public List<MembershipTO> execute(final String filter) {\n                     return CollectionUtils.collect(\n                             StringUtils.isEmpty(filter) || \"*\".equals(filter)\n-                            ? allGroups\n+                            ? groupsModel.getObject()\n                             : groupRestClient.search(\n-                                    realm,\n+                                    anyTO.getRealm(),\n                                     SyncopeClient.getGroupSearchConditionBuilder().\n-                                            isAssignable().and().is(\"name\").equalTo(filter).query(),\n+                                    isAssignable().and().is(\"name\").equalTo(filter).query(),\n                                     1, MAX_GROUP_LIST_CARDINALITY,\n                                     new SortParam<>(\"name\", true),\n                                     null),\n@@ -194,38 +170,19 @@ public MembershipTO transform(final GroupTO input) {\n                     }, new ArrayList<MembershipTO>());\n                 }\n             }).hideLabel().setOutputMarkupId(true));\n-            // ---------------------------------\n \n-            // ---------------------------------\n-            // Retrieve dyn group memberships\n-            // ---------------------------------\n-            searchConditionBuilder = SyncopeClient.getGroupSearchConditionBuilder();\n+            dyngroupsContainer.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).build(\"dyngroups\",\n+                    new ListModel<String>() {\n \n-            conditions = new ArrayList<>();\n-            for (String groupKey : GroupableRelatableTO.class.cast(anyTO).getDynGroups()) {\n-                conditions.add(searchConditionBuilder.is(\"key\").equalTo(groupKey).wrap());\n-            }\n+                private static final long serialVersionUID = -2583290457773357445L;\n \n-            groups = new ArrayList<>();\n-            if (!conditions.isEmpty()) {\n-                groups.addAll(groupRestClient.search(\n-                        \"/\",\n-                        searchConditionBuilder.or(conditions).query(),\n-                        -1,\n-                        -1,\n-                        new SortParam<>(\"name\", true),\n-                        null));\n-            }\n-\n-            dyngroupsContainer.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).build(\"dyngroups\",\n-                    new ListModel<>(CollectionUtils.collect(groups, new Transformer<GroupTO, String>() {\n+                @Override\n+                public List<String> getObject() {\n+                    return Groups.this.groupsModel.getDynMemberships();\n+                }\n \n-                        @Override\n-                        public String transform(final GroupTO input) {\n-                            return input.getName();\n-                        }\n-                    }, new ArrayList<String>())),\n-                    new ListModel<>(CollectionUtils.collect(allGroups, new Transformer<GroupTO, String>() {\n+            }, new ListModel<>(CollectionUtils.collect(groupsModel.getObject(),\n+                            new Transformer<GroupTO, String>() {\n \n                         @Override\n                         public String transform(final GroupTO input) {\n@@ -264,8 +221,143 @@ public String transform(final GroupTO input) {\n     public boolean evaluate() {\n         return ((anyTO instanceof GroupTO)\n                 ? CollectionUtils.isNotEmpty(allDynRealms)\n-                : CollectionUtils.isNotEmpty(allDynRealms) || CollectionUtils.isNotEmpty(allGroups))\n+                : CollectionUtils.isNotEmpty(allDynRealms) || CollectionUtils.isNotEmpty(groupsModel.getObject()))\n                 && SyncopeConsoleApplication.get().getSecuritySettings().getAuthorizationStrategy().\n-                        isActionAuthorized(this, RENDER);\n+                isActionAuthorized(this, RENDER);\n+    }\n+\n+    private class GroupsModel extends ListModel<GroupTO> {\n+\n+        private static final long serialVersionUID = -4541954630939063927L;\n+\n+        private List<GroupTO> groups;\n+\n+        private List<MembershipTO> memberships;\n+\n+        private List<String> dynMemberships;\n+\n+        private String realm;\n+\n+        @Override\n+        public List<GroupTO> getObject() {\n+            reload();\n+            return groups;\n+        }\n+\n+        /**\n+         * Retrieve the first MAX_GROUP_LIST_CARDINALITY assignable.\n+         */\n+        private void reloadObject() {\n+            groups = groupRestClient.search(\n+                    realm,\n+                    SyncopeClient.getGroupSearchConditionBuilder().isAssignable().query(),\n+                    1,\n+                    MAX_GROUP_LIST_CARDINALITY,\n+                    new SortParam<>(\"name\", true),\n+                    null);\n+        }\n+\n+        public List<MembershipTO> getMemberships() {\n+            reload();\n+            return memberships;\n+        }\n+\n+        /**\n+         * Retrieve group memberships.\n+         */\n+        private void reloadMemberships() {\n+            // this is to be sure to have group names (required to see membership details in approval page)\n+            GroupFiqlSearchConditionBuilder searchConditionBuilder = SyncopeClient.getGroupSearchConditionBuilder();\n+\n+            List<CompleteCondition> conditions = new ArrayList<>();\n+            for (MembershipTO membershipTO : GroupableRelatableTO.class.cast(anyTO).getMemberships()) {\n+                conditions.add(searchConditionBuilder.is(\"key\").equalTo(membershipTO.getGroupKey()).wrap());\n+            }\n+\n+            Map<String, GroupTO> assignedGroups = new HashMap<>();\n+            if (!conditions.isEmpty()) {\n+                for (GroupTO group : groupRestClient.search(\n+                        realm,\n+                        searchConditionBuilder.isAssignable().and().or(conditions).query(),\n+                        -1,\n+                        -1,\n+                        new SortParam<>(\"name\", true),\n+                        null)) {\n+                    assignedGroups.put(group.getKey(), group);\n+                }\n+            }\n+\n+            // set group names in membership TOs and remove membership not assignable\n+            List<MembershipTO> toBeRemoved = new ArrayList<>();\n+            for (MembershipTO membership : GroupableRelatableTO.class.cast(anyTO).getMemberships()) {\n+                if (assignedGroups.containsKey(membership.getRightKey())) {\n+                    membership.setGroupName(assignedGroups.get(membership.getRightKey()).getName());\n+                } else {\n+                    toBeRemoved.add(membership);\n+                }\n+            }\n+            GroupableRelatableTO.class.cast(anyTO).getMemberships().removeAll(toBeRemoved);\n+\n+            memberships = GroupableRelatableTO.class.cast(anyTO).getMemberships();\n+        }\n+\n+        public List<String> getDynMemberships() {\n+            reload();\n+            return dynMemberships;\n+        }\n+\n+        /**\n+         * Retrieve dyn group memberships.\n+         */\n+        private void reloadDynMemberships() {\n+            GroupFiqlSearchConditionBuilder searchConditionBuilder = SyncopeClient.getGroupSearchConditionBuilder();\n+\n+            ArrayList<CompleteCondition> conditions = new ArrayList<>();\n+            for (String groupKey : GroupableRelatableTO.class.cast(anyTO).getDynGroups()) {\n+                conditions.add(searchConditionBuilder.is(\"key\").equalTo(groupKey).wrap());\n+            }\n+\n+            Map<String, GroupTO> assignedGroups = new HashMap<>();\n+            if (!conditions.isEmpty()) {\n+                for (GroupTO group : groupRestClient.search(\n+                        \"/\",\n+                        searchConditionBuilder.or(conditions).query(),\n+                        -1,\n+                        -1,\n+                        new SortParam<>(\"name\", true),\n+                        null)) {\n+                    assignedGroups.put(group.getKey(), group);\n+                }\n+            }\n+\n+            dynMemberships = CollectionUtils.collect(assignedGroups.values(), new Transformer<GroupTO, String>() {\n+\n+                @Override\n+                public String transform(final GroupTO input) {\n+                    return input.getName();\n+                }\n+            }, new ArrayList<String>());\n+        }\n+\n+        /**\n+         * Reload data if the realm changes (see SYNCOPE-1135).\n+         */\n+        private void reload() {\n+            boolean reload;\n+\n+            if (Groups.this.templateMode) {\n+                reload = realm == null;\n+                realm = \"/\";\n+            } else {\n+                reload = !Groups.this.anyTO.getRealm().equalsIgnoreCase(realm);\n+                realm = Groups.this.anyTO.getRealm();\n+            }\n+\n+            if (reload) {\n+                reloadObject();\n+                reloadMemberships();\n+                reloadDynMemberships();\n+            }\n+        }\n     }\n }"}]}