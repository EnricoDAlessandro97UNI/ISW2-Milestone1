{"sha":"891122c2f3d4ec814eff8df3154ba425ce172335","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg5MTEyMmMyZjNkNGVjODE0ZWZmOGRmMzE1NGJhNDI1Y2UxNzIzMzU=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2016-07-29T13:38:53Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2016-07-29T13:39:28Z"},"message":"SYNCOPE-910 - Introduce new Camel propagation component - part II","tree":{"sha":"9477efd189dfbd7ef219dfeee30db373b6845785","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9477efd189dfbd7ef219dfeee30db373b6845785"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/891122c2f3d4ec814eff8df3154ba425ce172335","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/891122c2f3d4ec814eff8df3154ba425ce172335","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/891122c2f3d4ec814eff8df3154ba425ce172335","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/891122c2f3d4ec814eff8df3154ba425ce172335/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"550145f8ef979a69ecb2e6197fb4d3a727dcf388","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/550145f8ef979a69ecb2e6197fb4d3a727dcf388","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/550145f8ef979a69ecb2e6197fb4d3a727dcf388"}],"stats":{"total":714,"additions":302,"deletions":412},"files":[{"sha":"c0728cd5d71bb90cd5559b4d0eb4563f886a0026","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateComponent.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n \n public class PropagateComponent extends UriEndpointComponent {\n@@ -48,6 +49,9 @@ public class PropagateComponent extends UriEndpointComponent {\n     @Autowired\n     protected GroupDataBinder groupDataBinder;\n \n+    @Autowired\n+    protected UserWorkflowAdapter uwfAdapter;\n+\n     public PropagateComponent() {\n         super(PropagateEndpoint.class);\n     }\n@@ -63,6 +67,7 @@ protected Endpoint createEndpoint(final String uri, final String remaining,\n         endpoint.setGroupDAO(groupDAO);\n         endpoint.setAnyObjectDAO(anyObjectDAO);\n         endpoint.setGroupDataBinder(groupDataBinder);\n+        endpoint.setUwfAdapter(uwfAdapter);\n \n         setProperties(endpoint, parameters);\n         return endpoint;"},{"sha":"e619f91ab0d6ee55aa98f642eef368814acc2b9e","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateEndpoint.java","status":"modified","additions":29,"deletions":1,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -33,11 +33,15 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.camel.AnyType;\n import org.apache.syncope.core.provisioning.camel.producer.AbstractProducer;\n+import org.apache.syncope.core.provisioning.camel.producer.ConfirmPasswordResetProducer;\n import org.apache.syncope.core.provisioning.camel.producer.CreateProducer;\n import org.apache.syncope.core.provisioning.camel.producer.DeleteProducer;\n import org.apache.syncope.core.provisioning.camel.producer.DeprovisionProducer;\n import org.apache.syncope.core.provisioning.camel.producer.ProvisionProducer;\n+import org.apache.syncope.core.provisioning.camel.producer.StatusProducer;\n+import org.apache.syncope.core.provisioning.camel.producer.SuspendProducer;\n import org.apache.syncope.core.provisioning.camel.producer.UpdateProducer;\n+import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n \n @UriEndpoint(scheme = \"propagate\", title = \"propagate\", syntax = \"propagate:propagateType\", producerOnly = true)\n public class PropagateEndpoint extends DefaultEndpoint {\n@@ -47,6 +51,9 @@ public class PropagateEndpoint extends DefaultEndpoint {\n \n     @UriParam\n     private AnyType anyType;\n+    \n+    @UriParam\n+    private boolean pull;\n \n     private PropagationManager propagationManager;\n \n@@ -59,6 +66,8 @@ public class PropagateEndpoint extends DefaultEndpoint {\n     private AnyObjectDAO anyObjectDAO;\n \n     private GroupDataBinder groupDataBinder;\n+    \n+    private  UserWorkflowAdapter uwfAdapter;\n \n     public PropagateEndpoint(final String endpointUri, final Component component) {\n         super(endpointUri, component);\n@@ -77,11 +86,18 @@ public Producer createProducer() throws Exception {\n             producer = new ProvisionProducer(this, anyType);\n         } else if (PropagateType.deprovision == propagateType) {\n             producer = new DeprovisionProducer(this, anyType, userDAO, groupDAO, anyObjectDAO);\n-        } \n+        } else if (PropagateType.status == propagateType) {\n+            producer = new StatusProducer(this, anyType, userDAO, uwfAdapter);\n+        } else if (PropagateType.suspend == propagateType) {\n+            producer = new SuspendProducer(this, anyType);\n+        } else if (PropagateType.confirmPasswordReset == propagateType) {\n+            producer = new ConfirmPasswordResetProducer(this, anyType);\n+        }\n \n         if (producer != null) {\n             producer.setPropagationManager(propagationManager);\n             producer.setPropagationTaskExecutor(taskExecutor);\n+            producer.setPull(pull);\n         }\n         return producer;\n     }\n@@ -135,4 +151,16 @@ public void setAnyObjectDAO(final AnyObjectDAO anyObjectDAO) {\n     public void setGroupDataBinder(final GroupDataBinder groupDataBinder) {\n         this.groupDataBinder = groupDataBinder;\n     }\n+\n+    public boolean isPull() {\n+        return pull;\n+    }\n+\n+    public void setPull(final boolean pull) {\n+        this.pull = pull;\n+    }\n+\n+    public void setUwfAdapter(final UserWorkflowAdapter uwfAdapter) {\n+        this.uwfAdapter = uwfAdapter;\n+    }\n }"},{"sha":"fd36908fc08cafe155b32a4de8e1dd3fad38b992","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -18,6 +18,6 @@\n \n public enum PropagateType {\n \n-    create, update, delete, provision, deprovision\n+    create, update, delete, provision, deprovision, status, suspend, confirmPasswordReset\n \n }"},{"sha":"256bccd575986fcd00f53d87937e8369135e18ca","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupCreateInPullProcessor.java","status":"removed","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInPullProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInPullProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInPullProcessor.java?ref=550145f8ef979a69ecb2e6197fb4d3a727dcf388","patch":"@@ -1,73 +0,0 @@\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class GroupCreateInPullProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public void process(final Exchange exchange) {\n-        WorkflowResult<String> created = (WorkflowResult<String>) exchange.getIn().getBody();\n-\n-        GroupTO groupTO = exchange.getProperty(\"any\", GroupTO.class);\n-        Map<String, String> groupOwnerMap = exchange.getProperty(\"groupOwnerMap\", Map.class);\n-        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        AttrTO groupOwner = groupTO.getPlainAttrMap().get(StringUtils.EMPTY);\n-        if (groupOwner != null) {\n-            groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next());\n-        }\n-\n-        List<PropagationTask> tasks = propagationManager.getCreateTasks(\n-                AnyTypeKind.GROUP,\n-                created.getResult(),\n-                created.getPropByRes(),\n-                groupTO.getVirAttrs(),\n-                excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.getOut().setBody(new ImmutablePair<>(created.getResult(), null));\n-    }\n-}"},{"sha":"b86ee5f574d4d707e1b87e327bd83be9bafd0581","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserConfirmPwdResetProcessor.java","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java?ref=550145f8ef979a69ecb2e6197fb4d3a727dcf388","patch":"@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserConfirmPwdResetProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Override\n-    public void process(final Exchange exchange) {\n-        @SuppressWarnings(\"unchecked\")\n-        WorkflowResult<Pair<UserPatch, Boolean>> updated =\n-                (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n-\n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n-\n-        taskExecutor.execute(tasks, false);\n-    }\n-}"},{"sha":"a349575b3a85beba633e42bd07116e3f5659e6d0","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserInternalSuspendProcessor.java","status":"removed","additions":0,"deletions":62,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInternalSuspendProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInternalSuspendProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInternalSuspendProcessor.java?ref=550145f8ef979a69ecb2e6197fb4d3a727dcf388","patch":"@@ -1,62 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserInternalSuspendProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Override\n-    public void process(final Exchange exchange) {\n-        @SuppressWarnings(\"unchecked\")\n-        Pair<WorkflowResult<String>, Boolean> updated = \n-            (Pair<WorkflowResult<String>, Boolean>) exchange.getIn().getBody();\n-\n-        // propagate suspension if and only if it is required by policy\n-        if (updated != null && updated.getValue()) {\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(updated.getKey().getResult());\n-\n-            List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                    new WorkflowResult<Pair<UserPatch, Boolean>>(\n-                            new ImmutablePair<>(userPatch, Boolean.FALSE),\n-                            updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n-            taskExecutor.execute(tasks);\n-        }\n-    }\n-\n-}"},{"sha":"ce0eeb7c4d00eb58a037d9f7eb749a684342ee40","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserSetStatusInPullProcessor.java","status":"removed","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInPullProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInPullProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInPullProcessor.java?ref=550145f8ef979a69ecb2e6197fb4d3a727dcf388","patch":"@@ -1,73 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.Map;\n-import java.util.Map.Entry;\n-\n-import org.apache.camel.Processor;\n-import org.apache.camel.Exchange;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserSetStatusInPullProcessor implements Processor {\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Autowired\n-    protected UserWorkflowAdapter uwfAdapter;\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) {\n-        WorkflowResult<Map.Entry<UserPatch, Boolean>> updated = \n-            (WorkflowResult<Entry<UserPatch, Boolean>>) exchange.getIn().getBody();\n-\n-        Boolean enabled = exchange.getProperty(\"enabled\", Boolean.class);\n-        String key = exchange.getProperty(\"key\", String.class);\n-\n-        if (enabled != null) {\n-            User user = userDAO.find(key);\n-\n-            WorkflowResult<String> enableUpdate = null;\n-            if (user.isSuspended() == null) {\n-                enableUpdate = uwfAdapter.activate(key, null);\n-            } else if (enabled && user.isSuspended()) {\n-                enableUpdate = uwfAdapter.reactivate(key);\n-            } else if (!enabled && !user.isSuspended()) {\n-                enableUpdate = uwfAdapter.suspend(key);\n-            }\n-\n-            if (enableUpdate != null) {\n-                if (enableUpdate.getPropByRes() != null) {\n-                    updated.getPropByRes().merge(enableUpdate.getPropByRes());\n-                    updated.getPropByRes().purge();\n-                }\n-                updated.getPerformedTasks().addAll(enableUpdate.getPerformedTasks());\n-            }\n-        }\n-    }\n-}"},{"sha":"f2ad3d8a4d517fae105a80721d76144ccc68049d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserStatusPropagationProcessor.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java?ref=550145f8ef979a69ecb2e6197fb4d3a727dcf388","patch":"@@ -1,72 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.common.lib.types.StatusPatchType;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserStatusPropagationProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) {\n-        WorkflowResult<Long> updated = (WorkflowResult<Long>) exchange.getIn().getBody();\n-        StatusPatch statusPatch = exchange.getProperty(\"statusPatch\", StatusPatch.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n-                AnyTypeKind.USER,\n-                statusPatch.getKey(),\n-                false,\n-                statusPatch.getType() != StatusPatchType.SUSPEND,\n-                propByRes,\n-                null,\n-                null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.getOut().setBody(new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses()));\n-    }\n-}"},{"sha":"1fb917df950352b3bdd6ae6b40447a1763e3d1a6","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateInPullProcessor.java","status":"removed","additions":0,"deletions":60,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInPullProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/550145f8ef979a69ecb2e6197fb4d3a727dcf388/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInPullProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInPullProcessor.java?ref=550145f8ef979a69ecb2e6197fb4d3a727dcf388","patch":"@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserUpdateInPullProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) {\n-        WorkflowResult<Pair<UserPatch, Boolean>> updated =\n-                (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n-        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                updated, updated.getResult().getKey().getPassword() != null, excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.getOut().setBody(new ImmutablePair<>(\n-                updated.getResult().getKey().getKey(), propagationReporter.getStatuses()));\n-    }\n-}"},{"sha":"a76620cf964ae3a951bb1e7863073ddb8ed1243e","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/AbstractProducer.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -29,6 +29,8 @@ public abstract class AbstractProducer extends DefaultProducer {\n     private PropagationTaskExecutor taskExecutor;\n \n     private AnyType anyType;\n+    \n+    private boolean pull;\n \n     public AbstractProducer(final Endpoint endpoint, final AnyType anyType) {\n         super(endpoint);\n@@ -54,4 +56,12 @@ public PropagationTaskExecutor getPropagationTaskExecutor() {\n     public AnyType getAnyType() {\n         return anyType;\n     }\n+\n+    public boolean isPull() {\n+        return pull;\n+    }\n+\n+    public void setPull(final boolean pull) {\n+        this.pull = pull;\n+    }\n }"},{"sha":"0769d3d773a37a7d60a468f0965f2da6c368ba9d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.producer;\n+\n+import java.util.List;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.camel.AnyType;\n+\n+public class ConfirmPasswordResetProducer extends AbstractProducer {\n+\n+    public ConfirmPasswordResetProducer(final Endpoint endpoint, final AnyType anyType) {\n+        super(endpoint, anyType);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        if (getAnyType() == AnyType.user) {\n+            WorkflowResult<Pair<UserPatch, Boolean>> updated =\n+                (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n+\n+            List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(updated);\n+\n+            getPropagationTaskExecutor().execute(tasks, false);\n+        }\n+    }\n+\n+}"},{"sha":"3c72c60b82f6ee2c6b99d74d7e34481ad8393c35","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"modified","additions":32,"deletions":8,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -17,14 +17,18 @@\n package org.apache.syncope.core.provisioning.camel.producer;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -69,16 +73,36 @@ public void process(final Exchange exchange) throws Exception {\n                 if (actual instanceof AnyObjectTO) {\n                     anyTypeKind = AnyTypeKind.ANY_OBJECT;\n                 }\n-                List<PropagationTask> tasks = getPropagationManager().getCreateTasks(\n-                        anyTypeKind,\n-                        created.getResult(),\n-                        created.getPropByRes(),\n-                        ((AnyTO) actual).getVirAttrs(),\n-                        excludedResources);\n-                PropagationReporter propagationReporter = \n+                \n+                if (actual instanceof GroupTO && isPull()) {\n+                    Map<String, String> groupOwnerMap = exchange.getProperty(\"groupOwnerMap\", Map.class);\n+                    AttrTO groupOwner = ((GroupTO) actual).getPlainAttrMap().get(StringUtils.EMPTY);\n+                    if (groupOwner != null) {\n+                        groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next());\n+                    }\n+\n+                    List<PropagationTask> tasks = getPropagationManager().getCreateTasks(\n+                            AnyTypeKind.GROUP,\n+                            created.getResult(),\n+                            created.getPropByRes(),\n+                            ((AnyTO) actual).getVirAttrs(),\n+                            excludedResources);\n                     getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n-                exchange.getOut().setBody(new ImmutablePair<>(created.getResult(), propagationReporter.getStatuses()));\n+                    exchange.getOut().setBody(new ImmutablePair<>(created.getResult(), null));\n+                } else {\n+                    List<PropagationTask> tasks = getPropagationManager().getCreateTasks(\n+                            anyTypeKind,\n+                            created.getResult(),\n+                            created.getPropByRes(),\n+                            ((AnyTO) actual).getVirAttrs(),\n+                            excludedResources);\n+                    PropagationReporter propagationReporter =\n+                        getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+\n+                    exchange.getOut().setBody(new ImmutablePair<>(created.getResult(),\n+                        propagationReporter.getStatuses()));\n+                }\n             }\n         }\n     }"},{"sha":"01c4bd856bce12b53ace6707178c4ba7d5750412","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.producer;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.PropagationByResource;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.camel.AnyType;\n+import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n+\n+public class StatusProducer extends AbstractProducer {\n+\n+    private UserDAO userDAO;\n+    private UserWorkflowAdapter uwfAdapter;\n+    \n+    public StatusProducer(final Endpoint endpoint, final AnyType anyType, final UserDAO userDAO,\n+                          final UserWorkflowAdapter uwfAdapter) {\n+        super(endpoint, anyType);\n+        this.userDAO = userDAO;\n+        this.uwfAdapter = uwfAdapter;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        if (getAnyType() == AnyType.user && isPull()) {\n+            WorkflowResult<Map.Entry<UserPatch, Boolean>> updated = \n+                (WorkflowResult<Entry<UserPatch, Boolean>>) exchange.getIn().getBody();\n+\n+            Boolean enabled = exchange.getProperty(\"enabled\", Boolean.class);\n+            String key = exchange.getProperty(\"key\", String.class);\n+\n+            if (enabled != null) {\n+                User user = userDAO.find(key);\n+\n+                WorkflowResult<String> enableUpdate = null;\n+                if (user.isSuspended() == null) {\n+                    enableUpdate = uwfAdapter.activate(key, null);\n+                } else if (enabled && user.isSuspended()) {\n+                    enableUpdate = uwfAdapter.reactivate(key);\n+                } else if (!enabled && !user.isSuspended()) {\n+                    enableUpdate = uwfAdapter.suspend(key);\n+                }\n+\n+                if (enableUpdate != null) {\n+                    if (enableUpdate.getPropByRes() != null) {\n+                        updated.getPropByRes().merge(enableUpdate.getPropByRes());\n+                        updated.getPropByRes().purge();\n+                    }\n+                    updated.getPerformedTasks().addAll(enableUpdate.getPerformedTasks());\n+                }\n+            }\n+        } else if (getAnyType() == AnyType.user) {\n+            WorkflowResult<Long> updated = (WorkflowResult<Long>) exchange.getIn().getBody();\n+            StatusPatch statusPatch = exchange.getProperty(\"statusPatch\", StatusPatch.class);\n+            Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n+\n+            PropagationByResource propByRes = new PropagationByResource();\n+            propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n+            List<PropagationTask> tasks = getPropagationManager().getUpdateTasks(\n+                    AnyTypeKind.USER,\n+                    statusPatch.getKey(),\n+                    false,\n+                    statusPatch.getType() != StatusPatchType.SUSPEND,\n+                    propByRes,\n+                    null,\n+                    null);\n+            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+\n+            exchange.getOut().setBody(new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses()));\n+        }\n+    }\n+\n+}"},{"sha":"d8d27086b50da11a51772d2042708bd80a6eb799","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.producer;\n+\n+import java.util.List;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.camel.AnyType;\n+\n+public class SuspendProducer extends AbstractProducer {\n+\n+    public SuspendProducer(final Endpoint endpoint, final AnyType anyType) {\n+        super(endpoint, anyType);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        if (getAnyType() == AnyType.user) {\n+            Pair<WorkflowResult<String>, Boolean> updated = \n+                (Pair<WorkflowResult<String>, Boolean>) exchange.getIn().getBody();\n+\n+            // propagate suspension if and only if it is required by policy\n+            if (updated != null && updated.getValue()) {\n+                UserPatch userPatch = new UserPatch();\n+                userPatch.setKey(updated.getKey().getResult());\n+\n+                List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(\n+                        new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                                new ImmutablePair<>(userPatch, Boolean.FALSE),\n+                                updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n+                getPropagationTaskExecutor().execute(tasks);\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"2f9183b604c88fb71fa9e63a15efd367df3ca1ff","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -46,11 +46,18 @@ public void process(final Exchange exchange) throws Exception {\n             Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n             Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-            if (actual instanceof UserPatch) {\n+            if (actual instanceof UserPatch || isPull()) {\n                 WorkflowResult<Pair<UserPatch, Boolean>> updated =\n                         (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n \n-                List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(updated);\n+                List<PropagationTask> tasks = null;\n+                \n+                if (isPull()) {\n+                    boolean passwordNotNull = updated.getResult().getKey().getPassword() != null;\n+                    tasks = getPropagationManager().getUserUpdateTasks(updated, passwordNotNull, excludedResources);\n+                } else {\n+                    tasks = getPropagationManager().getUserUpdateTasks(updated);\n+                }\n                 PropagationReporter propagationReporter = \n                     getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n@@ -72,7 +79,7 @@ public void process(final Exchange exchange) throws Exception {\n                         updated.getPropByRes(),\n                         ((AnyPatch) actual).getVirAttrs(),\n                         excludedResources);\n-                PropagationReporter propagationReporter = \n+                PropagationReporter propagationReporter =\n                     getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n                 exchange.getOut().setBody(new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses()));"},{"sha":"9c92f2585a672a32e3d02d34a1231a7a2b623f99","filename":"ext/camel/provisioning-camel/src/main/resources/groupRoutes.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -40,12 +40,12 @@ under the License.\n                \n   <route id=\"createGroupPull\">\n     <from uri=\"direct:createGroupInPull\"/>\n-    <setProperty propertyName=\"any\">\n+    <setProperty propertyName=\"actual\">\n       <simple>${body}</simple>\n     </setProperty>\n     <doTry>\n       <bean ref=\"gwfAdapter\" method=\"create(${body})\"/>\n-      <process ref=\"groupCreateInPullProcessor\"/>\n+      <to uri=\"propagate:create?anyType=group&amp;pull=true\"/>\n       <to uri=\"direct:createGroupInPullPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>"},{"sha":"5d68d2a0a0f75c0e124cf9f137ae6ede242ff0c9","filename":"ext/camel/provisioning-camel/src/main/resources/userRoutes.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891122c2f3d4ec814eff8df3154ba425ce172335/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml?ref=891122c2f3d4ec814eff8df3154ba425ce172335","patch":"@@ -75,8 +75,8 @@ under the License.\n         \n   <route id=\"userInPull\">\n     <from uri=\"direct:userInPull\"/>\n-    <process ref=\"userSetStatusInPullProcessor\"/>\n-    <process ref=\"userUpdateInPullProcessor\"/>\n+    <to uri=\"propagate:status?anyType=user&amp;pull=true\"/>\n+    <to uri=\"propagate:update?anyType=user&amp;pull=true\"/>\n     <to uri=\"direct:updateInPullPort\"/>\n   </route>\n   \n@@ -182,7 +182,7 @@ under the License.\n         \n   <route id=\"userStatusPropagation\">\n     <from uri=\"direct:userStatusPropagation\"/>            \n-    <process ref=\"userStatusPropagationProcessor\"/>\n+    <to uri=\"propagate:status?anyType=user\"/>\n     <to uri=\"direct:statusPort\"/> \n   </route>\n     \n@@ -202,7 +202,7 @@ under the License.\n     <from uri=\"direct:internalSuspendUser\"/>\n     <doTry>\n       <bean ref=\"uwfAdapter\" method=\"internalSuspend(${body})\"/>\n-      <process ref=\"userInternalSuspendProcessor\"/>\n+      <to uri=\"propagate:suspend?anyType=user\"/>\n       <to uri=\"direct:internalSuspendUserPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -233,7 +233,7 @@ under the License.\n     <from uri=\"direct:confirmPwdReset\"/>\n     <doTry>\n       <bean ref=\"uwfAdapter\" method=\"confirmPasswordReset(${property.key},${property.token},${property.password})\"/>\n-      <process ref=\"userConfirmPwdResetProcessor\"/>\n+      <to uri=\"propagate:confirmPasswordReset?anyType=user\"/>\n       <to uri=\"direct:confirmPwdResetPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>"}]}