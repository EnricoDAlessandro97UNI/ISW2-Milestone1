{"sha":"62d1b00618d252c7a073daef2613e6b30a23a0af","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYyZDFiMDA2MThkMjUyYzdhMDczZGFlZjI2MTNlNmIzMGEyM2EwYWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-03-23T11:03:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-03-23T12:52:39Z"},"message":"[SYNCOPE-1535] Extending to Push","tree":{"sha":"0517295a30c755daefd91395de3e68e56e92633e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0517295a30c755daefd91395de3e68e56e92633e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/62d1b00618d252c7a073daef2613e6b30a23a0af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62d1b00618d252c7a073daef2613e6b30a23a0af","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/62d1b00618d252c7a073daef2613e6b30a23a0af","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62d1b00618d252c7a073daef2613e6b30a23a0af/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f7a4fbf49c3fc0bfa3ee8bfef672d0a079100aa1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f7a4fbf49c3fc0bfa3ee8bfef672d0a079100aa1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f7a4fbf49c3fc0bfa3ee8bfef672d0a079100aa1"}],"stats":{"total":87,"additions":50,"deletions":37},"files":[{"sha":"7fce45fd2b7ca062f5c243dd32eb7415dac4ce62","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62d1b00618d252c7a073daef2613e6b30a23a0af/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62d1b00618d252c7a073daef2613e6b30a23a0af/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=62d1b00618d252c7a073daef2613e6b30a23a0af","patch":"@@ -273,6 +273,7 @@ protected String doExecuteProvisioning(\n             }\n         }\n \n+        // ...then provisions for any types\n         ProvisionSorter provisionSorter = new DefaultProvisionSorter();\n         if (pullTask.getResource().getProvisionSorter() != null) {\n             try {\n@@ -281,15 +282,15 @@ protected String doExecuteProvisioning(\n                 LOG.error(\"While building {}\", pullTask.getResource().getProvisionSorter(), e);\n             }\n         }\n-        // ...then provisions for any types\n-        SyncopePullResultHandler handler;\n+\n         GroupPullResultHandler ghandler = buildGroupHandler();\n         for (Provision provision : pullTask.getResource().getProvisions().stream().\n                 filter(provision -> provision.getMapping() != null).sorted(provisionSorter).\n                 collect(Collectors.toList())) {\n \n             status.set(\"Pulling \" + provision.getObjectClass().getObjectClassValue());\n \n+            SyncopePullResultHandler handler;\n             switch (provision.getAnyType().getKind()) {\n                 case USER:\n                     handler = buildUserHandler();"},{"sha":"d890765c95874f2c34c6d8b918b5428f87449bb0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":47,"deletions":35,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62d1b00618d252c7a073daef2613e6b30a23a0af/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62d1b00618d252c7a073daef2613e6b30a23a0af/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=62d1b00618d252c7a073daef2613e6b30a23a0af","patch":"@@ -24,7 +24,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n-\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.MutablePair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -47,13 +47,15 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.ProvisionSorter;\n import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.GroupPushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.RealmPushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPushResultHandler;\n+import org.apache.syncope.core.provisioning.java.DefaultProvisionSorter;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -202,47 +204,57 @@ protected String doExecuteProvisioning(\n         }\n \n         // ...then provisions for any types\n-        for (Provision provision : pushTask.getResource().getProvisions()) {\n-            if (provision.getMapping() != null) {\n-                status.set(\"Pushing \" + provision.getAnyType().getKey());\n+        ProvisionSorter provisionSorter = new DefaultProvisionSorter();\n+        if (pushTask.getResource().getProvisionSorter() != null) {\n+            try {\n+                provisionSorter = ImplementationManager.build(pushTask.getResource().getProvisionSorter());\n+            } catch (Exception e) {\n+                LOG.error(\"While building {}\", pushTask.getResource().getProvisionSorter(), e);\n+            }\n+        }\n \n-                AnyDAO<?> anyDAO = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).dao();\n+        for (Provision provision : pushTask.getResource().getProvisions().stream().\n+                filter(provision -> provision.getMapping() != null).sorted(provisionSorter).\n+                collect(Collectors.toList())) {\n \n-                SyncopePushResultHandler handler;\n-                switch (provision.getAnyType().getKind()) {\n-                    case USER:\n-                        handler = buildUserHandler();\n-                        break;\n+            status.set(\"Pushing \" + provision.getAnyType().getKey());\n \n-                    case GROUP:\n-                        handler = buildGroupHandler();\n-                        break;\n+            AnyDAO<?> anyDAO = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).dao();\n \n-                    case ANY_OBJECT:\n-                    default:\n-                        handler = buildAnyObjectHandler();\n-                }\n-                handler.setProfile(profile);\n-\n-                Optional<? extends PushTaskAnyFilter> anyFilter = pushTask.getFilter(provision.getAnyType());\n-                String filter = anyFilter.map(PushTaskAnyFilter::getFIQLCond).orElse(null);\n-                SearchCond cond = StringUtils.isBlank(filter)\n-                        ? anyDAO.getAllMatchingCond()\n-                        : SearchCondConverter.convert(searchCondVisitor, filter);\n-                int count = searchDAO.count(\n+            SyncopePushResultHandler handler;\n+            switch (provision.getAnyType().getKind()) {\n+                case USER:\n+                    handler = buildUserHandler();\n+                    break;\n+\n+                case GROUP:\n+                    handler = buildGroupHandler();\n+                    break;\n+\n+                case ANY_OBJECT:\n+                default:\n+                    handler = buildAnyObjectHandler();\n+            }\n+            handler.setProfile(profile);\n+\n+            Optional<? extends PushTaskAnyFilter> anyFilter = pushTask.getFilter(provision.getAnyType());\n+            String filter = anyFilter.map(PushTaskAnyFilter::getFIQLCond).orElse(null);\n+            SearchCond cond = StringUtils.isBlank(filter)\n+                    ? anyDAO.getAllMatchingCond()\n+                    : SearchCondConverter.convert(searchCondVisitor, filter);\n+            int count = searchDAO.count(\n+                    Set.of(profile.getTask().getSourceRealm().getFullPath()),\n+                    cond,\n+                    provision.getAnyType().getKind());\n+            for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1 && !interrupt; page++) {\n+                List<? extends Any<?>> anys = searchDAO.search(\n                         Set.of(profile.getTask().getSourceRealm().getFullPath()),\n                         cond,\n+                        page,\n+                        AnyDAO.DEFAULT_PAGE_SIZE,\n+                        List.of(),\n                         provision.getAnyType().getKind());\n-                for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1 && !interrupt; page++) {\n-                    List<? extends Any<?>> anys = searchDAO.search(\n-                            Set.of(profile.getTask().getSourceRealm().getFullPath()),\n-                            cond,\n-                            page,\n-                            AnyDAO.DEFAULT_PAGE_SIZE,\n-                            List.of(),\n-                            provision.getAnyType().getKind());\n-                    doHandle(anys, handler, pushTask.getResource());\n-                }\n+                doHandle(anys, handler, pushTask.getResource());\n             }\n         }\n "}]}