{"sha":"c04c374b5b060c2b867467abe02ed874c63035c5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMwNGMzNzRiNWIwNjBjMmI4Njc0NjdhYmUwMmVkODc0YzYzMDM1YzU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-09T13:33:18Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-09T14:04:19Z"},"message":"[SYNCOPE-1395] persistence-jpa-pgjsonb module, passing all persistence-jpa's unit tests","tree":{"sha":"43b328b5ecaaf07655496e96959f2de2f16c5cec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/43b328b5ecaaf07655496e96959f2de2f16c5cec"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c04c374b5b060c2b867467abe02ed874c63035c5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c04c374b5b060c2b867467abe02ed874c63035c5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c04c374b5b060c2b867467abe02ed874c63035c5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c04c374b5b060c2b867467abe02ed874c63035c5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1f54d793fdec207774a53f2c8372de470defdad7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1f54d793fdec207774a53f2c8372de470defdad7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1f54d793fdec207774a53f2c8372de470defdad7"}],"stats":{"total":6126,"additions":6126,"deletions":0},"files":[{"sha":"de080840fde017ffec1288fc1d72c10ee28396af","filename":"core/persistence-jpa-pgjsonb/pom.xml","status":"added","additions":302,"deletions":0,"changes":302,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fpom.xml?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,302 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-core</artifactId>\n+    <version>2.1.3-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Core Persistence JPA PostgreSQL jsonb</name>\n+  <description>Apache Syncope Core Persistence JPA PostgreSQL jsonb</description>\n+  <groupId>org.apache.syncope.core</groupId>\n+  <artifactId>syncope-core-persistence-jpa-pgjsonb</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-persistence-jpa</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <!-- TEST -->\n+    <dependency> \n+      <groupId>javax.servlet</groupId> \n+      <artifactId>javax.servlet-api</artifactId> \n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-simple</artifactId>\n+      <version>${slf4j.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>jcl-over-slf4j</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>${h2.version}</version>\n+          </dependency>\n+        </dependencies>\n+        <configuration>\n+          <persistenceXmlFile>${project.basedir}/../persistence-jpa/src/main/resources/persistence-enhance.xml</persistenceXmlFile> \n+          <includes>org/apache/syncope/core/persistence/jpa/entity/**/*.class</includes>\n+          <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\n+          <connectionProperties>\n+            driverClassName=org.h2.Driver,\n+            url=jdbc:h2:mem:syncopedb\n+            username=sa,\n+            password=\n+          </connectionProperties>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>enhancer</id>\n+            <phase>process-classes</phase>\n+            <goals>\n+              <goal>enhance</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+  </build>\n+\n+  <profiles>\n+    <profile>\n+      <id>ut</id>\n+      \n+      <dependencies>\n+        <dependency>\n+          <groupId>org.postgresql</groupId>\n+          <artifactId>postgresql</artifactId>\n+          <version>${jdbc.postgresql.version}</version>\n+          <scope>test</scope>\n+        </dependency>\n+      </dependencies>\n+\n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>build-helper-maven-plugin</artifactId>\n+            <executions>\n+              <execution>\n+                <id>add-test-source</id>\n+                <phase>generate-test-sources</phase>\n+                <goals>\n+                  <goal>add-test-source</goal>\n+                </goals>\n+                <configuration>\n+                  <sources>\n+                    <source>${basedir}/../persistence-jpa/src/test/java</source>\n+                  </sources>\n+                </configuration>\n+              </execution>\n+            </executions>\n+          </plugin>\n+      \n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <configuration>\n+              <skip>true</skip>\n+            </configuration>\n+          </plugin>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <configuration>\n+              <includes>\n+                <include>**/*Test.java</include>\n+              </includes>\n+              <excludedGroups>multitenancy,plainAttrTable</excludedGroups>\n+            </configuration>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>io.fabric8</groupId>\n+            <artifactId>docker-maven-plugin</artifactId>\n+            <configuration>\n+              <images>\n+                <image>\n+                  <name>crunchydata/crunchy-postgres:centos7-10.5-2.1.0</name>\n+                  <run>\n+                    <env>\n+                      <PG_ROOT_PASSWORD>postgres</PG_ROOT_PASSWORD>\n+                      <PG_MODE>primary</PG_MODE>\n+                      <PG_PRIMARY_USER>postgres</PG_PRIMARY_USER>\n+                      <PG_PRIMARY_PASSWORD>postgres</PG_PRIMARY_PASSWORD>\n+                      <PG_PRIMARY_HOST>localhost</PG_PRIMARY_HOST>\n+                      <PG_PRIMARY_PORT>5432</PG_PRIMARY_PORT>\n+                      <PG_DATABASE>syncope</PG_DATABASE>\n+                      <PG_USER>syncope</PG_USER>\n+                      <PG_PASSWORD>syncope</PG_PASSWORD>\n+                    </env>\n+                    <ports>\n+                      <port>5432:5432</port>\n+                    </ports>\n+                  </run>\n+                </image>\n+              </images>\n+            </configuration>\n+            <executions>\n+              <execution>\n+                <id>start-postgres</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>stop-postgres</id>\n+                <phase>post-integration-test</phase>\n+                <goals>\n+                  <goal>stop</goal>\n+                  <goal>remove</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+        \n+        <testResources>\n+          <testResource>\n+            <directory>src/test/resources</directory>\n+            <filtering>true</filtering>\n+          </testResource>\n+          <testResource>\n+            <directory>src/main/resources</directory>\n+            <filtering>true</filtering>\n+          </testResource>\n+        </testResources>\n+      </build>\n+    </profile>\n+    \n+    <profile>\n+      <id>sqlgen</id>\n+      \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>sqlgen</id>\n+                <phase>process-classes</phase>\n+                <goals>\n+                  <goal>sql</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>          \n+        </plugins>\n+      </build>\n+    </profile>\n+    \n+    <profile>\n+      <id>schemagen</id>\n+      \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>schemagen</id>\n+                <phase>process-classes</phase>\n+                <goals>\n+                  <goal>schema</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>          \n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n+\n+</project>"},{"sha":"2fecad7d89c13ffee22fab37ee6de74046429b21","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/api/dao/PGAnyDAO.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPGAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPGAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPGAnyDAO.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+\n+public interface PGAnyDAO {\n+\n+    <A extends Any<?>> List<A> findByDerAttrValue(\n+            String table, AnyUtils anyUtils, String schemaKey, String value, boolean ignoreCaseMatch);\n+\n+    <A extends Any<?>> A findByPlainAttrUniqueValue(\n+            String table, AnyUtils anyUtils, String schemaKey, PlainAttrValue attrUniqueValue, boolean ignoreCaseMatch);\n+\n+    <A extends Any<?>> List<A> findByPlainAttrValue(\n+            String table, AnyUtils anyUtils, String schemaKey, PlainAttrValue attrValue, boolean ignoreCaseMatch);\n+\n+    <A extends Any<?>> void checkBeforeSave(String table, AnyUtils anyUtils, A any);\n+}"},{"sha":"030bba8c5f1040cd5f6471dea28b7a8f4c4b6acd","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyDAO.java","status":"added","additions":355,"deletions":0,"changes":355,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnyDAO.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,355 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.regex.Pattern;\n+import javax.persistence.Query;\n+import org.apache.commons.jexl3.parser.Parser;\n+import org.apache.commons.jexl3.parser.ParserConstants;\n+import org.apache.commons.jexl3.parser.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n+import org.apache.syncope.core.persistence.api.dao.PGAnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class PGJPAAnyDAO extends AbstractDAO<AbstractEntity> implements PGAnyDAO {\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    private String queryBegin(final String table) {\n+        return \"SELECT DISTINCT id FROM \" + table + \" u,\"\n+                + \"jsonb_array_elements(u.plainAttrs) attrs,\"\n+                + \"jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues \";\n+    }\n+\n+    private String attrValueMatch(\n+            final AnyUtils anyUtils,\n+            final PlainSchema schema,\n+            final PlainAttrValue attrValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        String key;\n+        boolean lower = false;\n+\n+        switch (schema.getType()) {\n+            case Boolean:\n+                key = \"booleanValue\";\n+                break;\n+\n+            case Date:\n+                key = \"dateValue\";\n+                break;\n+\n+            case Double:\n+                key = \"doubleValue\";\n+                break;\n+\n+            case Long:\n+                key = \"longValue\";\n+                break;\n+\n+            case Binary:\n+                key = \"binaryValue\";\n+                break;\n+\n+            default:\n+                lower = ignoreCaseMatch;\n+                key = \"stringValue\";\n+        }\n+\n+        if (lower) {\n+            return \"attrs ->> 'schema' = ? \"\n+                    + \"AND \"\n+                    + (lower ? \"LOWER(\" : \"\")\n+                    + (schema.isUniqueConstraint() ? \"attrs -> 'uniqueValue'\" : \"attrValues\") + \" ->> '\" + key\n+                    + \"'\" + (lower ? \")\" : \"\")\n+                    + \" = \"\n+                    + (lower ? \"LOWER(\" : \"\")\n+                    + \"?\"\n+                    + (lower ? \")\" : \"\");\n+        } else {\n+            PlainAttr<?> container = anyUtils.newPlainAttr();\n+            container.setSchema(schema);\n+            if (attrValue instanceof PlainAttrUniqueValue) {\n+                container.setUniqueValue((PlainAttrUniqueValue) attrValue);\n+            } else {\n+                ((PGPlainAttr) container).add(attrValue);\n+            }\n+            return \"plainAttrs @> '\" + POJOHelper.serialize(Arrays.asList(container)) + \"'::jsonb\";\n+        }\n+    }\n+\n+    private <A extends Any<?>> List<A> buildResult(final AnyUtils anyUtils, final List<Object> queryResult) {\n+        List<A> result = new ArrayList<>();\n+        queryResult.forEach(anyKey -> {\n+            A any = anyUtils.<A>dao().find(anyKey.toString());\n+            if (any == null) {\n+                LOG.error(\"Could not find any for key {}\", anyKey);\n+            } else {\n+                result.add(any);\n+            }\n+        });\n+        return result;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Transactional(readOnly = true)\n+    @Override\n+    public <A extends Any<?>> List<A> findByPlainAttrValue(\n+            final String table,\n+            final AnyUtils anyUtils,\n+            final String schemaKey,\n+            final PlainAttrValue attrValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        PlainSchema schema = plainSchemaDAO.find(schemaKey);\n+        if (schema == null) {\n+            LOG.error(\"Invalid schema '{}'\", schemaKey);\n+            return Collections.<A>emptyList();\n+        }\n+\n+        Query query = entityManager().createNativeQuery(\n+                queryBegin(table)\n+                + \"WHERE \" + attrValueMatch(anyUtils, schema, attrValue, ignoreCaseMatch));\n+        query.setParameter(1, schemaKey);\n+        query.setParameter(2, attrValue.getValue());\n+\n+        return buildResult(anyUtils, query.getResultList());\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public <A extends Any<?>> A findByPlainAttrUniqueValue(\n+            final String table,\n+            final AnyUtils anyUtils,\n+            final String schemaKey,\n+            final PlainAttrValue attrUniqueValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        PlainSchema schema = plainSchemaDAO.find(schemaKey);\n+        if (schema == null) {\n+            LOG.error(\"Invalid schema '{}'\", schemaKey);\n+            return null;\n+        }\n+        if (!schema.isUniqueConstraint()) {\n+            LOG.error(\"This schema has not unique constraint: '{}'\", schemaKey);\n+            return null;\n+        }\n+\n+        List<A> result = findByPlainAttrValue(table, anyUtils, schemaKey, attrUniqueValue, ignoreCaseMatch);\n+        return result.isEmpty()\n+                ? null\n+                : result.get(0);\n+    }\n+\n+    /**\n+     * Split an attribute value recurring on provided literals/tokens.\n+     *\n+     * @param attrValue value to be split\n+     * @param literals literals/tokens\n+     * @return split value\n+     */\n+    private List<String> split(final String attrValue, final List<String> literals) {\n+        final List<String> attrValues = new ArrayList<>();\n+\n+        if (literals.isEmpty()) {\n+            attrValues.add(attrValue);\n+        } else {\n+            for (String token : attrValue.split(Pattern.quote(literals.get(0)))) {\n+                if (!token.isEmpty()) {\n+                    attrValues.addAll(split(token, literals.subList(1, literals.size())));\n+                }\n+            }\n+        }\n+\n+        return attrValues;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Transactional(readOnly = true)\n+    @Override\n+    public <A extends Any<?>> List<A> findByDerAttrValue(\n+            final String table,\n+            final AnyUtils anyUtils,\n+            final String schemaKey,\n+            final String value,\n+            final boolean ignoreCaseMatch) {\n+\n+        DerSchema derSchema = derSchemaDAO.find(schemaKey);\n+        if (derSchema == null) {\n+            LOG.error(\"Invalid schema '{}'\", schemaKey);\n+            return Collections.<A>emptyList();\n+        }\n+\n+        Parser parser = new Parser(new StringReader(derSchema.getExpression()));\n+\n+        // Schema keys\n+        List<String> identifiers = new ArrayList<>();\n+\n+        // Literals\n+        List<String> literals = new ArrayList<>();\n+\n+        // Get schema keys and literals\n+        for (Token token = parser.getNextToken(); token != null && StringUtils.isNotBlank(token.toString());\n+                token = parser.getNextToken()) {\n+\n+            if (token.kind == ParserConstants.STRING_LITERAL) {\n+                literals.add(token.toString().substring(1, token.toString().length() - 1));\n+            }\n+\n+            if (token.kind == ParserConstants.IDENTIFIER) {\n+                identifiers.add(token.toString());\n+            }\n+        }\n+\n+        // Sort literals in order to process later literals included into others\n+        Collections.sort(literals, (l1, l2) -> {\n+            if (l1 == null && l2 == null) {\n+                return 0;\n+            } else if (l1 != null && l2 == null) {\n+                return -1;\n+            } else if (l1 == null && l2 != null) {\n+                return 1;\n+            } else if (l1.length() == l2.length()) {\n+                return 0;\n+            } else if (l1.length() > l2.length()) {\n+                return -1;\n+            } else {\n+                return 1;\n+            }\n+        });\n+\n+        // Split value on provided literals\n+        List<String> attrValues = split(value, literals);\n+\n+        if (attrValues.size() != identifiers.size()) {\n+            LOG.error(\"Ambiguous JEXL expression resolution: literals and values have different size\");\n+            return Collections.emptyList();\n+        }\n+\n+        StringJoiner clauses = new StringJoiner(\" AND id IN \");\n+\n+        // builder to build the clauses\n+        StringBuilder bld = new StringBuilder();\n+\n+        // Contains used identifiers in order to avoid replications\n+        Set<String> used = new HashSet<>();\n+\n+        List<Object> queryParams = new ArrayList<>();\n+\n+        // Create several clauses: one for eanch identifiers\n+        for (int i = 0; i < identifiers.size(); i++) {\n+            if (!used.contains(identifiers.get(i))) {\n+                // verify schema existence and get schema type\n+                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i));\n+                if (schema == null) {\n+                    LOG.error(\"Invalid schema '{}', ignoring\", identifiers.get(i));\n+                } else {\n+                    // clear builder\n+                    bld.delete(0, bld.length());\n+\n+                    PlainAttrValue attrValue;\n+                    if (schema.isUniqueConstraint()) {\n+                        attrValue = anyUtils.newPlainAttrUniqueValue();\n+                    } else {\n+                        attrValue = anyUtils.newPlainAttrValue();\n+                    }\n+                    attrValue.setStringValue(attrValues.get(i));\n+\n+                    bld.append('(').\n+                            append(queryBegin(table)).\n+                            append(\"WHERE \").\n+                            append(attrValueMatch(anyUtils, schema, attrValue, ignoreCaseMatch)).\n+                            append(')');\n+                    queryParams.add(schema.getKey());\n+                    queryParams.add(attrValues.get(i));\n+\n+                    used.add(identifiers.get(i));\n+\n+                    clauses.add(bld.toString());\n+                }\n+            }\n+        }\n+\n+        LOG.debug(\"Generated where clauses {}\", clauses);\n+\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT DISTINCT id FROM \" + table + \" u WHERE id IN \" + clauses.toString());\n+        for (int i = 0; i < queryParams.size(); i++) {\n+            query.setParameter(i + 1, queryParams.get(i));\n+        }\n+\n+        return buildResult(anyUtils, query.getResultList());\n+    }\n+\n+    @Transactional\n+    @Override\n+    public <A extends Any<?>> void checkBeforeSave(final String table, final AnyUtils anyUtils, final A any) {\n+        // check UNIQUE constraints\n+        any.getPlainAttrs().stream().\n+                filter(attr -> attr.getUniqueValue() != null).\n+                map(PGPlainAttr.class::cast).\n+                forEach(attr -> {\n+                    String schemaKey = attr.getSchemaKey();\n+                    List<A> others = findByPlainAttrValue(table, anyUtils, schemaKey, attr.getUniqueValue(), false);\n+                    if (others.isEmpty() || (others.size() == 1 && others.get(0).getKey().equals(any.getKey()))) {\n+                        LOG.debug(\"No duplicate value found for {}\", attr.getUniqueValue().getValueAsString());\n+                    } else {\n+                        throw new DuplicateException(\n+                                \"Value \" + attr.getUniqueValue().getValueAsString() + \" existing for \" + schemaKey);\n+                    }\n+                });\n+\n+        // update sysInfo - as org.apache.syncope.core.persistence.jpa.entity.PlainAttrListener is not invoked\n+        Date now = new Date();\n+        String username = AuthContextUtils.getUsername();\n+        LOG.debug(\"Set last change date '{}' and modifier '{}' for '{}'\", now, username, any);\n+        any.setLastModifier(username);\n+        any.setLastChangeDate(now);\n+    }\n+}"},{"sha":"4879f2662a08a6214c2182408a9488d458ff8746","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnyObjectDAO.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.dao.PGAnyDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class PGJPAAnyObjectDAO extends JPAAnyObjectDAO {\n+\n+    private PGAnyDAO anyDAO;\n+\n+    private PGAnyDAO anyDAO() {\n+        if (anyDAO == null) {\n+            anyDAO = ApplicationContextProvider.getApplicationContext().getBean(PGAnyDAO.class);\n+        }\n+        return anyDAO;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public AnyObject find(final String key) {\n+        return entityManager().find(PGJPAAnyObject.class, key);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<AnyObject> findByPlainAttrValue(\n+            final String schemaKey,\n+            final PlainAttrValue attrValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        return anyDAO().findByPlainAttrValue(PGJPAAnyObject.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);\n+    }\n+\n+    @Override\n+    public AnyObject findByPlainAttrUniqueValue(\n+            final String schemaKey,\n+            final PlainAttrValue attrUniqueValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        return anyDAO().findByPlainAttrUniqueValue(PGJPAAnyObject.TABLE, anyUtils(),\n+                schemaKey, attrUniqueValue, ignoreCaseMatch);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<AnyObject> findByDerAttrValue(\n+            final String schemaKey,\n+            final String value,\n+            final boolean ignoreCaseMatch) {\n+\n+        return anyDAO().findByDerAttrValue(PGJPAAnyObject.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);\n+    }\n+\n+    @Override\n+    public AnyObject save(final AnyObject anyObject) {\n+        anyDAO().checkBeforeSave(PGJPAAnyObject.TABLE, anyUtils(), anyObject);\n+        return super.save(anyObject);\n+    }\n+}"},{"sha":"0fa44f0ee332638cdd0ee025b7482a4bc111cde6","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnySearchDAO.java","status":"added","additions":231,"deletions":0,"changes":231,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnySearchDAO.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+public class PGJPAAnySearchDAO extends JPAAnySearchDAO {\n+\n+    @Override\n+    SearchSupport buildSearchSupport(final AnyTypeKind kind) {\n+        return new SearchSupport(kind);\n+    }\n+\n+    @Override\n+    protected void processOBS(final SearchSupport svs, final OrderBySupport obs, final StringBuilder where) {\n+        obs.views.forEach(searchView -> {\n+            where.append(',').\n+                    append(searchView.name).\n+                    append(' ').append(searchView.alias);\n+        });\n+    }\n+\n+    @Override\n+    protected void parseOrderByForPlainSchema(\n+            final SearchSupport svs,\n+            final OrderBySupport obs,\n+            final OrderBySupport.Item item,\n+            final OrderByClause clause,\n+            final PlainSchema schema,\n+            final String fieldName) {\n+\n+        // keep track of involvement of non-mandatory schemas in the order by clauses\n+        obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());\n+\n+        obs.views.add(svs.field());\n+\n+        item.select = svs.field().alias + \".attrValues ->> '\" + fieldName + \"' AS \" + fieldName;\n+        item.where = \"attrs ->> 'schema' = '\" + fieldName + \"'\";\n+        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n+    }\n+\n+    private void fillAttrQuery(\n+            final AnyUtils anyUtils,\n+            final StringBuilder query,\n+            final PlainAttrValue attrValue,\n+            final PlainSchema schema,\n+            final AttributeCond cond,\n+            final boolean not,\n+            final List<Object> parameters) {\n+\n+        String key;\n+        boolean lower = false;\n+        switch (schema.getType()) {\n+            case Boolean:\n+                key = \"booleanValue\";\n+                break;\n+\n+            case Date:\n+                key = \"dateValue\";\n+                break;\n+\n+            case Double:\n+                key = \"doubleValue\";\n+                break;\n+\n+            case Long:\n+                key = \"longValue\";\n+                break;\n+\n+            case Binary:\n+                key = \"binaryValue\";\n+                break;\n+\n+            default:\n+                lower = cond.getType() == AttributeCond.Type.IEQ || cond.getType() == AttributeCond.Type.ILIKE;\n+                key = \"stringValue\";\n+        }\n+\n+        if (!not && cond.getType() == AttributeCond.Type.EQ) {\n+            PlainAttr<?> container = anyUtils.newPlainAttr();\n+            container.setSchema(schema);\n+            if (attrValue instanceof PlainAttrUniqueValue) {\n+                container.setUniqueValue((PlainAttrUniqueValue) attrValue);\n+            } else {\n+                ((PGPlainAttr) container).add(attrValue);\n+            }\n+\n+            query.append(\"plainAttrs @> '\").\n+                    append(POJOHelper.serialize(Arrays.asList(container))).\n+                    append(\"'::jsonb\");\n+        } else {\n+            query.append(\"attrs ->> 'schema' = ?\").append(setParameter(parameters, cond.getSchema())).\n+                    append(\" AND \").\n+                    append(lower ? \"LOWER(\" : \"\").\n+                    append(schema.isUniqueConstraint()\n+                            ? \"attrs -> 'uniqueValue'\" : \"attrValues\").\n+                    append(\" ->> '\").append(key).append(\"'\").\n+                    append(lower ? \")\" : \"\");\n+\n+            switch (cond.getType()) {\n+                case LIKE:\n+                case ILIKE:\n+                    if (not) {\n+                        query.append(\"NOT \");\n+                    }\n+                    query.append(\" LIKE \");\n+                    break;\n+\n+                case GE:\n+                    if (not) {\n+                        query.append('<');\n+                    } else {\n+                        query.append(\">=\");\n+                    }\n+                    break;\n+\n+                case GT:\n+                    if (not) {\n+                        query.append(\"<=\");\n+                    } else {\n+                        query.append('>');\n+                    }\n+                    break;\n+\n+                case LE:\n+                    if (not) {\n+                        query.append('>');\n+                    } else {\n+                        query.append(\"<=\");\n+                    }\n+                    break;\n+\n+                case LT:\n+                    if (not) {\n+                        query.append(\">=\");\n+                    } else {\n+                        query.append('<');\n+                    }\n+                    break;\n+\n+                case EQ:\n+                case IEQ:\n+                default:\n+                    if (not) {\n+                        query.append('!');\n+                    }\n+                    query.append('=');\n+            }\n+\n+            query.append(lower ? \"LOWER(\" : \"\").\n+                    append(\"?\").append(setParameter(parameters, cond.getExpression())).\n+                    append(lower ? \")\" : \"\");\n+        }\n+    }\n+\n+    @Override\n+    protected String getQuery(\n+            final AttributeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        Pair<PlainSchema, PlainAttrValue> checked;\n+        try {\n+            checked = check(cond, svs.anyTypeKind);\n+        } catch (IllegalArgumentException e) {\n+            return EMPTY_QUERY;\n+        }\n+\n+        // normalize NULL / NOT NULL checks\n+        if (not) {\n+            if (cond.getType() == AttributeCond.Type.ISNULL) {\n+                cond.setType(AttributeCond.Type.ISNOTNULL);\n+            } else if (cond.getType() == AttributeCond.Type.ISNOTNULL) {\n+                cond.setType(AttributeCond.Type.ISNULL);\n+            }\n+        }\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.field().name).append(\" WHERE \");\n+        switch (cond.getType()) {\n+            case ISNOTNULL:\n+                query.append(\"plainAttrs @> '[{\\\"schema\\\":\\\"\").\n+                        append(checked.getLeft().getKey()).\n+                        append(\"\\\"}]'::jsonb\");\n+                break;\n+\n+            case ISNULL:\n+                query.append(\"any_id NOT IN (\").\n+                        append(\"SELECT any_id FROM \").append(svs.field().name).\n+                        append(\" WHERE plainAttrs @> '[{\\\"schema\\\":\\\"\").\n+                        append(checked.getLeft().getKey()).\n+                        append(\"\\\"}]'::jsonb)\");\n+                break;\n+\n+            default:\n+                fillAttrQuery(anyUtilsFactory.getInstance(svs.anyTypeKind),\n+                        query, checked.getRight(), checked.getLeft(), cond, not, parameters);\n+        }\n+\n+        return query.toString();\n+    }\n+}"},{"sha":"4c020c6417c987b82d70324556375fa98299a4d1","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAGroupDAO.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.dao.PGAnyDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class PGJPAGroupDAO extends JPAGroupDAO {\n+\n+    private PGAnyDAO anyDAO;\n+\n+    private PGAnyDAO anyDAO() {\n+        if (anyDAO == null) {\n+            anyDAO = ApplicationContextProvider.getApplicationContext().getBean(PGAnyDAO.class);\n+        }\n+        return anyDAO;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Group find(final String key) {\n+        return entityManager().find(PGJPAGroup.class, key);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<Group> findByPlainAttrValue(\n+            final String schemaKey,\n+            final PlainAttrValue attrValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        return anyDAO().findByPlainAttrValue(PGJPAGroup.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);\n+    }\n+\n+    @Override\n+    public Group findByPlainAttrUniqueValue(\n+            final String schemaKey,\n+            final PlainAttrValue attrUniqueValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        return anyDAO().findByPlainAttrUniqueValue(PGJPAGroup.TABLE, anyUtils(),\n+                schemaKey, attrUniqueValue, ignoreCaseMatch);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<Group> findByDerAttrValue(\n+            final String schemaKey,\n+            final String value,\n+            final boolean ignoreCaseMatch) {\n+\n+        return anyDAO().findByDerAttrValue(PGJPAGroup.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);\n+    }\n+\n+    @Override\n+    public Group save(final Group group) {\n+        anyDAO().checkBeforeSave(PGJPAGroup.TABLE, anyUtils(), group);\n+        return super.save(group);\n+    }\n+}"},{"sha":"5ede5a6ea962ef799f010b4a8dbcd6afff41d7e7","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrDAO.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainAttrDAO.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+\n+public class PGJPAPlainAttrDAO extends AbstractDAO<PlainAttr<?>> implements PlainAttrDAO {\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends PlainAttr<?>> void delete(final T plainAttr) {\n+        if (plainAttr.getOwner() != null) {\n+            ((Any<T>) plainAttr.getOwner()).remove(plainAttr);\n+        }\n+    }\n+}"},{"sha":"0b676128780a3925aad2db2a1165a510f5d0fe4d","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainAttrValueDAO.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import static org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO.getEntityReference;\n+\n+import java.util.stream.Collectors;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+\n+public class PGJPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue> implements PlainAttrValueDAO {\n+\n+    @Override\n+    public void deleteAll(final PlainAttr<?> attr, final AnyUtils anyUtils) {\n+        if (attr.getUniqueValue() == null) {\n+            attr.getValues().stream().map(Entity::getKey).collect(Collectors.toSet()).forEach(attrValueKey -> {\n+                PlainAttrValue attrValue = anyUtils.plainAttrValueClass().cast(\n+                        entityManager().find(getEntityReference(anyUtils.plainAttrValueClass()), attrValueKey));\n+                if (attrValue != null) {\n+                    attr.getValues().remove(attrValue);\n+                }\n+            });\n+        } else {\n+            attr.setUniqueValue(null);\n+        }\n+    }\n+}"},{"sha":"ba8b97ba15c4ecb0771f38fdbbafde55aa5a33e7","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainSchemaDAO.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainSchemaDAO.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+\n+public class PGJPAPlainSchemaDAO extends JPAPlainSchemaDAO {\n+\n+    @Override\n+    public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n+        // not possible\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    protected void deleteAttrs(final PlainSchema schema) {\n+        // nothing to do\n+    }\n+}"},{"sha":"340ba6e4e782f77827919d231fa25dad2c6d5b43","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAUserDAO.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.core.persistence.api.dao.PGAnyDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class PGJPAUserDAO extends JPAUserDAO {\n+\n+    private PGAnyDAO anyDAO;\n+\n+    private PGAnyDAO anyDAO() {\n+        if (anyDAO == null) {\n+            anyDAO = ApplicationContextProvider.getApplicationContext().getBean(PGAnyDAO.class);\n+        }\n+        return anyDAO;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public User find(final String key) {\n+        return entityManager().find(PGJPAUser.class, key);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<User> findByPlainAttrValue(\n+            final String schemaKey,\n+            final PlainAttrValue attrValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        return anyDAO().findByPlainAttrValue(PGJPAUser.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);\n+    }\n+\n+    @Override\n+    public User findByPlainAttrUniqueValue(\n+            final String schemaKey,\n+            final PlainAttrValue attrUniqueValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        return anyDAO().findByPlainAttrUniqueValue(PGJPAUser.TABLE, anyUtils(),\n+                schemaKey, attrUniqueValue, ignoreCaseMatch);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<User> findByDerAttrValue(\n+            final String schemaKey,\n+            final String value,\n+            final boolean ignoreCaseMatch) {\n+\n+        return anyDAO().findByDerAttrValue(PGJPAUser.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);\n+    }\n+\n+    @Override\n+    public User save(final User user) {\n+        anyDAO().checkBeforeSave(PGJPAUser.TABLE, anyUtils(), user);\n+        return super.save(user);\n+    }\n+\n+    @Override\n+    public Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(final User user) {\n+        anyDAO().checkBeforeSave(PGJPAUser.TABLE, anyUtils(), user);\n+        return super.saveAndGetDynGroupMembs(user);\n+    }\n+}"},{"sha":"005e616fd12307372f8cd0c22e840045549cc8d0","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAAny.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAAny.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+\n+public interface PGJPAAny<A extends Any<?>> {\n+\n+    String getPlainAttrsJSON();\n+\n+    void setPlainAttrsJSON(String plainAttrs);\n+\n+    boolean add(PGPlainAttr<A> attr);\n+\n+    List<? extends PGPlainAttr<A>> getPlainAttrList();\n+}"},{"sha":"0054d3f32840f36b36df04696f55785f02eacc8e","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityFactory.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAEntityFactory.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.dao.PGJPAAnySearchDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGAPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGAPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.conf.PGCPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.conf.PGCPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.conf.PGCPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.conf.PGJPAConf;\n+import org.apache.syncope.core.persistence.jpa.entity.group.PGGPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.group.PGGPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.group.PGGPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup;\n+import org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser;\n+import org.apache.syncope.core.persistence.jpa.entity.user.PGUPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.user.PGUPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.PGUPlainAttrValue;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+\n+public class PGJPAEntityFactory extends JPAEntityFactory {\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <E extends Entity> E newEntity(final Class<E> reference) {\n+        E result;\n+\n+        if (reference.equals(User.class)) {\n+            result = (E) new PGJPAUser();\n+            ((PGJPAUser) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        } else if (reference.equals(Group.class)) {\n+            result = (E) new PGJPAGroup();\n+            ((PGJPAGroup) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        } else if (reference.equals(AnyObject.class)) {\n+            result = (E) new PGJPAAnyObject();\n+            ((PGJPAAnyObject) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        } else if (reference.equals(Conf.class)) {\n+            result = (E) new PGJPAConf();\n+            ((PGJPAConf) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        } else if (reference.equals(APlainAttr.class)) {\n+            result = (E) new PGAPlainAttr();\n+        } else if (reference.equals(APlainAttrValue.class)) {\n+            result = (E) new PGAPlainAttrValue();\n+        } else if (reference.equals(APlainAttrUniqueValue.class)) {\n+            result = (E) new PGAPlainAttrUniqueValue();\n+        } else if (reference.equals(CPlainAttr.class)) {\n+            result = (E) new PGCPlainAttr();\n+        } else if (reference.equals(CPlainAttrValue.class)) {\n+            result = (E) new PGCPlainAttrValue();\n+        } else if (reference.equals(CPlainAttrUniqueValue.class)) {\n+            result = (E) new PGCPlainAttrUniqueValue();\n+        } else if (reference.equals(GPlainAttr.class)) {\n+            result = (E) new PGGPlainAttr();\n+        } else if (reference.equals(GPlainAttrValue.class)) {\n+            result = (E) new PGGPlainAttrValue();\n+        } else if (reference.equals(GPlainAttrUniqueValue.class)) {\n+            result = (E) new PGGPlainAttrUniqueValue();\n+        } else if (reference.equals(UPlainAttr.class)) {\n+            result = (E) new PGUPlainAttr();\n+        } else if (reference.equals(UPlainAttrValue.class)) {\n+            result = (E) new PGUPlainAttrValue();\n+        } else if (reference.equals(UPlainAttrUniqueValue.class)) {\n+            result = (E) new PGUPlainAttrUniqueValue();\n+        } else {\n+            result = super.newEntity(reference);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Class<? extends User> userClass() {\n+        return PGJPAUser.class;\n+    }\n+\n+    @Override\n+    public Class<? extends Group> groupClass() {\n+        return PGJPAGroup.class;\n+    }\n+\n+    @Override\n+    public Class<? extends AnyObject> anyObjectClass() {\n+        return PGJPAAnyObject.class;\n+    }\n+\n+    @Override\n+    public Class<? extends Conf> confClass() {\n+        return PGJPAConf.class;\n+    }\n+\n+    @Override\n+    public Class<? extends AnySearchDAO> anySearchDAOClass() {\n+        return PGJPAAnySearchDAO.class;\n+    }\n+}"},{"sha":"ddbb13e1608694d58410fbe83bab552d5d80a78b","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAEntityListener.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+public abstract class PGJPAEntityListener<A extends Any<?>> {\n+\n+    protected abstract List<? extends PGPlainAttr<A>> getValues(String plainAttrsJSON);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected void read(final PGJPAAny<A> entity) {\n+        if (entity.getPlainAttrsJSON() != null) {\n+            getValues(entity.getPlainAttrsJSON()).stream().filter(attr -> attr.getSchema() != null).\n+                    map(attr -> {\n+                        attr.setOwner((A) entity);\n+                        attr.getValues().forEach(value -> value.setAttr(attr));\n+                        if (attr.getUniqueValue() != null) {\n+                            attr.getUniqueValue().setAttr(attr);\n+                        }\n+                        return attr;\n+                    }).forEach(attr -> entity.add(attr));\n+        }\n+    }\n+\n+    protected void save(final PGJPAAny<A> entity) {\n+        entity.setPlainAttrsJSON(entity.getPlainAttrList().isEmpty()\n+                ? \"[{}]\"\n+                : POJOHelper.serialize(entity.getPlainAttrList()));\n+    }\n+}"},{"sha":"a802d3cf62dd56ecf1a424ce980880b81304fdf3","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGPlainAttr.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGPlainAttr.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+\n+public interface PGPlainAttr<A extends Any<?>> extends PlainAttr<A> {\n+\n+    String getSchemaKey();\n+\n+    boolean add(PlainAttrValue value);\n+}"},{"sha":"292107ed824cce10fb74d5574ba993f646a29507","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttr.java","status":"added","additions":196,"deletions":0,"changes":196,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGAPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGAPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGAPlainAttr.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonSetter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+\n+@JsonIgnoreProperties(\"valuesAsStrings\")\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class PGAPlainAttr extends AbstractPlainAttr<AnyObject> implements APlainAttr, PGPlainAttr<AnyObject> {\n+\n+    private static final long serialVersionUID = 806271775349587902L;\n+\n+    /**\n+     * The owner of this attribute.\n+     */\n+    @JsonIgnore\n+    private PGJPAAnyObject owner;\n+\n+    @JsonProperty\n+    private String schema;\n+\n+    /**\n+     * The membership of this attribute; might be {@code NULL} if this attribute is not related to a membership.\n+     */\n+    @JsonProperty\n+    private String membership;\n+\n+    /**\n+     * Values of this attribute (if schema is not UNIQUE).\n+     */\n+    private final List<PGAPlainAttrValue> values = new ArrayList<>();\n+\n+    /**\n+     * Value of this attribute (if schema is UNIQUE).\n+     */\n+    @JsonProperty\n+    private PGAPlainAttrUniqueValue uniqueValue;\n+\n+    @Override\n+    public AnyObject getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final AnyObject owner) {\n+        checkType(owner, PGJPAAnyObject.class);\n+        this.owner = (PGJPAAnyObject) owner;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public String getSchemaKey() {\n+        return schema;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public JPAPlainSchema getSchema() {\n+        return (JPAPlainSchema) ApplicationContextProvider.getBeanFactory().getBean(PlainSchemaDAO.class).find(schema);\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        if (schema != null) {\n+            this.schema = schema.getKey();\n+        }\n+    }\n+\n+    @JsonSetter(\"schema\")\n+    public void setSchema(final String schema) {\n+        this.schema = schema;\n+    }\n+\n+    @JsonIgnore\n+    public String getMembershipKey() {\n+        return membership;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public AMembership getMembership() {\n+        return ApplicationContextProvider.getBeanFactory().getBean(AnyObjectDAO.class).findMembership(membership);\n+    }\n+\n+    @Override\n+    public void setMembership(final AMembership membership) {\n+        if (membership != null) {\n+            this.membership = membership.getKey();\n+        }\n+    }\n+\n+    @JsonSetter(\"membership\")\n+    public void setMembership(final String membership) {\n+        this.membership = membership;\n+    }\n+\n+    @Override\n+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, PGAPlainAttrValue.class);\n+        return values.add((PGAPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public boolean add(final PlainAttrValue value) {\n+        return addForMultiValue(value);\n+    }\n+\n+    @Override\n+    public List<? extends APlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @JsonIgnore\n+    public List<PGAPlainAttrValue> getPGValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public PGAPlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(uniqueValue, PGAPlainAttrUniqueValue.class);\n+        this.uniqueValue = (PGAPlainAttrUniqueValue) uniqueValue;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(schema).\n+                append(membership).\n+                append(values).\n+                append(uniqueValue).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final PGAPlainAttr other = (PGAPlainAttr) obj;\n+        return new EqualsBuilder().\n+                append(schema, other.schema).\n+                append(membership, other.membership).\n+                append(values, other.values).\n+                append(uniqueValue, other.uniqueValue).\n+                build();\n+    }\n+}"},{"sha":"dd245993b80866d4a8f7d930475253a7226bda32","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttrUniqueValue.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGAPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGAPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGAPlainAttrUniqueValue.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class PGAPlainAttrUniqueValue extends AbstractPlainAttrValue implements APlainAttrUniqueValue {\n+\n+    private static final long serialVersionUID = -4053996864791245312L;\n+\n+    @JsonIgnore\n+    private PGAPlainAttr attr;\n+\n+    @Override\n+    public APlainAttr getAttr() {\n+        return attr;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, PGAPlainAttr.class);\n+        this.attr = (PGAPlainAttr) attr;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public PlainSchema getSchema() {\n+        return getAttr() == null ? null : getAttr().getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        // nothing to do\n+    }\n+}"},{"sha":"b3b76fd1d65389a948878b075e6eef6987af53ec","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttrValue.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGAPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGAPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGAPlainAttrValue.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class PGAPlainAttrValue extends AbstractPlainAttrValue implements APlainAttrValue {\n+\n+    private static final long serialVersionUID = 1832825176101443555L;\n+\n+    @JsonIgnore\n+    private PGAPlainAttr attr;\n+\n+    @Override\n+    public APlainAttr getAttr() {\n+        return attr;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, PGAPlainAttr.class);\n+        this.attr = (PGAPlainAttr) attr;\n+    }\n+}"},{"sha":"dad8536c6029f49866afef237df4d00f11e63d72","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObject.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityListeners;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.PGJPAAny;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.PGJPAAnyCheck;\n+\n+@Entity\n+@Table(name = JPAAnyObject.TABLE)\n+@EntityListeners({ PGJPAAnyObjectListener.class })\n+@PGJPAAnyCheck\n+public class PGJPAAnyObject extends JPAAnyObject implements PGJPAAny<AnyObject>, AnyObject {\n+\n+    private static final long serialVersionUID = -8543654943709531885L;\n+\n+    @Lob\n+    @Column(columnDefinition = \"jsonb\")\n+    private String plainAttrs;\n+\n+    @Transient\n+    private final List<PGAPlainAttr> plainAttrList = new ArrayList<>();\n+\n+    @Override\n+    public String getPlainAttrsJSON() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public void setPlainAttrsJSON(final String plainAttrs) {\n+        this.plainAttrs = plainAttrs;\n+    }\n+\n+    @Override\n+    public List<PGAPlainAttr> getPlainAttrList() {\n+        return plainAttrList;\n+    }\n+\n+    @Override\n+    public boolean add(final PGPlainAttr<AnyObject> attr) {\n+        return add((APlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean add(final APlainAttr attr) {\n+        checkType(attr, PGAPlainAttr.class);\n+        return plainAttrList.add((PGAPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean remove(final APlainAttr attr) {\n+        return plainAttrList.removeIf(pgattr\n+                -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())\n+                && attr.getOwner().getKey().equals(getKey())\n+                && attr.getMembership() == null\n+                ? true\n+                : pgattr.getMembership() != null && pgattr.getMembershipKey().equals(attr.getMembership().getKey()));\n+    }\n+\n+    @Override\n+    protected List<? extends APlainAttr> internalGetPlainAttrs() {\n+        return plainAttrList;\n+    }\n+\n+    @Override\n+    public boolean remove(final AMembership membership) {\n+        plainAttrList.removeIf(attr -> attr.getMembership().getKey().equals(membership.getKey()));\n+        return super.remove(membership);\n+    }\n+}"},{"sha":"61b201f346684e9fba72da62b7c3ee5a592559cf","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObjectListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObjectListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObjectListener.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.List;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityListener;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+public class PGJPAAnyObjectListener extends PGJPAEntityListener<AnyObject> {\n+\n+    @Override\n+    protected List<? extends PGPlainAttr<AnyObject>> getValues(final String plainAttrsJSON) {\n+        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<PGAPlainAttr>>() {\n+        });\n+    }\n+\n+    @PostLoad\n+    public void read(final PGJPAAnyObject anyObject) {\n+        super.read(anyObject);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void save(final PGJPAAnyObject anyObject) {\n+        super.save(anyObject);\n+    }\n+}"},{"sha":"a45d7d51a66f6e842e543cb917e92d113db0ca05","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttr.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGCPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGCPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGCPlainAttr.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.conf;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonSetter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+\n+@JsonIgnoreProperties(\"valuesAsStrings\")\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class PGCPlainAttr extends AbstractPlainAttr<Conf> implements CPlainAttr, PGPlainAttr<Conf> {\n+\n+    private static final long serialVersionUID = 806271775349587902L;\n+\n+    /**\n+     * The owner of this attribute.\n+     */\n+    @JsonIgnore\n+    private PGJPAConf owner;\n+\n+    @JsonProperty\n+    private String schema;\n+\n+    /**\n+     * Values of this attribute (if schema is not UNIQUE).\n+     */\n+    private final List<PGCPlainAttrValue> values = new ArrayList<>();\n+\n+    /**\n+     * Value of this attribute (if schema is UNIQUE).\n+     */\n+    @JsonProperty\n+    private PGCPlainAttrUniqueValue uniqueValue;\n+\n+    @Override\n+    public Conf getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Conf owner) {\n+        checkType(owner, PGJPAConf.class);\n+        this.owner = (PGJPAConf) owner;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public String getSchemaKey() {\n+        return schema;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public JPAPlainSchema getSchema() {\n+        return (JPAPlainSchema) ApplicationContextProvider.getBeanFactory().getBean(PlainSchemaDAO.class).find(schema);\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        if (schema != null) {\n+            this.schema = schema.getKey();\n+        }\n+    }\n+\n+    @JsonSetter(\"schema\")\n+    public void setSchema(final String schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, PGCPlainAttrValue.class);\n+        return values.add((PGCPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public boolean add(final PlainAttrValue value) {\n+        return addForMultiValue(value);\n+    }\n+\n+    @Override\n+    public List<? extends CPlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @JsonIgnore\n+    public List<PGCPlainAttrValue> getPGValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public PGCPlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(uniqueValue, PGCPlainAttrUniqueValue.class);\n+        this.uniqueValue = (PGCPlainAttrUniqueValue) uniqueValue;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(schema).\n+                append(values).\n+                append(uniqueValue).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final PGCPlainAttr other = (PGCPlainAttr) obj;\n+        return new EqualsBuilder().\n+                append(schema, other.schema).\n+                append(values, other.values).\n+                append(uniqueValue, other.uniqueValue).\n+                build();\n+    }\n+}"},{"sha":"5877f1c1b95cd3f7080fecf8997d1d88862b053a","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttrUniqueValue.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGCPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGCPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGCPlainAttrUniqueValue.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.conf;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class PGCPlainAttrUniqueValue extends AbstractPlainAttrValue implements CPlainAttrUniqueValue {\n+\n+    private static final long serialVersionUID = -4326417972859745823L;\n+\n+    @JsonIgnore\n+    private PGCPlainAttr attr;\n+\n+    @Override\n+    public CPlainAttr getAttr() {\n+        return attr;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, PGCPlainAttr.class);\n+        this.attr = (PGCPlainAttr) attr;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public PlainSchema getSchema() {\n+        return getAttr() == null ? null : getAttr().getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        // nothing to do\n+    }\n+}"},{"sha":"a537f0fd837adab77e7d1dc1bbe86cd342b0cabb","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttrValue.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGCPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGCPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGCPlainAttrValue.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.conf;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class PGCPlainAttrValue extends AbstractPlainAttrValue implements CPlainAttrValue {\n+\n+    private static final long serialVersionUID = 1832825176101443555L;\n+\n+    @JsonIgnore\n+    private PGCPlainAttr attr;\n+\n+    @Override\n+    public CPlainAttr getAttr() {\n+        return attr;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, PGCPlainAttr.class);\n+        this.attr = (PGCPlainAttr) attr;\n+    }\n+}"},{"sha":"a297d18e722fd4088a8fbb455c8dbfd34cd0d7f3","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConf.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGJPAConf.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.conf;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityListeners;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.PGJPAAny;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.PGJPAAnyCheck;\n+\n+@Entity\n+@Table(name = JPAConf.TABLE)\n+@EntityListeners({ PGJPAConfListener.class })\n+@PGJPAAnyCheck\n+public class PGJPAConf extends JPAConf implements PGJPAAny<Conf>, Conf {\n+\n+    private static final long serialVersionUID = -8543654943709531885L;\n+\n+    @Lob\n+    @Column(columnDefinition = \"jsonb\")\n+    private String plainAttrs;\n+\n+    @Transient\n+    private final List<PGCPlainAttr> plainAttrList = new ArrayList<>();\n+\n+    @Override\n+    public String getPlainAttrsJSON() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public void setPlainAttrsJSON(final String plainAttrs) {\n+        this.plainAttrs = plainAttrs;\n+    }\n+\n+    @Override\n+    public List<PGCPlainAttr> getPlainAttrList() {\n+        return plainAttrList;\n+    }\n+\n+    @Override\n+    public boolean add(final PGPlainAttr<Conf> attr) {\n+        return add((CPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean add(final CPlainAttr attr) {\n+        checkType(attr, PGCPlainAttr.class);\n+        return plainAttrList.add((PGCPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean remove(final CPlainAttr attr) {\n+        return plainAttrList.removeIf(pgattr -> pgattr.getSchemaKey().equals(attr.getSchema().getKey()));\n+    }\n+\n+    @Override\n+    public List<? extends CPlainAttr> getPlainAttrs() {\n+        return plainAttrList;\n+    }\n+}"},{"sha":"f1a71985df949d1a78ce318db5b0d999ca88064c","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGJPAConfListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGJPAConfListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGJPAConfListener.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.conf;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.List;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityListener;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+public class PGJPAConfListener extends PGJPAEntityListener<Conf> {\n+\n+    @Override\n+    protected List<? extends PGPlainAttr<Conf>> getValues(final String plainAttrsJSON) {\n+        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<PGCPlainAttr>>() {\n+        });\n+    }\n+\n+    @PostLoad\n+    public void read(final PGJPAConf conf) {\n+        super.read(conf);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void save(final PGJPAConf conf) {\n+        super.save(conf);\n+    }\n+}"},{"sha":"9e785355cae06f016689b719a9620b4335f330e4","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttr.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGGPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGGPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGGPlainAttr.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.group;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonSetter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+\n+@JsonIgnoreProperties(\"valuesAsStrings\")\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class PGGPlainAttr extends AbstractPlainAttr<Group> implements GPlainAttr, PGPlainAttr<Group> {\n+\n+    private static final long serialVersionUID = 806271775349587902L;\n+\n+    /**\n+     * The owner of this attribute.\n+     */\n+    @JsonIgnore\n+    private PGJPAGroup owner;\n+\n+    @JsonProperty\n+    private String schema;\n+\n+    /**\n+     * Values of this attribute (if schema is not UNIQUE).\n+     */\n+    private final List<PGGPlainAttrValue> values = new ArrayList<>();\n+\n+    /**\n+     * Value of this attribute (if schema is UNIQUE).\n+     */\n+    @JsonProperty\n+    private PGGPlainAttrUniqueValue uniqueValue;\n+\n+    @Override\n+    public Group getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Group owner) {\n+        checkType(owner, PGJPAGroup.class);\n+        this.owner = (PGJPAGroup) owner;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public String getSchemaKey() {\n+        return schema;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public JPAPlainSchema getSchema() {\n+        return (JPAPlainSchema) ApplicationContextProvider.getBeanFactory().getBean(PlainSchemaDAO.class).find(schema);\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        if (schema != null) {\n+            this.schema = schema.getKey();\n+        }\n+    }\n+\n+    @JsonSetter(\"schema\")\n+    public void setSchema(final String schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, PGGPlainAttrValue.class);\n+        return values.add((PGGPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public boolean add(final PlainAttrValue value) {\n+        return addForMultiValue(value);\n+    }\n+\n+    @Override\n+    public List<? extends GPlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @JsonIgnore\n+    public List<PGGPlainAttrValue> getPGValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public PGGPlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(uniqueValue, PGGPlainAttrUniqueValue.class);\n+        this.uniqueValue = (PGGPlainAttrUniqueValue) uniqueValue;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(schema).\n+                append(values).\n+                append(uniqueValue).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final PGGPlainAttr other = (PGGPlainAttr) obj;\n+        return new EqualsBuilder().\n+                append(schema, other.schema).\n+                append(values, other.values).\n+                append(uniqueValue, other.uniqueValue).\n+                build();\n+    }\n+}"},{"sha":"c6219a027968dfbb48a0302b1817a92d8fc75a55","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttrUniqueValue.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGGPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGGPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGGPlainAttrUniqueValue.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.group;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class PGGPlainAttrUniqueValue extends AbstractPlainAttrValue implements GPlainAttrUniqueValue {\n+\n+    private static final long serialVersionUID = -4326417972859745823L;\n+\n+    @JsonIgnore\n+    private PGGPlainAttr attr;\n+\n+    @Override\n+    public GPlainAttr getAttr() {\n+        return attr;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, PGGPlainAttr.class);\n+        this.attr = (PGGPlainAttr) attr;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public PlainSchema getSchema() {\n+        return getAttr() == null ? null : getAttr().getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        // nothing to do\n+    }\n+}"},{"sha":"398e5b03b846384b07b7ae2fb73fb9b66c810326","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttrValue.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGGPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGGPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGGPlainAttrValue.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.group;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class PGGPlainAttrValue extends AbstractPlainAttrValue implements GPlainAttrValue {\n+\n+    private static final long serialVersionUID = 1832825176101443555L;\n+\n+    @JsonIgnore\n+    private PGGPlainAttr attr;\n+\n+    @Override\n+    public GPlainAttr getAttr() {\n+        return attr;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, PGGPlainAttr.class);\n+        this.attr = (PGGPlainAttr) attr;\n+    }\n+}"},{"sha":"6207dfce9985dc67e089b820e9b5638fd4f16270","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroup.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.group;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityListeners;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.PGJPAAny;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.PGJPAAnyCheck;\n+\n+@Entity\n+@Table(name = JPAGroup.TABLE)\n+@EntityListeners({ PGJPAGroupListener.class })\n+@PGJPAAnyCheck\n+public class PGJPAGroup extends JPAGroup implements PGJPAAny<Group>, Group {\n+\n+    private static final long serialVersionUID = -8543654943709531885L;\n+\n+    @Lob\n+    @Column(columnDefinition = \"jsonb\")\n+    private String plainAttrs;\n+\n+    @Transient\n+    private final List<PGGPlainAttr> plainAttrList = new ArrayList<>();\n+\n+    @Override\n+    public String getPlainAttrsJSON() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public void setPlainAttrsJSON(final String plainAttrs) {\n+        this.plainAttrs = plainAttrs;\n+    }\n+\n+    @Override\n+    public List<PGGPlainAttr> getPlainAttrList() {\n+        return plainAttrList;\n+    }\n+\n+    @Override\n+    public boolean add(final PGPlainAttr<Group> attr) {\n+        return add((GPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean add(final GPlainAttr attr) {\n+        checkType(attr, PGGPlainAttr.class);\n+        return plainAttrList.add((PGGPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean remove(final GPlainAttr attr) {\n+        return plainAttrList.removeIf(pgattr\n+                -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())\n+                && attr.getOwner().getKey().equals(getKey()));\n+    }\n+\n+    @Override\n+    public List<? extends GPlainAttr> getPlainAttrs() {\n+        return plainAttrList;\n+    }\n+}"},{"sha":"b32f4712c2d0b8decfbc7da9a1c17adbc3b513f2","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroupListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroupListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroupListener.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.group;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.List;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityListener;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+public class PGJPAGroupListener extends PGJPAEntityListener<Group> {\n+\n+    @Override\n+    protected List<? extends PGPlainAttr<Group>> getValues(final String plainAttrsJSON) {\n+        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<PGGPlainAttr>>() {\n+        });\n+    }\n+\n+    @PostLoad\n+    public void read(final PGJPAGroup group) {\n+        super.read(group);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void save(final PGJPAGroup group) {\n+        super.save(group);\n+    }\n+}"},{"sha":"486ba1c2c9aab9e93585cad4d5b177b0d2499eb0","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUser.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityListeners;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.PGJPAAny;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.PGJPAAnyCheck;\n+\n+@Entity\n+@Table(name = JPAUser.TABLE)\n+@EntityListeners({ PGJPAUserListener.class })\n+@PGJPAAnyCheck\n+public class PGJPAUser extends JPAUser implements PGJPAAny<User>, User {\n+\n+    private static final long serialVersionUID = -8543654943709531885L;\n+\n+    @Lob\n+    @Column(columnDefinition = \"jsonb\")\n+    private String plainAttrs;\n+\n+    @Transient\n+    private final List<PGUPlainAttr> plainAttrList = new ArrayList<>();\n+\n+    @Override\n+    public String getPlainAttrsJSON() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public void setPlainAttrsJSON(final String plainAttrs) {\n+        this.plainAttrs = plainAttrs;\n+    }\n+\n+    @Override\n+    public List<PGUPlainAttr> getPlainAttrList() {\n+        return plainAttrList;\n+    }\n+\n+    @Override\n+    public boolean add(final PGPlainAttr<User> attr) {\n+        return add((UPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean add(final UPlainAttr attr) {\n+        checkType(attr, PGUPlainAttr.class);\n+        return plainAttrList.add((PGUPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean remove(final UPlainAttr attr) {\n+        return plainAttrList.removeIf(pgattr\n+                -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())\n+                && attr.getOwner().getKey().equals(getKey())\n+                && attr.getMembership() == null\n+                ? true\n+                : pgattr.getMembership() != null && pgattr.getMembershipKey().equals(attr.getMembership().getKey()));\n+    }\n+\n+    @Override\n+    protected List<? extends UPlainAttr> internalGetPlainAttrs() {\n+        return plainAttrList;\n+    }\n+}"},{"sha":"5baf4fcf2c2062f4fcc9b7efafe7090730b08031","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUserListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUserListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUserListener.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.List;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityListener;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+public class PGJPAUserListener extends PGJPAEntityListener<User> {\n+\n+    @Override\n+    protected List<? extends PGPlainAttr<User>> getValues(final String plainAttrsJSON) {\n+        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<PGUPlainAttr>>() {\n+        });\n+    }\n+\n+    @PostLoad\n+    public void read(final PGJPAUser user) {\n+        super.read(user);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void save(final PGJPAUser user) {\n+        super.save(user);\n+    }\n+}"},{"sha":"09abb2679e2e57d7a7d2e73df073a50045f9e1cf","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttr.java","status":"added","additions":196,"deletions":0,"changes":196,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGUPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGUPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGUPlainAttr.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonSetter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+\n+@JsonIgnoreProperties(\"valuesAsStrings\")\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class PGUPlainAttr extends AbstractPlainAttr<User> implements UPlainAttr, PGPlainAttr<User> {\n+\n+    private static final long serialVersionUID = 806271775349587902L;\n+\n+    /**\n+     * The owner of this attribute.\n+     */\n+    @JsonIgnore\n+    private PGJPAUser owner;\n+\n+    @JsonProperty\n+    private String schema;\n+\n+    /**\n+     * The membership of this attribute; might be {@code NULL} if this attribute is not related to a membership.\n+     */\n+    @JsonProperty\n+    private String membership;\n+\n+    /**\n+     * Values of this attribute (if schema is not UNIQUE).\n+     */\n+    private final List<PGUPlainAttrValue> values = new ArrayList<>();\n+\n+    /**\n+     * Value of this attribute (if schema is UNIQUE).\n+     */\n+    @JsonProperty\n+    private PGUPlainAttrUniqueValue uniqueValue;\n+\n+    @Override\n+    public User getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final User owner) {\n+        checkType(owner, PGJPAUser.class);\n+        this.owner = (PGJPAUser) owner;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public String getSchemaKey() {\n+        return schema;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public JPAPlainSchema getSchema() {\n+        return (JPAPlainSchema) ApplicationContextProvider.getBeanFactory().getBean(PlainSchemaDAO.class).find(schema);\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        if (schema != null) {\n+            this.schema = schema.getKey();\n+        }\n+    }\n+\n+    @JsonSetter(\"schema\")\n+    public void setSchema(final String schema) {\n+        this.schema = schema;\n+    }\n+\n+    @JsonIgnore\n+    public String getMembershipKey() {\n+        return membership;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public UMembership getMembership() {\n+        return ApplicationContextProvider.getBeanFactory().getBean(UserDAO.class).findMembership(membership);\n+    }\n+\n+    @Override\n+    public void setMembership(final UMembership membership) {\n+        if (membership != null) {\n+            this.membership = membership.getKey();\n+        }\n+    }\n+\n+    @JsonSetter(\"membership\")\n+    public void setMembership(final String membership) {\n+        this.membership = membership;\n+    }\n+\n+    @Override\n+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, PGUPlainAttrValue.class);\n+        return values.add((PGUPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public boolean add(final PlainAttrValue value) {\n+        return addForMultiValue(value);\n+    }\n+\n+    @Override\n+    public List<? extends UPlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @JsonIgnore\n+    public List<PGUPlainAttrValue> getPGValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public PGUPlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(uniqueValue, PGUPlainAttrUniqueValue.class);\n+        this.uniqueValue = (PGUPlainAttrUniqueValue) uniqueValue;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(schema).\n+                append(membership).\n+                append(values).\n+                append(uniqueValue).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final PGUPlainAttr other = (PGUPlainAttr) obj;\n+        return new EqualsBuilder().\n+                append(schema, other.schema).\n+                append(membership, other.membership).\n+                append(values, other.values).\n+                append(uniqueValue, other.uniqueValue).\n+                build();\n+    }\n+}"},{"sha":"9b6cd3e381f6e3dba7ec2d6693ad731bff7d68b1","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttrUniqueValue.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGUPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGUPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGUPlainAttrUniqueValue.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class PGUPlainAttrUniqueValue extends AbstractPlainAttrValue implements UPlainAttrUniqueValue {\n+\n+    private static final long serialVersionUID = -4053996864791245312L;\n+\n+    @JsonIgnore\n+    private PGUPlainAttr attr;\n+\n+    @Override\n+    public UPlainAttr getAttr() {\n+        return attr;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, PGUPlainAttr.class);\n+        this.attr = (PGUPlainAttr) attr;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public PlainSchema getSchema() {\n+        return getAttr() == null ? null : getAttr().getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        // nothing to do\n+    }\n+}"},{"sha":"6ba15d59a9a721691ef2d3410b14ff718a529a49","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttrValue.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGUPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGUPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGUPlainAttrValue.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class PGUPlainAttrValue extends AbstractPlainAttrValue implements UPlainAttrValue {\n+\n+    private static final long serialVersionUID = 1832825176101443555L;\n+\n+    @JsonIgnore\n+    private PGUPlainAttr attr;\n+\n+    @Override\n+    public UPlainAttr getAttr() {\n+        return attr;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, PGUPlainAttr.class);\n+        this.attr = (PGUPlainAttr) attr;\n+    }\n+}"},{"sha":"ef6f87d70d4f642f5f49fcd8a83e2cec286fcfe2","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PGJPAAnyCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPGJPAAnyCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPGJPAAnyCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPGJPAAnyCheck.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = PGJPAAnyValidator.class)\n+@Documented\n+public @interface PGJPAAnyCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.any}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"089808c754f49efa1f9d01d60a14c730ab76e391","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PGJPAAnyValidator.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPGJPAAnyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPGJPAAnyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPGJPAAnyValidator.java?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.PGJPAAny;\n+\n+public class PGJPAAnyValidator extends AbstractValidator<PGJPAAnyCheck, PGJPAAny<?>> {\n+\n+    @Override\n+    public boolean isValid(final PGJPAAny<?> entity, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        PlainAttrValidator attrValidator = new PlainAttrValidator();\n+        PlainAttrValueValidator attrValueValidator = new PlainAttrValueValidator();\n+\n+        AtomicReference<Boolean> isValid = new AtomicReference<>(Boolean.TRUE);\n+        entity.getPlainAttrList().forEach(attr -> {\n+            PlainAttr<?> plainAttr = (PlainAttr<?>) attr;\n+            isValid.getAndSet(isValid.get() && attrValidator.isValid(plainAttr, context));\n+            plainAttr.getValues().forEach(value\n+                    -> isValid.getAndSet(isValid.get() && attrValueValidator.isValid(value, context)));\n+        });\n+\n+        return isValid.get();\n+    }\n+}"},{"sha":"3e5b1030ba8d0ebba3e845f0fc40a91df34ee02b","filename":"core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-pgjsonb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-pgjsonb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-pgjsonb.xml?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+                 xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm \n+                                     http://java.sun.com/xml/ns/persistence/orm_2_0.xsd\"\n+                 version=\"2.0\">\n+  \n+  <persistence-unit-metadata>\n+    <persistence-unit-defaults>\n+      <entity-listeners>\n+        <entity-listener class=\"org.apache.syncope.core.persistence.jpa.validation.entity.EntityValidationListener\">\n+          <pre-persist method-name=\"validate\"/>\n+          <pre-update method-name=\"validate\"/>\n+        </entity-listener>\n+      </entity-listeners>\n+    </persistence-unit-defaults>\n+  </persistence-unit-metadata>\n+  \n+</entity-mappings>"},{"sha":"d9a648fb99030c7cab7bbaa2ef29d62bfa9e659b","filename":"core/persistence-jpa-pgjsonb/src/main/resources/domains/Master.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMaster.properties?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Master.driverClassName=org.postgresql.Driver\n+Master.url=jdbc:postgresql://localhost:5432/syncope?stringtype=unspecified\n+Master.schema=\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary\n+Master.orm=META-INF/spring-orm-pgjsonb.xml\n+\n+Master.pool.maxActive=10\n+Master.pool.minIdle=2\n+\n+Master.audit.sql=audit.sql"},{"sha":"3e5b92b8320deda3bb5884cbc32d161aafc39678","filename":"core/persistence-jpa-pgjsonb/src/main/resources/indexes.xml","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+  <comment>Additional indexes (in respect to JPA's)</comment>\n+\n+  <entry key=\"SyncopeUser_plainAttrs_idx\">CREATE INDEX SyncopeUser_plainAttrs_idx ON SyncopeUser USING gin ((plainAttrs) jsonb_path_ops)</entry>\n+  <entry key=\"SyncopeGroup_plainAttrs_idx\">CREATE INDEX SyncopeGroup_plainAttrs_idx ON SyncopeGroup USING gin ((plainAttrs) jsonb_path_ops)</entry>\n+  <entry key=\"AnyObject_plainAttrs_idx\">CREATE INDEX AnyObject_plainAttrs_idx ON AnyObject USING gin ((plainAttrs) jsonb_path_ops)</entry>\n+  <entry key=\"SyncopeConf_plainAttrs_idx\">CREATE INDEX SyncopeConf_plainAttrs_idx ON SyncopeConf USING gin ((plainAttrs) jsonb_path_ops)</entry>\n+\n+  <entry key=\"UDynGroupMembers_any_id\">CREATE INDEX UDynGroupMembers_any_id ON UDynGroupMembers(any_id)</entry>\n+  <entry key=\"UDynGroupMembers_group_id\">CREATE INDEX UDynGroupMembers_group_id ON UDynGroupMembers(group_id)</entry>\n+  <entry key=\"ADynGroupMembers_any_id\">CREATE INDEX ADynGroupMembers_any_id ON ADynGroupMembers(any_id)</entry>\n+  <entry key=\"ADynGroupMembers_group_id\">CREATE INDEX ADynGroupMembers_group_id ON ADynGroupMembers(group_id)</entry>\n+\n+  <entry key=\"DynRoleMembers_any_id\">CREATE INDEX DynRoleMembers_any_id ON DynRoleMembers(any_id)</entry>\n+  <entry key=\"DynRoleMembers_role_id\">CREATE INDEX DynRoleMembers_role_id ON DynRoleMembers(role_id)</entry>\n+\n+  <entry key=\"DynRealmMembers_any_id\">CREATE INDEX DynRealmMembers_any_id ON DynRealmMembers(any_id)</entry>\n+  <entry key=\"DynRealmMembers_realm_id\">CREATE INDEX DynRealmMembers_dynRealm_id ON DynRealmMembers(dynRealm_id)</entry>\n+\n+  <entry key=\"CPlainAttrValue_stringvalueIndex\">CREATE INDEX CAttrValue_stringvalueIndex ON CPlainAttrValue(stringvalue)</entry>\n+  <entry key=\"CPlainAttrValue_datevalueIndex\">CREATE INDEX CAttrValue_datevalueIndex ON CPlainAttrValue(datevalue)</entry>\n+  <entry key=\"CPlainAttrValue_longvalueIndex\">CREATE INDEX CAttrValue_longvalueIndex ON CPlainAttrValue(longvalue)</entry>\n+  <entry key=\"CPlainAttrValue_doublevalueIndex\">CREATE INDEX CAttrValue_doublevalueIndex ON CPlainAttrValue(doublevalue)</entry>\n+  <entry key=\"CPlainAttrValue_booleanvalueIndex\">CREATE INDEX CAttrValue_booleanvalueIndex ON CPlainAttrValue(booleanvalue)</entry>\n+\n+  <entry key=\"UMembership_GroupIndex\">CREATE INDEX UMembership_GroupIndex ON UMembership(group_id)</entry>\n+  <entry key=\"UMembership_UserIndex\">CREATE INDEX UMembership_UserIndex ON UMembership(user_id)</entry>\n+  <entry key=\"AMembership_GroupIndex\">CREATE INDEX AMembership_GroupIndex ON AMembership(group_id)</entry>\n+  <entry key=\"AMembership_AnyObjectIndex\">CREATE INDEX AMembership_AnyObjectIndex ON AMembership(anyObject_id)</entry>\n+\n+  <entry key=\"URelationship_RightIndex\">CREATE INDEX URelationship_RightIndex ON URelationship(anyObject_id)</entry>\n+  <entry key=\"URelationship_LeftIndex\">CREATE INDEX URelationship_LeftIndex ON URelationship(user_id)</entry>\n+  <entry key=\"ARelationship_RightIndex\">CREATE INDEX ARelationship_RightIndex ON ARelationship(right_anyObject_id)</entry>\n+  <entry key=\"ARelationship_AnyObjectIndex\">CREATE INDEX ARelationship_AnyObjectIndex ON ARelationship(left_anyObject_id)</entry>\n+\n+  <entry key=\"CPlainAttrValue_attrIndex\">CREATE INDEX CPlainAttrValue_attrIndex on CPlainAttrValue(attribute_id)</entry>\n+  <entry key=\"CPAttrUniqueValue_attrIndex\">CREATE INDEX CPAttrUniqueValue_attrIndex on CPlainAttrUniqueValue(attribute_id)</entry>\n+\n+  <entry key=\"CPlainAttr_owner_Index\">CREATE INDEX CPlainAttr_owner_Index on CPlainAttr(owner_id)</entry>\n+  <entry key=\"CPlainAttr_schema_Index\">CREATE INDEX CPlainAttr_schema_Index on CPlainAttr(schema_id)</entry>\n+\n+  <entry key=\"Task_executedIndex\">CREATE INDEX Task_executedIndex ON Task(executed)</entry>\n+</properties>"},{"sha":"c3196eb278f70e117fef7378ea0db5f614274a3d","filename":"core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+content.directory=${conf.directory}\n+entity.factory=org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityFactory\n+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainSchemaDAO\n+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainAttrDAO\n+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainAttrValueDAO\n+any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnySearchDAO\n+user.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAUserDAO\n+group.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAGroupDAO\n+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnyObjectDAO\n+openjpa.RemoteCommitProvider=sjvm"},{"sha":"eb450bef723821f0c0549b32702d5b95c7068e28","filename":"core/persistence-jpa-pgjsonb/src/main/resources/views.xml","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,154 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+  \n+  <entry key=\"UDynGroupMembers\">\n+    CREATE TABLE UDynGroupMembers(\n+    any_id CHAR(36),\n+    group_id CHAR(36),\n+    UNIQUE(any_id, group_id))\n+  </entry>\n+  <entry key=\"ADynGroupMembers\">\n+    CREATE TABLE ADynGroupMembers(\n+    anyType_id VARCHAR(255),\n+    any_id CHAR(36),\n+    group_id CHAR(36),\n+    UNIQUE(anyType_id, any_id, group_id))\n+  </entry>\n+  <entry key=\"DynRoleMembers\">\n+    CREATE TABLE DynRoleMembers(\n+    any_id CHAR(36),\n+    role_id VARCHAR(255),\n+    UNIQUE(any_id, role_id))\n+  </entry>\n+  <entry key=\"DynRealmMembers\">\n+    CREATE TABLE DynRealmMembers(\n+    any_id CHAR(36),\n+    dynRealm_id VARCHAR(255),\n+    UNIQUE(any_id, dynRealm_id))\n+  </entry>\n+\n+  <!-- user -->\n+  <entry key=\"user_search\">\n+    CREATE VIEW user_search AS\n+\n+    SELECT u.id as any_id, u.*,attrs,attrValues\n+    FROM SyncopeUser u, jsonb_array_elements(COALESCE(u.plainAttrs, '[{}]'::jsonb)) attrs,\n+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues\n+  </entry>\n+  <entry key=\"user_search_urelationship\">\n+    CREATE VIEW user_search_urelationship AS\n+\n+    SELECT m.user_id AS any_id, m.anyObject_id AS right_any_id, m.type_id AS type\n+    FROM URelationship m\n+  </entry>\n+  <entry key=\"user_search_umembership\">\n+    CREATE VIEW user_search_umembership AS\n+\n+    SELECT m.user_id AS any_id, g.id AS group_id, g.name AS group_name\n+    FROM UMembership m, SyncopeGroup g\n+    WHERE m.group_id = g.id\n+  </entry>\n+  <entry key=\"user_search_role\">\n+    CREATE VIEW user_search_role AS\n+\n+    SELECT ss.user_id AS any_id, ss.role_id AS role_id\n+    FROM SyncopeUser_SyncopeRole ss\n+  </entry>\n+  <entry key=\"user_search_priv\">\n+    CREATE VIEW user_search_priv AS\n+\n+    SELECT ss.user_id AS any_id, sp.privilege_id AS privilege_id\n+    FROM SyncopeUser_SyncopeRole ss, SyncopeRole_Privilege sp\n+    WHERE ss.role_id = sp.role_id\n+  </entry>\n+  <entry key=\"user_search_dynpriv\">\n+    CREATE VIEW user_search_dynpriv AS\n+\n+    SELECT any_id, privilege_id\n+    FROM DynRoleMembers drm, SyncopeRole_Privilege rp\n+    WHERE drm.role_id = rp.role_id\n+  </entry>\n+  <entry key=\"user_search_resource\">\n+    CREATE VIEW user_search_resource AS\n+\n+    SELECT st.user_id AS any_id, st.resource_id AS resource_id\n+    FROM SyncopeUser_ExternalResource st\n+  </entry>\n+  <entry key=\"user_search_group_res\">\n+    CREATE VIEW user_search_group_res AS\n+\n+    SELECT m.user_id AS any_id, st.resource_id AS resource_id\n+    FROM UMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st\n+    WHERE m.group_id = r.id AND st.group_id = r.id\n+  </entry>\n+\n+  <!-- anyObject -->\n+  <entry key=\"anyObject_search\">\n+    CREATE VIEW anyObject_search AS\n+\n+    SELECT a.id as any_id, a.*,attrs,attrValues\n+    FROM AnyObject a, jsonb_array_elements(COALESCE(a.plainAttrs, '[{}]'::jsonb)) attrs,\n+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues\n+  </entry>\n+  <entry key=\"anyObject_search_arelationship\">\n+    CREATE VIEW anyObject_search_arelationship AS\n+\n+    SELECT m.left_anyObject_id AS any_id, m.right_anyObject_id AS right_any_id, m.type_id AS type\n+    FROM ARelationship m\n+  </entry>\n+  <entry key=\"anyObject_search_amembership\">\n+    CREATE VIEW anyObject_search_amembership AS\n+\n+    SELECT m.anyObject_id AS any_id, g.id AS group_id, g.name AS group_name\n+    FROM AMembership m, SyncopeGroup g\n+    WHERE m.group_id = g.id\n+  </entry>\n+  <entry key=\"anyObject_search_resource\">\n+    CREATE VIEW anyObject_search_resource AS\n+\n+    SELECT st.anyObject_id AS any_id, st.resource_id AS resource_id\n+    FROM AnyObject_ExternalResource st\n+  </entry>\n+  <entry key=\"anyObject_search_group_res\">\n+    CREATE VIEW anyObject_search_group_res AS\n+\n+    SELECT m.anyObject_id AS any_id, st.resource_id AS resource_id\n+    FROM AMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st\n+    WHERE m.group_id = r.id AND st.group_id = r.id\n+  </entry>\n+\n+  <!-- group -->\n+  <entry key=\"group_search\">\n+    CREATE VIEW group_search AS\n+\n+    SELECT g.id as any_id, g.*,attrs,attrValues\n+    FROM SyncopeGroup g, jsonb_array_elements(COALESCE(g.plainAttrs, '[{}]'::jsonb)) attrs,\n+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues\n+  </entry>\n+  <entry key=\"group_search_resource\">\n+    CREATE VIEW group_search_resource AS\n+\n+    SELECT st.group_id AS any_id, st.resource_id AS resource_id\n+    FROM SyncopeGroup_ExternalResource st\n+  </entry>\n+\n+</properties>"},{"sha":"32efc96dd787a2fa6e30fd2a669a3bd596cf4e69","filename":"core/persistence-jpa-pgjsonb/src/test/resources/domains/MasterContent.xml","status":"added","additions":2410,"deletions":0,"changes":2410,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=c04c374b5b060c2b867467abe02ed874c63035c5"},{"sha":"1e84aea6a91ed748d62138af9b38e2985cb1a9b3","filename":"core/persistence-jpa-pgjsonb/src/test/resources/persistenceTest.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://www.springframework.org/schema/context\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n+\n+  <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n+    <property name=\"locations\">\n+      <list>\n+        <value>file:${conf.directory}/persistence.properties</value>\n+        <value>file:${conf.directory}/domains/*.properties</value>\n+        <value>classpath:security.properties</value>\n+      </list>\n+    </property>\n+    <property name=\"ignoreResourceNotFound\" value=\"true\"/>\n+    <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n+  </bean>\n+  \n+  <bean class=\"org.apache.syncope.core.spring.ApplicationContextProvider\"/>\n+\n+  <bean id=\"adminUser\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${adminUser}\"/>\n+  </bean>\n+  <bean id=\"anonymousUser\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${anonymousUser}\"/>\n+  </bean>\n+  \n+  <context:component-scan base-package=\"org.apache.syncope.core.spring.security\"/>\n+\n+  <bean class=\"org.apache.syncope.core.spring.security.DefaultPasswordGenerator\"/>\n+\n+  <import resource=\"persistenceContext.xml\"/>\n+\n+</beans>"},{"sha":"929ded233527278c68906d41b9fe668f676de65e","filename":"core/persistence-jpa-pgjsonb/src/test/resources/simplelogger.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# See http://www.slf4j.org/api/org/slf4j/impl/SimpleLogger.html\n+# Possible values: \"trace\", \"debug\", \"info\", \"warn\", or \"error\"\n+org.slf4j.simpleLogger.defaultLogLevel=debug\n+org.slf4j.simpleLogger.log.org.springframework.jdbc.core.JdbcTemplate=error\n+"},{"sha":"dca1b462b6519d653b34998dd875bafbae1b96fa","filename":"core/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c04c374b5b060c2b867467abe02ed874c63035c5/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=c04c374b5b060c2b867467abe02ed874c63035c5","patch":"@@ -79,6 +79,7 @@ under the License.\n   <modules>\n     <module>persistence-api</module>\n     <module>persistence-jpa</module>\n+    <module>persistence-jpa-pgjsonb</module>\n     <module>spring</module>\n     <module>provisioning-api</module>\n     <module>provisioning-java</module>"}]}