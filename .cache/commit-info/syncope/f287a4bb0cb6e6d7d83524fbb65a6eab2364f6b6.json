{"sha":"f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYyODdhNGJiMGNiNmU2ZDdkODM1MjRmYmI2NWE2ZWFiMjM2NGY2YjY=","commit":{"author":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-22T15:34:52Z"},"committer":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-22T15:34:52Z"},"message":"[SYNCOPE-231] Updated schema generic interface to understand abstract types\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1436996 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"49ce4bba21f7f9b6bc6a23e38d95ed7b4a674e49","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/49ce4bba21f7f9b6bc6a23e38d95ed7b4a674e49"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/comments","author":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"committer":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"parents":[{"sha":"c6f55f53e0db3156ff923656efc935ec645936ed","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c6f55f53e0db3156ff923656efc935ec645936ed","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c6f55f53e0db3156ff923656efc935ec645936ed"}],"stats":{"total":54,"additions":32,"deletions":22},"files":[{"sha":"fda1c79edbbac8558a1ef3a2a9822eaa213f3b53","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SchemaServiceProxy.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","patch":"@@ -56,18 +56,18 @@ public void delete(final AttributableType kind, final SchemaType type, final Str\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> List<T> list(final AttributableType kind, final SchemaType type) {\r\n+    public List<? extends AbstractSchemaTO> list(final AttributableType kind, final SchemaType type) {\r\n         switch (type) {\r\n             case NORMAL:\r\n-                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n                         SchemaTO[].class, kind));\r\n \r\n             case DERIVED:\r\n-                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n                         DerivedSchemaTO[].class, kind));\r\n \r\n             case VIRTUAL:\r\n-                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n                         VirtualSchemaTO[].class, kind));\r\n \r\n             default:\r"},{"sha":"c64d0c829a6828071f19ee2a73bc3fb69bbb3eeb","filename":"common/src/main/java/org/apache/syncope/common/services/SchemaService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java?ref=f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","patch":"@@ -68,7 +68,7 @@ void delete(@PathParam(\"kind\") AttributableType kind,\n             @PathParam(\"name\") String schemaName);\r\n \r\n     @GET\r\n-    <T extends AbstractSchemaTO> List<T> list(@PathParam(\"kind\") AttributableType kind,\r\n+    List<? extends AbstractSchemaTO> list(@PathParam(\"kind\") AttributableType kind,\r\n             @PathParam(\"type\") SchemaType type);\r\n \r\n     @GET\r"},{"sha":"a93476479e9cfddd715c33d98bce744d52deeefe","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","patch":"@@ -46,11 +46,12 @@ public class SchemaRestClient extends BaseRestClient {\n      *\n      * @return List of schemas.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public List<SchemaTO> getSchemas(final AttributableType type) {\n         List<SchemaTO> schemas = null;\n \n         try {\n-            schemas = getService(SchemaService.class).list(type, SchemaType.NORMAL);\n+            schemas = (List<SchemaTO>) getService(SchemaService.class).list(type, SchemaType.NORMAL);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all schemas\", e);\n         }\n@@ -67,7 +68,9 @@ public List<String> getSchemaNames(final AttributableType type) {\n         final List<String> schemaNames = new ArrayList<String>();\n \n         try {\n-            final List<SchemaTO> schemas = getService(SchemaService.class).list(type, SchemaType.NORMAL);\n+            @SuppressWarnings(\"unchecked\")\n+            final List<SchemaTO> schemas = (List<SchemaTO>) getService(SchemaService.class).list(type,\n+                    SchemaType.NORMAL);\n             for (SchemaTO schemaTO : schemas) {\n                 schemaNames.add(schemaTO.getName());\n             }\n@@ -83,12 +86,13 @@ public List<String> getSchemaNames(final AttributableType type) {\n      *\n      * @return List of derived schemas.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public List<DerivedSchemaTO> getDerivedSchemas(final AttributableType type) {\n \n         List<DerivedSchemaTO> userDerivedSchemas = null;\n \n         try {\n-            userDerivedSchemas = getService(SchemaService.class).list(type, SchemaType.DERIVED);\n+            userDerivedSchemas = (List<DerivedSchemaTO>) getService(SchemaService.class).list(type, SchemaType.DERIVED);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all user derived schemas\", e);\n         }\n@@ -106,8 +110,9 @@ public List<String> getDerivedSchemaNames(final AttributableType type) {\n         final List<String> userDerivedSchemasNames = new ArrayList<String>();\n \n         try {\n-            final List<DerivedSchemaTO> userDerivedSchemas = getService(SchemaService.class).list(type,\n-                    SchemaType.DERIVED);\n+            @SuppressWarnings(\"unchecked\")\n+            final List<DerivedSchemaTO> userDerivedSchemas = (List<DerivedSchemaTO>) getService(SchemaService.class)\n+                    .list(type, SchemaType.DERIVED);\n \n             for (DerivedSchemaTO schemaTO : userDerivedSchemas) {\n                 userDerivedSchemasNames.add(schemaTO.getName());\n@@ -124,12 +129,13 @@ public List<String> getDerivedSchemaNames(final AttributableType type) {\n      *\n      * @return List of derived schemas.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public List<VirtualSchemaTO> getVirtualSchemas(final AttributableType type) {\n \n         List<VirtualSchemaTO> userVirtualSchemas = null;\n \n         try {\n-            userVirtualSchemas = getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n+            userVirtualSchemas = (List<VirtualSchemaTO>) getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all user derived schemas\", e);\n         }\n@@ -146,8 +152,9 @@ public List<String> getVirtualSchemaNames(final AttributableType type) {\n         final List<String> userVirtualSchemasNames = new ArrayList<String>();\n \n         try {\n-            final List<VirtualSchemaTO> userVirtualSchemas = getService(SchemaService.class).list(type,\n-                    SchemaType.VIRTUAL);\n+            @SuppressWarnings(\"unchecked\")\n+            final List<VirtualSchemaTO> userVirtualSchemas = (List<VirtualSchemaTO>) getService(SchemaService.class)\n+                    .list(type, SchemaType.VIRTUAL);\n             for (VirtualSchemaTO schemaTO : userVirtualSchemas) {\n                 userVirtualSchemasNames.add(schemaTO.getName());\n             }"},{"sha":"165a816fc876718be567e90e1ee3b229761874a9","filename":"core/src/main/java/org/apache/syncope/core/services/SchemaServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java?ref=f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","patch":"@@ -103,16 +103,16 @@ public void delete(final AttributableType kind, final SchemaType type, final Str\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n-    public <T extends AbstractSchemaTO> List<T> list(final AttributableType kind, final SchemaType type) {\r\n+    public List<? extends AbstractSchemaTO> list(final AttributableType kind, final SchemaType type) {\r\n         switch (type) {\r\n             case NORMAL:\r\n-                return (List<T>) normalSchemaController.list(kind.toString());\r\n+                return (List<? extends AbstractSchemaTO>) normalSchemaController.list(kind.toString());\r\n \r\n             case DERIVED:\r\n-                return (List<T>) derivedSchemaController.list(kind.toString());\r\n+                return (List<? extends AbstractSchemaTO>) derivedSchemaController.list(kind.toString());\r\n \r\n             case VIRTUAL:\r\n-                return (List<T>) virtualSchemaController.list(kind.toString());\r\n+                return (List<? extends AbstractSchemaTO>) virtualSchemaController.list(kind.toString());\r\n \r\n             default:\r\n                 throw new BadRequestException();\r"},{"sha":"4647aae7450b164d466ca23294a7ec356860eb8c","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","patch":"@@ -41,7 +41,8 @@ public class DerivedSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n-        List<DerivedSchemaTO> derivedSchemas = schemaService.list(AttributableType.USER,\n+        @SuppressWarnings(\"unchecked\")\n+        List<DerivedSchemaTO> derivedSchemas = (List<DerivedSchemaTO>) schemaService.list(AttributableType.USER,\n                 SchemaService.SchemaType.DERIVED);\n         assertFalse(derivedSchemas.isEmpty());\n         for (DerivedSchemaTO derivedSchemaTO : derivedSchemas) {"},{"sha":"b696e0296ffe3ec2079afb47639061d939199d5f","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","patch":"@@ -142,21 +142,22 @@ public void delete() {\n         assertNull(firstname);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void list() {\n-        List<SchemaTO> userSchemas = schemaService.list(AttributableType.USER, SchemaService.SchemaType.NORMAL);\n+        List<SchemaTO> userSchemas = (List<SchemaTO>) schemaService.list(AttributableType.USER, SchemaService.SchemaType.NORMAL);\n         assertFalse(userSchemas.isEmpty());\n         for (SchemaTO schemaTO : userSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> roleSchemas = schemaService.list(AttributableType.ROLE, SchemaService.SchemaType.NORMAL);\n+        List<SchemaTO> roleSchemas = (List<SchemaTO>) schemaService.list(AttributableType.ROLE, SchemaService.SchemaType.NORMAL);\n         assertFalse(roleSchemas.isEmpty());\n         for (SchemaTO schemaTO : roleSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> membershipSchemas = schemaService.list(AttributableType.MEMBERSHIP,\n+        List<SchemaTO> membershipSchemas = (List<SchemaTO>) schemaService.list(AttributableType.MEMBERSHIP,\n                 SchemaService.SchemaType.NORMAL);\n         assertFalse(membershipSchemas.isEmpty());\n         for (SchemaTO schemaTO : membershipSchemas) {"},{"sha":"5b510b3fe139ae1dfbf1f31df2faa5774eb95de6","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=f287a4bb0cb6e6d7d83524fbb65a6eab2364f6b6","patch":"@@ -39,7 +39,8 @@ public class VirtualSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n-        List<VirtualSchemaTO> vSchemas = schemaService.list(AttributableType.USER, SchemaService.SchemaType.VIRTUAL);\n+        @SuppressWarnings(\"unchecked\")\n+        List<VirtualSchemaTO> vSchemas = (List<VirtualSchemaTO>) schemaService.list(AttributableType.USER, SchemaService.SchemaType.VIRTUAL);\n         assertFalse(vSchemas.isEmpty());\n         for (VirtualSchemaTO vSchemaTO : vSchemas) {\n             assertNotNull(vSchemaTO);"}]}