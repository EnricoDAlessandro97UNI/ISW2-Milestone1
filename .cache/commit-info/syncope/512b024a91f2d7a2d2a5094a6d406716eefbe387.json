{"sha":"512b024a91f2d7a2d2a5094a6d406716eefbe387","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUxMmIwMjRhOTFmMmQ3YTJkMmE1MDk0YTZkNDA2NzE2ZWVmYmUzODc=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-23T01:59:03Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-23T01:59:03Z"},"message":"use a detached thread for asynchronous propagation\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246640 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb61c292f4b705b8ff6ee312e06e7c81e1ca3f30","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fb61c292f4b705b8ff6ee312e06e7c81e1ca3f30"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/512b024a91f2d7a2d2a5094a6d406716eefbe387","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/512b024a91f2d7a2d2a5094a6d406716eefbe387","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/512b024a91f2d7a2d2a5094a6d406716eefbe387","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/512b024a91f2d7a2d2a5094a6d406716eefbe387/comments","author":null,"committer":null,"parents":[{"sha":"403aad4914b9ca10cc0cc610abcc3e73e4e846ad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/403aad4914b9ca10cc0cc610abcc3e73e4e846ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/403aad4914b9ca10cc0cc610abcc3e73e4e846ad"}],"stats":{"total":29,"additions":26,"deletions":3},"files":[{"sha":"086fd1dc8654fe09349c3a6543923c1e5a16694e","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":26,"deletions":3,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/512b024a91f2d7a2d2a5094a6d406716eefbe387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/512b024a91f2d7a2d2a5094a6d406716eefbe387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=512b024a91f2d7a2d2a5094a6d406716eefbe387","patch":"@@ -218,7 +218,17 @@ private void provision(\n                 // re-read it after saving\n                 taskExecution = task.getExecutions().get(0);\n \n-                propagate(taskExecution);\n+                LOG.debug(\"Start propagation ...\");\n+\n+                if (PropagationMode.SYNC.equals(\n+                        taskExecution.getTask().getPropagationMode())) {\n+                    propagate(taskExecution);\n+                } else {\n+                    asyncPropagate(taskExecution);\n+                }\n+\n+                LOG.debug(\"Returned from propagation...\");\n+\n                 if (syncResourceNames.contains(resource.getName())\n                         && taskExecution.getStatus()\n                         != TaskExecutionStatus.SUCCESS) {\n@@ -396,8 +406,7 @@ public void propagate(final TaskExecution execution) {\n                     getResource().\n                     getConnector();\n \n-            ConnectorFacadeProxy connector = ConnectorInstanceLoader.\n-                    getConnector(\n+            ConnectorFacadeProxy connector = ConnectorInstanceLoader.getConnector(\n                     connectorInstance.getId().toString());\n \n             if (connector == null) {\n@@ -477,4 +486,18 @@ public void propagate(final TaskExecution execution) {\n             execution.setEndDate(new Date());\n         }\n     }\n+\n+    public void asyncPropagate(final TaskExecution execution) {\n+        LOG.debug(\"Asynchronous task execution\");\n+\n+        // @Async doesn't work so we go on, temporary, with a simple thread\n+        \n+        new Thread() {\n+\n+            @Override\n+            public void run() {\n+                propagate(execution);\n+            }\n+        }.start();\n+    }\n }"}]}