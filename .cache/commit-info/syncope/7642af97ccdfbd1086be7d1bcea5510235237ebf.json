{"sha":"7642af97ccdfbd1086be7d1bcea5510235237ebf","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc2NDJhZjk3Y2NkZmJkMTA4NmJlN2QxYmNlYTU1MTAyMzUyMzdlYmY=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:10:45Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:10:45Z"},"message":"Fixed SYNCOPE-590","tree":{"sha":"c83666751408d2f854f4f4f16202415f5eece468","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c83666751408d2f854f4f4f16202415f5eece468"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7642af97ccdfbd1086be7d1bcea5510235237ebf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7642af97ccdfbd1086be7d1bcea5510235237ebf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7642af97ccdfbd1086be7d1bcea5510235237ebf","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7642af97ccdfbd1086be7d1bcea5510235237ebf/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"a61c801b00b854390b170a964b919de7f98ce2b8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a61c801b00b854390b170a964b919de7f98ce2b8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a61c801b00b854390b170a964b919de7f98ce2b8"}],"stats":{"total":94,"additions":77,"deletions":17},"files":[{"sha":"3c182c79918908a65b6f7142b6cbb868b4661f6d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/SchemaCommand.java","status":"modified","additions":77,"deletions":17,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7642af97ccdfbd1086be7d1bcea5510235237ebf/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7642af97ccdfbd1086be7d1bcea5510235237ebf/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java?ref=7642af97ccdfbd1086be7d1bcea5510235237ebf","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.messages.UsageMessages;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n@@ -43,6 +44,9 @@ public class SchemaCommand extends AbstractCommand {\n             + \"  Options:\\n\"\n             + \"    --help \\n\"\n             + \"    --list-all\\n\"\n+            + \"    --list-plain\\n\"\n+            + \"    --list-derived\\n\"\n+            + \"    --list-virtual\\n\"\n             + \"    --list {SCHEMA-TYPE}\\n\"\n             + \"       Schema type: PLAIN / DERIVED / VIRTUAL\";\n \n@@ -63,11 +67,13 @@ public void execute(final Input input) {\n         final SchemaService schemaService = SyncopeServices.get(SchemaService.class);\n         switch (Options.fromName(input.getOption())) {\n             case LIST:\n-                final String listErrorMessage = \"Usage: schema --list {SCHEMA-TYPE}\\n\"\n-                        + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+                final String listErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"schema --list {SCHEMA-TYPE}\\n\"\n+                        + \"   Schema type: PLAIN / DERIVED / VIRTUAL\");\n                 if (parameters.length == 1) {\n                     try {\n                         final SchemaType schemaType = SchemaType.valueOf(input.firstParameter());\n+                        System.out.println(\"\");\n                         for (final AbstractSchemaTO schemaTO : schemaService.list(schemaType)) {\n                             switch (schemaType) {\n                                 case PLAIN:\n@@ -87,14 +93,16 @@ public void execute(final Input input) {\n                                     break;\n                             }\n                         }\n+                        System.out.println(\"\");\n                     } catch (final SyncopeClientException ex) {\n-                        System.out.println(\" - Error: \" + ex.getMessage());\n+                        UsageMessages.printErrorMessage(ex.getMessage());\n                     } catch (final IllegalArgumentException ex) {\n-                        System.out.println(\" - Error: \" + input.firstParameter()\n-                                + \" isn't a valid schema type, try with:\");\n+                        UsageMessages.printErrorMessage(\n+                                input.firstParameter() + \" isn't a valid schema type, try with:\");\n                         for (final SchemaType type : SchemaType.values()) {\n                             System.out.println(\"  *** \" + type.name());\n                         }\n+                        System.out.println(\"\");\n                     }\n                 } else {\n                     System.out.println(listErrorMessage);\n@@ -103,23 +111,64 @@ public void execute(final Input input) {\n             case LIST_ALL:\n                 try {\n                     for (final SchemaType value : SchemaType.values()) {\n-                        System.out.println(\"Schemas for \" + value);\n+                        System.out.println(\"\");\n+                        System.out.println(value + \" schemas\");\n                         for (final AbstractSchemaTO schemaTO : schemaService.list(value)) {\n                             System.out.println(\"   - Name: \" + schemaTO.getKey() + \" type: \"\n                                     + schemaTO.getAnyTypeClass());\n                         }\n+                        System.out.println(\"\");\n                     }\n                 } catch (final SyncopeClientException | WebServiceException ex) {\n-                    System.out.println(\" - Error: \" + ex.getMessage());\n+                    UsageMessages.printErrorMessage(ex.getMessage());\n+                }\n+                break;\n+            case LIST_PLAIN:\n+                try {\n+                    System.out.println(\"\");\n+                    for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.PLAIN)) {\n+                        System.out.println(\" - Schema key: \" + ((PlainSchemaTO) schemaTO).getKey());\n+                        System.out.println(\"      type: \" + ((PlainSchemaTO) schemaTO).getType());\n+                        System.out.println(\"      is mandatory: \"\n+                                + ((PlainSchemaTO) schemaTO).getMandatoryCondition());\n+                    }\n+                    System.out.println(\"\");\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    UsageMessages.printErrorMessage(ex.getMessage());\n+                }\n+                break;\n+            case LIST_DERIVED:\n+                try {\n+                    System.out.println(\"\");\n+                    for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.DERIVED)) {\n+                        System.out.println(\" - Schema key: \" + ((DerSchemaTO) schemaTO).getKey());\n+                        System.out.println(\"      expression: \" + ((DerSchemaTO) schemaTO).getExpression());\n+                    }\n+                    System.out.println(\"\");\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    UsageMessages.printErrorMessage(ex.getMessage());\n+                }\n+                break;\n+            case LIST_VIRTUAL:\n+                try {\n+                    System.out.println(\"\");\n+                    for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.VIRTUAL)) {\n+                        System.out.println(\" - Schema key: \" + ((VirSchemaTO) schemaTO).getKey());\n+                    }\n+                    System.out.println(\"\");\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    UsageMessages.printErrorMessage(ex.getMessage());\n                 }\n                 break;\n             case READ:\n-                final String readErrorMessage = \"Usage: schema --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n-                        + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"schema --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+                        + \"   Schema type: PLAIN / DERIVED / VIRTUAL\");\n                 if (parameters.length >= 2) {\n                     parameters = Arrays.copyOfRange(parameters, 1, parameters.length);\n                     try {\n                         final SchemaType schemaType = SchemaType.valueOf(input.firstParameter());\n+                        System.out.println(\"\");\n                         for (final String parameter : parameters) {\n                             final AbstractSchemaTO schemaTO = schemaService.read(schemaType, parameter);\n                             switch (schemaType) {\n@@ -159,20 +208,24 @@ public void execute(final Input input) {\n                                 default:\n                                     break;\n                             }\n+                            System.out.println(\"\");\n                         }\n                     } catch (final SyncopeClientException | WebServiceException ex) {\n                         if (ex.getMessage().startsWith(\"NotFound\")) {\n-                            System.out.println(\" - Schema \" + parameters[0] + \" doesn't exists!\");\n+                            UsageMessages.printErrorMessage(\n+                                    \"Schema \" + parameters[0] + \" doesn't exists!\");\n                         } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                            System.out.println(\" - You cannot delete schema \" + parameters[0]);\n+                            UsageMessages.printErrorMessage(\"You cannot delete schema \" + parameters[0]);\n                         } else {\n-                            System.out.println(ex.getMessage());\n+                            UsageMessages.printErrorMessage(ex.getMessage());\n                         }\n                     } catch (final IllegalArgumentException ex) {\n-                        System.out.println(\" - Error: \" + parameters[0] + \" isn't a valid schema type, try with:\");\n+                        UsageMessages.printErrorMessage(\n+                                parameters[0] + \" isn't a valid schema type, try with:\");\n                         for (final SchemaType type : SchemaType.values()) {\n                             System.out.println(\"  *** \" + type.name());\n                         }\n+                        System.out.println(\"\");\n                     }\n                 } else {\n                     System.out.println(readErrorMessage);\n@@ -190,17 +243,21 @@ public void execute(final Input input) {\n                         }\n                     } catch (final SyncopeClientException | WebServiceException ex) {\n                         if (ex.getMessage().startsWith(\"NotFound\")) {\n-                            System.out.println(\" - Schema \" + parameters[0] + \" doesn't exists!\");\n+                            UsageMessages.printErrorMessage(\n+                                    \"Schema \" + parameters[0] + \" doesn't exists!\");\n                         } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                            System.out.println(\" - You cannot delete schema \" + parameters[0]);\n+                            UsageMessages.printErrorMessage(\n+                                    \"You cannot delete schema \" + parameters[0]);\n                         } else {\n-                            System.out.println(ex.getMessage());\n+                            UsageMessages.printErrorMessage(ex.getMessage());\n                         }\n                     } catch (final IllegalArgumentException ex) {\n-                        System.out.println(\" - Error: \" + parameters[0] + \" isn't a valid schema type, try with:\");\n+                        UsageMessages.printErrorMessage(\n+                                parameters[0] + \" isn't a valid schema type, try with:\");\n                         for (final SchemaType type : SchemaType.values()) {\n                             System.out.println(\"  *** \" + type.name());\n                         }\n+                        System.out.println(\"\");\n                     }\n                 } else {\n                     System.out.println(deleteErrorMessage);\n@@ -221,6 +278,9 @@ private enum Options {\n         HELP(\"--help\"),\n         LIST(\"--list\"),\n         LIST_ALL(\"--list-all\"),\n+        LIST_PLAIN(\"--list-plain\"),\n+        LIST_DERIVED(\"--list-derived\"),\n+        LIST_VIRTUAL(\"--list-virtual\"),\n         READ(\"--read\"),\n         DELETE(\"--delete\");\n "}]}