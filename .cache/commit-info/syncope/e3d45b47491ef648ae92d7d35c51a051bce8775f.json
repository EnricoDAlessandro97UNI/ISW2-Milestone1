{"sha":"e3d45b47491ef648ae92d7d35c51a051bce8775f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUzZDQ1YjQ3NDkxZWY2NDhhZTkyZDdkMzVjNTFhMDUxYmNlODc3NWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-10-02T10:36:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-10-02T11:04:26Z"},"message":"[SYNCOPE-957] Push implemented","tree":{"sha":"cde7043acb9f71f8cdf115f816a8292ecb301877","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cde7043acb9f71f8cdf115f816a8292ecb301877"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e3d45b47491ef648ae92d7d35c51a051bce8775f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e3d45b47491ef648ae92d7d35c51a051bce8775f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e3d45b47491ef648ae92d7d35c51a051bce8775f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e3d45b47491ef648ae92d7d35c51a051bce8775f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"692a7c5539d3aa7c9bac5e11c49252318eef871a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/692a7c5539d3aa7c9bac5e11c49252318eef871a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/692a7c5539d3aa7c9bac5e11c49252318eef871a"}],"stats":{"total":760,"additions":576,"deletions":184},"files":[{"sha":"99745e35c6d173341d6337e2328f0e42e960831a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -58,7 +58,7 @@ public static Map<Pair<String, String>, LinkedAccountTO> buildLinkedAccountMap(\n             final Collection<LinkedAccountTO> accounts) {\n \n         return accounts.stream().collect(Collectors.toUnmodifiableMap(\n-                account -> Pair.of(account.getResource(), account.getConnObjectName()),\n+                account -> Pair.of(account.getResource(), account.getconnObjectKeyValue()),\n                 Function.identity(),\n                 (exist, repl) -> repl));\n     }"},{"sha":"3278eba68e9b5457ac71c5f899331d1abcefb093","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/LinkedAccountTO.java","status":"modified","additions":9,"deletions":14,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLinkedAccountTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLinkedAccountTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLinkedAccountTO.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -42,14 +42,9 @@ public static class Builder {\n \n         private final LinkedAccountTO instance = new LinkedAccountTO();\n \n-        public Builder connObjectName(final String connObjectName) {\n-            instance.setConnObjectName(connObjectName);\n-            return this;\n-        }\n-\n-        public Builder resource(final String resource) {\n+        public Builder(final String resource, final String connObjectKeyValue) {\n             instance.setResource(resource);\n-            return this;\n+            instance.setconnObjectKeyValue(connObjectKeyValue);\n         }\n \n         public Builder username(final String username) {\n@@ -72,7 +67,7 @@ public LinkedAccountTO build() {\n         }\n     }\n \n-    private String connObjectName;\n+    private String connObjectKeyValue;\n \n     private String resource;\n \n@@ -86,12 +81,12 @@ public LinkedAccountTO build() {\n \n     private final Set<String> privileges = new HashSet<>();\n \n-    public String getConnObjectName() {\n-        return connObjectName;\n+    public String getconnObjectKeyValue() {\n+        return connObjectKeyValue;\n     }\n \n-    public void setConnObjectName(final String connObjectName) {\n-        this.connObjectName = connObjectName;\n+    public void setconnObjectKeyValue(final String connObjectKeyValue) {\n+        this.connObjectKeyValue = connObjectKeyValue;\n     }\n \n     public String getResource() {\n@@ -148,7 +143,7 @@ public Set<String> getPrivileges() {\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n-                append(connObjectName).\n+                append(connObjectKeyValue).\n                 append(resource).\n                 append(username).\n                 append(suspended).\n@@ -170,7 +165,7 @@ public boolean equals(final Object obj) {\n         }\n         final LinkedAccountTO other = (LinkedAccountTO) obj;\n         return new EqualsBuilder().\n-                append(connObjectName, other.connObjectName).\n+                append(connObjectKeyValue, other.connObjectKeyValue).\n                 append(resource, other.resource).\n                 append(username, other.username).\n                 append(suspended, other.suspended)."},{"sha":"008791e446c88188a64129b5d984f66e806df807","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n@@ -61,7 +60,7 @@ public interface UserDAO extends AnyDAO<User> {\n \n     Collection<ExternalResource> findAllResources(User user);\n \n-    Optional<LinkedAccount> findLinkedAccountByConnObjectName(String connObjectName);\n+    boolean linkedAccountExists(String userKey, String connObjectKeyValue);\n \n     List<LinkedAccount> findLinkedAccounts(String userKey);\n "},{"sha":"0485f05b6c32c174a6659fcacf279733a8677fdf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/LinkedAccount.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLinkedAccount.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -25,9 +25,9 @@\n \n public interface LinkedAccount extends Account, Attributable<LAPlainAttr> {\n \n-    String getConnObjectName();\n+    String getConnObjectKeyValue();\n \n-    void setConnObjectName(String connObjectName);\n+    void setConnObjectKeyValue(String connObjectKeyValue);\n \n     User getOwner();\n "},{"sha":"458d415f6b8ba158c7ae8dd1e4ff42d647ffe375","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -75,7 +75,9 @@ public interface User extends Account, GroupableRelatable<User, UMembership, UPl\n \n     boolean add(LinkedAccount account);\n \n-    Optional<? extends LinkedAccount> getLinkedAccount(String resource, String connObjectName);\n+    Optional<? extends LinkedAccount> getLinkedAccount(String resource, String connObjectKeyValue);\n+\n+    List<? extends LinkedAccount> getLinkedAccounts(String resource);\n \n     List<? extends LinkedAccount> getLinkedAccounts();\n }"},{"sha":"87e2ca2d25b42bcc6a3a65bc4849a90047ac52b5","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONUser.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -133,13 +133,20 @@ public boolean add(final LinkedAccount account) {\n     }\n \n     @Override\n-    public Optional<? extends LinkedAccount> getLinkedAccount(final String resource, final String connObjectName) {\n+    public Optional<? extends LinkedAccount> getLinkedAccount(final String resource, final String connObjectKeyValue) {\n         return linkedAccounts.stream().\n                 filter(account -> account.getResource().getKey().equals(resource)\n-                && account.getConnObjectName().equals(connObjectName)).\n+                && account.getConnObjectKeyValue().equals(connObjectKeyValue)).\n                 findFirst();\n     }\n \n+    @Override\n+    public List<? extends LinkedAccount> getLinkedAccounts(final String resource) {\n+        return linkedAccounts.stream().\n+                filter(account -> account.getResource().getKey().equals(resource)).\n+                collect(Collectors.toList());\n+    }\n+\n     @Override\n     public List<? extends LinkedAccount> getLinkedAccounts() {\n         return linkedAccounts;"},{"sha":"a27495b8b13c36e52ca866d49657b8c6a838e52e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -25,7 +25,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n-import java.util.Optional;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n@@ -544,6 +543,17 @@ public Collection<String> findAllResourceKeys(final String key) {\n         return findAllResources(authFind(key)).stream().map(Entity::getKey).collect(Collectors.toList());\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public boolean linkedAccountExists(final String userKey, final String connObjectKeyValue) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT id FROM \" + JPALinkedAccount.TABLE + \" WHERE owner_id=? AND connObjectKeyValue=?\");\n+        query.setParameter(1, userKey);\n+        query.setParameter(2, connObjectKeyValue);\n+\n+        return !query.getResultList().isEmpty();\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public List<LinkedAccount> findLinkedAccounts(final String userKey) {\n@@ -563,19 +573,6 @@ public List<LinkedAccount> findLinkedAccountsByPrivilege(final Privilege privile\n         return query.getResultList();\n     }\n \n-    @Override\n-    public Optional<LinkedAccount> findLinkedAccountByConnObjectName(final String connObjectName) {\n-        TypedQuery<LinkedAccount> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPALinkedAccount.class.getSimpleName() + \" e \"\n-                + \"WHERE e.connObjectName=:connObjectName\", LinkedAccount.class);\n-        query.setParameter(\"connObjectName\", connObjectName);\n-\n-        List<LinkedAccount> result = query.getResultList();\n-        return result.isEmpty()\n-                ? Optional.empty()\n-                : Optional.of(result.get(0));\n-    }\n-\n     @Override\n     public List<LinkedAccount> findLinkedAccountsByResource(final ExternalResource resource) {\n         TypedQuery<LinkedAccount> query = entityManager().createQuery("},{"sha":"dbd47e8ceeb4d0e2a918f4a411530b54c06b8d2a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPALinkedAccount.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -51,7 +51,7 @@\n \n @Entity\n @Table(name = JPALinkedAccount.TABLE, uniqueConstraints =\n-        @UniqueConstraint(columnNames = { \"connObjectName\", \"resource_id\" }))\n+        @UniqueConstraint(columnNames = { \"connObjectKeyValue\", \"resource_id\" }))\n public class JPALinkedAccount extends AbstractGeneratedKeyEntity implements LinkedAccount {\n \n     private static final long serialVersionUID = -5141654998687601522L;\n@@ -61,7 +61,7 @@ public class JPALinkedAccount extends AbstractGeneratedKeyEntity implements Link\n     private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n     @NotNull\n-    private String connObjectName;\n+    private String connObjectKeyValue;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAUser owner;\n@@ -94,13 +94,13 @@ public class JPALinkedAccount extends AbstractGeneratedKeyEntity implements Link\n     private Set<JPAPrivilege> privileges = new HashSet<>();\n \n     @Override\n-    public String getConnObjectName() {\n-        return connObjectName;\n+    public String getConnObjectKeyValue() {\n+        return connObjectKeyValue;\n     }\n \n     @Override\n-    public void setConnObjectName(final String connObjectName) {\n-        this.connObjectName = connObjectName;\n+    public void setConnObjectKeyValue(final String connObjectKeyValue) {\n+        this.connObjectKeyValue = connObjectKeyValue;\n     }\n \n     @Override"},{"sha":"1a7e075ddc0e154779b7b1b4a3cc03f9955658b1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -23,6 +23,7 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n@@ -472,13 +473,20 @@ public boolean add(final LinkedAccount account) {\n     }\n \n     @Override\n-    public Optional<? extends LinkedAccount> getLinkedAccount(final String resource, final String connObjectName) {\n+    public Optional<? extends LinkedAccount> getLinkedAccount(final String resource, final String connObjectKeyValue) {\n         return linkedAccounts.stream().\n                 filter(account -> account.getResource().getKey().equals(resource)\n-                && account.getConnObjectName().equals(connObjectName)).\n+                && account.getConnObjectKeyValue().equals(connObjectKeyValue)).\n                 findFirst();\n     }\n \n+    @Override\n+    public List<? extends LinkedAccount> getLinkedAccounts(final String resource) {\n+        return linkedAccounts.stream().\n+                filter(account -> account.getResource().getKey().equals(resource)).\n+                collect(Collectors.toList());\n+    }\n+\n     @Override\n     public List<? extends LinkedAccount> getLinkedAccounts() {\n         return linkedAccounts;"},{"sha":"a8f2320175d00593bc6bb5b73ee0cc99357536c5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -28,7 +28,6 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Objects;\n-import java.util.Optional;\n import java.util.UUID;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -232,7 +231,7 @@ public void membershipWithAttr() {\n         assertTrue(user.getPlainAttrs(\"obscure\").stream().anyMatch(plainAttr -> newM.equals(plainAttr.getMembership())));\n     }\n \n-    private LinkedAccount newLinkedAccount(final String connObjectName) {\n+    private LinkedAccount newLinkedAccount(final String connObjectKeyValue) {\n         User user = userDAO.findByUsername(\"vivaldi\");\n         user.getLinkedAccounts().stream().filter(Objects::nonNull).forEach(account -> account.setOwner(null));\n         user.getLinkedAccounts().clear();\n@@ -241,7 +240,7 @@ private LinkedAccount newLinkedAccount(final String connObjectName) {\n         account.setOwner(user);\n         user.add(account);\n \n-        account.setConnObjectName(connObjectName);\n+        account.setConnObjectKeyValue(connObjectKeyValue);\n         account.setResource(resourceDAO.find(\"resource-ldap\"));\n         account.add(applicationDAO.findPrivilege(\"getMighty\"));\n \n@@ -272,9 +271,7 @@ public void findLinkedAccount() {\n         assertTrue(account.getPlainAttr(\"obscure\").isPresent());\n         assertEquals(account.getOwner(), account.getPlainAttr(\"obscure\").get().getOwner());\n \n-        Optional<LinkedAccount> found = userDAO.findLinkedAccountByConnObjectName(account.getConnObjectName());\n-        assertTrue(found.isPresent());\n-        assertEquals(account, found.get());\n+        assertTrue(userDAO.linkedAccountExists(account.getOwner().getKey(), account.getConnObjectKeyValue()));\n \n         List<LinkedAccount> accounts = userDAO.findLinkedAccountsByResource(resourceDAO.find(\"resource-ldap\"));\n         assertEquals(1, accounts.size());"},{"sha":"0e94cb6dfde5a003cd533e58ae726fbbd5c69568","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/PropagationByResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -30,7 +30,7 @@\n /**\n  * Encapsulates operations to be performed on various resources.\n  *\n- * @param <T> key for propagation: could be simple resource or pair (resource, connObjectName) for linked accounts\n+ * @param <T> key for propagation: could be simple resource or pair (resource, connObjectKeyValue) for linked accounts\n  */\n public class PropagationByResource<T extends Serializable> implements Serializable {\n "},{"sha":"523cc227809aa157725c5eb6a26e72bd3b873f85","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -78,6 +78,7 @@ List<PropagationTaskInfo> getUserCreateTasks(\n      * @param changePwd whether password should be included for propagation attributes or not\n      * @param enable whether any object should be enabled or not, may be null to leave unchanged\n      * @param propByRes operation to be performed per resource\n+     * @param propByLinkedAccount operation to be performed for linked accounts\n      * @param vAttrs virtual attributes to be set\n      * @param noPropResourceKeys external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n@@ -88,6 +89,7 @@ List<PropagationTaskInfo> getUpdateTasks(\n             boolean changePwd,\n             Boolean enable,\n             PropagationByResource<String> propByRes,\n+            PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             Collection<Attr> vAttrs,\n             Collection<String> noPropResourceKeys);\n \n@@ -119,13 +121,15 @@ List<PropagationTaskInfo> getUserUpdateTasks(\n      * @param kind any object type kind\n      * @param key any object key\n      * @param propByRes operation to be performed per resource\n+     * @param propByLinkedAccount operation to be performed for linked accounts\n      * @param noPropResourceKeys external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTaskInfo> getDeleteTasks(\n             AnyTypeKind kind,\n             String key,\n             PropagationByResource<String> propByRes,\n+            PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             Collection<String> noPropResourceKeys);\n \n     /**"},{"sha":"34fddd09ffb9378fac08a8b2a01bed773856bd52","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -106,6 +106,7 @@ public Pair<AnyObjectUR, List<PropagationStatus>> update(\n                 false,\n                 null,\n                 updated.getPropByRes(),\n+                null,\n                 anyObjectUR.getVirAttrs(),\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n@@ -135,6 +136,7 @@ public List<PropagationStatus> delete(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 propByRes,\n+                null,\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n@@ -171,6 +173,7 @@ public List<PropagationStatus> provision(\n                 null,\n                 propByRes,\n                 null,\n+                null,\n                 null);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n@@ -188,6 +191,7 @@ public List<PropagationStatus> deprovision(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 propByRes,\n+                null,\n                 anyObjectDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));"},{"sha":"e3b15326599a7d5bf9ac17ade9216d7568164f5d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":20,"deletions":12,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -128,6 +128,7 @@ public Pair<GroupUR, List<PropagationStatus>> update(\n                 false,\n                 null,\n                 updated.getPropByRes(),\n+                null,\n                 groupUR.getVirAttrs(),\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n@@ -149,24 +150,29 @@ public List<PropagationStatus> delete(\n \n         // Generate propagation tasks for deleting users and any objects from group resources, \n         // if they are on those resources only because of the reason being deleted (see SYNCOPE-357)\n-        groupDataBinder.findUsersWithTransitiveResources(key).entrySet().\n-                forEach(entry -> taskInfos.addAll(propagationManager.getDeleteTasks(\n-                        AnyTypeKind.USER,\n-                        entry.getKey(),\n-                        entry.getValue(),\n-                        excludedResources)));\n-        groupDataBinder.findAnyObjectsWithTransitiveResources(key).entrySet().\n-                forEach(entry -> taskInfos.addAll(propagationManager.getDeleteTasks(\n-                        AnyTypeKind.ANY_OBJECT,\n-                        entry.getKey(),\n-                        entry.getValue(),\n-                        excludedResources)));\n+        groupDataBinder.findUsersWithTransitiveResources(key).forEach((anyKey, propByRes) -> {\n+            taskInfos.addAll(propagationManager.getDeleteTasks(\n+                    AnyTypeKind.USER,\n+                    anyKey,\n+                    propByRes,\n+                    null,\n+                    excludedResources));\n+        });\n+        groupDataBinder.findAnyObjectsWithTransitiveResources(key).forEach((anyKey, propByRes) -> {\n+            taskInfos.addAll(propagationManager.getDeleteTasks(\n+                    AnyTypeKind.ANY_OBJECT,\n+                    anyKey,\n+                    propByRes,\n+                    null,\n+                    excludedResources));\n+        });\n \n         // Generate propagation tasks for deleting this group from resources\n         taskInfos.addAll(propagationManager.getDeleteTasks(\n                 AnyTypeKind.GROUP,\n                 key,\n                 null,\n+                null,\n                 null));\n \n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n@@ -195,6 +201,7 @@ public List<PropagationStatus> provision(\n                 null,\n                 propByRes,\n                 null,\n+                null,\n                 null);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n@@ -212,6 +219,7 @@ public List<PropagationStatus> deprovision(\n                 AnyTypeKind.GROUP,\n                 key,\n                 propByRes,\n+                null,\n                 groupDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));"},{"sha":"6294d3877acfdb38aa0b1eeacab9f6ffd76c6595","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -188,7 +188,7 @@ public List<PropagationStatus> delete(\n         PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n         userDAO.findLinkedAccounts(key).forEach(account -> propByLinkedAccount.add(\n                 ResourceOperation.DELETE,\n-                Pair.of(account.getResource().getKey(), account.getConnObjectName())));\n+                Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n \n         // Note here that we can only notify about \"delete\", not any other\n         // task defined in workflow process definition: this because this\n@@ -259,6 +259,7 @@ protected List<PropagationStatus> propagateStatus(final StatusR statusR, final b\n                 statusR.getType() != StatusRType.SUSPEND,\n                 propByRes,\n                 null,\n+                null,\n                 null);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n@@ -324,10 +325,18 @@ public List<PropagationStatus> deprovision(\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.DELETE, resources);\n \n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+        userDAO.findLinkedAccounts(key).stream().\n+                filter(account -> resources.contains(account.getResource().getKey())).\n+                forEach(account -> propByLinkedAccount.add(\n+                ResourceOperation.DELETE,\n+                Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n+\n         List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks(\n                 AnyTypeKind.USER,\n                 key,\n                 propByRes,\n+                propByLinkedAccount,\n                 userDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));"},{"sha":"6c9118fdd005c1c22911ec7f2cdfb96405760470","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -292,7 +292,7 @@ public Set<Attribute> prepareAttrs(\n             }\n         }\n \n-        String connObjectKey = account.getConnObjectName();\n+        String connObjectKey = account.getConnObjectKeyValue();\n         MappingUtils.getConnObjectKeyItem(provision).ifPresent(connObjectKeyItem -> {\n             Attribute connObjectKeyExtAttr = AttributeUtil.find(connObjectKeyItem.getExtAttrName(), attributes);\n             if (connObjectKeyExtAttr != null) {"},{"sha":"08aa605e50bb68e593cb29ab602149a68bf91f0b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":33,"deletions":17,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -25,7 +25,9 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.BooleanUtils;\n@@ -163,12 +165,25 @@ private void linkedAccount(\n         if (resource == null) {\n             LOG.debug(\"Ignoring invalid resource {}\", accountTO.getResource());\n         } else {\n-            LinkedAccount account = entityFactory.newEntity(LinkedAccount.class);\n-            account.setOwner(user);\n-            user.add(account);\n+            Optional<? extends LinkedAccount> found =\n+                    user.getLinkedAccount(resource.getKey(), accountTO.getconnObjectKeyValue());\n+            LinkedAccount account = found.isPresent()\n+                    ? found.get()\n+                    : new Supplier<LinkedAccount>() {\n+\n+                        @Override\n+                        public LinkedAccount get() {\n+                            LinkedAccount acct = entityFactory.newEntity(LinkedAccount.class);\n+                            acct.setOwner(user);\n+                            user.add(acct);\n+\n+                            acct.setConnObjectKeyValue(accountTO.getconnObjectKeyValue());\n+                            acct.setResource(resource);\n+\n+                            return acct;\n+                        }\n+                    }.get();\n \n-            account.setConnObjectName(accountTO.getConnObjectName());\n-            account.setResource(resource);\n             account.setUsername(accountTO.getUsername());\n             if (StringUtils.isNotBlank(accountTO.getPassword())) {\n                 account.setPassword(accountTO.getPassword(), CipherAlgorithm.AES);\n@@ -576,10 +591,17 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n         userUR.getLinkedAccounts().stream().filter(patch -> patch.getLinkedAccountTO() != null).forEach(patch -> {\n             user.getLinkedAccount(\n                     patch.getLinkedAccountTO().getResource(),\n-                    patch.getLinkedAccountTO().getConnObjectName()).ifPresent(account -> {\n+                    patch.getLinkedAccountTO().getconnObjectKeyValue()).ifPresent(account -> {\n+\n+                if (patch.getOperation() == PatchOperation.DELETE) {\n+                    user.getLinkedAccounts().remove(account);\n+                    account.setOwner(null);\n+\n+                    propByLinkedAccount.add(\n+                            ResourceOperation.DELETE,\n+                            Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue()));\n+                }\n \n-                user.getLinkedAccounts().remove(account);\n-                account.setOwner(null);\n                 account.getPlainAttrs().stream().collect(Collectors.toSet()).forEach(attr -> {\n                     account.remove(attr);\n                     attr.setOwner(null);\n@@ -588,11 +610,6 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n                     plainAttrDAO.delete(attr);\n                 });\n \n-                if (patch.getOperation() == PatchOperation.DELETE) {\n-                    propByLinkedAccount.add(\n-                            ResourceOperation.DELETE,\n-                            Pair.of(account.getResource().getKey(), account.getConnObjectName()));\n-                }\n             });\n             if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n                 linkedAccount(\n@@ -605,7 +622,7 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n         user.getLinkedAccounts().forEach(account -> {\n             propByLinkedAccount.add(\n                     ResourceOperation.CREATE,\n-                    Pair.of(account.getResource().getKey(), account.getConnObjectName()));\n+                    Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue()));\n         });\n \n         // finalize resource management\n@@ -735,9 +752,8 @@ public UserTO getUserTO(final User user, final boolean details) {\n             // linked accounts\n             userTO.getLinkedAccounts().addAll(\n                     user.getLinkedAccounts().stream().map(account -> {\n-                        LinkedAccountTO accountTO = new LinkedAccountTO.Builder().\n-                                resource(account.getResource().getKey()).\n-                                connObjectName(account.getConnObjectName()).\n+                        LinkedAccountTO accountTO = new LinkedAccountTO.Builder(\n+                                account.getResource().getKey(), account.getConnObjectKeyValue()).\n                                 username(account.getUsername()).\n                                 password(user.getPassword()).\n                                 suspended(BooleanUtils.isTrue(account.isSuspended()))."},{"sha":"7ebc95d046187c9fe574115e560099897096f05d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":35,"deletions":27,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -32,6 +32,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.ExecStatus;\n@@ -625,37 +626,44 @@ protected ConnectorObject getRemoteObject(\n                 ? task.getConnObjectKey()\n                 : task.getOldConnObjectKey();\n \n-        Set<MappingItem> linkingMappingItems = virSchemaDAO.findByProvision(provision).stream().\n-                map(VirSchema::asLinkingMappingItem).collect(Collectors.toSet());\n+        boolean isLinkedAccount = task.getAnyTypeKind() == AnyTypeKind.USER\n+                && userDAO.linkedAccountExists(task.getEntityKey(), connObjectKey);\n+\n+        Set<MappingItem> linkingMappingItems = isLinkedAccount\n+                ? Set.of()\n+                : virSchemaDAO.findByProvision(provision).stream().\n+                        map(VirSchema::asLinkingMappingItem).collect(Collectors.toSet());\n \n-        ConnectorObject obj = null;\n         Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n-        if (connObjectKeyItem.isPresent()) {\n-            try {\n-                obj = connector.getObject(\n-                        new ObjectClass(task.getObjectClassName()),\n-                        AttributeBuilder.build(connObjectKeyItem.get().getExtAttrName(), connObjectKey),\n-                        provision.isIgnoreCaseMatch(),\n-                        MappingUtils.buildOperationOptions(new IteratorChain<>(\n-                                MappingUtils.getPropagationItems(provision.getMapping().getItems()).iterator(),\n-                                linkingMappingItems.iterator())));\n-\n-                for (MappingItem item : linkingMappingItems) {\n-                    Attribute attr = obj.getAttributeByName(item.getExtAttrName());\n-                    if (attr == null) {\n-                        virAttrCache.expire(task.getAnyType(), task.getEntityKey(), item.getIntAttrName());\n-                    } else {\n-                        VirAttrCacheValue cacheValue = new VirAttrCacheValue();\n-                        cacheValue.setValues(attr.getValue());\n-                        virAttrCache.put(task.getAnyType(), task.getEntityKey(), item.getIntAttrName(), cacheValue);\n-                    }\n+        String connObjectKeyName = connObjectKeyItem.isPresent()\n+                ? connObjectKeyItem.get().getExtAttrName()\n+                : Name.NAME;\n+\n+        ConnectorObject obj = null;\n+        try {\n+            obj = connector.getObject(\n+                    new ObjectClass(task.getObjectClassName()),\n+                    AttributeBuilder.build(connObjectKeyName, connObjectKey),\n+                    provision.isIgnoreCaseMatch(),\n+                    MappingUtils.buildOperationOptions(new IteratorChain<>(\n+                            MappingUtils.getPropagationItems(provision.getMapping().getItems()).iterator(),\n+                            linkingMappingItems.iterator())));\n+\n+            for (MappingItem item : linkingMappingItems) {\n+                Attribute attr = obj.getAttributeByName(item.getExtAttrName());\n+                if (attr == null) {\n+                    virAttrCache.expire(task.getAnyType(), task.getEntityKey(), item.getIntAttrName());\n+                } else {\n+                    VirAttrCacheValue cacheValue = new VirAttrCacheValue();\n+                    cacheValue.setValues(attr.getValue());\n+                    virAttrCache.put(task.getAnyType(), task.getEntityKey(), item.getIntAttrName(), cacheValue);\n                 }\n-            } catch (TimeoutException toe) {\n-                LOG.debug(\"Request timeout\", toe);\n-                throw toe;\n-            } catch (RuntimeException ignore) {\n-                LOG.debug(\"While resolving {}\", connObjectKey, ignore);\n             }\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n+        } catch (RuntimeException ignore) {\n+            LOG.debug(\"While resolving {}\", connObjectKey, ignore);\n         }\n \n         return obj;"},{"sha":"3c9674ab333e0159b19d266768d841baf30d7372","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DeletingLinkedAccount.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n@@ -39,12 +38,12 @@ public class DeletingLinkedAccount implements LinkedAccount {\n \n     private final ExternalResource resource;\n \n-    private final String connObjectName;\n+    private final String connObjectKeyValue;\n \n-    public DeletingLinkedAccount(final User user, final ExternalResource resource, final String connObjectName) {\n+    public DeletingLinkedAccount(final User user, final ExternalResource resource, final String connObjectKeyValue) {\n         this.user = user;\n         this.resource = resource;\n-        this.connObjectName = connObjectName;\n+        this.connObjectKeyValue = connObjectKeyValue;\n     }\n \n     @Override\n@@ -53,12 +52,12 @@ public String getKey() {\n     }\n \n     @Override\n-    public String getConnObjectName() {\n-        return connObjectName;\n+    public String getConnObjectKeyValue() {\n+        return connObjectKeyValue;\n     }\n \n     @Override\n-    public void setConnObjectName(final String connObjectName) {\n+    public void setConnObjectKeyValue(final String connObjectKeyValue) {\n         // unsupported\n     }\n \n@@ -89,7 +88,7 @@ public boolean add(final Privilege privilege) {\n \n     @Override\n     public Set<? extends Privilege> getPrivileges() {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     @Override\n@@ -154,15 +153,15 @@ public Optional<? extends LAPlainAttr> getPlainAttr(final String plainSchema) {\n \n     @Override\n     public List<? extends LAPlainAttr> getPlainAttrs() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n                 append(user.getKey()).\n                 append(resource).\n-                append(connObjectName).\n+                append(connObjectKeyValue).\n                 build();\n     }\n \n@@ -181,7 +180,7 @@ public boolean equals(final Object obj) {\n         return new EqualsBuilder().\n                 append(user.getKey(), other.user.getKey()).\n                 append(resource, other.resource).\n-                append(connObjectName, other.connObjectName).\n+                append(connObjectKeyValue, other.connObjectKeyValue).\n                 build();\n     }\n }"},{"sha":"754c2b48225e8a057acb004a846ef5da42f7d871","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -204,6 +204,7 @@ public List<PropagationTaskInfo> getUpdateTasks(\n             final boolean changePwd,\n             final Boolean enable,\n             final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<Attr> vAttrs,\n             final Collection<String> noPropResourceKeys) {\n \n@@ -213,7 +214,7 @@ public List<PropagationTaskInfo> getUpdateTasks(\n                 changePwd,\n                 enable,\n                 propByRes,\n-                null,\n+                propByLinkedAccount,\n                 vAttrs,\n                 noPropResourceKeys);\n     }\n@@ -320,9 +321,10 @@ public List<PropagationTaskInfo> getDeleteTasks(\n             final AnyTypeKind kind,\n             final String key,\n             final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<String> noPropResourceKeys) {\n \n-        return getDeleteTasks(dao(kind).authFind(key), propByRes, null, noPropResourceKeys);\n+        return getDeleteTasks(dao(kind).authFind(key), propByRes, propByLinkedAccount, noPropResourceKeys);\n     }\n \n     @Override\n@@ -547,12 +549,12 @@ protected List<PropagationTaskInfo> createTasks(\n                             provision,\n                             deleteOnResource,\n                             mappingItems,\n-                            Pair.of(account.getConnObjectName(),\n+                            Pair.of(account.getConnObjectKeyValue(),\n                                     mappingManager.prepareAttrs(user, account, password, changePwd, provision)));\n                     tasks.add(accountTask);\n \n                     LOG.debug(\"PropagationTask created for Linked Account {}: {}\",\n-                            account.getConnObjectName(), accountTask);\n+                            account.getConnObjectKeyValue(), accountTask);\n                 }\n             });\n         }"},{"sha":"02f534e7b78c53b5a612f483a78c9758e8e4138c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -24,11 +24,13 @@\n import java.util.Set;\n \n import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.MatchingRule;\n@@ -39,6 +41,7 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n@@ -82,6 +85,9 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan\n     @Autowired\n     protected ConnObjectUtils connObjectUtils;\n \n+    @Autowired\n+    protected UserDAO userDAO;\n+\n     @Autowired\n     protected RemediationDAO remediationDAO;\n \n@@ -477,10 +483,19 @@ protected List<ProvisioningReport> deprovision(\n \n                         PropagationByResource<String> propByRes = new PropagationByResource<>();\n                         propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n+\n+                        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+                        if (getAnyUtils().anyTypeKind() == AnyTypeKind.USER) {\n+                            userDAO.findLinkedAccounts(key).forEach(account -> propByLinkedAccount.add(\n+                                    ResourceOperation.DELETE,\n+                                    Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n+                        }\n+\n                         taskExecutor.execute(propagationManager.getDeleteTasks(\n                                 provision.getAnyType().getKind(),\n                                 key,\n                                 propByRes,\n+                                propByLinkedAccount,\n                                 null),\n                                 false);\n "},{"sha":"ec32114cd06dffbc8f9d42a4a1fffd31f415874a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -24,6 +24,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n@@ -118,6 +119,7 @@ protected void update(\n                 enable,\n                 propByRes,\n                 null,\n+                null,\n                 noPropResources);\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n@@ -141,6 +143,7 @@ protected void deprovision(final Any<?> any, final ConnectorObject beforeObj, fi\n                 any.getType().getKind(),\n                 any.getKey(),\n                 propByRes,\n+                null,\n                 noPropResources);\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n@@ -281,15 +284,6 @@ protected void doHandle(final Any<?> any, final Provision provision) throws JobE\n         }\n         ConnectorObject beforeObj = connObjs.isEmpty() ? null : connObjs.get(0);\n \n-        Object output = null;\n-        Result resultStatus = null;\n-\n-        Boolean enable = any instanceof User && profile.getTask().isSyncStatus()\n-                ? ((User) any).isSuspended()\n-                ? Boolean.FALSE\n-                : Boolean.TRUE\n-                : null;\n-\n         if (profile.isDryRun()) {\n             if (beforeObj == null) {\n                 result.setOperation(toResourceOperation(profile.getTask().getUnmatchingRule()));\n@@ -313,6 +307,13 @@ protected void doHandle(final Any<?> any, final Provision provision) throws JobE\n                     any.getType().getKind().name().toLowerCase(),\n                     profile.getTask().getResource().getKey(),\n                     operation);\n+\n+            Object output = null;\n+            Result resultStatus = null;\n+\n+            Boolean enable = any instanceof User && profile.getTask().isSyncStatus()\n+                    ? BooleanUtils.negate(((User) any).isSuspended())\n+                    : null;\n             try {\n                 if (beforeObj == null) {\n                     result.setOperation(toResourceOperation(profile.getTask().getUnmatchingRule()));"},{"sha":"8ee48cf1183e9afa358360912634e75d2c30e2fa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":88,"deletions":5,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -20,6 +20,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.UserUR;\n@@ -29,11 +31,15 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPushResultHandler;\n+import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationReporter;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n public class DefaultUserPushResultHandler extends AbstractPushResultHandler implements UserPushResultHandler {\n \n@@ -42,6 +48,16 @@ protected AnyUtils getAnyUtils() {\n         return anyUtilsFactory.getInstance(AnyTypeKind.USER);\n     }\n \n+    @Override\n+    protected String getName(final Any<?> any) {\n+        return User.class.cast(any).getUsername();\n+    }\n+\n+    @Override\n+    protected AnyTO getAnyTO(final String key) {\n+        return userDataBinder.getUserTO(key);\n+    }\n+\n     @Override\n     protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n         AnyTO before = getAnyTO(any.getKey());\n@@ -52,26 +68,93 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+        ((User) any).getLinkedAccounts(profile.getTask().getResource().getKey()).\n+                forEach(account -> propByLinkedAccount.add(\n+                ResourceOperation.CREATE,\n+                Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n+\n         PropagationReporter reporter = taskExecutor.execute(propagationManager.getUserCreateTasks(\n                 before.getKey(),\n                 null,\n                 enabled,\n                 propByRes,\n-                new PropagationByResource<>(),\n+                propByLinkedAccount,\n                 before.getVirAttrs(),\n                 noPropResources),\n                 false);\n         reportPropagation(result, reporter);\n     }\n \n     @Override\n-    protected String getName(final Any<?> any) {\n-        return User.class.cast(any).getUsername();\n+    protected void update(\n+            final Any<?> any,\n+            final Boolean enable,\n+            final ConnectorObject beforeObj,\n+            final ProvisioningReport result) {\n+\n+        List<String> ownedResources = getAnyUtils().getAllResources(any).stream().\n+                map(Entity::getKey).collect(Collectors.toList());\n+\n+        List<String> noPropResources = new ArrayList<>(ownedResources);\n+        noPropResources.remove(profile.getTask().getResource().getKey());\n+\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n+        propByRes.add(ResourceOperation.UPDATE, profile.getTask().getResource().getKey());\n+        propByRes.addOldConnObjectKey(profile.getTask().getResource().getKey(), beforeObj.getUid().getUidValue());\n+\n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+        ((User) any).getLinkedAccounts(profile.getTask().getResource().getKey()).\n+                forEach(account -> propByLinkedAccount.add(\n+                ResourceOperation.UPDATE,\n+                Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n+\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n+                any.getType().getKind(),\n+                any.getKey(),\n+                true,\n+                enable,\n+                propByRes,\n+                propByLinkedAccount,\n+                null,\n+                noPropResources);\n+        if (!taskInfos.isEmpty()) {\n+            taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n+            PropagationReporter reporter = new DefaultPropagationReporter();\n+            taskExecutor.execute(taskInfos.get(0), reporter);\n+            reportPropagation(result, reporter);\n+        }\n     }\n \n     @Override\n-    protected AnyTO getAnyTO(final String key) {\n-        return userDataBinder.getUserTO(key);\n+    protected void deprovision(final Any<?> any, final ConnectorObject beforeObj, final ProvisioningReport result) {\n+        AnyTO before = getAnyTO(any.getKey());\n+\n+        List<String> noPropResources = new ArrayList<>(before.getResources());\n+        noPropResources.remove(profile.getTask().getResource().getKey());\n+\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n+        propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n+        propByRes.addOldConnObjectKey(profile.getTask().getResource().getKey(), beforeObj.getUid().getUidValue());\n+\n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+        ((User) any).getLinkedAccounts(profile.getTask().getResource().getKey()).\n+                forEach(account -> propByLinkedAccount.add(\n+                ResourceOperation.DELETE,\n+                Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n+\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks(\n+                any.getType().getKind(),\n+                any.getKey(),\n+                propByRes,\n+                propByLinkedAccount,\n+                noPropResources);\n+        if (!taskInfos.isEmpty()) {\n+            taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n+            PropagationReporter reporter = new DefaultPropagationReporter();\n+            taskExecutor.execute(taskInfos.get(0), reporter);\n+            reportPropagation(result, reporter);\n+        }\n     }\n \n     @Override"},{"sha":"764a1c8300ffe5b896993dacbba04df353811c51","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushUtils.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -26,13 +26,15 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.SearchResult;\n import org.identityconnectors.framework.spi.SearchResultsHandler;\n import org.slf4j.Logger;\n@@ -136,4 +138,29 @@ public List<ConnectorObject> findByConnObjectKey(\n \n         return obj == null ? List.of() : List.of(obj);\n     }\n+\n+    public ConnectorObject match(\n+            final Connector connector,\n+            final LinkedAccount account,\n+            final Provision provision) {\n+\n+        Optional<? extends MappingItem> connObjectKey = MappingUtils.getConnObjectKeyItem(provision);\n+        String connObjectKeyName = connObjectKey.isPresent()\n+                ? connObjectKey.get().getExtAttrName()\n+                : Name.NAME;\n+\n+        ConnectorObject obj = null;\n+        try {\n+            obj = connector.getObject(\n+                    provision.getObjectClass(),\n+                    AttributeBuilder.build(connObjectKeyName, account.getConnObjectKeyValue()),\n+                    provision.isIgnoreCaseMatch(),\n+                    MappingUtils.buildOperationOptions(provision.getMapping().getItems().iterator()));\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n+        }\n+\n+        return obj;\n+    }\n }"},{"sha":"1acb999731590a95ab446cb0708c4d5788ec8109","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -75,7 +75,7 @@ protected UserWorkflowResult<Pair<String, Boolean>> doCreate(\n         PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n         user.getLinkedAccounts().forEach(account -> propByLinkedAccount.add(\n                 ResourceOperation.CREATE,\n-                Pair.of(account.getResource().getKey(), account.getConnObjectName())));\n+                Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n \n         return new UserWorkflowResult<>(\n                 Pair.of(user.getKey(), propagateEnable),"},{"sha":"000611f8cdd8fa97245c855e00b572ef5dbfd02d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateEndpoint.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -91,7 +91,7 @@ public Producer createProducer() throws Exception {\n                     producer = new DeleteProducer(this, anyTypeKind, userDAO, groupDataBinder);\n                     break;\n                 case provision:\n-                    producer = new ProvisionProducer(this, anyTypeKind);\n+                    producer = new ProvisionProducer(this, anyTypeKind, userDAO);\n                     break;\n                 case deprovision:\n                     producer = new DeprovisionProducer(this, anyTypeKind, userDAO, groupDAO, anyObjectDAO);"},{"sha":"e765f71f765d35ccecaa7a3065e61e3a813c03b1","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -67,7 +67,7 @@ public void process(final Exchange exchange) throws Exception {\n                     PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n                     userDAO.findLinkedAccounts(key).forEach(account -> propByLinkedAccount.add(\n                             ResourceOperation.DELETE,\n-                            Pair.of(account.getResource().getKey(), account.getConnObjectName())));\n+                            Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n \n                     // Note here that we can only notify about \"delete\", not any other\n                     // task defined in workflow process definition: this because this\n@@ -93,20 +93,23 @@ public void process(final Exchange exchange) throws Exception {\n                                     AnyTypeKind.USER,\n                                     anyKey,\n                                     anyPropByRes,\n+                                    null,\n                                     excludedResources)));\n                     groupDataBinder.findAnyObjectsWithTransitiveResources(key).\n                             forEach((anyKey, anyPropByRes) -> {\n                                 taskInfos.addAll(getPropagationManager().getDeleteTasks(\n                                         AnyTypeKind.ANY_OBJECT,\n                                         anyKey,\n                                         anyPropByRes,\n+                                        null,\n                                         excludedResources));\n                             });\n                     // Generate propagation tasks for deleting this group from resources\n                     taskInfos.addAll(getPropagationManager().getDeleteTasks(\n                             AnyTypeKind.GROUP,\n                             key,\n                             null,\n+                            null,\n                             null));\n                     reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n                     exchange.setProperty(\"statuses\", reporter.getStatuses());\n@@ -117,6 +120,7 @@ public void process(final Exchange exchange) throws Exception {\n                             AnyTypeKind.ANY_OBJECT,\n                             key,\n                             null,\n+                            null,\n                             excludedResources);\n                     reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n                     exchange.setProperty(\"statuses\", reporter.getStatuses());"},{"sha":"8560220979e581335f77a091314200037c8d34ca","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -22,6 +22,7 @@\n import java.util.stream.Collectors;\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -66,10 +67,19 @@ public void process(final Exchange exchange) throws Exception {\n             switch (getAnyTypeKind()) {\n                 case USER:\n                     propByRes.set(ResourceOperation.DELETE, resources);\n+\n+                    PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+                    userDAO.findLinkedAccounts(key).stream().\n+                            filter(account -> resources.contains(account.getResource().getKey())).\n+                            forEach(account -> propByLinkedAccount.add(\n+                            ResourceOperation.DELETE,\n+                            Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n+\n                     taskInfos = getPropagationManager().getDeleteTasks(\n                             AnyTypeKind.USER,\n                             key,\n                             propByRes,\n+                            propByLinkedAccount,\n                             userDAO.findAllResourceKeys(key).stream().\n                                     filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n                     propagationReporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n@@ -82,6 +92,7 @@ public void process(final Exchange exchange) throws Exception {\n                             AnyTypeKind.GROUP,\n                             key,\n                             propByRes,\n+                            null,\n                             groupDAO.findAllResourceKeys(key).stream().\n                                     filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n                     propagationReporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n@@ -94,6 +105,7 @@ public void process(final Exchange exchange) throws Exception {\n                             AnyTypeKind.ANY_OBJECT,\n                             key,\n                             propByRes,\n+                            null,\n                             anyObjectDAO.findAllResourceKeys(key).stream().\n                                     filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n                     propagationReporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);"},{"sha":"f669e2eb002c0ae8ea512dfc9ac913183838e1aa","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -29,15 +29,19 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n public class ProvisionProducer extends AbstractProducer {\n \n-    public ProvisionProducer(final Endpoint endpoint, final AnyTypeKind anyType) {\n+    private final UserDAO userDAO;\n+\n+    public ProvisionProducer(final Endpoint endpoint, final AnyTypeKind anyType, final UserDAO userDAO) {\n         super(endpoint, anyType);\n+        this.userDAO = userDAO;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -76,6 +80,13 @@ public void process(final Exchange exchange) throws Exception {\n             PropagationByResource<String> propByRes = new PropagationByResource<>();\n             propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n+            PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+            userDAO.findLinkedAccounts(key).stream().\n+                    filter(account -> resources.contains(account.getResource().getKey())).\n+                    forEach(account -> propByLinkedAccount.add(\n+                    ResourceOperation.UPDATE,\n+                    Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n+\n             AnyTypeKind anyTypeKind = AnyTypeKind.GROUP;\n             if (getAnyTypeKind() != null) {\n                 anyTypeKind = getAnyTypeKind();\n@@ -87,6 +98,7 @@ public void process(final Exchange exchange) throws Exception {\n                     false,\n                     null,\n                     propByRes,\n+                    propByLinkedAccount,\n                     null,\n                     null);\n             PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);"},{"sha":"076def49e9dedb0f10e913860e6a0a90fefa254d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -91,11 +91,21 @@ public void process(final Exchange exchange) throws Exception {\n \n             PropagationByResource<String> propByRes = new PropagationByResource<>();\n             propByRes.addAll(ResourceOperation.UPDATE, statusR.getResources());\n-            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(AnyTypeKind.USER,\n+\n+            PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+            userDAO.findLinkedAccounts(statusR.getKey()).stream().\n+                    filter(account -> statusR.getResources().contains(account.getResource().getKey())).\n+                    forEach(account -> propByLinkedAccount.add(\n+                    ResourceOperation.UPDATE,\n+                    Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n+\n+            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(\n+                    AnyTypeKind.USER,\n                     statusR.getKey(),\n                     false,\n                     statusR.getType() != StatusRType.SUSPEND,\n                     propByRes,\n+                    propByLinkedAccount,\n                     null,\n                     null);\n             PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);"},{"sha":"112bba0dd4a3982945d03a692168adb66f3519b8","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -70,6 +70,7 @@ public void process(final Exchange exchange) throws Exception {\n                         false,\n                         null,\n                         updated.getPropByRes(),\n+                        null,\n                         ((AnyUR) actual).getVirAttrs(),\n                         excludedResources);\n                 PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);"},{"sha":"75d8b719631eb043415f2bf18e1861774cff40ac","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -146,7 +146,7 @@ protected UserWorkflowResult<Pair<String, Boolean>> doCreate(\n         PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n         user.getLinkedAccounts().forEach(account -> propByLinkedAccount.add(\n                 ResourceOperation.CREATE,\n-                Pair.of(account.getResource().getKey(), account.getConnObjectName())));\n+                Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n \n         FlowableRuntimeUtils.saveForFormSubmit(\n                 engine,\n@@ -397,7 +397,7 @@ protected void doDelete(final User user) {\n         PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n         user.getLinkedAccounts().forEach(account -> propByLinkedAccount.add(\n                 ResourceOperation.DELETE,\n-                Pair.of(account.getResource().getKey(), account.getConnObjectName())));\n+                Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n \n         if (engine.getRuntimeService().createProcessInstanceQuery().\n                 processInstanceId(procInstID).active().list().isEmpty()) {"},{"sha":"700ff9d227be5353c029e25a6e80947ba084f90f","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/cxf/UserService.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FUserService.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -36,6 +36,7 @@\n public interface UserService {\n \n     @GET\n+    @Produces({ MediaType.APPLICATION_JSON })\n     List<User> list();\n \n     @GET"},{"sha":"7551796b740241f53493c3954294a3b02a96dfbd","filename":"fit/build-tools/src/main/resources/log4j2.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -33,8 +33,8 @@ under the License.\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n \n-    <root level=\"ERROR\">\n+    <root level=\"WARN\">\n       <appenderRef ref=\"main\"/>\n     </root>\n   </loggers>\n-</configuration>\n\\ No newline at end of file\n+</configuration>"},{"sha":"306902ebdca4b1581c37ce486f7a580f15c02f6c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -189,6 +189,8 @@ public abstract class AbstractITCase {\n \n     protected static final String RESOURCE_NAME_DBSCRIPTED = \"resource-db-scripted\";\n \n+    protected static final String RESOURCE_NAME_REST = \"rest-target-resource\";\n+\n     protected static final String RESOURCE_LDAP_ADMIN_DN = \"uid=admin,ou=system\";\n \n     protected static final String RESOURCE_LDAP_ADMIN_PWD = \"secret\";\n@@ -631,6 +633,29 @@ protected void updateLdapRemoteObject(\n         }\n     }\n \n+    protected void removeLdapRemoteObject(\n+            final String bindDn,\n+            final String bindPwd,\n+            final String objectDn) {\n+\n+        InitialDirContext ctx = null;\n+        try {\n+            ctx = getLdapResourceDirContext(bindDn, bindPwd);\n+\n+            ctx.destroySubcontext(objectDn);\n+        } catch (Exception e) {\n+            LOG.error(\"While removing {}\", objectDn, e);\n+        } finally {\n+            if (ctx != null) {\n+                try {\n+                    ctx.close();\n+                } catch (NamingException e) {\n+                    // ignore\n+                }\n+            }\n+        }\n+    }\n+\n     protected <T> T queryForObject(\n             final JdbcTemplate jdbcTemplate,\n             final int maxWaitSeconds,"},{"sha":"d37559ea5c49c44d1d6bae1ef4a5f89ce2da4fe9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LinkedAccountITCase.java","status":"modified","additions":131,"deletions":20,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -18,46 +18,55 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.apache.syncope.fit.AbstractITCase.getObject;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Optional;\n+import java.util.UUID;\n import javax.naming.NamingException;\n import javax.naming.directory.Attributes;\n import javax.naming.ldap.LdapContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.syncope.common.lib.request.LinkedAccountUR;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n public class LinkedAccountITCase extends AbstractITCase {\n \n     @Test\n-    public void createWithLinkedAccountThenRemove() throws NamingException {\n+    public void createWithLinkedAccountThenUpdateThenRemove() throws NamingException {\n         // 1. create user with linked account\n         UserCR userCR = UserITCase.getSample(\n                 \"linkedAccount\" + RandomStringUtils.randomNumeric(5) + \"@syncope.apache.org\");\n-        String connObjectName = \"uid=\" + userCR.getUsername() + \",ou=People,o=isp\";\n+        String connObjectKeyValue = \"uid=\" + userCR.getUsername() + \",ou=People,o=isp\";\n         String privilege = applicationService.read(\"mightyApp\").getPrivileges().get(0).getKey();\n \n-        LinkedAccountTO account = new LinkedAccountTO.Builder().\n-                connObjectName(connObjectName).\n-                resource(RESOURCE_NAME_LDAP).\n-                build();\n+        LinkedAccountTO account = new LinkedAccountTO.Builder(RESOURCE_NAME_LDAP, connObjectKeyValue).build();\n         account.getPlainAttrs().add(attr(\"surname\", \"LINKED_SURNAME\"));\n         account.getPrivileges().add(privilege);\n         userCR.getLinkedAccounts().add(account);\n@@ -71,12 +80,12 @@ public void createWithLinkedAccountThenRemove() throws NamingException {\n                 new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_LDAP).\n                         anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n         assertEquals(1, tasks.getTotalCount());\n-        assertEquals(connObjectName, tasks.getResult().get(0).getConnObjectKey());\n+        assertEquals(connObjectKeyValue, tasks.getResult().get(0).getConnObjectKey());\n         assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n         assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n \n         LdapContext ldapObj = (LdapContext) getLdapRemoteObject(\n-                RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectName);\n+                RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectKeyValue);\n         assertNotNull(ldapObj);\n \n         Attributes ldapAttrs = ldapObj.getAttributes(\"\");\n@@ -88,34 +97,54 @@ public void createWithLinkedAccountThenRemove() throws NamingException {\n         // 3. remove linked account from user\n         UserUR userUR = new UserUR();\n         userUR.setKey(user.getKey());\n+\n+        account.getPlainAttrs().clear();\n+        account.getPlainAttrs().add(attr(\"email\", \"UPDATED_EMAIL@syncope.apache.org\"));\n+        account.getPlainAttrs().add(attr(\"surname\", \"UPDATED_SURNAME\"));\n+        userUR.getLinkedAccounts().add(new LinkedAccountUR.Builder().linkedAccountTO(account).build());\n+\n+        user = updateUser(userUR).getEntity();\n+        assertEquals(1, user.getLinkedAccounts().size());\n+\n+        // 4 verify that account was updated on resource\n+        ldapObj = (LdapContext) getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectKeyValue);\n+        assertNotNull(ldapObj);\n+\n+        ldapAttrs = ldapObj.getAttributes(\"\");\n+        assertEquals(\"UPDATED_EMAIL@syncope.apache.org\", ldapAttrs.get(\"mail\").getAll().next().toString());\n+        assertEquals(\"UPDATED_SURNAME\", ldapAttrs.get(\"sn\").getAll().next().toString());\n+\n+        // 5. remove linked account from user\n+        userUR = new UserUR();\n+        userUR.setKey(user.getKey());\n         userUR.getLinkedAccounts().add(new LinkedAccountUR.Builder().\n                 operation(PatchOperation.DELETE).\n                 linkedAccountTO(user.getLinkedAccounts().get(0)).build());\n \n         user = updateUser(userUR).getEntity();\n         assertTrue(user.getLinkedAccounts().isEmpty());\n \n-        // 4. verify that propagation task was generated and that account is not any more on resource\n+        // 6. verify that propagation task was generated and that account is not any more on resource\n         tasks = taskService.search(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_LDAP).\n                         anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n-        assertEquals(2, tasks.getTotalCount());\n+        assertEquals(3, tasks.getTotalCount());\n \n         Optional<PropagationTaskTO> deletTask =\n                 tasks.getResult().stream().filter(task -> task.getOperation() == ResourceOperation.DELETE).findFirst();\n         assertTrue(deletTask.isPresent());\n-        assertEquals(connObjectName, deletTask.get().getConnObjectKey());\n+        assertEquals(connObjectKeyValue, deletTask.get().getConnObjectKey());\n         assertEquals(ExecStatus.SUCCESS.name(), deletTask.get().getLatestExecStatus());\n \n-        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectName));\n+        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectKeyValue));\n     }\n \n     @Test\n     public void createWithoutLinkedAccountThenAdd() throws NamingException {\n         // 1. create user without linked account\n         UserCR userCR = UserITCase.getSample(\n                 \"linkedAccount\" + RandomStringUtils.randomNumeric(5) + \"@syncope.apache.org\");\n-        String connObjectName = \"uid=\" + userCR.getUsername() + \",ou=People,o=isp\";\n+        String connObjectKeyValue = \"uid=\" + userCR.getUsername() + \",ou=People,o=isp\";\n \n         UserTO user = createUser(userCR).getEntity();\n         assertNotNull(user.getKey());\n@@ -126,16 +155,13 @@ public void createWithoutLinkedAccountThenAdd() throws NamingException {\n                         anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n         assertEquals(0, tasks.getTotalCount());\n \n-        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectName));\n+        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectKeyValue));\n \n         // 2. add linked account to user\n         UserUR userUR = new UserUR();\n         userUR.setKey(user.getKey());\n \n-        LinkedAccountTO account = new LinkedAccountTO.Builder().\n-                connObjectName(connObjectName).\n-                resource(RESOURCE_NAME_LDAP).\n-                build();\n+        LinkedAccountTO account = new LinkedAccountTO.Builder(RESOURCE_NAME_LDAP, connObjectKeyValue).build();\n         account.getPlainAttrs().add(attr(\"surname\", \"LINKED_SURNAME\"));\n         account.setPassword(\"Password123\");\n         userUR.getLinkedAccounts().add(new LinkedAccountUR.Builder().linkedAccountTO(account).build());\n@@ -148,12 +174,12 @@ public void createWithoutLinkedAccountThenAdd() throws NamingException {\n                 new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_LDAP).\n                         anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n         assertEquals(1, tasks.getTotalCount());\n-        assertEquals(connObjectName, tasks.getResult().get(0).getConnObjectKey());\n+        assertEquals(connObjectKeyValue, tasks.getResult().get(0).getConnObjectKey());\n         assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n         assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n \n         LdapContext ldapObj = (LdapContext) getLdapRemoteObject(\n-                RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectName);\n+                RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectKeyValue);\n         assertNotNull(ldapObj);\n \n         Attributes ldapAttrs = ldapObj.getAttributes(\"\");\n@@ -162,4 +188,89 @@ public void createWithoutLinkedAccountThenAdd() throws NamingException {\n                 ldapAttrs.get(\"mail\").getAll().next().toString());\n         assertEquals(\"LINKED_SURNAME\", ldapAttrs.get(\"sn\").getAll().next().toString());\n     }\n+\n+    @Test\n+    public void push() {\n+        // 0a. read configured cipher algorithm in order to be able to restore it at the end of test\n+        String origpwdCipherAlgo = confParamOps.get(SyncopeConstants.MASTER_DOMAIN,\n+                \"password.cipher.algorithm\", null, String.class);\n+\n+        // 0b. set AES password cipher algorithm\n+        confParamOps.set(SyncopeConstants.MASTER_DOMAIN, \"password.cipher.algorithm\", \"AES\");\n+\n+        try {\n+            // 1. create user with linked account\n+            UserCR userCR = UserITCase.getSample(\n+                    \"linkedAccount\" + RandomStringUtils.randomNumeric(5) + \"@syncope.apache.org\");\n+            String connObjectKeyValue = UUID.randomUUID().toString();\n+\n+            LinkedAccountTO account = new LinkedAccountTO.Builder(RESOURCE_NAME_REST, connObjectKeyValue).build();\n+            userCR.getLinkedAccounts().add(account);\n+\n+            UserTO user = createUser(userCR).getEntity();\n+            String userKey = user.getKey();\n+            assertNotNull(userKey);\n+            assertNotEquals(userKey, connObjectKeyValue);\n+\n+            // 2. verify that account is found on resource\n+            PagedResult<PropagationTaskTO> tasks = taskService.search(\n+                    new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_REST).\n+                            anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n+            assertEquals(1, tasks.getTotalCount());\n+            assertEquals(connObjectKeyValue, tasks.getResult().get(0).getConnObjectKey());\n+            assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n+            assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n+\n+            WebClient webClient = WebClient.create(BUILD_TOOLS_ADDRESS + \"/rest/users/\" + connObjectKeyValue).\n+                    accept(MediaType.APPLICATION_JSON_TYPE);\n+            Response response = webClient.get();\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+            // 3. remove account from resource\n+            response = webClient.delete();\n+            assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+\n+            response = webClient.get();\n+            assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());\n+\n+            // 4. create PushTask for the user above\n+            PushTaskTO sendUser = new PushTaskTO();\n+            sendUser.setName(\"Send User \" + user.getUsername());\n+            sendUser.setResource(RESOURCE_NAME_REST);\n+            sendUser.setUnmatchingRule(UnmatchingRule.PROVISION);\n+            sendUser.setMatchingRule(MatchingRule.UPDATE);\n+            sendUser.setSourceRealm(SyncopeConstants.ROOT_REALM);\n+            sendUser.getFilters().put(AnyTypeKind.USER.name(), \"username==\" + user.getUsername());\n+            sendUser.setPerformCreate(true);\n+            sendUser.setPerformUpdate(true);\n+\n+            response = taskService.create(TaskType.PUSH, sendUser);\n+            sendUser = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+            assertNotNull(sendUser);\n+\n+            // 5. execute PushTask\n+            AbstractTaskITCase.execProvisioningTask(taskService, TaskType.PUSH, sendUser.getKey(), 50, false);\n+\n+            TaskTO task = taskService.read(TaskType.PUSH, sendUser.getKey(), true);\n+            assertEquals(1, task.getExecutions().size());\n+            assertEquals(ExecStatus.SUCCESS.name(), task.getExecutions().get(0).getStatus());\n+\n+            tasks = taskService.search(\n+                    new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_REST).\n+                            anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n+            assertEquals(3, tasks.getTotalCount());\n+\n+            // 6. verify that both user and account are now found on resource\n+            response = webClient.get();\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+            webClient = WebClient.create(BUILD_TOOLS_ADDRESS + \"/rest/users/\" + userKey).\n+                    accept(MediaType.APPLICATION_JSON_TYPE);\n+            response = webClient.get();\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        } finally {\n+            // restore initial cipher algorithm\n+            confParamOps.set(SyncopeConstants.MASTER_DOMAIN, \"password.cipher.algorithm\", origpwdCipherAlgo);\n+        }\n+    }\n }"},{"sha":"5c1f83e3491a38aaa23cd07e259f8fad6a218113","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -102,8 +102,8 @@ public void createPushTask() {\n                 SyncopeClient.getGroupSearchConditionBuilder().isNotNull(\"cool\").query());\n         task.setMatchingRule(MatchingRule.LINK);\n \n-        final Response response = taskService.create(TaskType.PUSH, task);\n-        final PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+        Response response = taskService.create(TaskType.PUSH, task);\n+        PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n         assertNotNull(actual);\n \n         task = taskService.read(TaskType.PUSH, actual.getKey(), true);"},{"sha":"95a44dd2ab888c2c9077f8d53b91cbb188ff1001","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -1033,7 +1033,8 @@ public void batch() throws IOException {\n         BatchRequest batchRequest = adminClient.batch();\n \n         UserService batchUserService = batchRequest.getService(UserService.class);\n-        users.forEach(user -> batchUserService.status(new StatusR.Builder().key(user).type(StatusRType.SUSPEND).onSyncope(true).\n+        users.forEach(user -> batchUserService.status(new StatusR.Builder().key(user).type(StatusRType.SUSPEND).\n+                onSyncope(true).\n                 build()));\n         List<BatchResponseItem> batchResponseItems = parseBatchResponse(batchRequest.commit().getResponse());\n         assertEquals(10, batchResponseItems.stream().\n@@ -1043,7 +1044,8 @@ public void batch() throws IOException {\n         assertEquals(\"suspended\", userService.read(users.get(3)).getStatus());\n \n         UserService batchUserService2 = batchRequest.getService(UserService.class);\n-        users.forEach(user -> batchUserService2.status(new StatusR.Builder().key(user).type(StatusRType.REACTIVATE).onSyncope(true).\n+        users.forEach(user -> batchUserService2.status(new StatusR.Builder().key(user).type(StatusRType.REACTIVATE).\n+                onSyncope(true).\n                 build()));\n         batchResponseItems = parseBatchResponse(batchRequest.commit().getResponse());\n         assertEquals(10, batchResponseItems.stream().\n@@ -1299,21 +1301,21 @@ public void deprovisionUnlinked() throws IOException {\n     public void restResource() {\n         UserCR userCR = getUniqueSample(\"rest@syncope.apache.org\");\n         userCR.getResources().clear();\n-        userCR.getResources().add(\"rest-target-resource\");\n+        userCR.getResources().add(RESOURCE_NAME_REST);\n \n         // 1. create\n         ProvisioningResult<UserTO> result = userService.create(userCR).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         });\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        assertEquals(\"rest-target-resource\", result.getPropagationStatuses().get(0).getResource());\n+        assertEquals(RESOURCE_NAME_REST, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(\"surname\", result.getEntity().getPlainAttr(\"surname\").get().getValues().get(0));\n \n         // verify user exists on the backend REST service\n         WebClient webClient = WebClient.create(BUILD_TOOLS_ADDRESS + \"/rest/users/\" + result.getEntity().getKey());\n         Response response = webClient.get();\n-        assertEquals(200, response.getStatus());\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertNotNull(response.getEntity());\n \n         // 2. update\n@@ -1325,12 +1327,12 @@ public void restResource() {\n         });\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        assertEquals(\"rest-target-resource\", result.getPropagationStatuses().get(0).getResource());\n+        assertEquals(RESOURCE_NAME_REST, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(\"surname2\", result.getEntity().getPlainAttr(\"surname\").get().getValues().get(0));\n \n         // verify user still exists on the backend REST service\n         response = webClient.get();\n-        assertEquals(200, response.getStatus());\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertNotNull(response.getEntity());\n \n         // 3. delete\n@@ -1339,10 +1341,10 @@ public void restResource() {\n         });\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        assertEquals(\"rest-target-resource\", result.getPropagationStatuses().get(0).getResource());\n+        assertEquals(RESOURCE_NAME_REST, result.getPropagationStatuses().get(0).getResource());\n \n         // verify user was removed by the backend REST service\n-        assertEquals(404, webClient.get().getStatus());\n+        assertEquals(Response.Status.NOT_FOUND.getStatusCode(), webClient.get().getStatus());\n     }\n \n     @Test"},{"sha":"98bb496e5ce533edd3e6d41baf384c5329a20985","filename":"fit/core-reference/src/test/resources/rest/CreateScript.groovy","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FCreateScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FCreateScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FCreateScript.groovy?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -20,6 +20,7 @@ import com.fasterxml.jackson.databind.ObjectMapper\n import com.fasterxml.jackson.databind.node.ObjectNode\n import org.apache.cxf.jaxrs.client.WebClient\n import org.identityconnectors.framework.common.objects.Uid\n+import javax.ws.rs.core.Response\n \n // Parameters:\n // The connector sends us the following:\n@@ -51,10 +52,15 @@ case \"__ACCOUNT__\":\n   node.set(\"email\", node.textNode(attributes.get(\"email\").get(0)));\n   \n   String payload = mapper.writeValueAsString(node);\n-  \n+\n   webClient.path(\"/users\");\n-  webClient.post(payload);\n+\n+  log.ok(\"Sending POST to {0} with payload {1}\", webClient.getCurrentURI().toASCIIString(), payload);\n+\n+  Response response = webClient.post(payload);\n   \n+  log.ok(\"Create response: {0} {1}\", response.getStatus(), response.getHeaders());\n+\n   key = node.get(\"key\").textValue();\n   break\n "},{"sha":"f78355ecf9450bd90c0d4189fa5e6df31bad28a6","filename":"fit/core-reference/src/test/resources/rest/DeleteScript.groovy","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FDeleteScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FDeleteScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FDeleteScript.groovy?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -17,6 +17,7 @@\n  * under the License.\n  */\n import org.apache.cxf.jaxrs.client.WebClient\n+import javax.ws.rs.core.Response\n \n // Parameters:\n // The connector sends the following:\n@@ -36,7 +37,12 @@ assert uid != null\n switch ( objectClass ) {\n case \"__ACCOUNT__\":\n   webClient.path(\"/users/\" + uid);\n-  webClient.delete();\n+\n+  log.ok(\"Sending DELETE to {0}\", webClient.getCurrentURI().toASCIIString());\n+\n+  Response response =  webClient.delete();\n+\n+  log.ok(\"Delete response: {0} {1}\", response.getStatus(), response.getHeaders());\n   break\n \n default:"},{"sha":"a6f5abeac6fb959f94dc6043abe4d48f9bfcf920","filename":"fit/core-reference/src/test/resources/rest/SearchScript.groovy","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FSearchScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FSearchScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FSearchScript.groovy?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -22,7 +22,7 @@ import com.fasterxml.jackson.databind.node.ObjectNode\n import javax.ws.rs.core.Response\n import org.apache.cxf.jaxrs.client.WebClient\n import org.identityconnectors.common.security.GuardedString\n-import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.OperationOptions\n \n // Parameters:\n // The connector sends the following:\n@@ -92,9 +92,18 @@ def result = []\n \n switch (objectClass) {\n case \"__ACCOUNT__\":\n-  if (query == null || (!query.get(\"left\").equals(\"__UID__\") && !query.get(\"conditionType\").equals(\"EQUALS\"))) {\n+  if (query == null \n+    || (!query.get(\"left\").equals(\"__UID__\") && !query.get(\"left\").equals(\"key\")\n+      && !query.get(\"conditionType\").equals(\"EQUALS\"))) {\n+\n     webClient.path(\"/users\");\n+\n+    log.ok(\"Sending GET to {0}\", webClient.getCurrentURI().toASCIIString());\n+\n     Response response = webClient.get();    \n+\n+    log.ok(\"LIST response: {0} {1}\", response.getStatus(), response.getHeaders());\n+\n     ArrayNode nodes = mapper.readTree(response.getEntity());\n     \n     // beware: this is not enforcing any server-side pagination feature\n@@ -103,7 +112,13 @@ case \"__ACCOUNT__\":\n     }\n   } else {\n     webClient.path(\"/users/\" + query.get(\"right\"));\n+\n+    log.ok(\"Sending GET to {0}\", webClient.getCurrentURI().toASCIIString());\n+\n     Response response = webClient.get();\n+\n+    log.ok(\"READ response: {0} {1}\", response.getStatus(), response.getHeaders());\n+\n     if (response.getStatus() == 200) {\n       ObjectNode node = mapper.readTree(response.getEntity());\n       result.add(buildConnectorObject(node));"},{"sha":"95cae7102867c06799e6223c71f6ba71d670caa4","filename":"fit/core-reference/src/test/resources/rest/UpdateScript.groovy","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FUpdateScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3d45b47491ef648ae92d7d35c51a051bce8775f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FUpdateScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FUpdateScript.groovy?ref=e3d45b47491ef648ae92d7d35c51a051bce8775f","patch":"@@ -19,6 +19,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper\n import com.fasterxml.jackson.databind.node.ObjectNode\n import org.apache.cxf.jaxrs.client.WebClient\n+import javax.ws.rs.core.Response\n \n // Parameters:\n // The connector sends us the following:\n@@ -81,8 +82,13 @@ case \"UPDATE\":\n \n     // this if update works with PUT\n     webClient.path(\"users\").path(uid);\n-    webClient.put(payload);\n     \n+    log.ok(\"Sending PUT to {0} with payload {1}\", webClient.getCurrentURI().toASCIIString(), payload);\n+    \n+    Response response = webClient.put(payload);\n+    \n+    log.ok(\"Update response: {0} {1}\", response.getStatus(), response.getHeaders());\n+  \n     // this instead if update works with PATCH\n     //webClient.path(\"users\").path(uid);\n     //WebClient.getConfig(webClient).getRequestContext().put(\"use.async.http.conduit\", true);"}]}