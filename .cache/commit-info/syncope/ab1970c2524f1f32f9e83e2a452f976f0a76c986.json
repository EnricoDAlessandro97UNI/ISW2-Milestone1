{"sha":"ab1970c2524f1f32f9e83e2a452f976f0a76c986","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFiMTk3MGMyNTI0ZjFmMzJmOWU4M2UyYTQ1MmY5NzZmMGE3NmM5ODY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-02-15T16:27:19Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-02-15T16:27:19Z"},"message":"Removing no more used methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246793 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7648266d2e8a84a5861666c8e7708e7569cfe17f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7648266d2e8a84a5861666c8e7708e7569cfe17f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ab1970c2524f1f32f9e83e2a452f976f0a76c986","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ab1970c2524f1f32f9e83e2a452f976f0a76c986","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ab1970c2524f1f32f9e83e2a452f976f0a76c986","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ab1970c2524f1f32f9e83e2a452f976f0a76c986/comments","author":null,"committer":null,"parents":[{"sha":"4d81a353c7b52b0cf233a66a40798cfe00bf183a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d81a353c7b52b0cf233a66a40798cfe00bf183a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4d81a353c7b52b0cf233a66a40798cfe00bf183a"}],"stats":{"total":84,"additions":8,"deletions":76},"files":[{"sha":"057d9f0e6aca50e134d111ead848c0e250bdc0c8","filename":"console/src/main/java/org/syncope/console/rest/UserRestClient.java","status":"modified","additions":8,"deletions":76,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab1970c2524f1f32f9e83e2a452f976f0a76c986/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab1970c2524f1f32f9e83e2a452f976f0a76c986/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=ab1970c2524f1f32f9e83e2a452f976f0a76c986","patch":"@@ -17,14 +17,11 @@\n import java.util.Arrays;\n import java.util.List;\n import org.springframework.stereotype.Component;\n-import org.springframework.web.client.HttpServerErrorException;\n import org.syncope.client.mod.UserMod;\n-import org.syncope.client.to.ConfigurationTO;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.PaginatedResult;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.console.commons.Constants;\n \n /**\n  * Console client for invoking rest users services.\n@@ -94,72 +91,17 @@ public UserTO getUser(String id) {\n         return userTO;\n     }\n \n-    /**\n-     * Create a new configuration.\n-     * @param configurationTO\n-     * @return true if the operation ends succesfully, false otherwise\n-     */\n-    public boolean createConfigurationAttributes(\n-            ConfigurationTO configurationTO) {\n-\n-        ConfigurationTO newConfigurationTO =\n-                restTemplate.postForObject(\n-                baseURL + \"configuration/create\",\n-                configurationTO, ConfigurationTO.class);\n-\n-        return configurationTO.equals(newConfigurationTO);\n-    }\n-\n-    /**\n-     * Update an existent configuration.\n-     * @param configurationTO\n-     * @return true if the operation ends succesfully, false otherwise\n-     */\n-    public boolean updateConfigurationAttributes(\n-            ConfigurationTO configurationTO) {\n-\n-        ConfigurationTO newConfigurationTO = restTemplate.postForObject(\n-                baseURL + \"configuration/update\",\n-                configurationTO, ConfigurationTO.class);\n-\n-        return configurationTO.equals(newConfigurationTO);\n-    }\n-\n-    /**\n-     * Load an existent configuration.\n-     * @return ConfigurationTO object if the configuration exists,\n-     * null otherwise\n-     */\n-    public ConfigurationTO readConfigurationDisplayAttributes() {\n-\n-        ConfigurationTO configurationTO;\n-        try {\n-            configurationTO = restTemplate.getForObject(\n-                    baseURL + \"configuration/read/{confKey}\",\n-                    ConfigurationTO.class,\n-                    Constants.PREF_USERS_ATTRIBUTES_VIEW);\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"While reading a conf key\", e);\n-            return null;\n-        }\n-\n-        return configurationTO;\n-    }\n-\n     /**\n      * Search an user by its schema values.\n      * @param userTO\n      * @return UserTOs\n      */\n     public List<UserTO> searchUsers(NodeCond nodeSearchCondition)\n-            throws HttpServerErrorException {\n-        List<UserTO> matchedUsers = null;\n+            throws SyncopeClientCompositeErrorException {\n \n-        matchedUsers = Arrays.asList(restTemplate.postForObject(\n+        return Arrays.asList(restTemplate.postForObject(\n                 baseURL + \"user/search\",\n                 nodeSearchCondition, UserTO[].class));\n-\n-        return matchedUsers;\n     }\n \n     /**\n@@ -169,40 +111,30 @@ public List<UserTO> searchUsers(NodeCond nodeSearchCondition)\n      */\n     public List<UserTO> paginatedSearchUsers(NodeCond nodeSearchCondition,\n             int page, int size)\n-            throws HttpServerErrorException {\n-        List<UserTO> matchedUsers = null;\n+            throws SyncopeClientCompositeErrorException {\n \n         final PaginatedResult paginatedResult =\n                 restTemplate.postForObject(\n                 baseURL + \"user/paginatedSearch/{page}/{size}\",\n                 nodeSearchCondition, PaginatedResult.class, page, size);\n \n-        matchedUsers = paginatedResult.getRecords();\n-\n-        return matchedUsers;\n+        return paginatedResult.getRecords();\n     }\n \n     public PaginatedResult paginatedSearchUser(NodeCond nodeSearchCondition,\n             int page, int size)\n-            throws HttpServerErrorException,\n-            SyncopeClientCompositeErrorException {\n+            throws SyncopeClientCompositeErrorException {\n \n-        PaginatedResult paginatedResult =\n-                restTemplate.postForObject(\n+        return restTemplate.postForObject(\n                 baseURL + \"user/paginatedSearch/{page}/{size}\",\n                 nodeSearchCondition, PaginatedResult.class, page, size);\n-\n-        return paginatedResult;\n     }\n \n     public PaginatedResult getPaginatedUser(int page, int size)\n-            throws HttpServerErrorException {\n+            throws SyncopeClientCompositeErrorException {\n \n-        PaginatedResult paginatedResult =\n-                restTemplate.getForObject(\n+        return restTemplate.getForObject(\n                 baseURL + \"user/paginatedList/{page}/{size}\",\n                 PaginatedResult.class, page, size);\n-\n-        return paginatedResult;\n     }\n }"}]}