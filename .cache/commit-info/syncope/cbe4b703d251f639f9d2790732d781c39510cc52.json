{"sha":"cbe4b703d251f639f9d2790732d781c39510cc52","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNiZTRiNzAzZDI1MWY2MzlmOWQyNzkwNzMyZDc4MWMzOTUxMGNjNTI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-01-10T17:05:12Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-01-10T18:06:01Z"},"message":"[SYNCOPE-882] Several fixes","tree":{"sha":"389166ed37d710fdc3ec15a6244aae967c8cf94f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/389166ed37d710fdc3ec15a6244aae967c8cf94f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cbe4b703d251f639f9d2790732d781c39510cc52","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cbe4b703d251f639f9d2790732d781c39510cc52","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cbe4b703d251f639f9d2790732d781c39510cc52","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cbe4b703d251f639f9d2790732d781c39510cc52/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2b71dab8f56bbf62ff4bdb5750de1bde0c6e9fab","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b71dab8f56bbf62ff4bdb5750de1bde0c6e9fab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2b71dab8f56bbf62ff4bdb5750de1bde0c6e9fab"}],"stats":{"total":276,"additions":96,"deletions":180},"files":[{"sha":"c99aedf15a093a76238425cf488db73480a2b769","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -24,7 +24,6 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.Queue;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.client.cli.view.Table;\n import org.apache.syncope.common.lib.log.LogStatementTO;\n@@ -42,7 +41,7 @@ public void fromListMemoryAppenders(final List<String> memoryAppenders) {\n         tableBuilder.build().print();\n     }\n \n-    public void fromGetLastLogStatements(final Queue<LogStatementTO> statements) throws JsonProcessingException {\n+    public void fromGetLastLogStatements(final List<LogStatementTO> statements) throws JsonProcessingException {\n         final Table.TableBuilder tableBuilder = new Table.TableBuilder(\"last statements\").header(\"statement\");\n         for (final LogStatementTO statement : statements) {\n             tableBuilder.rowValues(Collections.singletonList("},{"sha":"0f1f15cfadf1ce45dcb43653e3eb5f675d5e0680","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerSyncopeOperations.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Queue;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.cli.SyncopeServices;\n@@ -44,7 +43,7 @@ public String transform(final LogAppender input) {\n         }, new ArrayList<String>());\n     }\n \n-    public Queue<LogStatementTO> getLastLogStatements(final String appender) {\n+    public List<LogStatementTO> getLastLogStatements(final String appender) {\n         return loggerService.getLastLogStatements(appender);\n     }\n "},{"sha":"820c6f994a91dbabbecfa289731b435aec05f020","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java","status":"modified","additions":34,"deletions":134,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -20,38 +20,27 @@\n \n import static org.apache.wicket.Component.ENABLE;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.TimeUnit;\n import org.apache.commons.collections4.list.SetUniqueList;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.LogStatementPanel;\n import org.apache.syncope.client.console.rest.LoggerRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.common.lib.log.LogStatementTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.wicket.Application;\n-import org.apache.wicket.ThreadContext;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.event.IEvent;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.util.ListModel;\n-import org.apache.wicket.protocol.ws.WebSocketSettings;\n-import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n-import org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster;\n-import org.apache.wicket.protocol.ws.api.event.WebSocketPushPayload;\n-import org.apache.wicket.protocol.ws.api.message.ConnectedMessage;\n-import org.apache.wicket.protocol.ws.api.message.IWebSocketPushMessage;\n-import org.apache.wicket.protocol.ws.api.registry.IKey;\n+import org.apache.wicket.util.time.Duration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -65,14 +54,6 @@ public class LogViewer extends WebPage {\n \n     private final LoggerRestClient restClient = new LoggerRestClient();\n \n-    private final IModel<Long> lastTimeInMillis = Model.of(0L);\n-\n-    private final WebMarkupContainer stContainer;\n-\n-    private final IModel<List<LogStatementTO>> statementViewModel;\n-\n-    private final ListView<LogStatementTO> statementView;\n-\n     public LogViewer() {\n         final WebMarkupContainer viewer = new WebMarkupContainer(\"viewer\");\n         viewer.setOutputMarkupId(true);\n@@ -84,12 +65,13 @@ public LogViewer() {\n         appenders.setChoices(restClient.listMemoryAppenders());\n         viewer.add(appenders);\n \n-        stContainer = new WebMarkupContainer(\"stContainer\");\n+        final WebMarkupContainer stContainer = new WebMarkupContainer(\"stContainer\");\n         stContainer.setOutputMarkupId(true);\n         viewer.add(stContainer);\n \n-        statementViewModel = new ListModel<>(new ArrayList<LogStatementTO>());\n-        statementView = new ListView<LogStatementTO>(\"statements\", statementViewModel) {\n+        final Model<Long> lastTimeInMillis = Model.of(0L);\n+        final IModel<List<LogStatementTO>> statementViewModel = new ListModel<>(new ArrayList<LogStatementTO>());\n+        final ListView<LogStatementTO> statementView = new ListView<LogStatementTO>(\"statements\", statementViewModel) {\n \n             private static final long serialVersionUID = -9180479401817023838L;\n \n@@ -102,51 +84,21 @@ protected void populateItem(final ListItem<LogStatementTO> item) {\n         };\n         statementView.setOutputMarkupId(true);\n         stContainer.add(statementView);\n+        stContainer.add(new AjaxSelfUpdatingTimerBehavior(Duration.seconds(10)) {\n \n-        appenders.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                List<LogStatementTO> lastStatements = appenders.getModelObject() == null\n-                        ? new ArrayList<LogStatementTO>()\n-                        : restClient.getLastLogStatements(appenders.getModelObject(), 0);\n-                statementViewModel.setObject(lastStatements);\n-                target.add(stContainer);\n-\n-                lastTimeInMillis.setObject(0L);\n-            }\n-        });\n-\n-        add(new WebSocketBehavior() {\n-\n-            private static final long serialVersionUID = 3507933905864454312L;\n+            private static final long serialVersionUID = 7298597675929755960L;\n \n             @Override\n-            protected void onConnect(final ConnectedMessage message) {\n-                super.onConnect(message);\n-\n-                SyncopeConsoleSession.get().scheduleAtFixedRate(\n-                        new LogStatementUpdater(message, restClient, appenders, lastTimeInMillis),\n-                        0, 10, TimeUnit.SECONDS);\n-            }\n-\n-        });\n-    }\n-\n-    @Override\n-    public void onEvent(final IEvent<?> event) {\n-        if (event.getPayload() instanceof WebSocketPushPayload) {\n-            WebSocketPushPayload wsEvent = (WebSocketPushPayload) event.getPayload();\n-            if (wsEvent.getMessage() instanceof LogViewerMessage) {\n-                List<LogStatementTO> recentLogStatements =\n-                        ((LogViewerMessage) wsEvent.getMessage()).getRecentLogStatements();\n+            protected void onPostProcessTarget(final AjaxRequestTarget target) {\n+                // save scroll position\n+                target.prependJavaScript(\n+                        String.format(\"window.scrollTop = $('#%s').scrollTop();\", stContainer.getMarkupId()));\n \n+                List<LogStatementTO> recentLogStatements = appenders.getModelObject() == null\n+                        ? new ArrayList<LogStatementTO>()\n+                        : restClient.getLastLogStatements(appenders.getModelObject(), lastTimeInMillis.getObject());\n                 if (!recentLogStatements.isEmpty()) {\n-                    // save scroll position\n-                    wsEvent.getHandler().prependJavaScript(\n-                            String.format(\"window.scrollTop = $('#%s').scrollTop();\", stContainer.getMarkupId()));\n+                    lastTimeInMillis.setObject(recentLogStatements.get(recentLogStatements.size() - 1).getTimeMillis());\n \n                     int currentSize = statementView.getModelObject().size();\n                     int recentSize = recentLogStatements.size();\n@@ -156,88 +108,36 @@ public void onEvent(final IEvent<?> event) {\n                     if (currentSize <= MAX_STATEMENTS_PER_APPENDER - recentSize) {\n                         newModelObject.addAll(statementView.getModelObject());\n                     } else {\n-                        newModelObject.addAll(statementView.getModelObject().subList(recentSize, currentSize));\n+                        newModelObject.addAll(statementView.getModelObject().\n+                                subList(currentSize - (MAX_STATEMENTS_PER_APPENDER - recentSize), currentSize));\n                     }\n                     newModelObject.addAll(recentLogStatements);\n \n                     statementViewModel.setObject(newModelObject);\n-                    wsEvent.getHandler().add(LogViewer.this.stContainer);\n+                    target.add(stContainer);\n \n-                    // restore scroll position - might not work perfectly if items were removed from the top\n-                    wsEvent.getHandler().appendJavaScript(\n-                            String.format(\"$('#%s').scrollTop(window.scrollTop);\", stContainer.getMarkupId()));\n                 }\n-            }\n-        }\n-    }\n-\n-    private static final class LogStatementUpdater implements Runnable {\n-\n-        private final Application application;\n-\n-        private final SyncopeConsoleSession session;\n-\n-        private final IKey key;\n-\n-        private final LoggerRestClient restClient;\n-\n-        private final AjaxDropDownChoicePanel<String> appenders;\n-\n-        private final IModel<Long> lastTimeInMillis;\n \n-        LogStatementUpdater(\n-                final ConnectedMessage message,\n-                final LoggerRestClient restClient,\n-                final AjaxDropDownChoicePanel<String> appenders,\n-                final IModel<Long> lastTimeInMillis) {\n+                // restore scroll position - might not work perfectly if items were removed from the top\n+                target.appendJavaScript(\n+                        String.format(\"$('#%s').scrollTop(window.scrollTop);\", stContainer.getMarkupId()));\n+            }\n+        });\n \n-            this.application = message.getApplication();\n-            this.session = SyncopeConsoleSession.get();\n-            this.key = message.getKey();\n-            this.restClient = restClient;\n-            this.appenders = appenders;\n-            this.lastTimeInMillis = lastTimeInMillis;\n-        }\n+        appenders.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n-        @Override\n-        public void run() {\n-            try {\n-                ThreadContext.setApplication(application);\n-                ThreadContext.setSession(session);\n+            private static final long serialVersionUID = -1107858522700306810L;\n \n-                List<LogStatementTO> recentLogStatements = appenders.getModelObject() == null\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                List<LogStatementTO> lastStatements = appenders.getModelObject() == null\n                         ? new ArrayList<LogStatementTO>()\n-                        : restClient.getLastLogStatements(appenders.getModelObject(), lastTimeInMillis.getObject());\n-                if (!recentLogStatements.isEmpty()) {\n-                    lastTimeInMillis.setObject(recentLogStatements.get(recentLogStatements.size() - 1).getTimeMillis());\n-                }\n+                        : restClient.getLastLogStatements(appenders.getModelObject(), 0);\n+                statementViewModel.setObject(lastStatements);\n+                target.add(stContainer);\n \n-                WebSocketSettings settings = WebSocketSettings.Holder.get(application);\n-                WebSocketPushBroadcaster broadcaster = new WebSocketPushBroadcaster(settings.getConnectionRegistry());\n-                broadcaster.broadcast(\n-                        new ConnectedMessage(application, session.getId(), key),\n-                        new LogViewerMessage(recentLogStatements));\n-            } catch (Throwable t) {\n-                LOG.error(\"Unexpected error while checking for recent log statements\", t);\n-            } finally {\n-                ThreadContext.detach();\n+                lastTimeInMillis.setObject(0L);\n             }\n-        }\n-    }\n-\n-    private static class LogViewerMessage implements IWebSocketPushMessage, Serializable {\n-\n-        private static final long serialVersionUID = 7241149017008105769L;\n-\n-        private final List<LogStatementTO> recentLogStatements;\n-\n-        LogViewerMessage(final List<LogStatementTO> recentLogStatements) {\n-            this.recentLogStatements = recentLogStatements;\n-        }\n-\n-        public List<LogStatementTO> getRecentLogStatements() {\n-            return recentLogStatements;\n-        }\n-\n+        });\n     }\n }"},{"sha":"5dd4de5009cf1994fe3493e02c55db20a4de629e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConsoleLogPanel.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -20,7 +20,10 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import org.apache.commons.collections4.ComparatorUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n@@ -49,19 +52,27 @@ private static class ConsoleLoggerController implements Serializable {\n         private static final long serialVersionUID = -1550459341476431714L;\n \n         public List<LoggerTO> getLoggers() {\n-            final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+            LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n-            final List<LoggerTO> result = new ArrayList<>();\n+            List<LoggerTO> result = new ArrayList<>();\n             for (final LoggerConfig logger : ctx.getConfiguration().getLoggers().values()) {\n-                final String loggerName = LogManager.ROOT_LOGGER_NAME.equals(logger.getName())\n+                String loggerName = LogManager.ROOT_LOGGER_NAME.equals(logger.getName())\n                         ? SyncopeConstants.ROOT_LOGGER : logger.getName();\n                 if (logger.getLevel() != null) {\n-                    final LoggerTO loggerTO = new LoggerTO();\n+                    LoggerTO loggerTO = new LoggerTO();\n                     loggerTO.setKey(loggerName);\n                     loggerTO.setLevel(LoggerLevel.fromLevel(logger.getLevel()));\n                     result.add(loggerTO);\n                 }\n             }\n+            Collections.sort(result, ComparatorUtils.transformedComparator(\n+                    ComparatorUtils.<String>naturalComparator(), new Transformer<LoggerTO, String>() {\n+\n+                @Override\n+                public String transform(final LoggerTO input) {\n+                    return input.getKey();\n+                }\n+            }));\n \n             return result;\n         }"},{"sha":"67a14ca9ba4d64905da1c9dd8c3b7c5cf944e7eb","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/CoreLogPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.pages.LogViewer;\n+import org.apache.syncope.client.console.rest.LoggerRestClient;\n import org.apache.syncope.common.lib.log.LoggerTO;\n-import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n import org.apache.wicket.markup.html.link.PopupSettings;\n@@ -31,8 +29,10 @@ public class CoreLogPanel extends AbstractLogsPanel<LoggerTO> {\n \n     private static final long serialVersionUID = 3905038169553185171L;\n \n+    private final LoggerRestClient restClient = new LoggerRestClient();\n+\n     public CoreLogPanel(final String id, final PageReference pageReference) {\n-        super(id, pageReference, SyncopeConsoleSession.get().getService(LoggerService.class).list(LoggerType.LOG));\n+        super(id, pageReference, new LoggerRestClient().listLogs());\n \n         BookmarkablePageLink<Void> viewer = new BookmarkablePageLink<>(\"viewer\", LogViewer.class);\n         viewer.setPopupSettings(new PopupSettings().setHeight(600).setWidth(800));\n@@ -41,6 +41,6 @@ public CoreLogPanel(final String id, final PageReference pageReference) {\n \n     @Override\n     protected void update(final LoggerTO loggerTO) {\n-        SyncopeConsoleSession.get().getService(LoggerService.class).update(LoggerType.LOG, loggerTO);\n+        restClient.setLogLevel(loggerTO);\n     }\n }"},{"sha":"818a8d2ff6770fed85b8b734c4ff153d7eaac6e3","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":19,"deletions":15,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -26,10 +26,8 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.ComparatorUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.commons.collections4.TransformerUtils;\n import org.apache.syncope.common.lib.log.EventCategoryTO;\n import org.apache.syncope.common.lib.log.LogAppender;\n import org.apache.syncope.common.lib.log.LogStatementTO;\n@@ -56,18 +54,27 @@ public String transform(final LogAppender input) {\n     }\n \n     public List<LogStatementTO> getLastLogStatements(final String appender, final long lastStatementTime) {\n-        return CollectionUtils.collect(IterableUtils.filteredIterable(\n-                getService(LoggerService.class).getLastLogStatements(appender), new Predicate<LogStatementTO>() {\n-\n-            @Override\n-            public boolean evaluate(final LogStatementTO object) {\n-                return object.getTimeMillis() > lastStatementTime;\n+        List<LogStatementTO> result = new ArrayList<>();\n+        for (LogStatementTO statement : getService(LoggerService.class).getLastLogStatements(appender)) {\n+            if (statement.getTimeMillis() > lastStatementTime) {\n+                result.add(statement);\n             }\n-        }), TransformerUtils.<LogStatementTO>nopTransformer(), new ArrayList<LogStatementTO>());\n+        }\n+\n+        return result;\n     }\n \n     public List<LoggerTO> listLogs() {\n-        return getService(LoggerService.class).list(LoggerType.LOG);\n+        List<LoggerTO> logs = getService(LoggerService.class).list(LoggerType.LOG);\n+        Collections.sort(logs, ComparatorUtils.transformedComparator(\n+                ComparatorUtils.<String>naturalComparator(), new Transformer<LoggerTO, String>() {\n+\n+            @Override\n+            public String transform(final LoggerTO input) {\n+                return input.getKey();\n+            }\n+        }));\n+        return logs;\n     }\n \n     public List<AuditLoggerName> listAudits() {\n@@ -87,10 +94,7 @@ public Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n         return result;\n     }\n \n-    public void setLogLevel(final String key, final LoggerLevel level) {\n-        LoggerTO loggerTO = new LoggerTO();\n-        loggerTO.setKey(key);\n-        loggerTO.setLevel(level);\n+    public void setLogLevel(final LoggerTO loggerTO) {\n         getService(LoggerService.class).update(LoggerType.LOG, loggerTO);\n     }\n "},{"sha":"4b9aa83db671700f5461be7de4bf6d73cb6db8db","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n-import java.util.Queue;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -60,7 +59,7 @@ public interface LoggerService extends JAXRSService {\n     @GET\n     @Path(\"memoryAppenders/{memoryAppender}/lastLogStatements\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Queue<LogStatementTO> getLastLogStatements(@NotNull @PathParam(\"memoryAppender\") String memoryAppender);\n+    List<LogStatementTO> getLastLogStatements(@NotNull @PathParam(\"memoryAppender\") String memoryAppender);\n \n     /**\n      * Returns the list of all managed events in audit."},{"sha":"5315ea906f979d264a5ab12d9308f3bbfef3be57","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -23,12 +23,12 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Queue;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.collections4.TransformerUtils;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n@@ -124,13 +124,16 @@ public LogAppender transform(final String input) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    public Queue<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n+    public List<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n         MemoryAppender appender = loggerLoader.getMemoryAppenders().get(memoryAppender);\n         if (appender == null) {\n             throw new NotFoundException(\"Appender \" + memoryAppender);\n         }\n \n-        return appender.getStatements();\n+        return CollectionUtils.collect(\n+                appender.getStatements(),\n+                TransformerUtils.<LogStatementTO>nopTransformer(),\n+                new ArrayList<LogStatementTO>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \""},{"sha":"47fa990564be32d7fa31094c2966ae6360b8dbcd","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerAccessor.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -65,18 +65,17 @@ public void synchronizeLog4J(final LoggerContext ctx) {\n          * otherwise create a SyncopeLogger instance with given name and level.\n          */\n         for (LoggerConfig logConf : ctx.getConfiguration().getLoggers().values()) {\n-            if (!LogManager.ROOT_LOGGER_NAME.equals(logConf.getName()) && logConf.getLevel() != null) {\n-                String loggerName = logConf.getName();\n+            String loggerName = LogManager.ROOT_LOGGER_NAME.equals(logConf.getName())\n+                    ? SyncopeConstants.ROOT_LOGGER : logConf.getName();\n+            if (logConf.getLevel() != null) {\n                 if (syncopeLoggers.containsKey(loggerName)) {\n                     logConf.setLevel(syncopeLoggers.get(loggerName).getLevel().getLevel());\n                     syncopeLoggers.remove(loggerName);\n                 } else if (!loggerName.equals(LoggerType.AUDIT.getPrefix())) {\n                     Logger syncopeLogger = entityFactory.newEntity(Logger.class);\n                     syncopeLogger.setKey(loggerName);\n                     syncopeLogger.setLevel(LoggerLevel.fromLevel(logConf.getLevel()));\n-                    syncopeLogger.setType(loggerName.startsWith(LoggerType.AUDIT.getPrefix())\n-                            ? LoggerType.AUDIT\n-                            : LoggerType.LOG);\n+                    syncopeLogger.setType(LoggerType.LOG);\n                     loggerDAO.save(syncopeLogger);\n                 }\n             }\n@@ -87,9 +86,9 @@ public void synchronizeLog4J(final LoggerContext ctx) {\n          */\n         for (Logger syncopeLogger : syncopeLoggers.values()) {\n             LoggerConfig logConf = ctx.getConfiguration().getLoggerConfig(syncopeLogger.getKey());\n-            if (!LogManager.ROOT_LOGGER_NAME.equals(logConf.getName()) && logConf.getLevel() != null) {\n-                logConf.setLevel(syncopeLogger.getLevel().getLevel());\n-            }\n+            logConf.setLevel(syncopeLogger.getLevel().getLevel());\n         }\n+\n+        ctx.updateLoggers();\n     }\n }"},{"sha":"c62a55c0610550c5db0809891cf10c5827b7319d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -20,7 +20,6 @@\n \n import java.text.ParseException;\n import java.util.List;\n-import java.util.Queue;\n import javax.ws.rs.BadRequestException;\n import org.apache.syncope.common.lib.log.EventCategoryTO;\n import org.apache.syncope.common.lib.log.LogAppender;\n@@ -46,7 +45,7 @@ public List<LogAppender> memoryAppenders() {\n     }\n \n     @Override\n-    public Queue<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n+    public List<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n         return logic.getLastLogStatements(memoryAppender);\n     }\n "},{"sha":"9b58bc5c0c2b4f3f7be830d9eca1e6cb3bcf6a35","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -85,6 +85,10 @@ under the License.\n       <appender-ref ref=\"persistenceFile\"/>\n       <appender-ref ref=\"persistence\"/>\n     </asyncLogger>\n+    <asyncLogger name=\"org.apache.ibatis\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"persistenceFile\"/>\n+      <appender-ref ref=\"persistence\"/>\n+    </asyncLogger>\n     \n     <asyncLogger name=\"org.apache.syncope.core.rest\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"restFile\"/>"},{"sha":"7e38c19266dda4ca835d3f76c1578b848321c3e5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbe4b703d251f639f9d2790732d781c39510cc52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbe4b703d251f639f9d2790732d781c39510cc52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=cbe4b703d251f639f9d2790732d781c39510cc52","patch":"@@ -26,7 +26,6 @@\n \n import java.text.ParseException;\n import java.util.List;\n-import java.util.Queue;\n import javax.ws.rs.core.Response;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.collections4.IterableUtils;\n@@ -66,11 +65,11 @@ public void listMemoryAppenders() {\n \n     @Test\n     public void lastStatements() {\n-        Queue<LogStatementTO> statements = loggerService.getLastLogStatements(\"connid\");\n+        List<LogStatementTO> statements = loggerService.getLastLogStatements(\"connid\");\n         assertNotNull(statements);\n         assertFalse(statements.isEmpty());\n \n-        LogStatementTO statement = statements.element();\n+        LogStatementTO statement = statements.get(0);\n         assertNotNull(statement);\n         assertNotNull(statement.getLoggerName());\n         assertNotNull(statement.getLevel());"}]}