{"sha":"c7349473e7eca5fbedab9567edef17c48c3ae2cf","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM3MzQ5NDczZTdlY2E1ZmJlZGFiOTU2N2VkZWYxN2M0OGMzYWUyY2Y=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-01-30T15:02:24Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-01-30T15:02:24Z"},"message":"[SYNCOPE-1429] Using regexp query with some sauce","tree":{"sha":"811c2b6fab506b52f59b4bc084a4c7ac5e147474","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/811c2b6fab506b52f59b4bc084a4c7ac5e147474"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c7349473e7eca5fbedab9567edef17c48c3ae2cf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7349473e7eca5fbedab9567edef17c48c3ae2cf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c7349473e7eca5fbedab9567edef17c48c3ae2cf","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7349473e7eca5fbedab9567edef17c48c3ae2cf/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a71e51c81bba94f23eda4aa8a8218d09b6e6e905","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a71e51c81bba94f23eda4aa8a8218d09b6e6e905","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a71e51c81bba94f23eda4aa8a8218d09b6e6e905"}],"stats":{"total":311,"additions":183,"deletions":128},"files":[{"sha":"c83ed8dca63a92bd5498664480fd12a8ec015efa","filename":"ext/elasticsearch/client-elasticsearch/pom.xml","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml?ref=c7349473e7eca5fbedab9567edef17c48c3ae2cf","patch":"@@ -46,7 +46,15 @@ under the License.\n       \n     <dependency>\n       <groupId>org.elasticsearch.client</groupId>\n-      <artifactId>transport</artifactId>\n+      <artifactId>elasticsearch-rest-high-level-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.elasticsearch.client</groupId>\n+      <artifactId>elasticsearch-rest-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.elasticsearch</groupId>\n+      <artifactId>elasticsearch</artifactId>\n     </dependency>\n     \n     <dependency>"},{"sha":"c8f30e1c4888f75e73baf33ec7c981bc5b2b28e1","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientContext.java","status":"modified","additions":4,"deletions":14,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java?ref=c7349473e7eca5fbedab9567edef17c48c3ae2cf","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.ext.elasticsearch.client;\n \n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.Collections;\n+import org.apache.http.HttpHost;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -30,18 +30,8 @@ public class ElasticsearchClientContext {\n     @ConditionalOnMissingBean\n     @Bean\n     public ElasticsearchClientFactoryBean elasticsearchClientFactoryBean() {\n-        ElasticsearchClientFactoryBean factory = new ElasticsearchClientFactoryBean();\n-\n-        Map<String, String> settings = new HashMap<>();\n-        settings.put(\"cluster.name\", \"elasticsearch\");\n-        settings.put(\"client.transport.sniff\", \"false\");\n-        factory.setSettings(settings);\n-\n-        Map<String, Integer> addresses = new HashMap<>();\n-        addresses.put(\"localhost\", 9300);\n-        factory.setAddresses(addresses);\n-\n-        return factory;\n+        return new ElasticsearchClientFactoryBean(\n+                Collections.singletonList(new HttpHost(\"localhost\", 9200, \"http\")));\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"7c35c997b660b67b481647708e6442209da74107","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java","status":"modified","additions":13,"deletions":33,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java?ref=c7349473e7eca5fbedab9567edef17c48c3ae2cf","patch":"@@ -18,59 +18,39 @@\n  */\n package org.apache.syncope.ext.elasticsearch.client;\n \n-import java.net.InetAddress;\n-import java.util.Map;\n-import org.elasticsearch.client.Client;\n-import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.common.transport.TransportAddress;\n-import org.elasticsearch.transport.client.PreBuiltTransportClient;\n+import java.util.List;\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n import org.springframework.beans.factory.DisposableBean;\n import org.springframework.beans.factory.FactoryBean;\n \n /**\n- * Spring {@link FactoryBean} for getting the Elasticsearch's {@link Client} singleton instance.\n+ * Spring {@link FactoryBean} for getting the Elasticsearch's {@link RestHighLevelClient} singleton instance.\n  */\n-public class ElasticsearchClientFactoryBean implements FactoryBean<Client>, DisposableBean {\n+public class ElasticsearchClientFactoryBean implements FactoryBean<RestHighLevelClient>, DisposableBean {\n \n-    private Map<String, String> settings;\n+    private final List<HttpHost> hosts;\n \n-    private Map<String, Integer> addresses;\n+    private RestHighLevelClient client;\n \n-    private Client client;\n-\n-    public void setSettings(final Map<String, String> settings) {\n-        this.settings = settings;\n-    }\n-\n-    public void setAddresses(final Map<String, Integer> addresses) {\n-        this.addresses = addresses;\n+    public ElasticsearchClientFactoryBean(final List<HttpHost> hosts) {\n+        this.hosts = hosts;\n     }\n \n     @Override\n-    public Client getObject() throws Exception {\n+    public RestHighLevelClient getObject() throws Exception {\n         synchronized (this) {\n             if (client == null) {\n-                Settings.Builder builder = Settings.builder();\n-                settings.forEach((key, value) -> {\n-                    builder.put(key, value);\n-                });\n-\n-                PreBuiltTransportClient tClient = new PreBuiltTransportClient(builder.build());\n-\n-                for (Map.Entry<String, Integer> entry : addresses.entrySet()) {\n-                    tClient.addTransportAddress(\n-                            new TransportAddress(InetAddress.getByName(entry.getKey()), entry.getValue()));\n-                }\n-\n-                client = tClient;\n+                client = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[0])));\n             }\n         }\n         return client;\n     }\n \n     @Override\n     public Class<?> getObjectType() {\n-        return Client.class;\n+        return RestHighLevelClient.class;\n     }\n \n     @Override"},{"sha":"914e951e78ecbba349a485b706208c5ecdef6194","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"modified","additions":21,"deletions":18,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=c7349473e7eca5fbedab9567edef17c48c3ae2cf","patch":"@@ -22,11 +22,16 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n+import org.elasticsearch.action.delete.DeleteRequest;\n import org.elasticsearch.action.delete.DeleteResponse;\n+import org.elasticsearch.action.get.GetRequest;\n import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.update.UpdateRequest;\n import org.elasticsearch.action.update.UpdateResponse;\n-import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -40,53 +45,51 @@ public class ElasticsearchIndexManager {\n     private static final Logger LOG = LoggerFactory.getLogger(ElasticsearchIndexManager.class);\n \n     @Autowired\n-    private Client client;\n+    private RestHighLevelClient client;\n \n     @Autowired\n     private ElasticsearchUtils elasticsearchUtils;\n \n     @TransactionalEventListener\n     public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException {\n-        GetResponse getResponse = client.prepareGet(\n+        GetRequest getRequest = new GetRequest(\n                 elasticsearchUtils.getContextDomainName(event.getAny().getType().getKind()),\n                 event.getAny().getType().getKind().name(),\n-                event.getAny().getKey()).\n-                get();\n+                event.getAny().getKey());\n+        GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);\n         if (getResponse.isExists()) {\n             LOG.debug(\"About to update index for {}\", event.getAny());\n \n-            UpdateResponse response = client.prepareUpdate(\n+            UpdateRequest request = new UpdateRequest(\n                     elasticsearchUtils.getContextDomainName(event.getAny().getType().getKind()),\n                     event.getAny().getType().getKind().name(),\n                     event.getAny().getKey()).\n-                    setRetryOnConflict(elasticsearchUtils.getRetryOnConflict()).\n-                    setDoc(elasticsearchUtils.builder(event.getAny())).\n-                    get();\n+                    retryOnConflict(elasticsearchUtils.getRetryOnConflict()).\n+                    doc(elasticsearchUtils.builder(event.getAny()));\n+            UpdateResponse response = client.update(request, RequestOptions.DEFAULT);\n             LOG.debug(\"Index successfully updated for {}: {}\", event.getAny(), response);\n         } else {\n             LOG.debug(\"About to create index for {}\", event.getAny());\n \n-            IndexResponse response = client.prepareIndex(\n+            IndexRequest request = new IndexRequest(\n                     elasticsearchUtils.getContextDomainName(event.getAny().getType().getKind()),\n                     event.getAny().getType().getKind().name(),\n                     event.getAny().getKey()).\n-                    setSource(elasticsearchUtils.builder(event.getAny())).\n-                    get();\n-\n+                    source(elasticsearchUtils.builder(event.getAny()));\n+            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n             LOG.debug(\"Index successfully created for {}: {}\", event.getAny(), response);\n         }\n     }\n \n     @TransactionalEventListener\n-    public void after(final AnyDeletedEvent event) {\n+    public void after(final AnyDeletedEvent event) throws IOException {\n         LOG.debug(\"About to delete index for {}[{}]\", event.getAnyTypeKind(), event.getAnyKey());\n \n-        DeleteResponse response = client.prepareDelete(\n+        DeleteRequest request = new DeleteRequest(\n                 elasticsearchUtils.getContextDomainName(event.getAnyTypeKind()),\n                 event.getAnyTypeKind().name(),\n-                event.getAnyKey()).\n-                get();\n-\n+                event.getAnyKey());\n+        DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);\n         LOG.debug(\"Index successfully deleted for {}[{}]: {}\",\n                 event.getAnyTypeKind(), event.getAnyKey(), response);\n     }"},{"sha":"14a521cee568922e0d99413654ecbf1fe2852fc5","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=c7349473e7eca5fbedab9567edef17c48c3ae2cf","patch":"@@ -142,7 +142,13 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n             User user = ((User) any);\n             builder = builder.\n                     field(\"username\", user.getUsername()).\n-                    field(\"lastLoginDate\", user.getLastLoginDate());\n+                    field(\"token\", user.getToken()).\n+                    field(\"tokenExpireTime\", user.getTokenExpireTime()).\n+                    field(\"changePwdDate\", user.getChangePwdDate()).\n+                    field(\"failedLogins\", user.getFailedLogins()).\n+                    field(\"lastLoginDate\", user.getLastLoginDate()).\n+                    field(\"suspended\", user.isSuspended()).\n+                    field(\"mustChangePassword\", user.isMustChangePassword());\n \n             List<Object> roles = userDAO.findAllRoles(user).stream().\n                     map(r -> r.getKey()).collect(Collectors.toList());\n@@ -176,13 +182,11 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n                     values.add(plainAttr.getUniqueValue().getValue());\n                 }\n \n-                builder = builder.field(plainAttr.getSchema().getKey(), values);\n+                builder = builder.field(plainAttr.getSchema().getKey(), values.size() == 1 ? values.get(0) : values);\n             }\n         }\n \n-        builder = builder.endObject();\n-\n-        return builder;\n+        return builder.endObject();\n     }\n \n     public String getContextDomainName(final AnyTypeKind kind) {"},{"sha":"58fd9a97594fd7330bd345e1a3346da8aa56a274","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":65,"deletions":27,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=c7349473e7eca5fbedab9567edef17c48c3ae2cf","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.io.IOException;\n import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -53,13 +56,17 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n-import org.elasticsearch.action.search.SearchRequestBuilder;\n+import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.search.SearchType;\n-import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n import org.elasticsearch.index.query.DisMaxQueryBuilder;\n import org.elasticsearch.index.query.MatchNoneQueryBuilder;\n import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.FieldSortBuilder;\n+import org.elasticsearch.search.sort.SortBuilder;\n import org.elasticsearch.search.sort.SortOrder;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -71,7 +78,7 @@ public class ElasticsearchAnySearchDAO extends AbstractAnySearchDAO {\n     private static final QueryBuilder EMPTY_QUERY_BUILDER = new MatchNoneQueryBuilder();\n \n     @Autowired\n-    private Client client;\n+    private RestHighLevelClient client;\n \n     @Autowired\n     private ElasticsearchUtils elasticsearchUtils;\n@@ -111,37 +118,48 @@ private Pair<DisMaxQueryBuilder, Set<String>> adminRealmsFilter(final Set<String\n         return Pair.of(builder, dynRealmKeys);\n     }\n \n-    private SearchRequestBuilder searchRequestBuilder(\n+    private SearchRequest searchRequest(\n             final Set<String> adminRealms,\n             final SearchCond cond,\n-            final AnyTypeKind kind) {\n+            final AnyTypeKind kind,\n+            final int from,\n+            final int size,\n+            final List<SortBuilder<?>> sortBuilders) {\n \n         Pair<DisMaxQueryBuilder, Set<String>> filter = adminRealmsFilter(adminRealms);\n-\n-        return client.prepareSearch(elasticsearchUtils.getContextDomainName(kind)).\n-                setSearchType(SearchType.QUERY_THEN_FETCH).\n-                setQuery(SyncopeConstants.FULL_ADMIN_REALMS.equals(adminRealms)\n+        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().\n+                query(SyncopeConstants.FULL_ADMIN_REALMS.equals(adminRealms)\n                         ? getQueryBuilder(cond, kind)\n                         : QueryBuilders.boolQuery().\n                                 must(filter.getLeft()).\n-                                must(getQueryBuilder(buildEffectiveCond(cond, filter.getRight()), kind)));\n+                                must(getQueryBuilder(buildEffectiveCond(cond, filter.getRight()), kind))).\n+                from(from).\n+                size(size);\n+        sortBuilders.forEach(sort -> sourceBuilder.sort(sort));\n+\n+        return new SearchRequest(elasticsearchUtils.getContextDomainName(kind)).\n+                searchType(SearchType.QUERY_THEN_FETCH).\n+                source(sourceBuilder);\n     }\n \n     @Override\n     protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n-        SearchRequestBuilder builder = searchRequestBuilder(adminRealms, cond, kind).\n-                setFrom(0).setSize(0);\n-\n-        return (int) builder.get().getHits().getTotalHits();\n+        SearchRequest request = searchRequest(adminRealms, cond, kind, 0, 0, Collections.emptyList());\n+        try {\n+            return (int) client.search(request, RequestOptions.DEFAULT).getHits().getTotalHits();\n+        } catch (IOException e) {\n+            LOG.error(\"Search error\", e);\n+            return 0;\n+        }\n     }\n \n-    private void addSort(\n-            final SearchRequestBuilder builder,\n+    private List<SortBuilder<?>> sortBuilders(\n             final AnyTypeKind kind,\n             final List<OrderByClause> orderBy) {\n \n         AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);\n \n+        List<SortBuilder<?>> builders = new ArrayList<>();\n         orderBy.forEach(clause -> {\n             String sortName = null;\n \n@@ -161,9 +179,10 @@ private void addSort(\n             if (sortName == null) {\n                 LOG.warn(\"Cannot build any valid clause from {}\", clause);\n             } else {\n-                builder.addSort(sortName, SortOrder.valueOf(clause.getDirection().name()));\n+                builders.add(new FieldSortBuilder(sortName).order(SortOrder.valueOf(clause.getDirection().name())));\n             }\n         });\n+        return builders;\n     }\n \n     @Override\n@@ -175,14 +194,21 @@ protected <T extends Any<?>> List<T> doSearch(\n             final List<OrderByClause> orderBy,\n             final AnyTypeKind kind) {\n \n-        SearchRequestBuilder builder = searchRequestBuilder(adminRealms, cond, kind).\n-                setFrom(page <= 0 ? 0 : page - 1).\n-                setSize(itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage);\n-        addSort(builder, kind, orderBy);\n-\n-        return buildResult(Stream.of(builder.get().getHits().getHits()).\n-                map(hit -> hit.getId()).collect(Collectors.toList()),\n-                kind);\n+        SearchRequest request = searchRequest(\n+                adminRealms,\n+                cond,\n+                kind,\n+                (page <= 0 ? 0 : page - 1),\n+                (itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage),\n+                sortBuilders(kind, orderBy));\n+        try {\n+            return buildResult(Stream.of(client.search(request, RequestOptions.DEFAULT).getHits().getHits()).\n+                    map(hit -> hit.getId()).collect(Collectors.toList()),\n+                    kind);\n+        } catch (IOException e) {\n+            LOG.error(\"Search error\", e);\n+            return Collections.emptyList();\n+        }\n     }\n \n     private QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind kind) {\n@@ -350,8 +376,20 @@ private QueryBuilder fillAttrQuery(\n                 break;\n \n             case ILIKE:\n-                builder = QueryBuilders.queryStringQuery(\n-                        schema.getKey() + \":\" + cond.getExpression().replace('%', '*').toLowerCase());\n+                StringBuilder output = new StringBuilder();\n+                for (char c : cond.getExpression().toLowerCase().toCharArray()) {\n+                    if (c == '%') {\n+                        output.append(\".*\");\n+                    } else if (Character.isLetter(c)) {\n+                        output.append('[').\n+                                append(c).\n+                                append(Character.toUpperCase(c)).\n+                                append(']');\n+                    } else {\n+                        output.append(c);\n+                    }\n+                }\n+                builder = QueryBuilders.regexpQuery(schema.getKey(), output.toString());\n                 break;\n \n             case LIKE:"},{"sha":"260e58957458e40d7d25d24bdd56ea91aa73758d","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":23,"deletions":25,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7349473e7eca5fbedab9567edef17c48c3ae2cf/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=c7349473e7eca5fbedab9567edef17c48c3ae2cf","patch":"@@ -34,11 +34,12 @@\n import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n-import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest;\n-import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;\n+import org.elasticsearch.action.admin.indices.get.GetIndexRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n import org.elasticsearch.action.index.IndexResponse;\n import org.elasticsearch.action.support.master.AcknowledgedResponse;\n-import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestHighLevelClient;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.common.xcontent.XContentFactory;\n import org.quartz.JobExecutionException;\n@@ -50,7 +51,7 @@\n public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {\n \n     @Autowired\n-    private Client client;\n+    private RestHighLevelClient client;\n \n     @Autowired\n     private ElasticsearchUtils elasticsearchUtils;\n@@ -80,39 +81,40 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n \n                 LOG.debug(\"Indexing users...\");\n                 for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+\n                     for (User user : userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n-                        IndexResponse response = client.prepareIndex(\n+                        IndexRequest request = new IndexRequest(\n                                 elasticsearchUtils.getContextDomainName(AnyTypeKind.USER),\n                                 AnyTypeKind.USER.name(),\n                                 user.getKey()).\n-                                setSource(elasticsearchUtils.builder(user)).\n-                                get();\n+                                source(elasticsearchUtils.builder(user));\n+                        IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", user, response);\n                     }\n                 }\n \n                 LOG.debug(\"Indexing groups...\");\n                 for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (Group group : groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n-                        IndexResponse response = client.prepareIndex(\n+                        IndexRequest request = new IndexRequest(\n                                 elasticsearchUtils.getContextDomainName(AnyTypeKind.GROUP),\n                                 AnyTypeKind.GROUP.name(),\n                                 group.getKey()).\n-                                setSource(elasticsearchUtils.builder(group)).\n-                                get();\n+                                source(elasticsearchUtils.builder(group));\n+                        IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", group, response);\n                     }\n                 }\n \n                 LOG.debug(\"Indexing any objects...\");\n                 for (int page = 1; page <= (anyObjectDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (AnyObject anyObject : anyObjectDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n-                        IndexResponse response = client.prepareIndex(\n+                        IndexRequest request = new IndexRequest(\n                                 elasticsearchUtils.getContextDomainName(AnyTypeKind.ANY_OBJECT),\n                                 AnyTypeKind.ANY_OBJECT.name(),\n                                 anyObject.getKey()).\n-                                setSource(elasticsearchUtils.builder(anyObject)).\n-                                get();\n+                                source(elasticsearchUtils.builder(anyObject));\n+                        IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", anyObject, response);\n                     }\n                 }\n@@ -126,16 +128,12 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         return \"SUCCESS\";\n     }\n \n-    private void removeIndexIfExists(final AnyTypeKind kind)\n-            throws InterruptedException, ExecutionException {\n+    private void removeIndexIfExists(final AnyTypeKind kind) throws IOException {\n+        if (client.indices().exists(\n+                new GetIndexRequest().indices(elasticsearchUtils.getContextDomainName(kind)), RequestOptions.DEFAULT)) {\n \n-        IndicesExistsResponse existsIndexResponse = client.admin().indices().\n-                exists(new IndicesExistsRequest(elasticsearchUtils.getContextDomainName(kind))).\n-                get();\n-        if (existsIndexResponse.isExists()) {\n-            AcknowledgedResponse acknowledgedResponse = client.admin().indices().\n-                    delete(new DeleteIndexRequest(elasticsearchUtils.getContextDomainName(kind))).\n-                    get();\n+            AcknowledgedResponse acknowledgedResponse = client.indices().delete(\n+                    new DeleteIndexRequest(elasticsearchUtils.getContextDomainName(kind)), RequestOptions.DEFAULT);\n             LOG.debug(\"Successfully removed {}: {}\",\n                     elasticsearchUtils.getContextDomainName(kind), acknowledgedResponse);\n         }\n@@ -175,9 +173,9 @@ private void createIndex(final AnyTypeKind kind)\n                 endArray().\n                 endObject();\n \n-        CreateIndexResponse response = client.admin().indices().\n-                create(new CreateIndexRequest(elasticsearchUtils.getContextDomainName(kind)).settings(settings).\n-                        mapping(kind.name(), mapping)).get();\n+        CreateIndexResponse response = client.indices().create(\n+                new CreateIndexRequest(elasticsearchUtils.getContextDomainName(kind)).settings(settings).\n+                        mapping(kind.name(), mapping), RequestOptions.DEFAULT);\n         LOG.debug(\"Successfully created {} for {}: {}\",\n                 elasticsearchUtils.getContextDomainName(kind), kind.name(), response);\n     }"},{"sha":"0e1d2614d23ea1360fd7e12c2b22be7cd419aa64","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":20,"deletions":4,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7349473e7eca5fbedab9567edef17c48c3ae2cf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7349473e7eca5fbedab9567edef17c48c3ae2cf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=c7349473e7eca5fbedab9567edef17c48c3ae2cf","patch":"@@ -93,7 +93,15 @@ public void searchUserIgnoreCase() {\n \n         matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                        fiql(\"(fullname=~*oSsINi)\").page(1).size(2).build());\n+                        fiql(\"fullname=~*oSsINi\").page(1).size(2).build());\n+        assertNotNull(matchingUsers);\n+        assertEquals(1, matchingUsers.getResult().size());\n+        assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n+        assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", matchingUsers.getResult().iterator().next().getKey());\n+\n+        matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(\"fullname=~*ino*rossini*\").page(1).size(2).build());\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.getResult().size());\n         assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n@@ -494,6 +502,14 @@ public void issueSYNCOPE980() {\n                     build();\n             updateAnyObject(anyObjectUR);\n \n+            if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+                try {\n+                    Thread.sleep(2000);\n+                } catch (InterruptedException ex) {\n+                    // ignore\n+                }\n+            }\n+\n             PagedResult<AnyObjectTO> matching = anyObjectService.search(new AnyQuery.Builder().fiql(\n                     SyncopeClient.getAnyObjectSearchConditionBuilder(service.getKey()).\n                             inGroups(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").\n@@ -558,7 +574,7 @@ public void issueSYNCOPE1416() {\n                 build());\n         assertEquals(1, issueSYNCOPE1416.getSize());\n         assertEquals(\"rossini\", issueSYNCOPE1416.getResult().get(0).getUsername());\n-        \n+\n         // search by attribute with unique constraint\n         issueSYNCOPE1416 = userService.search(new AnyQuery.Builder().\n                 realm(SyncopeConstants.ROOT_REALM).\n@@ -567,15 +583,15 @@ public void issueSYNCOPE1416() {\n                 build());\n         // some identities could have been imported by pull tasks executions\n         assertTrue(issueSYNCOPE1416.getSize() >= 5);\n-        \n+\n         issueSYNCOPE1416 = userService.search(new AnyQuery.Builder().\n                 realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNull(\"fullname\").query()).\n                 orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"loginDate\").build()).\n                 build());\n         assertEquals(0, issueSYNCOPE1416.getSize());\n     }\n-    \n+\n     @Test\n     public void issueSYNCOPE1417() {\n         try {"},{"sha":"49cfaf253d28aaea3e3ba52c28c1135b40061a4c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7349473e7eca5fbedab9567edef17c48c3ae2cf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7349473e7eca5fbedab9567edef17c48c3ae2cf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=c7349473e7eca5fbedab9567edef17c48c3ae2cf","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.apache.syncope.fit.ElasticsearchDetector;\n import org.apache.syncope.fit.FlowableDetector;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -345,6 +346,13 @@ public void passwordReset() {\n         anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), \"Rossi\");\n \n         // SYNCOPE-1293:get users with token not null before requesting password reset\n+        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n         PagedResult<UserTO> after = userService.search(new AnyQuery.Builder().fiql(\"token!=$null\").build());\n         assertEquals(before.getTotalCount() + 1, after.getTotalCount());\n "},{"sha":"f078bf945fdc24cb1ea0c7fb5454297c3a3c4b0b","filename":"pom.xml","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7349473e7eca5fbedab9567edef17c48c3ae2cf/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7349473e7eca5fbedab9567edef17c48c3ae2cf/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=c7349473e7eca5fbedab9567edef17c48c3ae2cf","patch":"@@ -834,7 +834,7 @@ under the License.\n           \n       <dependency>\n         <groupId>org.elasticsearch.client</groupId>\n-        <artifactId>transport</artifactId>\n+        <artifactId>elasticsearch-rest-high-level-client</artifactId>\n         <version>${elasticsearch.version}</version>\n         <exclusions>\n           <exclusion>\n@@ -855,6 +855,16 @@ under the License.\n           </exclusion>\n         </exclusions>\n       </dependency>\n+      <dependency>\n+        <groupId>org.elasticsearch.client</groupId>\n+        <artifactId>elasticsearch-rest-client</artifactId>\n+        <version>${elasticsearch.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.elasticsearch</groupId>\n+        <artifactId>elasticsearch</artifactId>\n+        <version>${elasticsearch.version}</version>\n+      </dependency>\n \n       <dependency>\n         <groupId>org.apache.openjpa</groupId>"}]}