{"sha":"945a38fffc703177403ffb0ab17fe4059477a31c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk0NWEzOGZmZmM3MDMxNzc0MDNmZmIwYWIxN2ZlNDA1OTQ3N2EzMWM=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-02T14:27:34Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-02T14:27:34Z"},"message":"SYNCOPE-24 #comment provided ConnObjectUtil as well\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1296224 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8073dbd038b8313c4fe5197ee6e0e5e5b7b7f72d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8073dbd038b8313c4fe5197ee6e0e5e5b7b7f72d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/945a38fffc703177403ffb0ab17fe4059477a31c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/945a38fffc703177403ffb0ab17fe4059477a31c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/945a38fffc703177403ffb0ab17fe4059477a31c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/945a38fffc703177403ffb0ab17fe4059477a31c/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"ab63c04ef4435967044a9de4061812ad0bd8798a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ab63c04ef4435967044a9de4061812ad0bd8798a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ab63c04ef4435967044a9de4061812ad0bd8798a"}],"stats":{"total":1250,"additions":405,"deletions":845},"files":[{"sha":"68e5dff92fd5fdbf8d26571572830a6d37132595","filename":"client/src/main/java/org/syncope/types/IntMappingType.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -83,7 +83,6 @@ public static EnumSet getAttributeTypes(final AttributableType attributableType)\n      * @return true if attribute type belongs to the specified attributable type set.\n      */\n     public static boolean contains(final AttributableType attributableType, final String type) {\n-\n         switch (attributableType) {\n             case ROLE:\n                 return RoleMappingType.valueOf(type) != null;\n@@ -105,7 +104,6 @@ enum UserMappingType {\n         SyncopeUserId,\n         Password,\n         Username;\n-\n     }\n \n     /**\n@@ -116,7 +114,6 @@ private enum RoleMappingType {\n         RoleSchema,\n         RoleDerivedSchema,\n         RoleVirtualSchema;\n-\n     }\n \n     /**\n@@ -127,6 +124,5 @@ private enum MembershipMappingType {\n         MembershipSchema,\n         MembershipDerivedSchema,\n         MembershipVirtualSchema;\n-\n     }\n }"},{"sha":"c29d7e59fde327b6f31e0650177db87a3fa2ec6d","filename":"console/src/main/java/org/syncope/console/commons/StatusUtils.java","status":"modified","additions":8,"deletions":16,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -68,13 +68,11 @@ public List<StatusBean> getRemoteStatuses(final UserTO userTO) {\n \n             final ResourceTO resourceTO = resourceRestClient.read(res);\n \n-            final Map.Entry<IntMappingType, String> accountId =\n-                    getAccountId(resourceTO);\n+            final Map.Entry<IntMappingType, String> accountId = getAccountId(resourceTO);\n \n             String objectId = null;\n \n-            switch (accountId != null\n-                    ? accountId.getKey() : IntMappingType.SyncopeUserId) {\n+            switch (accountId != null ? accountId.getKey() : IntMappingType.SyncopeUserId) {\n \n                 case SyncopeUserId:\n                     objectId = String.valueOf(userTO.getId());\n@@ -83,8 +81,7 @@ public List<StatusBean> getRemoteStatuses(final UserTO userTO) {\n                     objectId = userTO.getUsername();\n                     break;\n                 case UserSchema:\n-                    AttributeTO attributeTO =\n-                            userTO.getAttributeMap().get(accountId.getValue());\n+                    AttributeTO attributeTO = userTO.getAttributeMap().get(accountId.getValue());\n                     objectId =\n                             attributeTO != null\n                             && attributeTO.getValues() != null\n@@ -154,28 +151,24 @@ public StatusBean getRemoteStatus(\n     public Boolean isEnabled(final ConnObjectTO objectTO) {\n         final String STATUSATTR = \"__ENABLE__\";\n \n-        final Map<String, AttributeTO> attributeTOs =\n-                objectTO.getAttributeMap();\n+        final Map<String, AttributeTO> attributeTOs = objectTO.getAttributeMap();\n \n         final AttributeTO status = attributeTOs.get(STATUSATTR);\n \n         return status != null && status.getValues() != null\n-                && !status.getValues().isEmpty()\n-                ? Boolean.parseBoolean(status.getValues().get(0)) : null;\n+                && !status.getValues().isEmpty() ? Boolean.parseBoolean(status.getValues().get(0)) : null;\n     }\n \n     public String getAccountLink(final ConnObjectTO objectTO) {\n         final String NAME = \"__NAME__\";\n \n         final Map<String, AttributeTO> attributeTOs = objectTO != null\n-                ? objectTO.getAttributeMap()\n-                : Collections.EMPTY_MAP;\n+                ? objectTO.getAttributeMap() : Collections.EMPTY_MAP;\n \n         final AttributeTO name = attributeTOs.get(NAME);\n \n         return name != null && name.getValues() != null\n-                && !name.getValues().isEmpty()\n-                ? (String) name.getValues().get(0) : null;\n+                && !name.getValues().isEmpty() ? (String) name.getValues().get(0) : null;\n     }\n \n     public Map.Entry<IntMappingType, String> getAccountId(\n@@ -185,8 +178,7 @@ public Map.Entry<IntMappingType, String> getAccountId(\n         for (SchemaMappingTO mapping : resourceTO.getMappings()) {\n             if (mapping.isAccountid()) {\n                 accountId = new AbstractMap.SimpleEntry<IntMappingType, String>(\n-                        mapping.getIntMappingType(),\n-                        mapping.getIntAttrName());\n+                        mapping.getIntMappingType(), mapping.getIntAttrName());\n             }\n         }\n "},{"sha":"b41a56179d09666cbf62b9dd686f1cf705107283","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractVirAttr.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -86,19 +86,21 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n             String accountId = null;\n \n             for (SchemaMapping mapping : resource.getMappings()) {\n+                final String extAttrName = SchemaMappingUtil.getExtAttrName(mapping);\n+\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Processing mapping.\"\n                             + \"\\n\\tID: \" + mapping.getId()\n                             + \"\\n\\tSource: \" + mapping.getIntAttrName()\n-                            + \"\\n\\tDestination: \" + mapping.getExtAttrName()\n+                            + \"\\n\\tDestination: \" + extAttrName\n                             + \"\\n\\tType: \" + mapping.getIntMappingType()\n                             + \"\\n\\tMandatory condition: \" + mapping.getMandatoryCondition()\n                             + \"\\n\\tAccountId: \" + mapping.isAccountid()\n                             + \"\\n\\tPassword: \" + mapping.isPassword());\n                 }\n \n                 if (attributeName.equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == intMappingType) {\n-                    attributeNames.add(mapping.getExtAttrName());\n+                    attributeNames.add(extAttrName);\n                 }\n \n                 if (mapping.isAccountid()) {"},{"sha":"60b48c60faa09d971e71958d6ab86dad2d859cde","filename":"core/src/main/java/org/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -81,17 +81,16 @@ public class ExternalResource extends AbstractBaseBean {\n     /**\n      * Attribute mappings.\n      *\n-     * List type cannot be used. Please, take a look at\n-     * https://hibernate.onjira.com/browse/HHH-1718\n+     * List type cannot be used. Please, take a look at https://hibernate.onjira.com/browse/HHH-1718\n      */\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true,\n     fetch = FetchType.EAGER, mappedBy = \"resource\")\n     @Valid\n     private Set<SchemaMapping> mappings;\n \n     /**\n-     * A JEXL expression for determining how to link user account id in Syncope\n-     * DB to user account id in target resource's DB.\n+     * A JEXL expression for determining how to link user account id in Syncope DB to user account id in target\n+     * resource's DB.\n      */\n     private String accountLink;\n \n@@ -216,14 +215,11 @@ public Set<SchemaMapping> getMappings() {\n         return mappings;\n     }\n \n-    public Set<SchemaMapping> getMappings(final String intAttrName,\n-            final IntMappingType intMappingType) {\n+    public Set<SchemaMapping> getMappings(final String intAttrName, final IntMappingType intMappingType) {\n \n         Set<SchemaMapping> result = new HashSet<SchemaMapping>();\n         for (SchemaMapping mapping : mappings) {\n-            if (intAttrName.equals(mapping.getIntAttrName())\n-                    && mapping.getIntMappingType() == intMappingType) {\n-\n+            if (intAttrName.equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == intMappingType) {\n                 result.add(mapping);\n             }\n         }\n@@ -347,8 +343,7 @@ public Set<ConnConfProperty> getConfiguration() {\n \n         Set<ConnConfProperty> deserializedSet;\n         if (StringUtils.isNotBlank(xmlConfiguration)) {\n-            deserializedSet = XMLSerializer.<HashSet<ConnConfProperty>>\n-                    deserialize(xmlConfiguration);\n+            deserializedSet = XMLSerializer.<HashSet<ConnConfProperty>>deserialize(xmlConfiguration);\n             if (deserializedSet != null) {\n                 result = deserializedSet;\n             }"},{"sha":"1179acf0e812feec99f0759c07b8e9dfb4332553","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchemaMappingValidator.java","status":"modified","additions":9,"deletions":22,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -20,9 +20,10 @@\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n+import org.apache.commons.lang.StringUtils;\n import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.util.SchemaMappingUtil;\n import org.syncope.types.EntityViolationType;\n-import org.syncope.types.IntMappingType;\n \n public class SchemaMappingValidator extends AbstractValidator\n         implements ConstraintValidator<SchemaMappingCheck, SchemaMapping> {\n@@ -32,34 +33,20 @@ public void initialize(final SchemaMappingCheck constraintAnnotation) {\n     }\n \n     @Override\n-    public boolean isValid(\n-            final SchemaMapping object,\n-            final ConstraintValidatorContext context) {\n+    public boolean isValid(final SchemaMapping mapping, final ConstraintValidatorContext context) {\n \n         context.disableDefaultConstraintViolation();\n \n-        if (object.getExtAttrName() == null\n-                && !object.isAccountid()\n-                && !object.isPassword()) {\n-            context.buildConstraintViolationWithTemplate(\n-                    \"Missing external attribute name\").addNode(\n-                    EntityViolationType.InvalidSchemaMapping.toString()).\n-                    addConstraintViolation();\n+        if (StringUtils.isBlank(SchemaMappingUtil.getExtAttrName(mapping))) {\n+            context.buildConstraintViolationWithTemplate(\"Missing external attribute name\").\n+                    addNode(EntityViolationType.InvalidSchemaMapping.toString()).addConstraintViolation();\n \n             return false;\n         }\n \n-        if (object.getIntAttrName() == null\n-                && IntMappingType.SyncopeUserId\n-                != object.getIntMappingType()\n-                && IntMappingType.Password\n-                != object.getIntMappingType()\n-                && IntMappingType.Username\n-                != object.getIntMappingType()) {\n-            context.buildConstraintViolationWithTemplate(\n-                    \"Missing internal attribute name\").addNode(\n-                    EntityViolationType.InvalidSchemaMapping.toString()).\n-                    addConstraintViolation();\n+        if (StringUtils.isBlank(SchemaMappingUtil.getIntAttrName(mapping))) {\n+            context.buildConstraintViolationWithTemplate(\"Missing internal attribute name\").\n+                    addNode(EntityViolationType.InvalidSchemaMapping.toString()).addConstraintViolation();\n \n             return false;\n         }"},{"sha":"ce857be9fa53a33972b04807627499ea3698f184","filename":"core/src/main/java/org/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":17,"deletions":26,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -59,15 +59,15 @@\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.util.ConnBundleManager;\n+import org.syncope.core.util.SchemaMappingUtil;\n import org.syncope.types.ConnConfProperty;\n import org.syncope.types.ConnectorCapability;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.PropagationOperation;\n \n /**\n- * Intercept calls to ConnectorFacade's methods and check if the correspondant\n- * connector instance has been configured to allow every single operation: if\n- * not, simply do nothig.\n+ * Intercept calls to ConnectorFacade's methods and check if the correspondant connector instance has been configured to\n+ * allow every single operation: if not, simply do nothig.\n  */\n public class ConnectorFacadeProxy {\n \n@@ -90,8 +90,7 @@ public class ConnectorFacadeProxy {\n     private final ConnInstance activeConnInstance;\n \n     /**\n-     * Use the passed connector instance to build a ConnectorFacade that will be\n-     * used to make all wrapped calls.\n+     * Use the passed connector instance to build a ConnectorFacade that will be used to make all wrapped calls.\n      *\n      * @param connInstance the connector instance configuration\n      * @param connBundleManager connector bundle loader\n@@ -175,8 +174,7 @@ public ConnectorFacadeProxy(\n \n                     if (GuardedString.class.equals(propertySchemaClass)) {\n                         propertyValue = new GuardedString(\n-                                ((String) property.getValues().iterator().next()).\n-                                toCharArray());\n+                                ((String) property.getValues().iterator().next()).toCharArray());\n                     } else if (GuardedByteArray.class.equals(\n                             propertySchemaClass)) {\n \n@@ -264,8 +262,7 @@ public ConnectorFacadeProxy(\n      * @param objectClass ConnId's object class\n      * @param attrs attributes for creation\n      * @param options ConnId's OperationOptions\n-     * @param propagationAttempted if creation is actually performed (based on\n-     * connector instance's capabilities)\n+     * @param propagationAttempted if creation is actually performed (based on connector instance's capabilities)\n      * @return Uid for created user\n      */\n     public Uid create(\n@@ -303,8 +300,7 @@ public Uid create(\n      * @param uid user to be updated\n      * @param attrs attributes for update\n      * @param options ConnId's OperationOptions\n-     * @param propagationAttempted if update is actually performed (based on\n-     * connector instance's capabilities)\n+     * @param propagationAttempted if update is actually performed (based on connector instance's capabilities)\n      * @return Uid for created user\n      */\n     public Uid update(final PropagationMode propagationMode,\n@@ -342,8 +338,7 @@ public Uid update(final PropagationMode propagationMode,\n      * @param objectClass ConnId's object class\n      * @param uid user to be deleted\n      * @param options ConnId's OperationOptions\n-     * @param propagationAttempted if deletion is actually performed (based on\n-     * connector instance's capabilities)\n+     * @param propagationAttempted if deletion is actually performed (based on connector instance's capabilities)\n      */\n     public void delete(final PropagationMode propagationMode,\n             final ObjectClass objectClass,\n@@ -425,8 +420,8 @@ public ConnectorObject getObject(\n     }\n \n     /**\n-     * Get remote object used by the propagation manager in order to choose for\n-     * a create (object doesn't exist) or an update (object exists).\n+     * Get remote object used by the propagation manager in order to choose for a create (object doesn't exist) or an\n+     * update (object exists).\n      *\n      * @param propagationMode propagation mode\n      * @param operationType resource operation type\n@@ -488,8 +483,8 @@ public ConnectorObject getObject(\n     }\n \n     /**\n-     * Get remote object used by the propagation manager in order to choose for\n-     * a create (object doesn't exist) or an update (object exists).\n+     * Get remote object used by the propagation manager in order to choose for a create (object doesn't exist) or an\n+     * update (object exists).\n      *\n      * @param objectClass ConnId's object class.\n      * @param handler to be used to handle deltas.\n@@ -655,20 +650,16 @@ public OperationOptions getOperationOptions(\n         final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n \n         final Set<String> attributesToGet = new HashSet<String>(\n-                Arrays.asList(new String[]{\n-                    Name.NAME,\n-                    Uid.NAME,\n-                    OperationalAttributes.ENABLE_NAME\n-                }));\n+                Arrays.asList(new String[]{Name.NAME, Uid.NAME, OperationalAttributes.ENABLE_NAME}));\n \n         for (SchemaMapping mapping : resource.getMappings()) {\n-            if (StringUtils.hasText(mapping.getExtAttrName())) {\n-                attributesToGet.add(mapping.getExtAttrName());\n+            final String extAttrName = SchemaMappingUtil.getExtAttrName(mapping);\n+\n+            if (StringUtils.hasText(extAttrName)) {\n+                attributesToGet.add(extAttrName);\n             }\n         }\n \n-        attributesToGet.add(OperationalAttributes.ENABLE_NAME);\n-\n         oob.setAttributesToGet(attributesToGet);\n         // -------------------------------------\n "},{"sha":"7a644d21fecdccbf6956a7923fc2acd0d728349d","filename":"core/src/main/java/org/syncope/core/propagation/PropagationManager.java","status":"modified","additions":10,"deletions":198,"changes":208,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -50,27 +50,14 @@\n import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.TaskExec;\n-import org.syncope.core.persistence.beans.membership.MDerSchema;\n-import org.syncope.core.persistence.beans.membership.MSchema;\n-import org.syncope.core.persistence.beans.membership.MVirSchema;\n import org.syncope.core.persistence.beans.membership.Membership;\n-import org.syncope.core.persistence.beans.role.RDerSchema;\n-import org.syncope.core.persistence.beans.role.RSchema;\n-import org.syncope.core.persistence.beans.role.RVirSchema;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UAttr;\n-import org.syncope.core.persistence.beans.user.UAttrValue;\n-import org.syncope.core.persistence.beans.user.UDerSchema;\n-import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.beans.user.UVirSchema;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n@@ -79,6 +66,7 @@\n import org.syncope.core.rest.data.UserDataBinder;\n import org.syncope.core.util.AttributableUtil;\n import org.syncope.core.util.JexlUtil;\n+import org.syncope.core.util.SchemaMappingUtil;\n import org.syncope.core.workflow.WorkflowResult;\n import org.syncope.types.AttributableType;\n import org.syncope.types.IntMappingType;\n@@ -388,55 +376,6 @@ public List<PropagationTask> getDeleteTaskIds(final Long userId,\n         return provision(user, null, false, propByRes);\n     }\n \n-    /**\n-     * For given source mapping type, return the corresponding Class object.\n-     *\n-     * @param intMappingType source mapping type\n-     * @return corresponding Class object, if any (can be null)\n-     */\n-    private Class getIntMappingTypeClass(\n-            final IntMappingType intMappingType) {\n-\n-        Class result;\n-\n-        switch (intMappingType) {\n-            case UserSchema:\n-                result = USchema.class;\n-                break;\n-            case RoleSchema:\n-                result = RSchema.class;\n-                break;\n-            case MembershipSchema:\n-                result = MSchema.class;\n-                break;\n-\n-            case UserDerivedSchema:\n-                result = UDerSchema.class;\n-                break;\n-            case RoleDerivedSchema:\n-                result = RDerSchema.class;\n-                break;\n-            case MembershipDerivedSchema:\n-                result = MDerSchema.class;\n-                break;\n-\n-            case UserVirtualSchema:\n-                result = UVirSchema.class;\n-                break;\n-            case RoleVirtualSchema:\n-                result = RVirSchema.class;\n-                break;\n-            case MembershipVirtualSchema:\n-                result = MVirSchema.class;\n-                break;\n-\n-            default:\n-                result = null;\n-        }\n-\n-        return result;\n-    }\n-\n     /**\n      * Prepare an attribute for sending to a connector instance.\n      *\n@@ -471,14 +410,16 @@ private Map.Entry<String, Attribute> prepareAttribute(\n         }\n \n         final Entry<AbstractSchema, List<AbstractAttrValue>> entry =\n-                getAttributeValues(mapping, attributables, password);\n+                SchemaMappingUtil.getIntValues(mapping, attributables, password, schemaDAO);\n \n         final List<AbstractAttrValue> values = entry.getValue();\n         final AbstractSchema schema = entry.getKey();\n         final SchemaType schemaType = schema == null ? SchemaType.String : schema.getType();\n \n+        final String extAttrName = SchemaMappingUtil.getExtAttrName(mapping);\n+\n         LOG.debug(\"Define mapping for: \"\n-                + \"\\n* ExtAttrName \" + mapping.getExtAttrName()\n+                + \"\\n* ExtAttrName \" + extAttrName\n                 + \"\\n* is accountId \" + mapping.isAccountid()\n                 + \"\\n* is password \"\n                 + (mapping.isPassword() || mapping.getIntMappingType().equals(IntMappingType.Password))\n@@ -511,147 +452,19 @@ private Map.Entry<String, Attribute> prepareAttribute(\n \n         } else {\n             if (schema != null && schema.isMultivalue()) {\n-                res = new DefaultMapEntry(null, AttributeBuilder.build(mapping.getExtAttrName(), objValues));\n+                res = new DefaultMapEntry(null, AttributeBuilder.build(extAttrName, objValues));\n \n             } else {\n                 res = new DefaultMapEntry(null,\n                         objValues.isEmpty()\n-                        ? AttributeBuilder.build(mapping.getExtAttrName())\n-                        : AttributeBuilder.build(mapping.getExtAttrName(),\n-                        objValues.iterator().next()));\n+                        ? AttributeBuilder.build(extAttrName)\n+                        : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n             }\n         }\n \n         return res;\n     }\n \n-    /**\n-     * Get attribute values.\n-     *\n-     * @param mapping mapping.\n-     * @param attributables list of attributables.\n-     * @param password password.\n-     * @return schema and attribute values.\n-     */\n-    private Entry<AbstractSchema, List<AbstractAttrValue>> getAttributeValues(\n-            final SchemaMapping mapping,\n-            final List<AbstractAttributable> attributables,\n-            final String password) {\n-\n-\n-        LOG.debug(\"Get attributes for '{}' and mapping type '{}'\",\n-                attributables, mapping.getIntMappingType());\n-\n-        AbstractSchema schema = null;\n-\n-        List<AbstractAttrValue> values = new ArrayList<AbstractAttrValue>();\n-        AbstractAttrValue attrValue;\n-\n-        switch (mapping.getIntMappingType()) {\n-            case UserSchema:\n-            case RoleSchema:\n-            case MembershipSchema:\n-                schema = schemaDAO.find(mapping.getIntAttrName(), getIntMappingTypeClass(mapping.getIntMappingType()));\n-\n-                for (AbstractAttributable attributable : attributables) {\n-                    final UAttr attr = attributable.getAttribute(mapping.getIntAttrName());\n-\n-                    if (attr != null && attr.getValues() != null) {\n-                        values.addAll(schema.isUniqueConstraint()\n-                                ? Collections.singletonList(attr.getUniqueValue()) : attr.getValues());\n-                    }\n-\n-                    LOG.debug(\"Retrieved attribute {}\"\n-                            + \"\\n* IntAttrName {}\"\n-                            + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\",\n-                            new Object[]{attr, mapping.getIntAttrName(), mapping.getIntMappingType(), values});\n-                }\n-\n-                break;\n-\n-            case UserVirtualSchema:\n-            case RoleVirtualSchema:\n-            case MembershipVirtualSchema:\n-\n-                for (AbstractAttributable attributable : attributables) {\n-                    AbstractVirAttr virAttr = attributable.getVirtualAttribute(mapping.getIntAttrName());\n-\n-                    if (virAttr != null && virAttr.getValues() != null) {\n-                        for (String value : virAttr.getValues()) {\n-                            attrValue = new UAttrValue();\n-                            attrValue.setStringValue(value);\n-                            values.add(attrValue);\n-                        }\n-                    }\n-\n-                    LOG.debug(\"Retrieved virtual attribute {}\"\n-                            + \"\\n* IntAttrName {}\"\n-                            + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\",\n-                            new Object[]{virAttr, mapping.getIntAttrName(), mapping.getIntMappingType(), values});\n-                }\n-                break;\n-\n-            case UserDerivedSchema:\n-            case RoleDerivedSchema:\n-            case MembershipDerivedSchema:\n-                for (AbstractAttributable attributable : attributables) {\n-                    AbstractDerAttr derAttr = attributable.getDerivedAttribute(\n-                            mapping.getIntAttrName());\n-\n-                    if (derAttr != null) {\n-                        attrValue = new UAttrValue();\n-                        attrValue.setStringValue(\n-                                derAttr.getValue(attributable.getAttributes()));\n-                        values.add(attrValue);\n-                    }\n-\n-                    LOG.debug(\"Retrieved attribute {}\"\n-                            + \"\\n* IntAttrName {}\"\n-                            + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\",\n-                            new Object[]{derAttr, mapping.getIntAttrName(),\n-                                mapping.getIntMappingType(), values});\n-                }\n-                break;\n-\n-            case Username:\n-                for (AbstractAttributable attributable : attributables) {\n-                    attrValue = new UAttrValue();\n-                    attrValue.setStringValue(\n-                            ((SyncopeUser) attributable).getUsername());\n-\n-                    values.add(attrValue);\n-                }\n-                break;\n-\n-            case SyncopeUserId:\n-                for (AbstractAttributable attributable : attributables) {\n-                    attrValue = new UAttrValue();\n-                    attrValue.setStringValue(attributable.getId().toString());\n-                    values.add(attrValue);\n-                }\n-                break;\n-\n-            case Password:\n-                attrValue = new UAttrValue();\n-\n-                if (password != null) {\n-                    attrValue.setStringValue(password);\n-                }\n-\n-                values.add(attrValue);\n-                break;\n-\n-            default:\n-        }\n-\n-        LOG.debug(\"Retrived values '{}'\", values);\n-\n-        return new DefaultMapEntry(schema, values);\n-    }\n-\n     /**\n      * Prepare attributes for sending to a connector instance.\n      *\n@@ -675,7 +488,7 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(\n \n         Map.Entry<String, Attribute> preparedAttribute;\n         for (SchemaMapping mapping : resource.getMappings()) {\n-            LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n+            LOG.debug(\"Processing schema {}\", SchemaMappingUtil.getIntAttrName(mapping));\n \n             try {\n                 preparedAttribute = prepareAttribute(mapping, user, password);\n@@ -703,8 +516,7 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(\n \n                 }\n             } catch (Throwable t) {\n-                LOG.debug(\"Attribute '{}' processing failed\",\n-                        mapping.getIntAttrName(), t);\n+                LOG.debug(\"Attribute '{}' processing failed\", SchemaMappingUtil.getIntAttrName(mapping), t);\n             }\n         }\n "},{"sha":"4b1ed804eb717ae3516cf9b5182beb99a12fe6df","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -52,8 +52,8 @@\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n-import org.syncope.core.rest.data.ConnInstanceDataBinder;\n import org.syncope.core.rest.data.ResourceDataBinder;\n+import org.syncope.core.util.ConnObjectUtil;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller\n@@ -72,8 +72,11 @@ public class ResourceController extends AbstractController {\n     @Autowired\n     private ResourceDataBinder binder;\n \n+    /**\n+     * ConnectorObject util.\n+     */\n     @Autowired\n-    private ConnInstanceDataBinder connInstanceDataBinder;\n+    private ConnObjectUtil connObjectUtil;\n \n     @Autowired\n     private ConnInstanceLoader connLoader;\n@@ -284,8 +287,8 @@ public ConnObjectTO getObject(final HttpServletResponse response,\n \n         final ConnectorObject connectorObject =\n                 connector.getObject(\n-                ObjectClass.ACCOUNT, \n-                new Uid(objectId), \n+                ObjectClass.ACCOUNT,\n+                new Uid(objectId),\n                 connector.getOperationOptions(resource));\n \n         if (connectorObject == null) {\n@@ -304,6 +307,6 @@ public ConnObjectTO getObject(final HttpServletResponse response,\n             attributes.add(connectorObject.getName());\n         }\n \n-        return connInstanceDataBinder.getConnObjectTO(connectorObject);\n+        return connObjectUtil.getConnObjectTO(connectorObject);\n     }\n }"},{"sha":"e8b14b0f60f70907e97d8b6fe6239985f68b0c3b","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -55,6 +55,7 @@\n import org.syncope.core.propagation.PropagationHandler;\n import org.syncope.core.propagation.PropagationManager;\n import org.syncope.core.rest.data.ConnInstanceDataBinder;\n+import org.syncope.core.util.ConnObjectUtil;\n import org.syncope.core.util.EntitlementUtil;\n import org.syncope.core.workflow.UserWorkflowAdapter;\n import org.syncope.core.workflow.WorkflowException;\n@@ -98,6 +99,12 @@ public class UserController {\n     @Autowired\n     private NotificationManager notificationManager;\n \n+    /**\n+     * ConnectorObject util.\n+     */\n+    @Autowired\n+    private ConnObjectUtil connObjectUtil;\n+\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/verifyPassword/{userId}\")\n@@ -289,13 +296,11 @@ public void handle(\n                 propagation.setStatus(executionStatus);\n \n                 if (before != null) {\n-                    propagation.setBefore(\n-                            connInstanceDataBinder.getConnObjectTO(before));\n+                    propagation.setBefore(connObjectUtil.getConnObjectTO(before));\n                 }\n \n                 if (after != null) {\n-                    propagation.setAfter(\n-                            connInstanceDataBinder.getConnObjectTO(after));\n+                    propagation.setAfter(connObjectUtil.getConnObjectTO(after));\n                 }\n \n                 propagations.add(propagation);\n@@ -329,7 +334,7 @@ public UserTO update(@RequestBody final UserMod userMod)\n         List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n                 updated, userMod.getPassword(),\n                 userMod.getVirtualAttributesToBeRemoved(),\n-                userMod.getVirtualAttributesToBeUpdated(), \n+                userMod.getVirtualAttributesToBeUpdated(),\n                 null);\n \n         final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n@@ -348,13 +353,11 @@ public void handle(\n                 propagation.setStatus(executionStatus);\n \n                 if (before != null) {\n-                    propagation.setBefore(\n-                            connInstanceDataBinder.getConnObjectTO(before));\n+                    propagation.setBefore(connObjectUtil.getConnObjectTO(before));\n                 }\n \n                 if (after != null) {\n-                    propagation.setAfter(\n-                            connInstanceDataBinder.getConnObjectTO(after));\n+                    propagation.setAfter(connObjectUtil.getConnObjectTO(after));\n                 }\n \n                 propagations.add(propagation);\n@@ -501,13 +504,11 @@ public void handle(\n                 propagation.setStatus(executionStatus);\n \n                 if (before != null) {\n-                    propagation.setBefore(\n-                            connInstanceDataBinder.getConnObjectTO(before));\n+                    propagation.setBefore(connObjectUtil.getConnObjectTO(before));\n                 }\n \n                 if (after != null) {\n-                    propagation.setAfter(\n-                            connInstanceDataBinder.getConnObjectTO(after));\n+                    propagation.setAfter(connObjectUtil.getConnObjectTO(after));\n                 }\n \n                 userTO.addPropagationTO(propagation);"},{"sha":"b337d7819699e9563cab07e5d30fc96fc1998e87","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -601,8 +601,7 @@ protected PropagationByResource fill(\n \n             if (derivedSchema != null) {\n                 for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-                    if (derivedSchema.getName().equals(\n-                            mapping.getIntAttrName())\n+                    if (derivedSchema.getName().equals(mapping.getIntAttrName())\n                             && mapping.getIntMappingType() == attributableUtil.derivedIntMappingType()\n                             && mapping.getResource() != null\n                             && attributable.getResources().contains(mapping.getResource())) {"},{"sha":"6947a7b419bbc949caf5f31e48372a5f71f689ca","filename":"core/src/main/java/org/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":0,"deletions":31,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -22,15 +22,11 @@\n import javassist.NotFoundException;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n-import org.identityconnectors.framework.common.objects.Attribute;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n-import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.ConnInstanceTO;\n-import org.syncope.client.to.ConnObjectTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.ConnInstance;\n@@ -205,31 +201,4 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n         }\n         return connInstanceTO;\n     }\n-\n-    /**\n-     * Get connector object TO from a connector object.\n-     *\n-     * @param connObject connector object.\n-     * @return connector object TO.\n-     */\n-    public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n-        final ConnObjectTO connObjectTO = new ConnObjectTO();\n-\n-        for (Attribute attr : connObject.getAttributes()) {\n-            AttributeTO attrTO = new AttributeTO();\n-            attrTO.setSchema(attr.getName());\n-\n-            if (attr.getValue() != null) {\n-                for (Object value : attr.getValue()) {\n-                    if (value != null) {\n-                        attrTO.addValue(value.toString());\n-                    }\n-                }\n-            }\n-\n-            connObjectTO.addAttribute(attrTO);\n-        }\n-\n-        return connObjectTO;\n-    }\n }"},{"sha":"635911afc22479ce4d48ce43cf0ed64e486235de","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":8,"deletions":14,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -224,8 +224,7 @@ private Set<SchemaMapping> getSchemaMappings(\n         return schemaMappings;\n     }\n \n-    private SchemaMapping getSchemaMapping(ExternalResource resource,\n-            SchemaMappingTO mappingTO)\n+    private SchemaMapping getSchemaMapping(ExternalResource resource, SchemaMappingTO mappingTO)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException compositeErrorException =\n@@ -246,18 +245,15 @@ private SchemaMapping getSchemaMapping(ExternalResource resource,\n         if (mappingTO.getIntAttrName() == null) {\n             switch (mappingTO.getIntMappingType()) {\n                 case SyncopeUserId:\n-                    mappingTO.setIntAttrName(\n-                            IntMappingType.SyncopeUserId.toString());\n+                    mappingTO.setIntAttrName(IntMappingType.SyncopeUserId.toString());\n                     break;\n \n                 case Password:\n-                    mappingTO.setIntAttrName(\n-                            IntMappingType.Password.toString());\n+                    mappingTO.setIntAttrName(IntMappingType.Password.toString());\n                     break;\n \n                 case Username:\n-                    mappingTO.setIntAttrName(\n-                            IntMappingType.Username.toString());\n+                    mappingTO.setIntAttrName(IntMappingType.Username.toString());\n                     break;\n \n                 default:\n@@ -273,14 +269,12 @@ private SchemaMapping getSchemaMapping(ExternalResource resource,\n \n         // no mandatory condition implies mandatory condition false\n         if (!jexlUtil.isExpressionValid(\n-                mappingTO.getMandatoryCondition() != null\n-                ? mappingTO.getMandatoryCondition() : \"false\")) {\n+                mappingTO.getMandatoryCondition() != null ? mappingTO.getMandatoryCondition() : \"false\")) {\n \n             SyncopeClientException invalidMandatoryCondition =\n-                    new SyncopeClientException(\n-                    SyncopeClientExceptionType.InvalidValues);\n-            invalidMandatoryCondition.addElement(\n-                    mappingTO.getMandatoryCondition());\n+                    new SyncopeClientException(SyncopeClientExceptionType.InvalidValues);\n+\n+            invalidMandatoryCondition.addElement(mappingTO.getMandatoryCondition());\n \n             compositeErrorException.addException(invalidMandatoryCondition);\n         }"},{"sha":"c8b7c9a748dbf00040f222df2973f53958bf5a9a","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -131,7 +131,7 @@ public SyncopeUser getUserFromUsername(final String username)\n         Set<Long> roleIds = user.getRoleIds();\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         roleIds.removeAll(adminRoleIds);\n-        \n+\n         if (!roleIds.isEmpty()) {\n             throw new UnauthorizedRoleException(roleIds);\n         }\n@@ -257,11 +257,8 @@ public PropagationByResource update(final SyncopeUser user,\n \n             for (ExternalResource resource : user.getResources()) {\n                 for (SchemaMapping mapping : resource.getMappings()) {\n-                    if (mapping.isAccountid() && mapping.getIntMappingType()\n-                            == IntMappingType.Username) {\n-\n-                        propByRes.addOldAccountId(\n-                                resource.getName(), oldUsername);\n+                    if (mapping.isAccountid() && mapping.getIntMappingType() == IntMappingType.Username) {\n+                        propByRes.addOldAccountId(resource.getName(), oldUsername);\n                     }\n                 }\n             }"},{"sha":"9c3b385056eaba8acd74f61b60ee33e7d73ce9c2","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":66,"deletions":460,"changes":526,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -24,18 +24,13 @@\n import java.util.List;\n import java.util.Map;\n import javassist.NotFoundException;\n-import org.apache.commons.lang.RandomStringUtils;\n-import org.apache.commons.lang.StringUtils;\n-import org.identityconnectors.common.security.GuardedByteArray;\n-import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n-import org.identityconnectors.framework.common.objects.Uid;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n@@ -44,14 +39,10 @@\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n-import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.SyncopeUserCond;\n-import org.syncope.client.to.AbstractAttributableTO;\n-import org.syncope.client.to.AttributeTO;\n-import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.Entitlement;\n@@ -74,8 +65,9 @@\n import org.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.syncope.core.rest.data.UserDataBinder;\n import org.syncope.core.scheduling.SyncResult.Operation;\n+import org.syncope.core.util.ConnObjectUtil;\n import org.syncope.core.util.EntitlementUtil;\n-import org.syncope.core.util.JexlUtil;\n+import org.syncope.core.util.SchemaMappingUtil;\n import org.syncope.core.workflow.UserWorkflowAdapter;\n import org.syncope.core.workflow.WorkflowResult;\n import org.syncope.types.ConflictResolutionAction;\n@@ -144,312 +136,15 @@ public class SyncJob extends AbstractTaskJob {\n     private SyncJobActions actions;\n \n     /**\n-     * JEXL engine for evaluating connector's account link.\n+     * ConnectorObject util.\n      */\n     @Autowired\n-    private JexlUtil jexlUtil;\n+    private ConnObjectUtil connObjectUtil;\n \n     public void setActions(final SyncJobActions actions) {\n         this.actions = actions;\n     }\n \n-    /**\n-     * Extract password value from passed value (if instance of GuardedString or\n-     * GuardedByteArray).\n-     *\n-     * @param pwd received from the underlying connector\n-     * @return password value\n-     */\n-    private String getPassword(final Object pwd) {\n-        final StringBuilder result = new StringBuilder();\n-\n-        if (pwd instanceof GuardedString) {\n-            ((GuardedString) pwd).access(new GuardedString.Accessor() {\n-\n-                @Override\n-                public void access(final char[] clearChars) {\n-                    result.append(clearChars);\n-                }\n-            });\n-        } else if (pwd instanceof GuardedByteArray) {\n-            ((GuardedByteArray) pwd).access(new GuardedByteArray.Accessor() {\n-\n-                @Override\n-                public void access(final byte[] clearBytes) {\n-                    result.append(new String(clearBytes));\n-                }\n-            });\n-        } else if (pwd instanceof String) {\n-            result.append((String) pwd);\n-        } else {\n-            result.append(pwd.toString());\n-        }\n-\n-        return result.toString();\n-    }\n-\n-    private AttributeTO evaluateAttrTemplate(\n-            final AbstractAttributableTO attributableTO,\n-            final AttributeTO template) {\n-\n-        AttributeTO result = new AttributeTO();\n-        result.setSchema(template.getSchema());\n-\n-        if (template.getValues() != null && !template.getValues().isEmpty()) {\n-            for (String value : template.getValues()) {\n-                String evaluated = jexlUtil.evaluate(value, attributableTO);\n-                if (StringUtils.isNotBlank(evaluated)) {\n-                    result.addValue(evaluated);\n-                }\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    private void fillFromTemplate(final AbstractAttributableTO attributableTO,\n-            final AbstractAttributableTO template) {\n-\n-        Map<String, AttributeTO> currentAttrMap =\n-                attributableTO.getAttributeMap();\n-        for (AttributeTO attrTO : template.getAttributes()) {\n-            if (!currentAttrMap.containsKey(attrTO.getSchema())) {\n-                attributableTO.addAttribute(\n-                        evaluateAttrTemplate(attributableTO, attrTO));\n-            }\n-        }\n-\n-        currentAttrMap = attributableTO.getDerivedAttributeMap();\n-        for (AttributeTO attrTO : template.getDerivedAttributes()) {\n-            if (!currentAttrMap.containsKey(attrTO.getSchema())) {\n-                attributableTO.addDerivedAttribute(attrTO);\n-            }\n-        }\n-\n-        currentAttrMap = attributableTO.getVirtualAttributeMap();\n-        for (AttributeTO attrTO : template.getDerivedAttributes()) {\n-            if (!currentAttrMap.containsKey(attrTO.getSchema())) {\n-                attributableTO.addVirtualAttribute(\n-                        evaluateAttrTemplate(attributableTO, attrTO));\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Build an UserTO out of connector object attributes and schema mapping.\n-     *\n-     * @param obj connector object\n-     * @return UserTO for the user to be created\n-     */\n-    private UserTO getUserTO(final ConnectorObject obj) {\n-        final SyncTask syncTask = (SyncTask) this.task;\n-\n-        final UserTO userTO = new UserTO();\n-\n-        // 1. fill with data from connector object\n-        for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n-            Attribute attribute = obj.getAttributeByName(\n-                    mapping.isAccountid()\n-                    ? Uid.NAME\n-                    : mapping.isPassword()\n-                    ? OperationalAttributes.PASSWORD_NAME\n-                    : mapping.getExtAttrName());\n-\n-            AttributeTO attributeTO;\n-            switch (mapping.getIntMappingType()) {\n-                case SyncopeUserId:\n-                    break;\n-\n-                case Password:\n-                    if (attribute != null && attribute.getValue() != null\n-                            && !attribute.getValue().isEmpty()) {\n-\n-                        userTO.setPassword(\n-                                getPassword(attribute.getValue().get(0)));\n-                    }\n-                    break;\n-\n-                case Username:\n-                    userTO.setUsername(\n-                            attribute == null || attribute.getValue().isEmpty()\n-                            ? null : attribute.getValue().get(0).toString());\n-                    break;\n-\n-                case UserSchema:\n-                    attributeTO = new AttributeTO();\n-                    attributeTO.setSchema(mapping.getIntAttrName());\n-                    for (Object value : attribute == null\n-                            ? Collections.EMPTY_LIST : attribute.getValue()) {\n-\n-                        attributeTO.addValue(value.toString());\n-                    }\n-                    userTO.addAttribute(attributeTO);\n-                    break;\n-\n-                case UserDerivedSchema:\n-                    attributeTO = new AttributeTO();\n-                    attributeTO.setSchema(mapping.getIntAttrName());\n-                    userTO.addDerivedAttribute(attributeTO);\n-                    break;\n-\n-                case UserVirtualSchema:\n-                    attributeTO = new AttributeTO();\n-                    attributeTO.setSchema(mapping.getIntAttrName());\n-                    userTO.addVirtualAttribute(attributeTO);\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n-        // 2. add data from defined template (if any)\n-        UserTO template = syncTask.getUserTemplate();\n-        if (template != null) {\n-            if (StringUtils.isBlank(userTO.getUsername())\n-                    && StringUtils.isNotBlank(template.getUsername())) {\n-\n-                String evaluated =\n-                        jexlUtil.evaluate(template.getUsername(), userTO);\n-                if (StringUtils.isNotBlank(evaluated)) {\n-                    userTO.setUsername(template.getUsername());\n-                }\n-            }\n-\n-            if (StringUtils.isBlank(userTO.getPassword())\n-                    && StringUtils.isNotBlank(template.getPassword())) {\n-\n-                String evaluated =\n-                        jexlUtil.evaluate(template.getPassword(), userTO);\n-                if (StringUtils.isNotBlank(evaluated)) {\n-                    userTO.setPassword(template.getPassword());\n-                }\n-            }\n-\n-            fillFromTemplate(userTO, template);\n-\n-            for (String resource : template.getResources()) {\n-                userTO.addResource(resource);\n-            }\n-\n-            Map<Long, MembershipTO> currentMembs = userTO.getMembershipMap();\n-            for (MembershipTO membTO : template.getMemberships()) {\n-                MembershipTO membTBU;\n-                if (currentMembs.containsKey(membTO.getRoleId())) {\n-                    membTBU = currentMembs.get(membTO.getRoleId());\n-                } else {\n-                    membTBU = new MembershipTO();\n-                    membTBU.setRoleId(membTO.getRoleId());\n-                    userTO.addMembership(membTBU);\n-                }\n-                fillFromTemplate(membTBU, membTO);\n-            }\n-        }\n-\n-        // 3. if password was not set above, generate a random string\n-        if (StringUtils.isBlank(userTO.getPassword())) {\n-            userTO.setPassword(RandomStringUtils.randomAlphanumeric(16));\n-        }\n-\n-        return userTO;\n-    }\n-\n-    /**\n-     * Build an UserMod out of connector object attributes and schema mapping.\n-     *\n-     * @param userId user to be updated\n-     * @param obj connector object\n-     * @return UserMod for the user to be updated\n-     */\n-    private UserMod getUserMod(final Long userId, final ConnectorObject obj) {\n-\n-        final SyncTask syncTask = (SyncTask) this.task;\n-\n-        final UserMod userMod = new UserMod();\n-        userMod.setId(userId);\n-\n-        for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n-            Attribute attribute = obj.getAttributeByName(\n-                    mapping.isAccountid()\n-                    ? Uid.NAME\n-                    : mapping.isPassword()\n-                    ? OperationalAttributes.PASSWORD_NAME\n-                    : mapping.getExtAttrName());\n-\n-            List<Object> values = attribute == null\n-                    ? Collections.EMPTY_LIST : attribute.getValue();\n-\n-            AttributeMod attributeMod;\n-            switch (mapping.getIntMappingType()) {\n-                case SyncopeUserId:\n-                    break;\n-\n-                case Password:\n-                    attribute = obj.getAttributeByName(\n-                            OperationalAttributes.PASSWORD_NAME);\n-\n-                    if (attribute != null && attribute.getValue() != null\n-                            && !attribute.getValue().isEmpty()) {\n-\n-                        String password =\n-                                getPassword(attribute.getValue().get(0));\n-                        // update password if and only if password has really \n-                        // changed\n-                        try {\n-                            if (!userDataBinder.verifyPassword(userId,\n-                                    password)) {\n-\n-                                userMod.setPassword(password);\n-                            }\n-                        } catch (NotFoundException e) {\n-                            LOG.error(\"Could not find user {}\", userId, e);\n-                        } catch (UnauthorizedRoleException e) {\n-                            LOG.error(\"Not allowed to read user {}\", userId, e);\n-                        }\n-                    }\n-                    break;\n-\n-                case Username:\n-                    if (values != null && !values.isEmpty()) {\n-                        userMod.setUsername(values.get(0).toString());\n-                    }\n-                    break;\n-\n-                case UserSchema:\n-                    userMod.addAttributeToBeRemoved(\n-                            mapping.getIntAttrName());\n-\n-                    attributeMod = new AttributeMod();\n-                    attributeMod.setSchema(mapping.getIntAttrName());\n-                    for (Object value : values) {\n-                        attributeMod.addValueToBeAdded(value.toString());\n-                    }\n-                    userMod.addAttributeToBeUpdated(attributeMod);\n-                    break;\n-\n-                case UserDerivedSchema:\n-                    userMod.addDerivedAttributeToBeAdded(\n-                            mapping.getIntAttrName());\n-                    break;\n-\n-                case UserVirtualSchema:\n-                    userMod.addVirtualAttributeToBeRemoved(\n-                            mapping.getIntAttrName());\n-\n-                    attributeMod = new AttributeMod();\n-                    attributeMod.setSchema(mapping.getIntAttrName());\n-                    for (Object value : values) {\n-                        attributeMod.addValueToBeAdded(value.toString());\n-                    }\n-                    userMod.addVirtualAttributeToBeUpdated(attributeMod);\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n-        return userMod;\n-    }\n-\n     /**\n      * Find users based on mapped uid value (or previous uid value, if updated).\n      *\n@@ -485,30 +180,9 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n                     new HashMap<String, Attribute>();\n \n             for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n-                String key;\n-                switch (mapping.getIntMappingType()) {\n-                    case SyncopeUserId:\n-                        key = \"id\";\n-                        break;\n-\n-                    case Username:\n-                        key = \"username\";\n-                        break;\n-\n-                    case Password:\n-                        key = \"password\";\n-                        break;\n-\n-                    default:\n-                        key = mapping.getIntAttrName();\n-                }\n-\n-                extValues.put(key, object.getAttributeByName(\n-                        mapping.isAccountid()\n-                        ? Uid.NAME\n-                        : mapping.isPassword()\n-                        ? OperationalAttributes.PASSWORD_NAME\n-                        : mapping.getExtAttrName()));\n+                extValues.put(\n+                        SchemaMappingUtil.getIntAttrName(mapping),\n+                        object.getAttributeByName(SchemaMappingUtil.getExtAttrName(mapping)));\n             }\n \n             // search user by attributes specified into the policy\n@@ -520,23 +194,18 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n                 AttributeCond.Type type;\n                 String expression = null;\n \n-                if (value == null\n-                        || value.getValue() == null\n-                        || value.getValue().isEmpty()) {\n-\n+                if (value == null || value.getValue() == null || value.getValue().isEmpty()) {\n                     type = AttributeCond.Type.ISNULL;\n                 } else {\n                     type = AttributeCond.Type.EQ;\n                     expression = value.getValue().size() > 1\n-                            ? value.getValue().toString()\n-                            : value.getValue().get(0).toString();\n+                            ? value.getValue().toString() : value.getValue().get(0).toString();\n                 }\n \n                 NodeCond nodeCond;\n \n                 // just Username or SyncopeUserId can be selected to be used\n-                if (\"id\".equalsIgnoreCase(schema)\n-                        || \"username\".equalsIgnoreCase(schema)) {\n+                if (\"id\".equalsIgnoreCase(schema) || \"username\".equalsIgnoreCase(schema)) {\n \n                     final SyncopeUserCond cond = new SyncopeUserCond();\n                     cond.setSchema(schema);\n@@ -554,23 +223,20 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n                     nodeCond = NodeCond.getLeafCond(cond);\n                 }\n \n-                searchCondition = searchCondition != null\n-                        ? NodeCond.getAndCond(searchCondition, nodeCond)\n-                        : nodeCond;\n+                searchCondition = searchCondition != null ? NodeCond.getAndCond(searchCondition, nodeCond) : nodeCond;\n             }\n \n-            List<SyncopeUser> users = userSearchDAO.search(\n-                    EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n-                    searchCondition);\n+            List<SyncopeUser> users =\n+                    userSearchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition);\n             for (SyncopeUser user : users) {\n                 result.add(user.getId());\n             }\n         } else {\n             final SyncopeUser found;\n             List<SyncopeUser> users;\n \n-            final SchemaMapping accountIdMap =\n-                    syncTask.getResource().getAccountIdMapping();\n+            final SchemaMapping accountIdMap = syncTask.getResource().getAccountIdMapping();\n+\n             switch (accountIdMap.getIntMappingType()) {\n                 case Username:\n                     found = userDAO.find(uid);\n@@ -589,17 +255,15 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n                 case UserSchema:\n                     final UAttrValue value = new UAttrValue();\n                     value.setStringValue(uid);\n-                    users = userDAO.findByAttrValue(\n-                            accountIdMap.getIntAttrName(), value);\n+                    users = userDAO.findByAttrValue(accountIdMap.getIntAttrName(), value);\n                     for (SyncopeUser user : users) {\n                         result.add(user.getId());\n                     }\n                     break;\n \n                 case UserDerivedSchema:\n                     try {\n-                        users = userDAO.findByDerAttrValue(\n-                                accountIdMap.getIntAttrName(), uid);\n+                        users = userDAO.findByDerAttrValue(accountIdMap.getIntAttrName(), uid);\n                         for (SyncopeUser user : users) {\n                             result.add(user.getId());\n                         }\n@@ -609,8 +273,7 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n                     break;\n \n                 default:\n-                    LOG.error(\"Invalid accountId type '{}'\",\n-                            accountIdMap.getIntMappingType());\n+                    LOG.error(\"Invalid accountId type '{}'\", accountIdMap.getIntMappingType());\n             }\n         }\n \n@@ -623,7 +286,7 @@ private SyncResult createUser(final SyncDelta delta, final boolean dryRun)\n         final SyncResult result = new SyncResult();\n         result.setOperation(Operation.CREATE);\n \n-        UserTO userTO = getUserTO(delta.getObject());\n+        UserTO userTO = connObjectUtil.getUserTO(delta.getObject(), (SyncTask) task);\n \n         actions.beforeCreate(delta, userTO);\n \n@@ -639,27 +302,21 @@ private SyncResult createUser(final SyncDelta delta, final boolean dryRun)\n                 // Check for status synchronization ...\n                 // --------------------------\n                 if (((SyncTask) this.task).isSyncStatus()) {\n-                    Attribute status = AttributeUtil.find(\n-                            OperationalAttributes.ENABLE_NAME,\n-                            delta.getObject().getAttributes());\n+                    Attribute status =\n+                            AttributeUtil.find(OperationalAttributes.ENABLE_NAME, delta.getObject().getAttributes());\n \n                     if (status != null) {\n                         enabled = status != null\n                                 && status.getValue() != null\n-                                && !status.getValue().isEmpty()\n-                                ? (Boolean) status.getValue().get(0) : null;\n+                                && !status.getValue().isEmpty() ? (Boolean) status.getValue().get(0) : null;\n                     }\n                 }\n                 // --------------------------\n \n-                WorkflowResult<Map.Entry<Long, Boolean>> created =\n-                        wfAdapter.create(userTO, true, enabled);\n+                WorkflowResult<Map.Entry<Long, Boolean>> created = wfAdapter.create(userTO, true, enabled);\n \n-                List<PropagationTask> tasks =\n-                        propagationManager.getCreateTaskIds(\n-                        created, userTO.getPassword(), null,\n-                        Collections.singleton(\n-                        ((SyncTask) this.task).getResource().getName()));\n+                List<PropagationTask> tasks = propagationManager.getCreateTaskIds(created, userTO.getPassword(), null,\n+                        Collections.singleton(((SyncTask) this.task).getResource().getName()));\n                 propagationManager.execute(tasks);\n \n                 userTO = userDataBinder.getUserTO(created.getResult().getKey());\n@@ -668,13 +325,11 @@ private SyncResult createUser(final SyncDelta delta, final boolean dryRun)\n                 result.setUsername(userTO.getUsername());\n                 result.setStatus(Status.SUCCESS);\n             } catch (PropagationException e) {\n-                LOG.error(\"Could not propagate user \"\n-                        + delta.getUid().getUidValue(), e);\n+                LOG.error(\"Could not propagate user \" + delta.getUid().getUidValue(), e);\n             } catch (Throwable t) {\n                 result.setStatus(Status.FAILURE);\n                 result.setMessage(t.getMessage());\n-                LOG.error(\"Could not create user \"\n-                        + delta.getUid().getUidValue(), t);\n+                LOG.error(\"Could not create user \" + delta.getUid().getUidValue(), t);\n             }\n         }\n \n@@ -703,9 +358,7 @@ private void updateUsers(final SyncDelta delta,\n                 UserTO userTO = userDataBinder.getUserTO(userId);\n                 try {\n \n-                    final UserMod userMod =\n-                            getUserMod(userId, delta.getObject());\n-\n+                    final UserMod userMod = connObjectUtil.getUserMod(userId, delta.getObject(), (SyncTask) task);\n                     actions.beforeUpdate(delta, userTO, userMod);\n \n                     result.setStatus(Status.SUCCESS);\n@@ -716,26 +369,19 @@ private void updateUsers(final SyncDelta delta,\n                         WorkflowResult<Long> updated =\n                                 wfAdapter.update(userMod);\n \n-                        List<PropagationTask> tasks =\n-                                propagationManager.getUpdateTaskIds(\n-                                updated,\n-                                userMod.getPassword(),\n-                                null, null, null,\n-                                Collections.singleton(\n-                                ((SyncTask) this.task).getResource().getName()));\n+                        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n+                                updated, userMod.getPassword(), null, null, null,\n+                                Collections.singleton(((SyncTask) this.task).getResource().getName()));\n \n                         propagationManager.execute(tasks);\n-\n                         userTO = userDataBinder.getUserTO(updated.getResult());\n                     }\n                 } catch (PropagationException e) {\n-                    LOG.error(\"Could not propagate user \"\n-                            + delta.getUid().getUidValue(), e);\n+                    LOG.error(\"Could not propagate user \" + delta.getUid().getUidValue(), e);\n                 } catch (Throwable t) {\n                     result.setStatus(Status.FAILURE);\n                     result.setMessage(t.getMessage());\n-                    LOG.error(\"Could not update user \"\n-                            + delta.getUid().getUidValue(), t);\n+                    LOG.error(\"Could not update user \" + delta.getUid().getUidValue(), t);\n                 }\n \n                 actions.after(delta, userTO, result);\n@@ -773,9 +419,8 @@ private void deleteUsers(final SyncDelta delta,\n \n                 if (!dryRun) {\n                     try {\n-                        List<PropagationTask> tasks =\n-                                propagationManager.getDeleteTaskIds(userId,\n-                                ((SyncTask) this.task).getResource().getName());\n+                        List<PropagationTask> tasks = propagationManager.getDeleteTaskIds(\n+                                userId, ((SyncTask) this.task).getResource().getName());\n                         propagationManager.execute(tasks);\n                     } catch (Exception e) {\n                         LOG.error(\"Could not propagate user \" + userId, e);\n@@ -882,46 +527,35 @@ private String createReport(final List<SyncResult> syncResults,\n                 append(deleted.size()).append('/').append(deletedFailed.size());\n \n         // Failures\n-        if (syncTraceLevel == TraceLevel.FAILURES\n-                || syncTraceLevel == TraceLevel.ALL) {\n+        if (syncTraceLevel == TraceLevel.FAILURES || syncTraceLevel == TraceLevel.ALL) {\n \n             if (!createdFailed.isEmpty()) {\n                 report.append(\"\\n\\nFailed to create: \");\n-                report.append(SyncResult.reportSetOfSynchronizationResult(\n-                        createdFailed,\n-                        syncTraceLevel));\n+                report.append(SyncResult.reportSetOfSynchronizationResult(createdFailed, syncTraceLevel));\n             }\n             if (!updatedFailed.isEmpty()) {\n                 report.append(\"\\nFailed to update: \");\n-                report.append(SyncResult.reportSetOfSynchronizationResult(\n-                        updatedFailed,\n-                        syncTraceLevel));\n+                report.append(SyncResult.reportSetOfSynchronizationResult(updatedFailed, syncTraceLevel));\n             }\n             if (!deletedFailed.isEmpty()) {\n                 report.append(\"\\nFailed to delete: \");\n-                report.append(SyncResult.reportSetOfSynchronizationResult(\n-                        deletedFailed,\n-                        syncTraceLevel));\n+                report.append(SyncResult.reportSetOfSynchronizationResult(deletedFailed, syncTraceLevel));\n             }\n         }\n \n         // Succeeded, only if on 'ALL' level\n         if (syncTraceLevel == TraceLevel.ALL) {\n             report.append(\"\\n\\nCreated:\\n\").\n-                    append(SyncResult.reportSetOfSynchronizationResult(created,\n-                    syncTraceLevel)).\n-                    append(\"\\nUpdated:\\n\").append(SyncResult.\n-                    reportSetOfSynchronizationResult(updated, syncTraceLevel)).\n-                    append(\"\\nDeleted:\\n\").append(SyncResult.\n-                    reportSetOfSynchronizationResult(deleted, syncTraceLevel));\n+                    append(SyncResult.reportSetOfSynchronizationResult(created, syncTraceLevel)).\n+                    append(\"\\nUpdated:\\n\").append(SyncResult.reportSetOfSynchronizationResult(updated, syncTraceLevel)).\n+                    append(\"\\nDeleted:\\n\").append(SyncResult.reportSetOfSynchronizationResult(deleted, syncTraceLevel));\n         }\n \n         return report.toString();\n     }\n \n     /**\n-     * Used to simulate authentication in order to perform updates through\n-     * AbstractUserWorkflowAdapter.\n+     * Used to simulate authentication in order to perform updates through AbstractUserWorkflowAdapter.\n      */\n     private void setupSecurity() {\n         final List<GrantedAuthority> authorities =\n@@ -931,12 +565,10 @@ private void setupSecurity() {\n             authorities.add(new SimpleGrantedAuthority(entitlement.getName()));\n         }\n \n-        final UserDetails userDetails = new User(\n-                \"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n+        final UserDetails userDetails = new User(\"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n \n         SecurityContextHolder.getContext().setAuthentication(\n-                new UsernamePasswordAuthenticationToken(\n-                userDetails, \"FAKE_PASSWORD\", authorities));\n+                new UsernamePasswordAuthenticationToken(userDetails, \"FAKE_PASSWORD\", authorities));\n     }\n \n     @Override\n@@ -949,8 +581,7 @@ protected String doExecute(final boolean dryRun)\n         }\n \n         if (!(task instanceof SyncTask)) {\n-            throw new JobExecutionException(\n-                    \"Task \" + taskId + \" isn't a SyncTask\");\n+            throw new JobExecutionException(\"Task \" + taskId + \" isn't a SyncTask\");\n         }\n \n         final SyncTask syncTask = (SyncTask) this.task;\n@@ -960,21 +591,16 @@ protected String doExecute(final boolean dryRun)\n             connector = connInstanceLoader.getConnector(syncTask.getResource());\n         } catch (Exception e) {\n             final String msg = String.format(\n-                    \"Connector instance bean for resource %s \"\n-                    + \"and connInstance %s not found\",\n-                    syncTask.getResource(),\n-                    syncTask.getResource().getConnector());\n+                    \"Connector instance bean for resource %s and connInstance %s not found\",\n+                    syncTask.getResource(), syncTask.getResource().getConnector());\n \n             throw new JobExecutionException(msg, e);\n         }\n \n-        final SchemaMapping accountIdMap =\n-                syncTask.getResource().getAccountIdMapping();\n+        final SchemaMapping accountIdMap = syncTask.getResource().getAccountIdMapping();\n \n         if (accountIdMap == null) {\n-            throw new JobExecutionException(\n-                    \"Invalid account id mapping for resource \"\n-                    + syncTask.getResource());\n+            throw new JobExecutionException(\"Invalid account id mapping for resource \" + syncTask.getResource());\n         }\n \n         LOG.debug(\"Execute synchronization with token {}\",\n@@ -986,13 +612,11 @@ protected String doExecute(final boolean dryRun)\n         actions.beforeAll(syncTask);\n \n         try {\n-            final SyncPolicy syncPolicy =\n-                    syncTask.getResource().getSyncPolicy();\n+            final SyncPolicy syncPolicy = syncTask.getResource().getSyncPolicy();\n \n             final ConflictResolutionAction conflictResolutionAction =\n                     syncPolicy != null && syncPolicy.getSpecification() != null\n-                    ? ((SyncPolicySpec) syncPolicy.getSpecification()).\n-                    getConflictResolutionAction()\n+                    ? ((SyncPolicySpec) syncPolicy.getSpecification()).getConflictResolutionAction()\n                     : ConflictResolutionAction.IGNORE;\n \n             if (syncTask.isFullReconciliation()) {\n@@ -1004,11 +628,8 @@ protected String doExecute(final boolean dryRun)\n                             public boolean handle(final SyncDelta delta) {\n                                 try {\n \n-                                    return results.addAll(handleDelta(\n-                                            syncTask,\n-                                            delta,\n-                                            conflictResolutionAction,\n-                                            dryRun));\n+                                    return results.addAll(\n+                                            handleDelta(syncTask, delta, conflictResolutionAction, dryRun));\n \n                                 } catch (JobExecutionException e) {\n                                     LOG.error(\"Reconciliation failed\", e);\n@@ -1026,11 +647,8 @@ public boolean handle(final SyncDelta delta) {\n                             public boolean handle(final SyncDelta delta) {\n                                 try {\n \n-                                    return results.addAll(handleDelta(\n-                                            syncTask,\n-                                            delta,\n-                                            conflictResolutionAction,\n-                                            dryRun));\n+                                    return results.addAll(\n+                                            handleDelta(syncTask, delta, conflictResolutionAction, dryRun));\n \n                                 } catch (JobExecutionException e) {\n                                     LOG.error(\"Synchronization failed\", e);\n@@ -1043,15 +661,12 @@ public boolean handle(final SyncDelta delta) {\n \n             if (!dryRun && !syncTask.isFullReconciliation()) {\n                 try {\n-                    ExternalResource resource =\n-                            resourceDAO.find(syncTask.getResource().getName());\n-\n+                    ExternalResource resource = resourceDAO.find(syncTask.getResource().getName());\n                     resource.setSyncToken(connector.getLatestSyncToken());\n                     resourceDAO.save(resource);\n \n                 } catch (Throwable t) {\n-                    throw new JobExecutionException(\"While updating SyncToken\",\n-                            t);\n+                    throw new JobExecutionException(\"While updating SyncToken\", t);\n                 }\n             }\n         } catch (Throwable t) {\n@@ -1060,8 +675,7 @@ public boolean handle(final SyncDelta delta) {\n \n         actions.afterAll(syncTask, results);\n \n-        final String result = createReport(\n-                results, syncTask.getResource().getSyncTraceLevel(), dryRun);\n+        final String result = createReport(results, syncTask.getResource().getSyncTraceLevel(), dryRun);\n \n         LOG.debug(\"Sync result: {}\", result);\n \n@@ -1087,8 +701,7 @@ protected final List<SyncResult> handleDelta(\n \n         final List<SyncResult> results = new ArrayList<SyncResult>();\n \n-        LOG.debug(\"Process '{}' for '{}'\",\n-                delta.getDeltaType(), delta.getUid().getUidValue());\n+        LOG.debug(\"Process '{}' for '{}'\", delta.getDeltaType(), delta.getUid().getUidValue());\n \n         final List<Long> users = findExistingUsers(delta);\n \n@@ -1101,22 +714,19 @@ protected final List<SyncResult> handleDelta(\n                         LOG.debug(\"SyncTask not configured for create\");\n                     }\n                 } else if (users.size() == 1) {\n-                    updateUsers(delta, users.subList(0, 1),\n-                            dryRun, results);\n+                    updateUsers(delta, users.subList(0, 1), dryRun, results);\n                 } else {\n                     switch (conflictResolutionAction) {\n                         case IGNORE:\n                             LOG.error(\"More than one match {}\", users);\n                             break;\n \n                         case FIRSTMATCH:\n-                            updateUsers(delta, users.subList(0, 1),\n-                                    dryRun, results);\n+                            updateUsers(delta, users.subList(0, 1), dryRun, results);\n                             break;\n \n                         case LASTMATCH:\n-                            updateUsers(delta, users.subList(users.size()\n-                                    - 1, users.size()), dryRun, results);\n+                            updateUsers(delta, users.subList(users.size() - 1, users.size()), dryRun, results);\n                             break;\n \n                         case ALL:\n@@ -1140,14 +750,11 @@ protected final List<SyncResult> handleDelta(\n                             break;\n \n                         case FIRSTMATCH:\n-                            deleteUsers(delta, users.subList(0, 1),\n-                                    dryRun, results);\n+                            deleteUsers(delta, users.subList(0, 1), dryRun, results);\n                             break;\n \n                         case LASTMATCH:\n-                            deleteUsers(delta, users.subList(\n-                                    users.size() - 1, users.size()),\n-                                    dryRun, results);\n+                            deleteUsers(delta, users.subList(users.size() - 1, users.size()), dryRun, results);\n                             break;\n \n                         case ALL:\n@@ -1176,8 +783,7 @@ protected boolean hasToBeRegistered(final TaskExec execution) {\n         // True if either failed and failures have to be registered, or if ALL\n         // has to be registered.\n         return (Status.valueOf(execution.getStatus()) == Status.FAILURE\n-                && syncTask.getResource().getSyncTraceLevel().ordinal()\n-                >= TraceLevel.FAILURES.ordinal())\n+                && syncTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n                 || syncTask.getResource().getSyncTraceLevel() == TraceLevel.ALL;\n     }\n }"},{"sha":"b8f2234520bfc13c0da43e8c463d30ef6509afc5","filename":"core/src/main/java/org/syncope/core/util/ConnBundleManager.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnBundleManager.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -22,9 +22,7 @@\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.List;\n-\n import javassist.NotFoundException;\n-\n import org.identityconnectors.common.IOUtil;\n import org.identityconnectors.framework.api.APIConfiguration;\n import org.identityconnectors.framework.api.ConfigurationProperties;"},{"sha":"4cde5e1e9b981dde13bc2a8488d921996e9680e6","filename":"core/src/main/java/org/syncope/core/util/SchemaMappingUtil.java","status":"modified","additions":236,"deletions":2,"changes":238,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -19,15 +19,42 @@\n package org.syncope.core.util;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.Uid;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.membership.MDerSchema;\n+import org.syncope.core.persistence.beans.membership.MSchema;\n+import org.syncope.core.persistence.beans.membership.MVirSchema;\n+import org.syncope.core.persistence.beans.role.RDerSchema;\n+import org.syncope.core.persistence.beans.role.RSchema;\n+import org.syncope.core.persistence.beans.role.RVirSchema;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.beans.user.UAttr;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.beans.user.UDerSchema;\n+import org.syncope.core.persistence.beans.user.USchema;\n+import org.syncope.core.persistence.beans.user.UVirSchema;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.types.IntMappingType;\n \n public class SchemaMappingUtil {\n \n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(SchemaMappingUtil.class);\n+\n     public static String getExtAttrName(final SchemaMapping mapping) {\n         final String name;\n \n@@ -42,8 +69,163 @@ public static String getExtAttrName(final SchemaMapping mapping) {\n         return name;\n     }\n \n+    public static String getIntAttrName(final SchemaMapping mapping) {\n+        final String name;\n+\n+        switch (mapping.getIntMappingType()) {\n+            case SyncopeUserId:\n+                name = \"id\";\n+                break;\n+            case Username:\n+                name = \"username\";\n+                break;\n+            case Password:\n+                name = \"password\";\n+                break;\n+            default:\n+                name = mapping.getIntAttrName();\n+        }\n+\n+        return name;\n+    }\n+\n+    public static String getIntAttrName(final SchemaMapping mapping, final IntMappingType type) {\n+        return type == mapping.getIntMappingType() ? getIntAttrName(mapping) : null;\n+    }\n+\n+    /**\n+     * Get attribute values.\n+     *\n+     * @param mapping mapping.\n+     * @param attributables list of attributables.\n+     * @param password password.\n+     * @return schema and attribute values.\n+     */\n+    public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(\n+            final SchemaMapping mapping,\n+            final List<AbstractAttributable> attributables,\n+            final String password,\n+            final SchemaDAO schemaDAO) {\n+\n+        LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", attributables, mapping.getIntMappingType());\n+\n+        AbstractSchema schema = null;\n+\n+        List<AbstractAttrValue> values = new ArrayList<AbstractAttrValue>();\n+\n+        switch (mapping.getIntMappingType()) {\n+            case UserSchema:\n+            case RoleSchema:\n+            case MembershipSchema:\n+                schema = schemaDAO.find(\n+                        mapping.getIntAttrName(),\n+                        SchemaMappingUtil.getIntMappingTypeClass(mapping.getIntMappingType()));\n+\n+                for (AbstractAttributable attributable : attributables) {\n+                    final UAttr attr = attributable.getAttribute(mapping.getIntAttrName());\n+\n+                    if (attr != null && attr.getValues() != null) {\n+                        values.addAll(schema.isUniqueConstraint()\n+                                ? Collections.singletonList(attr.getUniqueValue()) : attr.getValues());\n+                    }\n+\n+                    LOG.debug(\"Retrieved attribute {}\"\n+                            + \"\\n* IntAttrName {}\"\n+                            + \"\\n* IntMappingType {}\"\n+                            + \"\\n* Attribute values {}\",\n+                            new Object[]{attr, mapping.getIntAttrName(), mapping.getIntMappingType(), values});\n+                }\n+\n+                break;\n+\n+            case UserVirtualSchema:\n+            case RoleVirtualSchema:\n+            case MembershipVirtualSchema:\n+\n+                for (AbstractAttributable attributable : attributables) {\n+                    AbstractVirAttr virAttr = attributable.getVirtualAttribute(mapping.getIntAttrName());\n+\n+                    if (virAttr != null && virAttr.getValues() != null) {\n+                        for (String value : virAttr.getValues()) {\n+                            AbstractAttrValue attrValue = new UAttrValue();\n+                            attrValue.setStringValue(value);\n+                            values.add(attrValue);\n+                        }\n+                    }\n+\n+                    LOG.debug(\"Retrieved virtual attribute {}\"\n+                            + \"\\n* IntAttrName {}\"\n+                            + \"\\n* IntMappingType {}\"\n+                            + \"\\n* Attribute values {}\",\n+                            new Object[]{virAttr, mapping.getIntAttrName(), mapping.getIntMappingType(), values});\n+                }\n+                break;\n+\n+            case UserDerivedSchema:\n+            case RoleDerivedSchema:\n+            case MembershipDerivedSchema:\n+                for (AbstractAttributable attributable : attributables) {\n+                    AbstractDerAttr derAttr = attributable.getDerivedAttribute(\n+                            mapping.getIntAttrName());\n+\n+                    if (derAttr != null) {\n+                        AbstractAttrValue attrValue = new UAttrValue();\n+                        attrValue.setStringValue(\n+                                derAttr.getValue(attributable.getAttributes()));\n+                        values.add(attrValue);\n+                    }\n+\n+                    LOG.debug(\"Retrieved attribute {}\"\n+                            + \"\\n* IntAttrName {}\"\n+                            + \"\\n* IntMappingType {}\"\n+                            + \"\\n* Attribute values {}\",\n+                            new Object[]{derAttr, mapping.getIntAttrName(),\n+                                mapping.getIntMappingType(), values});\n+                }\n+                break;\n+\n+            case Username:\n+                for (AbstractAttributable attributable : attributables) {\n+                    AbstractAttrValue attrValue = new UAttrValue();\n+                    attrValue.setStringValue(((SyncopeUser) attributable).getUsername());\n+                    values.add(attrValue);\n+                }\n+                break;\n+\n+            case SyncopeUserId:\n+                for (AbstractAttributable attributable : attributables) {\n+                    AbstractAttrValue attrValue = new UAttrValue();\n+                    attrValue.setStringValue(attributable.getId().toString());\n+                    values.add(attrValue);\n+                }\n+                break;\n+\n+            case Password:\n+                AbstractAttrValue attrValue = new UAttrValue();\n+\n+                if (password != null) {\n+                    attrValue.setStringValue(password);\n+                }\n+\n+                values.add(attrValue);\n+                break;\n+\n+            default:\n+        }\n+\n+        LOG.debug(\"Retrived values '{}'\", values);\n+\n+        return new DefaultMapEntry(schema, values);\n+    }\n+\n     public static List<String> getIntValueAsStrings(\n             final AbstractAttributable attributable, final SchemaMapping mapping) {\n+        return getIntValueAsStrings(attributable, mapping, null);\n+    }\n+\n+    public static List<String> getIntValueAsStrings(\n+            final AbstractAttributable attributable, final SchemaMapping mapping, String clearPassword) {\n+\n         final List<String> value;\n \n         switch (mapping.getIntMappingType()) {\n@@ -52,8 +234,12 @@ public static List<String> getIntValueAsStrings(\n                 value.add(((SyncopeUser) attributable).getUsername());\n                 break;\n             case Password:\n-                value = new ArrayList<String>();\n-                value.add(((SyncopeUser) attributable).getPassword());\n+                if (clearPassword == null) {\n+                    value = null;\n+                } else {\n+                    value = new ArrayList<String>();\n+                    value.add(clearPassword);\n+                }\n                 break;\n             case UserSchema:\n             case RoleSchema:\n@@ -78,4 +264,52 @@ public static List<String> getIntValueAsStrings(\n \n         return value;\n     }\n+\n+    /**\n+     * For given source mapping type, return the corresponding Class object.\n+     *\n+     * @param intMappingType source mapping type\n+     * @return corresponding Class object, if any (can be null)\n+     */\n+    public static Class getIntMappingTypeClass(final IntMappingType intMappingType) {\n+\n+        Class result;\n+\n+        switch (intMappingType) {\n+            case UserSchema:\n+                result = USchema.class;\n+                break;\n+            case RoleSchema:\n+                result = RSchema.class;\n+                break;\n+            case MembershipSchema:\n+                result = MSchema.class;\n+                break;\n+\n+            case UserDerivedSchema:\n+                result = UDerSchema.class;\n+                break;\n+            case RoleDerivedSchema:\n+                result = RDerSchema.class;\n+                break;\n+            case MembershipDerivedSchema:\n+                result = MDerSchema.class;\n+                break;\n+\n+            case UserVirtualSchema:\n+                result = UVirSchema.class;\n+                break;\n+            case RoleVirtualSchema:\n+                result = RVirSchema.class;\n+                break;\n+            case MembershipVirtualSchema:\n+                result = MVirSchema.class;\n+                break;\n+\n+            default:\n+                result = null;\n+        }\n+\n+        return result;\n+    }\n }"},{"sha":"4ce2d368aa6f6da0122f1abbbe2a085bb20d756b","filename":"core/src/test/java/org/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -31,6 +31,7 @@\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.syncope.core.util.SchemaMappingUtil;\n import org.syncope.types.AttributableType;\n import org.syncope.types.IntMappingType;\n \n@@ -81,9 +82,8 @@ public void findAllByPriority() {\n \n     @Test\n     public void getAccountId() {\n-        SchemaMapping mapping = resourceDAO.getMappingForAccountId(\n-                \"ws-target-resource-2\");\n-        assertEquals(\"fullname\", mapping.getIntAttrName());\n+        SchemaMapping mapping = resourceDAO.getMappingForAccountId(\"ws-target-resource-2\");\n+        assertEquals(\"fullname\", SchemaMappingUtil.getIntAttrName(mapping));\n     }\n \n     @Test\n@@ -213,16 +213,14 @@ public void saveWithRoleMappingType() {\n \n         for (SchemaMapping schemaMapping : actual.getMappings()) {\n \n-            if (\"icon\".equals(schemaMapping.getIntAttrName())) {\n+            if (\"icon\".equals(SchemaMappingUtil.getIntAttrName(schemaMapping))) {\n                 assertTrue(IntMappingType.contains(\n-                        AttributableType.ROLE,\n-                        schemaMapping.getIntMappingType().toString()));\n+                        AttributableType.ROLE, schemaMapping.getIntMappingType().toString()));\n             }\n \n-            if (\"mderiveddata\".equals(schemaMapping.getIntAttrName())) {\n+            if (\"mderiveddata\".equals(SchemaMappingUtil.getIntAttrName(schemaMapping))) {\n                 assertTrue(IntMappingType.contains(\n-                        AttributableType.MEMBERSHIP,\n-                        schemaMapping.getIntMappingType().toString()));\n+                        AttributableType.MEMBERSHIP, schemaMapping.getIntMappingType().toString()));\n             }\n         }\n     }"},{"sha":"a0f3fee00e871241b085feb5187cce1cc011ec9a","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -44,6 +44,7 @@\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n+import org.syncope.core.util.SchemaMappingUtil;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.IntMappingType;\n \n@@ -101,10 +102,7 @@ public void issue42() {\n \n         Set<SchemaMapping> beforeUserIdMappings = new HashSet<SchemaMapping>();\n         for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (userId.getName().equals(mapping.getIntAttrName())\n-                    && mapping.getIntMappingType()\n-                    == IntMappingType.UserSchema) {\n-\n+            if (userId.getName().equals(SchemaMappingUtil.getIntAttrName(mapping, IntMappingType.UserSchema))) {\n                 beforeUserIdMappings.add(mapping);\n             }\n         }\n@@ -141,16 +139,12 @@ public void issue42() {\n \n         Set<SchemaMapping> afterUserIdMappings = new HashSet<SchemaMapping>();\n         for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (userId.getName().equals(mapping.getIntAttrName())\n-                    && mapping.getIntMappingType()\n-                    == IntMappingType.UserSchema) {\n-\n+            if (userId.getName().equals(SchemaMappingUtil.getIntAttrName(mapping, IntMappingType.UserSchema))) {\n                 afterUserIdMappings.add(mapping);\n             }\n         }\n \n-        assertEquals(beforeUserIdMappings.size(),\n-                afterUserIdMappings.size() - 1);\n+        assertEquals(beforeUserIdMappings.size(), afterUserIdMappings.size() - 1);\n     }\n \n     @Test"},{"sha":"20e2e0ac43993d027bd4427d5aa0ba409a0f26ec","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/945a38fffc703177403ffb0ab17fe4059477a31c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=945a38fffc703177403ffb0ab17fe4059477a31c","patch":"@@ -35,6 +35,7 @@\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.AbstractTest;\n import org.syncope.core.util.AttributableUtil;\n+import org.syncope.core.util.SchemaMappingUtil;\n import org.syncope.types.AttributableType;\n import org.syncope.types.IntMappingType;\n \n@@ -66,10 +67,7 @@ public void test1() {\n         // check for associated mappings\n         Set<SchemaMapping> mappings = new HashSet<SchemaMapping>();\n         for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (schema.getName().equals(mapping.getIntAttrName())\n-                    && mapping.getIntMappingType()\n-                    == IntMappingType.UserSchema) {\n-\n+            if (schema.getName().equals(SchemaMappingUtil.getIntAttrName(mapping, IntMappingType.UserSchema))) {\n                 mappings.add(mapping);\n             }\n         }\n@@ -88,10 +86,7 @@ public void test1() {\n         // check for mappings deletion\n         mappings = new HashSet<SchemaMapping>();\n         for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (\"fullname\".equals(mapping.getIntAttrName())\n-                    && mapping.getIntMappingType()\n-                    == IntMappingType.UserSchema) {\n-\n+            if (\"fullname\".equals(SchemaMappingUtil.getIntAttrName(mapping, IntMappingType.UserSchema))) {\n                 mappings.add(mapping);\n             }\n         }\n@@ -114,10 +109,7 @@ public void test2() {\n         // check for associated mappings\n         Set<SchemaMapping> mappings = new HashSet<SchemaMapping>();\n         for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (schema.getName().equals(mapping.getIntAttrName())\n-                    && mapping.getIntMappingType()\n-                    == IntMappingType.UserSchema) {\n-\n+            if (schema.getName().equals(SchemaMappingUtil.getIntAttrName(mapping, IntMappingType.UserSchema))) {\n                 mappings.add(mapping);\n             }\n         }"}]}