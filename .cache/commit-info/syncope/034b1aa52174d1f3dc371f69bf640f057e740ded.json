{"sha":"034b1aa52174d1f3dc371f69bf640f057e740ded","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAzNGIxYWE1MjE3NGQxZjNkYzM3MWY2OWJmNjQwZjA1N2U3NDBkZWQ=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-06-21T08:24:33Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-06-21T08:24:33Z"},"message":"SYNCOPE-97 #comment RestTemplate and HttpClientFactory with scope prototype\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1352448 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bdac564d0de933a0a321a4e383ad7de67793265e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bdac564d0de933a0a321a4e383ad7de67793265e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/034b1aa52174d1f3dc371f69bf640f057e740ded","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/034b1aa52174d1f3dc371f69bf640f057e740ded","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/034b1aa52174d1f3dc371f69bf640f057e740ded","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/034b1aa52174d1f3dc371f69bf640f057e740ded/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"21b8f02e504f357809e986cb24966b68b39627bb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/21b8f02e504f357809e986cb24966b68b39627bb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/21b8f02e504f357809e986cb24966b68b39627bb"}],"stats":{"total":604,"additions":353,"deletions":251},"files":[{"sha":"260bbafd7f6b9b35f6067a5ce6410680e58be78c","filename":"console/src/main/java/org/apache/syncope/console/SyncopeApplication.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -18,6 +18,18 @@\n  */\n package org.apache.syncope.console;\n \n+import org.apache.syncope.console.commons.XMLRolesReader;\n+import org.apache.syncope.console.pages.Configuration;\n+import org.apache.syncope.console.pages.Login;\n+import org.apache.syncope.console.pages.Logout;\n+import org.apache.syncope.console.pages.Reports;\n+import org.apache.syncope.console.pages.Resources;\n+import org.apache.syncope.console.pages.Roles;\n+import org.apache.syncope.console.pages.Schema;\n+import org.apache.syncope.console.pages.Tasks;\n+import org.apache.syncope.console.pages.Todo;\n+import org.apache.syncope.console.pages.Users;\n+import org.apache.syncope.console.pages.WelcomePage;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.RestartResponseAtInterceptPageException;\n@@ -36,18 +48,9 @@\n import org.apache.wicket.request.Response;\n import org.apache.wicket.request.resource.ContextRelativeResource;\n import org.apache.wicket.spring.injection.annot.SpringComponentInjector;\n-import org.apache.syncope.console.commons.XMLRolesReader;\n-import org.apache.syncope.console.pages.Configuration;\n-import org.apache.syncope.console.pages.Login;\n-import org.apache.syncope.console.pages.Logout;\n-import org.apache.syncope.console.pages.Reports;\n-import org.apache.syncope.console.pages.Resources;\n-import org.apache.syncope.console.pages.Roles;\n-import org.apache.syncope.console.pages.Schema;\n-import org.apache.syncope.console.pages.Tasks;\n-import org.apache.syncope.console.pages.Todo;\n-import org.apache.syncope.console.pages.Users;\n-import org.apache.syncope.console.pages.WelcomePage;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n \n /**\n  * SyncopeApplication class.\n@@ -75,7 +78,7 @@ protected void init() {\n         getRequestCycleListeners().add(new SyncopeRequestCycleListener());\n     }\n \n-    public void setupNavigationPane(final WebPage page, final XMLRolesReader xmlRolesReader, final boolean notsel,\n+    public void setupNavigationPanel(final WebPage page, final XMLRolesReader xmlRolesReader, final boolean notsel,\n             final String version) {\n \n         page.add(new Label(\"version\", \"Console: \" + version + \"; Core: \" + SyncopeSession.get().getCoreVersion()));\n@@ -151,9 +154,7 @@ public Session newSession(final Request request, final Response response) {\n \n     @Override\n     public Class getHomePage() {\n-        return SyncopeSession.get().isAuthenticated()\n-                ? WelcomePage.class\n-                : Login.class;\n+        return SyncopeSession.get().isAuthenticated() ? WelcomePage.class : Login.class;\n     }\n \n     @Override"},{"sha":"dd34f809856e38eeab203c0ffbc7f5c3a0f9e966","filename":"console/src/main/java/org/apache/syncope/console/SyncopeSession.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -19,11 +19,15 @@\n package org.apache.syncope.console;\n \n import java.text.SimpleDateFormat;\n+import org.apache.syncope.console.commons.Constants;\n import org.apache.wicket.Session;\n import org.apache.wicket.authroles.authorization.strategies.role.Roles;\n+import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.protocol.http.WebSession;\n import org.apache.wicket.request.Request;\n-import org.apache.syncope.console.commons.Constants;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n \n /**\n  * Custom Syncope Session class.\n@@ -38,12 +42,23 @@ public class SyncopeSession extends WebSession {\n \n     private Roles roles = new Roles();\n \n+    private RestTemplate restTemplate;\n+\n     public static SyncopeSession get() {\n         return (SyncopeSession) Session.get();\n     }\n \n     public SyncopeSession(final Request request) {\n         super(request);\n+\n+        final ApplicationContext applicationContext =\n+                WebApplicationContextUtils.getWebApplicationContext(WebApplication.get().getServletContext());\n+\n+        restTemplate = applicationContext.getBean(RestTemplate.class);\n+    }\n+\n+    public RestTemplate getRestTemplate() {\n+        return restTemplate;\n     }\n \n     public String getUserId() {"},{"sha":"09a46637929430bceb1cd4574836aeb21a89e148","filename":"console/src/main/java/org/apache/syncope/console/commons/HttpResourceStream.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -31,14 +31,14 @@\n import org.apache.http.entity.BasicHttpEntity;\n import org.apache.http.message.BasicHttpResponse;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n+import org.apache.syncope.console.SyncopeSession;\n import org.apache.wicket.util.lang.Args;\n import org.apache.wicket.util.resource.AbstractResourceStream;\n import org.apache.wicket.util.resource.IFixedLocationResourceStream;\n import org.apache.wicket.util.resource.ResourceStreamNotFoundException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.MediaType;\n-import org.springframework.web.client.RestTemplate;\n \n public class HttpResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream {\n \n@@ -48,18 +48,15 @@ public class HttpResourceStream extends AbstractResourceStream implements IFixed\n \n     private final URI uri;\n \n-    private final RestTemplate restTemplate;\n-\n     private transient HttpEntity responseEntity;\n \n     private transient String contentType;\n \n     private transient String filename;\n \n-    public HttpResourceStream(final String uri, final RestTemplate restTemplate) throws URISyntaxException {\n-\n+    public HttpResourceStream(final String uri)\n+            throws URISyntaxException {\n         this.uri = new URI(Args.notNull(uri, \"uri\"));\n-        this.restTemplate = Args.notNull(restTemplate, \"restTemplate\");\n     }\n \n     private HttpResponse buildFakeResponse(final String errorMessage) {\n@@ -85,9 +82,10 @@ private void execute() {\n \n         HttpGet getMethod = new HttpGet(this.uri);\n         HttpResponse response;\n+\n         try {\n-            response = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().execute(\n-                    getMethod);\n+            response = ((PreemptiveAuthHttpRequestFactory) SyncopeSession.get().getRestTemplate().getRequestFactory()).\n+                    getHttpClient().execute(getMethod);\n         } catch (Exception e) {\n             LOG.error(\"Unexpected exception while executing HTTP method to {}\", this.uri, e);\n             response = buildFakeResponse(e.getMessage());\n@@ -114,7 +112,8 @@ private void execute() {\n     }\n \n     @Override\n-    public InputStream getInputStream() throws ResourceStreamNotFoundException {\n+    public InputStream getInputStream()\n+            throws ResourceStreamNotFoundException {\n \n         try {\n             execute();\n@@ -125,7 +124,8 @@ public InputStream getInputStream() throws ResourceStreamNotFoundException {\n     }\n \n     @Override\n-    public void close() throws IOException {\n+    public void close()\n+            throws IOException {\n         // Nothing needed here, because we are using HttpComponents HttpClient\n     }\n "},{"sha":"d1ce9b999d808b40afa179297966e8f4fe04b200","filename":"console/src/main/java/org/apache/syncope/console/pages/BasePage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -96,7 +96,7 @@ public BasePage(final PageParameters parameters) {\n     }\n \n     private void pageSetup() {\n-        ((SyncopeApplication) getApplication()).setupNavigationPane(this, xmlRolesReader, true, version);\n+        ((SyncopeApplication) getApplication()).setupNavigationPanel(this, xmlRolesReader, true, version);\n \n         feedbackPanel = new FeedbackPanel(\"feedback\");\n         feedbackPanel.setOutputMarkupId(true);"},{"sha":"737648192bf6c7596166f49511e8d9fadc4c2a9b","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -60,7 +60,6 @@\n import org.apache.wicket.request.resource.ContentDisposition;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.LoggerFactory;\n-import org.springframework.web.client.RestTemplate;\n import org.apache.syncope.client.to.ConfigurationTO;\n import org.apache.syncope.client.to.LoggerTO;\n import org.apache.syncope.client.to.NotificationTO;\n@@ -99,9 +98,6 @@ public class Configuration extends BasePage {\n     @SpringBean\n     private WorkflowRestClient wfRestClient;\n \n-    @SpringBean\n-    private RestTemplate restTemplate;\n-\n     @SpringBean(name = \"baseURL\")\n     protected String baseURL;\n \n@@ -341,12 +337,10 @@ public Page createPage() {\n             @Override\n             public void onClick() {\n                 try {\n-                    HttpResourceStream stream = new HttpResourceStream(baseURL + \"configuration/dbexport\", restTemplate);\n+                    HttpResourceStream stream = new HttpResourceStream(baseURL + \"configuration/dbexport\");\n \n                     ResourceStreamRequestHandler rsrh = new ResourceStreamRequestHandler(stream);\n-                    rsrh.setFileName(stream.getFilename() == null\n-                            ? \"content.xml\"\n-                            : stream.getFilename());\n+                    rsrh.setFileName(stream.getFilename() == null ? \"content.xml\" : stream.getFilename());\n                     rsrh.setContentDisposition(ContentDisposition.ATTACHMENT);\n \n                     getRequestCycle().scheduleRequestHandlerAfterCurrent(rsrh);"},{"sha":"25f92b2e0aeae7583522a76343c619e4b055a575","filename":"console/src/main/java/org/apache/syncope/console/pages/Login.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -72,9 +72,6 @@ public class Login extends WebPage {\n \n     private final static int SELF_REG_WIN_WIDTH = 800;\n \n-    @SpringBean\n-    private RestTemplate restTemplate;\n-\n     @SpringBean(name = \"baseURL\")\n     private String baseURL;\n \n@@ -119,9 +116,9 @@ public void onSubmit() {\n                     setResponsePage(WelcomePage.class, parameters);\n                 } catch (HttpClientErrorException e) {\n                     error(getString(\"login-error\"));\n-                    \n-                    PreemptiveAuthHttpRequestFactory requestFactory =\n-                            ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory());\n+\n+                    PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) SyncopeSession.\n+                            get().getRestTemplate().getRequestFactory());\n \n                     ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().clear();\n                 }\n@@ -178,6 +175,8 @@ public Page createPage() {\n     }\n \n     private String[] authenticate(final String userId, final String password) {\n+        final RestTemplate restTemplate = SyncopeSession.get().getRestTemplate();\n+\n         // 1. Set provided credentials to check\n         PreemptiveAuthHttpRequestFactory requestFactory =\n                 ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory());\n@@ -192,6 +191,7 @@ private String[] authenticate(final String userId, final String password) {\n     private boolean isSelfRegistrationAllowed() {\n         Boolean result = null;\n         try {\n+            final RestTemplate restTemplate = SyncopeSession.get().getRestTemplate();\n             result = restTemplate.getForObject(baseURL + \"user/request/create/allowed\", Boolean.class);\n         } catch (HttpClientErrorException e) {\n             LOG.error(\"While seeking if self registration is allowed\", e);\n@@ -203,6 +203,8 @@ private boolean isSelfRegistrationAllowed() {\n     }\n \n     private String getCoreVersion() {\n+        final RestTemplate restTemplate = SyncopeSession.get().getRestTemplate();\n+\n         PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n                 getRequestFactory());\n "},{"sha":"e8e8251e48d67ff2f2e84e082516a319ee1a013e","filename":"console/src/main/java/org/apache/syncope/console/pages/Logout.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -22,8 +22,6 @@\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.syncope.console.SyncopeSession;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.springframework.web.client.RestTemplate;\n \n /**\n  * Syncope Logout.\n@@ -32,9 +30,6 @@ public class Logout extends BasePage {\n \n     private static final long serialVersionUID = -2143007520243939450L;\n \n-    @SpringBean\n-    private RestTemplate restTemplate;\n-\n     public Logout(final PageParameters parameters) {\n         super(parameters);\n \n@@ -46,7 +41,7 @@ public Logout(final PageParameters parameters) {\n         setResponsePage(getApplication().getHomePage());\n \n         PreemptiveAuthHttpRequestFactory requestFactory =\n-                ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory());\n+                ((PreemptiveAuthHttpRequestFactory) SyncopeSession.get().getRestTemplate().getRequestFactory());\n \n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().clear();\n     }"},{"sha":"519970ce2ce6e090069062853f8edc385c362fde","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportModalPage.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -57,7 +57,6 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.apache.wicket.util.resource.IResourceStream;\n import org.springframework.util.StringUtils;\n-import org.springframework.web.client.RestTemplate;\n import org.apache.syncope.console.commons.DateFormatROModel;\n import org.apache.syncope.console.commons.HttpResourceStream;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n@@ -91,9 +90,6 @@ public class ReportModalPage extends BaseModalPage {\n     @SpringBean\n     private ReportRestClient restClient;\n \n-    @SpringBean\n-    protected RestTemplate restTemplate;\n-\n     @SpringBean(name = \"baseURL\")\n     protected String baseURL;\n \n@@ -296,8 +292,8 @@ public void onClick(final AjaxRequestTarget target) {\n                     public Page createPage() {\n                         modalReportletConfOldName = null;\n                         modalReportletConf = null;\n-                        return new ReportletConfModalPage(null, reportletConfWin, ReportModalPage.this\n-                                .getPageReference());\n+                        return new ReportletConfModalPage(null, reportletConfWin,\n+                                ReportModalPage.this.getPageReference());\n                     }\n                 });\n                 reportletConfWin.show(target);\n@@ -432,8 +428,8 @@ public void onClick(final AjaxRequestTarget target) {\n                             @Override\n                             public Page createPage() {\n                                 ReportModalPage.this.exportExecId = model.getObject().getId();\n-                                return new ReportExecResultDownloadModalPage(reportExecExportWin, ReportModalPage.this\n-                                        .getPageReference());\n+                                return new ReportExecResultDownloadModalPage(reportExecExportWin, ReportModalPage.this.\n+                                        getPageReference());\n                             }\n                         });\n                         reportExecExportWin.show(target);\n@@ -553,7 +549,7 @@ private void createResourceStream() {\n             this.url = urlBuilder.toString();\n \n             try {\n-                stream = new HttpResourceStream(this.url, restTemplate);\n+                stream = new HttpResourceStream(this.url);\n             } catch (Exception e) {\n                 LOG.error(\"While contacting target URL\", e);\n             }"},{"sha":"124178b8f69315ed0d1cfbc8616f2a8a3a701277","filename":"console/src/main/java/org/apache/syncope/console/pages/WelcomePage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -40,6 +40,6 @@ public class WelcomePage extends WebPage {\n     public WelcomePage(final PageParameters parameters) {\n         super(parameters);\n \n-        ((SyncopeApplication) getApplication()).setupNavigationPane(this, xmlRolesReader, false, version);\n+        ((SyncopeApplication) getApplication()).setupNavigationPanel(this, xmlRolesReader, false, version);\n     }\n }"},{"sha":"070c5544491eada84748044b57ff8b4530f48d8d","filename":"console/src/main/java/org/apache/syncope/console/rest/AbstractBaseRestClient.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractBaseRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -21,7 +21,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.client.RestTemplate;\n \n public abstract class AbstractBaseRestClient {\n \n@@ -30,10 +29,6 @@ public abstract class AbstractBaseRestClient {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractBaseRestClient.class);\n \n-    @Autowired\n-    protected RestTemplate restTemplate;\n-\n     @Autowired\n     protected String baseURL;\n-\n }"},{"sha":"844e90b9937c6f79e859d7def848f2743f3d7d32","filename":"console/src/main/java/org/apache/syncope/console/rest/ApprovalRestClient.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -23,6 +23,7 @@\n import org.springframework.stereotype.Component;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.to.WorkflowFormTO;\n+import org.apache.syncope.console.SyncopeSession;\n \n /**\n  * Console client for invoking Rest Todo services.\n@@ -31,14 +32,17 @@\n public class ApprovalRestClient extends AbstractBaseRestClient {\n \n     public List<WorkflowFormTO> getForms() {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"user/workflow/form/list\", WorkflowFormTO[].class));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"user/workflow/form/list\", WorkflowFormTO[].class));\n     }\n \n     public WorkflowFormTO claimForm(final String taskId) {\n-        return restTemplate.getForObject(baseURL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, taskId);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, taskId);\n     }\n \n     public void submitForm(final WorkflowFormTO form) {\n-        restTemplate.postForObject(baseURL + \"user/workflow/form/submit\", form, UserTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"user/workflow/form/submit\", form, UserTO.class);\n     }\n }"},{"sha":"0529c1a13344c51e30db41fbd8d6dd46498f796c","filename":"console/src/main/java/org/apache/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.client.to.ConfigurationTO;\n+import org.apache.syncope.console.SyncopeSession;\n \n @Component\n public class ConfigurationRestClient extends AbstractBaseRestClient {\n@@ -32,11 +33,13 @@ public class ConfigurationRestClient extends AbstractBaseRestClient {\n      * @return ConfigurationTOs\n      */\n     public List<ConfigurationTO> getAllConfigurations() {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"configuration/list.json\", ConfigurationTO[].class));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"configuration/list.json\", ConfigurationTO[].class));\n     }\n \n     public ConfigurationTO readConfiguration(final String key) {\n-        return restTemplate.getForObject(baseURL + \"configuration/read/{key}.json\", ConfigurationTO.class, key);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"configuration/read/{key}.json\", ConfigurationTO.class, key);\n     }\n \n     /**\n@@ -45,7 +48,8 @@ public ConfigurationTO readConfiguration(final String key) {\n      * @param configurationTO\n      */\n     public void createConfiguration(ConfigurationTO configurationTO) {\n-        restTemplate.postForObject(baseURL + \"configuration/create\", configurationTO, ConfigurationTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"configuration/create\", configurationTO, ConfigurationTO.class);\n     }\n \n     /**\n@@ -54,13 +58,15 @@ public void createConfiguration(ConfigurationTO configurationTO) {\n      * @param configurationTO\n      */\n     public void updateConfiguration(final ConfigurationTO configurationTO) {\n-        restTemplate.postForObject(baseURL + \"configuration/update\", configurationTO, ConfigurationTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"configuration/update\", configurationTO, ConfigurationTO.class);\n     }\n \n     /**\n      * Delete a configuration by key.\n      */\n     public ConfigurationTO deleteConfiguration(final String key) {\n-        return restTemplate.getForObject(baseURL + \"configuration/delete/{key}.json\", ConfigurationTO.class, key);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"configuration/delete/{key}.json\", ConfigurationTO.class, key);\n     }\n }"},{"sha":"efcad3a6d796ad3996389681ab34d494e62d0894","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":17,"deletions":14,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -44,8 +44,8 @@ public class ConnectorRestClient extends AbstractBaseRestClient {\n      * @return ConnectorInstanceTOs\n      */\n     public List<ConnInstanceTO> getAllConnectors() {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"connector/list.json?lang=\"\n-                + SyncopeSession.get().getLocale(), ConnInstanceTO[].class));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"connector/list.json?lang=\" + SyncopeSession.get().getLocale(), ConnInstanceTO[].class));\n     }\n \n     /**\n@@ -55,7 +55,8 @@ public List<ConnInstanceTO> getAllConnectors() {\n      */\n     public void create(final ConnInstanceTO connectorTO) {\n         connectorTO.setConfiguration(filterProperties(connectorTO.getConfiguration()));\n-        restTemplate.postForObject(baseURL + \"connector/create.json\", connectorTO, ConnInstanceTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"connector/create.json\", connectorTO, ConnInstanceTO.class);\n     }\n \n     /**\n@@ -68,8 +69,8 @@ public ConnInstanceTO read(final Long connectorInstanceId) {\n         ConnInstanceTO connectorTO = null;\n \n         try {\n-            connectorTO = restTemplate.getForObject(baseURL + \"connector/read/\" + connectorInstanceId,\n-                    ConnInstanceTO.class);\n+            connectorTO = SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"connector/read/\" + connectorInstanceId, ConnInstanceTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a connector\", e);\n         }\n@@ -79,20 +80,21 @@ public ConnInstanceTO read(final Long connectorInstanceId) {\n \n     public void update(final ConnInstanceTO connectorTO) {\n         connectorTO.setConfiguration(filterProperties(connectorTO.getConfiguration()));\n-        restTemplate.postForObject(baseURL + \"connector/update.json\", connectorTO, ConnInstanceTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"connector/update.json\", connectorTO, ConnInstanceTO.class);\n     }\n \n     public ConnInstanceTO delete(Long id) {\n-        return restTemplate.getForObject(baseURL + \"connector/delete/{connectorId}.json\",\n-                ConnInstanceTO.class, id.toString());\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"connector/delete/{connectorId}.json\", ConnInstanceTO.class, id.toString());\n     }\n \n     public List<ConnBundleTO> getAllBundles() {\n         List<ConnBundleTO> bundles = null;\n \n         try {\n-            bundles = Arrays.asList(restTemplate.getForObject(baseURL + \"connector/bundle/list?lang=\"\n-                    + SyncopeSession.get().getLocale(), ConnBundleTO[].class));\n+            bundles = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"connector/bundle/list?lang=\" + SyncopeSession.get().getLocale(), ConnBundleTO[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting connector bundles\", e);\n         }\n@@ -110,7 +112,7 @@ public List<ConnConfProperty> getConnectorProperties(final Long connectorId) {\n         List<ConnConfProperty> properties = null;\n \n         try {\n-            properties = Arrays.asList(restTemplate.getForObject(baseURL\n+            properties = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(baseURL\n                     + \"connector/{connectorId}/configurationProperty/list\", ConnConfProperty[].class, connectorId));\n \n         } catch (SyncopeClientCompositeErrorException e) {\n@@ -155,7 +157,8 @@ public Boolean check(final ConnInstanceTO connectorTO) {\n         connector.setConfiguration(filterProperties(connector.getConfiguration()));\n \n         try {\n-            return restTemplate.postForObject(baseURL + \"connector/check.json\", connector, Boolean.class);\n+            return SyncopeSession.get().getRestTemplate().postForObject(\n+                    baseURL + \"connector/check.json\", connector, Boolean.class);\n         } catch (Exception e) {\n             LOG.error(\"Connector not found {}\", connector, e);\n             return false;\n@@ -166,8 +169,8 @@ public List<String> getSchemaNames(final ConnInstanceTO connectorTO) {\n         List<String> schemaNames = null;\n \n         try {\n-            schemaNames = Arrays.asList(restTemplate.postForObject(baseURL + \"connector/schema/list\", connectorTO,\n-                    String[].class));\n+            schemaNames = Arrays.asList(SyncopeSession.get().getRestTemplate().postForObject(\n+                    baseURL + \"connector/schema/list\", connectorTO, String[].class));\n \n             // re-order schema names list\n             Collections.sort(schemaNames);"},{"sha":"b8a2c8d0d59374dbb89f6a9f79640b887432cb1b","filename":"console/src/main/java/org/apache/syncope/console/rest/EntitlementRestClient.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FEntitlementRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FEntitlementRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FEntitlementRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.SyncopeSession;\n \n /**\n  * Console client for invoking Rest Resources services.\n@@ -31,14 +32,15 @@ public class EntitlementRestClient extends AbstractBaseRestClient {\n \n     /**\n      * Get all Entitlements.\n+     *\n      * @return List<String>\n      */\n     public List<String> getAllEntitlements() {\n         List<String> entitlements = null;\n \n         try {\n-            entitlements = Arrays.asList(restTemplate.getForObject(baseURL + \"auth/allentitlements.json\",\n-                    String[].class));\n+            entitlements = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"auth/allentitlements.json\", String[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading all the entitlements\", e);\n         }"},{"sha":"01f5ce4d5e7df7230a598d339ca8c0156e4024dc","filename":"console/src/main/java/org/apache/syncope/console/rest/LoggerRestClient.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -26,6 +26,7 @@\n import java.util.Set;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.client.to.LoggerTO;\n+import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.types.AuditElements;\n import org.apache.syncope.types.AuditElements.Category;\n import org.apache.syncope.types.AuditLoggerName;\n@@ -35,11 +36,13 @@\n public class LoggerRestClient extends AbstractBaseRestClient {\n \n     public List<LoggerTO> listLogs() {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"logger/log/list\", LoggerTO[].class));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"logger/log/list\", LoggerTO[].class));\n     }\n \n     public List<AuditLoggerName> listAudits() {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"logger/audit/list\", AuditLoggerName[].class));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"logger/audit/list\", AuditLoggerName[].class));\n     }\n \n     public Map<AuditElements.Category, Set<AuditLoggerName>> listAuditsByCategory() {\n@@ -56,18 +59,22 @@ public Map<AuditElements.Category, Set<AuditLoggerName>> listAuditsByCategory()\n     }\n \n     public void setLogLevel(final String name, final SyncopeLoggerLevel level) {\n-        restTemplate.postForObject(baseURL + \"logger/log/{name}/{level}\", null, LoggerTO.class, name, level);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"logger/log/{name}/{level}\", null, LoggerTO.class, name, level);\n     }\n \n     public void enableAudit(final AuditLoggerName auditLoggerName) {\n-        restTemplate.put(baseURL + \"logger/audit/enable\", auditLoggerName);\n+        SyncopeSession.get().getRestTemplate().put(\n+                baseURL + \"logger/audit/enable\", auditLoggerName);\n     }\n \n     public LoggerTO deleteLog(final String name) {\n-        return restTemplate.getForObject(baseURL + \"logger/log/delete/{name}\", LoggerTO.class, name);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"logger/log/delete/{name}\", LoggerTO.class, name);\n     }\n \n     public void disableAudit(final AuditLoggerName auditLoggerName) {\n-        restTemplate.put(baseURL + \"logger/audit/disable\", auditLoggerName);\n+        SyncopeSession.get().getRestTemplate().put(\n+                baseURL + \"logger/audit/disable\", auditLoggerName);\n     }\n }"},{"sha":"f4558e63b8981a459c66303e0e9e3063e9f8f278","filename":"console/src/main/java/org/apache/syncope/console/rest/NotificationRestClient.java","status":"modified","additions":29,"deletions":21,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -22,43 +22,51 @@\n import java.util.List;\n import org.apache.syncope.client.to.NotificationTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.SyncopeSession;\n import org.springframework.stereotype.Component;\n \n @Component\n public class NotificationRestClient extends AbstractBaseRestClient {\n \n-    public List<NotificationTO> getAllNotifications() throws SyncopeClientCompositeErrorException {\n-\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"notification/list.json\", NotificationTO[].class));\n+    public List<NotificationTO> getAllNotifications()\n+            throws SyncopeClientCompositeErrorException {\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"notification/list.json\", NotificationTO[].class));\n     }\n \n-    public NotificationTO readNotification(final Long id) throws SyncopeClientCompositeErrorException {\n-\n-        return restTemplate.getForObject(baseURL + \"notification/read/{notificationId}.json\", NotificationTO.class, id);\n+    public NotificationTO readNotification(final Long id)\n+            throws SyncopeClientCompositeErrorException {\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"notification/read/{notificationId}.json\", NotificationTO.class, id);\n     }\n \n-    public void createNotification(final NotificationTO notificationTO) throws SyncopeClientCompositeErrorException {\n-\n-        restTemplate.postForObject(baseURL + \"notification/create.json\", notificationTO, NotificationTO.class);\n+    public void createNotification(final NotificationTO notificationTO)\n+            throws SyncopeClientCompositeErrorException {\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"notification/create.json\", notificationTO, NotificationTO.class);\n     }\n \n-    public void updateNotification(final NotificationTO notificationTO) throws SyncopeClientCompositeErrorException {\n-\n-        restTemplate.postForObject(baseURL + \"notification/update.json\", notificationTO, NotificationTO.class);\n+    public void updateNotification(final NotificationTO notificationTO)\n+            throws SyncopeClientCompositeErrorException {\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"notification/update.json\", notificationTO, NotificationTO.class);\n     }\n \n-    public void deleteNotification(final Long id) throws SyncopeClientCompositeErrorException {\n-\n-        restTemplate.getForObject(baseURL + \"notification/delete/{notificationId}.json\", NotificationTO.class, id);\n+    public void deleteNotification(final Long id)\n+            throws SyncopeClientCompositeErrorException {\n+        SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"notification/delete/{notificationId}.json\", NotificationTO.class, id);\n     }\n \n-    public List<String> getMailTemplates() throws SyncopeClientCompositeErrorException {\n-\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"configuration/mailTemplates.json\", String[].class));\n+    public List<String> getMailTemplates()\n+            throws SyncopeClientCompositeErrorException {\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"configuration/mailTemplates.json\", String[].class));\n     }\n \n-    public List<String> getEvents() throws SyncopeClientCompositeErrorException {\n-\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"workflow/tasks.json\", String[].class));\n+    public List<String> getEvents()\n+            throws SyncopeClientCompositeErrorException {\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"workflow/tasks.json\", String[].class));\n     }\n }"},{"sha":"cb1502d30c84d26bbe143d3668d5a16200838aea","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":28,"deletions":18,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.client.to.PasswordPolicyTO;\n import org.apache.syncope.client.to.PolicyTO;\n import org.apache.syncope.client.to.SyncPolicyTO;\n+import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.types.PolicyType;\n \n /**\n@@ -43,25 +44,26 @@ public <T extends PolicyTO> T getGlobalPolicy(final PolicyType type) {\n             switch (type) {\n                 case GLOBAL_ACCOUNT:\n                     try {\n-                        policy = (T) restTemplate.getForObject(baseURL + \"policy/account/global/read\",\n-                                AccountPolicyTO.class);\n+                        policy = (T) SyncopeSession.get().getRestTemplate().getForObject(\n+                                baseURL + \"policy/account/global/read\", AccountPolicyTO.class);\n                     } catch (Exception e) {\n                         LOG.debug(\"No account policy found\", e);\n                         policy = (T) new AccountPolicyTO();\n                     }\n                     break;\n                 case GLOBAL_PASSWORD:\n                     try {\n-                        policy = (T) restTemplate.getForObject(baseURL + \"policy/password/global/read\",\n-                                PasswordPolicyTO.class);\n+                        policy = (T) SyncopeSession.get().getRestTemplate().getForObject(\n+                                baseURL + \"policy/password/global/read\", PasswordPolicyTO.class);\n                     } catch (Exception e) {\n                         LOG.debug(\"No password policy found\", e);\n                         policy = (T) new PasswordPolicyTO();\n                     }\n                     break;\n                 case GLOBAL_SYNC:\n                     try {\n-                        policy = (T) restTemplate.getForObject(baseURL + \"policy/sync/global/read\", SyncPolicyTO.class);\n+                        policy = (T) SyncopeSession.get().getRestTemplate().getForObject(\n+                                baseURL + \"policy/sync/global/read\", SyncPolicyTO.class);\n                     } catch (Exception e) {\n                         LOG.debug(\"No password policy found\", e);\n                         policy = (T) new SyncPolicyTO();\n@@ -110,7 +112,8 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n             }\n \n             try {\n-                policies = (T[]) restTemplate.getForObject(baseURL + \"policy/\" + policy + \"/list\", reference);\n+                policies = (T[]) SyncopeSession.get().getRestTemplate().getForObject(\n+                        baseURL + \"policy/\" + policy + \"/list\", reference);\n             } catch (Exception ignore) {\n                 LOG.debug(\"No policy found\", ignore);\n             }\n@@ -122,8 +125,8 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n             PolicyTO globalPolicy = null;\n \n             try {\n-                globalPolicy = (T) restTemplate.getForObject(baseURL + \"policy/\" + policy + \"/global/read\",\n-                        globalReference);\n+                globalPolicy = (T) SyncopeSession.get().getRestTemplate().getForObject(\n+                        baseURL + \"policy/\" + policy + \"/global/read\", globalReference);\n             } catch (Exception ignore) {\n                 LOG.warn(\"No global policy found\", ignore);\n             }\n@@ -139,43 +142,50 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n         return res;\n     }\n \n-    public <T extends PolicyTO> T createPolicy(final T policy) throws InvalidPolicyType {\n+    public <T extends PolicyTO> T createPolicy(final T policy)\n+            throws InvalidPolicyType {\n \n         switch (policy.getType()) {\n             case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n-                return (T) restTemplate.postForObject(baseURL + \"policy/account/create\", policy, AccountPolicyTO.class);\n+                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n+                        baseURL + \"policy/account/create\", policy, AccountPolicyTO.class);\n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n-                return (T) restTemplate.postForObject(baseURL + \"policy/password/create\", policy,\n+                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n+                        baseURL + \"policy/password/create\", policy,\n                         PasswordPolicyTO.class);\n             case GLOBAL_SYNC:\n             case SYNC:\n-                return (T) restTemplate.postForObject(baseURL + \"policy/sync/create\", policy, SyncPolicyTO.class);\n+                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n+                        baseURL + \"policy/sync/create\", policy, SyncPolicyTO.class);\n             default:\n                 throw new InvalidPolicyType(\"Invalid type \" + policy.getType());\n         }\n     }\n \n-    public <T extends PolicyTO> T updatePolicy(final T policy) throws InvalidPolicyType {\n+    public <T extends PolicyTO> T updatePolicy(final T policy)\n+            throws InvalidPolicyType {\n \n         switch (policy.getType()) {\n             case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n-                return (T) restTemplate.postForObject(baseURL + \"policy/account/update\", policy, AccountPolicyTO.class);\n+                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n+                        baseURL + \"policy/account/update\", policy, AccountPolicyTO.class);\n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n-                return (T) restTemplate.postForObject(baseURL + \"policy/password/update\", policy,\n-                        PasswordPolicyTO.class);\n+                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n+                        baseURL + \"policy/password/update\", policy, PasswordPolicyTO.class);\n             case GLOBAL_SYNC:\n             case SYNC:\n-                return (T) restTemplate.postForObject(baseURL + \"policy/sync/update\", policy, SyncPolicyTO.class);\n+                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n+                        baseURL + \"policy/sync/update\", policy, SyncPolicyTO.class);\n             default:\n                 throw new InvalidPolicyType(\"Invalid type \" + policy.getType());\n         }\n     }\n \n     public PolicyTO delete(final Long id, Class<? extends PolicyTO> policyClass) {\n-        return restTemplate.getForObject(baseURL + \"policy/delete/\" + id, policyClass);\n+        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"policy/delete/\" + id, policyClass);\n     }\n }"},{"sha":"867ca3d49c4432b8c491b247602df81abfce14e2","filename":"console/src/main/java/org/apache/syncope/console/rest/ReportRestClient.java","status":"modified","additions":21,"deletions":12,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.client.to.ReportExecTO;\n import org.apache.syncope.client.to.ReportTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.SyncopeSession;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -32,33 +33,37 @@ public List<String> getReportletConfClasses() {\n         List<String> reportletClasses = null;\n \n         try {\n-            reportletClasses = Arrays.asList(restTemplate.getForObject(baseURL + \"report/reportletConfClasses.json\",\n-                    String[].class));\n+            reportletClasses = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"report/reportletConfClasses.json\", String[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting available reportlet classes\", e);\n         }\n         return reportletClasses;\n     }\n \n     public List<ReportTO> list() {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"report/list\", ReportTO[].class));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"report/list\", ReportTO[].class));\n     }\n \n     public List<ReportTO> list(final int page, final int size) {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"report/list/{page}/{size}.json\", ReportTO[].class,\n-                page, size));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"report/list/{page}/{size}.json\", ReportTO[].class, page, size));\n     }\n \n     public int count() {\n-        return restTemplate.getForObject(baseURL + \"report/count.json\", Integer.class);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"report/count.json\", Integer.class);\n     }\n \n     public ReportTO create(final ReportTO reportTO) {\n-        return restTemplate.postForObject(baseURL + \"report/create\", reportTO, ReportTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"report/create\", reportTO, ReportTO.class);\n     }\n \n     public ReportTO update(final ReportTO reportTO) {\n-        return restTemplate.postForObject(baseURL + \"report/update\", reportTO, ReportTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"report/update\", reportTO, ReportTO.class);\n     }\n \n     /**\n@@ -67,7 +72,8 @@ public ReportTO update(final ReportTO reportTO) {\n      * @param reportId report to delete\n      */\n     public ReportTO delete(final Long reportId) {\n-        return restTemplate.getForObject(baseURL + \"report/delete/{reportId}\", ReportTO.class, reportId);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"report/delete/{reportId}\", ReportTO.class, reportId);\n     }\n \n     /**\n@@ -77,7 +83,8 @@ public ReportTO delete(final Long reportId) {\n      */\n     @Override\n     public void startExecution(final Long reportId) {\n-        restTemplate.postForObject(baseURL + \"report/execute/{reportId}\", null, ReportExecTO.class, reportId);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"report/execute/{reportId}\", null, ReportExecTO.class, reportId);\n     }\n \n     /**\n@@ -87,7 +94,8 @@ public void startExecution(final Long reportId) {\n      */\n     @Override\n     public void deleteExecution(final Long reportExecId) {\n-        restTemplate.getForObject(baseURL + \"report/execution/delete/{execId}\", ReportExecTO.class, reportExecId);\n+        SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"report/execution/delete/{execId}\", ReportExecTO.class, reportExecId);\n     }\n \n     /**\n@@ -97,6 +105,7 @@ public void deleteExecution(final Long reportExecId) {\n      */\n     @Override\n     public List<ReportExecTO> listExecutions() {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"report/execution/list\", ReportExecTO[].class));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"report/execution/list\", ReportExecTO[].class));\n     }\n }"},{"sha":"55cf287f58de5fb1aa36f4b1c6e8c63bc0e16e7c","filename":"console/src/main/java/org/apache/syncope/console/rest/ResourceRestClient.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -23,6 +23,7 @@\n import org.springframework.stereotype.Component;\n import org.apache.syncope.client.to.ResourceTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.SyncopeSession;\n \n /**\n  * Console client for invoking Rest Resources services.\n@@ -34,7 +35,8 @@ public List<ResourceTO> getAllResources() {\n         List<ResourceTO> resources = null;\n \n         try {\n-            resources = Arrays.asList(restTemplate.getForObject(baseURL + \"resource/list.json\", ResourceTO[].class));\n+            resources = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject\n+                    (baseURL + \"resource/list.json\", ResourceTO[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading all resources\", e);\n         }\n@@ -43,26 +45,28 @@ public List<ResourceTO> getAllResources() {\n     }\n \n     public void create(final ResourceTO resourceTO) {\n-        restTemplate.postForObject(baseURL + \"resource/create\", resourceTO, ResourceTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(baseURL + \"resource/create\", resourceTO, ResourceTO.class);\n     }\n \n     public ResourceTO read(final String name) {\n         ResourceTO resourceTO = null;\n \n         try {\n-            resourceTO = restTemplate.getForObject(baseURL + \"resource/read/\" + name + \".json\", ResourceTO.class);\n+            resourceTO = SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"resource/read/\" + name + \".json\", ResourceTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a resource\", e);\n         }\n         return resourceTO;\n     }\n \n     public void update(final ResourceTO resourceTO) {\n-        restTemplate.postForObject(baseURL + \"resource/update.json\", resourceTO, ResourceTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"resource/update.json\", resourceTO, ResourceTO.class);\n     }\n \n     public ResourceTO delete(final String name) {\n-        return restTemplate.getForObject(baseURL + \"resource/delete/{resourceName}.json\", \n-                                         ResourceTO.class, name);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"resource/delete/{resourceName}.json\", ResourceTO.class, name);\n     }\n }"},{"sha":"60a6ec895822bc00958c9e21917bd9d8a93f6d31","filename":"console/src/main/java/org/apache/syncope/console/rest/RoleRestClient.java","status":"modified","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.client.mod.RoleMod;\n import org.apache.syncope.client.to.RoleTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.SyncopeSession;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -33,14 +34,17 @@ public class RoleRestClient extends AbstractBaseRestClient {\n \n     /**\n      * Get all Roles.\n+     *\n      * @return SchemaTOs\n      */\n-    public List<RoleTO> getAllRoles() throws SyncopeClientCompositeErrorException {\n+    public List<RoleTO> getAllRoles()\n+            throws SyncopeClientCompositeErrorException {\n \n         List<RoleTO> roles = null;\n \n         try {\n-            roles = Arrays.asList(restTemplate.getForObject(baseURL + \"role/list.json\", RoleTO[].class));\n+            roles = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"role/list.json\", RoleTO[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While listing all roles\", e);\n         }\n@@ -50,22 +54,26 @@ public List<RoleTO> getAllRoles() throws SyncopeClientCompositeErrorException {\n \n     /**\n      * Create new role.\n+     *\n      * @param roleTO\n      */\n     public void createRole(RoleTO roleTO) {\n-        restTemplate.postForObject(baseURL + \"role/create\", roleTO, RoleTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"role/create\", roleTO, RoleTO.class);\n     }\n \n     /**\n      * Load an already existent role by its name.\n+     *\n      * @param name (e.g.:surname)\n      * @return schemaTO\n      */\n     public RoleTO readRole(Long id) {\n         RoleTO roleTO = null;\n \n         try {\n-            roleTO = restTemplate.getForObject(baseURL + \"role/read/{roleId}.json\", RoleTO.class, id);\n+            roleTO = SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"role/read/{roleId}.json\", RoleTO.class, id);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a role\", e);\n         }\n@@ -74,19 +82,23 @@ public RoleTO readRole(Long id) {\n \n     /**\n      * Update an already existent role.\n+     *\n      * @param roleTO updated\n      * @return true is the operation ends successfully, false otherwise\n      */\n     public void updateRole(RoleMod roleMod) {\n-        restTemplate.postForObject(baseURL + \"role/update\", roleMod, RoleTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"role/update\", roleMod, RoleTO.class);\n     }\n \n     /**\n      * Delete an already existent role by its id.\n+     *\n      * @param name (e.g.:rolename)\n      * @return roleTO\n      */\n     public RoleTO deleteRole(Long id) {\n-        return restTemplate.getForObject(baseURL + \"role/delete/{roleId}.json\", RoleTO.class, id);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"role/delete/{roleId}.json\", RoleTO.class, id);\n     }\n }"},{"sha":"ee9399ae9064c8c943050a1e2a40cfe82cddfb73","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":42,"deletions":36,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.client.to.SchemaTO;\n import org.apache.syncope.client.to.VirtualSchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.types.AttributableType;\n \n /**\n@@ -43,8 +44,8 @@ public List<SchemaTO> getSchemas(final AttributableType type) {\n         List<SchemaTO> schemas = null;\n \n         try {\n-            schemas = Arrays.asList(restTemplate.getForObject(baseURL + \"schema/\" + type.name().toLowerCase()\n-                    + \"/list.json\", SchemaTO[].class));\n+            schemas = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"schema/\" + type.name().toLowerCase() + \"/list.json\", SchemaTO[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all schemas\", e);\n         }\n@@ -61,8 +62,8 @@ public List<String> getSchemaNames(final AttributableType type) {\n         final List<String> schemaNames = new ArrayList<String>();\n \n         try {\n-            final List<SchemaTO> userSchemas = Arrays.asList(restTemplate.getForObject(baseURL + \"schema/\"\n-                    + type.name().toLowerCase() + \"/list.json\", SchemaTO[].class));\n+            final List<SchemaTO> userSchemas = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"schema/\" + type.name().toLowerCase() + \"/list.json\", SchemaTO[].class));\n \n             for (SchemaTO schemaTO : userSchemas) {\n                 schemaNames.add(schemaTO.getName());\n@@ -84,8 +85,8 @@ public List<DerivedSchemaTO> getDerivedSchemas(final AttributableType type) {\n         List<DerivedSchemaTO> userDerivedSchemas = null;\n \n         try {\n-            userDerivedSchemas = Arrays.asList(restTemplate.getForObject(baseURL + \"derivedSchema/\"\n-                    + type.name().toLowerCase() + \"/list.json\", DerivedSchemaTO[].class));\n+            userDerivedSchemas = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/list.json\", DerivedSchemaTO[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all user derived schemas\", e);\n         }\n@@ -103,8 +104,9 @@ public List<String> getDerivedSchemaNames(final AttributableType type) {\n         final List<String> userDerivedSchemasNames = new ArrayList<String>();\n \n         try {\n-            final List<DerivedSchemaTO> userDerivedSchemas = Arrays.asList(restTemplate.getForObject(baseURL\n-                    + \"derivedSchema/\" + type.name().toLowerCase() + \"/list.json\", DerivedSchemaTO[].class));\n+            final List<DerivedSchemaTO> userDerivedSchemas =\n+                    Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/list.json\", DerivedSchemaTO[].class));\n \n             for (DerivedSchemaTO schemaTO : userDerivedSchemas) {\n                 userDerivedSchemasNames.add(schemaTO.getName());\n@@ -126,8 +128,8 @@ public List<VirtualSchemaTO> getVirtualSchemas(final AttributableType type) {\n         List<VirtualSchemaTO> userVirtualSchemas = null;\n \n         try {\n-            userVirtualSchemas = Arrays.asList(restTemplate.getForObject(baseURL + \"virtualSchema/\"\n-                    + type.name().toLowerCase() + \"/list.json\", VirtualSchemaTO[].class));\n+            userVirtualSchemas = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/list.json\", VirtualSchemaTO[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all user derived schemas\", e);\n         }\n@@ -144,8 +146,9 @@ public List<String> getVirtualSchemaNames(final AttributableType type) {\n         final List<String> userVirtualSchemasNames = new ArrayList<String>();\n \n         try {\n-            final List<VirtualSchemaTO> userVirtualSchemas = Arrays.asList(restTemplate.getForObject(baseURL\n-                    + \"virtualSchema/\" + type.name().toLowerCase() + \"/list.json\", VirtualSchemaTO[].class));\n+            final List<VirtualSchemaTO> userVirtualSchemas =\n+                    Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/list.json\", VirtualSchemaTO[].class));\n \n             for (VirtualSchemaTO schemaTO : userVirtualSchemas) {\n                 userVirtualSchemasNames.add(schemaTO.getName());\n@@ -163,8 +166,8 @@ public List<String> getVirtualSchemaNames(final AttributableType type) {\n      * @param schemaTO\n      */\n     public void createSchema(final AttributableType type, final SchemaTO schemaTO) {\n-        restTemplate.postForObject(baseURL + \"schema/\" + type.name().toLowerCase() + \"/create\", schemaTO,\n-                SchemaTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"schema/\" + type.name().toLowerCase() + \"/create\", schemaTO, SchemaTO.class);\n     }\n \n     /**\n@@ -177,8 +180,8 @@ public SchemaTO readSchema(final AttributableType type, final String name) {\n         SchemaTO schema = null;\n \n         try {\n-            schema = restTemplate.getForObject(baseURL + \"schema/\" + type.name().toLowerCase() + \"/read/\" + name\n-                    + \".json\", SchemaTO.class);\n+            schema = SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"schema/\" + type.name().toLowerCase() + \"/read/\" + name + \".json\", SchemaTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a user schema\", e);\n         }\n@@ -191,8 +194,8 @@ public SchemaTO readSchema(final AttributableType type, final String name) {\n      * @param schemaTO updated\n      */\n     public void updateSchema(final AttributableType type, SchemaTO schemaTO) {\n-        restTemplate.postForObject(baseURL + \"schema/\" + type.name().toLowerCase() + \"/update\", schemaTO,\n-                SchemaTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"schema/\" + type.name().toLowerCase() + \"/update\", schemaTO, SchemaTO.class);\n     }\n \n     /**\n@@ -202,8 +205,8 @@ public void updateSchema(final AttributableType type, SchemaTO schemaTO) {\n      * @return schemaTO\n      */\n     public SchemaTO deleteSchema(final AttributableType type, String name) {\n-        return restTemplate.getForObject(baseURL + \"schema/\" + type.name().toLowerCase() + \"/delete/\" \n-                + name + \".json\", SchemaTO.class);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"schema/\" + type.name().toLowerCase() + \"/delete/\" + name + \".json\", SchemaTO.class);\n     }\n \n     /**\n@@ -212,8 +215,8 @@ public SchemaTO deleteSchema(final AttributableType type, String name) {\n      * @param schemaTO\n      */\n     public void createDerivedSchema(final AttributableType type, final DerivedSchemaTO schemaTO) {\n-        restTemplate.postForObject(baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/create\", schemaTO,\n-                DerivedSchemaTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/create\", schemaTO, DerivedSchemaTO.class);\n     }\n \n     /**\n@@ -222,8 +225,8 @@ public void createDerivedSchema(final AttributableType type, final DerivedSchema\n      * @param schemaTO\n      */\n     public void createVirtualSchema(final AttributableType type, final VirtualSchemaTO schemaTO) {\n-        restTemplate.postForObject(baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/create\", schemaTO,\n-                VirtualSchemaTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/create\", schemaTO, VirtualSchemaTO.class);\n     }\n \n     /**\n@@ -235,8 +238,9 @@ public void createVirtualSchema(final AttributableType type, final VirtualSchema\n     public DerivedSchemaTO readDerivedSchema(final AttributableType type, final String name) {\n         DerivedSchemaTO derivedSchemaTO = null;\n         try {\n-            derivedSchemaTO = restTemplate.getForObject(baseURL + \"derivedSchema/\" + type.name().toLowerCase()\n-                    + \"/read/\" + name + \".json\", DerivedSchemaTO.class);\n+            derivedSchemaTO = SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/read/\" + name + \".json\",\n+                    DerivedSchemaTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a derived user schema\", e);\n         }\n@@ -249,8 +253,8 @@ public DerivedSchemaTO readDerivedSchema(final AttributableType type, final Stri\n      * @param schemaTO updated\n      */\n     public void updateDerivedSchema(final AttributableType type, final DerivedSchemaTO schemaTO) {\n-        restTemplate.postForObject(baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/update\", schemaTO,\n-                DerivedSchemaTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/update\", schemaTO, DerivedSchemaTO.class);\n     }\n \n     /**\n@@ -259,8 +263,8 @@ public void updateDerivedSchema(final AttributableType type, final DerivedSchema\n      * @param schemaTO updated\n      */\n     public void updateVirtualSchema(final AttributableType type, final VirtualSchemaTO schemaTO) {\n-        restTemplate.postForObject(baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/update\", schemaTO,\n-                VirtualSchemaTO.class);\n+        SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/update\", schemaTO, VirtualSchemaTO.class);\n     }\n \n     /**\n@@ -269,8 +273,9 @@ public void updateVirtualSchema(final AttributableType type, final VirtualSchema\n      * @param name (e.g.:surname)\n      */\n     public DerivedSchemaTO deleteDerivedSchema(final AttributableType type, String name) {\n-        return restTemplate.getForObject(baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/delete/\" + name \n-                                         + \".json\", DerivedSchemaTO.class);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/delete/\" + name + \".json\",\n+                DerivedSchemaTO.class);\n     }\n \n     /**\n@@ -279,8 +284,9 @@ public DerivedSchemaTO deleteDerivedSchema(final AttributableType type, String n\n      * @param name (e.g.:surname)\n      */\n     public VirtualSchemaTO deleteVirtualSchema(final AttributableType type, final String name) {\n-        return restTemplate.getForObject(baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/delete/\" + name \n-                                         + \".json\", VirtualSchemaTO.class);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/delete/\" + name + \".json\",\n+                VirtualSchemaTO.class);\n     }\n \n     /**\n@@ -290,8 +296,8 @@ public List<String> getAllValidatorClasses() {\n         List<String> validators = null;\n \n         try {\n-            validators = Arrays.asList(restTemplate.getForObject(baseURL + \"configuration/validators.json\",\n-                    String[].class));\n+            validators = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"configuration/validators.json\", String[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all validators\", e);\n         }"},{"sha":"fae9abba7791942e47b2900e9bf47b0c907fcc3b","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":38,"deletions":23,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.client.to.TaskExecTO;\n import org.apache.syncope.client.to.TaskTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.SyncopeSession;\n \n /**\n  * Console client for invoking Rest Tasks services.\n@@ -45,7 +46,8 @@ public List<String> getJobClasses() {\n         List<String> jobClasses = null;\n \n         try {\n-            jobClasses = Arrays.asList(restTemplate.getForObject(baseURL + \"task/jobClasses.json\", String[].class));\n+            jobClasses = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"task/jobClasses.json\", String[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all job classes\", e);\n         }\n@@ -56,7 +58,8 @@ public List<String> getJobActionsClasses() {\n         List<String> actions = null;\n \n         try {\n-            actions = Arrays.asList(restTemplate.getForObject(baseURL + \"task/jobActionsClasses.json\", String[].class));\n+            actions = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"task/jobActionsClasses.json\", String[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all job actions classes\", e);\n         }\n@@ -70,7 +73,8 @@ public List<String> getJobActionsClasses() {\n      * @return number of stored tasks.\n      */\n     public Integer count(final String kind) {\n-        return restTemplate.getForObject(baseURL + \"task/{kind}/count.json\", Integer.class, kind);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"task/{kind}/count.json\", Integer.class, kind);\n     }\n \n     /**\n@@ -84,35 +88,39 @@ public <T extends TaskTO> List<T> listTasks(final Class<T> reference, final int\n         List<T> result = Collections.EMPTY_LIST;\n \n         if (PropagationTaskTO.class == reference) {\n-            result = (List<T>) Arrays.asList(restTemplate.getForObject(baseURL\n-                    + \"task/propagation/list/{page}/{size}.json\", PropagationTaskTO[].class, page, size));\n+            result = (List<T>) Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"task/propagation/list/{page}/{size}.json\", PropagationTaskTO[].class, page, size));\n         } else if (NotificationTaskTO.class == reference) {\n-            result = (List<T>) Arrays.asList(restTemplate.getForObject(baseURL\n-                    + \"task/notification/list/{page}/{size}.json\", NotificationTaskTO[].class, page, size));\n+            result = (List<T>) Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"task/notification/list/{page}/{size}.json\", NotificationTaskTO[].class, page, size));\n         } else if (SchedTaskTO.class == reference) {\n-            result = (List<T>) Arrays.asList(restTemplate.getForObject(baseURL\n-                    + \"task/sched/list/{page}/{size}.json\", SchedTaskTO[].class, page, size));\n+            result = (List<T>) Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"task/sched/list/{page}/{size}.json\", SchedTaskTO[].class, page, size));\n         } else if (SyncTaskTO.class == reference) {\n-            result = (List<T>) Arrays.asList(restTemplate.getForObject(baseURL\n-                    + \"task/sync/list/{page}/{size}.json\", SyncTaskTO[].class, page, size));\n+            result = (List<T>) Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"task/sync/list/{page}/{size}.json\", SyncTaskTO[].class, page, size));\n         }\n \n         return result;\n     }\n \n     public PropagationTaskTO readPropagationTask(final Long taskId) {\n-        return restTemplate.getForObject(baseURL + \"task/read/{taskId}\", PropagationTaskTO.class, taskId);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"task/read/{taskId}\", PropagationTaskTO.class, taskId);\n     }\n \n     public NotificationTaskTO readNotificationTask(final Long taskId) {\n-        return restTemplate.getForObject(baseURL + \"task/read/{taskId}\", NotificationTaskTO.class, taskId);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"task/read/{taskId}\", NotificationTaskTO.class, taskId);\n     }\n \n     public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final Long taskId) {\n         if (SyncTaskTO.class.getName().equals(reference.getName())) {\n-            return (T) restTemplate.getForObject(baseURL + \"task/read/{taskId}\", SyncTaskTO.class, taskId);\n+            return (T) SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"task/read/{taskId}\", SyncTaskTO.class, taskId);\n         } else {\n-            return (T) restTemplate.getForObject(baseURL + \"task/read/{taskId}\", SchedTaskTO.class, taskId);\n+            return (T) SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"task/read/{taskId}\", SchedTaskTO.class, taskId);\n         }\n     }\n \n@@ -123,7 +131,8 @@ public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final L\n      */\n     @Override\n     public List<TaskExecTO> listExecutions() {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"task/execution/list\", TaskExecTO[].class));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"task/execution/list\", TaskExecTO[].class));\n     }\n \n     /**\n@@ -132,7 +141,8 @@ public List<TaskExecTO> listExecutions() {\n      * @param taskId task to delete\n      */\n     public TaskTO delete(final Long taskId, final Class<? extends TaskTO> taskToClass) {\n-        return restTemplate.getForObject(baseURL + \"task/delete/{taskId}\", taskToClass, taskId);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"task/delete/{taskId}\", taskToClass, taskId);\n     }\n \n     @Override\n@@ -146,7 +156,7 @@ public void startExecution(final Long taskId) {\n      * @param taskId task id\n      */\n     public void startExecution(final Long taskId, boolean dryRun) {\n-        restTemplate.postForObject(\n+        SyncopeSession.get().getRestTemplate().postForObject(\n                 baseURL + \"task/execute/{taskId}?dryRun={dryRun}\", null, TaskExecTO.class, taskId, dryRun);\n     }\n \n@@ -157,22 +167,27 @@ public void startExecution(final Long taskId, boolean dryRun) {\n      */\n     @Override\n     public void deleteExecution(final Long taskExecId) {\n-        restTemplate.getForObject(baseURL + \"task/execution/delete/{execId}\", TaskExecTO.class, taskExecId);\n+        SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"task/execution/delete/{execId}\", TaskExecTO.class, taskExecId);\n     }\n \n     public SyncTaskTO createSyncTask(final SyncTaskTO taskTO) {\n-        return restTemplate.postForObject(baseURL + \"task/create/sync\", taskTO, SyncTaskTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"task/create/sync\", taskTO, SyncTaskTO.class);\n     }\n \n     public SchedTaskTO createSchedTask(final SchedTaskTO taskTO) {\n-        return restTemplate.postForObject(baseURL + \"task/create/sched\", taskTO, SchedTaskTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"task/create/sched\", taskTO, SchedTaskTO.class);\n     }\n \n     public SchedTaskTO updateSchedTask(final SchedTaskTO taskTO) {\n-        return restTemplate.postForObject(baseURL + \"task/update/sched\", taskTO, SchedTaskTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"task/update/sched\", taskTO, SchedTaskTO.class);\n     }\n \n     public SyncTaskTO updateSyncTask(final SyncTaskTO taskTO) {\n-        return restTemplate.postForObject(baseURL + \"task/update/sync\", taskTO, SyncTaskTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"task/update/sync\", taskTO, SyncTaskTO.class);\n     }\n }"},{"sha":"5d77ed28ad51417be436caa5f96727e49266c9d0","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRequestRestClient.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -23,33 +23,38 @@\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.to.UserRequestTO;\n import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.console.SyncopeSession;\n import org.springframework.stereotype.Component;\n \n @Component\n public class UserRequestRestClient extends AbstractBaseRestClient {\n \n     public UserTO readProfile() {\n-        return restTemplate.getForObject(baseURL + \"user/request/read/self\", UserTO.class);\n+        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"user/request/read/self\", UserTO.class);\n     }\n \n     public List<UserRequestTO> list() {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"user/request/list\", UserRequestTO[].class));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"user/request/list\", UserRequestTO[].class));\n     }\n \n     public UserRequestTO delete(final Long requestId) {\n-        return restTemplate.getForObject(baseURL + \"user/request/deleteRequest/{requestId}\",\n-                UserRequestTO.class, requestId);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"user/request/deleteRequest/{requestId}\", UserRequestTO.class, requestId);\n     }\n \n     public UserRequestTO requestCreate(final UserTO userTO) {\n-        return restTemplate.postForObject(baseURL + \"user/request/create\", userTO, UserRequestTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"user/request/create\", userTO, UserRequestTO.class);\n     }\n \n     public UserRequestTO requestUpdate(final UserMod userMod) {\n-        return restTemplate.postForObject(baseURL + \"user/request/update\", userMod, UserRequestTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"user/request/update\", userMod, UserRequestTO.class);\n     }\n \n     public UserRequestTO requestDelete(final Long userId) {\n-        return restTemplate.postForObject(baseURL + \"user/request/delete/\", userId, UserRequestTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"user/request/delete/\", userId, UserRequestTO.class);\n     }\n }"},{"sha":"e46e1348d83f77eac42e2ba511a56e18868d8de5","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":31,"deletions":21,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.client.to.ConnObjectTO;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.SyncopeSession;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.console.commons.StatusBean;\n \n@@ -35,7 +36,7 @@\n public class UserRestClient extends AbstractBaseRestClient {\n \n     public Integer count() {\n-        return restTemplate.getForObject(baseURL + \"user/count.json\", Integer.class);\n+        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"user/count.json\", Integer.class);\n     }\n \n     /**\n@@ -46,8 +47,8 @@ public Integer count() {\n      * @return list of TaskTO objects\n      */\n     public List<UserTO> list(final int page, final int size) {\n-        return Arrays.asList(restTemplate.getForObject(baseURL + \"user/list/{page}/{size}.json\", UserTO[].class, page,\n-                size));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"user/list/{page}/{size}.json\", UserTO[].class, page, size));\n     }\n \n     /**\n@@ -56,9 +57,10 @@ public List<UserTO> list(final int page, final int size) {\n      * @param userTO instance\n      * @throws SyncopeClientCompositeErrorException\n      */\n-    public UserTO create(final UserTO userTO) throws SyncopeClientCompositeErrorException {\n+    public UserTO create(final UserTO userTO)\n+            throws SyncopeClientCompositeErrorException {\n \n-        return restTemplate.postForObject(baseURL + \"user/create\", userTO, UserTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(baseURL + \"user/create\", userTO, UserTO.class);\n     }\n \n     /**\n@@ -67,28 +69,32 @@ public UserTO create(final UserTO userTO) throws SyncopeClientCompositeErrorExce\n      * @param userTO\n      * @return true is the operation ends successfully, false otherwise\n      */\n-    public UserTO update(UserMod userModTO) throws SyncopeClientCompositeErrorException {\n+    public UserTO update(UserMod userModTO)\n+            throws SyncopeClientCompositeErrorException {\n \n-        return restTemplate.postForObject(baseURL + \"user/update\", userModTO, UserTO.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(baseURL + \"user/update\", userModTO, UserTO.class);\n     }\n \n-    public UserTO delete(Long id) throws SyncopeClientCompositeErrorException {\n+    public UserTO delete(Long id)\n+            throws SyncopeClientCompositeErrorException {\n \n-        return restTemplate.getForObject(baseURL + \"user/delete/{userId}\", UserTO.class, id);\n+        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"user/delete/{userId}\", UserTO.class, id);\n     }\n \n     public UserTO read(Long id) {\n         UserTO userTO = null;\n         try {\n-            userTO = restTemplate.getForObject(baseURL + \"user/read/{userId}.json\", UserTO.class, id);\n+            userTO = SyncopeSession.get().getRestTemplate().getForObject(\n+                    baseURL + \"user/read/{userId}.json\", UserTO.class, id);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a user\", e);\n         }\n         return userTO;\n     }\n \n     public Integer searchCount(final NodeCond searchCond) {\n-        return restTemplate.postForObject(baseURL + \"user/search/count.json\", searchCond, Integer.class);\n+        return SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"user/search/count.json\", searchCond, Integer.class);\n     }\n \n     /**\n@@ -97,30 +103,34 @@ public Integer searchCount(final NodeCond searchCond) {\n      * @param userTO\n      * @return UserTOs\n      */\n-    public List<UserTO> search(final NodeCond searchCond) throws SyncopeClientCompositeErrorException {\n+    public List<UserTO> search(final NodeCond searchCond)\n+            throws SyncopeClientCompositeErrorException {\n \n-        return Arrays.asList(restTemplate.postForObject(baseURL + \"user/search\", searchCond, UserTO[].class));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"user/search\", searchCond, UserTO[].class));\n     }\n \n     public List<UserTO> search(final NodeCond searchCond, final int page, final int size)\n             throws SyncopeClientCompositeErrorException {\n \n-        return Arrays.asList(restTemplate.postForObject(baseURL + \"user/search/{page}/{size}\", searchCond,\n-                UserTO[].class, page, size));\n+        return Arrays.asList(SyncopeSession.get().getRestTemplate().postForObject(\n+                baseURL + \"user/search/{page}/{size}\", searchCond, UserTO[].class, page, size));\n     }\n \n     public ConnObjectTO getRemoteObject(final String resourceName, final String objectId)\n             throws SyncopeClientCompositeErrorException {\n-        return restTemplate.getForObject(baseURL + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class,\n-                resourceName, objectId);\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class, resourceName, objectId);\n     }\n \n-    public UserTO reactivate(long userId, List<StatusBean> statuses) throws SyncopeClientCompositeErrorException {\n+    public UserTO reactivate(long userId, List<StatusBean> statuses)\n+            throws SyncopeClientCompositeErrorException {\n \n         return enable(userId, statuses, true);\n     }\n \n-    public UserTO suspend(long userId, List<StatusBean> statuses) throws SyncopeClientCompositeErrorException {\n+    public UserTO suspend(long userId, List<StatusBean> statuses)\n+            throws SyncopeClientCompositeErrorException {\n \n         return enable(userId, statuses, false);\n     }\n@@ -133,7 +143,7 @@ private UserTO enable(final long userId, final List<StatusBean> statuses, final\n         query.append(baseURL).append(\"user/\").append(enable\n                 ? \"reactivate/\"\n                 : \"suspend/\").append(userId).append(\"?\").\n-        // perform on resource if and only if resources have been speciofied\n+                // perform on resource if and only if resources have been speciofied\n                 append(\"performRemotely=\").append(!statuses.isEmpty()).append(\"&\");\n \n         boolean performLoacal = false;\n@@ -152,6 +162,6 @@ private UserTO enable(final long userId, final List<StatusBean> statuses, final\n         // perform on syncope if and only if it has been requested\n         query.append(\"performLocally=\").append(performLoacal);\n \n-        return restTemplate.getForObject(query.toString(), UserTO.class);\n+        return SyncopeSession.get().getRestTemplate().getForObject(query.toString(), UserTO.class);\n     }\n }"},{"sha":"043b9b476cba00673dcf91f047c5a0e19f36757f","filename":"console/src/main/java/org/apache/syncope/console/rest/WorkflowRestClient.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -21,17 +21,19 @@\n import org.springframework.stereotype.Component;\n import org.apache.syncope.client.to.WorkflowDefinitionTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.SyncopeSession;\n \n @Component\n public class WorkflowRestClient extends AbstractBaseRestClient {\n \n-    public WorkflowDefinitionTO getDefinition() throws SyncopeClientCompositeErrorException {\n-\n-        return restTemplate.getForObject(baseURL + \"workflow/definition.json\", WorkflowDefinitionTO.class);\n+    public WorkflowDefinitionTO getDefinition()\n+            throws SyncopeClientCompositeErrorException {\n+        return SyncopeSession.get().getRestTemplate().getForObject(\n+                baseURL + \"workflow/definition.json\", WorkflowDefinitionTO.class);\n     }\n \n-    public void updateDefinition(final WorkflowDefinitionTO workflowDef) throws SyncopeClientCompositeErrorException {\n-\n-        restTemplate.put(baseURL + \"/workflow/definition.json\", workflowDef);\n+    public void updateDefinition(final WorkflowDefinitionTO workflowDef)\n+            throws SyncopeClientCompositeErrorException {\n+        SyncopeSession.get().getRestTemplate().put(baseURL + \"/workflow/definition.json\", workflowDef);\n     }\n }"},{"sha":"ded4a716ca0f7193f893bc22681e170a516ad86f","filename":"console/src/main/resources/applicationContext.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/034b1aa52174d1f3dc371f69bf640f057e740ded/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=034b1aa52174d1f3dc371f69bf640f057e740ded","patch":"@@ -85,14 +85,15 @@ under the License.\n     </property>\n   </bean>\n   \n-  <bean id=\"httpClientFactory\" class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\">\n+  <bean id=\"httpClientFactory\" class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\" scope=\"prototype\">\n     <constructor-arg value=\"${host}\"/>\n     <constructor-arg value=\"${port}\"/>\n     <constructor-arg value=\"${scheme}\"/>\n     <constructor-arg ref=\"httpClientConnManager\"/>\n     <constructor-arg ref=\"httpClientParams\"/>\n   </bean>\n-  <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n+  \n+  <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\" scope=\"prototype\">\n     <constructor-arg ref=\"httpClientFactory\"/>\n \n     <property name=\"errorHandler\">"}]}