{"sha":"b94270d1e42937d3ca04a8fcb0182f3ca65fcb74","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI5NDI3MGQxZTQyOTM3ZDNjYTA0YThmY2IwMTgyZjNjYTY1ZmNiNzQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-04-16T14:14:02Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-04-16T14:14:17Z"},"message":"[SYNCOPE-1629] pgjsonb: escape chars when using like_regex","tree":{"sha":"e499ee1f9f02916e8a3cb0f4660ea09c7b7964fb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e499ee1f9f02916e8a3cb0f4660ea09c7b7964fb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b94270d1e42937d3ca04a8fcb0182f3ca65fcb74","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b94270d1e42937d3ca04a8fcb0182f3ca65fcb74","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b94270d1e42937d3ca04a8fcb0182f3ca65fcb74","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b94270d1e42937d3ca04a8fcb0182f3ca65fcb74/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a2543e34051104b761beca56e7d47f39b63f842d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a2543e34051104b761beca56e7d47f39b63f842d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a2543e34051104b761beca56e7d47f39b63f842d"}],"stats":{"total":18,"additions":14,"deletions":4},"files":[{"sha":"ecdf80e43349f433f0d6826252d285f6be9572c9","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b94270d1e42937d3ca04a8fcb0182f3ca65fcb74/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b94270d1e42937d3ca04a8fcb0182f3ca65fcb74/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=b94270d1e42937d3ca04a8fcb0182f3ca65fcb74","patch":"@@ -64,6 +64,16 @@ public class PGJPAJSONAnySearchDAO extends AbstractJPAJSONAnySearchDAO {\n \n     protected static final String ALWAYS_FALSE_ASSERTION = \"1=2\";\n \n+    protected static final String POSTGRESQL_REGEX_CHARS = \"!$()*+.:<=>?[\\\\]^{|}-\";\n+\n+    protected static String escapeForLikeRegex(final String input) {\n+        String output = input;\n+        for (char toEscape : POSTGRESQL_REGEX_CHARS.toCharArray()) {\n+            output = output.replace(String.valueOf(toEscape), \"\\\\\" + toEscape);\n+        }\n+        return output;\n+    }\n+\n     @Override\n     protected void parseOrderByForPlainSchema(\n             final SearchSupport svs,\n@@ -153,11 +163,11 @@ protected void fillAttrQuery(\n                     if (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) {\n                         query.append(\"jsonb_path_exists(\").append(schema.getKey()).append(\", '$[*] ? \").\n                                 append(\"(@.\").append(key).append(\" like_regex \\\"\").\n-                                append(value.replace(\"%\", \".*\")).\n+                                append(escapeForLikeRegex(value).replace(\"%\", \".*\")).\n                                 append(\"\\\"\").\n                                 append(lower ? \" flag \\\"i\\\"\" : \"\").append(\")')\");\n                     } else {\n-                        query.append(\" 1=2\");\n+                        query.append(' ').append(ALWAYS_FALSE_ASSERTION);\n                         LOG.error(\"LIKE is only compatible with string or enum schemas\");\n                     }\n                     break;\n@@ -167,7 +177,7 @@ protected void fillAttrQuery(\n                     query.append(\"jsonb_path_exists(\").append(schema.getKey()).append(\", '$[*] ? \").\n                             append(\"(@.\").append(key);\n                     if (isStr) {\n-                        query.append(\" like_regex \\\"\").append(value.replace(\"'\", \"''\")).append(\"\\\"\");\n+                        query.append(\" like_regex \\\"\").append(escapeForLikeRegex(value).replace(\"'\", \"''\")).append('\"');\n                     } else {\n                         query.append(\" == \").append(value);\n                     }\n@@ -860,7 +870,7 @@ protected void fillAttrQuery(\n                             query.append('?').append(setParameter(parameters, cond.getExpression()));\n                         }\n                     } else {\n-                        query.append(\" 1=2\");\n+                        query.append(' ').append(ALWAYS_FALSE_ASSERTION);\n                         LOG.error(\"LIKE is only compatible with string or enum schemas\");\n                     }\n                     break;"}]}