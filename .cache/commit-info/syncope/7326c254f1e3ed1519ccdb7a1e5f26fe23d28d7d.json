{"sha":"7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjczMjZjMjU0ZjFlM2VkMTUxOWNjZGI3YTFlNWYyNmZlMjNkMjhkN2Q=","commit":{"author":{"name":"mdisabatino","email":"marco.disabatino@tirasa.net","date":"2021-02-26T13:29:31Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"marco.disabatino@tirasa.net","date":"2021-02-26T15:37:13Z"},"message":"[SYNCOPE-1619] SearchPanel improvement (#243)","tree":{"sha":"4c05fad78481a50731ceb471297e86354e8a7c29","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4c05fad78481a50731ceb471297e86354e8a7c29"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"dd4c60005f70952dfaf0f0483d6e3117c9d35c4b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dd4c60005f70952dfaf0f0483d6e3117c9d35c4b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dd4c60005f70952dfaf0f0483d6e3117c9d35c4b"}],"stats":{"total":271,"additions":219,"deletions":52},"files":[{"sha":"b078a409047f7efc4a64d77bb98d62879d3907d0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/search/ConnObjectSearchPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java?ref=7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.panels.search;\n \n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n@@ -84,17 +85,17 @@ protected void populate() {\n \n             @Override\n             protected List<SearchClause.Type> load() {\n-                return List.of(SearchClause.Type.ATTRIBUTE);\n+                return Collections.singletonList(SearchClause.Type.ATTRIBUTE);\n             }\n         };\n \n-        this.dnames = new LoadableDetachableModel<List<String>>() {\n+        this.dnames = new LoadableDetachableModel<Map<String, PlainSchemaTO>>() {\n \n             private static final long serialVersionUID = 2989042618372L;\n \n             @Override\n-            protected List<String> load() {\n-                return List.of();\n+            protected Map<String, PlainSchemaTO> load() {\n+                return Collections.emptyMap();\n             }\n         };\n "},{"sha":"493c7f418afde1d039b5861f07e6807994a09d3e","filename":"client/idrepo/common-ui/src/main/resources/META-INF/resources/ui-commons/css/search.scss","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2Fsearch.scss","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2Fsearch.scss","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2Fsearch.scss?ref=7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","patch":"@@ -31,7 +31,7 @@\n     }\n   }\n   .field {\n-    line-height: 34px;\n+    line-height: 30px;\n     float: left;\n     padding: 0 3px 0px 0px;\n     display: inline-block !important;\n@@ -63,7 +63,7 @@\n     }\n   }\n   .value {\n-    width: 250px;\n+    width: 320px;\n   }\n   .date {\n     width: 160px;\n@@ -93,3 +93,11 @@\n .custom-autocomplete-box li.selected {\n   background-color: #eee;\n }\n+\n+.search-spinner {\n+  line-height: 23px !important;\n+}\n+\n+.search-spinner span{\n+  width: 70% !important;\n+}"},{"sha":"78f611bf7bf6515deeaebf5d5278cb5e039b96d2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DisplayAttributesModalPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDisplayAttributesModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDisplayAttributesModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDisplayAttributesModalPanel.java?ref=7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","patch":"@@ -23,6 +23,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.PreferenceManager;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -75,7 +76,8 @@ public DisplayAttributesModalPanel(\n         super(modal, pageRef);\n         this.type = type;\n \n-        final List<String> detailslList = SearchableFields.get(DisplayAttributesModalPanel.getTOClass(type));\n+        final List<String> detailslList = SearchableFields.get(DisplayAttributesModalPanel.getTOClass(type))\n+                .keySet().stream().collect(Collectors.toList());\n         Collections.sort(detailslList);\n         Collections.sort(pSchemaNames);\n         Collections.sort(dSchemaNames);"},{"sha":"5dff7659cca961fbcd0431643b329b749d02cb3a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.console.panels.search;\n \n import java.io.Serializable;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -46,7 +47,7 @@ public abstract class AbstractSearchPanel extends Panel {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractSearchPanel.class);\n \n-    protected IModel<List<String>> dnames;\n+    protected IModel<Map<String, PlainSchemaTO>> dnames;\n \n     protected IModel<Map<String, PlainSchemaTO>> anames;\n \n@@ -178,13 +179,19 @@ protected SearchClause newModelObject() {\n     }\n \n     protected void populate() {\n-        dnames = new LoadableDetachableModel<List<String>>() {\n+        dnames = new LoadableDetachableModel<Map<String, PlainSchemaTO>>() {\n \n             private static final long serialVersionUID = 5275935387613157437L;\n \n             @Override\n-            protected List<String> load() {\n-                return SearchableFields.get(typeKind.getTOClass());\n+            protected Map<String, PlainSchemaTO> load() {\n+                Map<String, PlainSchemaTO> dSchemaNames = new HashMap<>();\n+                SearchableFields.get(typeKind.getTOClass()).forEach((key, type) -> {\n+                            PlainSchemaTO plain = new PlainSchemaTO();\n+                            plain.setType(type);\n+                            dSchemaNames.put(key, plain);\n+                        });\n+                return dSchemaNames;\n             }\n         };\n "},{"sha":"a9bfc7184424e064bfbc8c9fb6bac5eb0f16635a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":170,"deletions":27,"changes":197,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","patch":"@@ -21,14 +21,19 @@\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.checkbox.bootstraptoggle.BootstrapToggle;\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.checkbox.bootstraptoggle.BootstrapToggleConfig;\n import java.io.Serializable;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.panels.search.SearchClause.Comparator;\n@@ -42,10 +47,14 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.SchemaUtils;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDateTimeFieldPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -73,6 +82,8 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {\n \n     private static final long serialVersionUID = -527351923968737757L;\n \n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = ThreadLocal.withInitial(SimpleDateFormat::new);\n+\n     protected static final AttributeModifier PREVENT_DEFAULT_RETURN = AttributeModifier.replace(\n             \"onkeydown\",\n             Model.of(\"if (event.keyCode == 13) { event.preventDefault(); }\"));\n@@ -111,7 +122,7 @@ default List<String> properties() {\n         }\n \n         default void setFieldAccess(\n-                AjaxTextFieldPanel value,\n+                FieldPanel value,\n                 AjaxTextFieldPanel property,\n                 LoadableDetachableModel<List<String>> properties) {\n \n@@ -133,7 +144,7 @@ default void setFieldAccess(\n \n     private final IModel<Map<String, PlainSchemaTO>> anames;\n \n-    private final IModel<List<String>> dnames;\n+    private final IModel<Map<String, PlainSchemaTO>> dnames;\n \n     private final Pair<IModel<List<String>>, IModel<Integer>> groupInfo;\n \n@@ -157,6 +168,9 @@ default void setFieldAccess(\n \n     private IEventSink resultContainer;\n \n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    private FieldPanel value;\n+\n     private final GroupRestClient groupRestClient = new GroupRestClient();\n \n     public SearchClausePanel(\n@@ -167,7 +181,7 @@ public SearchClausePanel(\n             final IModel<List<SearchClause.Type>> types,\n             final Customizer customizer,\n             final IModel<Map<String, PlainSchemaTO>> anames,\n-            final IModel<List<String>> dnames,\n+            final IModel<Map<String, PlainSchemaTO>> dnames,\n             final Pair<IModel<List<String>>, IModel<Integer>> groupInfo,\n             final IModel<List<String>> roleNames,\n             final IModel<List<String>> privilegeNames,\n@@ -264,7 +278,7 @@ protected List<String> load() {\n \n                 switch (field.getModel().getObject().getType()) {\n                     case ATTRIBUTE:\n-                        List<String> names = new ArrayList<>(dnames.getObject());\n+                        List<String> names = new ArrayList<>(dnames.getObject().keySet());\n                         if (anames != null && anames.getObject() != null && !anames.getObject().isEmpty()) {\n                             names.addAll(anames.getObject().keySet());\n                         }\n@@ -356,6 +370,7 @@ public final MarkupContainer add(final Component... childs) {\n     }\n \n     @Override\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public FieldPanel<SearchClause> settingsDependingComponents() {\n         SearchClause searchClause = this.clause.getObject();\n \n@@ -488,36 +503,25 @@ protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n         comparator.setChoiceRenderer(getComparatorRender(field.getModel()));\n         field.add(comparator);\n \n-        AjaxTextFieldPanel value = new AjaxTextFieldPanel(\n-                \"value\", \"value\", new PropertyModel<>(searchClause, \"value\"), true);\n-        value.hideLabel().setOutputMarkupId(true);\n-        field.add(value);\n-\n-        value.getField().add(PREVENT_DEFAULT_RETURN);\n-        value.getField().add(new IndicatorAjaxEventBehavior(Constants.ON_KEYDOWN) {\n+        renderSearchValueField(searchClause, property);\n+        field.addOrReplace(value);\n \n-            private static final long serialVersionUID = -7133385027739964990L;\n+        property.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n-            @Override\n-            protected void onEvent(final AjaxRequestTarget target) {\n-                target.focusComponent(null);\n-                value.getField().inputChanged();\n-                value.getField().validate();\n-                if (value.getField().isValid()) {\n-                    value.getField().valid();\n-                    value.getField().updateModel();\n-                }\n-            }\n+            private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n-            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n-                super.updateAjaxAttributes(attributes);\n-                AJAX_SUBMIT_ON_RETURN.accept(attributes);\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                renderSearchValueField(searchClause, property);\n+                field.addOrReplace(value);\n+                target.add(value);\n             }\n-        });\n+        }\n+        );\n \n         AjaxDropDownChoicePanel<SearchClause.Type> type = new AjaxDropDownChoicePanel<>(\n                 \"type\", \"type\", new PropertyModel<>(searchClause, \"type\"));\n+\n         type.setChoices(types).setChoiceRenderer(customizer.typeRenderer()).\n                 hideLabel().setRequired(required).setOutputMarkupId(true);\n         type.setNullValid(false);\n@@ -583,11 +587,12 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         return this;\n     }\n \n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     private void setFieldAccess(\n             final Type type,\n             final AjaxTextFieldPanel property,\n             final FieldPanel<Comparator> comparator,\n-            final AjaxTextFieldPanel value) {\n+            final FieldPanel value) {\n \n         if (type != null) {\n             property.setEnabled(true);\n@@ -879,6 +884,144 @@ public SearchClause.Comparator getObject(\n         };\n     }\n \n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    private void renderSearchValueField(\n+            final SearchClause searchClause,\n+            final AjaxTextFieldPanel property) {\n+\n+        PlainSchemaTO plainSchemaTO = anames.getObject().get(property.getModelObject());\n+        if (plainSchemaTO == null) {\n+            PlainSchemaTO defaultPlainTO = new PlainSchemaTO();\n+            defaultPlainTO.setType(AttrSchemaType.String);\n+            plainSchemaTO = dnames.getObject().getOrDefault(property.getModelObject(), defaultPlainTO);\n+        }\n+\n+        switch (plainSchemaTO.getType()) {\n+            case Boolean:\n+                value = new AjaxTextFieldPanel(\n+                        \"value\",\n+                        \"value\",\n+                        new PropertyModel<>(searchClause, \"value\"),\n+                        true);\n+                ((AjaxTextFieldPanel) value).setChoices(Arrays.asList(\"true\", \"false\"));\n+\n+                break;\n+            case Date:\n+                SimpleDateFormat df = DATE_FORMAT.get();\n+                df.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n+\n+                value = new AjaxDateTimeFieldPanel(\n+                        \"value\",\n+                        \"value\",\n+                        new PropertyModel(searchClause, \"value\") {\n+\n+                    private static final long serialVersionUID = 1177692285167186690L;\n+\n+                    @Override\n+                    public Object getObject() {\n+                        String date = (String) super.getObject();\n+                        try {\n+                            return date != null ? df.parse(date) : null;\n+                        } catch (ParseException ex) {\n+                            LOG.error(\"Date parse error {}\", date, ex);\n+                        }\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    public void setObject(final Object object) {\n+                        if (object instanceof Date) {\n+                            String valueDate = df.format(object);\n+                            super.setObject(valueDate);\n+                        } else {\n+                            super.setObject(object);\n+                        }\n+                    }\n+                }, FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN));\n+                break;\n+\n+            case Enum:\n+                value = new AjaxDropDownChoicePanel<>(\n+                        \"value\",\n+                        \"value\",\n+                        new PropertyModel(searchClause, \"value\"),\n+                        true);\n+                ((AjaxDropDownChoicePanel<String>) value).setChoices(SchemaUtils.getEnumeratedValues(plainSchemaTO));\n+\n+                if (StringUtils.isNotBlank(plainSchemaTO.getEnumerationKeys())) {\n+                    Map<String, String> valueMap = SchemaUtils.getEnumeratedKeyValues(plainSchemaTO);\n+                    ((AjaxDropDownChoicePanel) value).setChoiceRenderer(new IChoiceRenderer<String>() {\n+\n+                        private static final long serialVersionUID = -3724971416312135885L;\n+\n+                        @Override\n+                        public String getDisplayValue(final String value) {\n+                            return valueMap.get(value) == null ? value : valueMap.get(value);\n+                        }\n+\n+                        @Override\n+                        public String getIdValue(final String value, final int i) {\n+                            return value;\n+                        }\n+\n+                        @Override\n+                        public String getObject(\n+                                final String id, final IModel<? extends List<? extends String>> choices) {\n+                            return id;\n+                        }\n+                    });\n+                }\n+                break;\n+            case Long:\n+                value = new AjaxSpinnerFieldPanel.Builder<Long>().enableOnChange().build(\n+                        \"value\",\n+                        \"Value\",\n+                        Long.class,\n+                        new PropertyModel(searchClause, \"value\"));\n+\n+                value.add(new AttributeModifier(\"class\", \"field value search-spinner\"));\n+                break;\n+\n+            case Double:\n+                value = new AjaxSpinnerFieldPanel.Builder<Double>().enableOnChange().step(0.1).build(\n+                        \"value\",\n+                        \"value\",\n+                        Double.class,\n+                        new PropertyModel(searchClause, \"value\"));\n+                value.add(new AttributeModifier(\"class\", \"field value search-spinner\"));\n+                break;\n+\n+            default:\n+                value = new AjaxTextFieldPanel(\n+                        \"value\", \"value\", new PropertyModel<>(searchClause, \"value\"), true);\n+                break;\n+        }\n+\n+        value.hideLabel().setOutputMarkupId(true);\n+        value.getField().add(PREVENT_DEFAULT_RETURN);\n+        value.getField().add(new IndicatorAjaxEventBehavior(Constants.ON_KEYDOWN) {\n+\n+            private static final long serialVersionUID = -7133385027739964990L;\n+\n+            @Override\n+            protected void onEvent(final AjaxRequestTarget target) {\n+                target.focusComponent(null);\n+                value.getField().inputChanged();\n+                value.getField().validate();\n+                if (value.getField().isValid()) {\n+                    value.getField().valid();\n+                    value.getField().updateModel();\n+                }\n+            }\n+\n+            @Override\n+            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n+                super.updateAjaxAttributes(attributes);\n+                AJAX_SUBMIT_ON_RETURN.accept(attributes);\n+            }\n+        });\n+    }\n+\n     @Override\n     public FieldPanel<SearchClause> clone() {\n         SearchClausePanel panel = new SearchClausePanel("},{"sha":"18c4f4277c69fa23efce82dd7a293249a19c0dd9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","patch":"@@ -20,9 +20,9 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.function.Function;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n@@ -220,7 +220,7 @@ public static String buildFIQL(\n             final List<SearchClause> clauses,\n             final AbstractFiqlSearchConditionBuilder<?, ?, ?> builder) {\n \n-        return buildFIQL(clauses, builder, Map.of(), NO_CUSTOM_CONDITION);\n+        return buildFIQL(clauses, builder, Collections.emptyMap(), NO_CUSTOM_CONDITION);\n     }\n \n     public static String buildFIQL(\n@@ -243,7 +243,7 @@ public static String buildFIQL(\n                 String value = clause.getValue() == null\n                         ? null\n                         : ENCODINGS.keySet().stream().\n-                                reduce(clause.getValue(), (s, k) -> s.replace(k, ENCODINGS.get(k)));\n+                                reduce(clause.getValue().toString(), (s, k) -> s.replace(k, ENCODINGS.get(k)));\n \n                 switch (clause.getType()) {\n                     case GROUP_MEMBER:\n@@ -487,7 +487,7 @@ public static String buildFIQL(\n             notTheFirst = true;\n         }\n \n-        String fiql = Optional.ofNullable(condition).map(CompleteCondition::query).orElse(null);\n+        String fiql = condition == null ? null : condition.query();\n         LOG.debug(\"Generated FIQL: {}\", fiql);\n \n         return fiql;"},{"sha":"62a9fc921f2f28b1a3bbf780929ef9e8fe9193e4","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SearchableFields.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java?ref=7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","patch":"@@ -19,18 +19,18 @@\n package org.apache.syncope.common.lib.search;\n \n import java.lang.reflect.Field;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n \n public final class SearchableFields {\n \n@@ -41,17 +41,17 @@ public final class SearchableFields {\n     private static final Set<String> ANY_FIELDS = new HashSet<>();\n \n     static {\n-        ANY_FIELDS.addAll(get(UserTO.class));\n-        ANY_FIELDS.addAll(get(GroupTO.class));\n-        ANY_FIELDS.addAll(get(AnyObjectTO.class));\n+        ANY_FIELDS.addAll(get(UserTO.class).keySet());\n+        ANY_FIELDS.addAll(get(GroupTO.class).keySet());\n+        ANY_FIELDS.addAll(get(AnyObjectTO.class).keySet());\n     }\n \n     public static boolean contains(final String schema) {\n         return ANY_FIELDS.contains(schema);\n     }\n \n-    public static List<String> get(final Class<? extends AnyTO> anyRef) {\n-        final List<String> fieldNames = new ArrayList<>();\n+    public static Map<String, AttrSchemaType> get(final Class<? extends AnyTO> anyRef) {\n+        final Map<String, AttrSchemaType> fields = new TreeMap<>(Collections.reverseOrder());\n \n         // loop on class and all superclasses searching for field\n         Class<?> clazz = anyRef;\n@@ -61,14 +61,13 @@ public static List<String> get(final Class<? extends AnyTO> anyRef) {\n                         && !Collection.class.isAssignableFrom(field.getType())\n                         && !Map.class.isAssignableFrom(field.getType())) {\n \n-                    fieldNames.add(field.getName());\n+                    fields.put(field.getName(), AttrSchemaType.getAttrSchemaTypeByClass(field.getType()));\n                 }\n             }\n             clazz = clazz.getSuperclass();\n         }\n \n-        Collections.reverse(fieldNames);\n-        return fieldNames;\n+        return fields;\n     }\n \n     private SearchableFields() {"},{"sha":"cf934189feda1e57ce2a1622240dbab5edce1c8b","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/AttrSchemaType.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaType.java?ref=7326c254f1e3ed1519ccdb7a1e5f26fe23d28d7d","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.common.lib.types;\n \n import java.util.Date;\n+import java.util.stream.Stream;\n \n public enum AttrSchemaType {\n \n@@ -46,4 +47,10 @@ public boolean isConversionPatternNeeded() {\n                 || this == AttrSchemaType.Double\n                 || this == AttrSchemaType.Long;\n     }\n+\n+    public static AttrSchemaType getAttrSchemaTypeByClass(final Class<?> type) {\n+        return Stream.of(AttrSchemaType.values())\n+                .filter(item -> type == item.getType()).findFirst().orElse(AttrSchemaType.String);\n+    }\n+\n }"}]}