{"sha":"de0a37d750f7671fb5160cad39f54e08a6f9b420","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRlMGEzN2Q3NTBmNzY3MWZiNTE2MGNhZDM5ZjU0ZTA4YTZmOWI0MjA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-15T10:44:53Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-15T10:44:53Z"},"message":"[SYNCOPE-750] Reworking statistics + adding numbers about users, groups, any objects, ...","tree":{"sha":"b8b2f5611d70e290bf970f616e4413cc3edd675c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b8b2f5611d70e290bf970f616e4413cc3edd675c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/de0a37d750f7671fb5160cad39f54e08a6f9b420","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/de0a37d750f7671fb5160cad39f54e08a6f9b420","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/de0a37d750f7671fb5160cad39f54e08a6f9b420","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/de0a37d750f7671fb5160cad39f54e08a6f9b420/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"62c8175af86948f23723480927f2eada6523bbbc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62c8175af86948f23723480927f2eada6523bbbc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/62c8175af86948f23723480927f2eada6523bbbc"}],"stats":{"total":782,"additions":586,"deletions":196},"files":[{"sha":"d1cb9af933f54dd5a83ba3ae1eb7ff3151ebcf2b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeServices.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -67,7 +67,7 @@ public static void testUsernameAndPassword(final String username, final String p\n         }\n         final SyncopeClient syncopeClient = new SyncopeClientFactoryBean()\n                 .setAddress(properties.getProperty(\"syncope.rest.services\")).create(username, password);\n-        syncopeClient.getService(SyncopeService.class).syncope();\n+        syncopeClient.getService(SyncopeService.class).platform();\n     }\n \n     private SyncopeServices() {"},{"sha":"31053a824bad6a115bc47863aecd98112e2dbf02","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/entitlement/EntitlementSyncopeOperations.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementSyncopeOperations.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -25,20 +25,20 @@\n import org.apache.syncope.client.cli.commands.role.RoleSyncopeOperations;\n import org.apache.syncope.client.cli.commands.user.UserSyncopeOperations;\n import org.apache.syncope.common.lib.to.RoleTO;\n-import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n \n public class EntitlementSyncopeOperations {\n \n-    private final SyncopeTO syncopeTO = SyncopeServices.get(SyncopeService.class).syncope();\n+    private final PlatformInfo platformInfo = SyncopeServices.get(SyncopeService.class).platform();\n \n     private final UserSyncopeOperations userSyncopeOperations = new UserSyncopeOperations();\n \n     private final RoleSyncopeOperations roleSyncopeOperations = new RoleSyncopeOperations();\n \n     public Set<String> list() {\n-        return syncopeTO.getEntitlements();\n+        return platformInfo.getEntitlements();\n     }\n \n     public boolean exists(final String entitlement) {"},{"sha":"bae4b88829fd970b0b7a3923d815be482c7129a0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/Info.java","status":"modified","additions":29,"deletions":28,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.cli.commands.info;\n \n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -28,13 +28,13 @@ public class Info {\n \n     private static final Logger LOG = LoggerFactory.getLogger(Info.class);\n \n-    private final SyncopeTO syncopeTO = SyncopeServices.get(SyncopeService.class).syncope();\n+    private final PlatformInfo platformInfo = SyncopeServices.get(SyncopeService.class).platform();\n \n     private final InfoResultManager infoResultManager = new InfoResultManager();\n \n     public void version() {\n         try {\n-            infoResultManager.printVersion(syncopeTO.getVersion());\n+            infoResultManager.printVersion(platformInfo.getVersion());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -43,7 +43,7 @@ public void version() {\n \n     public void pwdResetAllowed() {\n         try {\n-            infoResultManager.printPwdResetAllowed(syncopeTO.isPwdResetAllowed());\n+            infoResultManager.printPwdResetAllowed(platformInfo.isPwdResetAllowed());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -52,7 +52,8 @@ public void pwdResetAllowed() {\n \n     public void resetWithSecurityQuestion() {\n         try {\n-            infoResultManager.printPwdResetRequiringSecurityQuestions(syncopeTO.isPwdResetRequiringSecurityQuestions());\n+            infoResultManager.printPwdResetRequiringSecurityQuestions(\n+                    platformInfo.isPwdResetRequiringSecurityQuestions());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -61,7 +62,7 @@ public void resetWithSecurityQuestion() {\n \n     public void selfRegistrationAllowed() {\n         try {\n-            infoResultManager.printSelfRegistrationAllowed(syncopeTO.isSelfRegAllowed());\n+            infoResultManager.printSelfRegistrationAllowed(platformInfo.isSelfRegAllowed());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -71,9 +72,9 @@ public void selfRegistrationAllowed() {\n     public void provisioningManager() {\n         try {\n             infoResultManager.printProvisioningManager(\n-                    syncopeTO.getAnyObjectProvisioningManager(),\n-                    syncopeTO.getUserProvisioningManager(),\n-                    syncopeTO.getGroupProvisioningManager());\n+                    platformInfo.getAnyObjectProvisioningManager(),\n+                    platformInfo.getUserProvisioningManager(),\n+                    platformInfo.getGroupProvisioningManager());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -83,9 +84,9 @@ public void provisioningManager() {\n     public void workflowAdapter() {\n         try {\n             infoResultManager.printWorkflowAdapter(\n-                    syncopeTO.getAnyObjectWorkflowAdapter(),\n-                    syncopeTO.getUserWorkflowAdapter(),\n-                    syncopeTO.getGroupWorkflowAdapter());\n+                    platformInfo.getAnyObjectWorkflowAdapter(),\n+                    platformInfo.getUserWorkflowAdapter(),\n+                    platformInfo.getGroupWorkflowAdapter());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -94,7 +95,7 @@ public void workflowAdapter() {\n \n     public void accountRules() {\n         try {\n-            infoResultManager.printAccountRules(syncopeTO.getAccountRules());\n+            infoResultManager.printAccountRules(platformInfo.getAccountRules());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -103,7 +104,7 @@ public void accountRules() {\n \n     public void connidLocations() {\n         try {\n-            infoResultManager.printConnidLocations(syncopeTO.getConnIdLocations());\n+            infoResultManager.printConnidLocations(platformInfo.getConnIdLocations());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -112,7 +113,7 @@ public void connidLocations() {\n \n     public void reconciliationFilterBuilders() {\n         try {\n-            infoResultManager.printReconciliationFilterBuilders(syncopeTO.getReconciliationFilterBuilders());\n+            infoResultManager.printReconciliationFilterBuilders(platformInfo.getReconciliationFilterBuilders());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -121,7 +122,7 @@ public void reconciliationFilterBuilders() {\n \n     public void logicActions() {\n         try {\n-            infoResultManager.printLogicActions(syncopeTO.getLogicActions());\n+            infoResultManager.printLogicActions(platformInfo.getLogicActions());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -130,7 +131,7 @@ public void logicActions() {\n \n     public void mappingItemTransformers() {\n         try {\n-            infoResultManager.printMappingItemTransformers(syncopeTO.getMappingItemTransformers());\n+            infoResultManager.printMappingItemTransformers(platformInfo.getMappingItemTransformers());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -139,7 +140,7 @@ public void mappingItemTransformers() {\n \n     public void passwordRules() {\n         try {\n-            infoResultManager.printPasswordRules(syncopeTO.getPasswordRules());\n+            infoResultManager.printPasswordRules(platformInfo.getPasswordRules());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -148,7 +149,7 @@ public void passwordRules() {\n \n     public void propagationActions() {\n         try {\n-            infoResultManager.printPropagationActions(syncopeTO.getPropagationActions());\n+            infoResultManager.printPropagationActions(platformInfo.getPropagationActions());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -157,7 +158,7 @@ public void propagationActions() {\n \n     public void pushActions() {\n         try {\n-            infoResultManager.printPushActions(syncopeTO.getPushActions());\n+            infoResultManager.printPushActions(platformInfo.getPushActions());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -166,7 +167,7 @@ public void pushActions() {\n \n     public void pushCorrelationActions() {\n         try {\n-            infoResultManager.printCorrelationActions(syncopeTO.getPushCorrelationRules());\n+            infoResultManager.printCorrelationActions(platformInfo.getPushCorrelationRules());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -175,7 +176,7 @@ public void pushCorrelationActions() {\n \n     public void reportlets() {\n         try {\n-            infoResultManager.printReportlets(syncopeTO.getReportlets());\n+            infoResultManager.printReportlets(platformInfo.getReportlets());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -184,7 +185,7 @@ public void reportlets() {\n \n     public void syncActions() {\n         try {\n-            infoResultManager.printSyncActions(syncopeTO.getSyncActions());\n+            infoResultManager.printSyncActions(platformInfo.getSyncActions());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -193,7 +194,7 @@ public void syncActions() {\n \n     public void syncCorrelationRules() {\n         try {\n-            infoResultManager.printCorrelationRules(syncopeTO.getSyncCorrelationRules());\n+            infoResultManager.printCorrelationRules(platformInfo.getSyncCorrelationRules());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -202,7 +203,7 @@ public void syncCorrelationRules() {\n \n     public void taskJobs() {\n         try {\n-            infoResultManager.printJobs(syncopeTO.getTaskJobs());\n+            infoResultManager.printJobs(platformInfo.getTaskJobs());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -211,7 +212,7 @@ public void taskJobs() {\n \n     public void validators() {\n         try {\n-            infoResultManager.printValidators(syncopeTO.getValidators());\n+            infoResultManager.printValidators(platformInfo.getValidators());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -220,7 +221,7 @@ public void validators() {\n \n     public void passwordGenerators() {\n         try {\n-            infoResultManager.printPasswordGenerator(syncopeTO.getPasswordGenerator());\n+            infoResultManager.printPasswordGenerator(platformInfo.getPasswordGenerator());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());\n@@ -229,7 +230,7 @@ public void passwordGenerators() {\n \n     public void virAttrCache() {\n         try {\n-            infoResultManager.printVirtualAttributeCacheClass(syncopeTO.getVirAttrCache());\n+            infoResultManager.printVirtualAttributeCacheClass(platformInfo.getVirAttrCache());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());"},{"sha":"3c810751c9c68f2149b6779e314ed01a5c41ef1d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallSetup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetup.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -167,7 +167,7 @@ public void setup() throws FileNotFoundException, IllegalAccessException {\n \n         try {\n             final SyncopeService syncopeService = SyncopeServices.get(SyncopeService.class);\n-            final String syncopeVersion = syncopeService.syncope().getVersion();\n+            final String syncopeVersion = syncopeService.platform().getVersion();\n             installResultManager.installationSuccessful(syncopeVersion);\n         } catch (final ProcessingException ex) {\n             LOG.error(\"Error installing CLI\", ex);"},{"sha":"65ff3767743d552e9489f18d7be92efb5432f4a0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallSetupForDebug.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetupForDebug.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetupForDebug.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetupForDebug.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -67,7 +67,7 @@ public void setup() throws FileNotFoundException, IllegalAccessException {\n \n         try {\n             final SyncopeService syncopeService = SyncopeServices.get(SyncopeService.class);\n-            final String syncopeVersion = syncopeService.syncope().getVersion();\n+            final String syncopeVersion = syncopeService.platform().getVersion();\n             installResultManager.installationSuccessful(syncopeVersion);\n         } catch (final ProcessingException ex) {\n             LOG.error(\"Error installing CLI\", ex);"},{"sha":"806d1153f4d9aae4948ffd5ec52ef80d7f2c0f56","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.DomainTO;\n-import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n@@ -58,7 +58,7 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {\n \n     public static final String MENU_COLLAPSE = \"MENU_COLLAPSE\";\n \n-    private final SyncopeTO syncopeTO;\n+    private final PlatformInfo platformInfo;\n \n     private final List<String> domains;\n \n@@ -89,16 +89,16 @@ public SyncopeConsoleSession(final Request request) {\n                 SyncopeConsoleApplication.get().getAnonymousUser(),\n                 SyncopeConsoleApplication.get().getAnonymousKey());\n \n-        syncopeTO = anonymousClient.getService(SyncopeService.class).syncope();\n+        platformInfo = anonymousClient.getService(SyncopeService.class).platform();\n         domains = new ArrayList<>();\n         domains.add(SyncopeConstants.MASTER_DOMAIN);\n         CollectionUtils.collect(anonymousClient.getService(DomainService.class).list(),\n                 EntityTOUtils.<String, DomainTO>keyTransformer(),\n                 domains);\n     }\n \n-    public SyncopeTO getSyncopeTO() {\n-        return syncopeTO;\n+    public PlatformInfo getPlatformInfo() {\n+        return platformInfo;\n     }\n \n     public List<String> getDomains() {"},{"sha":"4336b6aa9b9a4d84ff0cfeeaa13cfa407a95be50","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -236,7 +236,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected List<String> load() {\n-                return new ArrayList<>(SyncopeConsoleSession.get().getSyncopeTO().getValidators());\n+                return new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getValidators());\n             }\n         };\n "},{"sha":"11ec127c0ca97d897f1916b09fc044f296c71378","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -72,7 +72,7 @@ public Set<String> getCorrelationRuleClasses() {\n         Set<String> rules = null;\n \n         try {\n-            rules = SyncopeConsoleSession.get().getSyncopeTO().getSyncCorrelationRules();\n+            rules = SyncopeConsoleSession.get().getPlatformInfo().getSyncCorrelationRules();\n         } catch (Exception e) {\n             LOG.error(\"While getting all correlation rule classes\", e);\n         }"},{"sha":"b4b880f19b8aba8aed7305460f6527c73e706b57","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -38,7 +38,7 @@ public class ResourceRestClient extends BaseRestClient {\n     private static final long serialVersionUID = -6898907679835668987L;\n \n     public List<String> getPropagationActionsClasses() {\n-        return new ArrayList<>(SyncopeConsoleSession.get().getSyncopeTO().getPropagationActions());\n+        return new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getPropagationActions());\n     }\n \n     public List<ResourceTO> getAll() {"},{"sha":"d7517ce76d751241409a799a897814f4196cef6d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/RoleRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -59,6 +59,6 @@ public int count() {\n     }\n \n     public List<String> getAllAvailableEntitlements() {\n-        return new ArrayList<>(getSyncopeService().syncope().getEntitlements());\n+        return new ArrayList<>(getSyncopeService().platform().getEntitlements());\n     }\n }"},{"sha":"7ca9cc7a9d999e43d181b6732c8936ae6d64e270","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -166,7 +166,7 @@ public List<String> getAllValidatorClasses() {\n         List<String> response = null;\n \n         try {\n-            response = new ArrayList<>(SyncopeConsoleSession.get().getSyncopeTO().getValidators());\n+            response = new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getValidators());\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all validators\", e);\n         }"},{"sha":"1e158e5773993ce1426a7a2e5cff25b227d16253","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -46,15 +46,15 @@ public class TaskRestClient extends BaseRestClient implements ExecutionRestClien\n     private static final long serialVersionUID = 6284485820911028843L;\n \n     public Set<String> getJobClasses() {\n-        return SyncopeConsoleSession.get().getSyncopeTO().getTaskJobs();\n+        return SyncopeConsoleSession.get().getPlatformInfo().getTaskJobs();\n     }\n \n     public Set<String> getSyncActionsClasses() {\n-        return SyncopeConsoleSession.get().getSyncopeTO().getSyncActions();\n+        return SyncopeConsoleSession.get().getPlatformInfo().getSyncActions();\n     }\n \n     public Set<String> getPushActionsClasses() {\n-        return SyncopeConsoleSession.get().getSyncopeTO().getPushActions();\n+        return SyncopeConsoleSession.get().getPlatformInfo().getPushActions();\n     }\n \n     /**"},{"sha":"24cfafefccffbea4493744a1ddadc955cecdf098","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserSelfRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -31,7 +31,7 @@ public class UserSelfRestClient extends BaseRestClient {\n     public boolean isSelfRegistrationAllowed() {\n         Boolean result = null;\n         try {\n-            result = SyncopeConsoleSession.get().getSyncopeTO().isSelfRegAllowed();\n+            result = SyncopeConsoleSession.get().getPlatformInfo().isSelfRegAllowed();\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While seeking if self registration is allowed\", e);\n         }\n@@ -60,7 +60,7 @@ public void delete() {\n     public boolean isPasswordResetAllowed() {\n         Boolean result = null;\n         try {\n-            result = SyncopeConsoleSession.get().getSyncopeTO().isPwdResetAllowed();\n+            result = SyncopeConsoleSession.get().getPlatformInfo().isPwdResetAllowed();\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While seeking if password reset is allowed\", e);\n         }\n@@ -73,7 +73,7 @@ public boolean isPasswordResetAllowed() {\n     public boolean isPwdResetRequiringSecurityQuestions() {\n         Boolean result = null;\n         try {\n-            result = SyncopeConsoleSession.get().getSyncopeTO().isPwdResetRequiringSecurityQuestions();\n+            result = SyncopeConsoleSession.get().getPlatformInfo().isPwdResetRequiringSecurityQuestions();\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While seeking if password reset requires security question\", e);\n         }"},{"sha":"d7f9df5199ba2547cff93cf75174261d79907ccb","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/WorkflowRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWorkflowRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWorkflowRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWorkflowRestClient.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -58,7 +58,7 @@ public byte[] getDiagram() {\n     }\n \n     public boolean isActivitiEnabledForUsers() {\n-        return SyncopeConsoleSession.get().getSyncopeTO().getUserWorkflowAdapter().contains(\"Activiti\");\n+        return SyncopeConsoleSession.get().getPlatformInfo().getUserWorkflowAdapter().contains(\"Activiti\");\n     }\n \n     public void updateDefinition(final MediaType mediaType, final String definition) {"},{"sha":"01a369c6c0f51b8341a11b028dc28575b6904599","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -128,7 +128,7 @@ protected Pair<List<URI>, List<URI>> load() {\n             final List<URI> connectorServers = new ArrayList<>();\n             final List<URI> filePaths = new ArrayList<>();\n \n-            for (String location : SyncopeConsoleSession.get().getSyncopeTO().getConnIdLocations()) {\n+            for (String location : SyncopeConsoleSession.get().getPlatformInfo().getConnIdLocations()) {\n                 if (location.startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n                     connectorServers.add(URI.create(location));\n                 } else {"},{"sha":"dfaf8448e53d7fcf285fda2fb90e0c496aadc48d","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.Session;\n@@ -58,7 +58,7 @@ public class SyncopeEnduserSession extends WebSession {\n \n     private String password;\n \n-    private final SyncopeTO syncopeTO;\n+    private final PlatformInfo platformInfo;\n \n     private UserTO selfTO;\n \n@@ -80,8 +80,7 @@ public SyncopeEnduserSession(final Request request) {\n         anonymousClient = SyncopeEnduserApplication.get().getClientFactory().create(\n                 SyncopeEnduserApplication.get().getAnonymousUser(),\n                 SyncopeEnduserApplication.get().getAnonymousKey());\n-        syncopeTO = anonymousClient.getService(SyncopeService.class).syncope();\n-\n+        platformInfo = anonymousClient.getService(SyncopeService.class).platform();\n     }\n \n     public boolean authenticate(final String username, final String password) {\n@@ -165,8 +164,8 @@ public String getPassword() {\n         return password;\n     }\n \n-    public SyncopeTO getSyncopeTO() {\n-        return syncopeTO;\n+    public PlatformInfo getPlatformInfo() {\n+        return platformInfo;\n     }\n \n     public UserTO getSelfTO() {"},{"sha":"5ed11be4e187dd4e73709d0623868cc0fbbc2d0a","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/adapters/PlatformInfoAdapter.java","status":"renamed","additions":14,"deletions":16,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fadapters%2FPlatformInfoAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fadapters%2FPlatformInfoAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fadapters%2FPlatformInfoAdapter.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -19,25 +19,23 @@\n package org.apache.syncope.client.enduser.adapters;\n \n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n-import org.apache.syncope.client.enduser.model.SyncopeTORequest;\n-import org.apache.syncope.common.lib.to.SyncopeTO;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.syncope.client.enduser.model.PlatformInfoRequest;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n \n-public class SyncopeTOAdapter {\n+public final class PlatformInfoAdapter {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeTOAdapter.class);\n+    public static PlatformInfoRequest toPlatformInfoRequest(final PlatformInfo platformInfo) {\n+        PlatformInfoRequest request = new PlatformInfoRequest();\n+        request.setPwdResetAllowed(platformInfo.isPwdResetAllowed());\n+        request.setSelfRegAllowed(platformInfo.isSelfRegAllowed());\n+        request.setPwdResetRequiringSecurityQuestions(platformInfo.isPwdResetRequiringSecurityQuestions());\n+        request.setVersion(platformInfo.getVersion());\n+        request.setCaptchaEnabled(SyncopeEnduserApplication.get().isCaptchaEnabled());\n \n-    public SyncopeTORequest toSyncopeTORequest(final SyncopeTO syncopeTO) {\n-\n-        final SyncopeTORequest syncopeTORequest = new SyncopeTORequest();\n-        syncopeTORequest.setPwdResetAllowed(syncopeTO.isPwdResetAllowed());\n-        syncopeTORequest.setSelfRegAllowed(syncopeTO.isSelfRegAllowed());\n-        syncopeTORequest.setPwdResetRequiringSecurityQuestions(syncopeTO.isPwdResetRequiringSecurityQuestions());\n-        syncopeTORequest.setVersion(syncopeTO.getVersion());\n-        syncopeTORequest.setCaptchaEnabled(SyncopeEnduserApplication.get().isCaptchaEnabled());\n-\n-        return syncopeTORequest;\n+        return request;\n     }\n \n+    private PlatformInfoAdapter() {\n+        // private constructor for static utility class\n+    }\n }","previous_filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/adapters/SyncopeTOAdapter.java"},{"sha":"b95706c5ccee440dd67a5361b04ae37914ec0ae6","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/model/PlatformInfoRequest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FPlatformInfoRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FPlatformInfoRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FPlatformInfoRequest.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -20,7 +20,7 @@\n \n import java.io.Serializable;\n \n-public class SyncopeTORequest implements Serializable {\n+public class PlatformInfoRequest implements Serializable {\n \n     private static final long serialVersionUID = -6763020920564016374L;\n \n@@ -34,7 +34,7 @@ public class SyncopeTORequest implements Serializable {\n \n     private boolean captchaEnabled;\n \n-    public SyncopeTORequest() {\n+    public PlatformInfoRequest() {\n     }\n \n     public String getVersion() {","previous_filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/model/SyncopeTORequest.java"},{"sha":"6c402dbae5605246194883151e97702d1e20040b","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/AbstractBaseResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -37,7 +37,7 @@ public abstract class AbstractBaseResource extends AbstractResource {\n     protected final boolean isSelfRegistrationAllowed() {\n         Boolean result = null;\n         try {\n-            result = SyncopeEnduserSession.get().getSyncopeTO().isSelfRegAllowed();\n+            result = SyncopeEnduserSession.get().getPlatformInfo().isSelfRegAllowed();\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While seeking if self registration is allowed\", e);\n         }"},{"sha":"acfbac9e509bed94f806f84d4ed848ff24ecaea1","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -23,7 +23,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.adapters.SyncopeTOAdapter;\n+import org.apache.syncope.client.enduser.adapters.PlatformInfoAdapter;\n import org.apache.syncope.client.enduser.util.SaltGenerator;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.wicket.request.resource.IResource;\n@@ -37,15 +37,8 @@ public class InfoResource extends AbstractBaseResource {\n \n     private static final long serialVersionUID = 6453101466981543020L;\n \n-    private final SyncopeTOAdapter syncopeTOAdapter;\n-\n-    public InfoResource() {\n-        syncopeTOAdapter = new SyncopeTOAdapter();\n-    }\n-\n     @Override\n     protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n-\n         ResourceResponse response = new ResourceResponse();\n \n         try {\n@@ -63,8 +56,10 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n \n                 @Override\n                 public void writeData(final IResource.Attributes attributes) throws IOException {\n-                    attributes.getResponse().write(POJOHelper.serialize(syncopeTOAdapter.toSyncopeTORequest(\n-                            SyncopeEnduserSession.get().getSyncopeTO())));\n+                    attributes.getResponse().write(\n+                            POJOHelper.serialize(\n+                                    PlatformInfoAdapter.toPlatformInfoRequest(\n+                                    SyncopeEnduserSession.get().getPlatformInfo())));\n                 }\n             });\n             response.setStatusCode(Response.Status.OK.getStatusCode());"},{"sha":"8a11ca72e121ef3faebb115632bb091b26599628","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfPasswordReset.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfPasswordReset.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -70,7 +70,7 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                 throw new Exception(\"Entered captcha is not matching\");\n             }\n \n-            if (SyncopeEnduserSession.get().getSyncopeTO().isPwdResetRequiringSecurityQuestions()) {\n+            if (SyncopeEnduserSession.get().getPlatformInfo().isPwdResetRequiringSecurityQuestions()) {\n                 if (parameters.get(\"securityanswer\") == null || parameters.get(\"securityanswer\").length == 0) {\n                     throw new Exception(\"A correct security answer should be provided\");\n                 }"},{"sha":"a831e763fa02dcf39734003ca81e5ca24113ce53","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/NumbersInfo.java","status":"added","additions":162,"deletions":0,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FNumbersInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FNumbersInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FNumbersInfo.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.info;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+\n+@XmlRootElement(name = \"numbersInfo\")\n+@XmlType\n+public class NumbersInfo extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 7691187370598649583L;\n+\n+    private int totalUsers;\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, Integer> usersByRealm = new HashMap<>();\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, Integer> usersByStatus = new HashMap<>();\n+\n+    private int totalGroups;\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, Integer> groupsByRealm = new HashMap<>();\n+\n+    private String anyType1;\n+\n+    private Integer totalAny1;\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, Integer> any1ByRealm = new HashMap<>();\n+\n+    private String anyType2;\n+\n+    private Integer totalAny2;\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, Integer> any2ByRealm = new HashMap<>();\n+\n+    private int totalResources;\n+\n+    private int totalRoles;\n+\n+    public int getTotalUsers() {\n+        return totalUsers;\n+    }\n+\n+    public void setTotalUsers(final int totalUsers) {\n+        this.totalUsers = totalUsers;\n+    }\n+\n+    public int getTotalGroups() {\n+        return totalGroups;\n+    }\n+\n+    public void setTotalGroups(final int totalGroups) {\n+        this.totalGroups = totalGroups;\n+    }\n+\n+    public String getAnyType1() {\n+        return anyType1;\n+    }\n+\n+    public void setAnyType1(final String anyType1) {\n+        this.anyType1 = anyType1;\n+    }\n+\n+    public Integer getTotalAny1() {\n+        return totalAny1;\n+    }\n+\n+    public void setTotalAny1(final Integer totalAny1) {\n+        this.totalAny1 = totalAny1;\n+    }\n+\n+    public String getAnyType2() {\n+        return anyType2;\n+    }\n+\n+    public void setAnyType2(final String anyType2) {\n+        this.anyType2 = anyType2;\n+    }\n+\n+    public Integer getTotalAny2() {\n+        return totalAny2;\n+    }\n+\n+    public void setTotalAny2(final Integer totalAny2) {\n+        this.totalAny2 = totalAny2;\n+    }\n+\n+    public int getTotalResources() {\n+        return totalResources;\n+    }\n+\n+    public void setTotalResources(final int totalResources) {\n+        this.totalResources = totalResources;\n+    }\n+\n+    public int getTotalRoles() {\n+        return totalRoles;\n+    }\n+\n+    public void setTotalRoles(final int totalRoles) {\n+        this.totalRoles = totalRoles;\n+    }\n+\n+    @JsonProperty\n+    public Map<String, Integer> getUsersByRealm() {\n+        return usersByRealm;\n+    }\n+\n+    @JsonProperty\n+    public Map<String, Integer> getUsersByStatus() {\n+        return usersByStatus;\n+    }\n+\n+    @JsonProperty\n+    public Map<String, Integer> getGroupsByRealm() {\n+        return groupsByRealm;\n+    }\n+\n+    @JsonProperty\n+    public Map<String, Integer> getAny1ByRealm() {\n+        return any1ByRealm;\n+    }\n+\n+    @JsonProperty\n+    public Map<String, Integer> getAny2ByRealm() {\n+        return any2ByRealm;\n+    }\n+\n+}"},{"sha":"790ec597a14b9c54342d01466bf82a86fb7a1c10","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/PlatformInfo.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.info;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.HashSet;\n@@ -27,9 +27,9 @@\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n-@XmlRootElement(name = \"syncope\")\n+@XmlRootElement(name = \"platformInfo\")\n @XmlType\n-public class SyncopeTO extends AbstractBaseBean {\n+public class PlatformInfo extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -7941853999417673827L;\n ","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncopeTO.java"},{"sha":"eb806edc338c6094fd6ac896261867095342d0cc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/SystemInfo.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FSystemInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FSystemInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FSystemInfo.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.info;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import javax.xml.bind.annotation.XmlElement;\n@@ -26,9 +26,9 @@\n import org.apache.commons.collections4.queue.CircularFifoQueue;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n-@XmlRootElement(name = \"platform\")\n+@XmlRootElement(name = \"systemInfo\")\n @XmlType\n-public class PlatformTO extends AbstractBaseBean {\n+public class SystemInfo extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -352727968865892499L;\n \n@@ -38,7 +38,7 @@ public class PlatformTO extends AbstractBaseBean {\n \n     private int availableProcessors;\n \n-    private final CircularFifoQueue<PlatformLoad> load = new CircularFifoQueue<>(5);\n+    private final CircularFifoQueue<PlatformLoad> load = new CircularFifoQueue<>(10);\n \n     public String getOs() {\n         return os;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PlatformTO.java"},{"sha":"cb2ad8b4dc4c31316fe70202ed42faf6526ff838","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java","status":"modified","additions":23,"deletions":9,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -22,8 +22,9 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.to.PlatformTO;\n-import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.lib.info.NumbersInfo;\n+import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n \n /**\n  * General info about this Apache Syncope deployment.\n@@ -32,21 +33,34 @@\n public interface SyncopeService extends JAXRSService {\n \n     /**\n-     * Provides information summary about this Apache Syncope deployment's configuration.\n+     * Provides information summary about platform configuration (workflow adapters, provisioning managers, validators,\n+     * actions, correlation rules, reportlets, ...).\n      *\n-     * @return information summary about this Apache Syncope deployment's configuration\n+     * @return information summary about platform configuration (workflow adapters, provisioning managers, validators,\n+     * actions, correlation rules, reportlets, ...)\n      */\n     @GET\n+    @Path(\"/platform\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    SyncopeTO syncope();\n+    PlatformInfo platform();\n \n     /**\n-     * Provides information about the underlying platform (Operating System, CPU / memory usage, ...).\n+     * Provides information about the underlying system (Operating System, CPU / memory usage, ...).\n      *\n-     * @return information about the underlying platform (Operating System, CPU / memory usage, ...)\n+     * @return information about the underlying system (Operating System, CPU / memory usage, ...)\n      */\n     @GET\n-    @Path(\"/platform\")\n+    @Path(\"/system\")\n+    @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    SystemInfo system();\n+\n+    /** *\n+     * Provides some numbers about the managed entities (users, groups, any objects...).\n+     *\n+     * @return some numbers about the managed entities (users, groups, any objects...)\n+     */\n+    @GET\n+    @Path(\"/numbers\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PlatformTO platform();\n+    NumbersInfo numbers();\n }"},{"sha":"1706c99ca2f07e4af12a15c6dae8924ec3178423","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractLogic.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -25,7 +25,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n- * Superclass for all controllers.\n+ * Superclass for all business logic modules.\n  *\n  * @param <T> transfer object used for input / output\n  */"},{"sha":"9d55e62c9c74e17f74b8e689cc7a46a493915206","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":130,"deletions":65,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -24,13 +24,23 @@\n import org.apache.syncope.core.misc.EntitlementsHolder;\n import java.lang.reflect.Method;\n import java.net.URI;\n+import java.util.Iterator;\n+import java.util.Map;\n import javax.annotation.Resource;\n-import org.apache.syncope.common.lib.to.PlatformTO;\n-import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.info.NumbersInfo;\n+import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.ImplementationLookup.Type;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n@@ -45,14 +55,30 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+@Transactional(readOnly = true)\n @Component\n-public class SyncopeLogic extends AbstractLogic<SyncopeTO> {\n+public class SyncopeLogic extends AbstractLogic<AbstractBaseBean> {\n \n     private static final int MB = 1024 * 1024;\n \n-    private static final SyncopeTO SYNCOPE_TO = new SyncopeTO();\n+    private static PlatformInfo PLATFORM_INFO;\n \n-    private static final PlatformTO PLATFORM_TO = new PlatformTO();\n+    private static SystemInfo SYSTEM_INFO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n \n     @Autowired\n     private ConfDAO confDAO;\n@@ -90,103 +116,142 @@ public class SyncopeLogic extends AbstractLogic<SyncopeTO> {\n     @Autowired\n     private ImplementationLookup implLookup;\n \n-    @Transactional(readOnly = true)\n     public boolean isSelfRegAllowed() {\n         return confDAO.find(\"selfRegistration.allowed\", \"false\").getValues().get(0).getBooleanValue();\n     }\n \n-    @Transactional(readOnly = true)\n     public boolean isPwdResetAllowed() {\n         return confDAO.find(\"passwordReset.allowed\", \"false\").getValues().get(0).getBooleanValue();\n     }\n \n-    @Transactional(readOnly = true)\n     public boolean isPwdResetRequiringSecurityQuestions() {\n         return confDAO.find(\"passwordReset.securityQuestion\", \"true\").getValues().get(0).getBooleanValue();\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    public SyncopeTO info() {\n-        synchronized (SYNCOPE_TO) {\n-            SYNCOPE_TO.setVersion(version);\n-\n-            SYNCOPE_TO.setSelfRegAllowed(isSelfRegAllowed());\n-            SYNCOPE_TO.setPwdResetAllowed(isPwdResetAllowed());\n-            SYNCOPE_TO.setPwdResetRequiringSecurityQuestions(isPwdResetRequiringSecurityQuestions());\n-\n-            if (bundleManager.getLocations() != null) {\n-                for (URI location : bundleManager.getLocations()) {\n-                    SYNCOPE_TO.getConnIdLocations().add(location.toASCIIString());\n+    public PlatformInfo platform() {\n+        synchronized (this) {\n+            if (PLATFORM_INFO == null) {\n+                PLATFORM_INFO = new PlatformInfo();\n+                PLATFORM_INFO.setVersion(version);\n+\n+                if (bundleManager.getLocations() != null) {\n+                    for (URI location : bundleManager.getLocations()) {\n+                        PLATFORM_INFO.getConnIdLocations().add(location.toASCIIString());\n+                    }\n                 }\n+\n+                PLATFORM_INFO.setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n+                PLATFORM_INFO.setUserWorkflowAdapter(AopUtils.getTargetClass(uwfAdapter).getName());\n+                PLATFORM_INFO.setGroupWorkflowAdapter(AopUtils.getTargetClass(gwfAdapter).getName());\n+\n+                PLATFORM_INFO.setAnyObjectProvisioningManager(aProvisioningManager.getClass().getName());\n+                PLATFORM_INFO.setUserProvisioningManager(uProvisioningManager.getClass().getName());\n+                PLATFORM_INFO.setGroupProvisioningManager(gProvisioningManager.getClass().getName());\n+                PLATFORM_INFO.setVirAttrCache(virAttrCache.getClass().getName());\n+                PLATFORM_INFO.setPasswordGenerator(passwordGenerator.getClass().getName());\n+\n+                PLATFORM_INFO.getReportlets().addAll(implLookup.getClassNames(Type.REPORTLET));\n+                PLATFORM_INFO.getAccountRules().addAll(implLookup.getClassNames(Type.ACCOUNT_RULE));\n+                PLATFORM_INFO.getPasswordRules().addAll(implLookup.getClassNames(Type.PASSWORD_RULE));\n+                PLATFORM_INFO.getMappingItemTransformers().addAll(\n+                        implLookup.getClassNames(Type.MAPPING_ITEM_TRANSFORMER));\n+                PLATFORM_INFO.getTaskJobs().addAll(implLookup.getClassNames(Type.TASKJOBDELEGATE));\n+                PLATFORM_INFO.getReconciliationFilterBuilders().\n+                        addAll(implLookup.getClassNames(Type.RECONCILIATION_FILTER_BUILDER));\n+                PLATFORM_INFO.getLogicActions().addAll(implLookup.getClassNames(Type.LOGIC_ACTIONS));\n+                PLATFORM_INFO.getPropagationActions().addAll(implLookup.getClassNames(Type.PROPAGATION_ACTIONS));\n+                PLATFORM_INFO.getSyncActions().addAll(implLookup.getClassNames(Type.SYNC_ACTIONS));\n+                PLATFORM_INFO.getPushActions().addAll(implLookup.getClassNames(Type.PUSH_ACTIONS));\n+                PLATFORM_INFO.getSyncCorrelationRules().addAll(implLookup.getClassNames(Type.SYNC_CORRELATION_RULE));\n+                PLATFORM_INFO.getValidators().addAll(implLookup.getClassNames(Type.VALIDATOR));\n+                PLATFORM_INFO.getNotificationRecipientsProviders().\n+                        addAll(implLookup.getClassNames(Type.NOTIFICATION_RECIPIENTS_PROVIDER));\n             }\n \n-            SYNCOPE_TO.setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n-            SYNCOPE_TO.setUserWorkflowAdapter(AopUtils.getTargetClass(uwfAdapter).getName());\n-            SYNCOPE_TO.setGroupWorkflowAdapter(AopUtils.getTargetClass(gwfAdapter).getName());\n-\n-            SYNCOPE_TO.setAnyObjectProvisioningManager(aProvisioningManager.getClass().getName());\n-            SYNCOPE_TO.setUserProvisioningManager(uProvisioningManager.getClass().getName());\n-            SYNCOPE_TO.setGroupProvisioningManager(gProvisioningManager.getClass().getName());\n-            SYNCOPE_TO.setVirAttrCache(virAttrCache.getClass().getName());\n-            SYNCOPE_TO.setPasswordGenerator(passwordGenerator.getClass().getName());\n-\n-            SYNCOPE_TO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n-\n-            SYNCOPE_TO.getReportlets().addAll(implLookup.getClassNames(Type.REPORTLET));\n-            SYNCOPE_TO.getAccountRules().addAll(implLookup.getClassNames(Type.ACCOUNT_RULE));\n-            SYNCOPE_TO.getPasswordRules().addAll(implLookup.getClassNames(Type.PASSWORD_RULE));\n-            SYNCOPE_TO.getMappingItemTransformers().addAll(implLookup.getClassNames(Type.MAPPING_ITEM_TRANSFORMER));\n-            SYNCOPE_TO.getTaskJobs().addAll(implLookup.getClassNames(Type.TASKJOBDELEGATE));\n-            SYNCOPE_TO.getReconciliationFilterBuilders().\n-                    addAll(implLookup.getClassNames(Type.RECONCILIATION_FILTER_BUILDER));\n-            SYNCOPE_TO.getLogicActions().addAll(implLookup.getClassNames(Type.LOGIC_ACTIONS));\n-            SYNCOPE_TO.getPropagationActions().addAll(implLookup.getClassNames(Type.PROPAGATION_ACTIONS));\n-            SYNCOPE_TO.getSyncActions().addAll(implLookup.getClassNames(Type.SYNC_ACTIONS));\n-            SYNCOPE_TO.getPushActions().addAll(implLookup.getClassNames(Type.PUSH_ACTIONS));\n-            SYNCOPE_TO.getSyncCorrelationRules().addAll(implLookup.getClassNames(Type.SYNC_CORRELATION_RULE));\n-            SYNCOPE_TO.getValidators().addAll(implLookup.getClassNames(Type.VALIDATOR));\n-            SYNCOPE_TO.getNotificationRecipientsProviders().\n-                    addAll(implLookup.getClassNames(Type.NOTIFICATION_RECIPIENTS_PROVIDER));\n+            PLATFORM_INFO.setSelfRegAllowed(isSelfRegAllowed());\n+            PLATFORM_INFO.setPwdResetAllowed(isPwdResetAllowed());\n+            PLATFORM_INFO.setPwdResetRequiringSecurityQuestions(isPwdResetRequiringSecurityQuestions());\n+\n+            PLATFORM_INFO.getEntitlements().clear();\n+            PLATFORM_INFO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n         }\n \n-        return SYNCOPE_TO;\n+        return PLATFORM_INFO;\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    public PlatformTO platform() {\n+    public SystemInfo system() {\n+        synchronized (this) {\n+            OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();\n+            RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n+\n+            if (SYSTEM_INFO == null) {\n+                SYSTEM_INFO = new SystemInfo();\n+                SYSTEM_INFO.setOs(operatingSystemMXBean.getName()\n+                        + \" \" + operatingSystemMXBean.getVersion()\n+                        + \" \" + operatingSystemMXBean.getArch());\n+                SYSTEM_INFO.setAvailableProcessors(operatingSystemMXBean.getAvailableProcessors());\n+                SYSTEM_INFO.setJvm(\n+                        runtimeMXBean.getVmName()\n+                        + \" \" + System.getProperty(\"java.version\")\n+                        + \" \" + runtimeMXBean.getVmVendor());\n+            }\n \n-        synchronized (PLATFORM_TO) {\n-            PlatformTO.PlatformLoad instant = new PlatformTO.PlatformLoad();\n+            SystemInfo.PlatformLoad instant = new SystemInfo.PlatformLoad();\n \n-            OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();\n-            PLATFORM_TO.setOs(operatingSystemMXBean.getName()\n-                    + \" \" + operatingSystemMXBean.getVersion()\n-                    + \" \" + operatingSystemMXBean.getArch());\n-            PLATFORM_TO.setAvailableProcessors(operatingSystemMXBean.getAvailableProcessors());\n             instant.setSystemLoadAverage(operatingSystemMXBean.getSystemLoadAverage());\n \n-            RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n-            PLATFORM_TO.setJvm(\n-                    runtimeMXBean.getVmName()\n-                    + \" \" + System.getProperty(\"java.version\")\n-                    + \" \" + runtimeMXBean.getVmVendor());\n             instant.setUptime(runtimeMXBean.getUptime());\n \n             Runtime runtime = Runtime.getRuntime();\n             instant.setTotalMemory(runtime.totalMemory() / MB);\n             instant.setMaxMemory(runtime.maxMemory() / MB);\n             instant.setFreeMemory(runtime.freeMemory() / MB);\n \n-            PLATFORM_TO.getLoad().add(instant);\n+            SYSTEM_INFO.getLoad().add(instant);\n         }\n \n-        return PLATFORM_TO;\n+        return SYSTEM_INFO;\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public NumbersInfo numbers() {\n+        NumbersInfo numbersInfo = new NumbersInfo();\n+\n+        numbersInfo.setTotalUsers(userDAO.count());\n+        numbersInfo.getUsersByRealm().putAll(userDAO.countByRealm());\n+        numbersInfo.getUsersByStatus().putAll(userDAO.countByStatus());\n+\n+        numbersInfo.setTotalGroups(groupDAO.count());\n+        numbersInfo.getGroupsByRealm().putAll(groupDAO.countByRealm());\n+\n+        Map<AnyType, Integer> anyObjectNumbers = anyObjectDAO.countByType();\n+        int i = 0;\n+        for (Iterator<Map.Entry<AnyType, Integer>> itor = anyObjectNumbers.entrySet().iterator();\n+                i < 2 && itor.hasNext(); i++) {\n+\n+            Map.Entry<AnyType, Integer> entry = itor.next();\n+            if (i == 0) {\n+                numbersInfo.setAnyType1(entry.getKey().getKey());\n+                numbersInfo.setTotalAny1(entry.getValue());\n+                numbersInfo.getAny1ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n+            } else if (i == 1) {\n+                numbersInfo.setAnyType2(entry.getKey().getKey());\n+                numbersInfo.setTotalAny2(entry.getValue());\n+                numbersInfo.getAny2ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n+            }\n+        }\n+\n+        numbersInfo.setTotalResources(resourceDAO.count());\n+\n+        numbersInfo.setTotalRoles(roleDAO.count());\n+\n+        return numbersInfo;\n     }\n \n     @Override\n-    protected SyncopeTO resolveReference(final Method method, final Object... args)\n+    protected AbstractBaseBean resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n         throw new UnresolvedReferenceException();"},{"sha":"7fabda34bb58a7434c50a4236dd4a06c33bd54fa","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -20,6 +20,8 @@\n \n import java.util.Collection;\n import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -28,6 +30,16 @@\n \n public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n+    /**\n+     * Counts the number of instances for each type.\n+     * The returned map is expected to be sorted on values.\n+     *\n+     * @return the number of instances for each type\n+     */\n+    Map<AnyType, Integer> countByType();\n+\n+    Map<String, Integer> countByRealm(AnyType anyType);\n+\n     List<Group> findDynGroupMemberships(AnyObject anyObject);\n \n     List<ARelationship> findARelationships(AnyObject anyObject);"},{"sha":"35e96893947232feef6bff61b9eba07b4b6f66aa","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -27,6 +27,8 @@\n \n public interface ExternalResourceDAO extends DAO<ExternalResource, String> {\n \n+    int count();\n+\n     ExternalResource find(String key);\n \n     Provision findProvision(Long key);"},{"sha":"d372fbcbe7f30d6a6e25ade4e407d1f51f84aef1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -31,6 +31,10 @@\n \n public interface GroupDAO extends AnyDAO<Group> {\n \n+    int count();\n+\n+    Map<String, Integer> countByRealm();\n+\n     Group find(String name);\n \n     List<Group> findOwnedByUser(Long userKey);"},{"sha":"2b76eb9e8250404732dac421a74d8bbe55c6ab1c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RoleDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -25,6 +25,8 @@\n \n public interface RoleDAO extends DAO<Role, String> {\n \n+    int count();\n+\n     Role find(String key);\n \n     List<Role> findByRealm(Realm realm);"},{"sha":"3eed6bc0bfb6cc6273e6e03ae7764dc652b2eb5b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collection;\n import java.util.List;\n+import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -29,6 +30,12 @@\n \n public interface UserDAO extends AnyDAO<User> {\n \n+    int count();\n+\n+    Map<String, Integer> countByRealm();\n+\n+    Map<String, Integer> countByStatus();\n+\n     User authFind(String username);\n \n     User find(String username);"},{"sha":"451383717f4e6385db3332f3bbb932e76261468a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -20,9 +20,14 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n@@ -36,7 +41,9 @@\n import org.apache.syncope.core.misc.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -46,6 +53,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -58,6 +66,39 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj\n     @Autowired\n     private GroupDAO groupDAO;\n \n+    @Override\n+    public Map<AnyType, Integer> countByType() {\n+        Query query = entityManager().createQuery(\n+                \"SELECT e.type, COUNT(e) AS countByType FROM  \" + JPAAnyObject.class.getSimpleName() + \" e \"\n+                + \"GROUP BY e.type ORDER BY countByType DESC\");\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object[]> results = query.getResultList();\n+\n+        Map<AnyType, Integer> countByRealm = new LinkedHashMap<>(results.size());\n+        for (Object[] result : results) {\n+            countByRealm.put((AnyType) result[0], ((Number) result[1]).intValue());\n+        }\n+\n+        return Collections.unmodifiableMap(countByRealm);\n+    }\n+\n+    @Override\n+    public Map<String, Integer> countByRealm(final AnyType anyType) {\n+        Query query = entityManager().createQuery(\n+                \"SELECT e.realm, COUNT(e) FROM  \" + JPAAnyObject.class.getSimpleName() + \" e \"\n+                + \"WHERE e.type=:type GROUP BY e.realm\");\n+        query.setParameter(\"type\", anyType);\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object[]> results = query.getResultList();\n+\n+        Map<String, Integer> countByRealm = new HashMap<>(results.size());\n+        for (Object[] result : results) {\n+            countByRealm.put(((Realm) result[0]).getFullPath(), ((Number) result[1]).intValue());\n+        }\n+\n+        return Collections.unmodifiableMap(countByRealm);\n+    }\n+\n     @Override\n     protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.ANY_OBJECT);"},{"sha":"392f3576b82ab6d693fd81bbd3dce548d6a3636e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -21,6 +21,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -75,6 +76,13 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource, String\n     @Autowired\n     private ConnectorRegistry connRegistry;\n \n+    @Override\n+    public int count() {\n+        Query query = entityManager().createQuery(\n+                \"SELECT COUNT(e) FROM  \" + JPAExternalResource.class.getSimpleName() + \" e\");\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n     @Override\n     public ExternalResource find(final String name) {\n         return entityManager().find(JPAExternalResource.class, name);"},{"sha":"ece8d6c62c3380d96a23f2da128b3fdb4aa15252","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -24,6 +24,7 @@\n import java.util.Map;\n import java.util.Set;\n import javax.persistence.NoResultException;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n@@ -75,6 +76,28 @@ protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.GROUP);\n     }\n \n+    @Override\n+    public int count() {\n+        Query query = entityManager().createQuery(\n+                \"SELECT COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e\");\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    public Map<String, Integer> countByRealm() {\n+        Query query = entityManager().createQuery(\n+                \"SELECT e.realm, COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e GROUP BY e.realm\");\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object[]> results = query.getResultList();\n+\n+        Map<String, Integer> countByRealm = new HashMap<>(results.size());\n+        for (Object[] result : results) {\n+            countByRealm.put(((Realm) result[0]).getFullPath(), ((Number) result[1]).intValue());\n+        }\n+\n+        return Collections.unmodifiableMap(countByRealm);\n+    }\n+\n     @Override\n     protected void securityChecks(final Group group) {\n         Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_READ);"},{"sha":"406a3788978f4c25e335b060bebd72bd320466f5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n@@ -39,6 +40,13 @@ public class JPARoleDAO extends AbstractDAO<Role, String> implements RoleDAO {\n     @Autowired\n     private AnySearchDAO searchDAO;\n \n+    @Override\n+    public int count() {\n+        Query query = entityManager().createQuery(\n+                \"SELECT COUNT(e) FROM  \" + JPARole.class.getSimpleName() + \" e\");\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n     @Override\n     public Role find(final String key) {\n         return entityManager().find(JPARole.class, key);"},{"sha":"822c02dd9b4fe96d345553d06711f8195a77d57a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -20,11 +20,15 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n import javax.persistence.NoResultException;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n@@ -97,6 +101,43 @@ protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);\n     }\n \n+    @Override\n+    public int count() {\n+        Query query = entityManager().createQuery(\n+                \"SELECT COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e\");\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    public Map<String, Integer> countByRealm() {\n+        Query query = entityManager().createQuery(\n+                \"SELECT e.realm, COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e GROUP BY e.realm\");\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object[]> results = query.getResultList();\n+\n+        Map<String, Integer> countByRealm = new HashMap<>(results.size());\n+        for (Object[] result : results) {\n+            countByRealm.put(((Realm) result[0]).getFullPath(), ((Number) result[1]).intValue());\n+        }\n+\n+        return Collections.unmodifiableMap(countByRealm);\n+    }\n+\n+    @Override\n+    public Map<String, Integer> countByStatus() {\n+        Query query = entityManager().createQuery(\n+                \"SELECT e.status, COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e GROUP BY e.status\");\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object[]> results = query.getResultList();\n+\n+        Map<String, Integer> countByStatus = new HashMap<>(results.size());\n+        for (Object[] result : results) {\n+            countByStatus.put(((String) result[0]), ((Number) result[1]).intValue());\n+        }\n+\n+        return Collections.unmodifiableMap(countByStatus);\n+    }\n+\n     @Override\n     protected void securityChecks(final User user) {\n         // Allows anonymous (during self-registration) and self (during self-update) to read own user,"},{"sha":"944d684a427da0f41838cb6b4e84fbd17ea7d077","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import org.apache.syncope.common.lib.to.PlatformTO;\n-import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.lib.info.NumbersInfo;\n+import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.syncope.core.logic.SyncopeLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -32,13 +33,18 @@ public class SyncopeServiceImpl extends AbstractServiceImpl implements SyncopeSe\n     private SyncopeLogic logic;\n \n     @Override\n-    public SyncopeTO syncope() {\n-        return logic.info();\n+    public PlatformInfo platform() {\n+        return logic.platform();\n     }\n \n     @Override\n-    public PlatformTO platform() {\n-        return logic.platform();\n+    public SystemInfo system() {\n+        return logic.system();\n+    }\n+\n+    @Override\n+    public NumbersInfo numbers() {\n+        return logic.numbers();\n     }\n \n }"},{"sha":"f1ddc0a7711403274b7803d009dadb5fa0abddc2","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/rest/CamelRoutesRestClient.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -43,10 +43,12 @@ public void update(final CamelRouteTO routeTO) {\n \n     public boolean isCamelEnabledFor(final AnyTypeKind anyTypeKind) {\n         return anyTypeKind == AnyTypeKind.USER\n-                ? SyncopeConsoleSession.get().getSyncopeTO().getUserProvisioningManager().contains(\"Camel\")\n+                ? SyncopeConsoleSession.get().getPlatformInfo().getUserProvisioningManager().contains(\"Camel\")\n                 : anyTypeKind == AnyTypeKind.ANY_OBJECT\n-                        ? SyncopeConsoleSession.get().getSyncopeTO().getAnyObjectProvisioningManager().contains(\"Camel\")\n-                        : SyncopeConsoleSession.get().getSyncopeTO().getGroupProvisioningManager().contains(\"Camel\");\n+                        ? SyncopeConsoleSession.get().getPlatformInfo().\n+                        getAnyObjectProvisioningManager().contains(\"Camel\")\n+                        : SyncopeConsoleSession.get().getPlatformInfo().\n+                        getGroupProvisioningManager().contains(\"Camel\");\n \n     }\n }"},{"sha":"d14eec279897eb9ec53d00655968cec7051aed55","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/ActivitiDetector.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FActivitiDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FActivitiDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FActivitiDetector.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -23,14 +23,14 @@\n public class ActivitiDetector {\n \n     public static boolean isActivitiEnabledForUsers(final SyncopeService syncopeService) {\n-        return syncopeService.syncope().getUserWorkflowAdapter().contains(\"Activiti\");\n+        return syncopeService.platform().getUserWorkflowAdapter().contains(\"Activiti\");\n     }\n \n     public static boolean isActivitiEnabledForGroups(final SyncopeService syncopeService) {\n-        return syncopeService.syncope().getGroupWorkflowAdapter().contains(\"Activiti\");\n+        return syncopeService.platform().getGroupWorkflowAdapter().contains(\"Activiti\");\n     }\n \n     public static boolean isActivitiEnabledForAnyObjects(final SyncopeService syncopeService) {\n-        return syncopeService.syncope().getAnyObjectWorkflowAdapter().contains(\"Activiti\");\n+        return syncopeService.platform().getAnyObjectWorkflowAdapter().contains(\"Activiti\");\n     }\n }"},{"sha":"8ac78718ad00819b5671616efeb6c1a9fc0d39e2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/CamelDetector.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FCamelDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FCamelDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FCamelDetector.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -23,14 +23,14 @@\n public class CamelDetector {\n \n     public static boolean isCamelEnabledForUsers(final SyncopeService syncopeService) {\n-        return syncopeService.syncope().getUserProvisioningManager().contains(\"Camel\");\n+        return syncopeService.platform().getUserProvisioningManager().contains(\"Camel\");\n     }\n \n     public static boolean isCamelEnabledForGroups(final SyncopeService syncopeService) {\n-        return syncopeService.syncope().getGroupProvisioningManager().contains(\"Camel\");\n+        return syncopeService.platform().getGroupProvisioningManager().contains(\"Camel\");\n     }\n \n     public static boolean isCamelEnabledForAnyObjects(final SyncopeService syncopeService) {\n-        return syncopeService.syncope().getAnyObjectProvisioningManager().contains(\"Camel\");\n+        return syncopeService.platform().getAnyObjectProvisioningManager().contains(\"Camel\");\n     }\n }"},{"sha":"59951466051ea7b00ea7331d1f3ddbef6147d23c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/cli/CLIITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -137,7 +137,7 @@ public boolean evaluate(final String line) {\n                     return line.startsWith(\"-\");\n                 }\n             });\n-            assertEquals(syncopeService.syncope().getEntitlements().size(), entitlements);\n+            assertEquals(syncopeService.platform().getEntitlements().size(), entitlements);\n \n             process.destroy();\n         } catch (IOException e) {"},{"sha":"d32350ce824be4a5bfe5cda94decdbaae45b7b3f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -117,7 +117,7 @@ public void testReadEntitlements() {\n \n         // 3. as admin\n         self = adminClient.self();\n-        assertEquals(syncopeService.syncope().getEntitlements().size(), self.getKey().size());\n+        assertEquals(syncopeService.platform().getEntitlements().size(), self.getKey().size());\n         assertFalse(self.getKey().keySet().contains(StandardEntitlement.ANONYMOUS));\n         assertEquals(ADMIN_UNAME, self.getValue().getUsername());\n \n@@ -402,7 +402,7 @@ public void anyTypeEntitlement() {\n         final String anyTypeKey = \"FOLDER \" + getUUIDString();\n \n         // 1. no entitlement exists (yet) for the any type to be created\n-        assertFalse(IterableUtils.matchesAny(syncopeService.syncope().getEntitlements(), new Predicate<String>() {\n+        assertFalse(IterableUtils.matchesAny(syncopeService.platform().getEntitlements(), new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String entitlement) {\n@@ -428,7 +428,7 @@ public boolean evaluate(final String entitlement) {\n         anyTypeService.create(anyTypeTO);\n \n         // 2. now entitlement exists for the any type just created\n-        assertTrue(IterableUtils.matchesAny(syncopeService.syncope().getEntitlements(), new Predicate<String>() {\n+        assertTrue(IterableUtils.matchesAny(syncopeService.platform().getEntitlements(), new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String entitlement) {"},{"sha":"cf7f335cc06ca463189213c0a436c4c5d4d8a145","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -161,7 +161,7 @@ public void delete() {\n \n     @Test\n     public void getCorrelationRules() {\n-        assertEquals(2, syncopeService.syncope().getSyncCorrelationRules().size());\n+        assertEquals(2, syncopeService.platform().getSyncCorrelationRules().size());\n     }\n \n     @Test"},{"sha":"3dafc94e8bdd961a4556a93510536f5c6ef68d3e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -67,7 +67,7 @@ public class PushTaskITCase extends AbstractTaskITCase {\n \n     @Test\n     public void getPushActionsClasses() {\n-        Set<String> actions = syncopeService.syncope().getPushActions();\n+        Set<String> actions = syncopeService.platform().getPushActions();\n         assertNotNull(actions);\n     }\n "},{"sha":"11796716e1eff7c35527465485dd52968b324e8c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -66,7 +66,7 @@ private ReportTO createReport(final ReportTO report) {\n \n     @Test\n     public void getReportletClasses() {\n-        Set<String> reportlets = syncopeService.syncope().getReportlets();\n+        Set<String> reportlets = syncopeService.platform().getReportlets();\n         assertNotNull(reportlets);\n         assertFalse(reportlets.isEmpty());\n     }"},{"sha":"cc6706f42a46a8c6ef23674f47aebf02fe1fec4c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -103,7 +103,7 @@ private ResourceTO buildResourceTO(final String resourceName) {\n \n     @Test\n     public void getPropagationActionsClasses() {\n-        Set<String> actions = syncopeService.syncope().getPropagationActions();\n+        Set<String> actions = syncopeService.platform().getPropagationActions();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }"},{"sha":"0b675028cc709ae75ae12318ea02dc31c0c33ecf","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -53,7 +53,7 @@ public class SchedTaskITCase extends AbstractTaskITCase {\n \n     @Test\n     public void getJobClasses() {\n-        Set<String> jobClasses = syncopeService.syncope().getTaskJobs();\n+        Set<String> jobClasses = syncopeService.platform().getTaskJobs();\n         assertNotNull(jobClasses);\n         assertFalse(jobClasses.isEmpty());\n     }"},{"sha":"d6775714ad0187d3fb53ff389d0f0558256124e8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SyncTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSyncTaskITCase.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -96,7 +96,7 @@ public static void testSyncActionsSetup() {\n \n     @Test\n     public void getSyncActionsClasses() {\n-        Set<String> actions = syncopeService.syncope().getSyncActions();\n+        Set<String> actions = syncopeService.platform().getSyncActions();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }"},{"sha":"abbac1ac70aabc9299df40639be1e4e5cac363a9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de0a37d750f7671fb5160cad39f54e08a6f9b420/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=de0a37d750f7671fb5160cad39f54e08a6f9b420","patch":"@@ -65,7 +65,7 @@ public class UserSelfITCase extends AbstractITCase {\n \n     @Test\n     public void selfRegistrationAllowed() {\n-        assertTrue(syncopeService.syncope().isSelfRegAllowed());\n+        assertTrue(syncopeService.platform().isSelfRegAllowed());\n     }\n \n     @Test"}]}