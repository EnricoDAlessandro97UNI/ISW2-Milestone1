{"sha":"2524280ebeaff46bc351f4692fb4f966148bc87e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI1MjQyODBlYmVhZmY0NmJjMzUxZjQ2OTJmYjRmOTY2MTQ4YmM4N2U=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-14T15:39:02Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-14T15:39:02Z"},"message":"[SYNCOPE-710] Reworking password propagation request and virtual attributes management","tree":{"sha":"2d5870de8e05e9eb56b69787d5e538441b29c6c9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2d5870de8e05e9eb56b69787d5e538441b29c6c9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2524280ebeaff46bc351f4692fb4f966148bc87e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2524280ebeaff46bc351f4692fb4f966148bc87e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2524280ebeaff46bc351f4692fb4f966148bc87e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2524280ebeaff46bc351f4692fb4f966148bc87e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"91cb526c6ccb853d20677562e812d88fc53c252d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/91cb526c6ccb853d20677562e812d88fc53c252d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/91cb526c6ccb853d20677562e812d88fc53c252d"}],"stats":{"total":300,"additions":167,"deletions":133},"files":[{"sha":"166017adcca8ca50464c8a67f0229211d5188141","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":8,"deletions":39,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -247,31 +247,6 @@ protected List<PropagationTask> getCreateTaskIds(final AbstractSubject subject,\n         return createTasks(subject, password, true, null, null, null, null, enable, false, propByRes);\n     }\n \n-    /**\n-     * Performs update on each resource associated to the user excluding the specified into 'resourceNames' parameter.\n-     *\n-     * @param user to be propagated\n-     * @param enable whether user must be enabled or not\n-     * @param noPropResourceNames external resource names not to be considered for propagation\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if user is not found\n-     */\n-    public List<PropagationTask> getUserUpdateTaskIds(final SyncopeUser user, final Boolean enable,\n-            final Set<String> noPropResourceNames)\n-            throws NotFoundException {\n-\n-        return getUpdateTaskIds(\n-                user, // SyncopeUser to be updated on external resources\n-                null, // no password\n-                false,\n-                enable, // status to be propagated\n-                Collections.<String>emptySet(), // no virtual attributes to be managed\n-                Collections.<AttributeMod>emptySet(), // no virtual attributes to be managed\n-                null, // no propagation by resources\n-                noPropResourceNames,\n-                Collections.<MembershipMod>emptySet());\n-    }\n-\n     /**\n      * Performs update on each resource associated to the user.\n      *\n@@ -388,8 +363,12 @@ public List<PropagationTask> getUpdateTaskIds(final AbstractSubject subject,\n         PropagationByResource localPropByRes = binder.fillVirtual(subject, vAttrsToBeRemoved == null\n                 ? Collections.<String>emptySet()\n                 : vAttrsToBeRemoved, vAttrsToBeUpdated == null\n-                ? Collections.<AttributeMod>emptySet()\n-                : vAttrsToBeUpdated, AttributableUtil.getInstance(subject));\n+                        ? Collections.<AttributeMod>emptySet()\n+                        : vAttrsToBeUpdated, AttributableUtil.getInstance(subject));\n+        localPropByRes.merge(propByRes);\n+        if (noPropResourceNames != null) {\n+            localPropByRes.removeAll(noPropResourceNames);\n+        }\n \n         // SYNCOPE-458 fill membership virtual attributes\n         if (subject instanceof SyncopeUser) {\n@@ -402,23 +381,13 @@ public List<PropagationTask> getUpdateTaskIds(final AbstractSubject subject,\n                                 ? Collections.<String>emptySet()\n                                 : membershipMod.getVirAttrsToRemove(),\n                                 membershipMod.getVirAttrsToUpdate() == null ? Collections.<AttributeMod>emptySet()\n-                                : membershipMod.getVirAttrsToUpdate(), AttributableUtil.getInstance(\n-                                AttributableType.MEMBERSHIP));\n+                                        : membershipMod.getVirAttrsToUpdate(), AttributableUtil.getInstance(\n+                                        AttributableType.MEMBERSHIP));\n                     }\n                 }\n             }\n         }\n \n-        if (propByRes == null || propByRes.isEmpty()) {\n-            localPropByRes.addAll(ResourceOperation.UPDATE, subject.getResourceNames());\n-        } else {\n-            localPropByRes.merge(propByRes);\n-        }\n-\n-        if (noPropResourceNames != null) {\n-            localPropByRes.removeAll(noPropResourceNames);\n-        }\n-\n         Map<String, AttributeMod> vAttrsToBeUpdatedMap = null;\n         if (vAttrsToBeUpdated != null) {\n             vAttrsToBeUpdatedMap = new HashMap<String, AttributeMod>();"},{"sha":"93a685989d1a90aae280c4ab56e54f217f0cf943","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":40,"deletions":53,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -20,7 +20,6 @@\n \n import java.lang.reflect.Method;\n import java.security.AccessControlException;\n-import java.util.AbstractMap;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -41,6 +40,7 @@\n import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n+import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.SubjectType;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n@@ -258,54 +258,44 @@ public UserTO update(final UserMod userMod) {\n         UserMod actual = attrTransformer.transform(userMod);\n         LOG.debug(\"Transformed: {}\", actual);\n \n-        // SYNCOPE-501: check if there are memberships to be removed with virtual attributes assigned\n-        boolean removeMemberships = false;\n+        PropagationByResource propByResVirAttr = new PropagationByResource();\n         for (Long membershipId : actual.getMembershipsToRemove()) {\n-            if (!binder.fillMembershipVirtual(\n+            propByResVirAttr.merge(binder.fillMembershipVirtual(\n                     null,\n                     null,\n                     membershipId,\n                     Collections.<String>emptySet(),\n                     Collections.<AttributeMod>emptySet(),\n-                    true).isEmpty()) {\n-\n-                removeMemberships = true;\n-            }\n+                    true));\n         }\n \n         // Actual operations: workflow, propagation, notification\n         WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(actual);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n-        if (tasks.isEmpty()) {\n-            // SYNCOPE-459: take care of user virtual attributes ...\n-            PropagationByResource propByResVirAttr = binder.fillVirtual(\n+        // SYNCOPE-459: take care of user virtual attributes ...\n+        propByResVirAttr.merge(binder.fillVirtual(\n+                updated.getResult().getKey().getId(),\n+                actual.getVirAttrsToRemove(),\n+                actual.getVirAttrsToUpdate()));\n+        for (MembershipMod membershipMod : actual.getMembershipsToAdd()) {\n+            propByResVirAttr.merge(binder.fillMembershipVirtual(\n                     updated.getResult().getKey().getId(),\n-                    actual.getVirAttrsToRemove(),\n-                    actual.getVirAttrsToUpdate());\n-            // SYNCOPE-501: update only virtual attributes (if any of them changed), password propagation is\n-            // not required, take care also of membership virtual attributes\n-            boolean addOrUpdateMemberships = false;\n-            for (MembershipMod membershipMod : actual.getMembershipsToAdd()) {\n-                if (!binder.fillMembershipVirtual(\n-                        updated.getResult().getKey().getId(),\n-                        membershipMod.getRole(),\n-                        null,\n-                        membershipMod.getVirAttrsToRemove(),\n-                        membershipMod.getVirAttrsToUpdate(),\n-                        false).isEmpty()) {\n-\n-                    addOrUpdateMemberships = true;\n-                }\n-            }\n-            tasks.addAll(!propByResVirAttr.isEmpty() || addOrUpdateMemberships || removeMemberships\n-                    ? propagationManager.getUserUpdateTaskIds(updated, false, null)\n-                    : Collections.<PropagationTask>emptyList());\n+                    membershipMod.getRole(),\n+                    null,\n+                    membershipMod.getVirAttrsToRemove(),\n+                    membershipMod.getVirAttrsToUpdate(),\n+                    false));\n+        }\n+        if (updated.getPropByRes() == null) {\n+            updated.setPropByRes(propByResVirAttr);\n+        } else {\n+            updated.getPropByRes().merge(propByResVirAttr);\n         }\n \n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n+\n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n                 getBean(PropagationReporter.class);\n-\n         if (!tasks.isEmpty()) {\n             try {\n                 taskExecutor.execute(tasks, propagationReporter);\n@@ -347,19 +337,22 @@ protected WorkflowResult<Long> setStatusOnWfAdapter(final SyncopeUser user, fina\n     public UserTO status(final StatusMod statusMod) {\n         SyncopeUser user = binder.getUserFromId(statusMod.getId());\n \n-        WorkflowResult<Long> updated;\n         if (statusMod.isOnSyncope()) {\n-            updated = setStatusOnWfAdapter(user, statusMod);\n-        } else {\n-            updated = new WorkflowResult<Long>(user.getId(), null, statusMod.getType().name().toLowerCase());\n+            setStatusOnWfAdapter(user, statusMod);\n         }\n \n-        // Resources to exclude from propagation\n-        Set<String> resourcesToBeExcluded = new HashSet<String>(user.getResourceNames());\n-        resourcesToBeExcluded.removeAll(statusMod.getResourceNames());\n-\n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                user, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.UPDATE, statusMod.getResourceNames());\n+        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n+                user, // SyncopeUser to be updated on external resources\n+                null, // no password\n+                false,\n+                statusMod.getType() != StatusMod.ModType.SUSPEND, // status to be propagated\n+                Collections.<String>emptySet(), // no virtual attributes to be managed\n+                Collections.<AttributeMod>emptySet(), // no virtual attributes to be managed\n+                propByRes,\n+                null,\n+                Collections.<MembershipMod>emptySet());\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n@@ -369,7 +362,7 @@ public UserTO status(final StatusMod statusMod) {\n             propReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        final UserTO savedTO = binder.getUserTO(updated.getResult());\n+        final UserTO savedTO = binder.getUserTO(user.getId());\n         savedTO.getPropagationStatusTOs().addAll(propReporter.getStatuses());\n         return savedTO;\n     }\n@@ -403,16 +396,10 @@ public void confirmPasswordReset(final String token, final String password) {\n             throw new NotFoundException(\"User with token \" + token);\n         }\n \n-        uwfAdapter.confirmPasswordReset(user.getId(), token, password);\n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated =\n+                uwfAdapter.confirmPasswordReset(user.getId(), token, password);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setId(user.getId());\n-        userMod.setPassword(password);\n-\n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                        new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, null), null, \"confirmPasswordReset\"),\n-                true, null);\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {"},{"sha":"89752aaeae68fb82a18cffb8aecca630f1cd7108","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -272,16 +272,21 @@ public PropagationByResource update(final SyncopeUser toBeUpdated, final UserMod\n \n         // password\n         if (StringUtils.isNotBlank(userMod.getPassword())) {\n-            setPassword(user, userMod.getPassword(), scce);\n-            user.setChangePwdDate(new Date());\n-            propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n+            if (userMod.getPwdPropRequest() == null || userMod.getPwdPropRequest().isOnSyncope()) {\n+                setPassword(user, userMod.getPassword(), scce);\n+                user.setChangePwdDate(new Date());\n+            }\n+            if (userMod.getPwdPropRequest() == null) {\n+                propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n+            } else {\n+                propByRes.addAll(ResourceOperation.UPDATE, userMod.getPwdPropRequest().getResourceNames());\n+            }\n         }\n \n         // username\n         if (userMod.getUsername() != null && !userMod.getUsername().equals(user.getUsername())) {\n-            propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n-\n             user.setUsername(userMod.getUsername());\n+            propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n         }\n \n         // security question / answer:"},{"sha":"b3e1b0b25e737b82e79edf4ab12df57810cdb56f","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/AbstractUserWorkflowAdapter.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -126,14 +126,15 @@ public void requestPasswordReset(final Long userId) throws UnauthorizedRoleExcep\n         doRequestPasswordReset(dataBinder.getUserFromId(userId));\n     }\n \n-    protected abstract void doConfirmPasswordReset(SyncopeUser user, String token, String password) \n-            throws WorkflowException;\n+    protected abstract WorkflowResult<Map.Entry<UserMod, Boolean>> doConfirmPasswordReset(\n+            SyncopeUser user, String token, String password) throws WorkflowException;\n \n     @Override\n-    public void confirmPasswordReset(final Long userId, final String token, final String password)\n+    public WorkflowResult<Map.Entry<UserMod, Boolean>> confirmPasswordReset(\n+            final Long userId, final String token, final String password)\n             throws UnauthorizedRoleException, WorkflowException {\n \n-        doConfirmPasswordReset(dataBinder.getUserFromId(userId), token, password);\n+        return doConfirmPasswordReset(dataBinder.getUserFromId(userId), token, password);\n     }\n \n     protected abstract void doDelete(SyncopeUser user) throws WorkflowException;"},{"sha":"83924e4f505a25f6ac6ef71e5225f6c2c80e52b1","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/NoOpUserWorkflowAdapter.java","status":"modified","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -24,7 +24,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.common.mod.StatusMod;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n@@ -115,13 +115,7 @@ protected WorkflowResult<Long> doActivate(final SyncopeUser user, final String t\n     protected WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(final SyncopeUser user, final UserMod userMod)\n             throws WorkflowException {\n \n-        // update password internally only if required\n-        UserMod actualMod = SerializationUtils.clone(userMod);\n-        if (actualMod.getPwdPropRequest() != null && !actualMod.getPwdPropRequest().isOnSyncope()) {\n-            actualMod.setPassword(null);\n-        }\n-        // update SyncopeUser\n-        PropagationByResource propByRes = dataBinder.update(user, actualMod);\n+        PropagationByResource propByRes = dataBinder.update(user, userMod);\n \n         SyncopeUser updated = userDAO.save(user);\n \n@@ -155,16 +149,26 @@ protected void doRequestPasswordReset(final SyncopeUser user) throws WorkflowExc\n     }\n \n     @Override\n-    protected void doConfirmPasswordReset(final SyncopeUser user, final String token, final String password)\n-            throws WorkflowException {\n+    protected WorkflowResult<Map.Entry<UserMod, Boolean>> doConfirmPasswordReset(\n+            final SyncopeUser user, final String token, final String password) throws WorkflowException {\n \n         if (!user.checkToken(token)) {\n             throw new WorkflowException(new IllegalArgumentException(\"Wrong token: \" + token + \" for \" + user));\n         }\n \n         user.removeToken();\n-        user.setPassword(password, user.getCipherAlgorithm());\n-        userDAO.save(user);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(user.getId());\n+        userMod.setPassword(password);\n+        StatusMod pwdPropRequest = new StatusMod();\n+\n+        pwdPropRequest.setId(user.getId());\n+        pwdPropRequest.setOnSyncope(true);\n+        pwdPropRequest.getResourceNames().addAll(user.getResourceNames());\n+        userMod.setPwdPropRequest(pwdPropRequest);\n+\n+        return doUpdate(user, userMod);\n     }\n \n     @Override"},{"sha":"955e8fc12f621bec0f39d2e3103d0a1b332b3573","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/UserWorkflowAdapter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -151,8 +151,9 @@ WorkflowResult<Map.Entry<UserMod, Boolean>> update(UserMod userMod)\n      * @param password new password value\n      * @throws UnauthorizedRoleException authorization exception\n      * @throws WorkflowException workflow exception\n+     * @return user just updated and propagations to be performed\n      */\n-    void confirmPasswordReset(Long userId, String token, String password) \n+    WorkflowResult<Map.Entry<UserMod, Boolean>> confirmPasswordReset(Long userId, String token, String password)\n             throws UnauthorizedRoleException, WorkflowException;\n \n     /**"},{"sha":"08a1d91718cb0607156a8984b410b7436763a8dd","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -401,17 +401,29 @@ protected void doRequestPasswordReset(final SyncopeUser user) throws WorkflowExc\n     }\n \n     @Override\n-    protected void doConfirmPasswordReset(final SyncopeUser user, final String token, final String password)\n-            throws WorkflowException {\n+    protected WorkflowResult<Map.Entry<UserMod, Boolean>> doConfirmPasswordReset(\n+            final SyncopeUser user, final String token, final String password) throws WorkflowException {\n \n         Map<String, Object> variables = new HashMap<String, Object>(4);\n         variables.put(TOKEN, token);\n         variables.put(PASSWORD, password);\n         variables.put(USER_TO, userDataBinder.getUserTO(user, true));\n         variables.put(EVENT, \"confirmPasswordReset\");\n \n-        doExecuteTask(user, \"confirmPasswordReset\", variables);\n+        Set<String> tasks = doExecuteTask(user, \"confirmPasswordReset\", variables);\n+\n         userDAO.save(user);\n+\n+        PropagationByResource propByRes =\n+                runtimeService.getVariable(user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n+        UserMod userMod =\n+                runtimeService.getVariable(user.getWorkflowId(), USER_MOD, UserMod.class);\n+\n+        Boolean propagateEnable = runtimeService.getVariable(user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n+\n+        return new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                new SimpleEntry<UserMod, Boolean>(userMod, propagateEnable), propByRes, tasks);\n+\n     }\n \n     @Override"},{"sha":"0e9e982410cd0437110f8d0a6fce17d6a2e5876b","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/PasswordReset.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FPasswordReset.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -18,14 +18,22 @@\n  */\n package org.apache.syncope.core.workflow.user.activiti.task;\n \n+import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.workflow.WorkflowException;\n import org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class PasswordReset extends AbstractActivitiServiceTask {\n \n+    @Autowired\n+    private UserDataBinder dataBinder;\n+\n     @Override\n     protected void doExecute(final String executionId) {\n         SyncopeUser user =\n@@ -38,8 +46,23 @@ protected void doExecute(final String executionId) {\n         }\n \n         user.removeToken();\n-        user.setPassword(password, user.getCipherAlgorithm());\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(user.getId());\n+        userMod.setPassword(password);\n+\n+        StatusMod pwdPropRequest = new StatusMod();\n+        pwdPropRequest.setId(user.getId());\n+        pwdPropRequest.setOnSyncope(true);\n+        pwdPropRequest.getResourceNames().addAll(user.getResourceNames());\n+        userMod.setPwdPropRequest(pwdPropRequest);\n+\n+        PropagationByResource propByRes = dataBinder.update(user, userMod);\n+\n+        // report updated user and propagation by resource as result\n         runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, userMod);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n     }\n \n }"},{"sha":"f36611936ab36c1ae83563fe0d7021a5401d001b","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/Update.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FUpdate.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.workflow.user.activiti.task;\n \n-import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.propagation.PropagationByResource;\n@@ -40,19 +39,11 @@ protected void doExecute(final String executionId) {\n         UserMod userMod =\n                 runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, UserMod.class);\n \n-        // update password internally only if required\n-        UserMod updatedMod = SerializationUtils.clone(userMod);\n-        String updatedPwd = updatedMod.getPassword();\n-        if (updatedMod.getPwdPropRequest() != null && !updatedMod.getPwdPropRequest().isOnSyncope()) {\n-            updatedMod.setPassword(null);\n-        }\n-        // update SyncopeUser\n-        PropagationByResource propByRes = dataBinder.update(user, updatedMod);\n-        updatedMod.setPassword(updatedPwd);\n+        PropagationByResource propByRes = dataBinder.update(user, userMod);\n \n         // report updated user and propagation by resource as result\n         runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n-        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, updatedMod);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, userMod);\n         runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n     }\n }"},{"sha":"3c9b0f22be9591fed799c80d3c2170eec673c0de","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -2584,4 +2584,44 @@ public void issueSYNCOPE686() {\n             configurationService.set(pwdCipherAlgo.getSchema(), pwdCipherAlgo);\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE710() {\n+        // 1. create roles for indirect resource assignment\n+        RoleTO ldapRole = RoleTestITCase.buildBasicRoleTO(\"syncope710.ldap\");\n+        ldapRole.getResources().add(RESOURCE_NAME_LDAP);\n+        ldapRole = createRole(ldapRole);\n+\n+        RoleTO dbRole = RoleTestITCase.buildBasicRoleTO(\"syncope710.db\");\n+        dbRole.getResources().add(RESOURCE_NAME_TESTDB);\n+        dbRole = createRole(dbRole);\n+\n+        // 2. create user with memberships for the roles created above\n+        UserTO userTO = getUniqueSampleTO(\"syncope710@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        MembershipTO memb = new MembershipTO();\n+        memb.setRoleId(ldapRole.getId());\n+        userTO.getMemberships().add(memb);\n+        memb = new MembershipTO();\n+        memb.setRoleId(dbRole.getId());\n+        userTO.getMemberships().add(memb);\n+\n+        userTO = createUser(userTO);\n+        assertEquals(2, userTO.getPropagationStatusTOs().size());\n+\n+        // 3. request to propagate passwod only to db\n+        StatusMod pwdPropRequest = new StatusMod();\n+        pwdPropRequest.setOnSyncope(false);\n+        pwdPropRequest.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.setPassword(\"newpassword123\");\n+        userMod.setPwdPropRequest(pwdPropRequest);\n+\n+        userTO = updateUser(userMod);\n+        assertEquals(1, userTO.getPropagationStatusTOs().size());\n+        assertEquals(RESOURCE_NAME_TESTDB, userTO.getPropagationStatusTOs().get(0).getResource());\n+    }\n }"},{"sha":"e7cae5b818c2e588222c2c8195d382dbaa2bedaf","filename":"core/src/test/java/org/apache/syncope/core/rest/VirAttrTestITCase.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2524280ebeaff46bc351f4692fb4f966148bc87e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java?ref=2524280ebeaff46bc351f4692fb4f966148bc87e","patch":"@@ -297,7 +297,7 @@ public void issueSYNCOPE397() {\n             assertTrue(found);\n \n             // create a new user\n-            UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope397@syncope.apache.org\");\n+            UserTO userTO = UserTestITCase.getUniqueSampleTO(\"397@syncope.apache.org\");\n             userTO.getResources().clear();\n             userTO.getMemberships().clear();\n             userTO.getDerAttrs().clear();\n@@ -332,7 +332,7 @@ public void issueSYNCOPE397() {\n \n             toBeUpdated = updateUser(userMod);\n             assertNotNull(toBeUpdated);\n-            assertEquals(\"test@testoneone.com\", toBeUpdated.getVirAttrs().get(0).getValues().get(0));\n+            assertTrue(toBeUpdated.getVirAttrs().get(0).getValues().contains(\"test@testoneone.com\"));\n             // check if propagates correctly with assertEquals on size of tasks list\n             assertEquals(2, toBeUpdated.getPropagationStatusTOs().size());\n         } finally {\n@@ -640,8 +640,9 @@ public void issueSYNCOPE458() {\n         assertNotNull(userTO);\n         // 3. check again after update if membership has virtual attribute populated with new value\n         assertNotNull(userTO.getMemberships().get(0).getVirAttrMap().get(\"mvirtualdata\"));\n-        assertEquals(\"syncope458_NEW@syncope.apache.org\", userTO.getMemberships().get(0).getVirAttrMap().get(\n-                \"mvirtualdata\").getValues().get(0));\n+        assertEquals(\n+                \"syncope458_NEW@syncope.apache.org\",\n+                userTO.getMemberships().get(0).getVirAttrMap().get(\"mvirtualdata\").getValues().get(0));\n \n         // ----------------------------------------\n         // force cache expiring without any modification"}]}