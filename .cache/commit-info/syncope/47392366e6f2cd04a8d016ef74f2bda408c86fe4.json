{"sha":"47392366e6f2cd04a8d016ef74f2bda408c86fe4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ3MzkyMzY2ZTZmMmNkMDRhOGQwMTZlZjc0ZjJiZGE0MDhjODZmZTQ=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-20T12:53:16Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-20T12:53:16Z"},"message":"introduced table view to print results (logger stack), SYNCOPE-158","tree":{"sha":"913a57b5e2dbc9521d714d990085d31e047c2ae0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/913a57b5e2dbc9521d714d990085d31e047c2ae0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/47392366e6f2cd04a8d016ef74f2bda408c86fe4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/47392366e6f2cd04a8d016ef74f2bda408c86fe4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/47392366e6f2cd04a8d016ef74f2bda408c86fe4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/47392366e6f2cd04a8d016ef74f2bda408c86fe4/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"2a99db9ce64bd9461fad9e1ac89bed7830b957dc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a99db9ce64bd9461fad9e1ac89bed7830b957dc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a99db9ce64bd9461fad9e1ac89bed7830b957dc"}],"stats":{"total":1550,"additions":1172,"deletions":378},"files":[{"sha":"c53eefdbb927020c612d8d4961618040b97f438f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/Input.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -72,6 +72,10 @@ public String lastParameter() {\n         return parameters[parameters.length - 1];\n     }\n \n+    public int parameterNumber() {\n+        return parameters.length;\n+    }\n+\n     public PairParameter toPairParameter(final String parameter) throws IllegalArgumentException {\n         if (!parameter.contains(\"=\")) {\n             throw new IllegalArgumentException(\"Parameter syntax error!\");"},{"sha":"e62e8189d93a3b501643ac2f6eddf4c4779007c3","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeAdm.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -35,6 +35,14 @@ public static void main(final String[] args) {\n             ArgsManager.validator(args);\n             final Input input = new Input(args);\n             final AbstractCommand command = input.getCommand();\n+\n+            LOG.debug(\"Command: {}\", command.getClass().getAnnotation(Command.class).name());\n+            LOG.debug(\"Option: {}\", input.getOption());\n+            LOG.debug(\"Parameters:\");\n+            for (final String parameter : input.getParameters()) {\n+                LOG.debug(\"   > \" + parameter);\n+            }\n+\n             command.execute(input);\n         } catch (final IllegalAccessException | InstantiationException e) {\n             System.out.println(helpMessage());"},{"sha":"6a03556d6642170ee6172a49ebd2569bf26b02d8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/AbstractCommand.java","status":"modified","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -18,30 +18,11 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import java.util.List;\n import org.apache.syncope.client.cli.Input;\n \n public abstract class AbstractCommand {\n \n     public abstract void execute(final Input input);\n \n-    protected String helpMessage(final String command, final List<String> options) {\n-        final StringBuilder helpMessageBuilder = new StringBuilder(String.format(\"Usage: %s [options]\\n\", command));\n-        helpMessageBuilder.append(\"  Options:\\n\");\n-        for (final String option : options) {\n-            helpMessageBuilder.append(\"    \").append(option).append(\"\\n\");\n-        }\n-        return helpMessageBuilder.toString();\n-    }\n-\n     public abstract String getHelpMessage();\n-\n-    protected static String[] fromEnumToArray(final Class<? extends Enum<?>> enumClass) {\n-        final String[] types = new String[enumClass.getFields().length];\n-        for (int i = 0; i < enumClass.getFields().length; i++) {\n-            types[i] = enumClass.getFields()[i].getName();\n-\n-        }\n-        return types;\n-    }\n }"},{"sha":"01f6d239aa579cbfc860772469ced4f77c385c67","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ConfigurationCommand.java","status":"modified","additions":51,"deletions":73,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -22,7 +22,11 @@\n import java.io.IOException;\n import java.io.SequenceInputStream;\n import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n import javax.xml.parsers.ParserConfigurationException;\n import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerException;\n@@ -32,6 +36,7 @@\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.messages.TwoColumnTable;\n import org.apache.syncope.client.cli.util.XMLUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -51,13 +56,11 @@ public class ConfigurationCommand extends AbstractCommand {\n     private static final String HELP_MESSAGE = \"Usage: configuration [options]\\n\"\n             + \"  Options:\\n\"\n             + \"    --help \\n\"\n-            + \"    --list \\n\"\n+            + \"    --get \\n\"\n             + \"    --read \\n\"\n             + \"       Syntax: --read {CONF-NAME} {CONF-NAME} [...] \\n\"\n             + \"    --update \\n\"\n             + \"       Syntax: --update {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\\n\"\n-            + \"    --create \\n\"\n-            + \"       Syntax: --create {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\\n\"\n             + \"    --delete \\n\"\n             + \"       Syntax: --delete {CONF-NAME} {CONF-NAME} [...]\\n\"\n             + \"    --export \\n\"\n@@ -80,32 +83,10 @@ public void execute(final Input input) {\n \n         final ConfigurationService configurationService = SyncopeServices.get(ConfigurationService.class);\n         switch (Options.fromName(input.getOption())) {\n-            case LIST:\n+            case GET:\n                 try {\n                     final ConfTO confTO = configurationService.list();\n-                    System.out.println(\"\\n - Configuration key: \" + confTO.getKey());\n-                    System.out.println(\"\");\n-                    System.out.println(\"Plain attributes\");\n-                    for (final AttrTO attrTO : confTO.getPlainAttrMap().values()) {\n-                        System.out.println(\" - Conf key: \" + attrTO.getSchema());\n-                        System.out.println(\"    - value(s): \" + attrTO.getValues());\n-                        System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n-                    }\n-                    System.out.println(\"\");\n-                    System.out.println(\"Derived attributes\");\n-                    for (final AttrTO attrTO : confTO.getDerAttrMap().values()) {\n-                        System.out.println(\" - Conf key: \" + attrTO.getSchema());\n-                        System.out.println(\"    - value(s): \" + attrTO.getValues());\n-                        System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n-                    }\n-                    System.out.println(\"\");\n-                    System.out.println(\"Virtual attributes\");\n-                    for (final AttrTO attrTO : confTO.getVirAttrMap().values()) {\n-                        System.out.println(\" - Conf key: \" + attrTO.getSchema());\n-                        System.out.println(\"    - value(s): \" + attrTO.getValues());\n-                        System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n-                    }\n-                    System.out.println(\"\");\n+                    toTable(\"Syncope configuration\", \"attribute\", \"value\", confTO.getPlainAttrs());\n                 } catch (final Exception ex) {\n                     Messages.printMessage(ex.getMessage());\n                     break;\n@@ -114,23 +95,24 @@ public void execute(final Input input) {\n             case READ:\n                 final String readErrorMessage = \"configuration --read {CONF-NAME} {CONF-NAME} [...]\";\n                 if (parameters.length >= 1) {\n-                    AttrTO attrTO;\n+                    final Set<AttrTO> attrList = new HashSet<>();\n+                    boolean failed = false;\n                     for (final String parameter : parameters) {\n                         try {\n-                            attrTO = configurationService.get(parameter);\n-                            System.out.println(\"\\n - Conf key: \" + attrTO.getSchema());\n-                            System.out.println(\"    - value(s): \" + attrTO.getValues());\n-                            System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n-                            System.out.println(\"\");\n+                            attrList.add(configurationService.get(parameter));\n                         } catch (final SyncopeClientException | WebServiceException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n                                 Messages.printNofFoundMessage(\"Logger\", parameter);\n                             } else {\n                                 Messages.printMessage(ex.getMessage());\n                             }\n+                            failed = true;\n                             break;\n                         }\n                     }\n+                    if (!failed) {\n+                        toTable(\"Read result\", \"attribute\", \"value\", attrList);\n+                    }\n                 } else {\n                     Messages.printCommandOptionMessage(readErrorMessage);\n                 }\n@@ -141,19 +123,19 @@ public void execute(final Input input) {\n                 if (parameters.length >= 1) {\n                     Input.PairParameter pairParameter = null;\n                     AttrTO attrTO;\n+                    final Set<AttrTO> attrList = new HashSet<>();\n+                    boolean failed = false;\n                     for (final String parameter : parameters) {\n                         try {\n                             pairParameter = input.toPairParameter(parameter);\n                             attrTO = configurationService.get(pairParameter.getKey());\n                             attrTO.getValues().clear();\n                             attrTO.getValues().add(pairParameter.getValue());\n                             configurationService.set(attrTO);\n-                            System.out.println(\"\\n - Conf key \" + attrTO.getSchema() + \" updated. New value is:\");\n-                            System.out.println(\"    - value(s): \" + attrTO.getValues());\n-                            System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n-                            System.out.println(\"\");\n+                            attrList.add(attrTO);\n                         } catch (final IllegalArgumentException ex) {\n                             Messages.printMessage(ex.getMessage(), updateErrorMessage);\n+                            failed = true;\n                             break;\n                         } catch (final SyncopeClientException | WebServiceException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n@@ -165,45 +147,15 @@ public void execute(final Input input) {\n                             } else {\n                                 Messages.printMessage(ex.getMessage());\n                             }\n+                            failed = true;\n                             break;\n                         }\n                     }\n-                } else {\n-                    Messages.printCommandOptionMessage(updateErrorMessage);\n-                }\n-                break;\n-            case CREATE:\n-                final String createErrorMessage\n-                        = \"configuration --create {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\";\n-                if (parameters.length >= 1) {\n-                    Input.PairParameter pairParameter = null;\n-                    AttrTO attrTO;\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            pairParameter = input.toPairParameter(parameter);\n-                            attrTO = new AttrTO();\n-                            attrTO.setSchema(pairParameter.getKey());\n-                            attrTO.getValues().add(pairParameter.getValue());\n-                            configurationService.set(attrTO);\n-                            System.out.println(\"\\n - Conf key \" + attrTO.getSchema() + \" created. Value is:\");\n-                            System.out.println(\"    - value(s): \" + attrTO.getValues());\n-                            System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n-                            System.out.println(\"\");\n-                        } catch (final IllegalArgumentException ex) {\n-                            Messages.printMessage(ex.getMessage(), createErrorMessage);\n-                            break;\n-                        } catch (final SyncopeClientException | WebServiceException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Configuration\", pairParameter.getKey());\n-                                System.out.println(\"Create it before.\");\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                            break;\n-                        }\n+                    if (!failed) {\n+                        toTable(\"updated attribute\", \"attribute\", \"new value\", attrList);\n                     }\n                 } else {\n-                    Messages.printCommandOptionMessage(createErrorMessage);\n+                    Messages.printCommandOptionMessage(updateErrorMessage);\n                 }\n                 break;\n             case DELETE:\n@@ -269,6 +221,33 @@ public void execute(final Input input) {\n         }\n     }\n \n+    private void toTable(final String tableTitle,\n+            final String firstHeader,\n+            final String seconHeader,\n+            final Set<AttrTO> attrList) {\n+        int maxFirstColumnLenght = 0;\n+        int maxSecondColumnLenght = 0;\n+        final Map<String, String> attributes = new HashMap<>();\n+        for (final AttrTO attrTO : attrList) {\n+            String value = attrTO.getValues().toString();\n+            value = value.substring(0, value.length() - 1);\n+            value = value.substring(1, value.length());\n+            attributes.put(attrTO.getSchema(), value);\n+            if (attrTO.getSchema().length() > maxFirstColumnLenght) {\n+                maxFirstColumnLenght = attrTO.getSchema().length();\n+            }\n+\n+            if (value.length() > maxSecondColumnLenght) {\n+                maxSecondColumnLenght = attrTO.getSchema().length();\n+            }\n+        }\n+        final TwoColumnTable loggerTableResult = new TwoColumnTable(\n+                tableTitle,\n+                firstHeader, maxFirstColumnLenght,\n+                seconHeader, maxSecondColumnLenght);\n+        loggerTableResult.printTable(attributes);\n+    }\n+\n     @Override\n     public String getHelpMessage() {\n         return HELP_MESSAGE;\n@@ -277,10 +256,9 @@ public String getHelpMessage() {\n     private enum Options {\n \n         HELP(\"--help\"),\n-        LIST(\"--list\"),\n+        GET(\"--get\"),\n         READ(\"--read\"),\n         UPDATE(\"--update\"),\n-        CREATE(\"--create\"),\n         DELETE(\"--delete\"),\n         EXPORT(\"--export\");\n "},{"sha":"e22359db3062819a5382cd5a7922a0cc240fd294","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/DomainCommand.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FDomainCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FDomainCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FDomainCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n+import org.apache.syncope.client.cli.commands.logger.LoggerCommand;\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;"},{"sha":"e415e1444b1b32006e611fe661abc617f1109023","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/HelpCommand.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FHelpCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FHelpCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FHelpCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -63,14 +63,14 @@ public void execute(final Input input) {\n                 }\n                 break;\n             default:\n-                Messages.printDefaultMessage(input.getOption(), helpMessage(\"info\", Options.toList()));\n+                Messages.printDefaultMessage(input.getOption(), CommandUtils.helpMessage(\"info\", Options.toList()));\n                 break;\n         }\n     }\n \n     @Override\n     public String getHelpMessage() {\n-        return helpMessage(\"help\", Options.toList());\n+        return CommandUtils.helpMessage(\"help\", Options.toList());\n     }\n \n     private enum Options {"},{"sha":"1636c3d5d2a818edbfc99fb23b93f3faa59d5fc1","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/InfoCommand.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.to.SyncopeTO;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.slf4j.Logger;\n@@ -264,17 +265,17 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case HELP:\n-                System.out.println(helpMessage(\"info\", Options.toList()));\n+                System.out.println(CommandUtils.helpMessage(\"info\", Options.toList()));\n                 break;\n             default:\n-                Messages.printDefaultMessage(input.getOption(), helpMessage(\"info\", Options.toList()));\n+                Messages.printDefaultMessage(input.getOption(), CommandUtils.helpMessage(\"info\", Options.toList()));\n                 break;\n         }\n     }\n \n     @Override\n     public String getHelpMessage() {\n-        return helpMessage(\"info\", Options.toList());\n+        return CommandUtils.helpMessage(\"info\", Options.toList());\n     }\n \n     private enum Options {"},{"sha":"6c11c6ff8d9017a1fb6a4c0c3e528b00102944b0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/LoggerCommand.java","status":"removed","additions":0,"deletions":267,"changes":267,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -1,267 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.ws.WebServiceException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.Command;\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.Messages;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-@Command(name = \"logger\")\n-public class LoggerCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(LoggerCommand.class);\n-\n-    private static final String HELP_MESSAGE = \"Usage: logger [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    --help \\n\"\n-            + \"    --list \\n\"\n-            + \"    --read \\n\"\n-            + \"       Syntax: --read {LOG-NAME} {LOG-NAME} [...]\\n\"\n-            + \"    --update \\n\"\n-            + \"       Syntax: --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n\"\n-            + \"    --update-all \\n\"\n-            + \"       Syntax: --update-all {LOG-LEVEL} \\n\"\n-            + \"    --create \\n\"\n-            + \"       Syntax: --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n\"\n-            + \"    --delete \\n\"\n-            + \"       Syntax: --delete {LOG-NAME} {LOG-NAME} [...]\";\n-\n-    @Override\n-    public void execute(final Input input) {\n-        LOG.debug(\"Option: {}\", input.getOption());\n-        LOG.debug(\"Parameters:\");\n-        for (final String parameter : input.getParameters()) {\n-            LOG.debug(\"   > \" + parameter);\n-        }\n-\n-        final String[] parameters = input.getParameters();\n-\n-        if (StringUtils.isBlank(input.getOption())) {\n-            input.setOption(Options.HELP.getOptionName());\n-        }\n-\n-        final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n-        switch (Options.fromName(input.getOption())) {\n-            case LIST:\n-                try {\n-                    for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                        System.out.println(\" - \" + loggerTO.getKey() + \" -> \" + loggerTO.getLevel());\n-                        System.out.println(\"\");\n-                    }\n-                } catch (final SyncopeClientException ex) {\n-                    Messages.printMessage(\"Error: \" + ex.getMessage());\n-                }\n-                break;\n-            case READ:\n-                final String readErrorMessage = \"logger --read {LOG-NAME} {LOG-NAME} [...]\";\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, parameter);\n-                            System.out.println(\"\\n - Logger\");\n-                            System.out.println(\"   - key: \" + loggerTO.getKey());\n-                            System.out.println(\"   - level: \" + loggerTO.getLevel());\n-                            System.out.println(\"\");\n-                        } catch (final SyncopeClientException | WebServiceException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Logger\", parameter);\n-                            } else {\n-                                Messages.printMessage(\"Error: \" + ex.getMessage());\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(readErrorMessage);\n-                }\n-                break;\n-            case UPDATE:\n-                final String updateErrorMessage = \"logger --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    Input.PairParameter pairParameter;\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            pairParameter = input.toPairParameter(parameter);\n-                            final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, pairParameter.getKey());\n-                            loggerTO.setLevel(LoggerLevel.valueOf(pairParameter.getValue()));\n-                            loggerService.update(LoggerType.LOG, loggerTO);\n-                            System.out.\n-                                    println(\"\\n - Logger \" + loggerTO.getKey() + \" updated\");\n-                            System.out.println(\"   - new level: \" + loggerTO.getLevel());\n-                            System.out.println(\"\");\n-                        } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n-                            if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                Messages.printTypeNotValidMessage(\n-                                        \"logger level\", input.firstParameter(), fromEnumToArray(LoggerLevel.class));\n-                            } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n-                                Messages.printMessage(ex.getMessage(), updateErrorMessage);\n-                            } else if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Logger\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage(), updateErrorMessage);\n-                            }\n-                            break;\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(updateErrorMessage);\n-                }\n-                break;\n-            case UPDATE_ALL:\n-                final String updateAllErrorMessage = \"logger --update-all {LOG-LEVEL}\";\n-\n-                if (parameters.length == 1) {\n-                    for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                        try {\n-                            loggerTO.setLevel(LoggerLevel.valueOf(parameters[0]));\n-                            loggerService.update(LoggerType.LOG, loggerTO);\n-                            System.out.\n-                                    println(\"\\n - Logger \" + loggerTO.getKey() + \" updated\");\n-                            System.out.println(\"   - new level: \" + loggerTO.getLevel());\n-                            System.out.println(\"\");\n-                        } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n-                            if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                Messages.printTypeNotValidMessage(\n-                                        \"logger level\", input.firstParameter(), fromEnumToArray(LoggerLevel.class));\n-                            } else {\n-                                Messages.printMessage(ex.getMessage(), updateAllErrorMessage);\n-                            }\n-                            break;\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(updateAllErrorMessage);\n-                }\n-                break;\n-            case CREATE:\n-                final String createErrorMessage = \"logger --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    Input.PairParameter pairParameter;\n-                    LoggerTO loggerTO;\n-                    for (final String parameter : parameters) {\n-                        loggerTO = new LoggerTO();\n-                        try {\n-                            pairParameter = input.toPairParameter(parameter);\n-                            loggerTO.setKey(pairParameter.getKey());\n-                            loggerTO.setLevel(LoggerLevel.valueOf(pairParameter.getValue()));\n-                            loggerService.update(LoggerType.LOG, loggerTO);\n-                            System.out.\n-                                    println(\"\\n - Logger \" + loggerTO.getKey() + \" updated\");\n-                            System.out.println(\"   - level: \" + loggerTO.getLevel());\n-                            System.out.println(\"\");\n-                        } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n-                            Messages.printTypeNotValidMessage(\n-                                    \"logger level\", input.firstParameter(), fromEnumToArray(LoggerLevel.class));\n-                            break;\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(createErrorMessage);\n-                }\n-                break;\n-            case DELETE:\n-                final String deleteErrorMessage = \"logger --delete {LOG-NAME} {LOG-NAME} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            loggerService.delete(LoggerType.LOG, parameter);\n-                            Messages.printDeletedMessage(\"Logger\", parameter);\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Logger\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(deleteErrorMessage);\n-                }\n-                break;\n-            case HELP:\n-                System.out.println(HELP_MESSAGE);\n-                break;\n-            default:\n-                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n-        }\n-    }\n-\n-    @Override\n-    public String getHelpMessage() {\n-        return HELP_MESSAGE;\n-    }\n-\n-    private enum Options {\n-\n-        HELP(\"--help\"),\n-        LIST(\"--list\"),\n-        READ(\"--read\"),\n-        UPDATE(\"--update\"),\n-        UPDATE_ALL(\"--update-all\"),\n-        CREATE(\"--create\"),\n-        DELETE(\"--delete\");\n-\n-        private final String optionName;\n-\n-        private Options(final String optionName) {\n-            this.optionName = optionName;\n-        }\n-\n-        public String getOptionName() {\n-            return optionName;\n-        }\n-\n-        public boolean equalsOptionName(final String otherName) {\n-            return (otherName == null) ? false : optionName.equals(otherName);\n-        }\n-\n-        public static Options fromName(final String name) {\n-            Options optionToReturn = HELP;\n-            for (final Options option : Options.values()) {\n-                if (option.equalsOptionName(name)) {\n-                    optionToReturn = option;\n-                }\n-            }\n-            return optionToReturn;\n-        }\n-\n-        public static List<String> toList() {\n-            final List<String> options = new ArrayList<>();\n-            for (final Options value : values()) {\n-                options.add(value.getOptionName());\n-            }\n-            return options;\n-        }\n-    }\n-\n-}"},{"sha":"28c528e50e2f762c368f9ba81a1bb03732b0ba2b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/PolicyCommand.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -78,7 +79,7 @@ public void execute(final Input input) {\n                         Messages.printMessage(ex.getMessage());\n                     } catch (final IllegalArgumentException ex) {\n                         Messages.printTypeNotValidMessage(\n-                                \"policy\", input.firstParameter(), fromEnumToArray(PolicyType.class));\n+                                \"policy\", input.firstParameter(), CommandUtils.fromEnumToArray(PolicyType.class));\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(listPolicyErrorMessage);"},{"sha":"935e4f1a7f51c2555b1e9d346e31d5239ac526c5","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.client.cli.util.XMLUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n@@ -283,7 +284,7 @@ public void execute(final Input input) {\n                         } catch (final IllegalArgumentException ex) {\n                             Messages.printTypeNotValidMessage(\n                                     \"format\", input.firstParameter(),\n-                                    fromEnumToArray(ReportExecExportFormat.class));\n+                                    CommandUtils.fromEnumToArray(ReportExecExportFormat.class));\n                         }\n                         break;\n                     }"},{"sha":"bd3ffff120ed517bda25d585c80722f910f9a56c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/SchemaCommand.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import static org.apache.syncope.client.cli.commands.AbstractCommand.fromEnumToArray;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n@@ -29,6 +27,7 @@\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n@@ -51,10 +50,13 @@ public class SchemaCommand extends AbstractCommand {\n             + \"    --list-plain\\n\"\n             + \"    --list-derived\\n\"\n             + \"    --list-virtual\\n\"\n-            + \"    --list {SCHEMA-TYPE}\\n\"\n-            + \"       Schema type: PLAIN / DERIVED / VIRTUAL\";\n+            + \"    --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+            + \"        Schema type: PLAIN / DERIVED / VIRTUAL\\n\"\n+            + \"    --delete {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+            + \"        Schema type: PLAIN / DERIVED / VIRTUAL\";\n \n     @Override\n+\n     public void execute(final Input input) {\n         LOG.debug(\"Option: {}\", input.getOption());\n         LOG.debug(\"Parameters:\");\n@@ -101,7 +103,7 @@ public void execute(final Input input) {\n                         Messages.printMessage(ex.getMessage());\n                     } catch (final IllegalArgumentException ex) {\n                         Messages.printTypeNotValidMessage(\n-                                \"schema\", input.firstParameter(), fromEnumToArray(SchemaType.class));\n+                                \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(listErrorMessage);\n@@ -216,7 +218,7 @@ public void execute(final Input input) {\n                         }\n                     } catch (final IllegalArgumentException ex) {\n                         Messages.printTypeNotValidMessage(\n-                                \"schema\", input.firstParameter(), fromEnumToArray(SchemaType.class));\n+                                \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(readErrorMessage);\n@@ -243,7 +245,7 @@ public void execute(final Input input) {\n                         }\n                     } catch (final IllegalArgumentException ex) {\n                         Messages.printTypeNotValidMessage(\n-                                \"schema\", input.firstParameter(), fromEnumToArray(SchemaType.class));\n+                                \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(deleteErrorMessage);"},{"sha":"58288231f4df3f312d3947c9b7f20112e8298c4c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/TaskCommand.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FTaskCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FTaskCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FTaskCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n+import org.apache.syncope.client.cli.commands.logger.LoggerCommand;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -27,6 +28,7 @@\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -230,7 +232,8 @@ public void execute(final Input input) {\n                     } catch (final SyncopeClientException ex) {\n                         Messages.printMessage(ex.getMessage());\n                     } catch (final IllegalArgumentException ex) {\n-                        Messages.printTypeNotValidMessage(\"task\", parameters[0], fromEnumToArray(TaskType.class));\n+                        Messages.printTypeNotValidMessage(\n+                                \"task\", parameters[0], CommandUtils.fromEnumToArray(TaskType.class));\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(listTaskErrorMessage);\n@@ -493,7 +496,6 @@ public void execute(final Input input) {\n                         final TaskExecTO taskExecTO = taskService.execute(taskIdToExecute, dryRun);\n                         printTaskExecTO(taskExecTO);\n                     } catch (final WebServiceException | SyncopeClientException ex) {\n-                        System.out.println(\"Error:\");\n                         if (ex.getMessage().startsWith(\"NotFound\")) {\n                             Messages.printNofFoundMessage(\"Task\", parameters[0]);\n                         } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {"},{"sha":"0092210996dba023af59ac48d9d049e60194ad7e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallCommand.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.commands.AbstractCommand;\n-import org.apache.syncope.client.cli.commands.LoggerCommand;\n+import org.apache.syncope.client.cli.commands.logger.LoggerCommand;\n import org.apache.syncope.client.cli.util.FileSystemUtils;\n import org.apache.syncope.client.cli.util.JasyptUtils;\n import org.apache.syncope.common.rest.api.service.SyncopeService;"},{"sha":"4654cb6c4683da54b66fc982e05689e55fe76f5e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/AbstractLoggerCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.LoggerService;\n+\n+public class AbstractLoggerCommand {\n+\n+    protected final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n+    \n+    protected final ResultManager resultManager = new ResultManager();\n+\n+}"},{"sha":"11992187ae230d0834c8454d1813d44de8ada152","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerCommand.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.messages.Messages;\n+\n+@Command(name = \"logger\")\n+public class LoggerCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: logger [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {LOG-NAME} {LOG-NAME} [...]\\n\"\n+            + \"    --update \\n\"\n+            + \"       Syntax: --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n\"\n+            + \"    --update-all \\n\"\n+            + \"       Syntax: --update-all {LOG-LEVEL} \\n\"\n+            + \"    --create \\n\"\n+            + \"       Syntax: --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {LOG-NAME} {LOG-NAME} [...]\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(LoggerOptions.HELP.getOptionName());\n+        }\n+\n+        switch (LoggerOptions.fromName(input.getOption())) {\n+            case LIST:\n+                new LoggerList().list();\n+                break;\n+            case READ:\n+                new LoggerRead(input).read();\n+                break;\n+            case UPDATE:\n+                new LoggerUpdate(input).update();\n+                break;\n+            case UPDATE_ALL:\n+                new LoggerUpdateAll(input).updateAll();\n+                break;\n+            case CREATE:\n+                new LoggerCreate(input).create();\n+                break;\n+            case DELETE:\n+                new LoggerDelete(input).delete();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum LoggerOptions {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        READ(\"--read\"),\n+        UPDATE(\"--update\"),\n+        UPDATE_ALL(\"--update-all\"),\n+        CREATE(\"--create\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        private LoggerOptions(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static LoggerOptions fromName(final String name) {\n+            LoggerOptions optionToReturn = HELP;\n+            for (final LoggerOptions option : LoggerOptions.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final LoggerOptions value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+\n+}"},{"sha":"14449382a4d8b701c7b066907708e925e9a36681","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerCreate.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerCreate extends AbstractLoggerCommand {\n+\n+    private static final String CREATE_HELP_MESSAGE\n+            = \"logger --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\";\n+\n+    private final Input input;\n+\n+    public LoggerCreate(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void create() {\n+        if (input.parameterNumber() >= 1) {\n+            Input.PairParameter pairParameter;\n+            LoggerTO loggerTO;\n+            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                loggerTO = new LoggerTO();\n+                try {\n+                    pairParameter = input.toPairParameter(parameter);\n+                    loggerTO.setKey(pairParameter.getKey());\n+                    loggerTO.setLevel(LoggerLevel.valueOf(pairParameter.getValue()));\n+                    loggerService.update(LoggerType.LOG, loggerTO);\n+                    loggerTOs.add(loggerTO);\n+                } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n+                    Messages.printTypeNotValidMessage(\n+                            \"logger level\", input.firstParameter(), CommandUtils.fromEnumToArray(LoggerLevel.class));\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                resultManager.fromUpdate(loggerTOs);\n+            }\n+        } else {\n+            Messages.printCommandOptionMessage(CREATE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"49becd59700b061898a0204d56ca0934c45fbbef","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerDelete.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDelete.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerDelete extends AbstractLoggerCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"logger --delete {LOG-NAME} {LOG-NAME} [...]\";\n+\n+    private final Input input;\n+\n+    public LoggerDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 1) {\n+            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    loggerService.delete(LoggerType.LOG, parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        Messages.printNofFoundMessage(\"Logger\", parameter);\n+                    } else {\n+                        Messages.printMessage(ex.getMessage());\n+                    }\n+                    failed = true;\n+                }\n+            }\n+            if (!failed) {\n+                resultManager.fromDelete(loggerTOs);\n+            }\n+        } else {\n+            Messages.printCommandOptionMessage(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"78d2ced237ea5d90e6e2700509b9aa4e6e91193b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerList.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerList extends AbstractLoggerCommand {\n+\n+    public LoggerList() {\n+    }\n+\n+    public void list() {\n+        try {\n+            resultManager.fromList(new LinkedList<>(loggerService.list(LoggerType.LOG)));\n+        } catch (final SyncopeClientException ex) {\n+            Messages.printMessage(\"Error: \" + ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"4d3319139f48fa16c95c88c212ad94ec4f358286","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerRead.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerRead extends AbstractLoggerCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"logger --read {LOG-NAME} {LOG-NAME} [...]\";\n+\n+    private final Input input;\n+\n+    public LoggerRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.getParameters().length >= 1) {\n+            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    loggerTOs.add(loggerService.read(LoggerType.LOG, parameter));\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        Messages.printNofFoundMessage(\"Logger\", parameter);\n+                    } else {\n+                        Messages.printMessage(\"Error: \" + ex.getMessage());\n+                    }\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                resultManager.fromRead(loggerTOs);\n+            }\n+        } else {\n+            Messages.printCommandOptionMessage(READ_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"fccfe729b0bbf338cd1568defdc0848994e09dd1","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerUpdate.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerUpdate extends AbstractLoggerCommand {\n+\n+    private static final String UPDATE_HELP_MESSAGE\n+            = \"logger --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\";\n+\n+    private final Input input;\n+\n+    public LoggerUpdate(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void update() {\n+        if (input.parameterNumber() >= 1) {\n+            Input.PairParameter pairParameter;\n+            LoggerTO loggerTO;\n+            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    pairParameter = input.toPairParameter(parameter);\n+                    loggerTO = loggerService.read(LoggerType.LOG, pairParameter.getKey());\n+                    loggerTO.setLevel(LoggerLevel.valueOf(pairParameter.getValue()));\n+                    loggerService.update(LoggerType.LOG, loggerTO);\n+                    loggerTOs.add(loggerTO);\n+                } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n+                    if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n+                        Messages.printTypeNotValidMessage(\n+                                \"logger level\",\n+                                input.firstParameter(), CommandUtils.fromEnumToArray(LoggerLevel.class));\n+                    } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n+                        Messages.printMessage(ex.getMessage(), UPDATE_HELP_MESSAGE);\n+                    } else if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        Messages.printNofFoundMessage(\"Logger\", parameter);\n+                    } else {\n+                        Messages.printMessage(ex.getMessage(), UPDATE_HELP_MESSAGE);\n+                    }\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                resultManager.fromUpdate(loggerTOs);\n+            }\n+        } else {\n+            Messages.printCommandOptionMessage(UPDATE_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"b0ee25c9e521e2fa740770644d6e81c310ba3060","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerUpdateAll.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerUpdateAll extends AbstractLoggerCommand {\n+\n+    private static final String UPDATE_ALL_HELP_MESSAGE = \"logger --update-all {LOG-LEVEL}\";\n+\n+    private final Input input;\n+\n+    public LoggerUpdateAll(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void updateAll() {\n+        if (input.parameterNumber() == 1) {\n+            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            boolean failed = false;\n+            for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n+                try {\n+                    loggerTO.setLevel(LoggerLevel.valueOf(input.firstParameter()));\n+                    loggerService.update(LoggerType.LOG, loggerTO);\n+                    loggerTOs.add(loggerTO);\n+                } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n+                    if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n+                        Messages.printTypeNotValidMessage(\n+                                \"logger level\",\n+                                input.firstParameter(), CommandUtils.fromEnumToArray(LoggerLevel.class));\n+                    } else {\n+                        Messages.printMessage(ex.getMessage(), UPDATE_ALL_HELP_MESSAGE);\n+                    }\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                resultManager.fromUpdate(loggerTOs);\n+            }\n+        } else {\n+            Messages.printCommandOptionMessage(UPDATE_ALL_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"102ff74938523996a62ffd02faaa52e8feef0ca8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/ResultManager.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FResultManager.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.messages.Table;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+\n+public class ResultManager {\n+\n+    public void fromList(final LinkedList<LoggerTO> loggerTOs) {\n+        fromCommandToView(\"list loggers\", \"level\", loggerTOs);\n+    }\n+\n+    public void fromRead(final LinkedList<LoggerTO> loggerTOs) {\n+        fromCommandToView(\"read loggers\", \"level\", loggerTOs);\n+    }\n+\n+    public void fromCreate(final LinkedList<LoggerTO> loggerTOs) {\n+        fromCommandToView(\"created loggers\", \"level\", loggerTOs);\n+    }\n+\n+    public void fromUpdate(final LinkedList<LoggerTO> loggerTOs) {\n+        fromCommandToView(\"updated loggers\", \"new level\", loggerTOs);\n+    }\n+\n+    public void fromDelete(final LinkedList<LoggerTO> loggerTOs) {\n+        fromCommandToView(\"deleted loggers\", \"new level\", loggerTOs);\n+    }\n+\n+    private void fromCommandToView(final String title,\n+            final String secondHeader,\n+            final LinkedList<LoggerTO> loggerTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(title).header(\"logger\").header(secondHeader);\n+        for (final LoggerTO loggerTO : loggerTOs) {\n+            tableBuilder.rowValues(\n+                    new LinkedList(Arrays.asList(loggerTO.getKey(), loggerTO.getLevel().getLevel().name())));\n+        }\n+        tableBuilder.build().print();\n+    }\n+\n+}"},{"sha":"35550fd9425dc77e7d231cdf8a4ac0cebbb29a91","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/Messages.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -22,6 +22,10 @@ public final class Messages {\n \n     private static final String OPTION_COMMAND_MESSAGE_TEMPLATE = \"\\n - Usage: %s\\n\";\n \n+    private static final String CREATED_MESSAGE_TEMPLATE = \"%s %s successfully created\";\n+\n+    private static final String UPDATED_MESSAGE_TEMPLATE = \"%s %s successfully updated\";\n+\n     private static final String DELETED_MESSAGE_TEMPLATE = \"%s %s successfully deleted\";\n \n     private static final String DOESNT_EXIST_MESSAGE_TEMPLATE = \"%s %s doesn't exist\";\n@@ -52,14 +56,22 @@ public static void printNofFoundMessage(final String what, final String key) {\n         printMessage(String.format(DOESNT_EXIST_MESSAGE_TEMPLATE, what, key));\n     }\n \n+    public static void printCreatedMessage(final String what, final String key) {\n+        printMessage(String.format(CREATED_MESSAGE_TEMPLATE, what, key));\n+    }\n+\n+    public static void printUpdatedMessage(final String what, final String key) {\n+        printMessage(String.format(UPDATED_MESSAGE_TEMPLATE, what, key));\n+    }\n+\n     public static void printDeletedMessage(final String what, final String key) {\n         printMessage(String.format(DELETED_MESSAGE_TEMPLATE, what, key));\n     }\n \n     public static void printIdNotNumberDeletedMessage(final String what, final String key) {\n         printMessage(String.format(ID_NOT_NUMBER_MESSAGE_TEMPLATE, key, what));\n     }\n-    \n+\n     public static void printNotBooleanDeletedMessage(final String what, final String key) {\n         printMessage(String.format(NOT_BOOLEAN_MESSAGE_TEMPLATE, key, what));\n     }"},{"sha":"4f229802051a18de64fcc2206f9958e7c3aef84d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/Table.java","status":"added","additions":190,"deletions":0,"changes":190,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTable.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,190 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.messages;\n+\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public final class Table {\n+\n+    private static final String TABLE_TITLE_FORMAT = \"#  %s  #\\n\";\n+\n+    private final String title;\n+\n+    private final LinkedList<String> headers;\n+\n+    private final Set<LinkedList<String>> values;\n+\n+    private int columnsNumber;\n+\n+    private String[] tmpValuesArray;\n+\n+    private String tableContentFormat;\n+\n+    private int[] columnsSize;\n+\n+    private int tableWidth;\n+\n+    private String border = \"\";\n+\n+    private Table(\n+            final String title,\n+            final LinkedList<String> headers,\n+            final Set<LinkedList<String>> values) {\n+        this.title = title;\n+        this.headers = headers;\n+        this.values = values;\n+    }\n+\n+    public void print() {\n+        columnsNumber = headers.size();\n+        tmpValuesArray = new String[columnsNumber];\n+\n+        buildTableContentFormat();\n+        initializeColumnSize();\n+        countTableWidth();\n+\n+        printBorder();\n+        printTitle();\n+        printBorder();\n+        printHeaders();\n+        printBorder();\n+        printeContent();\n+        printBorder();\n+    }\n+\n+    private void buildTableContentFormat() {\n+        final StringBuilder tableContentFormatBuilder = new StringBuilder(\"#\");\n+        for (int s = 0; s < columnsNumber; s++) {\n+            tableContentFormatBuilder.append(\"  %s  #\");\n+        }\n+        tableContentFormatBuilder.append(\"\\n\");\n+        tableContentFormat = tableContentFormatBuilder.toString();\n+    }\n+\n+    private void initializeColumnSize() {\n+        columnsSize = new int[columnsNumber];\n+        for (int j = 0; j < columnsSize.length; j++) {\n+            columnsSize[j] = 0;\n+        }\n+\n+        for (int i = 0; i < columnsSize.length; i++) {\n+            if (headers.get(i).length() > columnsSize[i]) {\n+                columnsSize[i] = headers.get(i).length();\n+            }\n+        }\n+\n+        for (final LinkedList<String> value : values) {\n+            for (int j = 0; j < columnsSize.length; j++) {\n+                if (value.get(j).length() > columnsSize[j]) {\n+                    columnsSize[j] = value.get(j).length();\n+                }\n+            }\n+        }\n+    }\n+\n+    private void countTableWidth() {\n+        int maxColumnValueSum = 0;\n+        for (int j = 0; j < columnsSize.length; j++) {\n+            maxColumnValueSum = maxColumnValueSum + columnsSize[j];\n+        }\n+\n+        tableWidth = maxColumnValueSum + (columnsNumber * (2 + 2)) + columnsNumber + 1;\n+    }\n+\n+    private void printBorder() {\n+        if (border.isEmpty()) {\n+            final StringBuilder borderBuilder = new StringBuilder();\n+            for (int j = 0; j < tableWidth; j++) {\n+                borderBuilder.append(\"#\");\n+            }\n+            border = borderBuilder.toString();\n+        }\n+\n+        System.out.println(border);\n+    }\n+\n+    private void printTitle() {\n+        System.out.format(TABLE_TITLE_FORMAT, StringUtils.center(\" \", tableWidth - 6));\n+        System.out.format(TABLE_TITLE_FORMAT, StringUtils.center(title.toUpperCase(), tableWidth - 6));\n+        System.out.format(TABLE_TITLE_FORMAT, StringUtils.center(\" \", tableWidth - 6));\n+    }\n+\n+    public void printHeaders() {\n+        printColumnSpace();\n+\n+        for (int h = 0; h < columnsNumber; h++) {\n+            tmpValuesArray[h] = StringUtils.center(headers.get(h).toUpperCase(), columnsSize[h]);\n+        }\n+\n+        System.out.format(tableContentFormat, tmpValuesArray);\n+\n+        printColumnSpace();\n+    }\n+\n+    private void printeContent() {\n+        printColumnSpace();\n+\n+        for (LinkedList<String> value : values) {\n+            for (int j = 0; j < columnsNumber; j++) {\n+                tmpValuesArray[j] = StringUtils.center(value.get(j), columnsSize[j]);\n+            }\n+            System.out.format(tableContentFormat, tmpValuesArray);\n+        }\n+\n+        printColumnSpace();\n+    }\n+\n+    private void printColumnSpace() {\n+        for (int h = 0; h < columnsNumber; h++) {\n+            tmpValuesArray[h] = StringUtils.center(\" \", columnsSize[h]);\n+        }\n+\n+        System.out.format(tableContentFormat, tmpValuesArray);\n+    }\n+    \n+    public static class TableBuilder {\n+\n+        private final LinkedList<String> headers = new LinkedList<>();\n+\n+        private final Set<LinkedList<String>> values = new LinkedHashSet<>();\n+\n+        private final String title;\n+\n+        public TableBuilder(final String title) {\n+            this.title = title;\n+        }\n+\n+        public TableBuilder header(final String header) {\n+            headers.add(header);\n+            return this;\n+        }\n+\n+        public TableBuilder rowValues(final LinkedList<String> row) {\n+            values.add(row);\n+            return this;\n+        }\n+\n+        public Table build() {\n+            return new Table(title, headers, values);\n+        }\n+    }\n+}"},{"sha":"df5bbea592b3759959909c034a7f11ce6a6d242e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/TwoColumnTable.java","status":"added","additions":262,"deletions":0,"changes":262,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTwoColumnTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTwoColumnTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTwoColumnTable.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -0,0 +1,262 @@\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.messages;\n+\n+import java.util.Map;\n+\n+public class TwoColumnTable {\n+\n+    private static final int TABLE_BORDER = 1;\n+\n+    private static final int MIN_COLUMN_SPACE = 2;\n+\n+    private static final int MIN_COLUMN_SIZE = 5;\n+\n+    private int tableWidth;\n+\n+    private int firstColumntContentWidth;\n+\n+    private int secondColumntContentWidth;\n+\n+    private final String title;\n+\n+    private final String firstColumnHeader;\n+\n+    private int firstColumnMaxWidth;\n+\n+    private final String secondColumnHeader;\n+\n+    private int secondColumnMaxWidth;\n+\n+    public TwoColumnTable(final String title,\n+            final String firstColumnHeader,\n+            final int firstColumnMaxWidth,\n+            final String secondColumnHeader,\n+            final int secondColumnMaxWidth) {\n+\n+        this.firstColumnHeader = firstColumnHeader.toUpperCase();\n+\n+        if (firstColumnMaxWidth < MIN_COLUMN_SIZE) {\n+            this.firstColumnMaxWidth = MIN_COLUMN_SIZE;\n+        } else {\n+            this.firstColumnMaxWidth = firstColumnMaxWidth;\n+        }\n+\n+        this.secondColumnHeader = secondColumnHeader.toUpperCase();\n+\n+        if (secondColumnMaxWidth < MIN_COLUMN_SIZE) {\n+            this.secondColumnMaxWidth = MIN_COLUMN_SIZE;\n+        } else {\n+            this.secondColumnMaxWidth = secondColumnMaxWidth;\n+        }\n+\n+        tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + firstColumnMaxWidth + secondColumnMaxWidth;\n+\n+        if (title.length() > firstColumnMaxWidth + secondColumnMaxWidth) {\n+            tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + title.length();\n+        }\n+\n+        firstColumntContentWidth = (MIN_COLUMN_SPACE * 2) + firstColumnMaxWidth;\n+        secondColumntContentWidth = (MIN_COLUMN_SPACE * 2) + secondColumnMaxWidth;\n+\n+        this.title = title.toUpperCase();\n+    }\n+\n+    public void printTable(final Map<String, String> value) {\n+\n+        if (value.isEmpty()) {\n+            firstColumnMaxWidth = firstColumnHeader.length();\n+            secondColumnMaxWidth = secondColumnHeader.length();\n+            firstColumntContentWidth = (MIN_COLUMN_SPACE * 2) + firstColumnMaxWidth;\n+            secondColumntContentWidth = (MIN_COLUMN_SPACE * 2) + secondColumnMaxWidth;\n+            tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + firstColumnMaxWidth + secondColumnMaxWidth;\n+            if (title.length() > firstColumnMaxWidth + secondColumnMaxWidth) {\n+                tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + title.length();\n+            }\n+        }\n+\n+        final StringBuilder table = new StringBuilder();\n+\n+// ################ BORDER-TOP ################\n+        for (int i = 0; i < tableWidth; i++) {\n+            table.append(\"#\");\n+        }\n+        table.append(\"\\n\");\n+// ################ BORDER-TOP ################\n+\n+// ################ TABLE-TITLE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < titleFirstSpace(title); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(title);\n+        for (int i = 0; i < titleSecondSpace(title); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ TABLE-TITLE ################\n+\n+// ################ BORDER-TOP ################\n+        for (int i = 0; i < tableWidth; i++) {\n+            table.append(\"#\");\n+        }\n+        table.append(\"\\n\");\n+// ################ BORDER-TOP ################\n+\n+// ################ LIST-SPACE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < firstColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        for (int i = 0; i < secondColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ LIST-SPACE ################\n+\n+// ################ HEADER-TITLE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < firstColumnFirstSpace(firstColumnHeader); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(firstColumnHeader);\n+        for (int i = 0; i < firstColumnSecondSpace(firstColumnHeader); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        for (int i = 0; i < secondColumnFirstSpace(secondColumnHeader); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(secondColumnHeader);\n+        for (int i = 0; i < secondColumnSecondSpace(secondColumnHeader); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ HEADER-TITLE ################\n+\n+// ################ LIST-SPACE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < firstColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        for (int i = 0; i < secondColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ LIST-SPACE ################\n+\n+// ################ BORDER-TOP ################\n+        for (int i = 0; i < tableWidth; i++) {\n+            table.append(\"#\");\n+        }\n+        table.append(\"\\n\");\n+// ################ BORDER-TOP ################\n+\n+// ################ LIST-SPACE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < firstColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        for (int i = 0; i < secondColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ LIST-SPACE ################\n+\n+// ################ CONTENT ################\n+        for (final Map.Entry<String, String> entrySet : value.entrySet()) {\n+            final String firstColumnValue = entrySet.getKey();\n+            final String secondColumnValue = entrySet.getValue();\n+            table.append(\"#\");\n+            for (int i = 0; i < firstColumnFirstSpace(firstColumnValue); i++) {\n+                table.append(\" \");\n+            }\n+            table.append(firstColumnValue);\n+            for (int i = 0; i < firstColumnSecondSpace(firstColumnValue); i++) {\n+                table.append(\" \");\n+            }\n+            table.append(\"#\");\n+            for (int i = 0; i < secondColumnFirstSpace(secondColumnValue); i++) {\n+                table.append(\" \");\n+            }\n+            table.append(secondColumnValue);\n+            for (int i = 0; i < secondColumnSecondSpace(secondColumnValue); i++) {\n+                table.append(\" \");\n+            }\n+            table.append(\"#\");\n+            table.append(\"\\n\");\n+        }\n+// ################ CONTENT ################\n+\n+// ################ LIST-SPACE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < firstColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        for (int i = 0; i < secondColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ LIST-SPACE ################\n+\n+// ################ BORDER-BOTTOM ################\n+        for (int i = 0; i < tableWidth; i++) {\n+            table.append(\"#\");\n+        }\n+// ################ BORDER-BOTTOM ################\n+\n+        System.out.println(table.toString() + \"\\n\");\n+    }\n+\n+    private int titleFirstSpace(final String wordToPrint) {\n+        return ((tableWidth - 2) - (wordToPrint.length())) / 2;\n+    }\n+\n+    private int titleSecondSpace(final String wordToPrint) {\n+        return tableWidth - 2 - (titleFirstSpace(wordToPrint) + wordToPrint.length());\n+    }\n+\n+    private int firstColumnFirstSpace(final String wordToPrint) {\n+        return (MIN_COLUMN_SPACE * 2 + (firstColumnMaxWidth - wordToPrint.length())) / 2;\n+    }\n+\n+    private int firstColumnSecondSpace(final String wordToPrint) {\n+        return firstColumntContentWidth - (firstColumnFirstSpace(wordToPrint) + wordToPrint.length());\n+    }\n+\n+    private int secondColumnFirstSpace(final String wordToPrint) {\n+        return (MIN_COLUMN_SPACE * 2 + (secondColumnMaxWidth - wordToPrint.length())) / 2;\n+    }\n+\n+    private int secondColumnSecondSpace(final String wordToPrint) {\n+        return secondColumntContentWidth - (secondColumnFirstSpace(wordToPrint) + wordToPrint.length());\n+    }\n+\n+}"},{"sha":"b759877af05d1e8cf4aa6197903b953cddc17710","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/util/CommandUtils.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47392366e6f2cd04a8d016ef74f2bda408c86fe4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java?ref=47392366e6f2cd04a8d016ef74f2bda408c86fe4","patch":"@@ -55,7 +55,7 @@ public static List<AbstractCommand> commands()\n         final CommandClassScanner ccs = new CommandClassScanner();\n         final List<Class<? extends AbstractCommand>> commands = ccs.getComponentClasses();\n \n-        Class<? extends AbstractCommand> commandClass = null;\n+        Class<? extends AbstractCommand> commandClass;\n         for (final Class<? extends AbstractCommand> cmd : commands) {\n             commandClass = cmd;\n             if (commandClass == null) {\n@@ -67,6 +67,24 @@ public static List<AbstractCommand> commands()\n         return listCommands;\n     }\n \n+    public static String[] fromEnumToArray(final Class<? extends Enum<?>> enumClass) {\n+        final String[] types = new String[enumClass.getFields().length];\n+        for (int i = 0; i < enumClass.getFields().length; i++) {\n+            types[i] = enumClass.getFields()[i].getName();\n+\n+        }\n+        return types;\n+    }\n+    \n+    public static String helpMessage(final String command, final List<String> options) {\n+        final StringBuilder helpMessageBuilder = new StringBuilder(String.format(\"Usage: %s [options]\\n\", command));\n+        helpMessageBuilder.append(\"  Options:\\n\");\n+        for (final String option : options) {\n+            helpMessageBuilder.append(\"    \").append(option).append(\"\\n\");\n+        }\n+        return helpMessageBuilder.toString();\n+    }\n+\n     private CommandUtils() {\n \n     }"}]}