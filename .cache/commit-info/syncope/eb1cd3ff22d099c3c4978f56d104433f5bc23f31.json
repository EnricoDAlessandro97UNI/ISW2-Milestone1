{"sha":"eb1cd3ff22d099c3c4978f56d104433f5bc23f31","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmViMWNkM2ZmMjJkMDk5YzNjNDk3OGY1NmQxMDQ0MzNmNWJjMjNmMzE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-13T16:01:43Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-13T16:01:43Z"},"message":"[SYNCOPE-1262] Remove matrix parameters - OpenApi wins :-(","tree":{"sha":"573727d2af2e7f7dcf697fdf0efe4871a563d071","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/573727d2af2e7f7dcf697fdf0efe4871a563d071"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/eb1cd3ff22d099c3c4978f56d104433f5bc23f31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eb1cd3ff22d099c3c4978f56d104433f5bc23f31","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eb1cd3ff22d099c3c4978f56d104433f5bc23f31","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b0b0e3294dd893d44845295f6a0f570d33fcc607","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b0b0e3294dd893d44845295f6a0f570d33fcc607","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b0b0e3294dd893d44845295f6a0f570d33fcc607"}],"stats":{"total":1082,"additions":645,"deletions":437},"files":[{"sha":"26ee655173bd11b8ca1bce32ec4d1057796cdee6","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyRead.java","status":"modified","additions":23,"deletions":17,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -19,19 +19,23 @@\n package org.apache.syncope.client.cli.commands.policy;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PolicyRead extends AbstractPolicyCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(PolicyRead.class);\n \n-    private static final String READ_HELP_MESSAGE = \"policy --read {POLICY-KEY} {POLICY-KEY} [...]\";\n+    private static final String READ_HELP_MESSAGE = \"policy --read {POLICY-TYPE} {POLICY-KEY}\\n\"\n+            + \"   Policy type:  ACCOUNT / PASSWORD / PULL / PUSH\";\n \n     private final Input input;\n \n@@ -40,24 +44,26 @@ public PolicyRead(final Input input) {\n     }\n \n     public void read() {\n-        if (input.parameterNumber() >= 1) {\n-            final List<PolicyTO> policyTOs = new ArrayList<>();\n-            for (final String parameter : input.getParameters()) {\n-                try {\n-                    policyTOs.add(policySyncopeOperations.read(parameter));\n-                } catch (final NumberFormatException ex) {\n-                    LOG.error(\"Error reading policy\", ex);\n-                    policyResultManager.notBooleanDeletedError(\"policy\", parameter);\n-                } catch (final WebServiceException | SyncopeClientException ex) {\n-                    LOG.error(\"Error reading policy\", ex);\n-                    if (ex.getMessage().startsWith(\"NotFound\")) {\n-                        policyResultManager.notFoundError(\"Policy\", parameter);\n-                    } else {\n-                        policyResultManager.genericError(ex.getMessage());\n-                    }\n+        if (input.parameterNumber() >= 2) {\n+            final String[] parameters = Arrays.copyOfRange(input.getParameters(), 1, input.parameterNumber());\n+            try {\n+                final List<PolicyTO> policyTOs = new ArrayList<>();\n+                for (final String parameter : parameters) {\n+                    policyTOs.add(policySyncopeOperations.read(input.firstParameter(), parameter));\n                 }\n+                policyResultManager.printPolicies(policyTOs);\n+            } catch (final SyncopeClientException | WebServiceException ex) {\n+                LOG.error(\"Error reading policy\", ex);\n+                if (ex.getMessage().startsWith(\"NotFound\")) {\n+                    policyResultManager.notFoundError(\"Policy\", parameters[0]);\n+                } else {\n+                    policyResultManager.genericError(ex.getMessage());\n+                }\n+            } catch (final IllegalArgumentException ex) {\n+                LOG.error(\"Error reading policy\", ex);\n+                policyResultManager.typeNotValidError(\n+                        \"policy\", input.firstParameter(), CommandUtils.fromEnumToArray(PolicyType.class));\n             }\n-            policyResultManager.printPolicies(policyTOs);\n         } else {\n             policyResultManager.commandOptionError(READ_HELP_MESSAGE);\n         }"},{"sha":"f738ad9eccfcf5b4d82c3c38737a2065d5ad3904","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicySyncopeOperations.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicySyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicySyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicySyncopeOperations.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -28,15 +28,15 @@ public class PolicySyncopeOperations {\n \n     private final PolicyService policyService = SyncopeServices.get(PolicyService.class);\n \n-    public <T extends PolicyTO> T read(final String policyKey) {\n-        return policyService.read(policyKey);\n+    public <T extends PolicyTO> T read(final String type, final String policyKey) {\n+        return policyService.read(PolicyType.valueOf(type), policyKey);\n     }\n \n     public <T extends PolicyTO> List<T> list(final String policyType) {\n         return policyService.list(PolicyType.valueOf(policyType));\n     }\n \n     public void delete(final String policyKey) {\n-        policyService.delete(policyKey);\n+        policyService.delete(null, policyKey);\n     }\n }"},{"sha":"be5221a8c7ba6c5f452accfc27ae1bac0dd703cb","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskRead.java","status":"modified","additions":23,"deletions":18,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -19,19 +19,23 @@\n package org.apache.syncope.client.cli.commands.task;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.TaskTO;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class TaskRead extends AbstractTaskCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(TaskRead.class);\n \n-    private static final String READ_HELP_MESSAGE = \"task --read {TASK-KEY} {TASK-KEY} [...]\";\n+    private static final String READ_HELP_MESSAGE = \"task --read {TASK-TYPE} {TASK-KEY}\\n\"\n+            + \"   Task type:  PROPAGATION / NOTIFICATION / SCHEDULED / PULL / PUSH\";\n \n     private final Input input;\n \n@@ -40,25 +44,26 @@ public TaskRead(final Input input) {\n     }\n \n     public void read() {\n-        if (input.parameterNumber() >= 1) {\n-            final List<TaskTO> taskTOs = new ArrayList<>();\n-            for (final String parameter : input.getParameters()) {\n-                try {\n-                    taskTOs.add(taskSyncopeOperations.read(parameter));\n-                } catch (final NumberFormatException ex) {\n-                    LOG.error(\"Error reading task\", ex);\n-                    taskResultManager.notBooleanDeletedError(\"task\", parameter);\n-                } catch (final SyncopeClientException | WebServiceException ex) {\n-                    LOG.error(\"Error reading task\", ex);\n-                    if (ex.getMessage().startsWith(\"NotFound\")) {\n-                        taskResultManager.notFoundError(\"Task\", parameter);\n-                    } else {\n-                        taskResultManager.genericError(ex.getMessage());\n-                    }\n-                    break;\n+        if (input.parameterNumber() >= 2) {\n+            final String[] parameters = Arrays.copyOfRange(input.getParameters(), 1, input.parameterNumber());\n+            try {\n+                final List<TaskTO> taskTOs = new ArrayList<>();\n+                for (final String parameter : parameters) {\n+                    taskTOs.add(taskSyncopeOperations.read(input.firstParameter(), parameter));\n                 }\n+                taskResultManager.printTasks(taskTOs);\n+            } catch (final SyncopeClientException | WebServiceException ex) {\n+                LOG.error(\"Error reading task\", ex);\n+                if (ex.getMessage().startsWith(\"NotFound\")) {\n+                    taskResultManager.notFoundError(\"Task\", parameters[0]);\n+                } else {\n+                    taskResultManager.genericError(ex.getMessage());\n+                }\n+            } catch (final IllegalArgumentException ex) {\n+                LOG.error(\"Error reading task\", ex);\n+                taskResultManager.typeNotValidError(\n+                        \"task\", input.firstParameter(), CommandUtils.fromEnumToArray(TaskType.class));\n             }\n-            taskResultManager.printTasks(taskTOs);\n         } else {\n             taskResultManager.commandOptionError(READ_HELP_MESSAGE);\n         }"},{"sha":"48fd7c690b5412715e7ef1787ac10e50e593f1be","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -36,12 +36,12 @@ public List<JobTO> listJobs() {\n         return taskService.listJobs();\n     }\n \n-    public <T extends TaskTO> T read(final String taskKey) {\n-        return taskService.read(taskKey, true);\n+    public <T extends TaskTO> T read(final String type, final String taskKey) {\n+        return taskService.read(TaskType.valueOf(type), taskKey, true);\n     }\n \n     public void delete(final String taskKey) {\n-        taskService.delete(taskKey);\n+        taskService.delete(null, taskKey);\n     }\n \n     public List<TaskTO> list(final String type) {"},{"sha":"48cdc1596962281e5bd93d37cdd6cf689c13296c","filename":"client/cli/src/main/resources/messages.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fmessages.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fmessages.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fmessages.properties?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -22,14 +22,14 @@ entitlement.help.message=\\nUsage: entitlement [options]\\n  Options:\\n    --help\n group.help.message=\\nUsage: group [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n    --read \\n       Syntax: --read {GROUP-KEY} {GROUP-KEY} [...]\\n    --read-attr-by-schema-type {GROUP-KEY} {SCHEMA-TYPE}\\n       Schema type: PLAIN / DERIVED / VIRTUAL\\n    --read-attr-by-schema {GROUP-KEY} {SCHEMA-TYPE} {SCHEMA-KEY}\\n       Schema type: PLAIN / DERIVED / VIRTUAL\\n    --delete \\n       Syntax: --delete {GROUP-KEY} {GROUP-KEY} [...]\\n\n logger.help.message=\\nUsage: logger [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n    --read \\n       Syntax: --read {LOG-NAME} {LOG-NAME} [...]\\n    --update \\n       Syntax: --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n    --update-all \\n       Syntax: --update-all {LOG-LEVEL} \\n    --create \\n       Syntax: --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n    --delete \\n       Syntax: --delete {LOG-NAME} {LOG-NAME} [...]\\n\n notification.help.message=\\nUsage: notification [options]\\n  Options:\\n    --help \\n    --list \\n    --read \\n       Syntax: --read {NOTIFICATION-KEY} \\n    --delete \\n       Syntax: --delete {NOTIFICATION-KEY}\\n\n-policy.help.message=\\nUsage: policy [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n       Syntax: --list-policy {POLICY-TYPE} \\n          Policy type: ACCOUNT / PASSWORD / PULL / PUSH\\n    --read \\n       Syntax: --read {POLICY-KEY} {POLICY-KEY} [...]\\n    --delete \\n       Syntax: --delete {POLICY-KEY} {POLICY-KEY} [...]\\n\n+policy.help.message=\\nUsage: policy [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n       Syntax: --list-policy {POLICY-TYPE} \\n          Policy type: ACCOUNT / PASSWORD / PULL / PUSH\\n    --read \\n       Syntax: --read {POLICY-TYPE} {POLICY-KEY}\\n   Policy type:  ACCOUNT / PASSWORD / PULL / PUSH\\n    --delete \\n       Syntax: --delete {POLICY-KEY} {POLICY-KEY} [...]\\n\n question.help.message=\\nUsage: question [options]\\n  Options:\\n    --help \\n    --list \\n    --read \\n       Syntax: --read {QUESTION-KEY} {QUESTION-KEY} [...]\\n    --delete \\n       Syntax: --delete {QUESTION-KEY} {QUESTION-KEY} [...]\\n\n realm.help.message=\\nUsage: realm [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n\n report.help.message=\\nUsage: report [options]\\n  Options:\\n    --help \\n    --details\\n    --list \\n    --list-jobs \\n    --read \\n       Syntax: --read {REPORT-KEY} {REPORT-KEY} [...] \\n    --delete \\n       Syntax: --delete {REPORT-KEY} {REPORT-KEY} [...]\\n    --execute \\n       Syntax: --execute {REPORT-KEY} \\n    --delete-execution \\n       Syntax: --delete-execution {EXECUTION-KEY} {EXECUTION-KEY} [...]\\n    --export-execution-result \\n       Syntax: --export-execution-result {EXECUTION-KEY} {EXECUTION-KEY} [...] {FORMAT}\\n          Format: CSV / HTML / PDF / XML / RTF\\n\n resource.help.message=\\nUsage: resource [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n    --read \\n       Syntax: --read {RESOURCE-KEY} {RESOURCE-KEY} [...]\\n    --delete \\n       Syntax: --delete {RESOURCE-KEY} {RESOURCE-KEY} [...]\\n\n role.help.message=\\nUsage: role [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n    --read \\n       Syntax: --read {ROLE-KEY} {ROLE-KEY} [...]\\n    --delete \\n       Syntax: --delete {ROLE-KEY} {ROLE-KEY} [...]\\n\n schema.help.message=\\nUsage: schema [options]\\n  Options:\\n    --help \\n    --details \\n    --list-all\\n    --list-plain\\n    --list-derived\\n    --list-virtual\\n    --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n        Schema type: PLAIN / DERIVED / VIRTUAL\\n    --delete {SCHEMA-TYPE} {SCHEMA-KEY}\\n        Schema type: PLAIN / DERIVED / VIRTUAL\\n\n-task.help.message=\\nUsage: task [options]\\n  Options:\\n    --help \\n    --details\\n    --list\\n       Syntax: --list {TASK-TYPE} \\n          Task type: NOTIFICATION / PROPAGATION / PUSH / SCHEDULED / PULL\\n    --list-running-jobs \\n    --list-scheduled-jobs \\n    --read \\n       Syntax: --read {TASK-KEY} {TASK-KEY} [...]\\n    --delete \\n       Syntax: --delete {TASK-KEY} {TASK-KEY} [...]\\n    --delete-all-prop\\n    --delete-execution \\n       Syntax: --delete-execution {TASK-EXEC-KEY} {TASK-EXEC-KEY} [...]\\n    --execute \\n       Syntax: --execute {TASK-KEY} {DRY-RUN}\\n          Dry run: true / false\\n\n+task.help.message=\\nUsage: task [options]\\n  Options:\\n    --help \\n    --details\\n    --list\\n       Syntax: --list {TASK-TYPE} \\n          Task type: NOTIFICATION / PROPAGATION / PUSH / SCHEDULED / PULL\\n    --list-running-jobs \\n    --list-scheduled-jobs \\n    --read \\n       Syntax: --read {TASK-TYPE} {TASK-KEY}\\n   Task type:  PROPAGATION / NOTIFICATION / SCHEDULED / PULL / PUSH\\n    --delete \\n       Syntax: --delete {TASK-KEY} {TASK-KEY} [...]\\n    --delete-all-prop\\n    --delete-execution \\n       Syntax: --delete-execution {TASK-EXEC-KEY} {TASK-EXEC-KEY} [...]\\n    --execute \\n       Syntax: --execute {TASK-KEY} {DRY-RUN}\\n          Dry run: true / false\\n\n user.help.message=\\nUsage: user [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n    --get-user-key\\n       Syntax: --get-user-key {USERNAME}\\n    --get-username\\n       Syntax: --get-username {USER-KEY}\\n    --read-by-userkey \\n       Syntax: --read-by-userkey {USER-KEY} {USER-KEY} [...]\\n    --read-by-username\\n       Syntax: --read-by-username {USERNAME} {USERNAME} [...]\\n    --search-by-attribute \\n       Syntax: --search-by-attribute {REALM} {ATTR-NAME}={ATTR-VALUE}\\n    --search-by-role \\n       Syntax: --search-by-role {REALM} {ROLE-KEY}\\n    --search-by-resource \\n       Syntax: --search-by-resource {REALM} {RESOURCE-KEY}\\n    --delete \\n       Syntax: --delete {USER-KEY} {USER-KEY} [...]\\n    --delete-all \\n       Syntax: --delete-all {REALM}\\n    --delete-by-attribute \\n       Syntax: --delete-by-attribute {REALM} {ATTR-NAME}={ATTR-VALUE}\\n\n workflow.help.message=\\nUsage: workflow [options]\\n  Options:\\n    --help \\n    --export-diagram {ANY-TYPE-KIND}\\n        Any type kind: ANY_OBJECT / USER / GROUP\\n    --export-definition {ANY-TYPE-KIND}\\n        Any type kind: ANY_OBJECT / USER / GROUP\\n\n migrate.help.message=\\nUsage: migrate [options]\\n  Options:\\n    --help \\n    --conf {SRC} {DST}\\n        Syncope 1.2.X content.xml SRC absolute path\\n        Syncope 2.0.X *Content.xml DST absolute path\\n"},{"sha":"a51acaa15ce6b698569f469e40298f327357870b","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/AccountPolicyDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -45,7 +45,8 @@ public class AccountPolicyDirectoryPanel extends PolicyDirectoryPanel<AccountPol\n     public AccountPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n         super(id, PolicyType.ACCOUNT, pageRef);\n \n-        this.addNewItemPanelBuilder(new PolicyModalPanelBuilder<>(new AccountPolicyTO(), modal, pageRef), true);\n+        this.addNewItemPanelBuilder(new PolicyModalPanelBuilder<>(\n+                PolicyType.ACCOUNT, new AccountPolicyTO(), modal, pageRef), true);\n         MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.POLICY_CREATE);\n \n         initResultTable();"},{"sha":"3aa8be41761407046be985042396c32a9b07809b","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PasswordPolicyDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -45,7 +45,7 @@ public PasswordPolicyDirectoryPanel(final String id, final PageReference pageRef\n         super(id, PolicyType.PASSWORD, pageRef);\n \n         this.addNewItemPanelBuilder(\n-                new PolicyModalPanelBuilder<>(new PasswordPolicyTO(), modal, pageRef), true);\n+                new PolicyModalPanelBuilder<>(PolicyType.PASSWORD, new PasswordPolicyTO(), modal, pageRef), true);\n         MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.POLICY_CREATE);\n \n         initResultTable();"},{"sha":"ab029ef1dcb55c59f3c0e25c7cb09227becf8896","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -79,11 +79,11 @@ protected void onConfigure() {\n \n     protected final BaseModal<T> policySpecModal = new BaseModal<>(\"outer\");\n \n-    private final PolicyType policyType;\n+    private final PolicyType type;\n \n     public PolicyDirectoryPanel(final String id, final PolicyType policyType, final PageReference pageRef) {\n         super(id, pageRef, true);\n-        this.policyType = policyType;\n+        this.type = policyType;\n         this.restClient = new PolicyRestClient();\n \n         ruleCompositionModal.size(Modal.Size.Large);\n@@ -143,7 +143,7 @@ public ActionsPanel<T> getActions(final IModel<T> model) {\n             public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                 send(PolicyDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                restClient.getPolicy(model.getObject().getKey()), target));\n+                                restClient.getPolicy(type, model.getObject().getKey()), target));\n             }\n         }, ActionLink.ActionType.EDIT, StandardEntitlement.POLICY_UPDATE);\n \n@@ -170,7 +170,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n             public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                 final T policyTO = model.getObject();\n                 try {\n-                    restClient.delete(policyTO.getKey());\n+                    restClient.delete(type, policyTO.getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -221,14 +221,14 @@ public PolicyDataProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<T> iterator(final long first, final long count) {\n-            List<T> list = restClient.getPolicies(policyType);\n+            List<T> list = restClient.getPolicies(type);\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.getPolicies(policyType).size();\n+            return restClient.getPolicies(type).size();\n         }\n \n         @Override"},{"sha":"0eac09cadcf0a40a925e08816c5058bd1b624a31","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -62,10 +63,15 @@\n \n     private final BaseModal<T> modal;\n \n+    private final PolicyType type;\n+\n     private final PolicyRestClient restClient = new PolicyRestClient();\n \n-    public PolicyModalPanelBuilder(final T policyTO, final BaseModal<T> modal, final PageReference pageRef) {\n+    public PolicyModalPanelBuilder(\n+            final PolicyType type, final T policyTO, final BaseModal<T> modal, final PageReference pageRef) {\n+\n         super(policyTO, pageRef);\n+        this.type = type;\n         this.modal = modal;\n     }\n \n@@ -156,9 +162,9 @@ protected void populateItem(final ListItem<Component> item) {\n         public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n             try {\n                 if (policyTO.getKey() == null) {\n-                    restClient.createPolicy(policyTO);\n+                    restClient.createPolicy(type, policyTO);\n                 } else {\n-                    restClient.updatePolicy(policyTO);\n+                    restClient.updatePolicy(type, policyTO);\n                 }\n                 SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                 Profile.this.modal.close(target);"},{"sha":"150c359bb179fc5c6db6d1b509e6c5115ed2e7c9","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -80,6 +80,8 @@\n \n     private final BaseModal<T> baseModal;\n \n+    private final PolicyType type;\n+\n     private final String policy;\n \n     protected PolicyRuleDirectoryPanel(\n@@ -89,6 +91,7 @@ protected PolicyRuleDirectoryPanel(\n         disableCheckBoxes();\n \n         this.baseModal = baseModal;\n+        this.type = type;\n         this.policy = policy;\n         this.restClient = new PolicyRestClient();\n \n@@ -157,10 +160,10 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n             public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper ignore) {\n                 RuleConf rule = model.getObject().getConf();\n                 try {\n-                    T actual = restClient.getPolicy(policy);\n+                    T actual = restClient.getPolicy(type, policy);\n                     if (actual instanceof ComposablePolicy) {\n                         ((ComposablePolicy) actual).getRules().remove(model.getObject().getImplementationKey());\n-                        restClient.updatePolicy(actual);\n+                        restClient.updatePolicy(type, actual);\n \n                         SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                         customActionOnFinishCallback(target);\n@@ -251,7 +254,7 @@ private List<PolicyRuleWrapper> getPolicyRuleWrappers(final ComposablePolicy pol\n \n         @Override\n         public Iterator<PolicyRuleWrapper> iterator(final long first, final long count) {\n-            final T actual = restClient.getPolicy(policy);\n+            final T actual = restClient.getPolicy(type, policy);\n \n             List<PolicyRuleWrapper> rules = actual instanceof ComposablePolicy\n                     ? getPolicyRuleWrappers((ComposablePolicy) actual)\n@@ -263,7 +266,7 @@ public Iterator<PolicyRuleWrapper> iterator(final long first, final long count)\n \n         @Override\n         public long size() {\n-            final T actual = restClient.getPolicy(policy);\n+            final T actual = restClient.getPolicy(type, policy);\n             return actual instanceof ComposablePolicy\n                     ? getPolicyRuleWrappers((ComposablePolicy) actual).size()\n                     : 0;"},{"sha":"eb939820a30f08c2c1ff887f612d7158b4f3a207","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -73,7 +73,7 @@ public PolicyRuleWizardBuilder(\n \n     @Override\n     protected Serializable onApplyInternal(final PolicyRuleWrapper modelObject) {\n-        PolicyTO policyTO = restClient.getPolicy(policy);\n+        PolicyTO policyTO = restClient.getPolicy(type, policy);\n \n         ComposablePolicy composable;\n         if (policyTO instanceof ComposablePolicy) {\n@@ -96,7 +96,7 @@ protected Serializable onApplyInternal(final PolicyRuleWrapper modelObject) {\n             composable.getRules().add(modelObject.getImplementationKey());\n         }\n \n-        restClient.updatePolicy(policyTO);\n+        restClient.updatePolicy(type, policyTO);\n         return modelObject;\n     }\n "},{"sha":"e0c49a4ece28b5bc1745b3c60aa8a52b56348d92","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -46,7 +46,7 @@ public PullPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n         final PullPolicyTO defaultItem = new PullPolicyTO();\n \n         this.addNewItemPanelBuilder(\n-                new PolicyModalPanelBuilder<>(defaultItem, modal, pageRef), true);\n+                new PolicyModalPanelBuilder<>(PolicyType.PULL, defaultItem, modal, pageRef), true);\n         MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.POLICY_CREATE);\n \n         initResultTable();"},{"sha":"b265cafc37510c81663fe713a9f7ae75ed6e780e","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyModalPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyModalPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -146,7 +147,7 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     }\n                 }\n             });\n-            restClient.updatePolicy(getItem());\n+            restClient.updatePolicy(PolicyType.PULL, getItem());\n \n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n             this.modal.close(target);"},{"sha":"c6446c8fb85912b70ca835107d7d0dbd88126645","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -34,10 +34,10 @@ public class PolicyRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -1392090291817187902L;\n \n-    public <T extends PolicyTO> T getPolicy(final String key) {\n+    public <T extends PolicyTO> T getPolicy(final PolicyType type, final String key) {\n         T policy = null;\n         try {\n-            policy = getService(PolicyService.class).read(key);\n+            policy = getService(PolicyService.class).read(type, key);\n         } catch (Exception e) {\n             LOG.warn(\"No policy found for id {}\", key, e);\n         }\n@@ -58,16 +58,16 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n         return res;\n     }\n \n-    public <T extends PolicyTO> void createPolicy(final T policy) {\n-        getService(PolicyService.class).create(policy);\n+    public <T extends PolicyTO> void createPolicy(final PolicyType type, final T policy) {\n+        getService(PolicyService.class).create(type, policy);\n     }\n \n-    public <T extends PolicyTO> void updatePolicy(final T policy) {\n-        getService(PolicyService.class).update(policy);\n+    public <T extends PolicyTO> void updatePolicy(final PolicyType type, final T policy) {\n+        getService(PolicyService.class).update(type, policy);\n     }\n \n-    public void delete(final String key) {\n-        getService(PolicyService.class).delete(key);\n+    public void delete(final PolicyType type, final String key) {\n+        getService(PolicyService.class).delete(type, key);\n     }\n \n     private class PolicyComparator implements Comparator<PolicyTO>, Serializable {"},{"sha":"d18408541c404afc165de120b6206dfab3773de8","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -183,19 +183,19 @@ private TaskType getTaskType(final Class<?> reference) {\n     }\n \n     public PropagationTaskTO readPropagationTask(final String taskKey) {\n-        return getService(TaskService.class).read(taskKey, false);\n+        return getService(TaskService.class).read(TaskType.PROPAGATION, taskKey, false);\n     }\n \n     public NotificationTaskTO readNotificationTask(final String taskKey) {\n-        return getService(TaskService.class).read(taskKey, false);\n+        return getService(TaskService.class).read(TaskType.NOTIFICATION, taskKey, false);\n     }\n \n-    public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final String taskKey) {\n-        return getService(TaskService.class).read(taskKey, false);\n+    public <T extends TaskTO> T readTask(final TaskType type, final String taskKey) {\n+        return getService(TaskService.class).read(type, taskKey, false);\n     }\n \n-    public void delete(final String taskKey, final Class<? extends TaskTO> taskToClass) {\n-        getService(TaskService.class).delete(taskKey);\n+    public void delete(final TaskType type, final String taskKey) {\n+        getService(TaskService.class).delete(type, taskKey);\n     }\n \n     @Override\n@@ -218,12 +218,12 @@ public List<ExecTO> listRecentExecutions(final int max) {\n         return getService(TaskService.class).listRecentExecutions(max);\n     }\n \n-    public void create(final SchedTaskTO taskTO) {\n-        getService(TaskService.class).create(taskTO);\n+    public void create(final TaskType type, final SchedTaskTO taskTO) {\n+        getService(TaskService.class).create(type, taskTO);\n     }\n \n-    public void update(final SchedTaskTO taskTO) {\n-        getService(TaskService.class).update(taskTO);\n+    public void update(final TaskType type, final SchedTaskTO taskTO) {\n+        getService(TaskService.class).update(type, taskTO);\n     }\n \n     public BulkActionResult bulkAction(final BulkAction action) {"},{"sha":"a0bc61f22b4080366bbd61dd9f0271448cf76d52","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -160,7 +160,7 @@ public void onClick(final AjaxRequestTarget target, final NotificationTaskTO mod\n             @Override\n             public void onClick(final AjaxRequestTarget target, final NotificationTaskTO modelObject) {\n                 try {\n-                    restClient.delete(taskTO.getKey(), NotificationTaskTO.class);\n+                    restClient.delete(TaskType.NOTIFICATION, taskTO.getKey());\n                     updateResultTable(target);\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);"},{"sha":"ae30e66c0e2dca93973b951939bd75d7d16c11e4","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/PropagationTaskDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -167,7 +167,7 @@ public void onClick(final AjaxRequestTarget target, final PropagationTaskTO mode\n             @Override\n             public void onClick(final AjaxRequestTarget target, final PropagationTaskTO modelObject) {\n                 try {\n-                    restClient.delete(taskTO.getKey(), PropagationTaskTO.class);\n+                    restClient.delete(TaskType.PROPAGATION, taskTO.getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                     PropagationTaskDirectoryPanel.this.getTogglePanel().close(target);"},{"sha":"07c2ef316bd1e709783d298c64a43f9d5dae38af","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -51,10 +51,12 @@\n     protected ProvisioningTaskDirectoryPanel(\n             final BaseModal<?> baseModal,\n             final MultilevelPanel multiLevelPanelRef,\n+            final TaskType taskType,\n             final Class<T> reference,\n             final String resource,\n             final PageReference pageRef) {\n-        super(baseModal, multiLevelPanelRef, reference, pageRef);\n+\n+        super(baseModal, multiLevelPanelRef, taskType, reference, pageRef);\n         this.resource = resource;\n \n         this.schedTaskTO.setResource(resource);"},{"sha":"a0329d8b091fc213b61c6abe9fe0008261fdd8b4","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/PullTaskDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTaskDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -39,7 +39,8 @@ protected PullTaskDirectoryPanel(\n             final MultilevelPanel multiLevelPanelRef,\n             final String resource,\n             final PageReference pageRef) {\n-        super(baseModal, multiLevelPanelRef, PullTaskTO.class, resource, pageRef);\n+\n+        super(baseModal, multiLevelPanelRef, TaskType.PULL, PullTaskTO.class, resource, pageRef);\n     }\n \n     @Override"},{"sha":"ac2dd0bd4ee91aa273abfcf2f5e5f503ca5a822b","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/PushTaskDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -37,7 +37,7 @@ protected PushTaskDirectoryPanel(\n             final MultilevelPanel multiLevelPanelRef,\n             final String resource,\n             final PageReference pageRef) {\n-        super(baseModal, multiLevelPanelRef, PushTaskTO.class, resource, pageRef);\n+        super(baseModal, multiLevelPanelRef, TaskType.PUSH, PushTaskTO.class, resource, pageRef);\n     }\n \n     @Override"},{"sha":"824b778aeb5f87eddfee30bfc4555633349675a7","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -72,6 +72,8 @@\n \n     private static final long serialVersionUID = 4984337552918213290L;\n \n+    protected TaskType taskType;\n+\n     protected final Class<T> reference;\n \n     protected T schedTaskTO;\n@@ -83,9 +85,12 @@\n     protected SchedTaskDirectoryPanel(\n             final BaseModal<?> baseModal,\n             final MultilevelPanel multiLevelPanelRef,\n+            final TaskType taskType,\n             final Class<T> reference,\n             final PageReference pageRef) {\n+\n         super(baseModal, multiLevelPanelRef, pageRef);\n+        this.taskType = taskType;\n         this.reference = reference;\n \n         try {\n@@ -94,7 +99,7 @@ protected SchedTaskDirectoryPanel(\n             LOG.error(\"Falure instantiating task\", e);\n         }\n \n-        this.addNewItemPanelBuilder(new SchedTaskWizardBuilder<>(schedTaskTO, pageRef), true);\n+        this.addNewItemPanelBuilder(new SchedTaskWizardBuilder<>(taskType, schedTaskTO, pageRef), true);\n \n         MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.TASK_CREATE);\n \n@@ -115,7 +120,7 @@ protected Serializable onApplyInternal(\n                     final TemplatableTO targetObject, final String type, final AnyTO anyTO) {\n \n                 targetObject.getTemplates().put(type, anyTO);\n-                new TaskRestClient().update(SchedTaskTO.class.cast(targetObject));\n+                new TaskRestClient().update(taskType, SchedTaskTO.class.cast(targetObject));\n                 return targetObject;\n             }\n         };\n@@ -203,7 +208,7 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                 SchedTaskDirectoryPanel.this.getTogglePanel().close(target);\n                 send(SchedTaskDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                restClient.readSchedTask(reference, model.getObject().getKey()),\n+                                restClient.readTask(taskType, model.getObject().getKey()),\n                                 target).setResourceModel(\n                                 new StringResourceModel(\"inner.task.edit\",\n                                         SchedTaskDirectoryPanel.this,\n@@ -252,7 +257,7 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final T ignore) {\n                 try {\n-                    restClient.delete(taskTO.getKey(), reference);\n+                    restClient.delete(taskType, taskTO.getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                     SchedTaskDirectoryPanel.this.getTogglePanel().close(target);\n@@ -287,7 +292,7 @@ protected Collection<ActionType> getBulkActions() {\n \n     @Override\n     protected SchedTasksProvider<T> dataProvider() {\n-        return new SchedTasksProvider<>(reference, TaskType.SCHEDULED, rows);\n+        return new SchedTasksProvider<>(reference, taskType, rows);\n     }\n \n     protected class SchedTasksProvider<T extends SchedTaskTO> extends TaskDataProvider<T> {"},{"sha":"8efd140d64eeeb0356b087f3407aa043aec40ba9","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PullMode;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -61,6 +62,8 @@\n \n     private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n \n+    private final TaskType type;\n+\n     private PushTaskWrapper wrapper;\n \n     private CrontabPanel crontabPanel;\n@@ -79,8 +82,9 @@ protected List<String> load() {\n         }\n     };\n \n-    public SchedTaskWizardBuilder(final T taskTO, final PageReference pageRef) {\n+    public SchedTaskWizardBuilder(final TaskType type, final T taskTO, final PageReference pageRef) {\n         super(taskTO, pageRef);\n+        this.type = type;\n     }\n \n     @Override\n@@ -91,9 +95,9 @@ protected Serializable onApplyInternal(final SchedTaskTO modelObject) {\n \n         modelObject.setCronExpression(crontabPanel.getCronExpression());\n         if (modelObject.getKey() == null) {\n-            taskRestClient.create(modelObject);\n+            taskRestClient.create(type, modelObject);\n         } else {\n-            taskRestClient.update(modelObject);\n+            taskRestClient.update(type, modelObject);\n         }\n         return modelObject;\n     }"},{"sha":"562d63266595a517c9e94c2d3944a92f6f5f38bd","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTasks.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTasks.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.model.Model;\n@@ -39,7 +40,7 @@ public <T extends AnyTO> SchedTasks(final BaseModal<?> baseModal, final PageRefe\n         add(mlp);\n \n         mlp.setFirstLevel(new SchedTaskDirectoryPanel<SchedTaskTO>(\n-                baseModal, mlp, SchedTaskTO.class, pageReference) {\n+                baseModal, mlp, TaskType.SCHEDULED, SchedTaskTO.class, pageReference) {\n \n             private static final long serialVersionUID = -2195387360323687302L;\n "},{"sha":"5e4a9d58122f26b20041969130817c250d751ff4","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -53,9 +53,10 @@\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -352,8 +353,7 @@ public void populateItem(\n                         final IModel<JobTO> rowModel) {\n \n                     JobTO jobTO = rowModel.getObject();\n-                    JobActionPanel panel =\n-                            new JobActionPanel(componentId, jobTO, JobWidget.this, pageRef);\n+                    JobActionPanel panel = new JobActionPanel(componentId, jobTO, JobWidget.this, pageRef);\n                     MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n                             String.format(\"%s,%s%s,%s\",\n                                     StandardEntitlement.TASK_EXECUTE,\n@@ -405,11 +405,18 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                             break;\n \n                         case TASK:\n-                            ProvisioningTaskTO schedTaskTO = new TaskRestClient().\n-                                    readSchedTask(ProvisioningTaskTO.class, jobTO.getRefKey());\n-\n-                            SchedTaskWizardBuilder<SchedTaskTO> swb =\n-                                    new SchedTaskWizardBuilder<>(schedTaskTO, pageRef);\n+                            ProvisioningTaskTO schedTaskTO;\n+                            try {\n+                                schedTaskTO = new TaskRestClient().readTask(TaskType.PULL, jobTO.getRefKey());\n+                            } catch (Exception e) {\n+                                LOG.debug(\"Failed to read {} as {}, attempting {}\",\n+                                        jobTO.getRefKey(), TaskType.PULL, TaskType.PUSH, e);\n+                                schedTaskTO = new TaskRestClient().readTask(TaskType.PUSH, jobTO.getRefKey());\n+                            }\n+\n+                            SchedTaskWizardBuilder<ProvisioningTaskTO> swb =\n+                                    new SchedTaskWizardBuilder<>(schedTaskTO instanceof PullTaskTO\n+                                            ? TaskType.PULL : TaskType.PUSH, schedTaskTO, pageRef);\n                             swb.setEventSink(AvailableJobsPanel.this);\n \n                             target.add(jobModal.setContent(swb.build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT)));"},{"sha":"aad915719eeb02f8162b82d635bed35113c50646","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyQuery.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.common.rest.api.beans;\n \n import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.MatrixParam;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n@@ -63,7 +62,7 @@ public String getRealm() {\n     }\n \n     @DefaultValue(SyncopeConstants.ROOT_REALM)\n-    @MatrixParam(\"realm\")\n+    @QueryParam(\"realm\")\n     public void setRealm(final String realm) {\n         this.realm = realm;\n     }"},{"sha":"c96d7b2543fa2e165f1fd4a2c63b79520e3b8671","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -21,7 +21,7 @@\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.PathParam;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -86,7 +86,7 @@ public TaskType getType() {\n     }\n \n     @NotNull\n-    @MatrixParam(\"type\")\n+    @PathParam(\"type\")\n     public void setType(final TaskType type) {\n         this.type = type;\n     }"},{"sha":"40e65ac0a5bbce095c194a10b26a447cc3e5330b","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -26,7 +26,6 @@\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n-import javax.ws.rs.MatrixParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n@@ -50,14 +49,15 @@ public interface PolicyService extends JAXRSService {\n     /**\n      * Returns the policy matching the given key.\n      *\n+     * @param type policy type\n      * @param key key of requested policy\n      * @param <T> response type (extending PolicyTO)\n      * @return policy with matching id\n      */\n     @GET\n-    @Path(\"{key}\")\n+    @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    <T extends PolicyTO> T read(@NotNull @PathParam(\"key\") String key);\n+    <T extends PolicyTO> T read(@NotNull @PathParam(\"type\") PolicyType type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n      * Returns a list of policies of the matching type.\n@@ -67,41 +67,46 @@ public interface PolicyService extends JAXRSService {\n      * @return list of policies with matching type\n      */\n     @GET\n+    @Path(\"{type}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    <T extends PolicyTO> List<T> list(@NotNull @MatrixParam(\"type\") PolicyType type);\n+    <T extends PolicyTO> List<T> list(@NotNull @PathParam(\"type\") PolicyType type);\n \n     /**\n      * Create a new policy.\n      *\n+     * @param type policy type\n      * @param policyTO Policy to be created (needs to match type)\n      * @return Response object featuring Location header of created policy\n      */\n     @POST\n+    @Path(\"{type}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response create(@NotNull PolicyTO policyTO);\n+    Response create(@NotNull @PathParam(\"type\") PolicyType type, @NotNull PolicyTO policyTO);\n \n     /**\n      * Updates policy matching the given key.\n      *\n+     * @param type policy type\n      * @param policyTO Policy to replace existing policy\n      * @return an empty response if operation was successful\n      */\n     @PUT\n-    @Path(\"{key}\")\n+    @Path(\"{type}/{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response update(@NotNull PolicyTO policyTO);\n+    Response update(@NotNull @PathParam(\"type\") PolicyType type, @NotNull PolicyTO policyTO);\n \n     /**\n      * Delete policy matching the given key.\n      *\n+     * @param type policy type\n      * @param key key of policy to be deleted\n      * @return an empty response if operation was successful\n      */\n     @DELETE\n-    @Path(\"{key}\")\n+    @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response delete(@NotNull @PathParam(\"key\") String key);\n+    Response delete(@NotNull @PathParam(\"type\") PolicyType type, @NotNull @PathParam(\"key\") String key);\n \n }"},{"sha":"c46dec069493cd356438094c30c24f4fe3f91711","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n \n /**\n@@ -55,15 +56,17 @@ public interface TaskService extends ExecutableService {\n     /**\n      * Returns the task matching the given key.\n      *\n+     * @param type task type\n      * @param key key of task to be read\n      * @param details whether include executions or not, defaults to true\n      * @param <T> type of taskTO\n      * @return task with matching id\n      */\n     @GET\n-    @Path(\"{key}\")\n+    @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     <T extends TaskTO> T read(\n+            @NotNull @PathParam(\"type\") TaskType type,\n             @NotNull @PathParam(\"key\") String key,\n             @QueryParam(JAXRSService.PARAM_DETAILS) @DefaultValue(\"true\") boolean details);\n \n@@ -75,40 +78,45 @@ <T extends TaskTO> T read(\n      * @return paged list of existing tasks matching the given query\n      */\n     @GET\n+    @Path(\"{type}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     <T extends TaskTO> PagedResult<T> list(@BeanParam TaskQuery query);\n \n     /**\n      * Creates a new task.\n      *\n+     * @param type task type\n      * @param taskTO task to be created\n      * @return Response object featuring Location header of created task\n      */\n     @POST\n+    @Path(\"{type}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response create(@NotNull SchedTaskTO taskTO);\n+    Response create(@NotNull @PathParam(\"type\") TaskType type, @NotNull SchedTaskTO taskTO);\n \n     /**\n      * Updates the task matching the provided key.\n      *\n+     * @param type task type\n      * @param taskTO updated task to be stored\n      * @return an empty response if operation was successful\n      */\n     @PUT\n-    @Path(\"{key}\")\n+    @Path(\"{type}/{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response update(@NotNull TaskTO taskTO);\n+    Response update(@NotNull @PathParam(\"type\") TaskType type, @NotNull SchedTaskTO taskTO);\n \n     /**\n      * Deletes the task matching the provided key.\n      *\n+     * @param type task type\n      * @param key key of task to be deleted\n      * @return an empty response if operation was successful\n      */\n     @DELETE\n-    @Path(\"{key}\")\n+    @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response delete(@NotNull @PathParam(\"key\") String key);\n+    Response delete(@NotNull @PathParam(\"type\") TaskType type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n      * Executes the provided bulk action."},{"sha":"2506a90a896f885f395f122d3039d67c4f91c770","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":45,"deletions":28,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -22,16 +22,16 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n-import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtils;\n+import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -46,61 +46,78 @@ public class PolicyLogic extends AbstractTransactionalLogic<PolicyTO> {\n     @Autowired\n     private PolicyDataBinder binder;\n \n+    @Autowired\n+    private PolicyUtilsFactory policyUtilsFactory;\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_CREATE + \"')\")\n-    public <T extends PolicyTO> T create(final T policyTO) {\n+    public <T extends PolicyTO> T create(final PolicyType type, final T policyTO) {\n+        PolicyUtils policyUtils = policyUtilsFactory.getInstance(policyTO);\n+        if (policyUtils.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + policyUtils.getType());\n+            throw sce;\n+        }\n+\n         return binder.getPolicyTO(policyDAO.save(binder.create(policyTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_UPDATE + \"')\")\n-    public PolicyTO update(final PolicyTO policyTO) {\n+    public PolicyTO update(final PolicyType type, final PolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n-        return binder.getPolicyTO(policyDAO.save(binder.update(policy, policyTO)));\n-    }\n-\n-    private Class<? extends Policy> getPolicyClass(final PolicyType policyType) {\n-        switch (policyType) {\n-            case ACCOUNT:\n-                return AccountPolicy.class;\n-\n-            case PASSWORD:\n-                return PasswordPolicy.class;\n \n-            case PULL:\n-                return PullPolicy.class;\n-\n-            case PUSH:\n-            default:\n-                return PushPolicy.class;\n+        PolicyUtils policyUtils = policyUtilsFactory.getInstance(policy);\n+        if (policyUtils.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + policyUtils.getType());\n+            throw sce;\n         }\n+\n+        return binder.getPolicyTO(policyDAO.save(binder.update(policy, policyTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_LIST + \"')\")\n     public <T extends PolicyTO> List<T> list(final PolicyType type) {\n-        return policyDAO.find(getPolicyClass(type)).stream().\n+        PolicyUtils policyUtils = policyUtilsFactory.getInstance(type);\n+\n+        return policyDAO.find(policyUtils.policyClass()).stream().\n                 <T>map(policy -> binder.getPolicyTO(policy)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_READ + \"')\")\n-    public <T extends PolicyTO> T read(final String key) {\n+    public <T extends PolicyTO> T read(final PolicyType type, final String key) {\n         Policy policy = policyDAO.find(key);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + key + \" not found\");\n         }\n \n+        PolicyUtils policyUtils = policyUtilsFactory.getInstance(policy);\n+        if (type != null && policyUtils.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + policyUtils.getType());\n+            throw sce;\n+        }\n+\n         return binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_DELETE + \"')\")\n-    public <T extends PolicyTO> T delete(final String key) {\n+    public <T extends PolicyTO> T delete(final PolicyType type, final String key) {\n         Policy policy = policyDAO.find(key);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + key + \" not found\");\n         }\n \n-        T policyToDelete = binder.getPolicyTO(policy);\n+        PolicyUtils policyUtils = policyUtilsFactory.getInstance(policy);\n+        if (type != null && policyUtils.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + policyUtils.getType());\n+            throw sce;\n+        }\n+\n+        T deleted = binder.getPolicyTO(policy);\n         policyDAO.delete(policy);\n \n-        return policyToDelete;\n+        return deleted;\n     }\n \n     @Override"},{"sha":"a9ac3d3c6d9cccbe87be70c480c4edcdf6129b21","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":28,"deletions":4,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -94,8 +94,13 @@ public class TaskLogic extends AbstractExecutableLogic<TaskTO> {\n     private TaskUtilsFactory taskUtilsFactory;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_CREATE + \"')\")\n-    public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n+    public <T extends SchedTaskTO> T createSchedTask(final TaskType type, final T taskTO) {\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(taskTO);\n+        if (taskUtils.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + taskUtils.getType());\n+            throw sce;\n+        }\n \n         SchedTask task = binder.createSchedTask(taskTO, taskUtils);\n         task = taskDAO.save(task);\n@@ -117,13 +122,18 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_UPDATE + \"')\")\n-    public <T extends SchedTaskTO> T updateSchedTask(final SchedTaskTO taskTO) {\n+    public <T extends SchedTaskTO> T updateSchedTask(final TaskType type, final SchedTaskTO taskTO) {\n         SchedTask task = taskDAO.find(taskTO.getKey());\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskTO.getKey());\n         }\n \n         TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n+        if (taskUtils.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + taskUtils.getType());\n+            throw sce;\n+        }\n \n         binder.updateSchedTask(task, taskTO, taskUtils);\n         task = taskDAO.save(task);\n@@ -180,11 +190,19 @@ public <T extends TaskTO> Pair<Integer, List<T>> list(\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n-    public <T extends TaskTO> T read(final String key, final boolean details) {\n+    public <T extends TaskTO> T read(final TaskType type, final String key, final boolean details) {\n         Task task = taskDAO.find(key);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + key);\n         }\n+\n+        TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n+        if (type != null && taskUtils.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + taskUtils.getType());\n+            throw sce;\n+        }\n+\n         return binder.getTaskTO(task, taskUtilsFactory.getInstance(task), details);\n     }\n \n@@ -261,12 +279,18 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n-    public <T extends TaskTO> T delete(final String key) {\n+    public <T extends TaskTO> T delete(final TaskType type, final String key) {\n         Task task = taskDAO.find(key);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + key);\n         }\n+\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n+        if (type != null && taskUtils.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + taskUtils.getType());\n+            throw sce;\n+        }\n \n         T taskToDelete = binder.getTaskTO(task, taskUtils, true);\n "},{"sha":"ecde5f10b50f15b719923cd8aab88548420e1aa1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;"},{"sha":"e841a3c9c5a326f08839dbfefb748ef7e903d0d1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -20,11 +20,11 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface PolicyDAO extends DAO<Policy> {\n "},{"sha":"42ba819568492d08b057d9b023f88c089623916c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -21,8 +21,8 @@\n import java.util.List;\n import java.util.regex.Pattern;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface RealmDAO extends DAO<Realm> {"},{"sha":"af09b391dc47b270ab875620369d6c3fdeba95b3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccountPolicy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -21,7 +21,6 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface AccountPolicy extends Policy {"},{"sha":"e6575df507258249beb94c66816d2565f1bffe86","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PasswordPolicy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface PasswordPolicy extends Policy {\n "},{"sha":"b152221af0235e8481b33d20c952ef8760db6ddc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/Policy.java","status":"renamed","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicy.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -16,7 +16,9 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n \n public interface Policy extends Entity {\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Policy.java"},{"sha":"e7126465a88aba519d2c865baa7933aef06f8549","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PolicyUtils.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicyUtils.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.common.lib.types.PolicyType;\n+\n+public interface PolicyUtils {\n+\n+    PolicyType getType();\n+\n+    Class<? extends Policy> policyClass();\n+}"},{"sha":"e3092c055d7d393fc026339f00c8f4c5870c377e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PolicyUtilsFactory.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicyUtilsFactory.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+\n+public interface PolicyUtilsFactory {\n+\n+    PolicyUtils getInstance(PolicyType type);\n+\n+    PolicyUtils getInstance(Policy policy);\n+\n+    PolicyUtils getInstance(Class<? extends PolicyTO> policyClass);\n+\n+    PolicyUtils getInstance(PolicyTO policyTO);\n+}"},{"sha":"d8d1a6906da22ac5b2946648774ea5ea8f31d141","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PullPolicy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -22,7 +22,6 @@\n import java.util.Optional;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface PullPolicy extends Policy {\n "},{"sha":"d6819b720014cc4f15a26399d9182273e8f7703e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PushPolicy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.api.entity.policy;\n \n import org.apache.syncope.common.lib.policy.PushPolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface PushPolicy extends Policy {\n "},{"sha":"3ad39f61d63cc63bff33cf2cd8d2dec0cda3be7a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -42,8 +42,8 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;"},{"sha":"52bca604e52a03fd208825c367a340b0da7864a1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -26,8 +26,8 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy;"},{"sha":"7f90046af72808a295008331d945f76676bc463a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -31,9 +31,9 @@\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;"},{"sha":"27fcb853553f00c5cbdaac9a7dae7739d1e709a0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -22,7 +22,7 @@\n import javax.persistence.Inheritance;\n import javax.persistence.InheritanceType;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n \n @Entity"},{"sha":"d87325e85374f55c2e3049ab11d75273b93bcf1e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPolicyUtils.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtils.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtils;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+\n+public class JPAPolicyUtils implements PolicyUtils {\n+\n+    private final PolicyType type;\n+\n+    protected JPAPolicyUtils(final PolicyType type) {\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public PolicyType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public Class<? extends Policy> policyClass() {\n+        switch (type) {\n+            case ACCOUNT:\n+                return AccountPolicy.class;\n+\n+            case PASSWORD:\n+                return PasswordPolicy.class;\n+\n+            case PULL:\n+                return PullPolicy.class;\n+\n+            case PUSH:\n+            default:\n+                return PushPolicy.class;\n+        }\n+    }\n+\n+}"},{"sha":"6ecd1d06a68406fceb2a21235c00207b04e61f91","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPolicyUtilsFactory.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n+import org.apache.syncope.common.lib.policy.PullPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtils;\n+import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+\n+@Component\n+public class JPAPolicyUtilsFactory implements PolicyUtilsFactory {\n+\n+    @Override\n+    public PolicyUtils getInstance(final PolicyType type) {\n+        return new JPAPolicyUtils(type);\n+    }\n+\n+    @Override\n+    public PolicyUtils getInstance(final Policy policy) {\n+        PolicyType type;\n+        if (policy instanceof AccountPolicy) {\n+            type = PolicyType.ACCOUNT;\n+        } else if (policy instanceof PasswordPolicy) {\n+            type = PolicyType.PASSWORD;\n+        } else if (policy instanceof PullPolicy) {\n+            type = PolicyType.PULL;\n+        } else if (policy instanceof PushPolicy) {\n+            type = PolicyType.PUSH;\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid policy: \" + policy);\n+        }\n+\n+        return getInstance(type);\n+    }\n+\n+    @Override\n+    public PolicyUtils getInstance(final Class<? extends PolicyTO> policyClass) {\n+        PolicyType type;\n+        if (policyClass == AccountPolicyTO.class) {\n+            type = PolicyType.ACCOUNT;\n+        } else if (policyClass == PasswordPolicyTO.class) {\n+            type = PolicyType.PASSWORD;\n+        } else if (policyClass == PullPolicyTO.class) {\n+            type = PolicyType.PULL;\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid PolicyTO class: \" + policyClass.getName());\n+        }\n+\n+        return getInstance(type);\n+    }\n+\n+    @Override\n+    public PolicyUtils getInstance(final PolicyTO policyTO) {\n+        return getInstance(policyTO.getClass());\n+    }\n+\n+}"},{"sha":"4fde449d32f97b2a7b26d592da121050a95965f8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -31,9 +31,9 @@\n import org.apache.syncope.core.persistence.api.entity.DynMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"2fa7345c7876ad76d24a0aaeac30d74efcc99ba4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -37,8 +37,8 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"6fd25efec0d1299cb47577f11b30daecc24a8cd7","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/PolicyDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.policy.PolicyTO;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n \n public interface PolicyDataBinder {\n "},{"sha":"319690ec72998e4312b6d77d8964f4f40ac435eb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -36,14 +36,14 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n-import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n \n @Component\n public class PolicyDataBinderImpl implements PolicyDataBinder {"},{"sha":"8b006e1ebd6c4c846dccf29c3606c79d8af0f37e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -35,9 +35,9 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n import org.slf4j.Logger;"},{"sha":"c115ca657e97935d83e33a0cf1dedda02502ec93","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -36,17 +36,17 @@ public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyServ\n     private PolicyLogic logic;\n \n     @Override\n-    public Response create(final PolicyTO policyTO) {\n-        PolicyTO policy = logic.create(policyTO);\n+    public Response create(final PolicyType type, final PolicyTO policyTO) {\n+        PolicyTO policy = logic.create(type, policyTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(policy.getKey()).build();\n         return Response.created(location).\n                 header(RESTHeaders.RESOURCE_KEY, policy.getKey()).\n                 build();\n     }\n \n     @Override\n-    public Response delete(final String key) {\n-        logic.delete(key);\n+    public Response delete(final PolicyType type, final String key) {\n+        logic.delete(type, key);\n         return Response.noContent().build();\n     }\n \n@@ -56,13 +56,13 @@ public <T extends PolicyTO> List<T> list(final PolicyType type) {\n     }\n \n     @Override\n-    public <T extends PolicyTO> T read(final String key) {\n-        return logic.read(key);\n+    public <T extends PolicyTO> T read(final PolicyType type, final String key) {\n+        return logic.read(type, key);\n     }\n \n     @Override\n-    public Response update(final PolicyTO policyTO) {\n-        logic.update(policyTO);\n+    public Response update(final PolicyType type, final PolicyTO policyTO) {\n+        logic.update(type, policyTO);\n         return Response.noContent().build();\n     }\n }"},{"sha":"cd24751570811bf68c46713c9480488a3dadb3a3","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n@@ -48,10 +49,10 @@ protected AbstractExecutableLogic<?> getExecutableLogic() {\n     }\n \n     @Override\n-    public Response create(final SchedTaskTO taskTO) {\n+    public Response create(final TaskType type, final SchedTaskTO taskTO) {\n         SchedTaskTO createdTask;\n         if (taskTO != null) {\n-            createdTask = logic.createSchedTask(taskTO);\n+            createdTask = logic.createSchedTask(type, taskTO);\n         } else {\n             throw new BadRequestException();\n         }\n@@ -63,8 +64,8 @@ public Response create(final SchedTaskTO taskTO) {\n     }\n \n     @Override\n-    public Response delete(final String key) {\n-        logic.delete(key);\n+    public Response delete(final TaskType type, final String key) {\n+        logic.delete(type, key);\n         return Response.noContent().build();\n     }\n \n@@ -85,18 +86,14 @@ public <T extends TaskTO> PagedResult<T> list(final TaskQuery query) {\n     }\n \n     @Override\n-    public <T extends TaskTO> T read(final String key, final boolean details) {\n-        return logic.read(key, details);\n+    public <T extends TaskTO> T read(final TaskType type, final String key, final boolean details) {\n+        return logic.read(type, key, details);\n     }\n \n     @Override\n-    public Response update(final TaskTO taskTO) {\n-        if (taskTO instanceof SchedTaskTO) {\n-            logic.updateSchedTask((SchedTaskTO) taskTO);\n-            return Response.noContent().build();\n-        } else {\n-            throw new BadRequestException();\n-        }\n+    public Response update(final TaskType type, final SchedTaskTO taskTO) {\n+        logic.updateSchedTask(type, taskTO);\n+        return Response.noContent().build();\n     }\n \n     @Override\n@@ -107,7 +104,7 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n             case DELETE:\n                 for (String key : bulkAction.getTargets()) {\n                     try {\n-                        result.getResults().put(logic.delete(key).getKey(), BulkActionResult.Status.SUCCESS);\n+                        result.getResults().put(logic.delete(null, key).getKey(), BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing delete for task {}\", key, e);\n                         result.getResults().put(key, BulkActionResult.Status.FAILURE);"},{"sha":"d4226ec9480c4f7f9a8eec0cc000e0b2b49e1ad6","filename":"ext/swagger-ui/pom.xml","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/ext%2Fswagger-ui%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/ext%2Fswagger-ui%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fswagger-ui%2Fpom.xml?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -102,29 +102,7 @@ under the License.\n           </execution>\n         </executions>\n       </plugin>\n-          \n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-antrun-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <executions>\n-          <execution>\n-            <id>addMatrixParamSupport</id>\n-            <phase>process-resources</phase>\n-            <goals>\n-              <goal>run</goal>\n-            </goals>\n-            <configuration>\n-              <target>\n-                <replace file=\"${project.build.directory}/swagger-ui/META-INF/resources/webjars/swagger-ui/${swagger-ui.version}/swagger-ui-bundle.js\"\n-                         token=\"function i(e){var t=e.req,n=e.value,r=e.parameter,i=r.name,o=r.style,a=r.explode,s=(0,h.default)({key:r.name,value:n,style:o||&quot;simple&quot;,explode:a||!1,escape:!1});t.url=t.url.replace(&quot;{&quot;+i+&quot;}&quot;,s)}\"\n-                         value=\"function i(e){var t=e.req,r=e.value,n=e.parameter,a=n.name,u=n.style,o=n.explode,i=(0,h.default)({key:n.name,value:r,style:u||&quot;simple&quot;,explode:o||!1,escape:&quot;matrix&quot;===u});&quot;matrix&quot;!==u||!n.explode&amp;&amp;void 0!==n.explode?t.url=t.url.replace(&quot;{&quot;+a+&quot;}&quot;,i):t.url=t.url.concat(i)}\"/>\n-              </target>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n+         \n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>"},{"sha":"8466864b5beea594d3eebbc3da6732f8a885d65c","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.logic.TaskLogic;\n import org.apache.syncope.core.migration.MigrationPullActions;\n import org.apache.syncope.core.provisioning.java.job.report.AuditReportlet;\n@@ -255,7 +256,7 @@ public void load() {\n                     SchedTaskTO task = new SchedTaskTO();\n                     task.setJobDelegate(reindex.getKey());\n                     task.setName(\"Elasticsearch Reindex\");\n-                    task = taskLogic.createSchedTask(task);\n+                    task = taskLogic.createSchedTask(TaskType.SCHEDULED, task);\n \n                     taskLogic.execute(task.getKey(), null, false);\n "},{"sha":"08d626ba1c20431b569842b153b8d5293b742eb6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -62,6 +62,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -487,8 +488,8 @@ protected ProvisioningResult<GroupTO> deleteGroup(final String key) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T extends PolicyTO> T createPolicy(final T policy) {\n-        Response response = policyService.create(policy);\n+    protected <T extends PolicyTO> T createPolicy(final PolicyType type, final T policy) {\n+        Response response = policyService.create(type, policy);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {"},{"sha":"ac7339d9a0baa25aacbef1533acc65672a4f79ba","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/cli/CLIITCase.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.client.cli.commands.group.GroupCommand;\n import org.apache.syncope.client.cli.commands.install.InstallCommand;\n import org.apache.syncope.client.cli.commands.logger.LoggerCommand;\n-import org.apache.syncope.client.cli.commands.policy.PolicyCommand;\n import org.apache.syncope.client.cli.commands.report.ReportCommand;\n import org.apache.syncope.client.cli.commands.role.RoleCommand;\n import org.apache.syncope.client.cli.commands.user.UserCommand;\n@@ -263,26 +262,6 @@ public void reportNotExists() {\n         }\n     }\n \n-    @Test\n-    public void policyError() {\n-        Process process = null;\n-        try {\n-            PROCESS_BUILDER.command(getCommand(\n-                    new PolicyCommand().getClass().getAnnotation(Command.class).name(),\n-                    PolicyCommand.PolicyOptions.READ.getOptionName(),\n-                    \"wrong\"));\n-            process = PROCESS_BUILDER.start();\n-            final String result = IOUtils.toString(process.getInputStream(), StandardCharsets.UTF_8);\n-            assertTrue(result.contains(\"- Policy wrong doesn't exist\"));\n-        } catch (IOException e) {\n-            fail(e.getMessage());\n-        } finally {\n-            if (process != null) {\n-                process.destroy();\n-            }\n-        }\n-    }\n-\n     @Test\n     public void lastStatements() {\n         Process process = null;"},{"sha":"11fbb0bf3c9ae5530cbe73b2d234803b339128e3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":19,"deletions":12,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -58,24 +58,28 @@ protected static class ThreadExec implements Callable<ExecTO> {\n \n         private final TaskService taskService;\n \n+        private final TaskType type;\n+\n         private final String taskKey;\n \n         private final int maxWaitSeconds;\n \n         private final boolean dryRun;\n \n         public ThreadExec(\n-                final TaskService taskService, final String taskKey, final int maxWaitSeconds, final boolean dryRun) {\n+                final TaskService taskService, final TaskType type, final String taskKey,\n+                final int maxWaitSeconds, final boolean dryRun) {\n \n             this.taskService = taskService;\n+            this.type = type;\n             this.taskKey = taskKey;\n             this.maxWaitSeconds = maxWaitSeconds;\n             this.dryRun = dryRun;\n         }\n \n         @Override\n         public ExecTO call() throws Exception {\n-            return execProvisioningTask(taskService, taskKey, maxWaitSeconds, dryRun);\n+            return execProvisioningTask(taskService, type, taskKey, maxWaitSeconds, dryRun);\n         }\n     }\n \n@@ -123,10 +127,11 @@ protected void ldapCleanup() {\n         }\n     }\n \n-    protected static ExecTO execTask(final TaskService taskService, final String taskKey, final String initialStatus,\n-            final int maxWaitSeconds, final boolean dryRun) {\n+    protected static ExecTO execTask(\n+            final TaskService taskService, final TaskType type, final String taskKey,\n+            final String initialStatus, final int maxWaitSeconds, final boolean dryRun) {\n \n-        TaskTO taskTO = taskService.read(taskKey, true);\n+        TaskTO taskTO = taskService.read(type, taskKey, true);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n \n@@ -145,7 +150,7 @@ protected static ExecTO execTask(final TaskService taskService, final String tas\n             } catch (InterruptedException e) {\n             }\n \n-            taskTO = taskService.read(taskTO.getKey(), true);\n+            taskTO = taskService.read(type, taskTO.getKey(), true);\n \n             assertNotNull(taskTO);\n             assertNotNull(taskTO.getExecutions());\n@@ -159,25 +164,27 @@ protected static ExecTO execTask(final TaskService taskService, final String tas\n     }\n \n     public static ExecTO execProvisioningTask(\n-            final TaskService taskService, final String taskKey, final int maxWaitSeconds, final boolean dryRun) {\n+            final TaskService taskService, final TaskType type, final String taskKey,\n+            final int maxWaitSeconds, final boolean dryRun) {\n \n-        return execTask(taskService, taskKey, \"JOB_FIRED\", maxWaitSeconds, dryRun);\n+        return execTask(taskService, type, taskKey, \"JOB_FIRED\", maxWaitSeconds, dryRun);\n     }\n \n     protected static ExecTO execNotificationTask(\n             final TaskService taskService, final String taskKey, final int maxWaitSeconds) {\n \n-        return execTask(taskService, taskKey, NotificationJob.Status.SENT.name(), maxWaitSeconds, false);\n+        return execTask(taskService, TaskType.NOTIFICATION, taskKey,\n+                NotificationJob.Status.SENT.name(), maxWaitSeconds, false);\n     }\n \n-    protected void execProvisioningTasks(final TaskService taskService,\n-            final Set<String> taskKeys, final int maxWaitSeconds, final boolean dryRun) throws Exception {\n+    protected void execProvisioningTasks(final TaskService taskService, final TaskType type, final Set<String> taskKeys,\n+            final int maxWaitSeconds, final boolean dryRun) throws Exception {\n \n         ExecutorService service = Executors.newFixedThreadPool(taskKeys.size());\n         List<Future<ExecTO>> futures = new ArrayList<>();\n \n         for (String key : taskKeys) {\n-            futures.add(service.submit(new ThreadExec(taskService, key, maxWaitSeconds, dryRun)));\n+            futures.add(service.submit(new ThreadExec(taskService, type, key, maxWaitSeconds, dryRun)));\n             // avoid flooding the test server\n             try {\n                 Thread.sleep(2000);"},{"sha":"172d18c104708ce6adb05506af13c9f3c87f50e8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -85,6 +85,7 @@\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n@@ -915,7 +916,7 @@ public void bulkMembersAction() throws InterruptedException {\n             do {\n                 Thread.sleep(1000);\n \n-                taskTO = taskService.read(exec.getRefKey(), true);\n+                taskTO = taskService.read(TaskType.SCHEDULED, exec.getRefKey(), true);\n \n                 assertNotNull(taskTO);\n                 assertNotNull(taskTO.getExecutions());"},{"sha":"54abfebd5eff8fe828c443d0f6a58afeb1675ce7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/IdentityRecertificationITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FIdentityRecertificationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FIdentityRecertificationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FIdentityRecertificationITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -25,12 +25,13 @@\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\r\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\r\n import org.junit.jupiter.api.Test;\r\n+import org.apache.syncope.common.lib.types.TaskType;\r\n \r\n public class IdentityRecertificationITCase extends AbstractTaskITCase {\r\n \r\n     @Test\r\n     public void recertification() {\r\n-        execTask(taskService, \"e95555d2-1b09-42c8-b25b-f4c4ec598989\", \"JOB_FIRED\", 50, false);\r\n+        execTask(taskService, TaskType.SCHEDULED, \"e95555d2-1b09-42c8-b25b-f4c4ec598989\", \"JOB_FIRED\", 50, false);\r\n \r\n         List<WorkflowFormTO> forms = userWorkflowService.getForms();\r\n         assertFalse(forms.isEmpty());\r"},{"sha":"109e7508922468ac17da14cda409db8a83dd7ec0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ImplementationITCase.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.TestPullActions;\n@@ -78,15 +79,15 @@ public void delete() {\n \n         implementationService.create(implementationTO);\n \n-        PullTaskTO pullTask = taskService.read(AbstractTaskITCase.PULL_TASK_KEY, false);\n+        PullTaskTO pullTask = taskService.read(TaskType.PULL, AbstractTaskITCase.PULL_TASK_KEY, false);\n         assertNotNull(pullTask);\n \n         int before = pullTask.getActions().size();\n \n         pullTask.getActions().add(implementationTO.getKey());\n-        taskService.update(pullTask);\n+        taskService.update(TaskType.PULL, pullTask);\n \n-        pullTask = taskService.read(AbstractTaskITCase.PULL_TASK_KEY, false);\n+        pullTask = taskService.read(TaskType.PULL, AbstractTaskITCase.PULL_TASK_KEY, false);\n         assertNotNull(pullTask);\n \n         int after = pullTask.getActions().size();\n@@ -101,7 +102,7 @@ public void delete() {\n         }\n \n         pullTask.getActions().remove(implementationTO.getKey());\n-        taskService.update(pullTask);\n+        taskService.update(TaskType.PULL, pullTask);\n \n         implementationService.delete(implementationTO.getKey());\n     }"},{"sha":"9e524da11e4384f3f72f4902e1e031571df01740","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -267,15 +268,16 @@ public void pull() {\n             userService.delete(user.getKey());\n \n             // 4. create pull task and execute\n-            newTask = taskService.read(\"7c2242f4-14af-4ab5-af31-cdae23783655\", true);\n+            newTask = taskService.read(TaskType.PULL, \"7c2242f4-14af-4ab5-af31-cdae23783655\", true);\n             newTask.setResource(newResource.getKey());\n             newTask.setDestinationRealm(\"/even/two\");\n \n-            Response response = taskService.create(newTask);\n+            Response response = taskService.create(TaskType.PULL, newTask);\n             newTask = getObject(response.getLocation(), TaskService.class, PullTaskTO.class);\n             assertNotNull(newTask);\n \n-            ExecTO execution = AbstractTaskITCase.execProvisioningTask(taskService, newTask.getKey(), 50, false);\n+            ExecTO execution = AbstractTaskITCase.execProvisioningTask(\n+                    taskService, TaskType.PULL, newTask.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             // 5. verify that pulled user has\n@@ -292,7 +294,7 @@ public void pull() {\n             fail(e.getMessage());\n         } finally {\n             if (newTask != null && !\"83f7e85d-9774-43fe-adba-ccd856312994\".equals(newTask.getKey())) {\n-                taskService.delete(newTask.getKey());\n+                taskService.delete(TaskType.PULL, newTask.getKey());\n             }\n             resourceService.delete(newResource.getKey());\n         }"},{"sha":"7f23c3167eb44b5172c5c45987e4e581f263e79e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.PullMode;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n@@ -193,15 +194,15 @@ public void createResourceAndPull() {\n             task.setPullMode(PullMode.FULL_RECONCILIATION);\n             task.setPerformCreate(true);\n \n-            response = adminClient.getService(TaskService.class).create(task);\n+            response = adminClient.getService(TaskService.class).create(TaskType.PULL, task);\n             assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n-            task = adminClient.getService(TaskService.class).read(\n+            task = adminClient.getService(TaskService.class).read(TaskType.PULL,\n                     StringUtils.substringAfterLast(response.getLocation().toASCIIString(), \"/\"), true);\n             assertNotNull(resource);\n \n             // pull\n             ExecTO execution = AbstractTaskITCase.execProvisioningTask(\n-                    adminClient.getService(TaskService.class), task.getKey(), 50, false);\n+                    adminClient.getService(TaskService.class), TaskType.PULL, task.getKey(), 50, false);\n \n             // verify execution status\n             String status = execution.getStatus();"},{"sha":"8ac0ceaf6df28addf9f3c0ac6dc014a2f8848a15","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -64,7 +64,7 @@ public void notifyByMail() throws Exception {\n         assertTrue(verifyMail(sender, subject, created.getRight()));\n \n         // verify message body\n-        taskTO = taskService.read(taskTO.getKey(), true);\n+        taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n         assertNotNull(taskTO);\n         assertTrue(taskTO.isExecuted());\n         assertNotNull(taskTO.getTextBody());\n@@ -108,9 +108,11 @@ public void notifyByMailWithRetry() throws Exception {\n             int preExecs = taskTO.getExecutions().size();\n \n             // 4. verify notification could not be delivered\n-            execTask(taskService, taskTO.getKey(), NotificationJob.Status.NOT_SENT.name(), 5, false);\n+            execTask(\n+                    taskService, TaskType.NOTIFICATION, taskTO.getKey(), NotificationJob.Status.NOT_SENT.name(), 5,\n+                    false);\n \n-            taskTO = taskService.read(taskTO.getKey(), true);\n+            taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n             assertNotNull(taskTO);\n             assertFalse(taskTO.isExecuted());\n             assertTrue(preExecs <= taskTO.getExecutions().size());\n@@ -137,11 +139,11 @@ public void issueSYNCOPE81() {\n         // generate an execution in order to verify the deletion of a notification task with one or more executions\n         execNotificationTask(taskService, taskTO.getKey(), 50);\n \n-        taskTO = taskService.read(taskTO.getKey(), true);\n+        taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n         assertTrue(taskTO.isExecuted());\n         assertFalse(taskTO.getExecutions().isEmpty());\n \n-        taskService.delete(taskTO.getKey());\n+        taskService.delete(TaskType.NOTIFICATION, taskTO.getKey());\n     }\n \n     @Test\n@@ -161,7 +163,7 @@ public void issueSYNCOPE86() {\n             execNotificationTask(taskService, taskTO.getKey(), 50);\n \n             // 4. verify\n-            taskTO = taskService.read(taskTO.getKey(), true);\n+            taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n             assertNotNull(taskTO);\n             assertTrue(taskTO.isExecuted());\n             assertEquals(1, taskTO.getExecutions().size());\n@@ -191,7 +193,7 @@ public void issueSYNCOPE192() throws Exception {\n         assertTrue(verifyMail(sender, subject, created.getRight()));\n \n         // verify that last exec status was updated\n-        taskTO = taskService.read(taskTO.getKey(), true);\n+        taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n         assertNotNull(taskTO);\n         assertTrue(taskTO.isExecuted());\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -214,7 +216,7 @@ public void issueSYNCOPE445() throws Exception {\n         assertTrue(verifyMail(sender, subject, created.getRight()));\n \n         // verify task\n-        taskTO = taskService.read(taskTO.getKey(), true);\n+        taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n         assertTrue(taskTO.isExecuted());\n         assertNotNull(taskTO);\n         assertTrue(taskTO.getRecipients().contains(\"syncope445@syncope.apache.org\"));"},{"sha":"943ce6a0330d5ffd0fd24e05393ee61cf423880b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -89,7 +89,7 @@ public void listByType() {\n \n     @Test\n     public void getAccountPolicy() {\n-        AccountPolicyTO policyTO = policyService.read(\"06e2ed52-6966-44aa-a177-a0ca7434201f\");\n+        AccountPolicyTO policyTO = policyService.read(PolicyType.ACCOUNT, \"06e2ed52-6966-44aa-a177-a0ca7434201f\");\n \n         assertNotNull(policyTO);\n         assertTrue(policyTO.getUsedByResources().isEmpty());\n@@ -98,7 +98,7 @@ public void getAccountPolicy() {\n \n     @Test\n     public void getPasswordPolicy() {\n-        PasswordPolicyTO policyTO = policyService.read(\"986d1236-3ac5-4a19-810c-5ab21d79cba1\");\n+        PasswordPolicyTO policyTO = policyService.read(PolicyType.PASSWORD, \"986d1236-3ac5-4a19-810c-5ab21d79cba1\");\n \n         assertNotNull(policyTO);\n         assertTrue(policyTO.getUsedByResources().contains(RESOURCE_NAME_NOPROPAGATION));\n@@ -107,28 +107,28 @@ public void getPasswordPolicy() {\n \n     @Test\n     public void getPullPolicy() {\n-        PullPolicyTO policyTO = policyService.read(\"66691e96-285f-4464-bc19-e68384ea4c85\");\n+        PullPolicyTO policyTO = policyService.read(PolicyType.PULL, \"66691e96-285f-4464-bc19-e68384ea4c85\");\n \n         assertNotNull(policyTO);\n         assertTrue(policyTO.getUsedByRealms().isEmpty());\n     }\n \n     @Test\n     public void create() throws IOException {\n-        PullPolicyTO policyTO = createPolicy(buildPullPolicyTO());\n+        PullPolicyTO policyTO = createPolicy(PolicyType.PULL, buildPullPolicyTO());\n         assertNotNull(policyTO);\n         assertEquals(\"TestPullRule\", policyTO.getCorrelationRules().get(AnyTypeKind.USER.name()));\n     }\n \n     @Test\n     public void update() {\n-        PasswordPolicyTO globalPolicy = policyService.read(\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\");\n+        PasswordPolicyTO globalPolicy = policyService.read(PolicyType.PASSWORD, \"ce93fcda-dc3a-4369-a7b0-a6108c261c85\");\n \n         PasswordPolicyTO policy = SerializationUtils.clone(globalPolicy);\n         policy.setDescription(\"A simple password policy\");\n \n         // create a new password policy using the former as a template\n-        policy = createPolicy(policy);\n+        policy = createPolicy(PolicyType.PASSWORD, policy);\n         assertNotNull(policy);\n         assertNotEquals(\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\", policy.getKey());\n \n@@ -140,8 +140,8 @@ public void update() {\n         rule.setBody(POJOHelper.serialize(ruleConf));\n \n         // update new password policy\n-        policyService.update(policy);\n-        policy = policyService.read(policy.getKey());\n+        policyService.update(PolicyType.PASSWORD, policy);\n+        policy = policyService.read(PolicyType.PASSWORD, policy.getKey());\n         assertNotNull(policy);\n \n         ruleConf = POJOHelper.deserialize(rule.getBody(), DefaultPasswordRuleConf.class);\n@@ -153,13 +153,13 @@ public void update() {\n     public void delete() throws IOException {\n         PullPolicyTO policy = buildPullPolicyTO();\n \n-        PullPolicyTO policyTO = createPolicy(policy);\n+        PullPolicyTO policyTO = createPolicy(PolicyType.PULL, policy);\n         assertNotNull(policyTO);\n \n-        policyService.delete(policyTO.getKey());\n+        policyService.delete(PolicyType.PULL, policyTO.getKey());\n \n         try {\n-            policyService.read(policyTO.getKey());\n+            policyService.read(PolicyType.PULL, policyTO.getKey());\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertNotNull(e);\n@@ -193,7 +193,7 @@ public void issueSYNCOPE553() {\n \n         policy.getRules().add(rule.getKey());\n \n-        policy = createPolicy(policy);\n+        policy = createPolicy(PolicyType.ACCOUNT, policy);\n         assertNotNull(policy);\n     }\n \n@@ -217,7 +217,7 @@ public void issueSYNCOPE682() {\n \n         policy.getRules().add(rule.getKey());\n \n-        policy = createPolicy(policy);\n+        policy = createPolicy(PolicyType.ACCOUNT, policy);\n         assertNotNull(policy);\n     }\n }"},{"sha":"f74b22402e9fce08b7c0fe07620561a43a1f2796","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -76,7 +76,7 @@ public void paginatedList() {\n \n     @Test\n     public void read() {\n-        PropagationTaskTO taskTO = taskService.read(\"316285cc-ae52-4ea2-a33b-7355e189ac3f\", true);\n+        PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, \"316285cc-ae52-4ea2-a33b-7355e189ac3f\", true);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -171,12 +171,12 @@ public void issueSYNCOPE741() {\n         }\n \n         // check read\n-        PropagationTaskTO task = taskService.read(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\", false);\n+        PropagationTaskTO task = taskService.read(TaskType.PROPAGATION, \"1e697572-b896-484c-ae7f-0c8f63fcbc6c\", false);\n         assertNotNull(task);\n         assertEquals(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\", task.getKey());\n         assertTrue(task.getExecutions().isEmpty());\n \n-        task = taskService.read(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\", true);\n+        task = taskService.read(TaskType.PROPAGATION, \"1e697572-b896-484c-ae7f-0c8f63fcbc6c\", true);\n         assertNotNull(task);\n         assertEquals(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\", task.getKey());\n         assertFalse(task.getExecutions().isEmpty());"},{"sha":"708c2fa8e6bd31af23c36f61728ab524ba992dbe","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":49,"deletions":47,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -73,6 +73,7 @@\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.PullMode;\n@@ -119,9 +120,9 @@ public static void testPullActionsSetup() {\n         }\n         assertNotNull(pullActions);\n \n-        PullTaskTO pullTask = taskService.read(PULL_TASK_KEY, true);\n+        PullTaskTO pullTask = taskService.read(TaskType.PULL, PULL_TASK_KEY, true);\n         pullTask.getActions().add(pullActions.getKey());\n-        taskService.update(pullTask);\n+        taskService.update(TaskType.PULL, pullTask);\n     }\n \n     @Test\n@@ -160,11 +161,11 @@ public void create() {\n         groupTemplate.getResources().add(RESOURCE_NAME_LDAP);\n         task.getTemplates().put(AnyTypeKind.GROUP.name(), groupTemplate);\n \n-        Response response = taskService.create(task);\n+        Response response = taskService.create(TaskType.PULL, task);\n         PullTaskTO actual = getObject(response.getLocation(), TaskService.class, PullTaskTO.class);\n         assertNotNull(actual);\n \n-        task = taskService.read(actual.getKey(), true);\n+        task = taskService.read(TaskType.PULL, actual.getKey(), true);\n         assertNotNull(task);\n         assertEquals(actual.getKey(), task.getKey());\n         assertEquals(actual.getJobDelegate(), task.getJobDelegate());\n@@ -229,7 +230,7 @@ public void fromCSV() throws Exception {\n                     page(1).size(1).build()).getTotalCount();\n             assertNotNull(usersPre);\n \n-            ExecTO exec = execProvisioningTask(taskService, PULL_TASK_KEY, 50, false);\n+            ExecTO exec = execProvisioningTask(taskService, TaskType.PULL, PULL_TASK_KEY, 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n \n             LOG.debug(\"Execution of task {}:\\n{}\", PULL_TASK_KEY, exec);\n@@ -297,7 +298,7 @@ public void fromCSV() throws Exception {\n             Set<String> otherPullTaskKeys = new HashSet<>();\n             otherPullTaskKeys.add(\"feae4e57-15ca-40d9-b973-8b9015efca49\");\n             otherPullTaskKeys.add(\"55d5e74b-497e-4bc0-9156-73abef4b9adc\");\n-            execProvisioningTasks(taskService, otherPullTaskKeys, 50, false);\n+            execProvisioningTasks(taskService, TaskType.PULL, otherPullTaskKeys, 50, false);\n \n             // Matching --> UNLINK\n             assertFalse(userService.read(\"test9\").getResources().contains(RESOURCE_NAME_CSV));\n@@ -309,7 +310,7 @@ public void fromCSV() throws Exception {\n \n     @Test\n     public void dryRun() {\n-        ExecTO execution = execProvisioningTask(taskService, PULL_TASK_KEY, 50, true);\n+        ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, PULL_TASK_KEY, 50, true);\n         assertEquals(\"SUCCESS\", execution.getStatus());\n     }\n \n@@ -319,7 +320,7 @@ public void reconcileFromDB() {\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n         try {\n             ExecTO execution = execProvisioningTask(\n-                    taskService, \"83f7e85d-9774-43fe-adba-ccd856312994\", 50, false);\n+                    taskService, TaskType.PULL, \"83f7e85d-9774-43fe-adba-ccd856312994\", 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             userTO = userService.read(\"testuser1\");\n@@ -332,7 +333,7 @@ public void reconcileFromDB() {\n \n             // re-execute the same PullTask: now user must be active\n             execution = execProvisioningTask(\n-                    taskService, \"83f7e85d-9774-43fe-adba-ccd856312994\", 50, false);\n+                    taskService, TaskType.PULL, \"83f7e85d-9774-43fe-adba-ccd856312994\", 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             userTO = userService.read(\"testuser1\");\n@@ -352,7 +353,8 @@ public void reconcileFromLDAP() {\n         ldapCleanup();\n \n         // 0. pull\n-        ExecTO execution = execProvisioningTask(taskService, \"1e419ca4-ea81-4493-a14f-28b90113686d\", 50, false);\n+        ExecTO execution = execProvisioningTask(\n+                taskService, TaskType.PULL, \"1e419ca4-ea81-4493-a14f-28b90113686d\", 50, false);\n \n         // 1. verify execution status\n         assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n@@ -365,7 +367,7 @@ public void reconcileFromLDAP() {\n         assertNotNull(matchingGroups);\n         assertEquals(1, matchingGroups.getResult().size());\n         // SYNCOPE-898\n-        PullTaskTO task = taskService.read(\"1e419ca4-ea81-4493-a14f-28b90113686d\", false);\n+        PullTaskTO task = taskService.read(TaskType.PULL, \"1e419ca4-ea81-4493-a14f-28b90113686d\", false);\n         assertEquals(\"/\", task.getDestinationRealm());\n         assertEquals(\"/\", matchingGroups.getResult().get(0).getRealm());\n \n@@ -396,7 +398,7 @@ public void reconcileFromLDAP() {\n         assertNull(groupTO.getGroupOwner());\n \n         // SYNCOPE-317\n-        execProvisioningTask(taskService, \"1e419ca4-ea81-4493-a14f-28b90113686d\", 50, false);\n+        execProvisioningTask(taskService, TaskType.PULL, \"1e419ca4-ea81-4493-a14f-28b90113686d\", 50, false);\n \n         // 4. verify that LDAP group membership is propagated as Syncope membership\n         int i = 0;\n@@ -487,12 +489,12 @@ public void reconcileFromScriptedSQL() throws IOException {\n             }\n \n             // ensure that the pull task does not have the DELETE capability (SYNCOPE-923)\n-            PullTaskTO pullTask = taskService.read(\"30cfd653-257b-495f-8665-281281dbcb3d\", false);\n+            PullTaskTO pullTask = taskService.read(TaskType.PULL, \"30cfd653-257b-495f-8665-281281dbcb3d\", false);\n             assertNotNull(pullTask);\n             assertFalse(pullTask.isPerformDelete());\n \n             // 4. pull\n-            execProvisioningTask(taskService, pullTask.getKey(), 50, false);\n+            execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n \n             // 5. verify that printer was re-created in Syncope (implies that location does not start with given prefix,\n             // hence PrefixItemTransformer was applied during pull)\n@@ -535,16 +537,16 @@ public void filteredReconciliation() throws IOException {\n             reconFilterBuilder = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n             assertNotNull(reconFilterBuilder);\n \n-            task = taskService.read(\"7c2242f4-14af-4ab5-af31-cdae23783655\", true);\n+            task = taskService.read(TaskType.PULL, \"7c2242f4-14af-4ab5-af31-cdae23783655\", true);\n             task.setPullMode(PullMode.FILTERED_RECONCILIATION);\n             task.setReconFilterBuilder(reconFilterBuilder.getKey());\n-            response = taskService.create(task);\n+            response = taskService.create(TaskType.PULL, task);\n             task = getObject(response.getLocation(), TaskService.class, PullTaskTO.class);\n             assertNotNull(task);\n             assertEquals(reconFilterBuilder.getKey(), task.getReconFilterBuilder());\n \n             // 3. exec task\n-            ExecTO execution = execProvisioningTask(taskService, task.getKey(), 50, false);\n+            ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, task.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             // 4. verify that only enabled user was pulled\n@@ -561,7 +563,7 @@ public void filteredReconciliation() throws IOException {\n             jdbcTemplate.execute(\"DELETE FROM testpull WHERE id = '\" + user1OnTestPull + \"'\");\n             jdbcTemplate.execute(\"DELETE FROM testpull WHERE id = '\" + user2OnTestPull + \"'\");\n             if (task != null && !\"7c2242f4-14af-4ab5-af31-cdae23783655\".equals(task.getKey())) {\n-                taskService.delete(task.getKey());\n+                taskService.delete(TaskType.PULL, task.getKey());\n             }\n             if (userTO != null) {\n                 userService.delete(userTO.getKey());\n@@ -611,7 +613,7 @@ public void syncTokenWithErrors() {\n             pullTask.setPerformUpdate(true);\n             pullTask.setPerformDelete(true);\n \n-            response = taskService.create(pullTask);\n+            response = taskService.create(TaskType.PULL, pullTask);\n             if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n                 throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n             }\n@@ -626,7 +628,7 @@ public void syncTokenWithErrors() {\n                     + \"(1041, 'syncTokenWithErrors2', 'Surname2', \"\n                     + \"false, 'syncTokenWithErrors1@syncope.apache.org', '2015-05-23 13:53:24.293')\");\n \n-            ExecTO exec = execProvisioningTask(taskService, pullTask.getKey(), 50, false);\n+            ExecTO exec = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n \n             resForTest = resourceService.read(resForTest.getKey());\n@@ -636,7 +638,7 @@ public void syncTokenWithErrors() {\n                     + \"SET email='syncTokenWithErrors2@syncope.apache.org', lastModification='2016-05-23 13:53:24.293' \"\n                     + \"WHERE ID=1041\");\n \n-            exec = execProvisioningTask(taskService, pullTask.getKey(), 50, false);\n+            exec = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n \n             resForTest = resourceService.read(resForTest.getKey());\n@@ -695,19 +697,19 @@ public void issueSYNCOPE68() {\n             //-----------------------------\n \n             // Update pull task\n-            PullTaskTO task = taskService.read(\"81d88f73-d474-4450-9031-605daa4e313f\", true);\n+            PullTaskTO task = taskService.read(TaskType.PULL, \"81d88f73-d474-4450-9031-605daa4e313f\", true);\n             assertNotNull(task);\n \n             task.getTemplates().put(AnyTypeKind.USER.name(), template);\n \n-            taskService.update(task);\n-            PullTaskTO actual = taskService.read(task.getKey(), true);\n+            taskService.update(TaskType.PULL, task);\n+            PullTaskTO actual = taskService.read(TaskType.PULL, task.getKey(), true);\n             assertNotNull(actual);\n             assertEquals(task.getKey(), actual.getKey());\n             assertFalse(actual.getTemplates().get(AnyTypeKind.USER.name()).getResources().isEmpty());\n             assertFalse(((UserTO) actual.getTemplates().get(AnyTypeKind.USER.name())).getMemberships().isEmpty());\n \n-            ExecTO execution = execProvisioningTask(taskService, actual.getKey(), 50, false);\n+            ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, actual.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             userTO = userService.read(\"testuser2\");\n@@ -732,7 +734,7 @@ public void issueSYNCOPE230() {\n                 + \"('\" + id + \"', 'issuesyncope230', 'Surname', false, 'syncope230@syncope.apache.org', NULL)\");\n \n         // 2. execute PullTask for resource-db-pull (table TESTPULL on external H2)\n-        execProvisioningTask(taskService, \"7c2242f4-14af-4ab5-af31-cdae23783655\", 50, false);\n+        execProvisioningTask(taskService, TaskType.PULL, \"7c2242f4-14af-4ab5-af31-cdae23783655\", 50, false);\n \n         // 3. read e-mail address for user created by the PullTask first execution\n         UserTO userTO = userService.read(\"issuesyncope230\");\n@@ -744,7 +746,7 @@ public void issueSYNCOPE230() {\n         jdbcTemplate.execute(\"UPDATE TESTPULL SET email='updatedSYNCOPE230@syncope.apache.org' WHERE id='\" + id + \"'\");\n \n         // 5. re-execute the PullTask\n-        execProvisioningTask(taskService, \"7c2242f4-14af-4ab5-af31-cdae23783655\", 50, false);\n+        execProvisioningTask(taskService, TaskType.PULL, \"7c2242f4-14af-4ab5-af31-cdae23783655\", 50, false);\n \n         // 6. verify that the e-mail was updated\n         userTO = userService.read(\"issuesyncope230\");\n@@ -777,9 +779,9 @@ public void issueSYNCOPE258() throws IOException {\n         }\n         assertNotNull(corrRule);\n \n-        PullPolicyTO policyTO = policyService.read(\"9454b0d7-2610-400a-be82-fc23cf553dd6\");\n+        PullPolicyTO policyTO = policyService.read(PolicyType.PULL, \"9454b0d7-2610-400a-be82-fc23cf553dd6\");\n         policyTO.getCorrelationRules().put(AnyTypeKind.USER.name(), corrRule.getKey());\n-        policyService.update(policyTO);\n+        policyService.update(PolicyType.PULL, policyTO);\n         // -----------------------------\n \n         PullTaskTO task = new PullTaskTO();\n@@ -792,7 +794,7 @@ public void issueSYNCOPE258() throws IOException {\n         task.setPerformDelete(true);\n         task.setPerformUpdate(true);\n \n-        Response response = taskService.create(task);\n+        Response response = taskService.create(TaskType.PULL, task);\n         task = getObject(response.getLocation(), TaskService.class, PullTaskTO.class);\n \n         UserTO userTO = UserITCase.getUniqueSampleTO(\"s258_1@apache.org\");\n@@ -814,9 +816,9 @@ public void issueSYNCOPE258() throws IOException {\n \n         userService.update(userPatch);\n \n-        execProvisioningTask(taskService, task.getKey(), 50, false);\n+        execProvisioningTask(taskService, TaskType.PULL, task.getKey(), 50, false);\n \n-        PullTaskTO executed = taskService.read(task.getKey(), true);\n+        PullTaskTO executed = taskService.read(TaskType.PULL, task.getKey(), true);\n         assertEquals(1, executed.getExecutions().size());\n \n         // asser for just one match\n@@ -840,7 +842,7 @@ public void issueSYNCOPE272() {\n             assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n             ExecTO taskExecTO = execProvisioningTask(\n-                    taskService, \"986867e2-993b-430e-8feb-aa9abb4c1dcd\", 50, false);\n+                    taskService, TaskType.PULL, \"986867e2-993b-430e-8feb-aa9abb4c1dcd\", 50, false);\n \n             assertNotNull(taskExecTO.getStatus());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(taskExecTO.getStatus()));\n@@ -871,7 +873,7 @@ public void issueSYNCOPE307() {\n         assertTrue(userTO.getVirAttrs().isEmpty());\n \n         // Update pull task\n-        PullTaskTO task = taskService.read(\"38abbf9e-a1a3-40a1-a15f-7d0ac02f47f1\", true);\n+        PullTaskTO task = taskService.read(TaskType.PULL, \"38abbf9e-a1a3-40a1-a15f-7d0ac02f47f1\", true);\n         assertNotNull(task);\n \n         UserTO template = new UserTO();\n@@ -881,10 +883,10 @@ public void issueSYNCOPE307() {\n \n         task.getTemplates().put(AnyTypeKind.USER.name(), template);\n \n-        taskService.update(task);\n+        taskService.update(TaskType.PULL, task);\n \n         // exec task: one user from CSV will match the user created above and template will be applied\n-        execProvisioningTask(taskService, task.getKey(), 50, false);\n+        execProvisioningTask(taskService, TaskType.PULL, task.getKey(), 50, false);\n \n         // check that template was successfully applied...\n         userTO = userService.read(userTO.getKey());\n@@ -937,25 +939,25 @@ public void issueSYNCOPE313DB() throws Exception {\n         pullTask.setPullMode(PullMode.FULL_RECONCILIATION);\n         pullTask.setResource(RESOURCE_NAME_TESTDB);\n         pullTask.getActions().add(pullActions.getKey());\n-        Response taskResponse = taskService.create(pullTask);\n+        Response taskResponse = taskService.create(TaskType.PULL, pullTask);\n \n         PullTaskTO actual = getObject(taskResponse.getLocation(), TaskService.class, PullTaskTO.class);\n         assertNotNull(actual);\n \n-        pullTask = taskService.read(actual.getKey(), true);\n+        pullTask = taskService.read(TaskType.PULL, actual.getKey(), true);\n         assertNotNull(pullTask);\n         assertEquals(actual.getKey(), pullTask.getKey());\n         assertEquals(actual.getJobDelegate(), pullTask.getJobDelegate());\n \n-        ExecTO execution = execProvisioningTask(taskService, pullTask.getKey(), 50, false);\n+        ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n         assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n         // 5. Test the pulled user\n         Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(user.getUsername(), newCleanPassword).self();\n         assertNotNull(self);\n \n         // 6. Delete PullTask + user\n-        taskService.delete(pullTask.getKey());\n+        taskService.delete(TaskType.PULL, pullTask.getKey());\n         deleteUser(user.getKey());\n     }\n \n@@ -1026,12 +1028,12 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             pullTask.setPullMode(PullMode.FULL_RECONCILIATION);\n             pullTask.setResource(RESOURCE_NAME_LDAP);\n             pullTask.getActions().add(pullActions.getKey());\n-            Response taskResponse = taskService.create(pullTask);\n+            Response taskResponse = taskService.create(TaskType.PULL, pullTask);\n \n             pullTask = getObject(taskResponse.getLocation(), TaskService.class, PullTaskTO.class);\n             assertNotNull(pullTask);\n \n-            ExecTO execution = execProvisioningTask(taskService, pullTask.getKey(), 50, false);\n+            ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             // 7. Test the pulled user\n@@ -1042,7 +1044,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         } finally {\n             // Delete PullTask + user + reset the connector\n             if (pullTask != null) {\n-                taskService.delete(pullTask.getKey());\n+                taskService.delete(TaskType.PULL, pullTask.getKey());\n             }\n \n             if (resourceConnector != null && property != null) {\n@@ -1085,13 +1087,13 @@ public void issueSYNCOPE1062() {\n             template.getPlainAttrs().add(attrTO(\"firstname\", \"'fixed'\"));\n             pullTask.getTemplates().put(AnyTypeKind.USER.name(), template);\n \n-            Response taskResponse = taskService.create(pullTask);\n+            Response taskResponse = taskService.create(TaskType.PULL, pullTask);\n             pullTask = getObject(taskResponse.getLocation(), TaskService.class, PullTaskTO.class);\n             assertNotNull(pullTask);\n             assertFalse(pullTask.getTemplates().isEmpty());\n \n             // 3. exec the pull task\n-            ExecTO execution = execProvisioningTask(taskService, pullTask.getKey(), 50, false);\n+            ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             // the user is successfully pulled...\n@@ -1127,7 +1129,7 @@ public void issueSYNCOPE1062() {\n             assertEquals(\"pullFromLDAP2@syncope.apache.org\", connObject.getAttr(\"mail\").get().getValues().get(0));\n \n             // 5. exec the pull task again\n-            execution = execProvisioningTask(taskService, pullTask.getKey(), 50, false);\n+            execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             // the internal is updated...\n@@ -1145,7 +1147,7 @@ public void issueSYNCOPE1062() {\n             fail(e.getMessage());\n         } finally {\n             if (pullTask != null) {\n-                taskService.delete(pullTask.getKey());\n+                taskService.delete(TaskType.PULL, pullTask.getKey());\n             }\n \n             if (propagationGroup != null) {"},{"sha":"7255ac5559c9f0b60f799cda3324fcf9e6fff139","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -79,7 +79,7 @@ public void getPushActionsClasses() {\n     @Test\n     public void read() {\n         PushTaskTO pushTaskTO = taskService.<PushTaskTO>read(\n-                \"0bc11a19-6454-45c2-a4e3-ceef84e5d79b\", true);\n+                TaskType.PUSH, \"0bc11a19-6454-45c2-a4e3-ceef84e5d79b\", true);\n         assertEquals(UnmatchingRule.ASSIGN, pushTaskTO.getUnmatchingRule());\n         assertEquals(MatchingRule.UPDATE, pushTaskTO.getMatchingRule());\n     }\n@@ -105,11 +105,11 @@ public void createPushTask() {\n                 SyncopeClient.getGroupSearchConditionBuilder().isNotNull(\"cool\").query());\n         task.setMatchingRule(MatchingRule.LINK);\n \n-        final Response response = taskService.create(task);\n+        final Response response = taskService.create(TaskType.PUSH, task);\n         final PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n         assertNotNull(actual);\n \n-        task = taskService.read(actual.getKey(), true);\n+        task = taskService.read(TaskType.PUSH, actual.getKey(), true);\n         assertNotNull(task);\n         assertEquals(task.getKey(), actual.getKey());\n         assertEquals(task.getJobDelegate(), actual.getJobDelegate());\n@@ -126,7 +126,7 @@ public void pushMatchingUnmatchingGroups() {\n         assertFalse(groupService.read(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").\n                 getResources().contains(RESOURCE_NAME_LDAP));\n \n-        execProvisioningTask(taskService, \"fd905ba5-9d56-4f51-83e2-859096a67b75\", 50, false);\n+        execProvisioningTask(taskService, TaskType.PUSH, \"fd905ba5-9d56-4f51-83e2-859096a67b75\", 50, false);\n \n         assertNotNull(resourceService.readConnObject(\n                 RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), \"29f96485-729e-4d31-88a1-6fc60e4677f3\"));\n@@ -151,7 +151,7 @@ public void pushUnmatchingUsers() throws Exception {\n         // ------------------------------------------\n         // Unmatching --> Assign --> dryRuyn\n         // ------------------------------------------\n-        execProvisioningTask(taskService, \"af558be4-9d2f-4359-bf85-a554e6e90be1\", 50, true);\n+        execProvisioningTask(taskService, TaskType.PUSH, \"af558be4-9d2f-4359-bf85-a554e6e90be1\", 50, true);\n         assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='vivaldi'\").size());\n         assertFalse(userService.read(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\").\n                 getResources().contains(RESOURCE_NAME_TESTDB2));\n@@ -162,7 +162,7 @@ public void pushUnmatchingUsers() throws Exception {\n         pushTaskKeys.add(\"97f327b6-2eff-4d35-85e8-d581baaab855\");\n         pushTaskKeys.add(\"03aa2a04-4881-4573-9117-753f81b04865\");\n         pushTaskKeys.add(\"5e5f7c7e-9de7-4c6a-99f1-4df1af959807\");\n-        execProvisioningTasks(taskService, pushTaskKeys, 50, false);\n+        execProvisioningTasks(taskService, TaskType.PUSH, pushTaskKeys, 50, false);\n \n         // ------------------------------------------\n         // Unatching --> Ignore\n@@ -213,7 +213,7 @@ public void pushMatchingUser() throws Exception {\n         // ------------------------------------------\n         // Matching --> Deprovision --> dryRuyn\n         // ------------------------------------------\n-        execProvisioningTask(taskService, \"c46edc3a-a18b-4af2-b707-f4a415507496\", 50, true);\n+        execProvisioningTask(taskService, TaskType.PUSH, \"c46edc3a-a18b-4af2-b707-f4a415507496\", 50, true);\n         assertTrue(userService.read(\"1417acbe-cbf6-4277-9372-e75e04f97000\").\n                 getResources().contains(RESOURCE_NAME_TESTDB2));\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n@@ -224,7 +224,7 @@ public void pushMatchingUser() throws Exception {\n         pushTaskKeys.add(\"c46edc3a-a18b-4af2-b707-f4a415507496\");\n         pushTaskKeys.add(\"5e5f7c7e-9de7-4c6a-99f1-4df1af959807\");\n \n-        execProvisioningTasks(taskService, pushTaskKeys, 50, false);\n+        execProvisioningTasks(taskService, TaskType.PUSH, pushTaskKeys, 50, false);\n \n         // ------------------------------------------\n         // Matching --> Deprovision && Ignore\n@@ -247,7 +247,7 @@ public void pushMatchingUser() throws Exception {\n         // ------------------------------------------\n         // Matching --> Link\n         // ------------------------------------------\n-        execProvisioningTask(taskService, \"51318433-cce4-4f71-8f45-9534b6c9c819\", 50, false);\n+        execProvisioningTask(taskService, TaskType.PUSH, \"51318433-cce4-4f71-8f45-9534b6c9c819\", 50, false);\n         assertTrue(userService.read(\"74cd8ece-715a-44a4-a736-e17b46c4e7e6\").\n                 getResources().contains(RESOURCE_NAME_TESTDB2));\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n@@ -257,7 +257,7 @@ public void pushMatchingUser() throws Exception {\n         pushTaskKeys.add(\"24b1be9c-7e3b-443a-86c9-798ebce5eaf2\");\n         pushTaskKeys.add(\"375c7b7f-9e3a-4833-88c9-b7787b0a69f2\");\n \n-        execProvisioningTasks(taskService, pushTaskKeys, 50, false);\n+        execProvisioningTasks(taskService, TaskType.PUSH, pushTaskKeys, 50, false);\n \n         // ------------------------------------------\n         // Matching --> Unlink && Update\n@@ -284,11 +284,11 @@ public void orgUnit() {\n         task.setPerformDelete(true);\n         task.setPerformUpdate(true);\n \n-        Response response = taskService.create(task);\n+        Response response = taskService.create(TaskType.PUSH, task);\n         PushTaskTO pushTask = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n         assertNotNull(pushTask);\n \n-        ExecTO exec = execProvisioningTask(taskService, pushTask.getKey(), 50, false);\n+        ExecTO exec = execProvisioningTask(taskService, TaskType.PUSH, pushTask.getKey(), 50, false);\n         assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n \n         // 2. check\n@@ -371,12 +371,12 @@ public void issueSYNCOPE598() {\n             task.getFilters().put(AnyTypeKind.GROUP.name(),\n                     SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(groupTO.getName()).query());\n \n-            response = taskService.create(task);\n+            response = taskService.create(TaskType.PUSH, task);\n             PushTaskTO push = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n             assertNotNull(push);\n \n             // execute the new task\n-            ExecTO exec = execProvisioningTask(taskService, push.getKey(), 50, false);\n+            ExecTO exec = execProvisioningTask(taskService, TaskType.PUSH, push.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n         } finally {\n             groupService.delete(groupTO.getKey());\n@@ -401,7 +401,7 @@ public void issueSYNCOPE648() {\n         task.setMatchingRule(MatchingRule.IGNORE);\n         task.setUnmatchingRule(UnmatchingRule.IGNORE);\n \n-        Response response = taskService.create(task);\n+        Response response = taskService.create(TaskType.PUSH, task);\n         PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n         assertNotNull(actual);\n \n@@ -425,7 +425,7 @@ public void issueSYNCOPE648() {\n         notification = getObject(responseNotification.getLocation(), NotificationService.class, NotificationTO.class);\n         assertNotNull(notification);\n \n-        execProvisioningTask(taskService, actual.getKey(), 50, false);\n+        execProvisioningTask(taskService, TaskType.PUSH, actual.getKey(), 50, false);\n \n         NotificationTaskTO taskTO = findNotificationTask(notification.getKey(), 50);\n         assertNotNull(taskTO);"},{"sha":"1799e88db75ace078f614cf49dedad2748845478","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.RealmService;\n@@ -144,7 +145,7 @@ public void deletingAccountPolicy() {\n         policy.setDescription(\"deletingAccountPolicy\");\n         policy.getRules().add(rule.getKey());\n \n-        policy = createPolicy(policy);\n+        policy = createPolicy(PolicyType.ACCOUNT, policy);\n         assertNotNull(policy);\n \n         // 2. create realm with policy assigned\n@@ -169,7 +170,7 @@ public void deletingAccountPolicy() {\n         assertEquals(policy.getKey(), actual.getAccountPolicy());\n \n         // 3. remove policy\n-        policyService.delete(policy.getKey());\n+        policyService.delete(PolicyType.ACCOUNT, policy.getKey());\n \n         // 4. verify\n         actual = getRealm(actual.getFullPath()).get();"},{"sha":"358506aa04c55e3fc8c8b34a639431065cd649e2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -72,16 +72,16 @@ public void list() {\n \n     @Test\n     public void update() {\n-        SchedTaskTO task = taskService.read(SCHED_TASK_KEY, true);\n+        SchedTaskTO task = taskService.read(TaskType.SCHEDULED, SCHED_TASK_KEY, true);\n         assertNotNull(task);\n \n         SchedTaskTO taskMod = new SchedTaskTO();\n         taskMod.setKey(SCHED_TASK_KEY);\n         taskMod.setName(task.getName());\n         taskMod.setCronExpression(null);\n \n-        taskService.update(taskMod);\n-        SchedTaskTO actual = taskService.read(taskMod.getKey(), true);\n+        taskService.update(TaskType.SCHEDULED, taskMod);\n+        SchedTaskTO actual = taskService.read(TaskType.SCHEDULED, taskMod.getKey(), true);\n         assertNotNull(actual);\n         assertEquals(task.getKey(), actual.getKey());\n         assertNull(actual.getCronExpression());\n@@ -97,7 +97,7 @@ public void deferred() {\n         task.setName(\"deferred\");\n         task.setJobDelegate(taskJobDelegate.getKey());\n \n-        Response response = taskService.create(task);\n+        Response response = taskService.create(TaskType.SCHEDULED, task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n         assertNotNull(task);\n \n@@ -116,7 +116,7 @@ public void deferred() {\n             } catch (InterruptedException e) {\n             }\n \n-            task = taskService.read(task.getKey(), true);\n+            task = taskService.read(TaskType.SCHEDULED, task.getKey(), true);\n \n             assertNotNull(task);\n             assertNotNull(task.getExecutions());\n@@ -142,21 +142,21 @@ public void issueSYNCOPE144() {\n         task.setDescription(\"issueSYNCOPE144 Description\");\n         task.setJobDelegate(taskJobDelegate.getKey());\n \n-        Response response = taskService.create(task);\n+        Response response = taskService.create(TaskType.SCHEDULED, task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n         assertNotNull(task);\n         assertEquals(\"issueSYNCOPE144\", task.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", task.getDescription());\n \n-        task = taskService.read(task.getKey(), true);\n+        task = taskService.read(TaskType.SCHEDULED, task.getKey(), true);\n         assertNotNull(task);\n         assertEquals(\"issueSYNCOPE144\", task.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", task.getDescription());\n \n         task.setName(\"issueSYNCOPE144_2\");\n         task.setDescription(\"issueSYNCOPE144 Description_2\");\n \n-        response = taskService.create(task);\n+        response = taskService.create(TaskType.SCHEDULED, task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n         assertNotNull(task);\n         assertEquals(\"issueSYNCOPE144_2\", task.getName());\n@@ -176,7 +176,7 @@ public void issueSYNCOPE660() {\n         task.setDescription(\"issueSYNCOPE660 Description\");\n         task.setJobDelegate(taskJobDelegate.getKey());\n \n-        Response response = taskService.create(task);\n+        Response response = taskService.create(TaskType.SCHEDULED, task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n \n         jobs = taskService.listJobs();"},{"sha":"d928e3c05869f0aabe6b9d69ec0bbccc434b300f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SwaggerITCase.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b0b0e3294dd893d44845295f6a0f570d33fcc607/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSwaggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b0b0e3294dd893d44845295f6a0f570d33fcc607/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSwaggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSwaggerITCase.java?ref=b0b0e3294dd893d44845295f6a0f570d33fcc607","patch":"@@ -1,64 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n-\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.Test;\n-\n-public class SwaggerITCase extends AbstractITCase {\n-\n-    @Test\n-    public void swagger() throws IOException {\n-        WebClient webClient = WebClient.create(ADDRESS + \"/swagger.json\").accept(MediaType.APPLICATION_JSON_TYPE);\n-        Response response = webClient.get();\n-        assumeTrue(response.getStatus() == 200);\n-\n-        JsonNode tree = new ObjectMapper().readTree((InputStream) response.getEntity());\n-        assertNotNull(tree);\n-\n-        JsonNode info = tree.get(\"info\");\n-        assertEquals(\"Apache Syncope\", info.get(\"title\").asText());\n-\n-        assertEquals(\"/syncope/rest\", tree.get(\"basePath\").asText());\n-\n-        JsonNode tags = tree.get(\"tags\");\n-        assertNotNull(tags);\n-        assertTrue(tags.isContainerNode());\n-\n-        JsonNode paths = tree.get(\"paths\");\n-        assertNotNull(paths);\n-        assertTrue(paths.isContainerNode());\n-\n-        JsonNode definitions = tree.get(\"definitions\");\n-        assertNotNull(definitions);\n-        assertTrue(definitions.isContainerNode());\n-    }\n-}"},{"sha":"f962361327b1c1d167022736401ef9255d2389f9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -73,6 +73,7 @@\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n@@ -276,7 +277,7 @@ public void create() {\n         assertFalse(tasks.getResult().isEmpty());\n \n         String maxKey = tasks.getResult().iterator().next().getKey();\n-        PropagationTaskTO taskTO = taskService.read(maxKey, true);\n+        PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, maxKey, true);\n \n         assertNotNull(taskTO);\n         int maxTaskExecutions = taskTO.getExecutions().size();\n@@ -324,7 +325,7 @@ public void create() {\n         assertEquals(newMaxKey, maxKey);\n \n         // get last task\n-        taskTO = taskService.read(newMaxKey, true);\n+        taskTO = taskService.read(TaskType.PROPAGATION, newMaxKey, true);\n \n         assertNotNull(taskTO);\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n@@ -680,7 +681,7 @@ public void verifyTaskRegistration() {\n         // all update executions have to be registered\n         newMaxKey = tasks.getResult().iterator().next().getKey();\n \n-        PropagationTaskTO taskTO = taskService.read(newMaxKey, true);\n+        PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, newMaxKey, true);\n \n         assertNotNull(taskTO);\n         assertEquals(1, taskTO.getExecutions().size());\n@@ -950,7 +951,7 @@ public void customPolicyRules() {\n         AccountPolicyTO accountPolicy = new AccountPolicyTO();\n         accountPolicy.setDescription(\"Account Policy with custom rules\");\n         accountPolicy.getRules().add(implementationTO.getKey());\n-        accountPolicy = createPolicy(accountPolicy);\n+        accountPolicy = createPolicy(PolicyType.ACCOUNT, accountPolicy);\n         assertNotNull(accountPolicy);\n \n         implementationTO = new ImplementationTO();\n@@ -964,7 +965,7 @@ public void customPolicyRules() {\n         PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n         passwordPolicy.setDescription(\"Password Policy with custom rules\");\n         passwordPolicy.getRules().add(implementationTO.getKey());\n-        passwordPolicy = createPolicy(passwordPolicy);\n+        passwordPolicy = createPolicy(PolicyType.PASSWORD, passwordPolicy);\n         assertNotNull(passwordPolicy);\n \n         RealmTO realm = realmService.list(\"/even/two\").get(0);\n@@ -1002,8 +1003,8 @@ public void customPolicyRules() {\n             realm.setPasswordPolicy(oldPasswordPolicy);\n             realmService.update(realm);\n \n-            policyService.delete(passwordPolicy.getKey());\n-            policyService.delete(accountPolicy.getKey());\n+            policyService.delete(PolicyType.PASSWORD, passwordPolicy.getKey());\n+            policyService.delete(PolicyType.ACCOUNT, accountPolicy.getKey());\n         }\n     }\n "},{"sha":"8ff08a0b8dee4876d58c23ffea9942447c8ebace","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb1cd3ff22d099c3c4978f56d104433f5bc23f31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=eb1cd3ff22d099c3c4978f56d104433f5bc23f31","patch":"@@ -71,6 +71,7 @@\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n@@ -1228,7 +1229,7 @@ public void issueSYNCOPE626() {\n         passwordPolicy.setDescription(\"Password Policy for SYNCOPE-626\");\n         passwordPolicy.getRules().add(rule.getKey());\n \n-        passwordPolicy = createPolicy(passwordPolicy);\n+        passwordPolicy = createPolicy(PolicyType.PASSWORD, passwordPolicy);\n         assertNotNull(passwordPolicy);\n \n         RealmTO realm = realmService.list(\"/even/two\").get(0);\n@@ -1255,7 +1256,7 @@ public void issueSYNCOPE626() {\n             realm.setPasswordPolicy(oldPasswordPolicy);\n             realmService.update(realm);\n \n-            policyService.delete(passwordPolicy.getKey());\n+            policyService.delete(PolicyType.PASSWORD, passwordPolicy.getKey());\n         }\n \n     }"}]}