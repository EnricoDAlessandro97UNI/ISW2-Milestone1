{"sha":"de7ac709b4505a541370e56684cf94f70537d125","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRlN2FjNzA5YjQ1MDVhNTQxMzcwZTU2Njg0Y2Y5NGY3MDUzN2QxMjU=","commit":{"author":{"name":"René Mulder","email":"rene@apache.org","date":"2012-05-01T16:39:57Z"},"committer":{"name":"René Mulder","email":"rene@apache.org","date":"2012-05-01T16:39:57Z"},"message":"sonar - fix unconfirmed casts\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1332749 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d15943fc6a231713320ff5f4f0088a28ca1a893e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d15943fc6a231713320ff5f4f0088a28ca1a893e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/de7ac709b4505a541370e56684cf94f70537d125","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/de7ac709b4505a541370e56684cf94f70537d125","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/de7ac709b4505a541370e56684cf94f70537d125","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/de7ac709b4505a541370e56684cf94f70537d125/comments","author":null,"committer":null,"parents":[{"sha":"feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff"}],"stats":{"total":38,"additions":27,"deletions":11},"files":[{"sha":"121ca7cbd1751eadb4db13c90debd45fb9f37f4b","filename":"console/src/main/java/org/apache/syncope/console/commons/PreferenceManager.java","status":"modified","additions":27,"deletions":11,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de7ac709b4505a541370e56684cf94f70537d125/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de7ac709b4505a541370e56684cf94f70537d125/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java?ref=de7ac709b4505a541370e56684cf94f70537d125","patch":"@@ -45,14 +45,10 @@ public class PreferenceManager {\n      * Logger.\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(PreferenceManager.class);\n-\n     private static final int ONE_YEAR_TIME = 60 * 60 * 24 * 365;\n-\n     private static final TypeReference MAP_TYPE_REF = new TypeReference<Map<String, String>>() {\n     };\n-\n-    private static final List<Integer> PAGINATOR_CHOICES = Arrays.asList(new Integer[] { 10, 25, 50 });\n-\n+    private static final List<Integer> PAGINATOR_CHOICES = Arrays.asList(new Integer[]{10, 25, 50});\n     @Autowired\n     private ObjectMapper mapper;\n \n@@ -91,8 +87,10 @@ private String setPrefs(final Map<String, String> prefs) throws IOException {\n     public String get(final Request request, final String key) {\n         String result = null;\n \n-        Cookie prefCookie = ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n-\n+        Cookie prefCookie = null;\n+        if (request instanceof WebRequest) {\n+            prefCookie = ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n+        }\n         if (prefCookie != null) {\n \n             final Map<String, String> prefs = getPrefs(new String(Base64.decodeBase64(prefCookie.getValue().getBytes())));\n@@ -136,9 +134,20 @@ public List<String> getList(final Request request, final String key) {\n         return result;\n     }\n \n+    /**\n+     * Get the existing preference from the cookie (if present).\n+     * Write the preferences to a cookie.\n+     * \n+     * @param request\n+     * @param response\n+     * @param prefs \n+     */\n     public void set(final Request request, final Response response, final Map<String, List<String>> prefs) {\n \n-        Cookie prefCookie = ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n+        Cookie prefCookie = null;\n+        if (request instanceof WebRequest) {\n+            prefCookie = ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n+        }\n \n         final Map<String, String> current = new HashMap<String, String>();\n \n@@ -160,12 +169,17 @@ public void set(final Request request, final Response response, final Map<String\n         }\n \n         prefCookie.setMaxAge(ONE_YEAR_TIME);\n-        ((WebResponse) response).addCookie(prefCookie);\n+        if (response instanceof WebResponse) {\n+            ((WebResponse) response).addCookie(prefCookie);\n+        }\n     }\n \n     public void set(final Request request, final Response response, final String key, final String value) {\n \n-        Cookie prefCookie = ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n+        Cookie prefCookie = null;\n+        if (request instanceof WebRequest) {\n+            prefCookie = ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n+        }\n \n         final Map<String, String> prefs = new HashMap<String, String>();\n \n@@ -185,7 +199,9 @@ public void set(final Request request, final Response response, final String key\n         }\n \n         prefCookie.setMaxAge(ONE_YEAR_TIME);\n-        ((WebResponse) response).addCookie(prefCookie);\n+        if (response instanceof WebResponse) {\n+            ((WebResponse) response).addCookie(prefCookie);\n+        }\n     }\n \n     public void setList(final Request request, final Response response, final String key, final List<String> values) {"}]}