{"sha":"72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcyZmMzZWNkMGM1Yjk2OWVjYWQ3OWM3MDMzOTdhZTFlYTk0ZjUxYmQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-16T11:04:52Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-16T11:04:52Z"},"message":"[SYNCOPE-300] Now using FIQL for user and role search features\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1551172 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a08998a2d23ed06bd49af26b75130c73a173bd11","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a08998a2d23ed06bd49af26b75130c73a173bd11"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"db01dd93e91964bdcc54954c25b38509a320aef1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/db01dd93e91964bdcc54954c25b38509a320aef1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/db01dd93e91964bdcc54954c25b38509a320aef1"},{"sha":"3b3b50ed18ca7bcaaf15bf86dad03e252ac13933","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3b3b50ed18ca7bcaaf15bf86dad03e252ac13933","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3b3b50ed18ca7bcaaf15bf86dad03e252ac13933"}],"stats":{"total":5203,"additions":2769,"deletions":2434},"files":[{"sha":"3cd8a1c5bcb88b627454c043a465cddc1812fbb6","filename":"client/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -53,10 +53,6 @@ under the License.\n       <artifactId>javax.ws.rs-api</artifactId>\n     </dependency>\n \n-    <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n-    </dependency>\n     <dependency>\n       <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-rs-client</artifactId>"},{"sha":"d57d3a3ceaab84be198bfe3bef0a668a056b0348","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClient.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.client;\n \n+import org.apache.syncope.common.search.SyncopeFiqlSearchConditionBuilder;\n+import java.util.Map;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n@@ -54,6 +56,25 @@ public SyncopeClient(final MediaType mediaType, final RestClientFactoryBean rest\n         this.password = password;\n     }\n \n+    /**\n+     * Returns a new instance of <tt>SyncopeFiqlSearchConditionBuilder</tt>, for assisted building of FIQL queries.\n+     *\n+     * @return default instance of <tt>SyncopeFiqlSearchConditionBuilder</tt>\n+     */\n+    public static SyncopeFiqlSearchConditionBuilder getSearchConditionBuilder() {\n+        return new SyncopeFiqlSearchConditionBuilder();\n+    }\n+\n+    /**\n+     * Returns a new instance of <tt>SyncopeFiqlSearchConditionBuilder</tt>, for assisted building of FIQL queries.\n+     *\n+     * @param properties additional properties (date format, timezone support, etc.)\n+     * @return default instance of <tt>SyncopeFiqlSearchConditionBuilder</tt>\n+     */\n+    public static SyncopeFiqlSearchConditionBuilder getSearchConditionBuilder(final Map<String, String> properties) {\n+        return new SyncopeFiqlSearchConditionBuilder(properties);\n+    }\n+\n     /**\n      * Creates an instance of the given service class, with configured content type and authentication.\n      *"},{"sha":"984afa7d33713ff004ee9e0d305c8c8a67273b38","filename":"client/src/main/java/org/apache/syncope/client/rest/RestClientExceptionMapper.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -30,8 +30,8 @@\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n import org.apache.syncope.common.types.ClientExceptionType;\r\n import org.apache.syncope.common.types.RESTHeaders;\r\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\r\n-import org.apache.syncope.common.validation.SyncopeClientException;\r\n+import org.apache.syncope.common.SyncopeClientCompositeException;\r\n+import org.apache.syncope.common.SyncopeClientException;\r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n \r"},{"sha":"bfcabe2ee42857f1698eb256f087203c5bf801cf","filename":"common/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fpom.xml?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -50,6 +50,10 @@ under the License.\n       <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-extension-search</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-rs-service-description</artifactId>"},{"sha":"6d2e0d6a8a267d609119f07f22fe41312defa60e","filename":"common/src/main/java/org/apache/syncope/common/AbstractBaseBean.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -19,11 +19,18 @@\n package org.apache.syncope.common;\r\n \r\n import java.io.Serializable;\r\n+import javax.xml.bind.annotation.XmlSeeAlso;\r\n+import javax.xml.bind.annotation.XmlType;\r\n import org.apache.commons.lang3.builder.EqualsBuilder;\r\n import org.apache.commons.lang3.builder.HashCodeBuilder;\r\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\r\n import org.apache.commons.lang3.builder.ToStringStyle;\r\n+import org.apache.syncope.common.to.AbstractTaskTO;\r\n+import org.apache.syncope.common.to.ReportTO;\r\n \r\n+@XmlType\r\n+// Reporting here only classes used via PagedResult\r\n+@XmlSeeAlso({ AbstractTaskTO.class, ReportTO.class })\r\n public abstract class AbstractBaseBean implements Serializable {\r\n \r\n     private static final long serialVersionUID = 3119542005279892164L;\r"},{"sha":"bb31a3bbbeaf488020782f5899ad68024d96acf8","filename":"common/src/main/java/org/apache/syncope/common/SyncopeClientCompositeException.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientCompositeException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientCompositeException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientCompositeException.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.validation;\r\n+package org.apache.syncope.common;\r\n \r\n import java.util.HashSet;\r\n import java.util.Iterator;\r","previous_filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientCompositeException.java"},{"sha":"cc1ab6103135ef1ef260590c0371f56389459db7","filename":"common/src/main/java/org/apache/syncope/common/SyncopeClientException.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientException.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.validation;\r\n+package org.apache.syncope.common;\r\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r","previous_filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientException.java"},{"sha":"d63cc7cb91d57edd665ee5d4f3d0c66169f2505b","filename":"common/src/main/java/org/apache/syncope/common/report/RoleReportletConf.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FRoleReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FRoleReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FRoleReportletConf.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -28,7 +28,6 @@\n import javax.xml.bind.annotation.XmlType;\n \n import org.apache.syncope.common.annotation.FormAttributeField;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.types.IntMappingType;\n \n @XmlRootElement(name = \"roleReportletConf\")\n@@ -51,7 +50,7 @@ public enum Feature {\n \n     }\n \n-    private NodeCond matchingCond;\n+    private String matchingCond;\n \n     @FormAttributeField(schema = IntMappingType.RoleSchema)\n     private List<String> attrs;\n@@ -105,11 +104,11 @@ public List<Feature> getFeatures() {\n         return features;\n     }\n \n-    public NodeCond getMatchingCond() {\n+    public String getMatchingCond() {\n         return matchingCond;\n     }\n \n-    public void setMatchingCond(final NodeCond matchingCond) {\n+    public void setMatchingCond(final String matchingCond) {\n         this.matchingCond = matchingCond;\n     }\n }"},{"sha":"1f8b7a21633f129ba8c2b8ab588e7cb1162daac9","filename":"common/src/main/java/org/apache/syncope/common/report/UserReportletConf.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -29,7 +29,6 @@\n import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.syncope.common.annotation.FormAttributeField;\r\n-import org.apache.syncope.common.search.NodeCond;\r\n import org.apache.syncope.common.types.IntMappingType;\r\n \r\n @XmlRootElement(name = \"userReportletConf\")\r\n@@ -56,7 +55,7 @@ public enum Feature {\n \r\n     private static final long serialVersionUID = 6602717600064602764L;\r\n \r\n-    private NodeCond matchingCond;\r\n+    private String matchingCond;\r\n \r\n     @FormAttributeField(schema = IntMappingType.UserSchema)\r\n     private List<String> attrs = new ArrayList<String>();\r\n@@ -105,11 +104,11 @@ public List<Feature> getFeatures() {\n         return features;\r\n     }\r\n \r\n-    public NodeCond getMatchingCond() {\r\n+    public String getMatchingCond() {\r\n         return matchingCond;\r\n     }\r\n \r\n-    public void setMatchingCond(final NodeCond matchingCond) {\r\n+    public void setMatchingCond(final String matchingCond) {\r\n         this.matchingCond = matchingCond;\r\n     }\r\n }\r"},{"sha":"13fcf8ff176ae63575d57cd919ef182834c056be","filename":"common/src/main/java/org/apache/syncope/common/reqres/BulkAction.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FBulkAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FBulkAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FBulkAction.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.to;\n+package org.apache.syncope.common.reqres;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;","previous_filename":"common/src/main/java/org/apache/syncope/common/to/BulkAction.java"},{"sha":"0a9c9ca2b5fe13fa09fe2f28a9c1499fb60053e9","filename":"common/src/main/java/org/apache/syncope/common/reqres/BulkActionResult.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FBulkActionResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FBulkActionResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FBulkActionResult.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.to;\n+package org.apache.syncope.common.reqres;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n@@ -31,9 +31,9 @@\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.AbstractBaseBean;\n \n-@XmlRootElement(name = \"bulkActionRes\")\n+@XmlRootElement(name = \"bulkActionResult\")\n @XmlType\n-public class BulkActionRes extends AbstractBaseBean {\n+public class BulkActionResult extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 2868894178821778133L;\n \n@@ -48,10 +48,10 @@ public enum Status {\n \n     private final List<Result> results = new ArrayList<Result>();\n \n-    @XmlElementWrapper(name = \"results\")\n-    @XmlElement(name = \"result\")\n-    @JsonProperty(\"results\")\n-    public List<Result> getResults() {\n+    @XmlElementWrapper(name = \"result\")\n+    @XmlElement(name = \"item\")\n+    @JsonProperty(\"result\")\n+    public List<Result> getResult() {\n         return results;\n     }\n ","previous_filename":"common/src/main/java/org/apache/syncope/common/to/BulkActionRes.java"},{"sha":"974f0ae4b4693cb46c5bcba9592932f34b9dea45","filename":"common/src/main/java/org/apache/syncope/common/reqres/BulkAssociationAction.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FBulkAssociationAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FBulkAssociationAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FBulkAssociationAction.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.to;\n+package org.apache.syncope.common.reqres;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;","previous_filename":"common/src/main/java/org/apache/syncope/common/to/BulkAssociationAction.java"},{"sha":"fd177cbcfcbf3d8e907da92f1e3f2893570a3a35","filename":"common/src/main/java/org/apache/syncope/common/reqres/PagedResult.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FPagedResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FPagedResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FPagedResult.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.reqres;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"pagedResult\")\n+@XmlType\n+public class PagedResult<T extends AbstractBaseBean> extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 3472875885259250934L;\n+\n+    private URI prev;\n+\n+    private URI next;\n+\n+    private final List<T> result = new ArrayList<T>();\n+\n+    private int page;\n+\n+    private int size;\n+\n+    private int totalCount;\n+\n+    public URI getPrev() {\n+        return prev;\n+    }\n+\n+    public void setPrev(final URI prev) {\n+        this.prev = prev;\n+    }\n+\n+    public URI getNext() {\n+        return next;\n+    }\n+\n+    public void setNext(final URI next) {\n+        this.next = next;\n+    }\n+\n+    @XmlElementWrapper(name = \"result\")\n+    @XmlElement(name = \"item\")\n+    @JsonProperty(\"result\")\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+    public List<T> getResult() {\n+        return result;\n+    }\n+\n+    public int getPage() {\n+        return page;\n+    }\n+\n+    public void setPage(final int page) {\n+        this.page = page;\n+    }\n+\n+    public int getSize() {\n+        return size;\n+    }\n+\n+    public void setSize(final int size) {\n+        this.size = size;\n+    }\n+\n+    public int getTotalCount() {\n+        return totalCount;\n+    }\n+\n+    public void setTotalCount(final int totalCount) {\n+        this.totalCount = totalCount;\n+    }\n+\n+}"},{"sha":"b17b264f85e354279bddbd3466d09a06bdbc83da","filename":"common/src/main/java/org/apache/syncope/common/search/SearchableFields.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchableFields.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchableFields.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchableFields.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.search;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n+\n+public class SearchableFields {\n+\n+    protected static final String[] ATTRIBUTES_NOTINCLUDED = {\n+        \"attrs\", \"derAttrs\", \"virAttrs\",\n+        \"serialVersionUID\", \"memberships\", \"entitlements\", \"resources\", \"password\",\n+        \"propagationTOs\", \"propagationStatusMap\"\n+    };\n+\n+    public static final List<String> get(final AttributableType attributableType) {\n+        return get(attributableType == AttributableType.USER\n+                ? UserTO.class\n+                : RoleTO.class);\n+    }\n+\n+    public static final List<String> get(final Class<? extends AbstractAttributableTO> attributableRef) {\n+        final List<String> fieldNames = new ArrayList<String>();\n+\n+        // loop on class and all superclasses searching for field\n+        Class<?> clazz = attributableRef;\n+        while (clazz != null && clazz != Object.class) {\n+            for (Field field : clazz.getDeclaredFields()) {\n+                if (!ArrayUtils.contains(ATTRIBUTES_NOTINCLUDED, field.getName())) {\n+                    fieldNames.add(field.getName());\n+                }\n+            }\n+            clazz = clazz.getSuperclass();\n+        }\n+\n+        Collections.reverse(fieldNames);\n+        return fieldNames;\n+\n+    }\n+\n+    private SearchableFields() {\n+        // empty constructor for static utility class\n+    }\n+}"},{"sha":"35572c61dfd2b13e5e5f7cac09d680b80433e4a7","filename":"common/src/main/java/org/apache/syncope/common/search/SpecialAttr.java","status":"renamed","additions":50,"deletions":27,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSpecialAttr.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -1,27 +1,50 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.search;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-\r\n-public interface SearchCond {\r\n-\r\n-    @JsonIgnore\r\n-    boolean isValid();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.search;\n+\n+public enum SpecialAttr {\n+\n+    NULL(\"$null\"),\n+    RESOURCES(\"$resources\"),\n+    ROLES(\"$roles\"),\n+    ENTITLEMENTS(\"$entitlements\");\n+\n+    private final String literal;\n+\n+    SpecialAttr(final String literal) {\n+        this.literal = literal;\n+    }\n+\n+    public static SpecialAttr fromString(final String value) {\n+        SpecialAttr result = null;\n+        for (SpecialAttr specialAttr : values()) {\n+            if (specialAttr.literal.equals(value)) {\n+                result = specialAttr;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return literal;\n+    }\n+\n+}","previous_filename":"common/src/main/java/org/apache/syncope/common/search/SearchCond.java"},{"sha":"4d5b5fc23f049e9582ac7643cac26c0abd2a9ab6","filename":"common/src/main/java/org/apache/syncope/common/search/SyncopeFiqlSearchConditionBuilder.java","status":"added","additions":158,"deletions":0,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeFiqlSearchConditionBuilder.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.search;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.cxf.jaxrs.ext.search.SearchUtils;\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+import org.apache.cxf.jaxrs.ext.search.client.FiqlSearchConditionBuilder;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n+\n+/**\n+ * Extends <tt>FiqlSearchConditionBuilder</tt> by providing some additional facilities for searching in Syncope.\n+ */\n+public class SyncopeFiqlSearchConditionBuilder extends FiqlSearchConditionBuilder {\n+\n+    public static final Map<String, String> CONTEXTUAL_PROPERTIES;\n+\n+    static {\n+        CONTEXTUAL_PROPERTIES = new HashMap<String, String>();\n+        CONTEXTUAL_PROPERTIES.put(SearchUtils.LAX_PROPERTY_MATCH, \"true\");\n+    }\n+\n+    public SyncopeFiqlSearchConditionBuilder() {\n+        super();\n+    }\n+\n+    public SyncopeFiqlSearchConditionBuilder(final Map<String, String> properties) {\n+        super(properties);\n+    }\n+\n+    @Override\n+    protected Builder newBuilderInstance() {\n+        return new Builder(properties);\n+    }\n+\n+    @Override\n+    public SyncopeProperty is(final String property) {\n+        return newBuilderInstance().is(property);\n+    }\n+\n+    public CompleteCondition isNull(final String property) {\n+        return newBuilderInstance().is(property).nullValue();\n+    }\n+\n+    public CompleteCondition isNotNull(final String property) {\n+        return newBuilderInstance().is(property).notNullValue();\n+    }\n+\n+    public CompleteCondition hasRoles(final Long role, final Long... moreRoles) {\n+        return newBuilderInstance().is(SpecialAttr.ROLES.toString()).hasRoles(role, moreRoles);\n+    }\n+\n+    public CompleteCondition hasNotRoles(final Long role, final Long... moreRoles) {\n+        return newBuilderInstance().is(SpecialAttr.ROLES.toString()).hasNotRoles(role, moreRoles);\n+    }\n+\n+    public CompleteCondition hasResources(final String resource, final String... moreResources) {\n+        return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasResources(resource, moreResources);\n+    }\n+\n+    public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n+        return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasNotResources(resource, moreResources);\n+    }\n+\n+    public CompleteCondition hasEntitlements(final String entitlement, final String... moreEntitlements) {\n+        return newBuilderInstance().is(SpecialAttr.ENTITLEMENTS.toString()).\n+                hasEntitlements(entitlement, moreEntitlements);\n+    }\n+\n+    public CompleteCondition hasNotEntitlements(final String entitlement, final String... moreEntitlements) {\n+        return newBuilderInstance().is(SpecialAttr.ENTITLEMENTS.toString()).\n+                hasNotEntitlements(entitlement, moreEntitlements);\n+    }\n+\n+    protected static class Builder extends FiqlSearchConditionBuilder.Builder\n+            implements SyncopeProperty, CompleteCondition {\n+\n+        public Builder(final Map<String, String> properties) {\n+            super(properties);\n+        }\n+\n+        public Builder(final Builder parent) {\n+            super(parent);\n+        }\n+\n+        @Override\n+        public SyncopeProperty is(final String property) {\n+            Builder b = new Builder(this);\n+            b.result = property;\n+            return b;\n+        }\n+\n+        @Override\n+        public CompleteCondition nullValue() {\n+            return condition(FiqlParser.EQ, SpecialAttr.NULL);\n+        }\n+\n+        @Override\n+        public CompleteCondition notNullValue() {\n+            return condition(FiqlParser.NEQ, SpecialAttr.NULL);\n+        }\n+\n+        @Override\n+        public CompleteCondition hasRoles(final Long role, final Long... moreRoles) {\n+            this.result = SpecialAttr.ROLES.toString();\n+            return condition(FiqlParser.EQ, role, (Object[]) moreRoles);\n+        }\n+\n+        @Override\n+        public CompleteCondition hasNotRoles(final Long role, final Long... moreRoles) {\n+            this.result = SpecialAttr.ROLES.toString();\n+            return condition(FiqlParser.NEQ, role, (Object[]) moreRoles);\n+        }\n+\n+        @Override\n+        public CompleteCondition hasResources(final String resource, final String... moreResources) {\n+            this.result = SpecialAttr.RESOURCES.toString();\n+            return condition(FiqlParser.EQ, resource, (Object[]) moreResources);\n+        }\n+\n+        @Override\n+        public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n+            this.result = SpecialAttr.RESOURCES.toString();\n+            return condition(FiqlParser.NEQ, resource, (Object[]) moreResources);\n+        }\n+\n+        @Override\n+        public CompleteCondition hasEntitlements(final String entitlement, final String... moreEntitlements) {\n+            this.result = SpecialAttr.ENTITLEMENTS.toString();\n+            return condition(FiqlParser.EQ, entitlement, (Object[]) moreEntitlements);\n+        }\n+\n+        @Override\n+        public CompleteCondition hasNotEntitlements(final String entitlement, final String... moreEntitlements) {\n+            this.result = SpecialAttr.ENTITLEMENTS.toString();\n+            return condition(FiqlParser.NEQ, entitlement, (Object[]) moreEntitlements);\n+        }\n+\n+    }\n+\n+}"},{"sha":"7e9bcd7525d0990566afb62339007a894cdce943","filename":"common/src/main/java/org/apache/syncope/common/search/SyncopeProperty.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeProperty.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.search;\n+\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+import org.apache.cxf.jaxrs.ext.search.client.Property;\n+\n+/**\n+ * Extension of fluent interface, for {@link SyncopeFiqlSearchConditionBuilder}.\n+ */\n+public interface SyncopeProperty extends Property {\n+\n+    CompleteCondition nullValue();\n+\n+    CompleteCondition notNullValue();\n+\n+    CompleteCondition hasRoles(Long role, Long... moreRoles);\n+\n+    CompleteCondition hasNotRoles(Long role, Long... moreRoles);\n+\n+    CompleteCondition hasResources(String resource, String... moreResources);\n+\n+    CompleteCondition hasNotResources(String resource, String... moreResources);\n+\n+    CompleteCondition hasEntitlements(String entitlement, String... moreEntitlements);\n+\n+    CompleteCondition hasNotEntitlements(String entitlement, String... moreEntitlements);\n+\n+}"},{"sha":"15567bb7530302d380418cc544eb011e6f83d52b","filename":"common/src/main/java/org/apache/syncope/common/services/ConfigurationService.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -30,11 +30,11 @@\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n import org.apache.syncope.common.to.ConfigurationTO;\r\n-import org.apache.syncope.common.to.MailTemplateTO;\r\n-import org.apache.syncope.common.to.ValidatorTO;\r\n+import org.apache.syncope.common.wrap.MailTemplate;\r\n+import org.apache.syncope.common.wrap.Validator;\r\n \r\n @Path(\"configurations\")\r\n-public interface ConfigurationService {\r\n+public interface ConfigurationService extends JAXRSService {\r\n \r\n     /**\r\n      * Creates a new configuration element.\r\n@@ -68,15 +68,15 @@ public interface ConfigurationService {\n     @GET\r\n     @Path(\"mailTemplates\")\r\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<MailTemplateTO> getMailTemplates();\r\n+    List<MailTemplate> getMailTemplates();\r\n \r\n     /**\r\n      * @return Returns a list of known validator names.\r\n      */\r\n     @GET\r\n     @Path(\"validators\")\r\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<ValidatorTO> getValidators();\r\n+    List<Validator> getValidators();\r\n \r\n     /**\r\n      * @return list of all configuration elements.\r"},{"sha":"39a78ebb229591b94f2c1ed03a6c907380338a89","filename":"common/src/main/java/org/apache/syncope/common/services/ConnectorService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,6 +18,8 @@\n  */\r\n package org.apache.syncope.common.services;\r\n \r\n+import org.apache.syncope.common.reqres.BulkAction;\r\n+import org.apache.syncope.common.reqres.BulkActionResult;\r\n import java.util.List;\r\n import javax.ws.rs.Consumes;\r\n import javax.ws.rs.DELETE;\r\n@@ -31,8 +33,6 @@\n import javax.ws.rs.QueryParam;\r\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.common.to.BulkAction;\r\n-import org.apache.syncope.common.to.BulkActionRes;\r\n import org.apache.syncope.common.to.ConnBundleTO;\r\n import org.apache.syncope.common.to.ConnIdObjectClassTO;\r\n import org.apache.syncope.common.to.ConnInstanceTO;\r\n@@ -42,7 +42,7 @@\n @Path(\"connectors\")\r\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-public interface ConnectorService {\r\n+public interface ConnectorService extends JAXRSService {\r\n \r\n     /**\r\n      * Create a new connector instance.\r\n@@ -149,5 +149,5 @@ List<ConnIdObjectClassTO> getSupportedObjectClasses(@PathParam(\"connInstanceId\")\n \r\n     @POST\r\n     @Path(\"bulk\")\r\n-    BulkActionRes bulk(BulkAction bulkAction);\r\n+    BulkActionResult bulk(BulkAction bulkAction);\r\n }\r"},{"sha":"6d7c66275615c9e00c9932b487bdf02eccc59bf5","filename":"common/src/main/java/org/apache/syncope/common/services/EntitlementService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -26,12 +26,12 @@\n import javax.ws.rs.Produces;\r\n import javax.ws.rs.core.MediaType;\r\n \r\n-import org.apache.syncope.common.to.EntitlementTO;\r\n+import org.apache.syncope.common.wrap.EntitlementTO;\r\n \r\n @Path(\"entitlements\")\r\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-public interface EntitlementService {\r\n+public interface EntitlementService extends JAXRSService {\r\n \r\n     /**\r\n      * @return Returns a collection of all known entitlements.\r"},{"sha":"34a3f1ce41f8257ee452420574287f11b5a09550","filename":"common/src/main/java/org/apache/syncope/common/services/JAXRSService.java","status":"renamed","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FJAXRSService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,15 +18,18 @@\n  */\n package org.apache.syncope.common.services;\n \n-public class InvalidSearchConditionException extends Exception {\n+public interface JAXRSService {\n \n-    private static final long serialVersionUID = 1785286543933086849L;\n+    static final String PARAM_PAGE = \"page\";\n \n-    public InvalidSearchConditionException() {\n-        super();\n-    }\n+    static final String DEFAULT_PARAM_PAGE = \"1\";\n+\n+    static final int DEFAULT_PARAM_PAGE_VALUE = Integer.valueOf(DEFAULT_PARAM_PAGE);\n+\n+    static final String PARAM_SIZE = \"size\";\n+\n+    static final String DEFAULT_PARAM_SIZE = \"25\";\n+\n+    static final int DEFAULT_PARAM_SIZE_VALUE = Integer.valueOf(DEFAULT_PARAM_SIZE);\n \n-    public InvalidSearchConditionException(String string) {\n-        super(string);\n-    }\n }","previous_filename":"common/src/main/java/org/apache/syncope/common/services/InvalidSearchConditionException.java"},{"sha":"71f3ea348283305de16ae5374f5aae23262c8e8e","filename":"common/src/main/java/org/apache/syncope/common/services/LoggerService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -34,9 +34,9 @@\n import org.apache.syncope.common.types.LoggerType;\r\n \r\n @Path(\"logger\")\r\n-@Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\r\n-@Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\r\n-public interface LoggerService {\r\n+@Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n+@Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n+public interface LoggerService extends JAXRSService {\r\n \r\n     /**\r\n      * @param type LoggerType to be selected.\r"},{"sha":"4a16416fc51231ab5a33916261b4d21ff97ce4af","filename":"common/src/main/java/org/apache/syncope/common/services/NotificationService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -35,7 +35,7 @@\n @Path(\"notifications\")\r\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-public interface NotificationService {\r\n+public interface NotificationService extends JAXRSService {\r\n \r\n     /**\r\n      * @param notificationTO Creates a new notification.\r"},{"sha":"50dbad40f2b731ea9c45e1af12dc9caf6f84192f","filename":"common/src/main/java/org/apache/syncope/common/services/PolicyService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -30,14 +30,14 @@\n import javax.ws.rs.Produces;\r\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n+import org.apache.syncope.common.wrap.CorrelationRuleClass;\r\n import org.apache.syncope.common.to.AbstractPolicyTO;\r\n import org.apache.syncope.common.types.PolicyType;\r\n \r\n @Path(\"policies\")\r\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-public interface PolicyService {\r\n+public interface PolicyService extends JAXRSService {\r\n \r\n     /**\r\n      * @param policyTO Policy to be created (needs to match type)\r\n@@ -95,5 +95,5 @@ public interface PolicyService {\n      */\r\n     @GET\r\n     @Path(\"syncCorrelationRuleClasses\")\r\n-    List<CorrelationRuleClassTO> getSyncCorrelationRuleClasses();\r\n+    List<CorrelationRuleClass> getSyncCorrelationRuleClasses();\r\n }\r"},{"sha":"30979e71e83e5c3b23af21e465243850c618c694","filename":"common/src/main/java/org/apache/syncope/common/services/ReportService.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,7 +18,7 @@\n  */\r\n package org.apache.syncope.common.services;\r\n \r\n-import org.apache.syncope.common.types.ReportletConfClasses;\r\n+import org.apache.syncope.common.reqres.PagedResult;\r\n import java.util.List;\r\n import javax.ws.rs.Consumes;\r\n import javax.ws.rs.DELETE;\r\n@@ -35,11 +35,12 @@\n import org.apache.syncope.common.to.ReportExecTO;\r\n import org.apache.syncope.common.to.ReportTO;\r\n import org.apache.syncope.common.types.ReportExecExportFormat;\r\n+import org.apache.syncope.common.wrap.ReportletConfClass;\r\n \r\n @Path(\"reports\")\r\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-public interface ReportService {\r\n+public interface ReportService extends JAXRSService {\r\n \r\n     /**\r\n      * @param reportTO Report to be created\r\n@@ -85,28 +86,22 @@ Response exportExecutionResult(@PathParam(\"executionId\") Long executionId,\n      */\r\n     @GET\r\n     @Path(\"reportletConfClasses\")\r\n-    ReportletConfClasses getReportletConfClasses();\r\n+    List<ReportletConfClass> getReportletConfClasses();\r\n \r\n     /**\r\n-     * @return Returns a list of all reports\r\n+     * @return Paged list of all existing reports\r\n      */\r\n     @GET\r\n-    List<ReportTO> list();\r\n-\r\n-    /**\r\n-     * @return Returns number of existing reports\r\n-     */\r\n-    @GET\r\n-    @Path(\"count\")\r\n-    int count();\r\n+    PagedResult<ReportTO> list();\r\n \r\n     /**\r\n      * @param page selected page in relation to size\r\n-     * @param size Number of items per page\r\n-     * @return Returns a list of reports according to pagination\r\n+     * @param size number of entries per page\r\n+     * @return Paged list of existing reports matching page/size conditions\r\n      */\r\n     @GET\r\n-    List<ReportTO> list(@QueryParam(\"page\") int page, @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n+    PagedResult<ReportTO> list(@QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\r\n \r\n     /**\r\n      * @param reportId ID of report to be read\r"},{"sha":"b40c030a72ab8ed65e8a9c008586025b4ce05c72","filename":"common/src/main/java/org/apache/syncope/common/services/ResourceService.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,6 +18,9 @@\n  */\r\n package org.apache.syncope.common.services;\r\n \r\n+import org.apache.syncope.common.reqres.BulkAssociationAction;\r\n+import org.apache.syncope.common.reqres.BulkAction;\r\n+import org.apache.syncope.common.reqres.BulkActionResult;\r\n import java.util.List;\r\n import javax.ws.rs.Consumes;\r\n import javax.ws.rs.DELETE;\r\n@@ -30,18 +33,15 @@\n import javax.ws.rs.Produces;\r\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.common.to.BulkAction;\r\n-import org.apache.syncope.common.to.BulkActionRes;\r\n-import org.apache.syncope.common.to.BulkAssociationAction;\r\n import org.apache.syncope.common.to.ConnObjectTO;\r\n-import org.apache.syncope.common.to.PropagationActionClassTO;\r\n+import org.apache.syncope.common.wrap.PropagationActionClass;\r\n import org.apache.syncope.common.to.ResourceTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n \r\n @Path(\"resources\")\r\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-public interface ResourceService {\r\n+public interface ResourceService extends JAXRSService {\r\n \r\n     /**\r\n      * @param resourceTO Resource to be checked\r\n@@ -81,7 +81,7 @@ ConnObjectTO getConnectorObject(@PathParam(\"resourceName\") String resourceName,\n      */\r\n     @GET\r\n     @Path(\"propagationActionsClasses\")\r\n-    List<PropagationActionClassTO> getPropagationActionsClasses();\r\n+    List<PropagationActionClass> getPropagationActionsClasses();\r\n \r\n     /**\r\n      * @return Returns list of all Resources\r\n@@ -114,10 +114,10 @@ ConnObjectTO getConnectorObject(@PathParam(\"resourceName\") String resourceName,\n \r\n     @POST\r\n     @Path(\"bulk\")\r\n-    BulkActionRes bulk(BulkAction bulkAction);\r\n+    BulkActionResult bulk(BulkAction bulkAction);\r\n \r\n     @POST\r\n     @Path(\"{resourceName}/bulkAssociation/{type}\")\r\n-    BulkActionRes bulkAssociation(@PathParam(\"resourceName\") String resourceName,\r\n+    BulkActionResult bulkAssociation(@PathParam(\"resourceName\") String resourceName,\r\n             BulkAssociationAction bulkAssociationAction, @PathParam(\"type\") AttributableType type);\r\n }\r"},{"sha":"149fbec6a31e4678c053c925dffa929a9ede2250","filename":"common/src/main/java/org/apache/syncope/common/services/RoleService.java","status":"modified","additions":25,"deletions":40,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,6 +18,7 @@\n  */\r\n package org.apache.syncope.common.services;\r\n \r\n+import org.apache.syncope.common.reqres.PagedResult;\r\n import java.util.List;\r\n import javax.ws.rs.Consumes;\r\n import javax.ws.rs.DELETE;\r\n@@ -31,16 +32,17 @@\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n \r\n-import org.apache.syncope.common.search.NodeCond;\r\n+import org.apache.cxf.jaxrs.model.wadl.Description;\r\n+\r\n import org.apache.syncope.common.mod.RoleMod;\r\n-import org.apache.syncope.common.to.ResourceNameTO;\r\n import org.apache.syncope.common.to.RoleTO;\r\n import org.apache.syncope.common.types.ResourceAssociationActionType;\r\n+import org.apache.syncope.common.wrap.ResourceName;\r\n \r\n @Path(\"roles\")\r\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-public interface RoleService {\r\n+public interface RoleService extends JAXRSService {\r\n \r\n     /**\r\n      * @param roleId ID of role to get children from\r\n@@ -50,13 +52,6 @@ public interface RoleService {\n     @Path(\"{roleId}/children\")\r\n     List<RoleTO> children(@PathParam(\"roleId\") Long roleId);\r\n \r\n-    /**\r\n-     * @return Returns number of known roles. (size of list)\r\n-     */\r\n-    @GET\r\n-    @Path(\"count\")\r\n-    int count();\r\n-\r\n     /**\r\n      * @param roleTO Role to be created\r\n      * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created role as well as the role itself\r\n@@ -75,19 +70,19 @@ public interface RoleService {\n     Response delete(@PathParam(\"roleId\") Long roleId);\r\n \r\n     /**\r\n-     * @return Returns list of all knwon roles\r\n+     * @return Paged list of all existing roles\r\n      */\r\n     @GET\r\n-    List<RoleTO> list();\r\n+    PagedResult<RoleTO> list();\r\n \r\n     /**\r\n-     * @param page Page of roles in relation to size parameter\r\n-     * @param size Number of roles to be displayed per page\r\n-     * @return Returns paginated list of roles\r\n+     * @param page result page number\r\n+     * @param size number of entries per page\r\n+     * @return Paged list of existing roles matching page/size conditions\r\n      */\r\n     @GET\r\n-    List<RoleTO> list(@QueryParam(\"page\") @DefaultValue(\"1\") int page,\r\n-            @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n+    PagedResult<RoleTO> list(@QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\r\n \r\n     /**\r\n      * @param roleId Id of role to get parent role from\r\n@@ -106,34 +101,24 @@ List<RoleTO> list(@QueryParam(\"page\") @DefaultValue(\"1\") int page,\n     RoleTO read(@PathParam(\"roleId\") Long roleId);\r\n \r\n     /**\r\n-     * @param searchCondition Filter condition for role list\r\n-     * @return Returns list of roles with matching filter conditions\r\n-     * @throws InvalidSearchConditionException if given search condition is not valid\r\n+     * @param fiql FIQL search expression\r\n+     * @return Paged list of roles matching the provided FIQL search condition\r\n      */\r\n-    @POST\r\n+    @GET\r\n     @Path(\"search\")\r\n-    List<RoleTO> search(NodeCond searchCondition) throws InvalidSearchConditionException;\r\n+    PagedResult<RoleTO> search(@Description(\"FIQL search expression\") @QueryParam(\"fiql\") String fiql);\r\n \r\n     /**\r\n-     * @param searchCondition Filter condition for role list\r\n-     * @param page Page of roles in relation to size parameter\r\n-     * @param size Number of roles to be displayed per page\r\n-     * @return Returns paginated list of roles with matching filter conditions\r\n-     * @throws InvalidSearchConditionException if given search condition is not valid\r\n+     * @param fiql FIQL search expression\r\n+     * @param page result page number\r\n+     * @param size number of entries per page\r\n+     * @return Paged list of roles matching the provided FIQL search condition\r\n      */\r\n-    @POST\r\n+    @GET\r\n     @Path(\"search\")\r\n-    List<RoleTO> search(NodeCond searchCondition, @QueryParam(\"page\") @DefaultValue(\"1\") int page,\r\n-            @QueryParam(\"size\") @DefaultValue(\"25\") int size) throws InvalidSearchConditionException;\r\n-\r\n-    /**\r\n-     * @param searchCondition Filter condition for role list\r\n-     * @return Returns number of roles matching provided filter conditions\r\n-     * @throws InvalidSearchConditionException if given search condition is not valid\r\n-     */\r\n-    @POST\r\n-    @Path(\"search/count\")\r\n-    int searchCount(NodeCond searchCondition) throws InvalidSearchConditionException;\r\n+    PagedResult<RoleTO> search(@Description(\"FIQL search expression\") @QueryParam(\"fiql\") String fiql,\r\n+            @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\r\n \r\n     /**\r\n      * This method is similar to {@link #read(Long)}, but uses different authentication handling to ensure that a user\r\n@@ -168,5 +153,5 @@ List<RoleTO> search(NodeCond searchCondition, @QueryParam(\"page\") @DefaultValue(\n     @POST\r\n     @Path(\"{roleId}/associate/{type}\")\r\n     Response associate(@PathParam(\"roleId\") Long roleId, @PathParam(\"type\") ResourceAssociationActionType type,\r\n-            List<ResourceNameTO> resourceNames);\r\n+            List<ResourceName> resourceNames);\r\n }\r"},{"sha":"6d8c37f996721ec22e47b29e6c362e8c3f6ec46d","filename":"common/src/main/java/org/apache/syncope/common/services/SchemaService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -36,7 +36,7 @@\n @Path(\"schemas/{kind}/{type}\")\r\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-public interface SchemaService {\r\n+public interface SchemaService extends JAXRSService {\r\n \r\n     /**\r\n      * @param <T> actual SchemaTO\r"},{"sha":"59b4ec490c07df6fa4ddc714cb258323893bc641","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":13,"deletions":19,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,6 +18,9 @@\n  */\r\n package org.apache.syncope.common.services;\r\n \r\n+import org.apache.syncope.common.reqres.PagedResult;\r\n+import org.apache.syncope.common.reqres.BulkAction;\r\n+import org.apache.syncope.common.reqres.BulkActionResult;\r\n import java.util.List;\r\n import javax.ws.rs.Consumes;\r\n \r\n@@ -33,12 +36,10 @@\n import javax.ws.rs.QueryParam;\r\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.common.to.BulkAction;\r\n-import org.apache.syncope.common.to.BulkActionRes;\r\n \r\n-import org.apache.syncope.common.to.JobClassTO;\r\n+import org.apache.syncope.common.wrap.JobClass;\r\n import org.apache.syncope.common.to.ReportExecTO;\r\n-import org.apache.syncope.common.to.SyncActionClassTO;\r\n+import org.apache.syncope.common.wrap.SyncActionClass;\r\n import org.apache.syncope.common.to.TaskExecTO;\r\n import org.apache.syncope.common.to.AbstractTaskTO;\r\n import org.apache.syncope.common.to.SchedTaskTO;\r\n@@ -47,15 +48,7 @@\n @Path(\"tasks\")\r\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-public interface TaskService {\r\n-\r\n-    /**\r\n-     * @param taskType filter for task count\r\n-     * @return Returns number of tasks with matching type\r\n-     */\r\n-    @GET\r\n-    @Path(\"count\")\r\n-    int count(@MatrixParam(\"type\") TaskType taskType);\r\n+public interface TaskService extends JAXRSService {\r\n \r\n     /**\r\n      * @param taskTO Task to be created\r\n@@ -93,22 +86,22 @@ public interface TaskService {\n      */\r\n     @GET\r\n     @Path(\"jobClasses\")\r\n-    List<JobClassTO> getJobClasses();\r\n+    List<JobClass> getJobClasses();\r\n \r\n     /**\r\n      * @return Returns list of SyncActionClasses\r\n      */\r\n     @GET\r\n     @Path(\"syncActionsClasses\")\r\n-    List<SyncActionClassTO> getSyncActionsClasses();\r\n+    List<SyncActionClass> getSyncActionsClasses();\r\n \r\n     /**\r\n      * @param taskType Type of tasks to be listed\r\n      * @param <T> type of taskTO\r\n      * @return Returns list of tasks with matching type\r\n      */\r\n     @GET\r\n-    <T extends AbstractTaskTO> List<T> list(@MatrixParam(\"type\") TaskType taskType);\r\n+    <T extends AbstractTaskTO> PagedResult<T> list(@MatrixParam(\"type\") TaskType taskType);\r\n \r\n     /**\r\n      * @param taskType Type of tasks to be listed\r\n@@ -118,8 +111,9 @@ public interface TaskService {\n      * @return Returns paginated list of task with matching type\r\n      */\r\n     @GET\r\n-    <T extends AbstractTaskTO> List<T> list(@MatrixParam(\"type\") TaskType taskType,\r\n-            @QueryParam(\"page\") int page, @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n+    <T extends AbstractTaskTO> PagedResult<T> list(@MatrixParam(\"type\") TaskType taskType,\r\n+            @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\r\n \r\n     /**\r\n      * @param taskId Id of task to be read\r\n@@ -156,5 +150,5 @@ <T extends AbstractTaskTO> List<T> list(@MatrixParam(\"type\") TaskType taskType,\n \r\n     @POST\r\n     @Path(\"bulk\")\r\n-    BulkActionRes bulk(BulkAction bulkAction);\r\n+    BulkActionResult bulk(BulkAction bulkAction);\r\n }\r"},{"sha":"eb8ff765508ba9a705943cf7863ee846a64ff550","filename":"common/src/main/java/org/apache/syncope/common/services/UserSelfService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserSelfService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -34,7 +34,7 @@\n @Path(\"users/self\")\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-public interface UserSelfService {\n+public interface UserSelfService extends JAXRSService {\n \n     /**\n      * @return Response contains special syncope HTTP header indicating if user self registration is allowed"},{"sha":"1a5c0fdadb6d1d6b40e7f5be8a96049fb540494f","filename":"common/src/main/java/org/apache/syncope/common/services/UserService.java","status":"modified","additions":37,"deletions":66,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -36,17 +36,17 @@\n import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n import org.apache.syncope.common.mod.StatusMod;\n import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n-import org.apache.syncope.common.to.ResourceNameTO;\n+import org.apache.syncope.common.wrap.ResourceName;\n+import org.apache.syncope.common.reqres.PagedResult;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.ResourceAssociationActionType;\n \n @Path(\"users\")\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-public interface UserService {\n+public interface UserService extends JAXRSService {\n \n     @OPTIONS\n     @Path(\"{userId}/username\")\n@@ -71,101 +71,72 @@ public interface UserService {\n     UserTO read(@Description(\"id of user to be read\") @PathParam(\"userId\") Long userId);\n \n     /**\n-     * Returns the number of existing users.\n-     *\n-     * @return Number of existing users\n-     */\n-    @GET\n-    @Path(\"count\")\n-    @Descriptions({\n-        @Description(target = DocTarget.METHOD, value = \"Returns the number of existing users\"),\n-        @Description(target = DocTarget.RETURN, value = \"Number of existing users\")\n-    })\n-    int count();\n-\n-    /**\n-     * Returns a list of all existing users.\n+     * Returns a paged list of existing users.\n      *\n-     * @return A list of all existing users.\n+     * @return Paged list of all existing users\n      */\n     @GET\n     @Descriptions({\n         @Description(target = DocTarget.METHOD, value = \"Returns a list of all existing users\"),\n-        @Description(target = DocTarget.RETURN, value = \"A list of all existing users\")\n+        @Description(target = DocTarget.RETURN, value = \"Paged list of all existing users\")\n     })\n-    List<UserTO> list();\n+    PagedResult<UserTO> list();\n \n     /**\n-     * Returns a paged list of existing users.\n+     * Returns a paged list of existing users matching page/size conditions.\n      *\n      * @param page result page number\n      * @param size number of entries per page\n-     * @return A list of all existing users matching page/size conditions.\n+     * @return Paged list of existing users matching page/size conditions\n      */\n     @GET\n-    @Descriptions({\n-        @Description(target = DocTarget.METHOD, value = \"Returns a list of all existing users\"),\n-        @Description(target = DocTarget.RETURN, value = \"A list of all existing users matching page/size conditions\")\n-    })\n-    List<UserTO> list(@Description(\"result page number\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n-            @Description(\"number of entries per page\") @QueryParam(\"size\") @DefaultValue(\"25\") int size);\n-\n-    /**\n-     * Returns the number of users matching the provided search condition.\n-     *\n-     * @param searchCondition search condition\n-     * @return Number of users matching the provided search condition\n-     * @throws InvalidSearchConditionException if provided search condition is not valid\n-     */\n-    @POST\n-    @Path(\"search/count\")\n     @Descriptions({\n         @Description(target = DocTarget.METHOD,\n-                value = \"Returns the number of users matching the provided search condition\"),\n-        @Description(target = DocTarget.RETURN,\n-                value = \"Number of users matching the provided search condition\")\n+                value = \"Returns a list of all existing users matching page/size conditions\"),\n+        @Description(target = DocTarget.RETURN, value = \"Paged list of existing users matching page/size conditions\")\n     })\n-    int searchCount(@Description(\"search condition\") NodeCond searchCondition)\n-            throws InvalidSearchConditionException;\n+    PagedResult<UserTO> list(\n+            @Description(\"result page number\")\n+            @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\n+            @Description(\"number of entries per page\")\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\n \n     /**\n-     * Returns the list of users matching the given search condition.\n+     * Returns a paged list of users matching the provided FIQL search condition.\n      *\n-     * @param searchCondition search condition\n-     * @return List of users matching the given search condition\n-     * @throws InvalidSearchConditionException if provided search condition is not valid\n+     * @param fiql FIQL search expression\n+     * @return Paged list of users matching the provided FIQL search condition\n      */\n-    @POST\n+    @GET\n     @Path(\"search\")\n     @Descriptions({\n         @Description(target = DocTarget.METHOD,\n-                value = \"Returns the list of users matching the given search condition\"),\n+                value = \"Returns a paged list of users matching the provided FIQL search condition\"),\n         @Description(target = DocTarget.RETURN, value = \"List of users matching the given condition\")\n     })\n-    List<UserTO> search(@Description(\"search condition\") NodeCond searchCondition)\n-            throws InvalidSearchConditionException;\n+    PagedResult<UserTO> search(@Description(\"FIQL search expression\") @QueryParam(\"fiql\") String fiql);\n \n     /**\n-     * Returns the paged list of users matching the given search condition.\n+     * Returns a paged list of users matching the provided FIQL search condition.\n      *\n-     * @param searchCondition search condition\n+     * @param fiql FIQL search expression\n      * @param page result page number\n      * @param size number of entries per page\n-     * @return List of users matching the given search and page/size conditions\n-     * @throws InvalidSearchConditionException if provided search condition is not valid\n+     * @return Paged list of users matching the provided FIQL search condition\n      */\n-    @POST\n+    @GET\n     @Path(\"search\")\n     @Descriptions({\n         @Description(target = DocTarget.METHOD,\n-                value = \"Returns the paged list of users matching the given search condition\"),\n+                value = \"Returns a paged list of users matching the provided FIQL search condition\"),\n         @Description(target = DocTarget.RETURN,\n-                value = \"List of users matching the given search and page/size conditions\")\n+                value = \"Paged list of users matching the provided FIQL search condition\")\n     })\n-    List<UserTO> search(@Description(\"search condition\") NodeCond searchCondition,\n-            @Description(\"result page number\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n-            @Description(\"number of entries per page\") @QueryParam(\"size\") @DefaultValue(\"25\") int size)\n-            throws InvalidSearchConditionException;\n+    PagedResult<UserTO> search(@Description(\"FIQL search expression\") @QueryParam(\"fiql\") String fiql,\n+            @Description(\"result page number\")\n+            @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\n+            @Description(\"number of entries per page\")\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\n \n     /**\n      * Creates a new user.\n@@ -255,7 +226,7 @@ Response status(@Description(\"id of user to be subjected to status update\") @Pat\n     Response associate(@Description(\"user id\") @PathParam(\"userId\") Long userId,\n             @Description(\"resource association action type\") @PathParam(\"type\") ResourceAssociationActionType type,\n             @Description(\"external resources to be used for propagation-related operations\"\n-            ) List<ResourceNameTO> resourceNames);\n+            ) List<ResourceName> resourceNames);\n \n     /**\n      * Executes the provided bulk action.\n@@ -269,6 +240,6 @@ Response associate(@Description(\"user id\") @PathParam(\"userId\") Long userId,\n         @Description(target = DocTarget.METHOD, value = \"Executes the provided bulk action\"),\n         @Description(target = DocTarget.RETURN, value = \"Bulk action result\")\n     })\n-    BulkActionRes bulk(@Description(\"list of &lt;username, action&gt; pairs\") BulkAction bulkAction);\n+    BulkActionResult bulk(@Description(\"list of &lt;username, action&gt; pairs\") BulkAction bulkAction);\n \n }"},{"sha":"1febc18cb0cbc4b693a6c530dc69bbcf638fcbf1","filename":"common/src/main/java/org/apache/syncope/common/services/UserWorkflowService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserWorkflowService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.services;\n \n+import org.apache.syncope.common.to.WorkflowFormTO;\n import java.util.List;\n import javax.ws.rs.Consumes;\n \n@@ -29,12 +30,11 @@\n import javax.ws.rs.core.MediaType;\n \n import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.to.WorkflowFormTO;\n \n @Path(\"userworkflow\")\n @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-public interface UserWorkflowService {\n+public interface UserWorkflowService extends JAXRSService {\n \n     @POST\n     @Path(\"forms\")"},{"sha":"474bbac12250053003ab13a0f76648b6175e7fd1","filename":"common/src/main/java/org/apache/syncope/common/services/WorkflowService.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -32,9 +32,10 @@\n import org.apache.syncope.common.types.RESTHeaders;\r\n \r\n @Path(\"workflows/{kind}\")\r\n-public interface WorkflowService {\r\n+public interface WorkflowService extends JAXRSService {\r\n \r\n     /**\r\n+     * @param kind Kind can be USER or ROLE only!\r\n      * @return Response contains special syncope HTTP header indicating if Activiti is enabled for users / roles\r\n      * @see org.apache.syncope.common.types.RESTHeaders#ACTIVITI_USER_ENABLED\r\n      * @see org.apache.syncope.common.types.RESTHeaders#ACTIVITI_ROLE_ENABLED\r"},{"sha":"5426e4d8e57a22eb3dbf500b8c2be64396175756","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractAttributableTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -44,15 +44,15 @@ public abstract class AbstractAttributableTO extends ConnObjectTO {\n \r\n     private Set<String> resources;\r\n \r\n-    private final List<PropagationStatusTO> propagationStatusTOs;\r\n+    private final List<PropagationStatus> propagationStatusTOs;\r\n \r\n     protected AbstractAttributableTO() {\r\n         super();\r\n \r\n         derAttrs = new ArrayList<AttributeTO>();\r\n         virAttrs = new ArrayList<AttributeTO>();\r\n         resources = new HashSet<String>();\r\n-        propagationStatusTOs = new ArrayList<PropagationStatusTO>();\r\n+        propagationStatusTOs = new ArrayList<PropagationStatus>();\r\n     }\r\n \r\n     public long getId() {\r\n@@ -108,9 +108,9 @@ public Set<String> getResources() {\n \r\n     public boolean removePropagationTO(final String resource) {\r\n         if (resource != null && getPropagationStatusTOs().isEmpty()) {\r\n-            final List<PropagationStatusTO> toBeRemoved = new ArrayList<PropagationStatusTO>();\r\n+            final List<PropagationStatus> toBeRemoved = new ArrayList<PropagationStatus>();\r\n \r\n-            for (PropagationStatusTO propagationTO : getPropagationStatusTOs()) {\r\n+            for (PropagationStatus propagationTO : getPropagationStatusTOs()) {\r\n                 if (resource.equals(propagationTO.getResource())) {\r\n                     toBeRemoved.add(propagationTO);\r\n                 }\r\n@@ -124,7 +124,7 @@ public boolean removePropagationTO(final String resource) {\n     @XmlElementWrapper(name = \"propagationStatuses\")\r\n     @XmlElement(name = \"propagationStatus\")\r\n     @JsonProperty(\"propagationStatuses\")\r\n-    public List<PropagationStatusTO> getPropagationStatusTOs() {\r\n+    public List<PropagationStatus> getPropagationStatusTOs() {\r\n         return propagationStatusTOs;\r\n     }\r\n }\r"},{"sha":"1a9a735b52cabe5b9828f59e055c592196301708","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractPolicyTO.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -19,19 +19,17 @@\n package org.apache.syncope.common.to;\r\n \r\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n-import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\r\n-import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlSeeAlso;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.syncope.common.AbstractBaseBean;\r\n import org.apache.syncope.common.types.PolicyType;\r\n \r\n-@XmlRootElement(name = \"policy\")\r\n+@XmlRootElement(name = \"abstractPolicy\")\r\n @XmlType\r\n @XmlSeeAlso({ AccountPolicyTO.class, PasswordPolicyTO.class, SyncPolicyTO.class })\r\n-@JsonTypeInfo(use = Id.CLASS, include = As.PROPERTY, property = \"@class\")\r\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n public abstract class AbstractPolicyTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = -2903888572649721035L;\r"},{"sha":"7790a3cb05f57a6874569df89336e5298a023bb9","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSysInfoTO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSysInfoTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSysInfoTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSysInfoTO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,12 +20,14 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.util.Date;\n+import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.AbstractBaseBean;\n \n /**\n  * Abstract wrapper for common system information.\n  */\n+@XmlType\n public class AbstractSysInfoTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -930797879027642457L;"},{"sha":"c8d5bd66b0b15714d7c59a2483ebd1a7e6c05774","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractTaskTO.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,8 +20,7 @@\n \r\n import com.fasterxml.jackson.annotation.JsonProperty;\r\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n-import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\r\n-import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\r\n+\r\n import java.util.ArrayList;\r\n import java.util.Date;\r\n import java.util.List;\r\n@@ -34,12 +33,10 @@\n \r\n import org.apache.syncope.common.AbstractBaseBean;\r\n \r\n-@XmlRootElement(name = \"task\")\r\n+@XmlRootElement(name = \"abstractTask\")\r\n @XmlType\r\n-@XmlSeeAlso({\r\n-    SyncTaskTO.class, NotificationTaskTO.class, SyncTaskTO.class, SchedTaskTO.class, PropagationTaskTO.class\r\n-})\r\n-@JsonTypeInfo(use = Id.CLASS, include = As.PROPERTY, property = \"@class\")\r\n+@XmlSeeAlso({ PropagationTaskTO.class, SyncTaskTO.class, SchedTaskTO.class, NotificationTaskTO.class })\r\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n public abstract class AbstractTaskTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 386450127003321197L;\r\n@@ -70,9 +67,9 @@ public void setLatestExecStatus(final String latestExecStatus) {\n         this.latestExecStatus = latestExecStatus;\r\n     }\r\n \r\n-    @XmlElementWrapper(name = \"excecutions\")\r\n-    @XmlElement(name = \"excecution\")\r\n-    @JsonProperty(\"excecutions\")\r\n+    @XmlElementWrapper(name = \"executions\")\r\n+    @XmlElement(name = \"execution\")\r\n+    @JsonProperty(\"executions\")\r\n     public List<TaskExecTO> getExecutions() {\r\n         return executions;\r\n     }\r"},{"sha":"a7298dbf524c2b07c3570ed46dfffdd7dd12130b","filename":"common/src/main/java/org/apache/syncope/common/to/AttributableTargetsTO.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db01dd93e91964bdcc54954c25b38509a320aef1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributableTargetsTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db01dd93e91964bdcc54954c25b38509a320aef1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributableTargetsTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributableTargetsTO.java?ref=db01dd93e91964bdcc54954c25b38509a320aef1","patch":"@@ -1,56 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.to;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.HashSet;\n-import java.util.Set;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.AbstractBaseBean;\n-\n-/**\n- * Propagation request on internal storage or on 0+ external resources.\n- */\n-@XmlRootElement(name = \"attributableTargets\")\n-@XmlType\n-public class AttributableTargetsTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -2410740018092105778L;\n-\n-    /**\n-     * Attributables.\n-     */\n-    private final Set<Long> attributables;\n-\n-    public AttributableTargetsTO() {\n-        super();\n-\n-        this.attributables = new HashSet<Long>();\n-    }\n-\n-    @XmlElementWrapper(name = \"resources\")\n-    @XmlElement(name = \"resource\")\n-    @JsonProperty(\"resources\")\n-    public Set<Long> getAttributables() {\n-        return attributables;\n-    }\n-}"},{"sha":"000b37a2a7aecd1742b09b631629d6efb33b7f42","filename":"common/src/main/java/org/apache/syncope/common/to/MembershipTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -63,7 +63,7 @@ public Set<String> getResources() {\n     }\r\n \r\n     @Override\r\n-    public List<PropagationStatusTO> getPropagationStatusTOs() {\r\n-        return Collections.<PropagationStatusTO>emptyList();\r\n+    public List<PropagationStatus> getPropagationStatusTOs() {\r\n+        return Collections.<PropagationStatus>emptyList();\r\n     }\r\n }\r"},{"sha":"1fe98775c29bfea7efed30948185ed760507801e","filename":"common/src/main/java/org/apache/syncope/common/to/NotificationTO.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -28,7 +28,6 @@\n import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.search.NodeCond;\r\n import org.apache.syncope.common.types.IntMappingType;\r\n import org.apache.syncope.common.types.TraceLevel;\r\n \r\n@@ -42,9 +41,9 @@ public class NotificationTO extends AbstractBaseBean {\n \r\n     private List<String> events = new ArrayList<String>();\r\n \r\n-    private NodeCond about;\r\n+    private String about;\r\n \r\n-    private NodeCond recipients;\r\n+    private String recipients;\r\n \r\n     private IntMappingType recipientAttrType;\r\n \r\n@@ -60,11 +59,11 @@ public class NotificationTO extends AbstractBaseBean {\n \r\n     private TraceLevel traceLevel;\r\n \r\n-    public NodeCond getAbout() {\r\n+    public String getAbout() {\r\n         return about;\r\n     }\r\n \r\n-    public void setAbout(final NodeCond about) {\r\n+    public void setAbout(final String about) {\r\n         this.about = about;\r\n     }\r\n \r\n@@ -83,11 +82,11 @@ public void setId(Long id) {\n         this.id = id;\r\n     }\r\n \r\n-    public NodeCond getRecipients() {\r\n+    public String getRecipients() {\r\n         return recipients;\r\n     }\r\n \r\n-    public void setRecipients(NodeCond recipients) {\r\n+    public void setRecipients(String recipients) {\r\n         this.recipients = recipients;\r\n     }\r\n \r"},{"sha":"ed88bac651eb4b8834b653e0474bf100cc094780","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationStatus.java","status":"renamed","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatus.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,14 +22,15 @@\n import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.to.ConnObjectTO;\r\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n \r\n /**\r\n  * Single propagation status.\r\n  */\r\n @XmlRootElement(name = \"propagationStatus\")\r\n @XmlType\r\n-public class PropagationStatusTO extends AbstractBaseBean {\r\n+public class PropagationStatus extends AbstractBaseBean {\r\n \r\n     /**\r\n      * Serial version ID.\r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/PropagationStatusTO.java"},{"sha":"62ac16f01cf350ba0a6029fe1b9b8fbaecda8b23","filename":"common/src/main/java/org/apache/syncope/common/to/WorkflowFormTO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -32,6 +32,7 @@\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.to.WorkflowFormPropertyTO;\r\n \r\n @XmlRootElement(name = \"workflowForm\")\r\n @XmlType\r"},{"sha":"8997fb92377b000aee4030e251616b40a0188d10","filename":"common/src/main/java/org/apache/syncope/common/types/AuditLoggerName.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,7 +20,6 @@\n \r\n import com.fasterxml.jackson.annotation.JsonCreator;\r\n import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n import java.text.ParseException;\r\n import java.util.Map;\r\n import org.apache.commons.lang3.StringUtils;\r\n@@ -39,7 +38,6 @@ public class AuditLoggerName extends AbstractBaseBean {\n \r\n     private final String subcategory;\r\n \r\n-    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n     private final String event;\r\n \r\n     private final Result result;\r\n@@ -83,7 +81,7 @@ public String getSubcategory() {\n     public String toLoggerName() {\r\n         return new StringBuilder().append(\r\n                 LoggerType.AUDIT.getPrefix()).append('.').append(\r\n-                LoggerEventUtils.buildEvent(type, category, subcategory, event, result)).toString();\r\n+                        LoggerEventUtils.buildEvent(type, category, subcategory, event, result)).toString();\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r"},{"sha":"9ea4d97d8d252172e8f698c6e3d32459d570cf3a","filename":"common/src/main/java/org/apache/syncope/common/types/ClientExceptionType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -37,7 +37,8 @@ public enum ClientExceptionType {\n     InvalidReportExec(Response.Status.BAD_REQUEST),\r\n     InvalidRoles(Response.Status.BAD_REQUEST),\r\n     InvalidSchemaDefinition(Response.Status.BAD_REQUEST),\r\n-    InvalidSearchCondition(Response.Status.BAD_REQUEST),\r\n+    InvalidSearchExpression(Response.Status.BAD_REQUEST),\r\n+    InvalidPageOrSize(Response.Status.BAD_REQUEST),\r\n     InvalidPropagationTaskExecReport(Response.Status.BAD_REQUEST),\r\n     InvalidUSchema(Response.Status.BAD_REQUEST),\r\n     InvalidUDerSchema(Response.Status.BAD_REQUEST),\r"},{"sha":"d7dec66eaa2a1d9d9fc1a4d55d519518fadaeba2","filename":"common/src/main/java/org/apache/syncope/common/types/ReportletConfClasses.java","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db01dd93e91964bdcc54954c25b38509a320aef1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportletConfClasses.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db01dd93e91964bdcc54954c25b38509a320aef1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportletConfClasses.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportletConfClasses.java?ref=db01dd93e91964bdcc54954c25b38509a320aef1","patch":"@@ -1,48 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.types;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-\n-@XmlRootElement\n-public class ReportletConfClasses {\n-\n-    private List<String> confClasses;\n-\n-    public ReportletConfClasses() {\n-        this.confClasses = new ArrayList<String>();\n-    }\n-\n-    public ReportletConfClasses(final Collection<String> confClasses) {\n-        this();\n-        this.confClasses.addAll(confClasses);\n-    }\n-\n-    public List<String> getConfClasses() {\n-        return confClasses;\n-    }\n-\n-    public void setConfClasses(final List<String> confClasses) {\n-        this.confClasses = confClasses;\n-    }\n-}"},{"sha":"85f9392307663f56d4424e47edd9a5a1ebe1602e","filename":"common/src/main/java/org/apache/syncope/common/util/AttributableOperations.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -84,7 +84,6 @@ private static void populate(final Map<String, AttributeTO> updatedAttrs,\n                 } else {\r\n                     result.getAttrsToUpdate().add(mod);\r\n                 }\r\n-\r\n             } else if (!updatedValues.equals(originalValues)) {\r\n                 // avoid unwanted inputs\r\n                 updatedValues.remove(\"\");\r"},{"sha":"7927a0682ddfd3940d04c95dacb268f239b9b7d8","filename":"common/src/main/java/org/apache/syncope/common/util/CollectionWrapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,7 +22,7 @@\n import java.util.Collection;\r\n import java.util.Collections;\r\n import java.util.List;\r\n-import org.apache.syncope.common.AbstractWrappable;\r\n+import org.apache.syncope.common.wrap.AbstractWrappable;\r\n import org.apache.syncope.common.to.LoggerTO;\r\n import org.apache.syncope.common.types.AuditLoggerName;\r\n import org.apache.syncope.common.types.LoggerLevel;\r"},{"sha":"4d53136228bfcd92ca9ef61bf7d89d88e59c9af5","filename":"common/src/main/java/org/apache/syncope/common/wrap/AbstractWrappable.java","status":"renamed","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FAbstractWrappable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FAbstractWrappable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FAbstractWrappable.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,7 +16,9 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common;\n+package org.apache.syncope.common.wrap;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n \n public abstract class AbstractWrappable extends AbstractBaseBean {\n ","previous_filename":"common/src/main/java/org/apache/syncope/common/AbstractWrappable.java"},{"sha":"bfa4e2597b8c0172cac6ba45f9701e2852d7f1ad","filename":"common/src/main/java/org/apache/syncope/common/wrap/CorrelationRuleClass.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FCorrelationRuleClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FCorrelationRuleClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FCorrelationRuleClass.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,15 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.to;\r\n+package org.apache.syncope.common.wrap;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.syncope.common.AbstractWrappable;\r\n \r\n @XmlRootElement(name = \"correlationRuleClass\")\r\n @XmlType\r\n-public class CorrelationRuleClassTO extends AbstractWrappable {\r\n+public class CorrelationRuleClass extends AbstractWrappable {\r\n \r\n     private static final long serialVersionUID = -6715106427060816725L;\r\n \r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/CorrelationRuleClassTO.java"},{"sha":"493bc96afed3d813f969d0c13dfa5a83fd3a0a4b","filename":"common/src/main/java/org/apache/syncope/common/wrap/EntitlementTO.java","status":"renamed","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FEntitlementTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FEntitlementTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FEntitlementTO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,13 +16,11 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.to;\r\n+package org.apache.syncope.common.wrap;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.common.AbstractWrappable;\r\n-\r\n @XmlRootElement(name = \"entitlement\")\r\n @XmlType\r\n public class EntitlementTO extends AbstractWrappable {\r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/EntitlementTO.java"},{"sha":"408e151b995f844d3f2142e5b1878100066b1a41","filename":"common/src/main/java/org/apache/syncope/common/wrap/JobClass.java","status":"renamed","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FJobClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FJobClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FJobClass.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,16 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.to;\r\n+package org.apache.syncope.common.wrap;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.common.AbstractWrappable;\r\n-\r\n @XmlRootElement(name = \"jobClass\")\r\n @XmlType\r\n-public class JobClassTO extends AbstractWrappable {\r\n+public class JobClass extends AbstractWrappable {\r\n \r\n     private static final long serialVersionUID = -1953799905627918822L;\r\n \r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/JobClassTO.java"},{"sha":"d702724185ab291251e6c8321727793a2d9de8f0","filename":"common/src/main/java/org/apache/syncope/common/wrap/MailTemplate.java","status":"renamed","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FMailTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FMailTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FMailTemplate.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,16 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.to;\r\n+package org.apache.syncope.common.wrap;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.common.AbstractWrappable;\r\n-\r\n @XmlRootElement(name = \"mailTemplate\")\r\n @XmlType\r\n-public class MailTemplateTO extends AbstractWrappable {\r\n+public class MailTemplate extends AbstractWrappable {\r\n \r\n     private static final long serialVersionUID = 7232619557172031478L;\r\n \r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/MailTemplateTO.java"},{"sha":"ef0c6304c1a63ebf46f22166b2af5cc0ad77ae3e","filename":"common/src/main/java/org/apache/syncope/common/wrap/PropagationActionClass.java","status":"renamed","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPropagationActionClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPropagationActionClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPropagationActionClass.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,16 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.to;\r\n+package org.apache.syncope.common.wrap;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.common.AbstractWrappable;\r\n-\r\n @XmlRootElement(name = \"propagationActionClass\")\r\n @XmlType\r\n-public class PropagationActionClassTO extends AbstractWrappable {\r\n+public class PropagationActionClass extends AbstractWrappable {\r\n \r\n     private static final long serialVersionUID = 2187654394121198308L;\r\n \r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/PropagationActionClassTO.java"},{"sha":"186c22429783a56ceefe2d44f56bc5cfe7bbb93e","filename":"common/src/main/java/org/apache/syncope/common/wrap/ReportletConfClass.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FReportletConfClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FReportletConfClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FReportletConfClass.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.wrap;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+@XmlRootElement(name = \"reportletConfClass\")\r\n+@XmlType\r\n+public class ReportletConfClass extends AbstractWrappable {\r\n+\r\n+    private static final long serialVersionUID = 1343357929074360450L;\r\n+\r\n+}\r"},{"sha":"517cff4f60d83feff51e73900401aaa3251c0460","filename":"common/src/main/java/org/apache/syncope/common/wrap/ResourceName.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FResourceName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FResourceName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FResourceName.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,15 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.to;\n+package org.apache.syncope.common.wrap;\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.AbstractWrappable;\n \n @XmlRootElement(name = \"resourceName\")\n @XmlType\n-public class ResourceNameTO extends AbstractWrappable {\n+public class ResourceName extends AbstractWrappable {\n \n     private static final long serialVersionUID = -175720097924079573L;\n ","previous_filename":"common/src/main/java/org/apache/syncope/common/to/ResourceNameTO.java"},{"sha":"302f9ca3ac1df942f0edb73599f588d5d5659e5c","filename":"common/src/main/java/org/apache/syncope/common/wrap/SyncActionClass.java","status":"renamed","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FSyncActionClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FSyncActionClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FSyncActionClass.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,15 +16,13 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.to;\r\n+package org.apache.syncope.common.wrap;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.common.AbstractWrappable;\r\n-\r\n @XmlRootElement(name = \"syncActionClass\")\r\n @XmlType\r\n-public class SyncActionClassTO extends AbstractWrappable {\r\n+public class SyncActionClass extends AbstractWrappable {\r\n \r\n }\r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/SyncActionClassTO.java"},{"sha":"83115c0cfc38e4e258e1fbbbc26c5ac64e28eaef","filename":"common/src/main/java/org/apache/syncope/common/wrap/Validator.java","status":"renamed","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FValidator.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,16 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.to;\r\n+package org.apache.syncope.common.wrap;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.common.AbstractWrappable;\r\n-\r\n @XmlRootElement(name = \"validator\")\r\n @XmlType\r\n-public class ValidatorTO extends AbstractWrappable {\r\n+public class Validator extends AbstractWrappable {\r\n \r\n     private static final long serialVersionUID = 7233619557177034453L;\r\n \r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/ValidatorTO.java"},{"sha":"569e9a3891e30a29c52130f48fd629494fbd7a26","filename":"common/src/test/java/org/apache/syncope/common/JSONTest.java","status":"modified","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FJSONTest.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,7 +20,6 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n@@ -29,39 +28,13 @@\n import java.util.Arrays;\n import java.util.List;\n import org.apache.syncope.common.report.UserReportletConf;\n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.MembershipCond;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n import org.junit.Test;\n \n public class JSONTest {\n \n-    @Test\n-    public void searchCondition() throws IOException {\n-        final AttributeCond usernameCond = new AttributeCond(AttributeCond.Type.LIKE);\n-        usernameCond.setSchema(\"username\");\n-        usernameCond.setExpression(\"%o%\");\n-\n-        final MembershipCond membershipCond = new MembershipCond();\n-        membershipCond.setRoleName(\"root\");\n-\n-        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(usernameCond),\n-                NodeCond.getLeafCond(membershipCond));\n-\n-        assertTrue(searchCondition.isValid());\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-\n-        StringWriter writer = new StringWriter();\n-        mapper.writeValue(writer, searchCondition);\n-\n-        NodeCond actual = mapper.readValue(writer.toString(), NodeCond.class);\n-        assertEquals(searchCondition, actual);\n-    }\n-\n     @Test\n     public void lists() throws IOException {\n         List<ConfigurationTO> confList = new ArrayList<ConfigurationTO>();"},{"sha":"eb01585a1ca7ea75170f4731b01eb0dab69c6119","filename":"console/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fpom.xml?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -627,7 +627,7 @@ under the License.\n               </execution>\n             </executions>\n           </plugin>\n-\n+          \n           <plugin>\n             <groupId>org.codehaus.cargo</groupId>\n             <artifactId>cargo-maven2-plugin</artifactId>\n@@ -651,7 +651,7 @@ under the License.\n                 <phase>none</phase>\n               </execution>\n             </executions>\n-          </plugin>        \n+          </plugin>          \n         </plugins>\n       </build>\n     </profile>"},{"sha":"5b6809cd64dac7b481775c6097a5030cc880a511","filename":"console/src/main/java/org/apache/syncope/console/SyncopeRequestCycleListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeRequestCycleListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeRequestCycleListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeRequestCycleListener.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,7 +21,7 @@\n import java.security.AccessControlException;\n import javax.ws.rs.BadRequestException;\n import javax.xml.ws.WebServiceException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.pages.ErrorPage;\n import org.apache.wicket.Page;\n import org.apache.wicket.authorization.UnauthorizedInstantiationException;"},{"sha":"ac826fe1a9885336ba2f1e0df465b6ce4b5ff96a","filename":"console/src/main/java/org/apache/syncope/console/commons/AttributableDataProvider.java","status":"modified","additions":9,"deletions":21,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,8 +21,6 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.console.rest.AbstractAttributableRestClient;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n@@ -40,7 +38,7 @@ public class AttributableDataProvider extends SortableDataProvider<AbstractAttri\n \n     private final SortableAttributableProviderComparator comparator;\n \n-    private NodeCond filter = null;\n+    private String fiql = null;\n \n     private final int paginatorRows;\n \n@@ -63,23 +61,18 @@ public AttributableDataProvider(final AbstractAttributableRestClient restClient,\n         this.comparator = new SortableAttributableProviderComparator(this);\n     }\n \n-    public void setSearchCond(final NodeCond searchCond) {\n-        this.filter = searchCond;\n+    public void setFIQL(final String fiql) {\n+        this.fiql = fiql;\n     }\n \n     @Override\n     public Iterator<? extends AbstractAttributableTO> iterator(final long first, final long count) {\n         List<? extends AbstractAttributableTO> result;\n \n         if (filtered) {\n-            try {\n-                result = filter == null\n-                        ? Collections.<AbstractAttributableTO>emptyList()\n-                        : restClient.search(filter, ((int) first / paginatorRows) + 1, paginatorRows);\n-            } catch (InvalidSearchConditionException e) {\n-                LOG.error(e.getMessage(), e);\n-                result = Collections.<AbstractAttributableTO>emptyList();\n-            }\n+            result = fiql == null\n+                    ? Collections.<AbstractAttributableTO>emptyList()\n+                    : restClient.search(fiql, ((int) first / paginatorRows) + 1, paginatorRows);\n         } else {\n             result = restClient.list(((int) first / paginatorRows) + 1, paginatorRows);\n         }\n@@ -93,14 +86,9 @@ public long size() {\n         long result;\n \n         if (filtered) {\n-            try {\n-                result = filter == null\n-                        ? 0\n-                        : restClient.searchCount(filter);\n-            } catch (InvalidSearchConditionException e) {\n-                LOG.error(e.getMessage(), e);\n-                result = 0;\n-            }\n+            result = fiql == null\n+                    ? 0\n+                    : restClient.searchCount(fiql);\n         } else {\n             result = restClient.count();\n         }"},{"sha":"2bc143c0ac936cf202f0fcb2eae4a1354a94dd40","filename":"console/src/main/java/org/apache/syncope/console/commons/SearchCondWrapper.java","status":"removed","additions":0,"deletions":114,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db01dd93e91964bdcc54954c25b38509a320aef1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSearchCondWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db01dd93e91964bdcc54954c25b38509a320aef1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSearchCondWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSearchCondWrapper.java?ref=db01dd93e91964bdcc54954c25b38509a320aef1","patch":"@@ -1,114 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.console.commons;\n-\n-import java.io.Serializable;\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.AttributeCond.Type;\n-\n-/**\n- * Generic search condition wrapper class.\n- */\n-public class SearchCondWrapper implements Serializable {\n-\n-    private static final long serialVersionUID = -5828622221257732958L;\n-\n-    public enum OperationType {\n-\n-        AND,\n-        OR\n-\n-    };\n-\n-    public enum FilterType {\n-\n-        ATTRIBUTE,\n-        MEMBERSHIP,\n-        RESOURCE,\n-        ENTITLEMENT\n-\n-    };\n-\n-    private boolean notOperator;\n-\n-    private OperationType operationType = null;\n-\n-    private Type type;\n-\n-    private FilterType filterType;\n-\n-    private String filterName;\n-\n-    private String filterValue;\n-\n-    public boolean isNotOperator() {\n-        return notOperator;\n-    }\n-\n-    public void setNotOperator(boolean notOperator) {\n-        this.notOperator = notOperator;\n-    }\n-\n-    public OperationType getOperationType() {\n-        return operationType;\n-    }\n-\n-    public void setOperationType(OperationType operationType) {\n-        this.operationType = operationType;\n-    }\n-\n-    public AttributeCond.Type getType() {\n-        return type;\n-    }\n-\n-    public void setType(AttributeCond.Type type) {\n-        this.type = type;\n-    }\n-\n-    public FilterType getFilterType() {\n-        return filterType;\n-    }\n-\n-    public void setFilterType(FilterType filterType) {\n-        this.filterType = filterType;\n-    }\n-\n-    public String getFilterName() {\n-        return filterName;\n-    }\n-\n-    public void setFilterName(String filterName) {\n-        this.filterName = filterName;\n-    }\n-\n-    public String getFilterValue() {\n-        return filterValue;\n-    }\n-\n-    public void setFilterValue(String filterValue) {\n-        this.filterValue = filterValue;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n-    }\n-}"},{"sha":"7b5207a9bd2fc8eae3938bc399f0aea97b9f9ab1","filename":"console/src/main/java/org/apache/syncope/console/pages/AbstractSchedTaskModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.DateFormatROModel;\n import org.apache.syncope.console.markup.html.CrontabContainer;"},{"sha":"20eafc3ad4d57918cce5d6f8646993969ea77f5c","filename":"console/src/main/java/org/apache/syncope/console/pages/ApprovalModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -29,7 +29,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.MapChoiceRenderer;\n import org.apache.syncope.console.markup.html.list.AltListView;"},{"sha":"fef13122fc303ca6dcc557574643b4a7a40cc7c5","filename":"console/src/main/java/org/apache/syncope/console/pages/BulkActionModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -24,8 +24,8 @@\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.console.rest.BaseRestClient;\n import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n@@ -124,7 +124,7 @@ public IModel<T> model(T object) {\n                 @Override\n                 public void onClick(final AjaxRequestTarget target) {\n                     try {\n-                        final BulkActionRes res = (BulkActionRes) bulkActionExecutor.getClass().\n+                        final BulkActionResult res = (BulkActionResult) bulkActionExecutor.getClass().\n                                 getMethod(\"bulkAction\", BulkAction.class).invoke(bulkActionExecutor, bulkAction);\n \n                         setResponsePage(new BulkActionResultModalPage(window, items, columns, res, idFieldName));"},{"sha":"8401f7175a567d6dcde4cbacd36bca9f6ce62577","filename":"console/src/main/java/org/apache/syncope/console/pages/BulkActionResultModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionResultModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionResultModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionResultModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.ActionResultColumn;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -47,7 +47,7 @@ public BulkActionResultModalPage(\n             final ModalWindow window,\n             final List<T> items,\n             final List<IColumn<T, S>> columns,\n-            final BulkActionRes results,\n+            final BulkActionResult results,\n             final String idFieldName) {\n \n         super();"},{"sha":"19dd46963946e3b9343cdb17fc9452ef3dc61e5d","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.LoggerLevel;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.HttpResourceStream;\n import org.apache.syncope.console.commons.PreferenceManager;"},{"sha":"690286329ea9be57102c153d89f8af83b7de28c6","filename":"console/src/main/java/org/apache/syncope/console/pages/ConfigurationModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.console.pages;\n \n import org.apache.syncope.common.to.ConfigurationTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.rest.ConfigurationRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.PageReference;"},{"sha":"b8fcb92300901a0c7aeb05c32300b9b7a4599095","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ConnectorCapability;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.markup.html.list.AltListView;\n import org.apache.syncope.console.rest.ConnectorRestClient;"},{"sha":"c87b7d1e8ca0120bb4de19ae0b57b22905e46800","filename":"console/src/main/java/org/apache/syncope/console/pages/DerivedSchemaModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.common.AbstractBaseBean;\n import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.JexlHelpUtil;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;"},{"sha":"ddc90e2f1d57627af8a9e011d139726ea1f287fe","filename":"console/src/main/java/org/apache/syncope/console/pages/DisplayAttributesModalPage.java","status":"modified","additions":4,"deletions":28,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,13 +18,10 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import java.lang.reflect.Field;\n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.search.SearchableFields;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n@@ -50,7 +47,7 @@\n /**\n  * Modal window with Display attributes form.\n  */\n-@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n public class DisplayAttributesModalPage extends BaseModalPage {\n \n     private static final long serialVersionUID = -4274117450918385110L;\n@@ -60,11 +57,7 @@ public class DisplayAttributesModalPage extends BaseModalPage {\n      */\n     private static final int MAX_SELECTIONS = 9;\n \n-    private static final String[] ATTRIBUTES_TO_HIDE = {\n-        \"attrs\", \"derAttrs\", \"virAttrs\", \"memberships\", \"resources\",\n-        \"serialVersionUID\", \"password\", \"propagationTOs\"};\n-\n-    public static final String[] DEFAULT_SELECTION = {\"id\", \"username\", \"status\"};\n+    public static final String[] DEFAULT_SELECTION = { \"id\", \"username\", \"status\" };\n \n     @SpringBean\n     private PreferenceManager prefMan;\n@@ -88,23 +81,7 @@ public DisplayAttributesModalPage(final PageReference pageRef, final ModalWindow\n \n             @Override\n             protected List<String> load() {\n-\n-                final List<String> details = new ArrayList<String>();\n-\n-                Class<?> clazz = UserTO.class;\n-\n-                // loop on class and all superclasses searching for field\n-                while (clazz != null && clazz != Object.class) {\n-                    for (Field field : clazz.getDeclaredFields()) {\n-                        if (!ArrayUtils.contains(ATTRIBUTES_TO_HIDE, field.getName())) {\n-                            details.add(field.getName());\n-                        }\n-                    }\n-                    clazz = clazz.getSuperclass();\n-                }\n-\n-                Collections.reverse(details);\n-                return details;\n+                return SearchableFields.get(UserTO.class);\n             }\n         };\n \n@@ -138,7 +115,6 @@ protected List<String> load() {\n             }\n         };\n \n-\n         final Form form = new Form(FORM);\n         form.setModel(new CompoundPropertyModel(this));\n "},{"sha":"4b06e23baae5026c6762ce85b99969ee04874033","filename":"console/src/main/java/org/apache/syncope/console/pages/Login.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.Locale;\n import org.apache.syncope.common.services.EntitlementService;\n-import org.apache.syncope.common.to.EntitlementTO;\n+import org.apache.syncope.common.wrap.EntitlementTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.console.SyncopeSession;"},{"sha":"6544115ea41ca5651270e2c8598a538419c0fe74","filename":"console/src/main/java/org/apache/syncope/console/pages/NotificationModalPage.java","status":"modified","additions":18,"deletions":27,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -23,12 +23,11 @@\n import java.util.Collections;\n import java.util.EnumSet;\n import java.util.List;\n-import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.TraceLevel;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.panels.LoggerCategoryPanel;\n import org.apache.syncope.console.pages.panels.UserSearchPanel;\n@@ -101,10 +100,10 @@ public NotificationModalPage(final PageReference pageRef, final ModalWindow wind\n \n         final AjaxCheckBoxPanel checkAbout =\n                 new AjaxCheckBoxPanel(\"checkAbout\", \"checkAbout\",\n-                new Model<Boolean>(notificationTO.getAbout() == null));\n+                        new Model<Boolean>(notificationTO.getAbout() == null));\n         aboutContainer.add(checkAbout);\n \n-        final UserSearchPanel about = new UserSearchPanel.Builder(\"about\").nodeCond(notificationTO.getAbout()).build();\n+        final UserSearchPanel about = new UserSearchPanel.Builder(\"about\").fiql(notificationTO.getAbout()).build();\n         aboutContainer.add(about);\n         about.setEnabled(!checkAbout.getModelObject());\n \n@@ -125,7 +124,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 new PropertyModel<IntMappingType>(notificationTO, \"recipientAttrType\"));\n         recipientAttrType.setChoices(new ArrayList<IntMappingType>(\n                 IntMappingType.getAttributeTypes(AttributableType.USER,\n-                EnumSet.of(IntMappingType.UserId, IntMappingType.Password))));\n+                        EnumSet.of(IntMappingType.UserId, IntMappingType.Password))));\n         recipientAttrType.setRequired(true);\n         form.add(recipientAttrType);\n \n@@ -154,18 +153,18 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 getPageReference(),\n                 \"Notification\") {\n \n-            private static final long serialVersionUID = 6429053774964787735L;\n+                    private static final long serialVersionUID = 6429053774964787735L;\n \n-            @Override\n-            protected String[] getListRoles() {\n-                return new String[] {};\n-            }\n+                    @Override\n+                    protected String[] getListRoles() {\n+                        return new String[] {};\n+                    }\n \n-            @Override\n-            protected String[] getChangeRoles() {\n-                return new String[] {};\n-            }\n-        });\n+                    @Override\n+                    protected String[] getChangeRoles() {\n+                        return new String[] {};\n+                    }\n+                });\n \n         final WebMarkupContainer recipientsContainer = new WebMarkupContainer(\"recipientsContainer\");\n         recipientsContainer.setOutputMarkupId(true);\n@@ -182,12 +181,11 @@ protected String[] getChangeRoles() {\n \n         final AjaxCheckBoxPanel checkRecipients =\n                 new AjaxCheckBoxPanel(\"checkRecipients\", \"checkRecipients\",\n-                new Model<Boolean>(notificationTO.getRecipients() == null ? false : true));\n+                        new Model<Boolean>(notificationTO.getRecipients() == null ? false : true));\n         recipientsContainer.add(checkRecipients);\n \n         final UserSearchPanel recipients =\n-                new UserSearchPanel.Builder(\"recipients\")\n-                .nodeCond(notificationTO.getRecipients() == null ? null : notificationTO.getRecipients()).build();\n+                new UserSearchPanel.Builder(\"recipients\").fiql(notificationTO.getRecipients()).build();\n         recipientsContainer.add(recipients);\n         recipients.setEnabled(checkRecipients.getModelObject());\n \n@@ -229,8 +227,8 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                notificationTO.setAbout(checkAbout.getModelObject() ? null : about.buildSearchCond());\n-                notificationTO.setRecipients(checkRecipients.getModelObject() ? recipients.buildSearchCond() : null);\n+                notificationTO.setAbout(checkAbout.getModelObject() ? null : about.buildFIQL());\n+                notificationTO.setRecipients(checkRecipients.getModelObject() ? recipients.buildFIQL() : null);\n \n                 try {\n                     if (createFlag) {\n@@ -252,7 +250,6 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n \n             @Override\n             protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n-\n                 target.add(feedbackPanel);\n             }\n         };\n@@ -312,10 +309,4 @@ private List<String> getSchemaNames(final IntMappingType type) {\n \n         return result;\n     }\n-\n-    private EventCategoryTO getEventCategoryTO(final List<String> events) {\n-        final EventCategoryTO res = new EventCategoryTO();\n-\n-        return res;\n-    }\n }"},{"sha":"97cae325efe856739769ec34dcc84d357ff11477","filename":"console/src/main/java/org/apache/syncope/console/pages/ProvisioningModalPage.java","status":"modified","additions":10,"deletions":18,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FProvisioningModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FProvisioningModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FProvisioningModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,12 +22,10 @@\n import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.search.ResourceCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n+import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n-import org.apache.syncope.common.to.BulkActionRes;\n-import org.apache.syncope.common.to.BulkAssociationAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n+import org.apache.syncope.common.reqres.BulkAssociationAction;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -53,7 +51,7 @@\n \n public class ProvisioningModalPage<T extends AbstractAttributableTO> extends AbstractStatusModalPage {\n \n-    private static final long serialVersionUID = 4114026480146090961L;\n+    private static final long serialVersionUID = -4285220460543213901L;\n \n     private final ResourceTO resourceTO;\n \n@@ -188,19 +186,13 @@ public StatusBeanProvider() {\n         @SuppressWarnings(\"unchecked\")\n         @Override\n         public List<StatusBean> getStatusBeans() {\n-            final ResourceCond res = new ResourceCond();\n-            res.setResourceName(resourceTO.getName());\n+            final String fiql = SyncopeClient.getSearchConditionBuilder().hasResources(resourceTO.getName()).query();\n \n             final List<T> attributables = new ArrayList<T>();\n-\n-            try {\n-                if (UserTO.class.isAssignableFrom(typeRef)) {\n-                    attributables.addAll((List<T>) userRestClient.search(NodeCond.getLeafCond(res), 0, rowsPerPage));\n-                } else {\n-                    attributables.addAll((List<T>) roleRestClient.search(NodeCond.getLeafCond(res), 0, rowsPerPage));\n-                }\n-            } catch (InvalidSearchConditionException e) {\n-                LOG.warn(\"Invalid serach condition {}\", res, e);\n+            if (UserTO.class.isAssignableFrom(typeRef)) {\n+                attributables.addAll((List<T>) userRestClient.search(fiql, 0, rowsPerPage));\n+            } else {\n+                attributables.addAll((List<T>) roleRestClient.search(fiql, 0, rowsPerPage));\n             }\n \n             final List<ConnObjectWrapper> connObjects = statusUtils.getConnectorObjects(\n@@ -243,7 +235,7 @@ private void bulkAssociationAction(\n         if (beans.isEmpty()) {\n             window.close(target);\n         } else {\n-            final BulkActionRes res = resourceRestClient.bulkAssociationAction(\n+            final BulkActionResult res = resourceRestClient.bulkAssociationAction(\n                     resourceTO.getName(), bulkAction, typeRef);\n \n             ((BasePage) pageRef.getPage()).setModalResult(true);"},{"sha":"01df4be4015c3d0dac12127b5b934c7301c71e20","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.types.ReportExecStatus;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.DateFormatROModel;\n import org.apache.syncope.console.commons.HttpResourceStream;"},{"sha":"d23a6930962bc8bb1037f4f63a8ae80d6e1c55a6","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportletConfModalPage.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.annotation.FormAttributeField;\n import org.apache.syncope.common.report.AbstractReportletConf;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.panels.UserSearchPanel;\n@@ -166,7 +165,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     if (component instanceof UserSearchPanel) {\n                         // using component.getDefaultModelObjectAsString() to fetch field name (set above)\n                         wrapper.setPropertyValue(component.getDefaultModelObjectAsString(),\n-                                ((UserSearchPanel) component).buildSearchCond());\n+                                ((UserSearchPanel) component).buildFIQL());\n                     }\n                 }\n \n@@ -267,9 +266,9 @@ protected void populateItem(final ListItem<String> item) {\n \n                 Panel panel;\n \n-                if (NodeCond.class.equals(field.getType())) {\n+                if (String.class.equals(field.getType())) {\n                     panel = new UserSearchPanel.Builder(\"value\")\n-                            .nodeCond((NodeCond) wrapper.getPropertyValue(fieldName)).required(false).build();\n+                            .fiql((String) wrapper.getPropertyValue(fieldName)).required(false).build();\n                     // This is needed in order to manually update this.reportletConf with search panel selections\n                     panel.setDefaultModel(new Model<String>(fieldName));\n                 } else if (List.class.equals(field.getType())) {"},{"sha":"e5f312f6e154b292ff8ed42b6b22ff9a2594a478","filename":"console/src/main/java/org/apache/syncope/console/pages/Reports.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditLoggerName;\n import org.apache.syncope.common.util.LoggerEventUtils;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;"},{"sha":"36907a103870ccdcc6a7de0c07dfb1f2e404fd5f","filename":"console/src/main/java/org/apache/syncope/console/pages/Resources.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;"},{"sha":"757a03e4a696dd8353ddab1011f31c8fd6768731","filename":"console/src/main/java/org/apache/syncope/console/pages/ResultStatusModalPage.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.ConnObjectTO;\n-import org.apache.syncope.common.to.PropagationStatusTO;\n+import org.apache.syncope.common.to.PropagationStatus;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n@@ -125,11 +125,11 @@ private ResultStatusModalPage(final Builder builder) {\n \n         if (mode == UserModalPage.Mode.ADMIN) {\n             // add Syncope propagation status\n-            PropagationStatusTO syncope = new PropagationStatusTO();\n+            PropagationStatus syncope = new PropagationStatus();\n             syncope.setResource(\"Syncope\");\n             syncope.setStatus(PropagationTaskExecStatus.SUCCESS);\n \n-            List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n+            List<PropagationStatus> propagations = new ArrayList<PropagationStatus>();\n             propagations.add(syncope);\n             propagations.addAll(attributable.getPropagationStatusTOs());\n \n@@ -140,14 +140,14 @@ private ResultStatusModalPage(final Builder builder) {\n                     ? ((RoleTO) attributable).getName()\n                     : String.valueOf(attributable.getId())));\n \n-            final ListView<PropagationStatusTO> propRes = new ListView<PropagationStatusTO>(\"resources\",\n+            final ListView<PropagationStatus> propRes = new ListView<PropagationStatus>(\"resources\",\n                     propagations) {\n \n                         private static final long serialVersionUID = -1020475259727720708L;\n \n                         @Override\n-                        protected void populateItem(final ListItem<PropagationStatusTO> item) {\n-                            final PropagationStatusTO propTO = (PropagationStatusTO) item.getDefaultModelObject();\n+                        protected void populateItem(final ListItem<PropagationStatus> item) {\n+                            final PropagationStatus propTO = (PropagationStatus) item.getDefaultModelObject();\n \n                             final ListView attributes = getConnObjectView(propTO);\n \n@@ -260,7 +260,7 @@ public void onClick(final AjaxRequestTarget target) {\n      * @param propTO propagation TO.\n      * @return list view.\n      */\n-    private ListView getConnObjectView(final PropagationStatusTO propTO) {\n+    private ListView getConnObjectView(final PropagationStatus propTO) {\n         final ConnObjectTO before = propTO.getBeforeObj();\n         final ConnObjectTO after = propTO.getAfterObj();\n "},{"sha":"c0b9727d113f8217655f6b65843ac7646f3dbaf0","filename":"console/src/main/java/org/apache/syncope/console/pages/Roles.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.panels.AbstractSearchResultPanel;\n import org.apache.syncope.console.pages.panels.RoleSearchPanel;\n@@ -110,10 +109,10 @@ public void onClose(final AjaxRequestTarget target) {\n \n             @Override\n             protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n-                final NodeCond searchCond = searchPanel.buildSearchCond();\n-                LOG.debug(\"Node condition {}\", searchCond);\n+                final String fiql = searchPanel.buildFIQL();\n+                LOG.debug(\"Node condition {}\", fiql);\n \n-                doSearch(target, searchCond, searchResult);\n+                doSearch(target, fiql, searchResult);\n \n                 Session.get().getFeedbackMessages().clear();\n                 target.add(searchPanel.getSearchFeedback());\n@@ -126,15 +125,15 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n         });\n     }\n \n-    private void doSearch(final AjaxRequestTarget target, final NodeCond searchCond,\n+    private void doSearch(final AjaxRequestTarget target, final String fiql,\n             final AbstractSearchResultPanel resultsetPanel) {\n \n-        if (searchCond == null || !searchCond.isValid()) {\n+        if (fiql == null) {\n             error(getString(Constants.SEARCH_ERROR));\n             return;\n         }\n \n-        resultsetPanel.search(searchCond, target);\n+        resultsetPanel.search(fiql, target);\n     }\n \n     @Override"},{"sha":"8a4185dce59f8b190c3caa9eb40d25b170fbbeb1","filename":"console/src/main/java/org/apache/syncope/console/pages/SchemaModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.JexlHelpUtil;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;"},{"sha":"7bd7b28147a5ceba216fd059978bc715dc0da5fb","filename":"console/src/main/java/org/apache/syncope/console/pages/TaskModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;"},{"sha":"63a9ae741d9d73d9d9f2f13b367b58eeb1c4a217","filename":"console/src/main/java/org/apache/syncope/console/pages/Todo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -23,7 +23,7 @@\n import java.util.Iterator;\n import java.util.List;\n import org.apache.syncope.common.to.WorkflowFormTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;"},{"sha":"44ff73f588c90e265494f73f311ff3f6e6cad700","filename":"console/src/main/java/org/apache/syncope/console/pages/UserOwnerSelectModalPage.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.panels.AbstractSearchResultPanel;\n import org.apache.syncope.console.pages.panels.SelectOnlyUserSearchResultPanel;\n@@ -54,7 +53,7 @@ public UserOwnerSelectModalPage(final PageReference pageRef, final ModalWindow w\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                final NodeCond searchCond = searchPanel.buildSearchCond();\n+                final String searchCond = searchPanel.buildFIQL();\n                 doSearch(target, searchCond, searchResult);\n \n                 Session.get().getFeedbackMessages().clear();\n@@ -69,14 +68,14 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n \n     }\n \n-    private void doSearch(final AjaxRequestTarget target, final NodeCond searchCond,\n+    private void doSearch(final AjaxRequestTarget target, final String fiql,\n             final AbstractSearchResultPanel resultsetPanel) {\n \n-        if (searchCond == null || !searchCond.isValid()) {\n+        if (fiql == null) {\n             error(getString(Constants.SEARCH_ERROR));\n             return;\n         }\n \n-        resultsetPanel.search(searchCond, target);\n+        resultsetPanel.search(fiql, target);\n     }\n }"},{"sha":"d94936c68e3f54a341278cfab9a2f65ebd46b5aa","filename":"console/src/main/java/org/apache/syncope/console/pages/Users.java","status":"modified","additions":17,"deletions":19,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.panels.AbstractSearchResultPanel;\n@@ -70,7 +69,6 @@ public Users(final PageParameters parameters) {\n                 new UserSearchResultPanel(\"listResult\", false, null, getPageReference(), restClient);\n         add(listResult);\n \n-\n         // create new user\n         final AjaxLink<Void> createLink = new ClearIndicatingAjaxLink<Void>(\"createLink\", getPageReference()) {\n \n@@ -106,39 +104,39 @@ public Page createPage() {\n         final ClearIndicatingAjaxButton searchButton =\n                 new ClearIndicatingAjaxButton(\"search\", new ResourceModel(\"search\"), getPageReference()) {\n \n-            private static final long serialVersionUID = -958724007591692537L;\n+                    private static final long serialVersionUID = -958724007591692537L;\n \n-            @Override\n-            protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n-                final NodeCond searchCond = searchPanel.buildSearchCond();\n-                LOG.debug(\"Node condition \" + searchCond);\n+                    @Override\n+                    protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                        final String fiql = searchPanel.buildFIQL();\n+                        LOG.debug(\"FIQL: \" + fiql);\n \n-                doSearch(target, searchCond, searchResult);\n+                        doSearch(target, fiql, searchResult);\n \n-                Session.get().getFeedbackMessages().clear();\n-                target.add(searchPanel.getSearchFeedback());\n-            }\n+                        Session.get().getFeedbackMessages().clear();\n+                        target.add(searchPanel.getSearchFeedback());\n+                    }\n \n-            @Override\n-            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                    @Override\n+                    protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n \n-                target.add(searchPanel.getSearchFeedback());\n-            }\n-        };\n+                        target.add(searchPanel.getSearchFeedback());\n+                    }\n+                };\n \n         searchForm.add(searchButton);\n         searchForm.setDefaultButton(searchButton);\n     }\n \n-    private void doSearch(final AjaxRequestTarget target, final NodeCond searchCond,\n+    private void doSearch(final AjaxRequestTarget target, final String fiql,\n             final AbstractSearchResultPanel resultsetPanel) {\n \n-        if (searchCond == null || !searchCond.isValid()) {\n+        if (fiql == null) {\n             error(getString(Constants.SEARCH_ERROR));\n             return;\n         }\n \n-        resultsetPanel.search(searchCond, target);\n+        resultsetPanel.search(fiql, target);\n     }\n \n     private void setWindowClosedReloadCallback(final ModalWindow window) {"},{"sha":"bb3013ddd29b637b3d2c4e919f9c8d4f194829ea","filename":"console/src/main/java/org/apache/syncope/console/pages/VirtualSchemaModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.common.AbstractBaseBean;\n import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;"},{"sha":"ada59f2423ad0604dbec970ce76f3a82a6bf9690","filename":"console/src/main/java/org/apache/syncope/console/pages/XMLEditorPopupPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FXMLEditorPopupPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FXMLEditorPopupPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FXMLEditorPopupPage.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,7 +21,7 @@\n import java.io.IOException;\n import javax.ws.rs.core.MediaType;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.rest.WorkflowRestClient;\n import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;"},{"sha":"f86115ff52b669bd709731a402197754ad742847","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AbstractSearchPanel.java","status":"modified","additions":188,"deletions":192,"changes":380,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,24 +18,23 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n-import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.search.AttributableCond;\n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.EntitlementCond;\n-import org.apache.syncope.common.search.MembershipCond;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.search.ResourceCond;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.cxf.jaxrs.ext.search.ConditionType;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n+import org.apache.syncope.client.SyncopeClient;\n+import org.apache.syncope.common.search.SearchableFields;\n+import org.apache.syncope.common.search.SpecialAttr;\n+import org.apache.syncope.common.search.SyncopeFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.search.SyncopeProperty;\n import org.apache.syncope.common.to.ResourceTO;\n-import org.apache.syncope.common.to.RoleTO;\n-import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.console.commons.SearchCondWrapper;\n-import org.apache.syncope.console.commons.SearchCondWrapper.OperationType;\n import org.apache.syncope.console.rest.AuthRestClient;\n import org.apache.syncope.console.rest.ResourceRestClient;\n import org.apache.syncope.console.rest.SchemaRestClient;\n@@ -59,9 +58,14 @@ public abstract class AbstractSearchPanel extends Panel {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractSearchPanel.class);\n \n-    protected static final String[] ATTRIBUTES_NOTINCLUDED = {\"attrs\", \"derAttrs\", \"virAttrs\",\n-        \"serialVersionUID\", \"memberships\", \"entitlements\", \"resources\", \"password\",\n-        \"propagationTOs\", \"propagationStatusMap\"};\n+    @SpringBean\n+    protected SchemaRestClient schemaRestClient;\n+\n+    @SpringBean\n+    protected ResourceRestClient resourceRestClient;\n+\n+    @SpringBean\n+    protected AuthRestClient authRestClient;\n \n     protected IModel<List<String>> dnames;\n \n@@ -71,24 +75,13 @@ public abstract class AbstractSearchPanel extends Panel {\n \n     protected IModel<List<String>> entitlements;\n \n-    protected IModel<List<AttributeCond.Type>> attributeTypes;\n-\n-    protected IModel<List<SearchCondWrapper.FilterType>> filterTypes;\n+    protected IModel<List<SearchClause.Type>> types;\n \n     protected IModel<List<String>> roleNames;\n \n-    @SpringBean\n-    protected SchemaRestClient schemaRestClient;\n-\n-    @SpringBean\n-    protected ResourceRestClient resourceRestClient;\n-\n-    @SpringBean\n-    protected AuthRestClient authRestClient;\n-\n     protected FeedbackPanel searchFeedback;\n \n-    protected List<SearchCondWrapper> searchConditionList;\n+    protected List<SearchClause> searchClauses;\n \n     protected WebMarkupContainer searchFormContainer;\n \n@@ -100,8 +93,8 @@ protected AbstractSearchPanel(final String id, final AttributableType attributab\n         this(id, attributableType, null, true);\n     }\n \n-    protected AbstractSearchPanel(final String id, final AttributableType attributableType, final NodeCond initCond,\n-            final boolean required) {\n+    protected AbstractSearchPanel(final String id, final AttributableType attributableType,\n+            final String fiql, final boolean required) {\n \n         super(id);\n         populate();\n@@ -136,15 +129,23 @@ public boolean accept(final FeedbackMessage message) {\n         searchFeedback.setOutputMarkupId(true);\n         add(searchFeedback);\n \n-        if (initCond == null) {\n-            searchConditionList = new ArrayList<SearchCondWrapper>();\n-            searchConditionList.add(new SearchCondWrapper());\n-        } else {\n-            searchConditionList = getSearchCondWrappers(initCond, null);\n+        this.searchClauses = new ArrayList<SearchClause>();\n+        this.searchClauses.add(new SearchClause());\n+        if (StringUtils.isNotBlank(fiql)) {\n+            try {\n+                FiqlParser<SearchBean> fiqlParser = new FiqlParser<SearchBean>(\n+                        SearchBean.class, SyncopeFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n+                List<SearchClause> parsed = getSearchClauses(fiqlParser.parse(fiql));\n+\n+                this.searchClauses.clear();\n+                this.searchClauses.addAll(parsed);\n+            } catch (Exception e) {\n+                LOG.error(\"Unparseable FIQL expression '{}'\", fiql, e);\n+            }\n         }\n-        searchFormContainer.add(new SearchView(\"searchView\", searchConditionList, searchFormContainer, required,\n-                attributeTypes, filterTypes, anames, dnames, roleNames, resourceNames, entitlements));\n \n+        searchFormContainer.add(new SearchView(\"searchView\", searchClauses, searchFormContainer, required,\n+                types, anames, dnames, roleNames, resourceNames, entitlements));\n         add(searchFormContainer);\n     }\n \n@@ -155,24 +156,7 @@ protected void populate() {\n \n             @Override\n             protected List<String> load() {\n-                final List<String> details = new ArrayList<String>();\n-\n-                Class<?> clazz = attributableType == AttributableType.USER\n-                        ? UserTO.class\n-                        : RoleTO.class;\n-\n-                // loop on class and all superclasses searching for field\n-                while (clazz != null && clazz != Object.class) {\n-                    for (Field field : clazz.getDeclaredFields()) {\n-                        if (!ArrayUtils.contains(ATTRIBUTES_NOTINCLUDED, field.getName())) {\n-                            details.add(field.getName());\n-                        }\n-                    }\n-                    clazz = clazz.getSuperclass();\n-                }\n-\n-                Collections.reverse(details);\n-                return details;\n+                return SearchableFields.get(attributableType);\n             }\n         };\n \n@@ -215,180 +199,192 @@ protected List<String> load() {\n                 return result;\n             }\n         };\n-\n-        attributeTypes = new LoadableDetachableModel<List<AttributeCond.Type>>() {\n-\n-            private static final long serialVersionUID = 5275935387613157437L;\n-\n-            @Override\n-            protected List<AttributeCond.Type> load() {\n-                return Arrays.asList(AttributeCond.Type.values());\n-            }\n-        };\n     }\n \n     public FeedbackPanel getSearchFeedback() {\n         return searchFeedback;\n     }\n \n-    private List<SearchCondWrapper> getSearchCondWrappers(final NodeCond searchCond, final NodeCond.Type type) {\n-        LOG.debug(\"Search condition: {}\", searchCond);\n-\n-        List<SearchCondWrapper> wrappers = new ArrayList<SearchCondWrapper>();\n+    private SearchClause getPrimitiveSearchClause(final SearchCondition<SearchBean> sc) {\n+        SearchClause searchClause = new SearchClause();\n \n-        switch (searchCond.getType()) {\n-            case LEAF:\n-            case NOT_LEAF:\n-                final SearchCondWrapper wrapper = getSearchCondWrapper(searchCond);\n+        String property = sc.getCondition().getKeySet().iterator().next();\n+        searchClause.setProperty(property);\n+        String value = sc.getCondition().get(property);\n+        searchClause.setValue(value);\n \n-                if (type != null) {\n-                    switch (type) {\n-                        case AND:\n-                            wrapper.setOperationType(OperationType.AND);\n-                            break;\n-                        case OR:\n-                            wrapper.setOperationType(OperationType.OR);\n-                            break;\n-                        default:\n-                        // nothing to specify\n-                    }\n+        if (SpecialAttr.ROLES.toString().equals(property)) {\n+            searchClause.setType(SearchClause.Type.MEMBERSHIP);\n+            for (String label : roleNames.getObject()) {\n+                if (value.equals(label.substring(0, label.indexOf(' ')))) {\n+                    searchClause.setProperty(label);\n                 }\n+            }\n+        } else if (SpecialAttr.RESOURCES.toString().equals(property)) {\n+            searchClause.setType(SearchClause.Type.RESOURCE);\n+        } else if (SpecialAttr.ENTITLEMENTS.toString().equals(property)) {\n+            searchClause.setType(SearchClause.Type.ENTITLEMENT);\n+        } else {\n+            searchClause.setType(SearchClause.Type.ATTRIBUTE);\n+        }\n \n-                wrappers.add(wrapper);\n+        switch (sc.getConditionType()) {\n+            case EQUALS:\n+                searchClause.setComparator(SpecialAttr.NULL.toString().equals(value)\n+                        ? SearchClause.Comparator.IS_NULL : SearchClause.Comparator.EQUALS);\n                 break;\n \n-            case AND:\n-            case OR:\n-                wrappers.addAll(getSearchCondWrappers(searchCond.getLeftNodeCond(), type));\n-                wrappers.addAll(getSearchCondWrappers(searchCond.getRightNodeCond(), searchCond.getType()));\n+            case NOT_EQUALS:\n+                searchClause.setComparator(SpecialAttr.NULL.toString().equals(value)\n+                        ? SearchClause.Comparator.IS_NOT_NULL : SearchClause.Comparator.NOT_EQUALS);\n                 break;\n \n-            default:\n-        }\n+            case GREATER_OR_EQUALS:\n+                searchClause.setComparator(SearchClause.Comparator.GREATER_OR_EQUALS);\n+                break;\n \n-        LOG.debug(\"Search condition wrappers: {}\", wrappers);\n+            case GREATER_THAN:\n+                searchClause.setComparator(SearchClause.Comparator.GREATER_THAN);\n+                break;\n \n-        return wrappers;\n-    }\n+            case LESS_OR_EQUALS:\n+                searchClause.setComparator(SearchClause.Comparator.LESS_OR_EQUALS);\n+                break;\n \n-    private SearchCondWrapper getSearchCondWrapper(final NodeCond searchCond) {\n-        SearchCondWrapper wrapper = new SearchCondWrapper();\n+            case LESS_THAN:\n+                searchClause.setComparator(SearchClause.Comparator.LESS_THAN);\n+                break;\n \n-        if (searchCond.getAttributableCond() != null) {\n-            wrapper.setFilterType(SearchCondWrapper.FilterType.ATTRIBUTE);\n-            wrapper.setFilterName(searchCond.getAttributableCond().getSchema());\n-            wrapper.setType(searchCond.getAttributableCond().getType());\n-            wrapper.setFilterValue(searchCond.getAttributableCond().getExpression());\n-        }\n-        if (searchCond.getAttributeCond() != null) {\n-            wrapper.setFilterType(SearchCondWrapper.FilterType.ATTRIBUTE);\n-            wrapper.setFilterName(searchCond.getAttributeCond().getSchema());\n-            wrapper.setType(searchCond.getAttributeCond().getType());\n-            wrapper.setFilterValue(searchCond.getAttributeCond().getExpression());\n-        }\n-        if (searchCond.getMembershipCond() != null) {\n-            wrapper.setFilterType(SearchCondWrapper.FilterType.MEMBERSHIP);\n-            RoleTO role = new RoleTO();\n-            role.setId(searchCond.getMembershipCond().getRoleId());\n-            role.setName(searchCond.getMembershipCond().getRoleName());\n-            wrapper.setFilterName(role.getDisplayName());\n-        }\n-        if (searchCond.getResourceCond() != null) {\n-            wrapper.setFilterType(SearchCondWrapper.FilterType.RESOURCE);\n-            wrapper.setFilterName(searchCond.getResourceCond().getResourceName());\n-        }\n-        if (searchCond.getEntitlementCond() != null) {\n-            wrapper.setFilterType(SearchCondWrapper.FilterType.ENTITLEMENT);\n-            wrapper.setFilterName(searchCond.getEntitlementCond().getExpression());\n+            default:\n+                break;\n         }\n \n-        wrapper.setNotOperator(searchCond.getType() == NodeCond.Type.NOT_LEAF);\n-\n-        return wrapper;\n-    }\n-\n-    public NodeCond buildSearchCond() {\n-        return buildSearchCond(searchConditionList);\n+        return searchClause;\n     }\n \n-    private NodeCond buildSearchCond(final List<SearchCondWrapper> conditions) {\n-        SearchCondWrapper searchConditionWrapper = conditions.get(0);\n-        if (searchConditionWrapper == null || searchConditionWrapper.getFilterType() == null) {\n-            return null;\n-        }\n-        LOG.debug(\"Search condition wrapper: {}\", searchConditionWrapper);\n-\n-        NodeCond nodeCond = null;\n-\n-        switch (searchConditionWrapper.getFilterType()) {\n-            case ATTRIBUTE:\n-                // AttributeCond or SyncopeUserCond\n-                final String schema = searchConditionWrapper.getFilterName();\n+    private List<SearchClause> getCompoundSearchClause(final SearchCondition<SearchBean> sc) {\n+        List<SearchClause> clauses = new ArrayList<SearchClause>();\n \n-                final AttributeCond attributeCond;\n-                if (dnames.getObject().contains(schema)) {\n-                    attributeCond = new AttributableCond();\n-                    nodeCond = searchConditionWrapper.isNotOperator()\n-                            ? NodeCond.getNotLeafCond((AttributableCond) attributeCond)\n-                            : NodeCond.getLeafCond((AttributableCond) attributeCond);\n-                } else {\n-                    attributeCond = new AttributeCond();\n-                    nodeCond = searchConditionWrapper.isNotOperator()\n-                            ? NodeCond.getNotLeafCond(attributeCond)\n-                            : NodeCond.getLeafCond(attributeCond);\n+        for (SearchCondition<SearchBean> searchCondition : sc.getSearchConditions()) {\n+            if (searchCondition.getStatement() == null) {\n+                clauses.addAll(getCompoundSearchClause(searchCondition));\n+            } else {\n+                SearchClause clause = getPrimitiveSearchClause(searchCondition);\n+                if (sc.getConditionType() == ConditionType.AND) {\n+                    clause.setOperator(SearchClause.Operator.AND);\n                 }\n+                if (sc.getConditionType() == ConditionType.OR) {\n+                    clause.setOperator(SearchClause.Operator.OR);\n+                }\n+                clauses.add(clause);\n+            }\n+        }\n \n-                attributeCond.setSchema(schema);\n-                attributeCond.setType(searchConditionWrapper.getType());\n-                attributeCond.setExpression(searchConditionWrapper.getFilterValue());\n-\n-                break;\n+        return clauses;\n+    }\n \n-            case MEMBERSHIP:\n-                final MembershipCond membershipCond = new MembershipCond();\n-                membershipCond.setRoleId(RoleTO.fromDisplayName(searchConditionWrapper.getFilterName()));\n-                membershipCond.setRoleName(searchConditionWrapper.getFilterName().\n-                        substring(searchConditionWrapper.getFilterName().indexOf(' ') + 1));\n+    private List<SearchClause> getSearchClauses(final SearchCondition<SearchBean> sc) {\n+        List<SearchClause> clauses = new ArrayList<SearchClause>();\n \n-                nodeCond = searchConditionWrapper.isNotOperator()\n-                        ? NodeCond.getNotLeafCond(membershipCond)\n-                        : NodeCond.getLeafCond(membershipCond);\n+        if (sc.getStatement() == null) {\n+            clauses.addAll(getCompoundSearchClause(sc));\n+        } else {\n+            clauses.add(getPrimitiveSearchClause(sc));\n+        }\n \n-                break;\n+        return clauses;\n+    }\n \n-            case RESOURCE:\n-                final ResourceCond resourceCond = new ResourceCond();\n-                resourceCond.setResourceName(searchConditionWrapper.getFilterName());\n+    public String buildFIQL() {\n+        LOG.debug(\"Generating FIQL from List<SearchClause>: {}\", searchClauses);\n+\n+        SyncopeFiqlSearchConditionBuilder builder = SyncopeClient.getSearchConditionBuilder();\n+\n+        CompleteCondition prevCondition;\n+        CompleteCondition condition = null;\n+        for (int i = 0; i < searchClauses.size(); i++) {\n+            prevCondition = condition;\n+\n+            switch (searchClauses.get(i).getType()) {\n+                case ENTITLEMENT:\n+                    condition = searchClauses.get(i).getComparator() == SearchClause.Comparator.EQUALS\n+                            ? builder.hasEntitlements(searchClauses.get(i).getProperty())\n+                            : builder.hasNotEntitlements(searchClauses.get(i).getProperty());\n+                    break;\n+\n+                case MEMBERSHIP:\n+                    Long roleId = Long.valueOf(searchClauses.get(i).getProperty().split(\" \")[0]);\n+                    condition = searchClauses.get(i).getComparator() == SearchClause.Comparator.EQUALS\n+                            ? builder.hasRoles(roleId)\n+                            : builder.hasNotRoles(roleId);\n+                    break;\n+\n+                case RESOURCE:\n+                    condition = searchClauses.get(i).getComparator() == SearchClause.Comparator.EQUALS\n+                            ? builder.hasResources(searchClauses.get(i).getProperty())\n+                            : builder.hasNotResources(searchClauses.get(i).getProperty());\n+                    break;\n+\n+                case ATTRIBUTE:\n+                    SyncopeProperty property = builder.is(searchClauses.get(i).getProperty());\n+                    switch (searchClauses.get(i).getComparator()) {\n+                        case IS_NULL:\n+                            condition = builder.isNull(searchClauses.get(i).getProperty());\n+                            break;\n \n-                nodeCond = searchConditionWrapper.isNotOperator()\n-                        ? NodeCond.getNotLeafCond(resourceCond)\n-                        : NodeCond.getLeafCond(resourceCond);\n+                        case IS_NOT_NULL:\n+                            condition = builder.isNotNull(searchClauses.get(i).getProperty());\n+                            break;\n \n-                break;\n+                        case LESS_THAN:\n+                            condition = StringUtils.isNumeric(searchClauses.get(i).getProperty())\n+                                    ? property.lessThan(NumberUtils.toDouble(searchClauses.get(i).getValue()))\n+                                    : property.lexicalBefore(searchClauses.get(i).getValue());\n+                            break;\n \n-            case ENTITLEMENT:\n-                final EntitlementCond entitlementCond = new EntitlementCond();\n-                entitlementCond.setExpression(searchConditionWrapper.getFilterName());\n+                        case LESS_OR_EQUALS:\n+                            condition = StringUtils.isNumeric(searchClauses.get(i).getProperty())\n+                                    ? property.lessOrEqualTo(NumberUtils.toDouble(searchClauses.get(i).getValue()))\n+                                    : property.lexicalNotAfter(searchClauses.get(i).getValue());\n+                            break;\n \n-                nodeCond = searchConditionWrapper.isNotOperator()\n-                        ? NodeCond.getNotLeafCond(entitlementCond)\n-                        : NodeCond.getLeafCond(entitlementCond);\n-                break;\n+                        case GREATER_THAN:\n+                            condition = StringUtils.isNumeric(searchClauses.get(i).getProperty())\n+                                    ? property.greaterThan(NumberUtils.toDouble(searchClauses.get(i).getValue()))\n+                                    : property.lexicalAfter(searchClauses.get(i).getValue());\n+                            break;\n \n-            default:\n-            // nothing to do\n-        }\n+                        case GREATER_OR_EQUALS:\n+                            condition = StringUtils.isNumeric(searchClauses.get(i).getProperty())\n+                                    ? property.greaterOrEqualTo(NumberUtils.toDouble(searchClauses.get(i).getValue()))\n+                                    : property.lexicalNotBefore(searchClauses.get(i).getValue());\n+                            break;\n \n-        LOG.debug(\"Processed condition {}\", nodeCond);\n+                        case NOT_EQUALS:\n+                            condition = property.notEqualTo(searchClauses.get(i).getValue());\n+                            break;\n \n-        if (conditions.size() > 1) {\n-            List<SearchCondWrapper> subList = conditions.subList(1, conditions.size());\n+                        case EQUALS:\n+                        default:\n+                            condition = property.equalTo(searchClauses.get(i).getValue());\n+                            break;\n+                    }\n+                default:\n+                    break;\n+            }\n \n-            nodeCond = OperationType.OR.equals(subList.get(0).getOperationType())\n-                    ? NodeCond.getOrCond(nodeCond, buildSearchCond(subList))\n-                    : NodeCond.getAndCond(nodeCond, buildSearchCond(subList));\n+            if (i > 0) {\n+                if (searchClauses.get(i).getOperator() == SearchClause.Operator.AND) {\n+                    condition = builder.and(prevCondition, condition);\n+                }\n+                if (searchClauses.get(i).getOperator() == SearchClause.Operator.OR) {\n+                    condition = builder.or(prevCondition, condition);\n+                }\n+            }\n         }\n \n-        return nodeCond;\n+        String fiql = condition == null ? StringUtils.EMPTY : condition.query();\n+        LOG.debug(\"Generated FIQL: {}\", fiql);\n+        return fiql;\n     }\n }"},{"sha":"08b714830a09d0dc0d123dd05fbd560fea678006","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AbstractSearchResultPanel.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchResultPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,7 +20,6 @@\n \n import java.util.Collection;\n import java.util.List;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.console.commons.AttributableDataProvider;\n import org.apache.syncope.console.commons.Constants;\n@@ -124,7 +123,7 @@ public abstract class AbstractSearchResultPanel extends Panel implements IEventS\n     /**\n      * Filter used in case of filtered search.\n      */\n-    private NodeCond filter;\n+    private String fiql;\n \n     /**\n      * Result table.\n@@ -157,7 +156,7 @@ public abstract class AbstractSearchResultPanel extends Panel implements IEventS\n     protected final AbstractBasePage page;\n \n     protected <T extends AbstractAttributableTO> AbstractSearchResultPanel(final String id, final boolean filtered,\n-            final NodeCond searchCond, final PageReference pageRef, final AbstractAttributableRestClient restClient) {\n+            final String fiql, final PageReference pageRef, final AbstractAttributableRestClient restClient) {\n \n         super(id);\n \n@@ -166,7 +165,7 @@ protected <T extends AbstractAttributableTO> AbstractSearchResultPanel(final Str\n         this.page = (AbstractBasePage) pageRef.getPage();\n \n         this.filtered = filtered;\n-        this.filter = searchCond;\n+        this.fiql = fiql;\n         this.feedbackPanel = page.getFeedbackPanel();\n \n         this.restClient = restClient;\n@@ -236,9 +235,9 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         setWindowClosedReloadCallback(displaymodal);\n     }\n \n-    public void search(final NodeCond searchCond, final AjaxRequestTarget target) {\n-        this.filter = searchCond;\n-        dataProvider.setSearchCond(filter);\n+    public void search(final String fiql, final AjaxRequestTarget target) {\n+        this.fiql = fiql;\n+        dataProvider.setFIQL(fiql);\n         target.add(container);\n     }\n \n@@ -248,7 +247,7 @@ private void updateResultTable(final boolean create) {\n \n     private void updateResultTable(final boolean create, final int rows) {\n         dataProvider = new AttributableDataProvider(restClient, rows, filtered);\n-        dataProvider.setSearchCond(filter);\n+        dataProvider.setFIQL(fiql);\n \n         final int currentPage = resultTable != null\n                 ? (create"},{"sha":"361dc0c128e2ea9b95a4043a94ee090de8b90574","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AttributesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -110,7 +110,7 @@ protected void populateItem(final ListItem<AttributeTO> item) {\n                 final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n                 item.add(jexlHelp);\n \n-                final AjaxLink questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n+                final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n                 item.add(questionMarkJexlHelp);\n \n                 if (!templateMode) {"},{"sha":"57554c69e570848ae49b8d0b18385b017c7ce430","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/NotificationTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.NotificationTaskTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.NotificationTaskModalPage;\n import org.apache.syncope.console.pages.Tasks;"},{"sha":"381cb64d22efe319e6505b52bf1ca2d400ee0ba3","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PoliciesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.PolicyType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;"},{"sha":"4b0e568e75fef8f75988474205eb96086604e207","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PropagationTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.PropagationTaskTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.PropagationTaskModalPage;\n import org.apache.syncope.console.pages.Tasks;"},{"sha":"02442dbccd7664b4a8163b116fb3ba533d919b27","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSearchPanel.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,9 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.console.commons.SearchCondWrapper;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n public class RoleSearchPanel extends AbstractSearchPanel {\n@@ -37,14 +35,14 @@ public static class Builder implements Serializable {\n \n         private String id;\n \n-        private NodeCond initCond = null;\n+        private String fiql = null;\n \n         public Builder(final String id) {\n             this.id = id;\n         }\n \n-        public RoleSearchPanel.Builder nodeCond(final NodeCond initCond) {\n-            this.initCond = initCond;\n+        public RoleSearchPanel.Builder fiql(final String fiql) {\n+            this.fiql = fiql;\n             return this;\n         }\n \n@@ -54,23 +52,23 @@ public RoleSearchPanel build() {\n     }\n \n     private RoleSearchPanel(final Builder builder) {\n-        super(builder.id, AttributableType.ROLE, builder.initCond, true);\n+        super(builder.id, AttributableType.ROLE, builder.fiql, true);\n     }\n \n     @Override\n     protected void populate() {\n         super.populate();\n \n-        this.filterTypes = new LoadableDetachableModel<List<SearchCondWrapper.FilterType>>() {\n+        this.types = new LoadableDetachableModel<List<SearchClause.Type>>() {\n \n             private static final long serialVersionUID = 5275935387613157437L;\n \n             @Override\n-            protected List<SearchCondWrapper.FilterType> load() {\n-                final List<SearchCondWrapper.FilterType> result = new ArrayList<SearchCondWrapper.FilterType>();\n-                result.add(SearchCondWrapper.FilterType.ATTRIBUTE);\n-                result.add(SearchCondWrapper.FilterType.ENTITLEMENT);\n-                result.add(SearchCondWrapper.FilterType.RESOURCE);\n+            protected List<SearchClause.Type> load() {\n+                final List<SearchClause.Type> result = new ArrayList<SearchClause.Type>();\n+                result.add(SearchClause.Type.ATTRIBUTE);\n+                result.add(SearchClause.Type.ENTITLEMENT);\n+                result.add(SearchClause.Type.RESOURCE);\n                 return result;\n             }\n         };"},{"sha":"5aca2a3a462d81e2a487b489199a052ec8108784","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSearchResultPanel.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,10 +22,9 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.RoleTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.ResultStatusModalPage;\n import org.apache.syncope.console.pages.RoleModalPage;\n@@ -53,10 +52,9 @@ public class RoleSearchResultPanel extends AbstractSearchResultPanel {\n     private final static String PAGEID = \"Roles\";\n \n     public <T extends AbstractAttributableTO> RoleSearchResultPanel(final String id, final boolean filtered,\n-            final NodeCond searchCond, final PageReference callerRef,\n-            final AbstractAttributableRestClient restClient) {\n+            final String fiql, final PageReference callerRef, final AbstractAttributableRestClient restClient) {\n \n-        super(id, filtered, searchCond, callerRef, restClient);\n+        super(id, filtered, fiql, callerRef, restClient);\n         initResultTable();\n     }\n \n@@ -65,7 +63,7 @@ protected List<IColumn<AbstractAttributableTO, String>> getColumns() {\n         final List<IColumn<AbstractAttributableTO, String>> columns =\n                 new ArrayList<IColumn<AbstractAttributableTO, String>>();\n \n-        final String[] colnames = {\"id\", \"name\", \"entitlements\"};\n+        final String[] colnames = { \"id\", \"name\", \"entitlements\" };\n         for (String name : colnames) {\n             columns.add(\n                     new PropertyColumn<AbstractAttributableTO, String>(new ResourceModel(name, name), name, name));"},{"sha":"e0f9d3a41bfe838adcca9a86bd66ed442f395a78","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSummaryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,7 +20,7 @@\n \n import java.io.Serializable;\n import org.apache.syncope.common.to.RoleTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.XMLRolesReader;\n import org.apache.syncope.console.pages.RoleModalPage;\n import org.apache.syncope.console.rest.RoleRestClient;"},{"sha":"ce21f37ee24b98150ed7f7150f60de0d296c898d","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleTabPanel.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,10 +18,9 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n-import org.apache.syncope.common.search.MembershipCond;\n-import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.to.RoleTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.XMLRolesReader;\n import org.apache.syncope.console.pages.ResultStatusModalPage;\n@@ -181,11 +180,11 @@ public Page createPage() {\n \n             @Override\n             protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n-                final MembershipCond membershipCond = new MembershipCond();\n-                membershipCond.setRoleName(selectedNode.getName());\n-                NodeCond cond = NodeCond.getLeafCond(membershipCond);\n-\n-                userListContainer.replace(new UserSearchResultPanel(\"userList\", true, cond, pageRef, userRestClient));\n+                userListContainer.replace(new UserSearchResultPanel(\"userList\",\n+                        true,\n+                        SyncopeClient.getSearchConditionBuilder().hasRoles(selectedNode.getId()).query(),\n+                        pageRef,\n+                        userRestClient));\n \n                 target.add(userListContainer);\n             }"},{"sha":"d0ac720c5ce52e4a9b0b63ba7b1df0f6487aa48c","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SchedTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.SchedTaskModalPage;\n import org.apache.syncope.console.pages.Tasks;"},{"sha":"634ea9c38a65bb37121f9b6837d16cab51ec149e","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SearchClause.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchClause.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchClause.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchClause.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.pages.panels;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+\n+public class SearchClause implements Serializable {\n+\n+    private static final long serialVersionUID = 2010794463096110104L;\n+\n+    public enum Operator {\n+\n+        AND,\n+        OR;\n+\n+    }\n+\n+    public enum Type {\n+\n+        ATTRIBUTE,\n+        MEMBERSHIP,\n+        RESOURCE,\n+        ENTITLEMENT;\n+\n+    }\n+\n+    public enum Comparator {\n+\n+        IS_NULL,\n+        IS_NOT_NULL,\n+        EQUALS,\n+        NOT_EQUALS,\n+        GREATER_OR_EQUALS,\n+        GREATER_THAN,\n+        LESS_OR_EQUALS,\n+        LESS_THAN;\n+\n+    }\n+\n+    private Operator operator;\n+\n+    private Type type;\n+\n+    private String property;\n+\n+    private Comparator comparator;\n+\n+    private String value;\n+\n+    public SearchClause() {\n+        setOperator(SearchClause.Operator.AND);\n+        setComparator(SearchClause.Comparator.EQUALS);\n+    }\n+\n+    public Operator getOperator() {\n+        return operator;\n+    }\n+\n+    public void setOperator(final Operator operator) {\n+        this.operator = operator;\n+    }\n+\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    public void setType(final Type type) {\n+        this.type = type;\n+    }\n+\n+    public String getProperty() {\n+        return property;\n+    }\n+\n+    public void setProperty(final String property) {\n+        this.property = property;\n+    }\n+\n+    public Comparator getComparator() {\n+        return comparator;\n+    }\n+\n+    public void setComparator(final Comparator comparator) {\n+        this.comparator = comparator;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(final String value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"b642dd596017815b33ee9319f040caa397cda6c2","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SearchView.java","status":"modified","additions":284,"deletions":131,"changes":415,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -19,39 +19,34 @@\n package org.apache.syncope.console.pages.panels;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.search.AttributeCond;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.console.commons.Constants;\n-import org.apache.syncope.console.commons.SearchCondWrapper;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n-import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.form.CheckBox;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n-import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.model.ResourceModel;\n \n-public class SearchView extends ListView<SearchCondWrapper> {\n+public class SearchView extends ListView<SearchClause> {\n \n     private static final long serialVersionUID = -527351923968737757L;\n \n     private final WebMarkupContainer searchFormContainer;\n \n     private final boolean required;\n \n-    private final IModel<List<AttributeCond.Type>> attributeTypes;\n-\n-    private final IModel<List<SearchCondWrapper.FilterType>> filterTypes;\n+    private final IModel<List<SearchClause.Type>> types;\n \n     private final IModel<List<String>> anames;\n \n@@ -63,11 +58,10 @@ public class SearchView extends ListView<SearchCondWrapper> {\n \n     private final IModel<List<String>> entitlements;\n \n-    public SearchView(final String id, final List<? extends SearchCondWrapper> list,\n+    public SearchView(final String id, final List<? extends SearchClause> list,\n             final WebMarkupContainer searchFormContainer,\n             final boolean required,\n-            final IModel<List<AttributeCond.Type>> attributeTypes,\n-            final IModel<List<SearchCondWrapper.FilterType>> filterTypes,\n+            final IModel<List<SearchClause.Type>> types,\n             final IModel<List<String>> anames,\n             final IModel<List<String>> dnames,\n             final IModel<List<String>> roleNames,\n@@ -78,8 +72,7 @@ public SearchView(final String id, final List<? extends SearchCondWrapper> list,\n \n         this.searchFormContainer = searchFormContainer;\n         this.required = required;\n-        this.attributeTypes = attributeTypes;\n-        this.filterTypes = filterTypes;\n+        this.types = types;\n         this.anames = anames;\n         this.dnames = dnames;\n         this.roleNames = roleNames;\n@@ -88,173 +81,216 @@ public SearchView(final String id, final List<? extends SearchCondWrapper> list,\n     }\n \n     @Override\n-    protected void populateItem(final ListItem<SearchCondWrapper> item) {\n-        final SearchCondWrapper searchCondition = item.getModelObject();\n-\n-        if (item.getIndex() == 0) {\n-            item.add(new Label(\"operationType\", \"\"));\n-        } else {\n-            item.add(new Label(\"operationType\", searchCondition.getOperationType().toString()));\n-        }\n+    protected void populateItem(final ListItem<SearchClause> item) {\n+        final SearchClause searchClause = item.getModelObject();\n \n-        final CheckBox notOperator = new CheckBox(\"notOperator\", new PropertyModel(searchCondition, \"notOperator\"));\n-        notOperator.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+        final DropDownChoice<SearchClause.Operator> operator = new DropDownChoice<SearchClause.Operator>(\"operator\",\n+                new PropertyModel<SearchClause.Operator>(searchClause, \"operator\"),\n+                Arrays.asList(SearchClause.Operator.values()));\n+        operator.setOutputMarkupPlaceholderTag(true);\n+        operator.setNullValid(false);\n+        operator.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n             }\n         });\n-        item.add(notOperator);\n+        item.add(operator);\n+        if (item.getIndex() == 0) {\n+            operator.setVisible(false);\n+        }\n \n-        final DropDownChoice<AttributeCond.Type> type = new DropDownChoice<AttributeCond.Type>(\"type\",\n-                new PropertyModel<AttributeCond.Type>(searchCondition, \"type\"), attributeTypes);\n+        final DropDownChoice<SearchClause.Type> type = new DropDownChoice<SearchClause.Type>(\"type\",\n+                new PropertyModel<SearchClause.Type>(searchClause, \"type\"), types);\n+        type.setOutputMarkupId(true);\n+        type.setRequired(required);\n         type.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n+                target.add(searchFormContainer);\n             }\n         });\n         item.add(type);\n \n-        final DropDownChoice<String> filterNameChooser = new DropDownChoice<String>(\"filterName\",\n-                new PropertyModel<String>(searchCondition, \"filterName\"), (IModel) null);\n-        filterNameChooser.setOutputMarkupId(true);\n-        filterNameChooser.setRequired(required);\n-        filterNameChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+        @SuppressWarnings(\"unchecked\")\n+        final DropDownChoice<String> property = new DropDownChoice<String>(\"property\",\n+                new PropertyModel<String>(searchClause, \"property\"), (IModel) null);\n+        property.setOutputMarkupId(true);\n+        property.setRequired(required);\n+        property.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n             }\n         });\n-        item.add(filterNameChooser);\n+        item.add(property);\n \n-        final TextField<String> filterValue = new TextField<String>(\"filterValue\", new PropertyModel<String>(\n-                searchCondition, \"filterValue\"));\n-        filterValue.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+        final TextField<String> value = new TextField<String>(\"value\",\n+                new PropertyModel<String>(searchClause, \"value\"));\n+        value.setOutputMarkupId(true);\n+        value.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n             }\n         });\n-        item.add(filterValue);\n+        item.add(value);\n \n-        final DropDownChoice<SearchCondWrapper.FilterType> filterTypeChooser =\n-                new DropDownChoice<SearchCondWrapper.FilterType>(\"filterType\",\n-                new PropertyModel<SearchCondWrapper.FilterType>(searchCondition, \"filterType\"), filterTypes);\n-        filterTypeChooser.setOutputMarkupId(true);\n-        filterTypeChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+        final DropDownChoice<SearchClause.Comparator> comparator =\n+                new DropDownChoice<SearchClause.Comparator>(\"comparator\",\n+                        new PropertyModel<SearchClause.Comparator>(searchClause, \"comparator\"),\n+                        Collections.<SearchClause.Comparator>emptyList());\n+        comparator.setOutputMarkupId(true);\n+        comparator.setNullValid(false);\n+        comparator.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                target.add(searchFormContainer);\n-            }\n-        });\n-        filterTypeChooser.setRequired(required);\n-        item.add(filterTypeChooser);\n-\n-        AjaxButton addAndButton = new IndicatingAjaxButton(\"addAndButton\", new ResourceModel(\"addAndButton\")) {\n+                if (type.getModelObject() == SearchClause.Type.ATTRIBUTE) {\n+                    if (comparator.getModelObject() == SearchClause.Comparator.IS_NULL\n+                            || comparator.getModelObject() == SearchClause.Comparator.IS_NOT_NULL) {\n \n-            private static final long serialVersionUID = -4804368561204623354L;\n-\n-            @Override\n-            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                SearchCondWrapper conditionWrapper = new SearchCondWrapper();\n-                conditionWrapper.setOperationType(SearchCondWrapper.OperationType.AND);\n-                SearchView.this.getModelObject().add(conditionWrapper);\n-                target.add(searchFormContainer);\n-            }\n-\n-            @Override\n-            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n-                target.add(searchFormContainer);\n+                        value.setEnabled(false);\n+                    } else {\n+                        value.setEnabled(true);\n+                    }\n+                    target.add(value);\n+                }\n             }\n-        };\n-        addAndButton.setDefaultFormProcessing(false);\n-        if (item.getIndex() != getModelObject().size() - 1) {\n-            addAndButton.setVisible(false);\n-        }\n-        item.add(addAndButton);\n+        });\n+        comparator.setRequired(required);\n+        item.add(comparator);\n \n-        AjaxButton addOrButton = new IndicatingAjaxButton(\"addOrButton\", new ResourceModel(\"addOrButton\")) {\n+        AjaxLink<Void> drop = new IndicatingAjaxLink<Void>(\"drop\") {\n \n-            private static final long serialVersionUID = -4804368561204623354L;\n+            private static final long serialVersionUID = -7978723352517770644L;\n \n             @Override\n-            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                SearchCondWrapper conditionWrapper = new SearchCondWrapper();\n-                conditionWrapper.setOperationType(SearchCondWrapper.OperationType.OR);\n-                SearchView.this.getModelObject().add(conditionWrapper);\n-                target.add(searchFormContainer);\n-            }\n-\n-            @Override\n-            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+            public void onClick(final AjaxRequestTarget target) {\n+                SearchView.this.getModel().getObject().remove(item.getModelObject());\n                 target.add(searchFormContainer);\n             }\n         };\n-        addOrButton.setDefaultFormProcessing(false);\n-        if (item.getIndex() != getModelObject().size() - 1) {\n-            addOrButton.setVisible(false);\n+        item.add(drop);\n+        if (item.getIndex() == 0) {\n+            drop.setVisible(false);\n+            drop.setEnabled(false);\n+        } else {\n+            drop.setVisible(true);\n+            drop.setEnabled(true);\n         }\n-        item.add(addOrButton);\n \n-        AjaxButton dropButton = new IndicatingAjaxButton(\"dropButton\", new ResourceModel(\"dropButton\")) {\n+        final AjaxLink<Void> add = new IndicatingAjaxLink<Void>(\"add\") {\n \n-            private static final long serialVersionUID = -4804368561204623354L;\n+            private static final long serialVersionUID = -7978723352517770644L;\n \n             @Override\n-            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                getList().remove(Integer.valueOf(getParent().getId()).intValue());\n-                target.add(searchFormContainer);\n-            }\n-\n-            @Override\n-            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+            public void onClick(final AjaxRequestTarget target) {\n+                SearchClause clause = new SearchClause();\n+                SearchView.this.getModel().getObject().add(clause);\n                 target.add(searchFormContainer);\n             }\n         };\n-        dropButton.setDefaultFormProcessing(false);\n-        if (item.getIndex() == 0) {\n-            dropButton.setVisible(false);\n-        }\n-        item.add(dropButton);\n+        item.add(add);\n \n-        if (searchCondition == null || searchCondition.getFilterType() == null) {\n-            filterNameChooser.setChoices(Collections.<String>emptyList());\n+        if (searchClause == null || searchClause.getType() == null) {\n+            property.setChoices(Collections.<String>emptyList());\n         } else {\n-            switch (searchCondition.getFilterType()) {\n+            switch (searchClause.getType()) {\n                 case ATTRIBUTE:\n                     final List<String> names = new ArrayList<String>(dnames.getObject());\n-\n                     if (anames.getObject() != null && !anames.getObject().isEmpty()) {\n                         names.addAll(anames.getObject());\n                     }\n                     Collections.sort(names);\n+                    property.setChoices(names);\n \n-                    filterNameChooser.setChoices(names);\n-                    if (!type.isEnabled()) {\n-                        type.setEnabled(true);\n-                        type.setRequired(true);\n-                    }\n-                    if (!filterValue.isEnabled()) {\n-                        filterValue.setEnabled(true);\n+                    comparator.setChoices(new LoadableDetachableModel<List<SearchClause.Comparator>>() {\n+\n+                        private static final long serialVersionUID = 5275935387613157437L;\n+\n+                        @Override\n+                        protected List<SearchClause.Comparator> load() {\n+                            return Arrays.asList(SearchClause.Comparator.values());\n+                        }\n+                    });\n+                    comparator.setChoiceRenderer(new IChoiceRenderer<SearchClause.Comparator>() {\n+\n+                        private static final long serialVersionUID = -9086043750227867686L;\n+\n+                        @Override\n+                        public Object getDisplayValue(final SearchClause.Comparator object) {\n+                            String display;\n+\n+                            switch (object) {\n+                                case IS_NULL:\n+                                    display = \"NULL\";\n+                                    break;\n+\n+                                case IS_NOT_NULL:\n+                                    display = \"NOT NULL\";\n+                                    break;\n+\n+                                case EQUALS:\n+                                    display = \"==\";\n+                                    break;\n+\n+                                case NOT_EQUALS:\n+                                    display = \"!=\";\n+                                    break;\n+\n+                                case LESS_THAN:\n+                                    display = \"<\";\n+                                    break;\n+\n+                                case LESS_OR_EQUALS:\n+                                    display = \"<=\";\n+                                    break;\n+\n+                                case GREATER_THAN:\n+                                    display = \">\";\n+                                    break;\n+\n+                                case GREATER_OR_EQUALS:\n+                                    display = \">=\";\n+                                    break;\n+\n+                                default:\n+                                    display = StringUtils.EMPTY;\n+                            }\n+\n+                            return display;\n+                        }\n+\n+                        @Override\n+                        public String getIdValue(final SearchClause.Comparator object, int index) {\n+                            return getDisplayValue(object).toString();\n+                        }\n+                    });\n+                    if (!comparator.isEnabled()) {\n+                        comparator.setEnabled(true);\n+                        comparator.setRequired(true);\n                     }\n \n+                    if (!value.isEnabled()) {\n+                        value.setEnabled(true);\n+                    }\n                     break;\n \n                 case MEMBERSHIP:\n-                    filterNameChooser.setChoices(roleNames);\n-                    filterNameChooser.setChoiceRenderer(new IChoiceRenderer<String>() {\n+                    property.setChoices(roleNames);\n+                    property.setChoiceRenderer(new IChoiceRenderer<String>() {\n \n                         private static final long serialVersionUID = -4288397951948436434L;\n \n@@ -268,39 +304,156 @@ public String getIdValue(final String object, final int index) {\n                             return object;\n                         }\n                     });\n-                    type.setEnabled(false);\n-                    type.setRequired(false);\n-                    type.setModelObject(null);\n \n-                    filterValue.setEnabled(false);\n-                    filterValue.setModelObject(\"\");\n+                    comparator.setChoices(new LoadableDetachableModel<List<SearchClause.Comparator>>() {\n+\n+                        private static final long serialVersionUID = 5275935387613157437L;\n+\n+                        @Override\n+                        protected List<SearchClause.Comparator> load() {\n+                            List<SearchClause.Comparator> comparators = new ArrayList<SearchClause.Comparator>();\n+                            comparators.add(SearchClause.Comparator.EQUALS);\n+                            comparators.add(SearchClause.Comparator.NOT_EQUALS);\n+                            return comparators;\n+                        }\n+                    });\n+                    comparator.setChoiceRenderer(new IChoiceRenderer<SearchClause.Comparator>() {\n+\n+                        private static final long serialVersionUID = -9086043750227867686L;\n+\n+                        @Override\n+                        public Object getDisplayValue(final SearchClause.Comparator object) {\n+                            String display;\n+\n+                            switch (object) {\n+                                case EQUALS:\n+                                    display = \"IN\";\n+                                    break;\n+\n+                                case NOT_EQUALS:\n+                                    display = \"NOT IN\";\n+                                    break;\n+\n+                                default:\n+                                    display = StringUtils.EMPTY;\n+                            }\n+\n+                            return display;\n+                        }\n+\n+                        @Override\n+                        public String getIdValue(final SearchClause.Comparator object, final int index) {\n+                            return getDisplayValue(object).toString();\n+                        }\n+                    });\n+\n+                    value.setEnabled(false);\n+                    value.setModelObject(\"\");\n \n                     break;\n \n                 case RESOURCE:\n-                    filterNameChooser.setChoices(resourceNames);\n-                    type.setEnabled(false);\n-                    type.setRequired(false);\n-                    type.setModelObject(null);\n+                    property.setChoices(resourceNames);\n+\n+                    comparator.setChoices(new LoadableDetachableModel<List<SearchClause.Comparator>>() {\n \n-                    filterValue.setEnabled(false);\n-                    filterValue.setModelObject(\"\");\n+                        private static final long serialVersionUID = 5275935387613157437L;\n+\n+                        @Override\n+                        protected List<SearchClause.Comparator> load() {\n+                            List<SearchClause.Comparator> comparators = new ArrayList<SearchClause.Comparator>();\n+                            comparators.add(SearchClause.Comparator.EQUALS);\n+                            comparators.add(SearchClause.Comparator.NOT_EQUALS);\n+                            return comparators;\n+                        }\n+                    });\n+                    comparator.setChoiceRenderer(new IChoiceRenderer<SearchClause.Comparator>() {\n+\n+                        private static final long serialVersionUID = -9086043750227867686L;\n+\n+                        @Override\n+                        public Object getDisplayValue(final SearchClause.Comparator object) {\n+                            String display;\n+\n+                            switch (object) {\n+                                case EQUALS:\n+                                    display = \"HAS\";\n+                                    break;\n+\n+                                case NOT_EQUALS:\n+                                    display = \"HAS NOT\";\n+                                    break;\n+\n+                                default:\n+                                    display = StringUtils.EMPTY;\n+                            }\n+\n+                            return display;\n+                        }\n+\n+                        @Override\n+                        public String getIdValue(final SearchClause.Comparator object, final int index) {\n+                            return getDisplayValue(object).toString();\n+                        }\n+                    });\n+\n+                    value.setEnabled(false);\n+                    value.setModelObject(\"\");\n \n                     break;\n \n                 case ENTITLEMENT:\n-                    filterNameChooser.setChoices(entitlements);\n-                    type.setEnabled(false);\n-                    type.setRequired(false);\n-                    type.setModelObject(null);\n+                    property.setChoices(entitlements);\n+\n+                    comparator.setChoices(new LoadableDetachableModel<List<SearchClause.Comparator>>() {\n+\n+                        private static final long serialVersionUID = 5275935387613157437L;\n+\n+                        @Override\n+                        protected List<SearchClause.Comparator> load() {\n+                            List<SearchClause.Comparator> comparators = new ArrayList<SearchClause.Comparator>();\n+                            comparators.add(SearchClause.Comparator.EQUALS);\n+                            comparators.add(SearchClause.Comparator.NOT_EQUALS);\n+                            return comparators;\n+                        }\n+                    });\n+                    comparator.setChoiceRenderer(new IChoiceRenderer<SearchClause.Comparator>() {\n+\n+                        private static final long serialVersionUID = -9086043750227867686L;\n+\n+                        @Override\n+                        public Object getDisplayValue(final SearchClause.Comparator object) {\n+                            String display;\n+\n+                            switch (object) {\n+                                case EQUALS:\n+                                    display = \"HAS\";\n+                                    break;\n+\n+                                case NOT_EQUALS:\n+                                    display = \"HAS NOT\";\n+                                    break;\n+\n+                                default:\n+                                    display = StringUtils.EMPTY;\n+                            }\n+\n+                            return display;\n+                        }\n+\n+                        @Override\n+                        public String getIdValue(final SearchClause.Comparator object, final int index) {\n+                            return getDisplayValue(object).toString();\n+                        }\n+                    });\n \n-                    filterValue.setEnabled(false);\n-                    filterValue.setModelObject(\"\");\n+                    value.setEnabled(false);\n+                    value.setModelObject(\"\");\n \n                     break;\n \n                 default:\n-                    filterNameChooser.setChoices(Collections.<String>emptyList());\n+                    property.setChoices(Collections.<String>emptyList());\n             }\n         }\n     }"},{"sha":"3062734a9476752d5b8dd7b95319397eff1b14cb","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SelectOnlyUserSearchResultPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectOnlyUserSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectOnlyUserSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectOnlyUserSearchResultPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.console.pages.DisplayAttributesModalPage;\n import org.apache.syncope.console.rest.UserRestClient;\n@@ -47,10 +46,9 @@ public class SelectOnlyUserSearchResultPanel extends UserSearchResultPanel {\n     private final ModalWindow window;\n \n     public <T extends AbstractAttributableTO> SelectOnlyUserSearchResultPanel(final String id, final boolean filtered,\n-            final NodeCond searchCond, final PageReference pageRef, final ModalWindow window,\n-            final UserRestClient restClient) {\n+            final String fiql, final PageReference pageRef, final ModalWindow window, final UserRestClient restClient) {\n \n-        super(id, filtered, searchCond, pageRef, restClient);\n+        super(id, filtered, fiql, pageRef, restClient);\n \n         this.pageRef = pageRef;\n         this.window = window;"},{"sha":"1bd85c56427732ac1d751679f4071dd52ebf9a55","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SyncTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.RoleTemplateModalPage;\n import org.apache.syncope.console.pages.SyncTaskModalPage;"},{"sha":"4b33554a5f0eb1936d7138aa5620567dbd6f9eb8","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserSearchPanel.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,10 +21,8 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.console.commons.SearchCondWrapper;\n import org.apache.syncope.console.rest.RoleRestClient;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n@@ -42,16 +40,16 @@ public static class Builder implements Serializable {\n \n         private String id;\n \n-        private NodeCond initCond = null;\n+        private String fiql = null;\n \n         private boolean required = true;\n \n         public Builder(final String id) {\n             this.id = id;\n         }\n \n-        public UserSearchPanel.Builder nodeCond(final NodeCond initCond) {\n-            this.initCond = initCond;\n+        public UserSearchPanel.Builder fiql(final String fiql) {\n+            this.fiql = fiql;\n             return this;\n         }\n \n@@ -66,23 +64,23 @@ public UserSearchPanel build() {\n     }\n \n     private UserSearchPanel(final Builder builder) {\n-        super(builder.id, AttributableType.USER, builder.initCond, builder.required);\n+        super(builder.id, AttributableType.USER, builder.fiql, builder.required);\n     }\n \n     @Override\n     protected void populate() {\n         super.populate();\n \n-        this.filterTypes = new LoadableDetachableModel<List<SearchCondWrapper.FilterType>>() {\n+        this.types = new LoadableDetachableModel<List<SearchClause.Type>>() {\n \n             private static final long serialVersionUID = 5275935387613157437L;\n \n             @Override\n-            protected List<SearchCondWrapper.FilterType> load() {\n-                List<SearchCondWrapper.FilterType> result = new ArrayList<SearchCondWrapper.FilterType>();\n-                result.add(SearchCondWrapper.FilterType.ATTRIBUTE);\n-                result.add(SearchCondWrapper.FilterType.MEMBERSHIP);\n-                result.add(SearchCondWrapper.FilterType.RESOURCE);\n+            protected List<SearchClause.Type> load() {\n+                List<SearchClause.Type> result = new ArrayList<SearchClause.Type>();\n+                result.add(SearchClause.Type.ATTRIBUTE);\n+                result.add(SearchClause.Type.MEMBERSHIP);\n+                result.add(SearchClause.Type.RESOURCE);\n                 return result;\n             }\n         };"},{"sha":"a7b143edb4b7944d80aab55c943a70124e764c9a","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserSearchResultPanel.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -24,12 +24,11 @@\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.DisplayAttributesModalPage;\n import org.apache.syncope.console.pages.EditUserModalPage;\n@@ -73,10 +72,9 @@ public class UserSearchResultPanel extends AbstractSearchResultPanel {\n     private final List<String> vSchemaNames;\n \n     public <T extends AbstractAttributableTO> UserSearchResultPanel(final String id, final boolean filtered,\n-            final NodeCond searchCond, final PageReference callerRef,\n-            final AbstractAttributableRestClient restClient) {\n+            final String fiql, final PageReference callerRef, final AbstractAttributableRestClient restClient) {\n \n-        super(id, filtered, searchCond, callerRef, restClient);\n+        super(id, filtered, fiql, callerRef, restClient);\n \n         this.schemaNames = schemaRestClient.getSchemaNames(AttributableType.USER);\n         this.dSchemaNames = schemaRestClient.getDerSchemaNames(AttributableType.USER);\n@@ -88,7 +86,7 @@ public <T extends AbstractAttributableTO> UserSearchResultPanel(final String id,\n     @Override\n     protected List<IColumn<AbstractAttributableTO, String>> getColumns() {\n         final List<IColumn<AbstractAttributableTO, String>> columns =\n-                 new ArrayList<IColumn<AbstractAttributableTO, String>>();\n+                new ArrayList<IColumn<AbstractAttributableTO, String>>();\n \n         for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_DETAILS_VIEW)) {\n             final Field field = ReflectionUtils.findField(UserTO.class, name);"},{"sha":"d77506b6a666fc48cf10e71c654a9d15b317d98a","filename":"console/src/main/java/org/apache/syncope/console/rest/AbstractAttributableRestClient.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -19,29 +19,26 @@\n package org.apache.syncope.console.rest;\n \n import java.util.List;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.to.ConnObjectTO;\n \n public abstract class AbstractAttributableRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = 1962529678091410544L;\n \n-    public abstract Integer count();\n+    public abstract int count();\n \n     public abstract List<? extends AbstractAttributableTO> list(int page, int size);\n \n-    public abstract Integer searchCount(NodeCond searchCond) throws InvalidSearchConditionException;\n+    public abstract int searchCount(String fiql);\n \n-    public abstract List<? extends AbstractAttributableTO> search(NodeCond searchCond, int page, int size)\n-            throws InvalidSearchConditionException;\n+    public abstract List<? extends AbstractAttributableTO> search(String fiql, int page, int size);\n \n     public abstract ConnObjectTO getConnectorObject(String resourceName, Long id);\n \n     public abstract AbstractAttributableTO delete(Long id);\n \n-    public abstract BulkActionRes bulkAction(BulkAction action);\n+    public abstract BulkActionResult bulkAction(BulkAction action);\n }"},{"sha":"d8771fb0f4d6cb0e0adac53eef58ffd5cb3330f4","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -25,16 +25,16 @@\n import java.util.Set;\n import org.apache.syncope.common.services.ConnectorService;\n import org.apache.syncope.common.services.ResourceService;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.to.ConnBundleTO;\n import org.apache.syncope.common.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.SyncopeSession;\n import org.springframework.stereotype.Component;\n \n@@ -211,7 +211,7 @@ public void reload() {\n         getService(ConnectorService.class).reload();\n     }\n \n-    public BulkActionRes bulkAction(final BulkAction action) {\n+    public BulkActionResult bulkAction(final BulkAction action) {\n         return getService(ConnectorService.class).bulk(action);\n     }\n }"},{"sha":"dc6e831d2db04fbc4b514b9c78ddd1c4019607e9","filename":"console/src/main/java/org/apache/syncope/console/rest/NotificationRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -23,7 +23,7 @@\n \n import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.services.NotificationService;\n-import org.apache.syncope.common.to.MailTemplateTO;\n+import org.apache.syncope.common.wrap.MailTemplate;\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.springframework.stereotype.Component;\n@@ -55,6 +55,6 @@ public void deleteNotification(final Long id) {\n \n     public List<String> getMailTemplates() {\n         return CollectionWrapper.unwrap(\n-                new ArrayList<MailTemplateTO>(getService(ConfigurationService.class).getMailTemplates()));\n+                new ArrayList<MailTemplate>(getService(ConfigurationService.class).getMailTemplates()));\n     }\n }"},{"sha":"c32d673d317349469cdf952e4ba134e4ac9c1dc5","filename":"console/src/main/java/org/apache/syncope/console/rest/ReportRestClient.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,10 +22,10 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.services.ReportService;\n-import org.apache.syncope.common.types.ReportletConfClasses;\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.wrap.ReportletConfClass;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -34,29 +34,34 @@ public class ReportRestClient extends BaseRestClient implements ExecutionRestCli\n     private static final long serialVersionUID = 1644689667998953604L;\n \n     public List<String> getReportletConfClasses() {\n+        List<String> result = new ArrayList<String>();\n+\n         try {\n-            ReportletConfClasses reportletConfClasses = getService(ReportService.class).getReportletConfClasses();\n-            return reportletConfClasses.getConfClasses();\n+            List<ReportletConfClass> reportletConfClasses = getService(ReportService.class).getReportletConfClasses();\n+            for (ReportletConfClass clazz : reportletConfClasses) {\n+                result.add(clazz.getName());\n+            }\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting available reportlet classes\", e);\n-            return new ArrayList<String>();\n         }\n+\n+        return result;\n     }\n \n     public ReportTO read(final Long reportId) {\n         return getService(ReportService.class).read(reportId);\n     }\n \n     public List<ReportTO> list() {\n-        return getService(ReportService.class).list();\n+        return getService(ReportService.class).list().getResult();\n     }\n \n     public List<ReportTO> list(final int page, final int size) {\n-        return getService(ReportService.class).list(page, size);\n+        return getService(ReportService.class).list(page, size).getResult();\n     }\n \n     public int count() {\n-        return getService(ReportService.class).count();\n+        return getService(ReportService.class).list(1, 1).getTotalCount();\n     }\n \n     public void create(final ReportTO reportTO) {"},{"sha":"f8e5705da19ef9d944ca6a5709015362ed4beebf","filename":"console/src/main/java/org/apache/syncope/console/rest/ResourceRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,14 +21,14 @@\n import java.util.List;\n import org.apache.syncope.common.services.ResourceService;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n-import org.apache.syncope.common.to.BulkAssociationAction;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n+import org.apache.syncope.common.reqres.BulkAssociationAction;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -85,11 +85,11 @@ public void delete(final String name) {\n         getService(ResourceService.class).delete(name);\n     }\n \n-    public BulkActionRes bulkAction(final BulkAction action) {\n+    public BulkActionResult bulkAction(final BulkAction action) {\n         return getService(ResourceService.class).bulk(action);\n     }\n \n-    public BulkActionRes bulkAssociationAction(\n+    public BulkActionResult bulkAssociationAction(\n             final String resourceName, final BulkAssociationAction bulkAssociationAction,\n             final Class<? extends AbstractAttributableTO> typeRef) {\n "},{"sha":"67dd273aa1562038c18a00c6030a0d6c3eda549b","filename":"console/src/main/java/org/apache/syncope/console/rest/RoleRestClient.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -23,14 +23,12 @@\n import javax.ws.rs.core.Response;\n \n import org.apache.syncope.common.mod.RoleMod;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.services.ResourceService;\n import org.apache.syncope.common.services.RoleService;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.to.ConnObjectTO;\n-import org.apache.syncope.common.to.ResourceNameTO;\n+import org.apache.syncope.common.wrap.ResourceName;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ResourceAssociationActionType;\n@@ -48,29 +46,27 @@ public class RoleRestClient extends AbstractAttributableRestClient {\n     private static final long serialVersionUID = -8549081557283519638L;\n \n     @Override\n-    public Integer count() {\n-        return getService(RoleService.class).count();\n+    public int count() {\n+        return getService(RoleService.class).list(1, 1).getTotalCount();\n     }\n \n     public List<RoleTO> list() {\n-        return getService(RoleService.class).list();\n+        return getService(RoleService.class).list().getResult();\n     }\n \n     @Override\n     public List<RoleTO> list(final int page, final int size) {\n-        return getService(RoleService.class).list(page, size);\n+        return getService(RoleService.class).list(page, size).getResult();\n     }\n \n     @Override\n-    public Integer searchCount(final NodeCond searchCond) throws InvalidSearchConditionException {\n-        return getService(RoleService.class).searchCount(searchCond);\n+    public int searchCount(final String fiql) {\n+        return getService(RoleService.class).search(fiql, 1, 1).getTotalCount();\n     }\n \n     @Override\n-    public List<RoleTO> search(final NodeCond searchCond, final int page, final int size)\n-            throws InvalidSearchConditionException {\n-\n-        return getService(RoleService.class).search(searchCond, page, size);\n+    public List<RoleTO> search(final String fiql, final int page, final int size) {\n+        return getService(RoleService.class).search(fiql, page, size).getResult();\n     }\n \n     @Override\n@@ -97,25 +93,25 @@ public RoleTO delete(final Long id) {\n     }\n \n     @Override\n-    public BulkActionRes bulkAction(final BulkAction action) {\n+    public BulkActionResult bulkAction(final BulkAction action) {\n         return getService(RoleRestClient.class).bulkAction(action);\n     }\n \n     public RoleTO unlink(final long roleId, final List<StatusBean> statuses) {\n         return getService(RoleService.class).associate(roleId, ResourceAssociationActionType.UNLINK,\n-                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceNameTO.class)).\n+                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceName.class)).\n                 readEntity(RoleTO.class);\n     }\n \n     public RoleTO deprovision(final long roleId, final List<StatusBean> statuses) {\n         return getService(RoleService.class).associate(roleId, ResourceAssociationActionType.DEPROVISION,\n-                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceNameTO.class)).\n+                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceName.class)).\n                 readEntity(RoleTO.class);\n     }\n \n     public RoleTO unassign(final long roleId, final List<StatusBean> statuses) {\n         return getService(RoleService.class).associate(roleId, ResourceAssociationActionType.UNASSIGN,\n-                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceNameTO.class)).\n+                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceName.class)).\n                 readEntity(RoleTO.class);\n     }\n "},{"sha":"7112812376aef823e886836e7b63e83359eb4863","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -27,12 +27,12 @@\n import org.apache.syncope.common.to.AbstractSchemaTO;\n import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.to.SchemaTO;\n-import org.apache.syncope.common.to.ValidatorTO;\n+import org.apache.syncope.common.wrap.Validator;\n import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -314,7 +314,7 @@ public List<String> getAllValidatorClasses() {\n \n         try {\n             response = CollectionWrapper.unwrap(\n-                    new ArrayList<ValidatorTO>(getService(ConfigurationService.class).getValidators()));\n+                    new ArrayList<Validator>(getService(ConfigurationService.class).getValidators()));\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all validators\", e);\n         }"},{"sha":"7a1bb1ddc1d347c6f91cf7acdb144f9fe654748d","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":17,"deletions":36,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,18 +21,18 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.services.TaskService;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n-import org.apache.syncope.common.to.JobClassTO;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n+import org.apache.syncope.common.wrap.JobClass;\n import org.apache.syncope.common.to.NotificationTaskTO;\n import org.apache.syncope.common.to.PropagationTaskTO;\n import org.apache.syncope.common.to.SchedTaskTO;\n-import org.apache.syncope.common.to.SyncActionClassTO;\n+import org.apache.syncope.common.wrap.SyncActionClass;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -49,21 +49,21 @@ public class TaskRestClient extends BaseRestClient implements ExecutionRestClien\n      * @return list of classes.\n      */\n     public List<String> getJobClasses() {\n-        List<JobClassTO> jobClasses = null;\n+        List<JobClass> jobClasses = null;\n \n         try {\n-            jobClasses = new ArrayList<JobClassTO>(getService(TaskService.class).getJobClasses());\n+            jobClasses = new ArrayList<JobClass>(getService(TaskService.class).getJobClasses());\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all job classes\", e);\n         }\n         return CollectionWrapper.unwrap(jobClasses);\n     }\n \n     public List<String> getSyncActionsClasses() {\n-        List<SyncActionClassTO> actions = null;\n+        List<SyncActionClass> actions = null;\n \n         try {\n-            actions = new ArrayList<SyncActionClassTO>(getService(TaskService.class).getSyncActionsClasses());\n+            actions = new ArrayList<SyncActionClass>(getService(TaskService.class).getSyncActionsClasses());\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all sync actions classes\", e);\n         }\n@@ -76,19 +76,15 @@ public List<String> getSyncActionsClasses() {\n      * @param kind of task (propagation, sched, sync).\n      * @return number of stored tasks.\n      */\n-    public Integer count(final String kind) {\n-        return getService(TaskService.class).count(TaskType.fromString(kind));\n+    public int count(final String kind) {\n+        return getService(TaskService.class).list(TaskType.fromString(kind), 1, 1).getTotalCount();\n     }\n \n-    /**\n-     * Return a paginated list of tasks.\n-     *\n-     * @param page number.\n-     * @param size per page.\n-     * @return paginated list.\n-     */\n-    public <T extends AbstractTaskTO> List<T> listTasks(final Class<T> reference, final int page, final int size) {\n-        return getService(TaskService.class).list(getTaskType(reference), page, size);\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends AbstractTaskTO> List<T> listTasks(\n+            final Class<T> reference, final int page, final int size) {\n+\n+        return (List<T>) getService(TaskService.class).list(getTaskType(reference), page, size).getResult();\n     }\n \n     private TaskType getTaskType(final Class<?> reference) {\n@@ -117,11 +113,6 @@ public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final L\n         return getService(TaskService.class).read(taskId);\n     }\n \n-    /**\n-     * Delete specified task.\n-     *\n-     * @param taskId task to delete\n-     */\n     public void delete(final Long taskId, final Class<? extends AbstractTaskTO> taskToClass) {\n         getService(TaskService.class).delete(taskId);\n     }\n@@ -131,20 +122,10 @@ public void startExecution(final long taskId) {\n         startExecution(taskId, false);\n     }\n \n-    /**\n-     * Start execution for the specified TaskTO.\n-     *\n-     * @param taskId task id\n-     */\n     public void startExecution(final long taskId, final boolean dryRun) {\n         getService(TaskService.class).execute(taskId, dryRun);\n     }\n \n-    /**\n-     * Delete specified task's execution.\n-     *\n-     * @param taskExecId task execution id\n-     */\n     @Override\n     public void deleteExecution(final long taskExecId) {\n         getService(TaskService.class).deleteExecution(taskExecId);\n@@ -166,7 +147,7 @@ public void updateSyncTask(final SyncTaskTO taskTO) {\n         getService(TaskService.class).update(taskTO.getId(), taskTO);\n     }\n \n-    public BulkActionRes bulkAction(final BulkAction action) {\n+    public BulkActionResult bulkAction(final BulkAction action) {\n         return getService(TaskService.class).bulk(action);\n     }\n }"},{"sha":"15ddb7a437f7aad0f95e466acd74f108ae9ac977","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,19 +22,17 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.mod.StatusMod;\n import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.services.ResourceService;\n import org.apache.syncope.common.services.UserService;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.to.ConnObjectTO;\n-import org.apache.syncope.common.to.ResourceNameTO;\n+import org.apache.syncope.common.wrap.ResourceName;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ResourceAssociationActionType;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.status.StatusBean;\n import org.apache.syncope.console.commons.status.StatusUtils;\n import org.springframework.stereotype.Component;\n@@ -48,8 +46,8 @@ public class UserRestClient extends AbstractAttributableRestClient {\n     private static final long serialVersionUID = -1575748964398293968L;\n \n     @Override\n-    public Integer count() {\n-        return getService(UserService.class).count();\n+    public int count() {\n+        return getService(UserService.class).list(1, 1).getTotalCount();\n     }\n \n     /**\n@@ -61,7 +59,7 @@ public Integer count() {\n      */\n     @Override\n     public List<UserTO> list(final int page, final int size) {\n-        return getService(UserService.class).list(page, size);\n+        return getService(UserService.class).list(page, size).getResult();\n     }\n \n     public UserTO create(final UserTO userTO) {\n@@ -89,15 +87,13 @@ public UserTO read(final Long id) {\n     }\n \n     @Override\n-    public Integer searchCount(final NodeCond searchCond) throws InvalidSearchConditionException {\n-        return getService(UserService.class).searchCount(searchCond);\n+    public int searchCount(final String fiql) {\n+        return getService(UserService.class).search(fiql, 1, 1).getTotalCount();\n     }\n \n     @Override\n-    public List<UserTO> search(final NodeCond searchCond, final int page, final int size)\n-            throws InvalidSearchConditionException {\n-\n-        return getService(UserService.class).search(searchCond, page, size);\n+    public List<UserTO> search(final String fiql, final int page, final int size) {\n+        return getService(UserService.class).search(fiql, page, size).getResult();\n     }\n \n     @Override\n@@ -118,23 +114,23 @@ public void reactivate(final long userId, final List<StatusBean> statuses) {\n     }\n \n     @Override\n-    public BulkActionRes bulkAction(final BulkAction action) {\n+    public BulkActionResult bulkAction(final BulkAction action) {\n         return getService(UserService.class).bulk(action);\n     }\n \n     public void unlink(final long userId, final List<StatusBean> statuses) {\n         getService(UserService.class).associate(userId, ResourceAssociationActionType.UNLINK,\n-                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceNameTO.class));\n+                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceName.class));\n     }\n \n     public void deprovision(final long userId, final List<StatusBean> statuses) {\n         getService(UserService.class).associate(userId, ResourceAssociationActionType.DEPROVISION,\n-                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceNameTO.class));\n+                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceName.class));\n     }\n \n     public void unassign(final long userId, final List<StatusBean> statuses) {\n         getService(UserService.class).associate(userId, ResourceAssociationActionType.UNASSIGN,\n-                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceNameTO.class));\n+                CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceName.class));\n     }\n \n }"},{"sha":"a41413798b4c728779bc6e5cda304f18841e1d4e","filename":"console/src/main/java/org/apache/syncope/console/rest/UserSelfRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.services.UserSelfService;\n import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.SyncopeSession;\n import org.springframework.stereotype.Component;\n "},{"sha":"dd5767fb2280a294116033cb2b8e35fecaa83222","filename":"console/src/main/java/org/apache/syncope/console/rest/WorkflowRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.services.WorkflowService;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.RESTHeaders;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.SyncopeSession;\n import org.springframework.stereotype.Component;\n "},{"sha":"ab30d6488272268376ac1a570bc24924a8d32917","filename":"console/src/main/java/org/apache/syncope/console/wicket/extensions/markup/html/repeater/data/table/ActionResultColumn.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FActionResultColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FActionResultColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FActionResultColumn.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table;\n \n import java.beans.PropertyDescriptor;\n-import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.wicket.Component;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n@@ -41,11 +41,11 @@\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(ActionResultColumn.class);\n \n-    private final BulkActionRes results;\n+    private final BulkActionResult results;\n \n     private final String idFieldName;\n \n-    public ActionResultColumn(final BulkActionRes results, final String idFieldName) {\n+    public ActionResultColumn(final BulkActionResult results, final String idFieldName) {\n         super(new Model());\n         this.results = results;\n         this.idFieldName = idFieldName;"},{"sha":"556f8f0b9f4daec9dcbf29b6dc71ba6efdd33c3b","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/ActionLinksPanel.java","status":"modified","additions":34,"deletions":33,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -92,6 +92,7 @@ public void add(\n \n     public void addWithRoles(\n             final ActionLink link, final ActionLink.ActionType type, final String roles) {\n+\n         addWithRoles(link, type, roles, true);\n     }\n \n@@ -105,7 +106,7 @@ public void addWithRoles(\n             case CLAIM:\n                 fragment = new Fragment(\"panelClaim\", \"fragmentClaim\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"claimLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"claimLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -119,7 +120,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case MANAGE_RESOURCES:\n                 fragment = new Fragment(\"panelManageResources\", \"fragmentManageResources\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"manageResourcesLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"manageResourcesLink\", pageRef) {\n \n                     private static final long serialVersionUID = -6957616042924610291L;\n \n@@ -133,7 +134,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case MANAGE_USERS:\n                 fragment = new Fragment(\"panelManageUsers\", \"fragmentManageUsers\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"manageUsersLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"manageUsersLink\", pageRef) {\n \n                     private static final long serialVersionUID = -6957616042924610292L;\n \n@@ -147,7 +148,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case MANAGE_ROLES:\n                 fragment = new Fragment(\"panelManageRoles\", \"fragmentManageRoles\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"manageRolesLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"manageRolesLink\", pageRef) {\n \n                     private static final long serialVersionUID = -6957616042924610293L;\n \n@@ -161,7 +162,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case CREATE:\n                 fragment = new Fragment(\"panelCreate\", \"fragmentCreate\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"createLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"createLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -175,7 +176,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case EDIT:\n                 fragment = new Fragment(\"panelEdit\", \"fragmentEdit\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"editLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"editLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -189,7 +190,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case USER_TEMPLATE:\n                 fragment = new Fragment(\"panelUserTemplate\", \"fragmentUserTemplate\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"userTemplateLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"userTemplateLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -203,7 +204,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case ROLE_TEMPLATE:\n                 fragment = new Fragment(\"panelRoleTemplate\", \"fragmentRoleTemplate\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"roleTemplateLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"roleTemplateLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -217,7 +218,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case ENABLE:\n                 fragment = new Fragment(\"panelEnable\", \"fragmentEnable\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"enableLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"enableLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -231,7 +232,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case SEARCH:\n                 fragment = new Fragment(\"panelSearch\", \"fragmentSearch\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"searchLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"searchLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -245,7 +246,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case EXECUTE:\n                 fragment = new Fragment(\"panelExecute\", \"fragmentExecute\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"executeLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"executeLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -259,7 +260,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case DRYRUN:\n                 fragment = new Fragment(\"panelDryRun\", \"fragmentDryRun\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"dryRunLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"dryRunLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -273,7 +274,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case DELETE:\n                 fragment = new Fragment(\"panelDelete\", \"fragmentDelete\", this);\n \n-                fragment.addOrReplace(new IndicatingOnConfirmAjaxLink(\"deleteLink\", pageRef) {\n+                fragment.addOrReplace(new IndicatingOnConfirmAjaxLink<Void>(\"deleteLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -288,7 +289,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case SELECT:\n                 fragment = new Fragment(\"panelSelect\", \"fragmentSelect\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"selectLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"selectLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -303,7 +304,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             case EXPORT:\n                 fragment = new Fragment(\"panelExport\", \"fragmentExport\", this);\n \n-                fragment.addOrReplace(new ClearIndicatingAjaxLink(\"exportLink\", pageRef) {\n+                fragment.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"exportLink\", pageRef) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -376,13 +377,13 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n                 fragment.addOrReplace(\n                         new IndicatingOnConfirmAjaxLink<Void>(\"unlinkLink\", pageRef, \"confirmUnlink\") {\n \n-                    private static final long serialVersionUID = -6957616042924610293L;\n+                            private static final long serialVersionUID = -6957616042924610293L;\n \n-                    @Override\n-                    protected void onClickInternal(final AjaxRequestTarget target) {\n-                        link.onClick(target);\n-                    }\n-                });\n+                            @Override\n+                            protected void onClickInternal(final AjaxRequestTarget target) {\n+                                link.onClick(target);\n+                            }\n+                        });\n                 break;\n \n             case UNASSIGN:\n@@ -391,13 +392,13 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n                 fragment.addOrReplace(\n                         new IndicatingOnConfirmAjaxLink<Void>(\"unassignLink\", pageRef, \"confirmUnassign\") {\n \n-                    private static final long serialVersionUID = -6957616042924610294L;\n+                            private static final long serialVersionUID = -6957616042924610294L;\n \n-                    @Override\n-                    protected void onClickInternal(final AjaxRequestTarget target) {\n-                        link.onClick(target);\n-                    }\n-                });\n+                            @Override\n+                            protected void onClickInternal(final AjaxRequestTarget target) {\n+                                link.onClick(target);\n+                            }\n+                        });\n                 break;\n \n             case DEPROVISION:\n@@ -406,13 +407,13 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n                 fragment.addOrReplace(\n                         new IndicatingOnConfirmAjaxLink<Void>(\"deprovisionLink\", pageRef, \"confirmDeprovision\") {\n \n-                    private static final long serialVersionUID = -6957616042924610295L;\n+                            private static final long serialVersionUID = -6957616042924610295L;\n \n-                    @Override\n-                    protected void onClickInternal(final AjaxRequestTarget target) {\n-                        link.onClick(target);\n-                    }\n-                });\n+                            @Override\n+                            protected void onClickInternal(final AjaxRequestTarget target) {\n+                                link.onClick(target);\n+                            }\n+                        });\n                 break;\n             default:\n             // do nothink"},{"sha":"30dc9c17300f87db48578aa49d05bd104c186c34","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/MultiValueSelectorPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -42,7 +42,6 @@\n     private WebMarkupContainer container;\n \n     public MultiValueSelectorPanel(final String id, final IModel<List<E>> model, final FieldPanel panelTemplate) {\n-\n         this(id, model, panelTemplate, false);\n     }\n \n@@ -74,7 +73,6 @@ protected void populateItem(final ListItem<E> item) {\n \n                         @Override\n                         protected void onUpdate(final AjaxRequestTarget target) {\n-\n                             send(getPage(), Broadcast.BREADTH, new MultiValueSelectorEvent(target));\n                         }\n                     });\n@@ -83,7 +81,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 fieldPanel.setNewModel(item);\n                 item.add(fieldPanel);\n \n-                AjaxLink minus = new IndicatingAjaxLink(\"drop\") {\n+                AjaxLink<Void> minus = new IndicatingAjaxLink<Void>(\"drop\") {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -112,7 +110,7 @@ public void onClick(final AjaxRequestTarget target) {\n \n                 final Fragment fragment;\n                 if (item.getIndex() == model.getObject().size() - 1) {\n-                    final AjaxLink plus = new IndicatingAjaxLink(\"add\") {\n+                    final AjaxLink<Void> plus = new IndicatingAjaxLink<Void>(\"add\") {\n \n                         private static final long serialVersionUID = -7978723352517770644L;\n "},{"sha":"a2af697392c0de10245262313e34392861d642df","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/AbstractSearchPanel.html","status":"modified","additions":8,"deletions":36,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.html?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,54 +21,26 @@\n     <div id=\"searchBox\">\n       <div wicket:id=\"searchFeedback\"></div>\n       <table border=\"0\">\n-        <thead>\n-          <tr>\n-            <th></th>\n-            <th><wicket:message key=\"search_not_value\"/></th>\n-            <th><wicket:message key=\"search_filter_type\"/></th>\n-            <th><wicket:message key=\"search_filter_name\"/></th>\n-            <th><wicket:message key=\"search_type_cond\"/></th>\n-            <th><wicket:message key=\"search_filter_value\"/></th>\n-            <th></th>\n-            <th></th>\n-            <th></th>\n-          </tr>\n-        </thead>\n         <tbody wicket:id=\"searchFormContainer\">\n           <tr wicket:id=\"searchView\">\n-            <td>\n-              <b><span wicket:id=\"operationType\"/></b>\n-            </td>\n-            <td>\n-              <input type=\"checkbox\" wicket:id=\"notOperator\"/>\n+            <td width=\"60\">\n+              <select class=\"text ui-widget-content ui-corner-all\" wicket:id=\"operator\"/>\n             </td>\n             <td>\n-              <select class=\"text ui-widget-content ui-corner-all\"\n-                      wicket:id=\"filterType\"/>\n+              <select class=\"text ui-widget-content ui-corner-all\" wicket:id=\"type\"/>\n             </td>\n             <td>\n-              <select class=\"text ui-widget-content ui-corner-all\"\n-                      wicket:id=\"filterName\"/>\n+              <select class=\"text ui-widget-content ui-corner-all\" wicket:id=\"property\"/>\n             </td>\n             <td>\n-              <select class=\"text ui-widget-content ui-corner-all\"\n-                      wicket:id=\"type\"/>\n+              <select class=\"text ui-widget-content ui-corner-all\" wicket:id=\"comparator\"/>\n             </td>\n             <td>\n-              <input type=\"text\" class=\"text ui-widget-content ui-corner-all\"\n-                     wicket:id=\"filterValue\"/>\n+              <input type=\"text\" class=\"text ui-widget-content ui-corner-all\" wicket:id=\"value\"/>\n             </td>\n             <td>\n-              <input type=\"button\" class=\"text ui-widget-content ui-corner-all\"\n-                     wicket:id=\"addAndButton\"/>\n-            </td>\n-            <td>\n-              <input type=\"submit\" class=\"text ui-widget-content ui-corner-all\"\n-                     wicket:id=\"addOrButton\"/>\n-            </td>        \n-            <td>\n-              <input type=\"button\" class=\"text ui-widget-content ui-corner-all\"\n-                     wicket:id=\"dropButton\"/>\n+              <a wicket:id=\"add\"><img src=\"img/plus-icon.png\" alt=\"add icon\" class=\"add_button\"/></a>\n+              <a wicket:id=\"drop\"><img src=\"img/minus-icon.png\" alt=\"remove icon\" class=\"drop_button\"/></a>\n             </td>\n           </tr>\n         </tbody>"},{"sha":"dc6be1d0fba7322d8abd90f0235c07ebf30b5cad","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/AbstractSearchPanel.properties","status":"removed","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db01dd93e91964bdcc54954c25b38509a320aef1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db01dd93e91964bdcc54954c25b38509a320aef1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.properties?ref=db01dd93e91964bdcc54954c25b38509a320aef1","patch":"@@ -1,24 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-search_not_value=Not value\n-search_filter_type=Filter type\n-search_filter_name=Filter name\n-search_filter_value=Filter value\n-search_type_cond=Condition\n-addAndButton=+ And\n-addOrButton=+ Or\n-dropButton=-"},{"sha":"8920d28bf9b8e3151d9d6fc08f854658b72bd836","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/AbstractSearchPanel_it.properties","status":"removed","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db01dd93e91964bdcc54954c25b38509a320aef1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db01dd93e91964bdcc54954c25b38509a320aef1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel_it.properties?ref=db01dd93e91964bdcc54954c25b38509a320aef1","patch":"@@ -1,24 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-search_not_value=Not\n-search_filter_type=Tipo filtro\n-search_filter_name=Nome filtro\n-search_filter_value=Valore filtro\n-search_type_cond=Condizione\n-addAndButton=+ And\n-addOrButton=+ Or\n-dropButton=-"},{"sha":"1142185a9f3c2da807e23d46c0dd9dc7a2023699","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/AbstractSearchPanel_pt_BR.properties","status":"removed","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db01dd93e91964bdcc54954c25b38509a320aef1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db01dd93e91964bdcc54954c25b38509a320aef1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel_pt_BR.properties?ref=db01dd93e91964bdcc54954c25b38509a320aef1","patch":"@@ -1,24 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-search_not_value=Excluir Valor\n-search_filter_type=Filtrar Tipo\n-search_filter_name=Filtrar Nome\n-search_filter_value=Filtar Valor\n-search_type_cond=Condi\\u00E7\\u00E3o\n-addAndButton=+ E\n-addOrButton=+ Ou\n-dropButton=-"},{"sha":"2208220b4fc655eab1a0377ca836ec48c4f23a83","filename":"console/src/main/resources/org/apache/syncope/console/wicket/markup/html/form/MultiValueSelectorPanel.html","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.html?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,20 +16,20 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html>\n-    <wicket:panel>\n-        <span wicket:id=\"multiValueContainer\">\n-            <span wicket:id=\"view\">\n-                <span wicket:id=\"panel\">[form field]</span>\n-                <a wicket:id=\"drop\"><img src=\"img/minus-icon.png\" alt=\"remove icon\" class=\"drop_button\" /></a>\n-                <span wicket:id=\"panelPlus\">[plus]</span>\n-                <br />\n-            </span>\n-            <wicket:fragment wicket:id=\"fragmentPlus\">\n-                <a wicket:id=\"add\"><img src=\"img/plus-icon.png\" alt=\"add icon\" class=\"add_button\" /></a>\n-            </wicket:fragment>\n-            <wicket:fragment wicket:id=\"emptyFragment\">\n-            </wicket:fragment>\n-        </span>\n-    </wicket:panel>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"multiValueContainer\">\n+      <span wicket:id=\"view\">\n+        <span wicket:id=\"panel\">[form field]</span>\n+        <a wicket:id=\"drop\"><img src=\"img/minus-icon.png\" alt=\"remove icon\" class=\"drop_button\" /></a>\n+        <span wicket:id=\"panelPlus\">[plus]</span>\n+        <br />\n+      </span>\n+      <wicket:fragment wicket:id=\"fragmentPlus\">\n+        <a wicket:id=\"add\"><img src=\"img/plus-icon.png\" alt=\"add icon\" class=\"add_button\" /></a>\n+      </wicket:fragment>\n+      <wicket:fragment wicket:id=\"emptyFragment\">\n+      </wicket:fragment>\n+    </span>\n+  </wicket:panel>\n </html>"},{"sha":"17168b5f90d445e6d8129490181ff58723ec2ea0","filename":"console/src/main/webapp/css/style.css","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fwebapp%2Fcss%2Fstyle.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Fmain%2Fwebapp%2Fcss%2Fstyle.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fwebapp%2Fcss%2Fstyle.css?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -30,9 +30,8 @@ body {\n   margin-top: 5px;\n }\n #roletabs {\n-  background-color: #B9CFB3;\n-  margin: 0px 10px;\n-  margin-top: 10px;\n+  margin: 0px 5px;\n+  margin-top: 5px;\n }\n \n #tabs div {\n@@ -115,10 +114,12 @@ a img {\n \n input[disabled] {\n   background-color: #ddd;\n+  background-image: none;\n }\n \n select[disabled] {\n   background-color: #ddd;\n+  background-image: none;\n }\n \n #loginFeedbackDiv {"},{"sha":"37951ab93d383924efd67f19fbbe2340e0e34a0f","filename":"console/src/test/java/org/apache/syncope/console/ConfigurationTestITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -105,9 +105,9 @@ public void delete() {\n \n         selenium.waitForCondition(\"selenium.isElementPresent(\\\"//div[@id='tabs']\\\");\", \"30000\");\n \n-        selenium.click(\"//tr[7]/td[3]/div/span[14]/a\");\n+        selenium.click(\"//tr[6]/td[3]/div/span[14]/a\");\n \n-        assertTrue(selenium.getConfirmation().matches(\"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n+        assertTrue(selenium.getConfirmation().equals(\"Do you really want to delete the selected item(s)?\"));\n \n         selenium.waitForCondition(\"selenium.isTextPresent(\" + \"\\\"Operation executed successfully\\\");\", \"30000\");\n     }\n@@ -159,7 +159,7 @@ public void createNotification() {\n                 + \"//select[@name='eventSelection:categoryContainer:type:dropDownChoiceField']\"\n                 + \"/option[text()='PROPAGATION']\\\");\",\n                 \"30000\");\n-        \n+\n         selenium.select(\n                 \"//select[@name='eventSelection:categoryContainer:type:dropDownChoiceField']\",\n                 \"label=PROPAGATION\");\n@@ -182,12 +182,12 @@ public void createNotification() {\n                 \"//select[@name='eventSelection:categoryContainer:subcategory:dropDownChoiceField']\",\n                 \"label=resource-db-sync\");\n \n-        selenium.waitForCondition(\n-                \"selenium.isElementPresent(\\\"//input[@name='eventSelection:eventsContainer:eventsPanel:failureGroup']\\\");\",\n+        selenium.waitForCondition(\"selenium.isElementPresent(\"\n+                + \"\\\"//input[@name='eventSelection:eventsContainer:eventsPanel:failureGroup']\\\");\",\n                 \"30000\");\n-        \n+\n         selenium.click(\"//div[@class='eventSelectionWidzard']/div[2]/div[3]/span/div/input\");\n-        \n+\n         selenium.click(\"//div[2]/form/div[3]/ul/li[4]/a/span\");\n \n         selenium.waitForCondition(\"selenium.isElementPresent(\""},{"sha":"9e44122938a4da8b2021d5dc918b8b43e6147bd8","filename":"console/src/test/java/org/apache/syncope/console/ConnInstanceTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -78,7 +78,7 @@ public void delete() {\n         selenium.click(\"//div[3]/ul/li[2]/a\");\n         selenium.click(\"//tr[4]/td[7]/div/span[14]/a\");\n \n-        assertTrue(selenium.getConfirmation().matches(\"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n+        assertTrue(selenium.getConfirmation().equals(\"Do you really want to delete the selected item(s)?\"));\n \n         selenium.waitForCondition(\"selenium.isTextPresent(\\\"Error:\\\");\", \"10000\");\n     }"},{"sha":"33fb4cbb9e24a771d65211dbbb570dcdbc833202","filename":"console/src/test/java/org/apache/syncope/console/ResourceTestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FResourceTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -53,7 +53,7 @@ public void browseEditModal() {\n \n         selenium.click(\"//tbody/tr[2]/td/input\");\n \n-        assertTrue(selenium.getConfirmation().matches(\"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n+        assertTrue(selenium.getConfirmation().equals(\"Do you really want to delete the selected item(s)?\"));\n \n         selenium.click(\"name=apply\");\n     }\n@@ -66,7 +66,7 @@ public void delete() {\n \n         selenium.click(\"//tr[3]/td[6]/div/span[14]/a\");\n \n-        assertTrue(selenium.getConfirmation().matches(\"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n+        assertTrue(selenium.getConfirmation().equals(\"Do you really want to delete the selected item(s)?\"));\n     }\n \n     @Test\n@@ -111,4 +111,4 @@ public void checkConnection() {\n         selenium.waitForCondition(\n                 \"selenium.isElementPresent(\\\"//div/ul/li/span[contains(text(), 'Successful connection')]\\\");\", \"30000\");\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"958f651a4939de12a13c4b3185fd05f60753d021","filename":"console/src/test/java/org/apache/syncope/console/RoleTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FRoleTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -170,6 +170,6 @@ public void deleteRole() {\n \n         selenium.click(\"css=img[title='Delete']\");\n \n-        assertTrue(selenium.getConfirmation().matches(\"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n+        assertTrue(selenium.getConfirmation().equals(\"Do you really want to delete the selected item(s)?\"));\n     }\n }"},{"sha":"f8c214b238a23fc42ae8bd5dd6c223137fa434bc","filename":"console/src/test/java/org/apache/syncope/console/SchemaTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSchemaTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -50,6 +50,6 @@ public void delete() {\n \n         selenium.click(\"//div[3]/div/div/div/div/div/span/table/tbody/tr/td[7]/div/span[14]/a\");\n \n-        assertTrue(selenium.getConfirmation().matches(\"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n+        assertTrue(selenium.getConfirmation().equals(\"Do you really want to delete the selected item(s)?\"));\n     }\n }"},{"sha":"27ea7a58f0fa2cf7d2963da677c595b48ebb48e0","filename":"console/src/test/java/org/apache/syncope/console/TaskTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FTaskTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -52,7 +52,7 @@ public void delete() {\n         selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n         selenium.click(\"//table/tbody/tr/td[8]/div/span[14]/a\");\n \n-        assertTrue(selenium.getConfirmation().matches(\"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n+        assertTrue(selenium.getConfirmation().equals(\"Do you really want to delete the selected item(s)?\"));\n \n         selenium.waitForCondition(\"selenium.isTextPresent(\\\"Operation executed successfully\\\");\", \"30000\");\n     }"},{"sha":"cd9dbb71f4e4f656a4867491ac4842c25050cb1f","filename":"console/src/test/java/org/apache/syncope/console/UserTestITCase.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FUserTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -71,16 +71,14 @@ public void search() {\n         selenium.waitForCondition(\"selenium.isElementPresent(\\\"//div[@id='tabs']\\\");\", \"30000\");\n \n         selenium.click(\"link=Search\");\n-        selenium.select(\"//td[3]/select\", \"label=MEMBERSHIP\");\n+        selenium.select(\"//td[2]/select\", \"label=MEMBERSHIP\");\n \n-        selenium.waitForCondition(\"selenium.isElementPresent(\"\n-                + \"\\\"//td[4]/select[option='3 citizen']\\\");\", \"30000\");\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"//td[3]/select[option='3 citizen']\\\");\", \"30000\");\n \n-        selenium.select(\"//td[4]/select\", \"label=3 citizen\");\n+        selenium.select(\"//td[3]/select\", \"label=3 citizen\");\n         selenium.click(\"name=search\");\n \n-        selenium.waitForCondition(\n-                \"selenium.isElementPresent(\\\"//*[@id='users-contain']//*[div=2]\\\");\", \"30000\");\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"//*[@id='users-contain']//*[div=2]\\\");\", \"30000\");\n     }\n \n     @Test\n@@ -91,7 +89,7 @@ public void delete() {\n \n         selenium.click(\"//*[@id=\\\"users-contain\\\"]//*[div=4]/../td[5]/div/span[14]/a\");\n \n-        assertTrue(selenium.getConfirmation().matches(\"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n+        assertTrue(selenium.getConfirmation().equals(\"Do you really want to delete the selected item(s)?\"));\n \n         selenium.waitForCondition(\"selenium.isElementPresent(\" + \"\\\"//div[@id='propagation']/span\\\");\", \"30000\");\n "},{"sha":"5e6de5742747469943fb8bf5fef90a116a139ed5","filename":"console/src/test/resources/web.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fresources%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/console%2Fsrc%2Ftest%2Fresources%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fresources%2Fweb.xml?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,8 +20,8 @@ under the License.\n <web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee \n-                             http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\n-         version=\"2.5\">\n+                             http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n+         version=\"3.0\">\n             \n   <display-name>Apache Syncope console</display-name>\n "},{"sha":"de9f52923207e94a9602310210c5eed53f62ddeb","filename":"core/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -238,8 +238,8 @@ under the License.\n     </dependency>\n \n     <dependency>\n-      <groupId>javax.validation</groupId>\n-      <artifactId>validation-api</artifactId>\n+      <groupId>org.apache.geronimo.specs</groupId>\n+      <artifactId>geronimo-validation_1.0_spec</artifactId>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.bval</groupId>"},{"sha":"a5ed54caf3b2d25a368ad44b21d953061562bbeb","filename":"core/src/main/java/org/apache/syncope/core/init/ContentUpgrader.java","status":"modified","additions":0,"deletions":31,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -26,14 +26,12 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AbstractPolicySpec;\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.Notification;\n import org.apache.syncope.core.persistence.beans.Policy;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n@@ -173,33 +171,6 @@ private void upgradePolicy() {\n         }\n     }\n \n-    private void upgradeNotification() {\n-        Field xmlAbout = ReflectionUtils.findField(Notification.class, \"xmlAbout\");\n-        xmlAbout.setAccessible(true);\n-        Field xmlRecipients = ReflectionUtils.findField(Notification.class, \"xmlRecipients\");\n-        xmlRecipients.setAccessible(true);\n-        for (Notification notification : notificationDAO.findAll()) {\n-            try {\n-                String oldAbout = (String) xmlAbout.get(notification);\n-                if (oldAbout != null) {\n-                    notification.setAbout(\n-                            XMLSerializer.<NodeCond>deserialize(\n-                                    oldAbout.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.search\\\\.\",\n-                                            \"org.apache.syncope.common.search.\")));\n-                }\n-                String oldRecipients = (String) xmlRecipients.get(notification);\n-                if (oldRecipients != null) {\n-                    notification.setRecipients(\n-                            XMLSerializer.<NodeCond>deserialize(\n-                                    oldRecipients.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.search\\\\.\",\n-                                            \"org.apache.syncope.common.search.\")));\n-                }\n-            } catch (Exception e) {\n-                LOG.error(\"While upgrading {}\", notification, e);\n-            }\n-        }\n-    }\n-\n     private void upgradeSyncTask() {\n         Field userTemplate = ReflectionUtils.findField(SyncTask.class, \"userTemplate\");\n         userTemplate.setAccessible(true);\n@@ -253,8 +224,6 @@ public void upgrade() {\n \n         upgradePolicy();\n \n-        upgradeNotification();\n-\n         upgradeSyncTask();\n \n         upgradeReportletConf();"},{"sha":"758bde5ada01f12d8493613085bee009d7a136a6","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -50,6 +50,7 @@\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.rest.data.SearchCondConverter;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n@@ -66,7 +67,7 @@\n  *\n  * @see NotificationTask\n  */\n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = { Throwable.class })\n public class NotificationManager {\n \n     /**\n@@ -149,7 +150,8 @@ private NotificationTask getNotificationTask(\n \n         if (notification.getRecipients() != null) {\n             recipients.addAll(searchDAO.<SyncopeUser>search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n-                    notification.getRecipients(), AttributableUtil.getInstance(AttributableType.USER)));\n+                    SearchCondConverter.convert(notification.getRecipients()),\n+                    AttributableUtil.getInstance(AttributableType.USER)));\n         }\n \n         if (notification.isSelfAsRecipient() && attributable instanceof SyncopeUser) {\n@@ -242,8 +244,9 @@ public void createTasks(\n             if (events.isEmpty()) {\n                 LOG.debug(\"No events found about {}\", attributable);\n             } else if (attributableType == null || attributable == null || notification.getAbout() == null\n-                    || searchDAO.matches(attributable, notification.getAbout(),\n-                    AttributableUtil.getInstance(attributableType))) {\n+                    || searchDAO.matches(attributable,\n+                            SearchCondConverter.convert(notification.getAbout()),\n+                            AttributableUtil.getInstance(attributableType))) {\n \n                 LOG.debug(\"Creating notification task for events {} about {}\", events, attributable);\n "},{"sha":"d93f893a26268d09be21f0721e67d641222be7ae","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Notification.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -29,16 +29,13 @@\n import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n-import javax.persistence.Lob;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n \n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.core.persistence.validation.entity.NotificationCheck;\n-import org.apache.syncope.core.util.XMLSerializer;\n \n @NotificationCheck\n @Entity\n@@ -53,11 +50,9 @@ public class Notification extends AbstractBaseBean {\n     @Column(name = \"events\")\n     private List<String> events;\n \n-    @Lob\n-    private String xmlAbout;\n+    private String about;\n \n-    @Lob\n-    private String xmlRecipients;\n+    private String recipients;\n \n     @NotNull\n     @Enumerated(EnumType.STRING)\n@@ -95,20 +90,20 @@ public Long getId() {\n         return id;\n     }\n \n-    public NodeCond getAbout() {\n-        return xmlAbout == null ? null : XMLSerializer.<NodeCond>deserialize(xmlAbout);\n+    public String getAbout() {\n+        return about;\n     }\n \n-    public void setAbout(NodeCond about) {\n-        xmlAbout = about == null ? null : XMLSerializer.serialize(about);\n+    public void setAbout(final String about) {\n+        this.about = about;\n     }\n \n-    public NodeCond getRecipients() {\n-        return xmlRecipients == null ? null : XMLSerializer.<NodeCond>deserialize(xmlRecipients);\n+    public String getRecipients() {\n+        return recipients;\n     }\n \n-    public void setRecipients(NodeCond recipients) {\n-        xmlRecipients = recipients == null ? null : XMLSerializer.serialize(recipients);\n+    public void setRecipients(String recipients) {\n+        this.recipients = recipients;\n     }\n \n     public String getRecipientAttrName() {"},{"sha":"51affb20eccb1748081ba64b7d7e86982f474a68","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/AttributableDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableDAO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n \n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n@@ -35,7 +34,7 @@ <T extends AbstractAttributable> AbstractAttributable findByAttrUniqueValue(Stri\n             AbstractAttrValue attrUniqueValue, AttributableUtil attrUtil);\n \n     <T extends AbstractAttributable> List<T> findByDerAttrValue(String schemaName, String value,\n-            AttributableUtil attrUtil) throws InvalidSearchConditionException;\n+            AttributableUtil attrUtil);\n \n     <T extends AbstractAttributable> List<T> findByResource(ExternalResource resource, Class<T> reference);\n }"},{"sha":"03ee391079b069292a95ba69a956ec49c995d756","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/AttributableSearchDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchDAO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import java.util.Set;\n \n-import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.util.AttributableUtil;\n \n@@ -33,7 +33,7 @@ public interface AttributableSearchDAO extends DAO {\n      * @param attrUtil AttributeUtil\n      * @return size of search result\n      */\n-    int count(Set<Long> adminRoles, NodeCond searchCondition, AttributableUtil attrUtil);\n+    int count(Set<Long> adminRoles, SearchCond searchCondition, AttributableUtil attrUtil);\n \n     /**\n      * @param adminRoles the set of admin roles owned by the caller\n@@ -42,7 +42,7 @@ public interface AttributableSearchDAO extends DAO {\n      * @param <T> user/role\n      * @return the list of users/roles matching the given search condition\n      */\n-    <T extends AbstractAttributable> List<T> search(Set<Long> adminRoles, NodeCond searchCondition,\n+    <T extends AbstractAttributable> List<T> search(Set<Long> adminRoles, SearchCond searchCondition,\n             AttributableUtil attrUtil);\n \n     /**\n@@ -54,7 +54,7 @@ <T extends AbstractAttributable> List<T> search(Set<Long> adminRoles, NodeCond s\n      * @param <T> user/role\n      * @return the list of users/roles matching the given search condition (in the given page)\n      */\n-    <T extends AbstractAttributable> List<T> search(Set<Long> adminRoles, NodeCond searchCondition,\n+    <T extends AbstractAttributable> List<T> search(Set<Long> adminRoles, SearchCond searchCondition,\n             int page, int itemsPerPage, AttributableUtil attrUtil);\n \n     /**\n@@ -66,5 +66,5 @@ <T extends AbstractAttributable> List<T> search(Set<Long> adminRoles, NodeCond s\n      * @param <T> user/role\n      * @return true if user/role matches searchCondition\n      */\n-    <T extends AbstractAttributable> boolean matches(T subject, NodeCond searchCondition, AttributableUtil attrUtil);\n+    <T extends AbstractAttributable> boolean matches(T subject, SearchCond searchCondition, AttributableUtil attrUtil);\n }"},{"sha":"275bf61eb61164ba98b8c12aadf39f06cc462a9e","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/RoleDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n \n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n@@ -48,7 +47,7 @@ public interface RoleDAO extends AttributableDAO {\n \n     List<SyncopeRole> findDescendants(SyncopeRole role);\n \n-    List<SyncopeRole> findByDerAttrValue(String schemaName, String value) throws InvalidSearchConditionException;\n+    List<SyncopeRole> findByDerAttrValue(String schemaName, String value);\n \n     List<SyncopeRole> findByAttrValue(String schemaName, RAttrValue attrValue);\n "},{"sha":"7a0dfc2360a45924ba98b650dddede6fe44fbabe","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/UserDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,7 +21,6 @@\n import java.util.List;\n import java.util.Set;\n \n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n@@ -35,7 +34,7 @@ public interface UserDAO extends AttributableDAO {\n \n     SyncopeUser findByWorkflowId(String workflowId);\n \n-    List<SyncopeUser> findByDerAttrValue(String schemaName, String value) throws InvalidSearchConditionException;\n+    List<SyncopeUser> findByDerAttrValue(String schemaName, String value);\n \n     List<SyncopeUser> findByAttrValue(String schemaName, UAttrValue attrValue);\n "},{"sha":"131f9a4ea111b58f4822bfe2f0ea36a983443890","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AbstractAttributableDAOImpl.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractAttributableDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractAttributableDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractAttributableDAOImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -32,7 +32,6 @@\n import org.apache.commons.jexl2.parser.Parser;\n import org.apache.commons.jexl2.parser.ParserConstants;\n import org.apache.commons.jexl2.parser.Token;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n@@ -81,11 +80,9 @@ private List<String> split(final String attrValue, final List<String> literals)\n      * @param value derived attribute value\n      * @param attrUtil USER / ROLE\n      * @return where clauses to use to build the query\n-     * @throws InvalidSearchConditionException in case of errors retrieving identifiers\n+     * @throws IllegalArgumentException in case of errors retrieving identifiers\n      */\n-    private Set<String> getWhereClause(final String expression, final String value, final AttributableUtil attrUtil)\n-            throws InvalidSearchConditionException {\n-\n+    private Set<String> getWhereClause(final String expression, final String value, final AttributableUtil attrUtil) {\n         final Parser parser = new Parser(new StringReader(expression));\n \n         // Schema names\n@@ -132,7 +129,7 @@ public int compare(final String t, final String t1) {\n \n         if (attrValues.size() != identifiers.size()) {\n             LOG.error(\"Ambiguous jexl expression resolution.\");\n-            throw new InvalidSearchConditionException(\"literals and values have different size\");\n+            throw new IllegalArgumentException(\"literals and values have different size\");\n         }\n \n         // clauses to be used with INTERSECTed queries\n@@ -152,7 +149,7 @@ public int compare(final String t, final String t1) {\n                 AbstractNormalSchema schema = schemaDAO.find(identifiers.get(i), attrUtil.schemaClass());\n                 if (schema == null) {\n                     LOG.error(\"Invalid schema name '{}'\", identifiers.get(i));\n-                    throw new InvalidSearchConditionException(\"Invalid schema name \" + identifiers.get(i));\n+                    throw new IllegalArgumentException(\"Invalid schema name \" + identifiers.get(i));\n                 }\n \n                 // clear builder\n@@ -277,13 +274,10 @@ public <T extends AbstractAttributable> AbstractAttributable findByAttrUniqueVal\n      * @param value derived attribute value\n      * @param attrUtil AttributableUtil\n      * @return list of users / roles\n-     * @throws InvalidSearchConditionException in case of errors retrieving schema names used to buid the derived schema\n-     * expression.\n      */\n     @Override\n     public <T extends AbstractAttributable> List<T> findByDerAttrValue(final String schemaName, final String value,\n-            final AttributableUtil attrUtil)\n-            throws InvalidSearchConditionException {\n+            final AttributableUtil attrUtil) {\n \n         AbstractDerSchema schema = derSchemaDAO.find(schemaName, attrUtil.derSchemaClass());\n         if (schema == null) {"},{"sha":"f69f939dd78d539773f20877f36973e13675c206","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AttributableSearchDAOImpl.java","status":"modified","additions":27,"deletions":33,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -31,12 +31,12 @@\n import javax.validation.ValidationException;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.syncope.common.search.AttributableCond;\n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.EntitlementCond;\n-import org.apache.syncope.common.search.MembershipCond;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.search.ResourceCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributableCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.dao.search.EntitlementCond;\n+import org.apache.syncope.core.persistence.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.dao.search.ResourceCond;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n@@ -55,7 +55,7 @@\n @Repository\n public class AttributableSearchDAOImpl extends AbstractDAOImpl implements AttributableSearchDAO {\n \n-    static final private String EMPTY_ATTR_QUERY = \"SELECT subject_id FROM user_search_attr WHERE 1=2\";\n+    private static final String EMPTY_ATTR_QUERY = \"SELECT subject_id FROM user_search_attr WHERE 1=2\";\n \n     @Autowired\n     private UserDAO userDAO;\n@@ -100,7 +100,7 @@ private String getAdminRolesFilter(final Set<Long> adminRoles, final Attributabl\n     }\n \n     @Override\n-    public int count(final Set<Long> adminRoles, final NodeCond searchCondition, final AttributableUtil attrUtil) {\n+    public int count(final Set<Long> adminRoles, final SearchCond searchCondition, final AttributableUtil attrUtil) {\n         List<Object> parameters = Collections.synchronizedList(new ArrayList<Object>());\n \n         // 1. get the query string from the search condition\n@@ -127,14 +127,14 @@ public int count(final Set<Long> adminRoles, final NodeCond searchCondition, fin\n     }\n \n     @Override\n-    public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRoles, final NodeCond searchCondition,\n+    public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRoles, final SearchCond searchCondition,\n             final AttributableUtil attrUtil) {\n \n         return search(adminRoles, searchCondition, -1, -1, attrUtil);\n     }\n \n     @Override\n-    public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRoles, final NodeCond searchCondition,\n+    public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRoles, final SearchCond searchCondition,\n             final int page, final int itemsPerPage, final AttributableUtil attrUtil) {\n \n         List<T> result = Collections.<T>emptyList();\n@@ -157,7 +157,7 @@ public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRole\n     }\n \n     @Override\n-    public <T extends AbstractAttributable> boolean matches(final T user, final NodeCond searchCondition,\n+    public <T extends AbstractAttributable> boolean matches(final T user, final SearchCond searchCondition,\n             final AttributableUtil attrUtil) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<Object>());\n@@ -212,7 +212,7 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T extends AbstractAttributable> List<T> doSearch(final Set<Long> adminRoles, final NodeCond nodeCond,\n+    private <T extends AbstractAttributable> List<T> doSearch(final Set<Long> adminRoles, final SearchCond nodeCond,\n             final int page, final int itemsPerPage, final AttributableUtil attrUtil) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<Object>());\n@@ -281,7 +281,7 @@ private <T extends AbstractAttributable> List<T> doSearch(final Set<Long> adminR\n         return result;\n     }\n \n-    private StringBuilder getQuery(final NodeCond nodeCond, final List<Object> parameters,\n+    private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> parameters,\n             final AttributableUtil attrUtil) {\n \n         StringBuilder query = new StringBuilder();\n@@ -291,32 +291,32 @@ private StringBuilder getQuery(final NodeCond nodeCond, final List<Object> param\n             case LEAF:\n             case NOT_LEAF:\n                 if (nodeCond.getMembershipCond() != null && AttributableType.USER == attrUtil.getType()) {\n-                    query.append(getQuery(nodeCond.getMembershipCond(), nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n+                    query.append(getQuery(nodeCond.getMembershipCond(), nodeCond.getType() == SearchCond.Type.NOT_LEAF,\n                             parameters, attrUtil));\n                 }\n                 if (nodeCond.getResourceCond() != null) {\n-                    query.append(getQuery(nodeCond.getResourceCond(), nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n-                            parameters, attrUtil));\n+                    query.append(getQuery(nodeCond.getResourceCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, attrUtil));\n                 }\n                 if (nodeCond.getEntitlementCond() != null) {\n-                    query.append(getQuery(nodeCond.getEntitlementCond(), nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n-                            parameters));\n+                    query.append(getQuery(nodeCond.getEntitlementCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters));\n                 }\n                 if (nodeCond.getAttributeCond() != null) {\n-                    query.append(getQuery(nodeCond.getAttributeCond(), nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n-                            parameters, attrUtil));\n+                    query.append(getQuery(nodeCond.getAttributeCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, attrUtil));\n                 }\n                 if (nodeCond.getAttributableCond() != null) {\n-                    query.append(getQuery(nodeCond.getAttributableCond(), nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n-                            parameters, attrUtil));\n+                    query.append(getQuery(nodeCond.getAttributableCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, attrUtil));\n                 }\n                 break;\n \n             case AND:\n                 query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, attrUtil)).\n                         append(\" AND subject_id IN ( \").\n-                        append(getQuery(nodeCond.getRightNodeCond(), parameters, attrUtil).\n-                                append(\")\"));\n+                        append(getQuery(nodeCond.getRightNodeCond(), parameters, attrUtil)).\n+                        append(\")\");\n                 break;\n \n             case OR:\n@@ -344,15 +344,9 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n         }\n \n         query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n-                append(attrUtil.searchView()).append(\"_membership WHERE \");\n-\n-        if (cond.getRoleId() != null) {\n-            query.append(\"role_id=?\").append(setParameter(parameters, cond.getRoleId()));\n-        } else if (cond.getRoleName() != null) {\n-            query.append(\"role_name=?\").append(setParameter(parameters, cond.getRoleName()));\n-        }\n-\n-        query.append(')');\n+                append(attrUtil.searchView()).append(\"_membership WHERE \").\n+                append(\"role_id=?\").append(setParameter(parameters, cond.getRoleId())).\n+                append(')');\n \n         return query.toString();\n     }"},{"sha":"9d6d07863ab45aa2b965f1d72c0183cd4c7ff748","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -25,7 +25,6 @@\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n \n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrTemplate;\n@@ -267,9 +266,7 @@ public SyncopeRole findByAttrUniqueValue(final String schemaName, final RAttrVal\n     }\n \n     @Override\n-    public List<SyncopeRole> findByDerAttrValue(final String schemaName, final String value)\n-            throws InvalidSearchConditionException {\n-\n+    public List<SyncopeRole> findByDerAttrValue(final String schemaName, final String value) {\n         return findByDerAttrValue(schemaName, value, AttributableUtil.getInstance(AttributableType.ROLE));\n     }\n \n@@ -331,7 +328,7 @@ private List<Long> unmatched(final Long roleId,\n     @Override\n     public final int count() {\n         Query countQuery = entityManager.createNativeQuery(\n-                \"SELECT COUNT(e) FROM \" + SyncopeRole.class.getSimpleName() + \" e\");\n+                \"SELECT COUNT(e.id) FROM \" + SyncopeRole.class.getSimpleName() + \" e\");\n \n         return ((Number) countQuery.getSingleResult()).intValue();\n     }"},{"sha":"969eb9c102f778e5354422df6d4ffe208ea233d0","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -25,7 +25,6 @@\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n \n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n@@ -124,9 +123,7 @@ public SyncopeUser findByAttrUniqueValue(final String schemaName, final UAttrVal\n     }\n \n     @Override\n-    public List<SyncopeUser> findByDerAttrValue(final String schemaName, final String value)\n-            throws InvalidSearchConditionException {\n-\n+    public List<SyncopeUser> findByDerAttrValue(final String schemaName, final String value) {\n         return findByDerAttrValue(schemaName, value, AttributableUtil.getInstance(AttributableType.USER));\n     }\n "},{"sha":"498c1d222ec50b3a85eaf862b6244134f32c12cd","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/AbstractSearchCond.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAbstractSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAbstractSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAbstractSearchCond.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.persistence.dao.search;\r\n+\r\n+import java.io.Serializable;\r\n+import org.apache.commons.lang3.builder.EqualsBuilder;\r\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\r\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\r\n+import org.apache.commons.lang3.builder.ToStringStyle;\r\n+\r\n+public abstract class AbstractSearchCond implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 5376869884544910804L;\r\n+\r\n+    @Override\r\n+    public boolean equals(final Object obj) {\r\n+        return EqualsBuilder.reflectionEquals(this, obj);\r\n+    }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        return HashCodeBuilder.reflectionHashCode(this);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\r\n+    }\r\n+\r\n+    public abstract boolean isValid();\r\n+\r\n+}\r"},{"sha":"d73e58d7f5d23d5b72b81438b13ad07154e4a41b","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/AttributableCond.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAttributableCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAttributableCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAttributableCond.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,12 +16,12 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.search;\r\n+package org.apache.syncope.core.persistence.dao.search;\r\n \r\n /**\r\n  * Search condition to be applied when comparing bean field values.\r\n  */\r\n-public class AttributableCond extends AttributeCond implements SearchCond {\r\n+public class AttributableCond extends AttributeCond {\r\n \r\n     private static final long serialVersionUID = -1880319220462653955L;\r\n \r","previous_filename":"common/src/main/java/org/apache/syncope/common/search/AttributableCond.java"},{"sha":"d9882f8d90aec1ceee161de4c337389ad21a5db9","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/AttributeCond.java","status":"renamed","additions":2,"deletions":12,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAttributeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAttributeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAttributeCond.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,25 +16,15 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.search;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n+package org.apache.syncope.core.persistence.dao.search;\r\n \r\n /**\r\n  * Search condition to be applied when comparing attribute values.\r\n  */\r\n-@XmlRootElement(name = \"attributeCondition\")\r\n-@XmlType\r\n-public class AttributeCond extends AbstractBaseBean implements SearchCond {\r\n+public class AttributeCond extends AbstractSearchCond {\r\n \r\n     private static final long serialVersionUID = 3275277728404021417L;\r\n \r\n-    @XmlEnum\r\n-    @XmlType(name = \"attributeConditionType\")\r\n     public enum Type {\r\n \r\n         LIKE,\r","previous_filename":"common/src/main/java/org/apache/syncope/common/search/AttributeCond.java"},{"sha":"bd17cf6377459d00e76c94a6b37acfe8ebd201f7","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/EntitlementCond.java","status":"renamed","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FEntitlementCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FEntitlementCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FEntitlementCond.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,16 +16,9 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.search;\r\n+package org.apache.syncope.core.persistence.dao.search;\r\n \r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlRootElement(name = \"entitlementCondition\")\r\n-@XmlType\r\n-public class EntitlementCond extends AbstractBaseBean implements SearchCond {\r\n+public class EntitlementCond extends AbstractSearchCond {\r\n \r\n     private static final long serialVersionUID = -4077781080368377428L;\r\n \r","previous_filename":"common/src/main/java/org/apache/syncope/common/search/EntitlementCond.java"},{"sha":"21613882a0820ff50b8ce4ff15f2c5efdf783430","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/MembershipCond.java","status":"renamed","additions":4,"deletions":21,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FMembershipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FMembershipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FMembershipCond.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,26 +16,17 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.search;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n+package org.apache.syncope.core.persistence.dao.search;\r\n \r\n /**\r\n  * Search condition to be applied when searching for memberships.\r\n  */\r\n-@XmlRootElement(name = \"membershipCondition\")\r\n-@XmlType\r\n-public class MembershipCond extends AbstractBaseBean implements SearchCond {\r\n+public class MembershipCond extends AbstractSearchCond {\r\n \r\n     private static final long serialVersionUID = -728155256293925989L;\r\n \r\n     private Long roleId;\r\n \r\n-    private String roleName;\r\n-\r\n     public MembershipCond() {\r\n         super();\r\n     }\r\n@@ -44,20 +35,12 @@ public Long getRoleId() {\n         return roleId;\r\n     }\r\n \r\n-    public void setRoleId(Long roleId) {\r\n+    public void setRoleId(final Long roleId) {\r\n         this.roleId = roleId;\r\n     }\r\n \r\n-    public String getRoleName() {\r\n-        return roleName;\r\n-    }\r\n-\r\n-    public void setRoleName(String roleName) {\r\n-        this.roleName = roleName;\r\n-    }\r\n-\r\n     @Override\r\n     public final boolean isValid() {\r\n-        return !(roleId == null && roleName == null);\r\n+        return roleId != null;\r\n     }\r\n }\r","previous_filename":"common/src/main/java/org/apache/syncope/common/search/MembershipCond.java"},{"sha":"5b5201ecab0c62b368e776f2a525a9c425120749","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/ResourceCond.java","status":"renamed","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FResourceCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FResourceCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FResourceCond.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,19 +16,12 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.search;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n+package org.apache.syncope.core.persistence.dao.search;\r\n \r\n /**\r\n  * Search condition to be applied when searching for associated resources.\r\n  */\r\n-@XmlRootElement(name = \"resourceCondition\")\r\n-@XmlType\r\n-public class ResourceCond extends AbstractBaseBean implements SearchCond {\r\n+public class ResourceCond extends AbstractSearchCond {\r\n \r\n     private static final long serialVersionUID = 466054166309460002L;\r\n \r\n@@ -38,7 +31,7 @@ public String getResourceName() {\n         return resourceName;\r\n     }\r\n \r\n-    public void setResourceName(String resourceName) {\r\n+    public void setResourceName(final String resourceName) {\r\n         this.resourceName = resourceName;\r\n     }\r\n \r","previous_filename":"common/src/main/java/org/apache/syncope/common/search/ResourceCond.java"},{"sha":"baf861e8483cae743002705b4ece6fdcc534d358","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/SearchCond.java","status":"renamed","additions":53,"deletions":51,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FSearchCond.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,23 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.common.search;\r\n+package org.apache.syncope.core.persistence.dao.search;\r\n \r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n+import java.util.List;\r\n \r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlRootElement(name = \"nodeCondition\")\r\n-@XmlType\r\n-public class NodeCond extends AbstractBaseBean {\r\n+public class SearchCond extends AbstractSearchCond {\r\n \r\n     private static final long serialVersionUID = 661560782247499526L;\r\n \r\n-    @XmlEnum\r\n-    @XmlType(name = \"nodeConditionType\")\r\n     public enum Type {\r\n \r\n         LEAF,\r\n@@ -54,87 +45,81 @@ public enum Type {\n \r\n     private EntitlementCond entitlementCond;\r\n \r\n-    private NodeCond leftNodeCond;\r\n-\r\n-    private NodeCond rightNodeCond;\r\n+    private SearchCond leftNodeCond;\r\n \r\n-    public static NodeCond getLeafCond(final AttributableCond syncopeUserCond) {\r\n-        NodeCond nodeCond = new NodeCond();\r\n-\r\n-        nodeCond.type = Type.LEAF;\r\n-        nodeCond.attributableCond = syncopeUserCond;\r\n-\r\n-        return nodeCond;\r\n-    }\r\n+    private SearchCond rightNodeCond;\r\n \r\n-    public static NodeCond getLeafCond(final AttributeCond attributeCond) {\r\n-        NodeCond nodeCond = new NodeCond();\r\n+    public static SearchCond getLeafCond(final AttributeCond attributeCond) {\r\n+        SearchCond nodeCond = new SearchCond();\r\n \r\n         nodeCond.type = Type.LEAF;\r\n-        nodeCond.attributeCond = attributeCond;\r\n+        if (attributeCond instanceof AttributableCond) {\r\n+            nodeCond.attributableCond = (AttributableCond) attributeCond;\r\n+        } else {\r\n+            nodeCond.attributeCond = attributeCond;\r\n+        }\r\n \r\n         return nodeCond;\r\n     }\r\n \r\n-    public static NodeCond getLeafCond(final MembershipCond membershipCond) {\r\n-        NodeCond nodeCond = new NodeCond();\r\n+    public static SearchCond getLeafCond(final MembershipCond membershipCond) {\r\n+        SearchCond nodeCond = new SearchCond();\r\n \r\n         nodeCond.type = Type.LEAF;\r\n         nodeCond.membershipCond = membershipCond;\r\n \r\n         return nodeCond;\r\n     }\r\n \r\n-    public static NodeCond getLeafCond(final ResourceCond resourceCond) {\r\n-        NodeCond nodeCond = new NodeCond();\r\n+    public static SearchCond getLeafCond(final ResourceCond resourceCond) {\r\n+        SearchCond nodeCond = new SearchCond();\r\n \r\n         nodeCond.type = Type.LEAF;\r\n         nodeCond.resourceCond = resourceCond;\r\n \r\n         return nodeCond;\r\n     }\r\n \r\n-    public static NodeCond getLeafCond(final EntitlementCond entitlementCond) {\r\n-        NodeCond nodeCond = new NodeCond();\r\n+    public static SearchCond getLeafCond(final EntitlementCond entitlementCond) {\r\n+        SearchCond nodeCond = new SearchCond();\r\n \r\n         nodeCond.type = Type.LEAF;\r\n         nodeCond.entitlementCond = entitlementCond;\r\n \r\n         return nodeCond;\r\n     }\r\n \r\n-    public static NodeCond getNotLeafCond(final AttributableCond syncopeUserCond) {\r\n-        NodeCond nodeCond = getLeafCond(syncopeUserCond);\r\n+    public static SearchCond getNotLeafCond(final AttributeCond attributeCond) {\r\n+        SearchCond nodeCond = getLeafCond(attributeCond);\r\n         nodeCond.type = Type.NOT_LEAF;\r\n         return nodeCond;\r\n     }\r\n \r\n-    public static NodeCond getNotLeafCond(final AttributeCond attributeCond) {\r\n-        NodeCond nodeCond = getLeafCond(attributeCond);\r\n+    public static SearchCond getNotLeafCond(final MembershipCond membershipCond) {\r\n+        SearchCond nodeCond = getLeafCond(membershipCond);\r\n         nodeCond.type = Type.NOT_LEAF;\r\n         return nodeCond;\r\n     }\r\n \r\n-    public static NodeCond getNotLeafCond(final MembershipCond membershipCond) {\r\n-        NodeCond nodeCond = getLeafCond(membershipCond);\r\n+    public static SearchCond getNotLeafCond(final ResourceCond resourceCond) {\r\n+        SearchCond nodeCond = getLeafCond(resourceCond);\r\n         nodeCond.type = Type.NOT_LEAF;\r\n         return nodeCond;\r\n     }\r\n \r\n-    public static NodeCond getNotLeafCond(final ResourceCond resourceCond) {\r\n-        NodeCond nodeCond = getLeafCond(resourceCond);\r\n+    public static SearchCond getNotLeafCond(final EntitlementCond entitlementCond) {\r\n+        SearchCond nodeCond = getLeafCond(entitlementCond);\r\n         nodeCond.type = Type.NOT_LEAF;\r\n         return nodeCond;\r\n     }\r\n \r\n-    public static NodeCond getNotLeafCond(final EntitlementCond entitlementCond) {\r\n-        NodeCond nodeCond = getLeafCond(entitlementCond);\r\n+    public static SearchCond getNotLeafCond(final SearchCond nodeCond) {\r\n         nodeCond.type = Type.NOT_LEAF;\r\n         return nodeCond;\r\n     }\r\n \r\n-    public static NodeCond getAndCond(final NodeCond leftCond, final NodeCond rightCond) {\r\n-        NodeCond nodeCond = new NodeCond();\r\n+    public static SearchCond getAndCond(final SearchCond leftCond, final SearchCond rightCond) {\r\n+        SearchCond nodeCond = new SearchCond();\r\n \r\n         nodeCond.type = Type.AND;\r\n         nodeCond.leftNodeCond = leftCond;\r\n@@ -143,8 +128,17 @@ public static NodeCond getAndCond(final NodeCond leftCond, final NodeCond rightC\n         return nodeCond;\r\n     }\r\n \r\n-    public static NodeCond getOrCond(final NodeCond leftCond, final NodeCond rightCond) {\r\n-        NodeCond nodeCond = new NodeCond();\r\n+    public static SearchCond getAndCond(final List<SearchCond> conditions) {\r\n+        if (conditions.size() > 2) {\r\n+            SearchCond removed = conditions.remove(0);\r\n+            return getAndCond(removed, getAndCond(conditions));\r\n+        } else {\r\n+            return getAndCond(conditions.get(0), conditions.get(1));\r\n+        }\r\n+    }\r\n+\r\n+    public static SearchCond getOrCond(final SearchCond leftCond, final SearchCond rightCond) {\r\n+        SearchCond nodeCond = new SearchCond();\r\n \r\n         nodeCond.type = Type.OR;\r\n         nodeCond.leftNodeCond = leftCond;\r\n@@ -153,6 +147,15 @@ public static NodeCond getOrCond(final NodeCond leftCond, final NodeCond rightCo\n         return nodeCond;\r\n     }\r\n \r\n+    public static SearchCond getOrCond(final List<SearchCond> conditions) {\r\n+        if (conditions.size() > 2) {\r\n+            SearchCond removed = conditions.remove(0);\r\n+            return getOrCond(removed, getOrCond(conditions));\r\n+        } else {\r\n+            return getOrCond(conditions.get(0), conditions.get(1));\r\n+        }\r\n+    }\r\n+\r\n     public AttributableCond getAttributableCond() {\r\n         return attributableCond;\r\n     }\r\n@@ -193,19 +196,19 @@ public void setEntitlementCond(final EntitlementCond entitlementCond) {\n         this.entitlementCond = entitlementCond;\r\n     }\r\n \r\n-    public NodeCond getLeftNodeCond() {\r\n+    public SearchCond getLeftNodeCond() {\r\n         return leftNodeCond;\r\n     }\r\n \r\n-    public void setLeftNodeCond(final NodeCond leftNodeCond) {\r\n+    public void setLeftNodeCond(final SearchCond leftNodeCond) {\r\n         this.leftNodeCond = leftNodeCond;\r\n     }\r\n \r\n-    public NodeCond getRightNodeCond() {\r\n+    public SearchCond getRightNodeCond() {\r\n         return rightNodeCond;\r\n     }\r\n \r\n-    public void setRightNodeCond(final NodeCond rightNodeCond) {\r\n+    public void setRightNodeCond(final SearchCond rightNodeCond) {\r\n         this.rightNodeCond = rightNodeCond;\r\n     }\r\n \r\n@@ -217,7 +220,6 @@ public void setType(final Type type) {\n         this.type = type;\r\n     }\r\n \r\n-    @JsonIgnore\r\n     public boolean isValid() {\r\n         boolean isValid = false;\r\n \r","previous_filename":"common/src/main/java/org/apache/syncope/common/search/NodeCond.java"},{"sha":"3ad35fda056e26115bb9c09afda1bc1df18b6d0f","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/package-info.java","status":"renamed","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2Fpackage-info.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -16,8 +16,4 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-@XmlSchema(namespace = SyncopeConstants.NAMESPACE)\n-package org.apache.syncope.common.search;\n-\n-import javax.xml.bind.annotation.XmlSchema;\n-import org.apache.syncope.common.SyncopeConstants;\n+package org.apache.syncope.core.persistence.dao.search;","previous_filename":"common/src/main/java/org/apache/syncope/common/search/package-info.java"},{"sha":"2a84ffee9d13cd729deaee42eeda98febead1473","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/NotificationValidator.java","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -38,22 +38,6 @@ public boolean isValid(final Notification value, final ConstraintValidatorContex\n                     getTemplate(EntityViolationType.InvalidNotification, \"No events\")).\n                     addNode(\"events\").addConstraintViolation();\n         }\n-        if (value.getAbout() != null && !value.getAbout().isValid()) {\n-            isValid = false;\n-\n-            context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidNotification, \"Invalid about search condition\")).\n-                    addNode(\"about\").addConstraintViolation();\n-        }\n-        if (value.getRecipients() != null) {\n-            if (!value.getRecipients().isValid() && !value.isSelfAsRecipient()) {\n-                isValid = false;\n-\n-                context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidNotification, \"Invalid recipients search condition\")).\n-                        addNode(\"recipients\").addConstraintViolation();\n-            }\n-        }\n \n         return isValid;\n     }"},{"sha":"0ff432d38322b6ca6876e7fbeeceae4e4b420e13","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationReporter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationReporter.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.propagation;\n \n import java.util.List;\n-import org.apache.syncope.common.to.PropagationStatusTO;\n+import org.apache.syncope.common.to.PropagationStatus;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n@@ -54,5 +54,5 @@ void onSuccessOrSecondaryResourceFailures(String resourceName, PropagationTaskEx\n      *\n      * @return the list of propagation statuses\n      */\n-    List<PropagationStatusTO> getStatuses();\n+    List<PropagationStatus> getStatuses();\n }"},{"sha":"e79682303449f42beb108668e7d0ca2846412608","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/DefaultPropagationReporter.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationReporter.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -20,7 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.common.to.PropagationStatusTO;\n+import org.apache.syncope.common.to.PropagationStatus;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n@@ -37,14 +37,14 @@ public class DefaultPropagationReporter implements PropagationReporter {\n     @Autowired\n     protected ConnObjectUtil connObjectUtil;\n \n-    protected final List<PropagationStatusTO> statuses = new ArrayList<PropagationStatusTO>();\n+    protected final List<PropagationStatus> statuses = new ArrayList<PropagationStatus>();\n \n     @Override\n     public void onSuccessOrSecondaryResourceFailures(final String resource,\n             final PropagationTaskExecStatus executionStatus,\n             final String failureReason, final ConnectorObject beforeObj, final ConnectorObject afterObj) {\n \n-        final PropagationStatusTO propagation = new PropagationStatusTO();\n+        final PropagationStatus propagation = new PropagationStatus();\n         propagation.setResource(resource);\n         propagation.setStatus(executionStatus);\n         propagation.setFailureReason(failureReason);\n@@ -61,7 +61,7 @@ public void onSuccessOrSecondaryResourceFailures(final String resource,\n     }\n \n     private boolean containsPropagationStatusTO(final String resourceName) {\n-        for (PropagationStatusTO status : statuses) {\n+        for (PropagationStatus status : statuses) {\n             if (resourceName.equals(status.getResource())) {\n                 return true;\n             }\n@@ -77,7 +77,7 @@ public void onPrimaryResourceFailure(final List<PropagationTask> tasks) {\n \n         for (PropagationTask propagationTask : tasks) {\n             if (!containsPropagationStatusTO(propagationTask.getResource().getName())) {\n-                final PropagationStatusTO propagationStatusTO = new PropagationStatusTO();\n+                final PropagationStatus propagationStatusTO = new PropagationStatus();\n                 propagationStatusTO.setResource(propagationTask.getResource().getName());\n                 propagationStatusTO.setStatus(PropagationTaskExecStatus.FAILURE);\n                 propagationStatusTO.setFailureReason(\n@@ -88,7 +88,7 @@ public void onPrimaryResourceFailure(final List<PropagationTask> tasks) {\n     }\n \n     @Override\n-    public List<PropagationStatusTO> getStatuses() {\n+    public List<PropagationStatus> getStatuses() {\n         return statuses;\n     }\n }"},{"sha":"04c12bd2aa7259f286fe1cf3fb9e451b519ef14f","filename":"core/src/main/java/org/apache/syncope/core/report/RoleReportlet.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FRoleReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FRoleReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FRoleReportlet.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n+import org.apache.syncope.core.rest.data.SearchCondConverter;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -64,8 +65,8 @@ private List<SyncopeRole> getPagedRoles(final int page) {\n         if (conf.getMatchingCond() == null) {\n             result = roleDAO.findAll();\n         } else {\n-            result = searchDAO.search(adminRoleIds, conf.getMatchingCond(), page, PAGE_SIZE,\n-                    AttributableUtil.getInstance(AttributableType.ROLE));\n+            result = searchDAO.search(adminRoleIds, SearchCondConverter.convert(conf.getMatchingCond()),\n+                    page, PAGE_SIZE, AttributableUtil.getInstance(AttributableType.ROLE));\n         }\n \n         return result;\n@@ -76,8 +77,8 @@ private int count() {\n \n         return conf.getMatchingCond() == null\n                 ? roleDAO.findAll().size()\n-                : searchDAO.count(adminRoleIds, conf.getMatchingCond(),\n-                AttributableUtil.getInstance(AttributableType.ROLE));\n+                : searchDAO.count(adminRoleIds, SearchCondConverter.convert(conf.getMatchingCond()),\n+                        AttributableUtil.getInstance(AttributableType.ROLE));\n     }\n \n     private void doExtractResources(final ContentHandler handler, final AbstractAttributableTO attributableTO)"},{"sha":"470e71de373841d7f697587caeb126ee2f965489","filename":"core/src/main/java/org/apache/syncope/core/report/UserReportlet.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.rest.data.SearchCondConverter;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.DataFormat;\n import org.apache.syncope.core.util.EntitlementUtil;\n@@ -72,8 +73,8 @@ private List<SyncopeUser> getPagedUsers(final int page) {\n         if (conf.getMatchingCond() == null) {\n             result = userDAO.findAll(adminRoleIds, page, PAGE_SIZE);\n         } else {\n-            result = searchDAO.search(adminRoleIds, conf.getMatchingCond(), page, PAGE_SIZE,\n-                    AttributableUtil.getInstance(AttributableType.USER));\n+            result = searchDAO.search(adminRoleIds, SearchCondConverter.convert(conf.getMatchingCond()),\n+                    page, PAGE_SIZE, AttributableUtil.getInstance(AttributableType.USER));\n         }\n \n         return result;\n@@ -84,7 +85,7 @@ private int count() {\n \n         return conf.getMatchingCond() == null\n                 ? userDAO.count(adminRoleIds)\n-                : searchDAO.count(adminRoleIds, conf.getMatchingCond(),\n+                : searchDAO.count(adminRoleIds, SearchCondConverter.convert(conf.getMatchingCond()),\n                         AttributableUtil.getInstance(AttributableType.USER));\n     }\n "},{"sha":"41ee011d2f659423c5126b37d4e17dee01fb4680","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnectorController.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -26,14 +26,14 @@\n import java.util.Set;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.to.ConnBundleTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n@@ -302,16 +302,16 @@ public void reload() {\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n-    public BulkActionRes bulk(final BulkAction bulkAction) {\n-        BulkActionRes res = new BulkActionRes();\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n+        BulkActionResult res = new BulkActionResult();\n \n         if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n             for (String id : bulkAction.getTargets()) {\n                 try {\n-                    res.add(delete(Long.valueOf(id)).getId(), BulkActionRes.Status.SUCCESS);\n+                    res.add(delete(Long.valueOf(id)).getId(), BulkActionResult.Status.SUCCESS);\n                 } catch (Exception e) {\n                     LOG.error(\"Error performing delete for connector {}\", id, e);\n-                    res.add(id, BulkActionRes.Status.FAILURE);\n+                    res.add(id, BulkActionResult.Status.FAILURE);\n                 }\n             }\n         }"},{"sha":"ea5dacd3bb0a601cd29bf6779748e3e1f256e7d8","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/EntitlementController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FEntitlementController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FEntitlementController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FEntitlementController.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -22,7 +22,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.common.to.EntitlementTO;\n+import org.apache.syncope.common.wrap.EntitlementTO;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.util.EntitlementUtil;"},{"sha":"f844940fefcb9e42445347c492425f06899d3bc1","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.common.types.LoggerType;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;"},{"sha":"0cae808e1fec881a41a853ef272b20c1e3e46ab8","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -44,7 +44,7 @@\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.types.ReportExecStatus;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.beans.ReportExec;\n@@ -128,16 +128,6 @@ public int count() {\n         return reportDAO.count();\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    public List<ReportTO> list() {\n-        List<Report> reports = reportDAO.findAll();\n-        List<ReportTO> result = new ArrayList<ReportTO>(reports.size());\n-        for (Report report : reports) {\n-            result.add(binder.getReportTO(report));\n-        }\n-        return result;\n-    }\n-\n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n     public List<ReportTO> list(final int page, final int size) {\n         List<Report> reports = reportDAO.findAll(page, size);"},{"sha":"eb730131529f92c46a1c5e6a7947c5c4a4407572","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -24,14 +24,14 @@\n import javax.persistence.EntityExistsException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n@@ -246,16 +246,16 @@ public boolean check(final ResourceTO resourceTO) {\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n-    public BulkActionRes bulk(final BulkAction bulkAction) {\n-        BulkActionRes res = new BulkActionRes();\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n+        BulkActionResult res = new BulkActionResult();\n \n         if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n             for (String name : bulkAction.getTargets()) {\n                 try {\n-                    res.add(delete(name).getName(), BulkActionRes.Status.SUCCESS);\n+                    res.add(delete(name).getName(), BulkActionResult.Status.SUCCESS);\n                 } catch (Exception e) {\n                     LOG.error(\"Error performing delete for resource {}\", name, e);\n-                    res.add(name, BulkActionRes.Status.FAILURE);\n+                    res.add(name, BulkActionResult.Status.FAILURE);\n                 }\n             }\n         }"},{"sha":"2bb9122e3ce94c60033037d0f5dc0df12f5aac04","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":5,"deletions":20,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -27,12 +27,11 @@\n import javax.annotation.Resource;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.mod.RoleMod;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -182,7 +181,7 @@ public int count() {\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public List<RoleTO> list(final int page, final int size) {\n-        List<SyncopeRole> roles = roleDAO.findAll();\n+        List<SyncopeRole> roles = roleDAO.findAll(page, size);\n \n         List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n         for (SyncopeRole role : roles) {\n@@ -194,28 +193,14 @@ public List<RoleTO> list(final int page, final int size) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n-    public int searchCount(final NodeCond searchCondition)\n-            throws InvalidSearchConditionException {\n-\n-        if (!searchCondition.isValid()) {\n-            LOG.error(\"Invalid search condition: {}\", searchCondition);\n-            throw new InvalidSearchConditionException();\n-        }\n-\n+    public int searchCount(final SearchCond searchCondition) {\n         final Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         return searchDAO.count(adminRoleIds, searchCondition, AttributableUtil.getInstance(AttributableType.ROLE));\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n-    public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size)\n-            throws InvalidSearchConditionException {\n-\n-        if (!searchCondition.isValid()) {\n-            LOG.error(\"Invalid search condition: {}\", searchCondition);\n-            throw new InvalidSearchConditionException();\n-        }\n-\n+    public List<RoleTO> search(final SearchCond searchCondition, final int page, final int size) {\n         final List<SyncopeRole> matchingRoles = searchDAO.search(\n                 EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()), searchCondition, page, size,\n                 AttributableUtil.getInstance(AttributableType.ROLE));"},{"sha":"561344507aec9575db4540129ee9cce269b52aa2","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.types.SchemaType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.persistence.beans.AbstractNormalSchema;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;"},{"sha":"5e10623b1fa91446342011207502a09027698a6c","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":11,"deletions":25,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -24,8 +24,8 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n@@ -34,7 +34,7 @@\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.types.TaskType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.notification.NotificationJob;\n@@ -140,20 +140,6 @@ public int count(final TaskType taskType) {\n         return taskDAO.count(TaskUtil.getInstance(taskType).taskClass());\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_LIST')\")\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractTaskTO> List<T> list(final TaskType taskType) {\n-        TaskUtil taskUtil = TaskUtil.getInstance(taskType);\n-\n-        List<Task> tasks = taskDAO.findAll(taskUtil.taskClass());\n-        List<T> taskTOs = new ArrayList<T>(tasks.size());\n-        for (Task task : tasks) {\n-            taskTOs.add((T) binder.getTaskTO(task, taskUtil));\n-        }\n-\n-        return taskTOs;\n-    }\n-\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractTaskTO> List<T> list(final TaskType taskType, final int page, final int size) {\n@@ -326,17 +312,17 @@ public TaskExecTO deleteExecution(final Long executionId) {\n             + \"(hasRole('TASK_EXECUTE') and \"\n             + \"(#bulkAction.operation == #bulkAction.operation.EXECUTE or \"\n             + \"#bulkAction.operation == #bulkAction.operation.DRYRUN))\")\n-    public BulkActionRes bulk(final BulkAction bulkAction) {\n-        BulkActionRes res = new BulkActionRes();\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n+        BulkActionResult res = new BulkActionResult();\n \n         switch (bulkAction.getOperation()) {\n             case DELETE:\n                 for (String taskId : bulkAction.getTargets()) {\n                     try {\n-                        res.add(delete(Long.valueOf(taskId)).getId(), BulkActionRes.Status.SUCCESS);\n+                        res.add(delete(Long.valueOf(taskId)).getId(), BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing delete for task {}\", taskId, e);\n-                        res.add(taskId, BulkActionRes.Status.FAILURE);\n+                        res.add(taskId, BulkActionResult.Status.FAILURE);\n                     }\n                 }\n                 break;\n@@ -345,10 +331,10 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n                 for (String taskId : bulkAction.getTargets()) {\n                     try {\n                         execute(Long.valueOf(taskId), true);\n-                        res.add(taskId, BulkActionRes.Status.SUCCESS);\n+                        res.add(taskId, BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing dryrun for task {}\", taskId, e);\n-                        res.add(taskId, BulkActionRes.Status.FAILURE);\n+                        res.add(taskId, BulkActionResult.Status.FAILURE);\n                     }\n                 }\n                 break;\n@@ -357,10 +343,10 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n                 for (String taskId : bulkAction.getTargets()) {\n                     try {\n                         execute(Long.valueOf(taskId), false);\n-                        res.add(taskId, BulkActionRes.Status.SUCCESS);\n+                        res.add(taskId, BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing execute for task {}\", taskId, e);\n-                        res.add(taskId, BulkActionRes.Status.FAILURE);\n+                        res.add(taskId, BulkActionResult.Status.FAILURE);\n                     }\n                 }\n                 break;"},{"sha":"aec1c78430c0303a87d6638a576a254f9743f9c5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":12,"deletions":27,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -29,16 +29,15 @@\n import org.apache.syncope.common.mod.StatusMod;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n-import org.apache.syncope.common.to.BulkActionRes.Status;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n+import org.apache.syncope.common.reqres.BulkActionResult.Status;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -120,12 +119,7 @@ public int count() {\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n-    public int searchCount(final NodeCond searchCondition) throws InvalidSearchConditionException {\n-        if (!searchCondition.isValid()) {\n-            LOG.error(\"Invalid search condition: {}\", searchCondition);\n-            throw new InvalidSearchConditionException();\n-        }\n-\n+    public int searchCount(final SearchCond searchCondition) {\n         return searchDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n     }\n@@ -152,21 +146,14 @@ public UserTO readSelf() {\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     public UserTO read(final Long userId) {\n         return binder.getUserTO(userId);\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n-    public List<UserTO> search(final NodeCond searchCondition, final int page, final int size)\n-            throws InvalidSearchConditionException {\n-\n-        if (!searchCondition.isValid()) {\n-            LOG.error(\"Invalid search condition: {}\", searchCondition);\n-            throw new InvalidSearchConditionException();\n-        }\n-\n+    @Transactional(readOnly = true)\n+    public List<UserTO> search(final SearchCond searchCondition, final int page, final int size) {\n         final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(EntitlementUtil.\n                 getOwnedEntitlementNames()), searchCondition, page, size,\n                 AttributableUtil.getInstance(AttributableType.USER));\n@@ -252,18 +239,16 @@ public UserTO update(final UserMod userMod) {\n          */\n         WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(actual);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n-\n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n                 getBean(PropagationReporter.class);\n \n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n             binder.forceVirtualAttributes(\n                     updated.getResult().getKey().getId(),\n                     actual.getVirAttrsToRemove(),\n                     actual.getVirAttrsToUpdate());\n-\n         } else {\n             try {\n                 taskExecutor.execute(tasks, propagationReporter);\n@@ -389,8 +374,8 @@ public UserTO delete(final Long userId) {\n             + \"(hasRole('USER_UPDATE') and \"\n             + \"(#bulkAction.operation == #bulkAction.operation.REACTIVATE or \"\n             + \"#bulkAction.operation == #bulkAction.operation.SUSPEND))\")\n-    public BulkActionRes bulk(final BulkAction bulkAction) {\n-        BulkActionRes res = new BulkActionRes();\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n+        BulkActionResult res = new BulkActionResult();\n \n         switch (bulkAction.getOperation()) {\n             case DELETE:"},{"sha":"817aac5860a3945d14d91139ee0dab9e4c102506","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -35,8 +35,8 @@\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientCompositeException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;"},{"sha":"0812da46d8f90bbe45c2ff30efc03c5a2162d9b7","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.connid.ConnPoolConfUtil;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;"},{"sha":"9bc15b3731077bdd3236b7b5d90f57b999719538","filename":"core/src/main/java/org/apache/syncope/core/rest/data/NotificationDataBinder.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -26,7 +26,7 @@\n @Component\n public class NotificationDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = {\"id\", \"about\", \"recipients\"};\n+    private static final String[] IGNORE_PROPERTIES = { \"id\", \"about\", \"recipients\" };\n \n     public NotificationTO getNotificationTO(final Notification notification) {\n         NotificationTO result = new NotificationTO();\n@@ -48,6 +48,7 @@ public Notification createNotification(final NotificationTO notificationTO) {\n \n     public void updateNotification(final Notification notification, final NotificationTO notificationTO) {\n         BeanUtils.copyProperties(notificationTO, notification, IGNORE_PROPERTIES);\n+\n         notification.setAbout(notificationTO.getAbout());\n         notification.setRecipients(notificationTO.getRecipients());\n     }"},{"sha":"dc93401f4773bac7cda76a55fe61972d519dd093","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -33,8 +33,8 @@\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientCompositeException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AbstractMapping;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;"},{"sha":"5a6885eca23ad6dc1b245e43503c39cbff019ebf","filename":"core/src/main/java/org/apache/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -27,8 +27,8 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientCompositeException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.persistence.beans.AbstractAttrTemplate;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;"},{"sha":"745587d91b66b91ee577e1fe9f5f3684f90f9bcc","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -25,8 +25,8 @@\n import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientCompositeException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.persistence.beans.AbstractNormalSchema;"},{"sha":"8d7611ee255f7d8d07e825e9bb175d1b69e1cfdd","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SearchCondConverter.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondConverter.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.data;\n+\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n+import org.apache.syncope.common.search.SyncopeFiqlSearchConditionBuilder;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n+\n+/**\n+ * Converts FIQL expressions to Syncope's <tt>SearchCond</tt>.\n+ */\n+public final class SearchCondConverter {\n+\n+    /**\n+     * Parses a FIQL expression into Syncope's <tt>SearchCond</tt>, using CXF's <tt>FiqlParser</tt>.\n+     *\n+     * @param fiqlExpression FIQL string\n+     * @return <tt>SearchCond</tt> instance for given FIQL expression\n+     * @see FiqlParser\n+     */\n+    public static SearchCond convert(final String fiqlExpression) {\n+        FiqlParser<SearchBean> fiqlParser = new FiqlParser<SearchBean>(\n+                SearchBean.class, SyncopeFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n+        SearchCondVisitor searchCondVisitor = new SearchCondVisitor();\n+\n+        searchCondVisitor.visit(fiqlParser.parse(fiqlExpression));\n+        return searchCondVisitor.getQuery();\n+    }\n+\n+    private SearchCondConverter() {\n+        // empty constructor for static utility class        \n+    }\n+}"},{"sha":"9b4efe3286af9d69830695ef8744aba2e560cb79","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SearchCondVisitor.java","status":"added","additions":202,"deletions":0,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondVisitor.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.data;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.jaxrs.ext.search.ConditionType;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.cxf.jaxrs.ext.search.SearchUtils;\n+import org.apache.cxf.jaxrs.ext.search.visitor.AbstractSearchConditionVisitor;\n+import org.apache.syncope.common.search.SearchableFields;\n+import org.apache.syncope.common.search.SpecialAttr;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.core.persistence.dao.search.AttributableCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.dao.search.EntitlementCond;\n+import org.apache.syncope.core.persistence.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.dao.search.ResourceCond;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n+\n+/**\n+ * Converts CXF's <tt>SearchCondition</tt> into internal <tt>SearchCond</tt>.\n+ */\n+public class SearchCondVisitor extends AbstractSearchConditionVisitor<SearchBean, SearchCond> {\n+\n+    private static final List<String> ATTRIBUTABLE_FIELDS;\n+\n+    static {\n+        ATTRIBUTABLE_FIELDS = new ArrayList<String>();\n+        ATTRIBUTABLE_FIELDS.addAll(SearchableFields.get(UserTO.class));\n+        ATTRIBUTABLE_FIELDS.addAll(SearchableFields.get(RoleTO.class));\n+    }\n+\n+    private SearchCond searchCond;\n+\n+    public SearchCondVisitor() {\n+        super(null);\n+    }\n+\n+    public SearchCondVisitor(final Map<String, String> fieldMap) {\n+        super(fieldMap);\n+    }\n+\n+    private AttributeCond createAttributeCond(final String schema) {\n+        AttributeCond attributeCond = ATTRIBUTABLE_FIELDS.contains(schema)\n+                ? new AttributableCond()\n+                : new AttributeCond();\n+        attributeCond.setSchema(schema);\n+        return attributeCond;\n+    }\n+\n+    private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n+        String name = getRealPropertyName(sc.getStatement().getProperty());\n+        SpecialAttr specialAttrName = SpecialAttr.fromString(name);\n+\n+        String value = SearchUtils.toSqlWildcardString(sc.getStatement().getValue().toString(), false);\n+        SpecialAttr specialAttrValue = SpecialAttr.fromString(value);\n+\n+        AttributeCond attributeCond = createAttributeCond(name);\n+        attributeCond.setExpression(value);\n+\n+        SearchCond leaf;\n+        switch (sc.getConditionType()) {\n+            case EQUALS:\n+            case NOT_EQUALS:\n+                if (specialAttrName == null) {\n+                    if (specialAttrValue != null && specialAttrValue == SpecialAttr.NULL) {\n+                        attributeCond.setType(AttributeCond.Type.ISNULL);\n+                        attributeCond.setExpression(null);\n+                    } else if (value.indexOf('%') == -1) {\n+                        attributeCond.setType(AttributeCond.Type.EQ);\n+                    } else {\n+                        attributeCond.setType(AttributeCond.Type.LIKE);\n+                    }\n+\n+                    leaf = SearchCond.getLeafCond(attributeCond);\n+                } else {\n+                    switch (specialAttrName) {\n+                        case ROLES:\n+                            MembershipCond membershipCond = new MembershipCond();\n+                            membershipCond.setRoleId(Long.valueOf(value));\n+                            leaf = SearchCond.getLeafCond(membershipCond);\n+                            break;\n+\n+                        case RESOURCES:\n+                            ResourceCond resourceCond = new ResourceCond();\n+                            resourceCond.setResourceName(value);\n+                            leaf = SearchCond.getLeafCond(resourceCond);\n+                            break;\n+\n+                        case ENTITLEMENTS:\n+                            EntitlementCond entitlementCond = new EntitlementCond();\n+                            entitlementCond.setExpression(value);\n+                            leaf = SearchCond.getLeafCond(entitlementCond);\n+                            break;\n+\n+                        default:\n+                            throw new IllegalArgumentException(\n+                                    String.format(\"Special attr name %s is not supported\", specialAttrName));\n+                    }\n+                }\n+                if (sc.getConditionType() == ConditionType.NOT_EQUALS) {\n+                    if (leaf.getAttributeCond() != null\n+                            && leaf.getAttributeCond().getType() == AttributeCond.Type.ISNULL) {\n+\n+                        leaf.getAttributeCond().setType(AttributeCond.Type.ISNOTNULL);\n+                    } else if (leaf.getAttributableCond() != null\n+                            && leaf.getAttributableCond().getType() == AttributableCond.Type.ISNULL) {\n+\n+                        leaf.getAttributableCond().setType(AttributeCond.Type.ISNOTNULL);\n+                    } else {\n+                        leaf = SearchCond.getNotLeafCond(leaf);\n+                    }\n+                }\n+                break;\n+\n+            case GREATER_OR_EQUALS:\n+                attributeCond.setType(AttributeCond.Type.GE);\n+                leaf = SearchCond.getLeafCond(attributeCond);\n+                break;\n+\n+            case GREATER_THAN:\n+                attributeCond.setType(AttributeCond.Type.GT);\n+                leaf = SearchCond.getLeafCond(attributeCond);\n+                break;\n+\n+            case LESS_OR_EQUALS:\n+                attributeCond.setType(AttributeCond.Type.LE);\n+                leaf = SearchCond.getLeafCond(attributeCond);\n+                break;\n+\n+            case LESS_THAN:\n+                attributeCond.setType(AttributeCond.Type.LT);\n+                leaf = SearchCond.getLeafCond(attributeCond);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\n+                        String.format(\"Condition type %s is not supported\", sc.getConditionType().name()));\n+        }\n+\n+        return leaf;\n+    }\n+\n+    private SearchCond visitCompount(final SearchCondition<SearchBean> sc) {\n+        List<SearchCond> searchConds = new ArrayList<SearchCond>();\n+        for (SearchCondition<SearchBean> searchCondition : sc.getSearchConditions()) {\n+            searchConds.add(searchCondition.getStatement() == null\n+                    ? visitCompount(searchCondition)\n+                    : visitPrimitive(searchCondition));\n+        }\n+\n+        SearchCond compound;\n+        switch (sc.getConditionType()) {\n+            case AND:\n+                compound = SearchCond.getAndCond(searchConds);\n+                break;\n+\n+            case OR:\n+                compound = SearchCond.getOrCond(searchConds);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\n+                        String.format(\"Condition type %s is not supported\", sc.getConditionType().name()));\n+        }\n+\n+        return compound;\n+    }\n+\n+    @Override\n+    public void visit(final SearchCondition<SearchBean> sc) {\n+        searchCond = sc.getStatement() == null\n+                ? visitCompount(sc)\n+                : visitPrimitive(sc);\n+    }\n+\n+    @Override\n+    public SearchCond getQuery() {\n+        return searchCond;\n+    }\n+\n+}"},{"sha":"ebfb93616c7d9386acadad0cba34ad71a9ad5fff","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.NotificationTask;"},{"sha":"ef5c39a237a064b0f1d94f8842ebe91e38aabdf3","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -35,8 +35,8 @@\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientCompositeException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;"},{"sha":"13592cd47743212b8f9088ea7abb21b132401fac","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -30,12 +30,11 @@\n import javax.ws.rs.ext.ExceptionMapper;\r\n import javax.ws.rs.ext.Provider;\r\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\r\n import org.apache.syncope.common.types.EntityViolationType;\r\n import org.apache.syncope.common.types.ClientExceptionType;\r\n import org.apache.syncope.common.types.RESTHeaders;\r\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\r\n-import org.apache.syncope.common.validation.SyncopeClientException;\r\n+import org.apache.syncope.common.SyncopeClientCompositeException;\r\n+import org.apache.syncope.common.SyncopeClientException;\r\n import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\r\n import org.apache.syncope.core.persistence.dao.NotFoundException;\r\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\r\n@@ -202,8 +201,6 @@ private Response processBadRequestExceptions(final Exception ex) {\n             }\r\n         } else if (ex instanceof WorkflowException) {\r\n             return buildResponse(responseBuilder, ClientExceptionType.Workflow, getExMessage(ex));\r\n-        } else if (ex instanceof InvalidSearchConditionException) {\r\n-            return buildResponse(responseBuilder, ClientExceptionType.InvalidSearchCondition, getExMessage(ex));\r\n         } else if (ex instanceof PersistenceException) {\r\n             return buildResponse(responseBuilder, ClientExceptionType.GenericPersistence, getExMessage(ex));\r\n         } else if (ex instanceof org.apache.ibatis.exceptions.PersistenceException) {\r"},{"sha":"de3c34e46fa3d9f88aa729aa2a3bb6721cc36d72","filename":"core/src/main/java/org/apache/syncope/core/services/AbstractServiceImpl.java","status":"modified","additions":102,"deletions":3,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -19,27 +19,46 @@\n package org.apache.syncope.core.services;\n \n import java.net.URI;\n+import java.util.List;\n+import java.util.Map;\n import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n import javax.ws.rs.core.UriInfo;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.cxf.jaxrs.ext.search.SearchContext;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.services.JAXRSService;\n+import org.apache.syncope.common.reqres.PagedResult;\n+import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.types.Preference;\n import org.apache.syncope.common.types.RESTHeaders;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n+import org.apache.syncope.core.rest.data.SearchCondVisitor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-abstract class AbstractServiceImpl {\n+abstract class AbstractServiceImpl implements JAXRSService {\n \n     /**\n      * Logger.\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractServiceImpl.class);\n \n+    protected static final String OPTIONS_ALLOW = \"GET,POST,OPTIONS,HEAD\";\n+\n     @Context\n     protected UriInfo uriInfo;\n \n     @Context\n-    protected MessageContext context;\n+    protected MessageContext messageContext;\n+\n+    @Context\n+    protected SearchContext searchContext;\n \n     /**\n      * Reads <tt>Prefer</tt> header from request and parses into a <tt>Preference</tt> instance.\n@@ -48,7 +67,7 @@ abstract class AbstractServiceImpl {\n      * or <tt>Preference.NONE</tt> if missing.\n      */\n     protected Preference getPreference() {\n-        return Preference.fromString(context.getHttpHeaders().getHeaderString(RESTHeaders.PREFER));\n+        return Preference.fromString(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.PREFER));\n     }\n \n     /**\n@@ -108,4 +127,84 @@ protected Response.ResponseBuilder modificationResponse(final Object entity) {\n \n         return builder;\n     }\n+\n+    /**\n+     * Checks whether given page and size values are valid.\n+     *\n+     * [SYNCOPE-461] Keep this method until BVal 1.0 (implementing JSR 303 1.1 which will work with CXF JAX-RS\n+     * validation) is available.\n+     *\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @see https://issues.apache.org/jira/browse/SYNCOPE-461\n+     */\n+    protected void checkPageSize(final int page, final int size) {\n+        if (page <= 0 || size <= 0) {\n+            LOG.error(\"Invalid page / size specified: {},{}\", page, size);\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPageOrSize);\n+            sce.getElements().add(page);\n+            sce.getElements().add(size);\n+            throw sce;\n+        }\n+    }\n+\n+    protected SearchCond getSearchCond(final String fiql) {\n+        try {\n+            SearchCondVisitor visitor = new SearchCondVisitor();\n+            SearchCondition<SearchBean> sc = searchContext.getCondition(fiql, SearchBean.class);\n+            sc.accept(visitor);\n+\n+            return visitor.getQuery();\n+        } catch (Exception e) {\n+            LOG.error(\"Invalid FIQL expression: {}\", fiql, e);\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            sce.getElements().add(fiql);\n+            throw sce;\n+        }\n+    }\n+\n+    /**\n+     * Builds a paged result out of a list of items and additional information.\n+     *\n+     * @param <T> result type\n+     * @param list bare list of items to be returned\n+     * @param page current page\n+     * @param size requested size\n+     * @param totalCount total result size (not considering pagination)\n+     * @return\n+     */\n+    protected <T extends AbstractBaseBean> PagedResult<T> buildPagedResult(\n+            final List<T> list, final int page, final int size, final int totalCount) {\n+\n+        PagedResult<T> result = new PagedResult<T>();\n+        result.getResult().addAll(list);\n+\n+        result.setPage(page);\n+        result.setSize(result.getResult().size());\n+        result.setTotalCount(totalCount);\n+\n+        UriBuilder builder = uriInfo.getAbsolutePathBuilder();\n+        MultivaluedMap<String, String> queryParams = uriInfo.getQueryParameters();\n+        for (Map.Entry<String, List<String>> queryParam : queryParams.entrySet()) {\n+            builder = builder.queryParam(queryParam.getKey(), queryParam.getValue().toArray());\n+        }\n+\n+        if (result.getPage() > 1) {\n+            result.setPrev(builder.\n+                    replaceQueryParam(PARAM_PAGE, result.getPage() - 1).\n+                    replaceQueryParam(PARAM_SIZE, size).\n+                    build());\n+        }\n+        if ((result.getPage() - 1) * size + result.getSize() < totalCount) {\n+            result.setNext(builder.\n+                    replaceQueryParam(PARAM_PAGE, result.getPage() + 1).\n+                    replaceQueryParam(PARAM_SIZE, size).\n+                    build());\n+        }\n+\n+        return result;\n+    }\n+\n }"},{"sha":"4d483be28566e0b3c647de1da84732c5d1607151","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -30,8 +30,8 @@\n \r\n import org.apache.syncope.common.services.ConfigurationService;\r\n import org.apache.syncope.common.to.ConfigurationTO;\r\n-import org.apache.syncope.common.to.MailTemplateTO;\r\n-import org.apache.syncope.common.to.ValidatorTO;\r\n+import org.apache.syncope.common.wrap.MailTemplate;\r\n+import org.apache.syncope.common.wrap.Validator;\r\n import org.apache.syncope.common.types.RESTHeaders;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.apache.syncope.core.persistence.dao.impl.ContentLoader;\r\n@@ -76,14 +76,14 @@ public void delete(final String key) {\n \r\n     @Override\r\n     @SuppressWarnings(\"unchecked\")\r\n-    public List<MailTemplateTO> getMailTemplates() {\r\n-        return CollectionWrapper.wrap(controller.getMailTemplates(), MailTemplateTO.class);\r\n+    public List<MailTemplate> getMailTemplates() {\r\n+        return CollectionWrapper.wrap(controller.getMailTemplates(), MailTemplate.class);\r\n     }\r\n \r\n     @Override\r\n     @SuppressWarnings(\"unchecked\")\r\n-    public List<ValidatorTO> getValidators() {\r\n-        return CollectionWrapper.wrap(controller.getValidators(), ValidatorTO.class);\r\n+    public List<Validator> getValidators() {\r\n+        return CollectionWrapper.wrap(controller.getValidators(), Validator.class);\r\n     }\r\n \r\n     @Override\r"},{"sha":"8f19516546d0ad8bdb23e7f8a33f1d6312cf0012","filename":"core/src/main/java/org/apache/syncope/core/services/ConnectorServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -23,8 +23,8 @@\n import java.util.List;\r\n import javax.ws.rs.core.Response;\r\n import org.apache.syncope.common.services.ConnectorService;\r\n-import org.apache.syncope.common.to.BulkAction;\r\n-import org.apache.syncope.common.to.BulkActionRes;\r\n+import org.apache.syncope.common.reqres.BulkAction;\r\n+import org.apache.syncope.common.reqres.BulkActionResult;\r\n import org.apache.syncope.common.to.ConnBundleTO;\r\n import org.apache.syncope.common.to.ConnIdObjectClassTO;\r\n import org.apache.syncope.common.to.ConnInstanceTO;\r\n@@ -122,7 +122,7 @@ public void reload() {\n     }\r\n \r\n     @Override\r\n-    public BulkActionRes bulk(final BulkAction bulkAction) {\r\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\r\n         return controller.bulk(bulkAction);\r\n     }\r\n }\r"},{"sha":"421b6d5fb7a7e8765554a218776b7bdef4eada3d","filename":"core/src/main/java/org/apache/syncope/core/services/EntitlementServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\r\n \r\n import org.apache.syncope.common.services.EntitlementService;\r\n-import org.apache.syncope.common.to.EntitlementTO;\r\n+import org.apache.syncope.common.wrap.EntitlementTO;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.apache.syncope.core.rest.controller.EntitlementController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r"},{"sha":"c3b7ea14baf3ed5a91015bb24e8fb349a256fb08","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -24,7 +24,7 @@\n import javax.ws.rs.core.Response;\r\n import org.apache.syncope.common.services.PolicyService;\r\n import org.apache.syncope.common.to.AccountPolicyTO;\r\n-import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n+import org.apache.syncope.common.wrap.CorrelationRuleClass;\r\n import org.apache.syncope.common.to.PasswordPolicyTO;\r\n import org.apache.syncope.common.to.AbstractPolicyTO;\r\n import org.apache.syncope.common.to.SyncPolicyTO;\r\n@@ -117,7 +117,7 @@ public <T extends AbstractPolicyTO> void update(final Long policyId, final T pol\n     }\r\n \r\n     @Override\r\n-    public List<CorrelationRuleClassTO> getSyncCorrelationRuleClasses() {\r\n-        return CollectionWrapper.wrap(policyController.getSyncCorrelationRuleClasses(), CorrelationRuleClassTO.class);\r\n+    public List<CorrelationRuleClass> getSyncCorrelationRuleClasses() {\r\n+        return CollectionWrapper.wrap(policyController.getSyncCorrelationRuleClasses(), CorrelationRuleClass.class);\r\n     }\r\n }\r"},{"sha":"18e43525eb049c5cb7833f3f60f4d9449aca19b5","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":10,"deletions":16,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -26,13 +26,14 @@\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import org.apache.syncope.common.services.ReportService;\n-import org.apache.syncope.common.types.ReportletConfClasses;\n+import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n+import org.apache.syncope.common.util.CollectionWrapper;\n+import org.apache.syncope.common.wrap.ReportletConfClass;\n import org.apache.syncope.core.persistence.beans.ReportExec;\n-import org.apache.syncope.core.persistence.dao.ReportDAO;\n import org.apache.syncope.core.rest.controller.ReportController;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -43,9 +44,6 @@ public class ReportServiceImpl extends AbstractServiceImpl implements ReportServ\n     @Autowired\n     private ReportController controller;\n \n-    @Autowired\n-    private ReportDAO reportDAO;\n-\n     @Override\n     public Response create(final ReportTO reportTO) {\n         ReportTO createdReportTO = controller.create(reportTO);\n@@ -61,23 +59,19 @@ public void update(final Long reportId, final ReportTO reportTO) {\n     }\n \n     @Override\n-    public int count() {\n-        return reportDAO.count();\n-    }\n-\n-    @Override\n-    public List<ReportTO> list() {\n-        return controller.list();\n+    public PagedResult<ReportTO> list() {\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\n     }\n \n     @Override\n-    public List<ReportTO> list(final int page, final int size) {\n-        return controller.list(page, size);\n+    public PagedResult<ReportTO> list(final int page, final int size) {\n+        checkPageSize(page, size);\n+        return buildPagedResult(controller.list(page, size), page, size, controller.count());\n     }\n \n     @Override\n-    public ReportletConfClasses getReportletConfClasses() {\n-        return new ReportletConfClasses(controller.getReportletConfClasses());\n+    public List<ReportletConfClass> getReportletConfClasses() {\n+        return CollectionWrapper.wrap(controller.getReportletConfClasses(), ReportletConfClass.class);\n     }\n \n     @Override"},{"sha":"ce45f046a77b949ffa0baa3f158f3e5a160c46d4","filename":"core/src/main/java/org/apache/syncope/core/services/ResourceServiceImpl.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -28,11 +28,11 @@\n \r\n import org.apache.syncope.common.services.ResourceService;\r\n import org.apache.syncope.common.to.AbstractAttributableTO;\r\n-import org.apache.syncope.common.to.BulkAction;\r\n-import org.apache.syncope.common.to.BulkActionRes;\r\n-import org.apache.syncope.common.to.BulkAssociationAction;\r\n+import org.apache.syncope.common.reqres.BulkAction;\r\n+import org.apache.syncope.common.reqres.BulkActionResult;\r\n+import org.apache.syncope.common.reqres.BulkAssociationAction;\r\n import org.apache.syncope.common.to.ConnObjectTO;\r\n-import org.apache.syncope.common.to.PropagationActionClassTO;\r\n+import org.apache.syncope.common.wrap.PropagationActionClass;\r\n import org.apache.syncope.common.to.ResourceTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n import org.apache.syncope.common.types.RESTHeaders;\r\n@@ -81,8 +81,8 @@ public ResourceTO read(final String resourceName) {\n     }\r\n \r\n     @Override\r\n-    public List<PropagationActionClassTO> getPropagationActionsClasses() {\r\n-        return CollectionWrapper.wrap(controller.getPropagationActionsClasses(), PropagationActionClassTO.class);\r\n+    public List<PropagationActionClass> getPropagationActionsClasses() {\r\n+        return CollectionWrapper.wrap(controller.getPropagationActionsClasses(), PropagationActionClass.class);\r\n     }\r\n \r\n     @Override\r\n@@ -106,12 +106,12 @@ public boolean check(final ResourceTO resourceTO) {\n     }\r\n \r\n     @Override\r\n-    public BulkActionRes bulk(final BulkAction bulkAction) {\r\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\r\n         return controller.bulk(bulkAction);\r\n     }\r\n \r\n     @Override\r\n-    public BulkActionRes bulkAssociation(final String resourceName,\r\n+    public BulkActionResult bulkAssociation(final String resourceName,\r\n             final BulkAssociationAction bulkAssociationAction, final AttributableType type) {\r\n \r\n         if (bulkAssociationAction.getOperation() == null || type == AttributableType.MEMBERSHIP) {\r\n@@ -122,7 +122,7 @@ public BulkActionRes bulkAssociation(final String resourceName,\n                 ? userController\r\n                 : roleController;\r\n \r\n-        final BulkActionRes res = new BulkActionRes();\r\n+        final BulkActionResult res = new BulkActionResult();\r\n \r\n         for (Long id : bulkAssociationAction.getTargets()) {\r\n             final Set<String> resources = Collections.singleton(resourceName);\r\n@@ -143,10 +143,10 @@ public BulkActionRes bulkAssociation(final String resourceName,\n                     default:\r\n                 }\r\n \r\n-                res.add(id, BulkActionRes.Status.SUCCESS);\r\n+                res.add(id, BulkActionResult.Status.SUCCESS);\r\n             } catch (Exception e) {\r\n                 LOG.warn(\"While executing {} on {} {}\", bulkAssociationAction.getOperation(), type, id, e);\r\n-                res.add(id, BulkActionRes.Status.FAILURE);\r\n+                res.add(id, BulkActionResult.Status.FAILURE);\r\n             }\r\n         }\r\n \r"},{"sha":"4764c1ea62591340e64e18f91b2e7f8668280a24","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"modified","additions":18,"deletions":27,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -25,13 +25,13 @@\n import javax.ws.rs.core.Response.ResponseBuilder;\r\n \r\n import org.apache.syncope.common.mod.RoleMod;\r\n-import org.apache.syncope.common.search.NodeCond;\r\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\r\n import org.apache.syncope.common.services.RoleService;\r\n-import org.apache.syncope.common.to.ResourceNameTO;\r\n+import org.apache.syncope.common.reqres.PagedResult;\r\n+import org.apache.syncope.common.wrap.ResourceName;\r\n import org.apache.syncope.common.to.RoleTO;\r\n import org.apache.syncope.common.types.ResourceAssociationActionType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\r\n import org.apache.syncope.core.rest.controller.RoleController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n@@ -47,11 +47,6 @@ public List<RoleTO> children(final Long roleId) {\n         return controller.children(roleId);\r\n     }\r\n \r\n-    @Override\r\n-    public int count() {\r\n-        return controller.count();\r\n-    }\r\n-\r\n     @Override\r\n     public Response create(final RoleTO roleTO) {\r\n         RoleTO created = controller.create(roleTO);\r\n@@ -62,7 +57,7 @@ public Response create(final RoleTO roleTO) {\n     public Response delete(final Long roleId) {\r\n         RoleTO role = controller.read(roleId);\r\n \r\n-        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(role.getETagValue()));\r\n+        ResponseBuilder builder = messageContext.getRequest().evaluatePreconditions(new EntityTag(role.getETagValue()));\r\n         if (builder == null) {\r\n             RoleTO deleted = controller.delete(roleId);\r\n             builder = modificationResponse(deleted);\r\n@@ -72,13 +67,14 @@ public Response delete(final Long roleId) {\n     }\r\n \r\n     @Override\r\n-    public List<RoleTO> list() {\r\n-        return list(1, 25);\r\n+    public PagedResult<RoleTO> list() {\r\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\r\n     }\r\n \r\n     @Override\r\n-    public List<RoleTO> list(final int page, final int size) {\r\n-        return controller.list(page, size);\r\n+    public PagedResult<RoleTO> list(final int page, final int size) {\r\n+        checkPageSize(page, size);\r\n+        return buildPagedResult(controller.list(page, size), page, size, controller.count());\r\n     }\r\n \r\n     @Override\r\n@@ -92,20 +88,15 @@ public RoleTO read(final Long roleId) {\n     }\r\n \r\n     @Override\r\n-    public List<RoleTO> search(final NodeCond searchCondition) throws InvalidSearchConditionException {\r\n-        return controller.search(searchCondition, 1, 25);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size)\r\n-            throws InvalidSearchConditionException {\r\n-\r\n-        return controller.search(searchCondition, page, size);\r\n+    public PagedResult<RoleTO> search(final String fiql) {\r\n+        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\r\n     }\r\n \r\n     @Override\r\n-    public int searchCount(final NodeCond searchCondition) throws InvalidSearchConditionException {\r\n-        return controller.searchCount(searchCondition);\r\n+    public PagedResult<RoleTO> search(final String fiql, final int page, final int size) {\r\n+        checkPageSize(page, size);\r\n+        SearchCond cond = getSearchCond(fiql);\r\n+        return buildPagedResult(controller.search(cond, page, size), page, size, controller.searchCount(cond));\r\n     }\r\n \r\n     @Override\r\n@@ -117,7 +108,7 @@ public RoleTO readSelf(final Long roleId) {\n     public Response update(final Long roleId, final RoleMod roleMod) {\r\n         RoleTO role = controller.read(roleId);\r\n \r\n-        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(role.getETagValue()));\r\n+        ResponseBuilder builder = messageContext.getRequest().evaluatePreconditions(new EntityTag(role.getETagValue()));\r\n         if (builder == null) {\r\n             roleMod.setId(roleId);\r\n             RoleTO updated = controller.update(roleMod);\r\n@@ -129,11 +120,11 @@ public Response update(final Long roleId, final RoleMod roleMod) {\n \r\n     @Override\r\n     public Response associate(final Long roleId, final ResourceAssociationActionType type,\r\n-            final List<ResourceNameTO> resourceNames) {\r\n+            final List<ResourceName> resourceNames) {\r\n \r\n         RoleTO role = controller.read(roleId);\r\n \r\n-        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(role.getETagValue()));\r\n+        ResponseBuilder builder = messageContext.getRequest().evaluatePreconditions(new EntityTag(role.getETagValue()));\r\n         if (builder == null) {\r\n             RoleTO updated;\r\n \r"},{"sha":"c169408a07ce5a1658152b2a8e4a334dc8827157","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -23,15 +23,16 @@\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n import org.apache.syncope.common.services.TaskService;\r\n-import org.apache.syncope.common.to.BulkAction;\r\n-import org.apache.syncope.common.to.BulkActionRes;\r\n-import org.apache.syncope.common.to.JobClassTO;\r\n+import org.apache.syncope.common.reqres.BulkAction;\r\n+import org.apache.syncope.common.reqres.BulkActionResult;\r\n+import org.apache.syncope.common.wrap.JobClass;\r\n import org.apache.syncope.common.to.ReportExecTO;\r\n import org.apache.syncope.common.to.SchedTaskTO;\r\n-import org.apache.syncope.common.to.SyncActionClassTO;\r\n+import org.apache.syncope.common.wrap.SyncActionClass;\r\n import org.apache.syncope.common.to.SyncTaskTO;\r\n import org.apache.syncope.common.to.TaskExecTO;\r\n import org.apache.syncope.common.to.AbstractTaskTO;\r\n+import org.apache.syncope.common.reqres.PagedResult;\r\n import org.apache.syncope.common.types.RESTHeaders;\r\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n import org.apache.syncope.common.types.TaskType;\r\n@@ -46,11 +47,6 @@ public class TaskServiceImpl extends AbstractServiceImpl implements TaskService\n     @Autowired\r\n     private TaskController controller;\r\n \r\n-    @Override\r\n-    public int count(final TaskType taskType) {\r\n-        return controller.count(taskType);\r\n-    }\r\n-\r\n     @Override\r\n     public <T extends SchedTaskTO> Response create(final T taskTO) {\r\n         T createdTask;\r\n@@ -82,23 +78,26 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n     }\r\n \r\n     @Override\r\n-    public List<JobClassTO> getJobClasses() {\r\n-        return CollectionWrapper.wrap(controller.getJobClasses(), JobClassTO.class);\r\n+    public List<JobClass> getJobClasses() {\r\n+        return CollectionWrapper.wrap(controller.getJobClasses(), JobClass.class);\r\n     }\r\n \r\n     @Override\r\n-    public List<SyncActionClassTO> getSyncActionsClasses() {\r\n-        return CollectionWrapper.wrap(controller.getSyncActionsClasses(), SyncActionClassTO.class);\r\n+    public List<SyncActionClass> getSyncActionsClasses() {\r\n+        return CollectionWrapper.wrap(controller.getSyncActionsClasses(), SyncActionClass.class);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractTaskTO> List<T> list(final TaskType taskType) {\r\n-        return controller.list(taskType);\r\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType) {\r\n+        return list(taskType, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractTaskTO> List<T> list(final TaskType taskType, final int page, final int size) {\r\n-        return controller.list(taskType, page, size);\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType, final int page, final int size) {\r\n+        checkPageSize(page, size);\r\n+        return (PagedResult<T>) buildPagedResult(\r\n+                controller.list(taskType, page, size), page, size, controller.count(taskType));\r\n     }\r\n \r\n     @Override\r\n@@ -129,7 +128,7 @@ public void update(final Long taskId, final AbstractTaskTO taskTO) {\n     }\r\n \r\n     @Override\r\n-    public BulkActionRes bulk(final BulkAction bulkAction) {\r\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\r\n         return controller.bulk(bulkAction);\r\n     }\r\n }\r"},{"sha":"1d88ed2a3058d70af72e4937edcd17edccb8b852","filename":"core/src/main/java/org/apache/syncope/core/services/UserSelfServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -36,7 +36,7 @@ public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelf\n \n     @Override\n     public Response getOptions() {\n-        return Response.ok().header(HttpHeaders.ALLOW, \"GET,POST,OPTIONS,HEAD\").\n+        return Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW).\n                 header(RESTHeaders.SELFREGISTRATION_ALLOWED, controller.isSelfRegistrationAllowed()).\n                 build();\n     }"},{"sha":"5290f1d66f900c89c0478b3eb18a7f384bfab8fb","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":24,"deletions":33,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -25,16 +25,16 @@\n import javax.ws.rs.core.Response.ResponseBuilder;\n import org.apache.syncope.common.mod.StatusMod;\n import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.services.UserService;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n-import org.apache.syncope.common.to.ResourceNameTO;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n+import org.apache.syncope.common.reqres.PagedResult;\n+import org.apache.syncope.common.wrap.ResourceName;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.types.ResourceAssociationActionType;\n import org.apache.syncope.common.util.CollectionWrapper;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.apache.syncope.core.rest.controller.UserController;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -47,23 +47,18 @@ public class UserServiceImpl extends AbstractServiceImpl implements UserService\n \n     @Override\n     public Response getUsername(final Long userId) {\n-        return Response.ok().header(HttpHeaders.ALLOW, \"GET,POST,OPTIONS,HEAD\").\n+        return Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW).\n                 header(RESTHeaders.USERNAME, controller.getUsername(userId)).\n                 build();\n     }\n \n     @Override\n     public Response getUserId(final String username) {\n-        return Response.ok().header(HttpHeaders.ALLOW, \"GET,POST,OPTIONS,HEAD\").\n+        return Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW).\n                 header(RESTHeaders.USER_ID, controller.getUserId(username)).\n                 build();\n     }\n \n-    @Override\n-    public int count() {\n-        return controller.count();\n-    }\n-\n     @Override\n     public Response create(final UserTO userTO) {\n         UserTO created = controller.create(userTO);\n@@ -74,7 +69,7 @@ public Response create(final UserTO userTO) {\n     public Response delete(final Long userId) {\n         UserTO user = controller.read(userId);\n \n-        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n+        ResponseBuilder builder = messageContext.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n         if (builder == null) {\n             UserTO deleted = controller.delete(userId);\n             builder = modificationResponse(deleted);\n@@ -84,13 +79,14 @@ public Response delete(final Long userId) {\n     }\n \n     @Override\n-    public List<UserTO> list() {\n-        return list(1, 25);\n+    public PagedResult<UserTO> list() {\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\n     }\n \n     @Override\n-    public List<UserTO> list(final int page, final int size) {\n-        return controller.list(page, size);\n+    public PagedResult<UserTO> list(final int page, final int size) {\n+        checkPageSize(page, size);\n+        return buildPagedResult(controller.list(page, size), page, size, controller.count());\n     }\n \n     @Override\n@@ -99,27 +95,22 @@ public UserTO read(final Long userId) {\n     }\n \n     @Override\n-    public List<UserTO> search(final NodeCond searchCondition) throws InvalidSearchConditionException {\n-        return controller.search(searchCondition, 1, 25);\n-    }\n-\n-    @Override\n-    public List<UserTO> search(final NodeCond searchCondition, final int page, final int size)\n-            throws InvalidSearchConditionException {\n-\n-        return controller.search(searchCondition, page, size);\n+    public PagedResult<UserTO> search(final String fiql) {\n+        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\n     }\n \n     @Override\n-    public int searchCount(final NodeCond searchCondition) throws InvalidSearchConditionException {\n-        return controller.searchCount(searchCondition);\n+    public PagedResult<UserTO> search(final String fiql, final int page, final int size) {\n+        checkPageSize(page, size);\n+        SearchCond cond = getSearchCond(fiql);\n+        return buildPagedResult(controller.search(cond, page, size), page, size, controller.searchCount(cond));\n     }\n \n     @Override\n     public Response update(final Long userId, final UserMod userMod) {\n         UserTO user = controller.read(userId);\n \n-        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n+        ResponseBuilder builder = messageContext.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n         if (builder == null) {\n             userMod.setId(userId);\n             UserTO updated = controller.update(userMod);\n@@ -133,7 +124,7 @@ public Response update(final Long userId, final UserMod userMod) {\n     public Response status(final Long userId, final StatusMod statusMod) {\n         UserTO user = controller.read(userId);\n \n-        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n+        ResponseBuilder builder = messageContext.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n         if (builder == null) {\n             statusMod.setId(userId);\n             UserTO updated = controller.status(statusMod);\n@@ -144,17 +135,17 @@ public Response status(final Long userId, final StatusMod statusMod) {\n     }\n \n     @Override\n-    public BulkActionRes bulk(final BulkAction bulkAction) {\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n         return controller.bulk(bulkAction);\n     }\n \n     @Override\n     public Response associate(final Long userId, final ResourceAssociationActionType type,\n-            final List<ResourceNameTO> resourceNames) {\n+            final List<ResourceName> resourceNames) {\n \n         UserTO user = controller.read(userId);\n \n-        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n+        ResponseBuilder builder = messageContext.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n         if (builder == null) {\n             UserTO updated;\n "},{"sha":"466294d47d7ab0745cd4649e31e89e23ae894398","filename":"core/src/main/java/org/apache/syncope/core/services/WorkflowServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -59,7 +59,7 @@ public Response getOptions(final AttributableType kind) {\n             default:\r\n         }\r\n \r\n-        Response.ResponseBuilder builder = Response.ok().header(HttpHeaders.ALLOW, \"GET,POST,OPTIONS,HEAD\");\r\n+        Response.ResponseBuilder builder = Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW);\r\n         if (key != null && value != null) {\r\n             builder.header(key, value);\r\n         }\r\n@@ -69,7 +69,7 @@ public Response getOptions(final AttributableType kind) {\n     @Override\r\n     public Response exportDefinition(final AttributableType kind) {\r\n         final MediaType accept =\r\n-                context.getHttpHeaders().getAcceptableMediaTypes().contains(MediaType.APPLICATION_JSON_TYPE)\r\n+                messageContext.getHttpHeaders().getAcceptableMediaTypes().contains(MediaType.APPLICATION_JSON_TYPE)\r\n                 ? MediaType.APPLICATION_JSON_TYPE\r\n                 : MediaType.APPLICATION_XML_TYPE;\r\n \r\n@@ -126,7 +126,7 @@ public void write(final OutputStream os) throws IOException {\n     @Override\r\n     public void importDefinition(final AttributableType kind, final String definition) {\r\n         final MediaType contentType =\r\n-                context.getHttpHeaders().getMediaType().equals(MediaType.APPLICATION_JSON_TYPE)\r\n+                messageContext.getHttpHeaders().getMediaType().equals(MediaType.APPLICATION_JSON_TYPE)\r\n                 ? MediaType.APPLICATION_JSON_TYPE\r\n                 : MediaType.APPLICATION_XML_TYPE;\r\n \r"},{"sha":"383f30a6973e1b4c6aaaf96a46846e4f97623509","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncCorrelationRule.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncCorrelationRule.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.sync;\n \n-import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n /**\n@@ -32,5 +32,5 @@ public interface SyncCorrelationRule {\n      * @param connObj connector object.\n      * @return search condition.\n      */\n-    NodeCond getSearchCond(ConnectorObject connObj);\n+    SearchCond getSearchCond(ConnectorObject connObj);\n }"},{"sha":"01d01139d4d1c9cb959016b91c6d606249d034b9","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -30,10 +30,9 @@\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.search.AttributableCond;\n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n+import org.apache.syncope.core.persistence.dao.search.AttributableCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.RoleTO;\n@@ -310,13 +309,9 @@ protected List<Long> findByAccountIdItem(final String uid, final AttributableUti\n \n             case UserDerivedSchema:\n             case RoleDerivedSchema:\n-                try {\n-                    subjects = userDAO.findByDerAttrValue(accountIdItem.getIntAttrName(), uid, attrUtil);\n-                    for (AbstractAttributable subject : subjects) {\n-                        result.add(subject.getId());\n-                    }\n-                } catch (InvalidSearchConditionException e) {\n-                    LOG.error(\"Could not search for matching subjects\", e);\n+                subjects = userDAO.findByDerAttrValue(accountIdItem.getIntAttrName(), uid, attrUtil);\n+                for (AbstractAttributable subject : subjects) {\n+                    result.add(subject.getId());\n                 }\n                 break;\n \n@@ -355,7 +350,7 @@ protected List<Long> findByAccountIdItem(final String uid, final AttributableUti\n         return result;\n     }\n \n-    protected List<Long> search(final NodeCond searchCond, final AttributableUtil attrUtil) {\n+    protected List<Long> search(final SearchCond searchCond, final AttributableUtil attrUtil) {\n         final List<Long> result = new ArrayList<Long>();\n \n         final List<AbstractAttributable> subjects = searchDAO.search(\n@@ -386,7 +381,7 @@ protected List<Long> findByAttributableSearch(\n         }\n \n         // search for user/role by attribute(s) specified in the policy\n-        NodeCond searchCond = null;\n+        SearchCond searchCond = null;\n \n         for (String schema : altSearchSchemas) {\n             Attribute value = extValues.get(schema);\n@@ -404,7 +399,7 @@ protected List<Long> findByAttributableSearch(\n                         : value.getValue().get(0).toString();\n             }\n \n-            NodeCond nodeCond;\n+            SearchCond nodeCond;\n             // users: just id or username can be selected to be used\n             // roles: just id or name can be selected to be used\n             if (\"id\".equalsIgnoreCase(schema) || \"username\".equalsIgnoreCase(schema)\n@@ -415,19 +410,19 @@ protected List<Long> findByAttributableSearch(\n                 cond.setType(type);\n                 cond.setExpression(expression);\n \n-                nodeCond = NodeCond.getLeafCond(cond);\n+                nodeCond = SearchCond.getLeafCond(cond);\n             } else {\n                 AttributeCond cond = new AttributeCond();\n                 cond.setSchema(schema);\n                 cond.setType(type);\n                 cond.setExpression(expression);\n \n-                nodeCond = NodeCond.getLeafCond(cond);\n+                nodeCond = SearchCond.getLeafCond(cond);\n             }\n \n             searchCond = searchCond == null\n                     ? nodeCond\n-                    : NodeCond.getAndCond(searchCond, nodeCond);\n+                    : SearchCond.getAndCond(searchCond, nodeCond);\n         }\n \n         return search(searchCond, attrUtil);"},{"sha":"1cb6e17803ff1cf98a9d3c99bf24a611048cfab3","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -66,7 +66,7 @@\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.WorkflowFormPropertyType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;"},{"sha":"e1531b6a3896197c5b6635115f26c20ab5c8cd2e","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -58,13 +58,6 @@ under the License.\n         <property name=\"innerElementCountThreshold\" value=\"500\"/>\n       </bean>\n     </property>\n-    <property name=\"marshallerProperties\">\n-      <map>\n-        <entry key=\"jaxb.formatted.output\">\n-          <value type=\"java.lang.Boolean\">true</value>\n-        </entry>\n-      </map>\n-    </property>\n     <property name=\"collectionWrapperMap\">\n       <map>\n         <entry>\n@@ -84,6 +77,8 @@ under the License.\n \n   <bean id=\"exceptionMapper\" class=\"org.apache.syncope.core.rest.utils.RestServiceExceptionMapper\"/>\n \n+  <bean id=\"searchContextProvider\" class=\"org.apache.cxf.jaxrs.ext.search.SearchContextProvider\"/>\n+  \n   <bean id=\"wadlGenerator\" class=\"org.apache.cxf.jaxrs.model.wadl.WadlGenerator\">\n     <property name=\"applicationTitle\" value=\"Apache Syncope ${project.version}\"/>\n     <property name=\"namespacePrefix\" value=\"syncope\"/>\n@@ -94,7 +89,7 @@ under the License.\n   </bean>\n   \n   <bean id=\"addETagFilter\" class=\"org.apache.syncope.core.services.AddETagFilter\"/>\n-  \n+\n   <jaxrs:server id=\"restContainer\" address=\"/\" staticSubresourceResolution=\"true\">\n     <jaxrs:serviceBeans>\n       <ref bean=\"connectorServiceImpl\"/>\n@@ -116,10 +111,14 @@ under the License.\n     <jaxrs:resourceComparator>\n       <bean id=\"queryResourceInfoComparator\" class=\"org.apache.syncope.core.rest.utils.QueryResourceInfoComparator\"/>\n     </jaxrs:resourceComparator>\n+    <jaxrs:properties> \n+      <entry key=\"search.lax.property.match\" value=\"true\"/> \n+    </jaxrs:properties> \n     <jaxrs:providers>\n       <ref bean=\"jaxbProvider\"/>\n       <ref bean=\"jsonProvider\"/>\n       <ref bean=\"exceptionMapper\"/>\n+      <ref bean=\"searchContextProvider\"/>\n       <ref bean=\"wadlGenerator\"/>\n       <ref bean=\"addETagFilter\"/>\n     </jaxrs:providers>"},{"sha":"8ae0b7183ca9703d5c12cf63dadfa167f73aa5b6","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":7,"deletions":28,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -37,9 +37,8 @@\n import javax.mail.Store;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.SyncopeConstants;\n-import org.apache.syncope.common.search.MembershipCond;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.NotificationTaskTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -210,14 +209,8 @@ public void notifyByMail() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n         notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n-\n-        MembershipCond membCond = new MembershipCond();\n-        membCond.setRoleId(7L);\n-        notification.setAbout(NodeCond.getLeafCond(membCond));\n-\n-        membCond = new MembershipCond();\n-        membCond.setRoleId(8L);\n-        notification.setRecipients(NodeCond.getLeafCond(membCond));\n+        notification.setAbout(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n+        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(8L).query());\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n@@ -266,14 +259,8 @@ public void issueSYNCOPE192() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n         notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n-\n-        MembershipCond membCond = new MembershipCond();\n-        membCond.setRoleId(7L);\n-        notification.setAbout(NodeCond.getLeafCond(membCond));\n-\n-        membCond = new MembershipCond();\n-        membCond.setRoleId(8L);\n-        notification.setRecipients(NodeCond.getLeafCond(membCond));\n+        notification.setAbout(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n+        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(8L).query());\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n@@ -324,12 +311,8 @@ public void notifyByMailEmptyAbout() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n         notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n-\n         notification.setAbout(null);\n-\n-        MembershipCond membCond = new MembershipCond();\n-        membCond.setRoleId(8L);\n-        notification.setRecipients(NodeCond.getLeafCond(membCond));\n+        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(8L).query());\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n@@ -378,12 +361,8 @@ public void notifyByMailWithRetry() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n         notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n-\n         notification.setAbout(null);\n-\n-        MembershipCond membCond = new MembershipCond();\n-        membCond.setRoleId(8L);\n-        notification.setRecipients(NodeCond.getLeafCond(membCond));\n+        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(8L).query());\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");"},{"sha":"43896e4711bde944a80cb4e3e76bea2cee7ab299","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AttributableSearchTest.java","status":"modified","additions":33,"deletions":32,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -27,11 +27,11 @@\n import java.util.List;\n import java.util.Set;\n \n-import org.apache.syncope.common.search.AttributableCond;\n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.MembershipCond;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.search.ResourceCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributableCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.dao.search.ResourceCond;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -69,12 +69,12 @@ public void userMatch() {\n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setRoleId(5L);\n \n-        assertFalse(searchDAO.matches(user, NodeCond.getLeafCond(membershipCond),\n+        assertFalse(searchDAO.matches(user, SearchCond.getLeafCond(membershipCond),\n                 AttributableUtil.getInstance(AttributableType.USER)));\n \n         membershipCond.setRoleId(1L);\n \n-        assertTrue(searchDAO.matches(user, NodeCond.getLeafCond(membershipCond),\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(membershipCond),\n                 AttributableUtil.getInstance(AttributableType.USER)));\n     }\n \n@@ -87,7 +87,7 @@ public void roleMatch() {\n         attrCond.setSchema(\"show\");\n         attrCond.setType(AttributeCond.Type.ISNOTNULL);\n \n-        assertTrue(searchDAO.matches(role, NodeCond.getLeafCond(attrCond),\n+        assertTrue(searchDAO.matches(role, SearchCond.getLeafCond(attrCond),\n                 AttributableUtil.getInstance(AttributableType.ROLE)));\n     }\n \n@@ -104,12 +104,12 @@ public void searchWithLikeCondition() {\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond.getLeafCond(\n+        SearchCond subCond = SearchCond.getAndCond(SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(\n                 membershipCond));\n \n         assertTrue(subCond.isValid());\n \n-        NodeCond cond = NodeCond.getAndCond(subCond, NodeCond.getLeafCond(loginDateCond));\n+        SearchCond cond = SearchCond.getAndCond(subCond, SearchCond.getLeafCond(loginDateCond));\n \n         assertTrue(cond.isValid());\n \n@@ -125,7 +125,7 @@ public void searchWithNotCondition() {\n         fullnameLeafCond.setSchema(\"fullname\");\n         fullnameLeafCond.setExpression(\"Giuseppe Verdi\");\n \n-        final NodeCond cond = NodeCond.getNotLeafCond(fullnameLeafCond);\n+        final SearchCond cond = SearchCond.getNotLeafCond(fullnameLeafCond);\n         assertTrue(cond.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,\n@@ -147,7 +147,7 @@ public void searchByBoolean() {\n         coolLeafCond.setSchema(\"cool\");\n         coolLeafCond.setExpression(\"true\");\n \n-        final NodeCond cond = NodeCond.getLeafCond(coolLeafCond);\n+        final SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n         assertTrue(cond.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,\n@@ -171,12 +171,12 @@ public void searchByPageAndSize() {\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond.getLeafCond(\n+        SearchCond subCond = SearchCond.getAndCond(SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(\n                 membershipCond));\n \n         assertTrue(subCond.isValid());\n \n-        NodeCond cond = NodeCond.getAndCond(subCond, NodeCond.getLeafCond(loginDateCond));\n+        SearchCond cond = SearchCond.getAndCond(subCond, SearchCond.getLeafCond(loginDateCond));\n \n         assertTrue(cond.isValid());\n \n@@ -197,7 +197,7 @@ public void searchByMembership() {\n         membershipCond.setRoleId(1L);\n \n         List<SyncopeUser> users = searchDAO.search(\n-                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(membershipCond),\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), SearchCond.getLeafCond(membershipCond),\n                 AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertEquals(2, users.size());\n@@ -206,7 +206,7 @@ public void searchByMembership() {\n         membershipCond.setRoleId(5L);\n \n         users = searchDAO.search(\n-                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getNotLeafCond(membershipCond),\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), SearchCond.getNotLeafCond(membershipCond),\n                 AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertEquals(5, users.size());\n@@ -218,7 +218,7 @@ public void searchByIsNull() {\n         coolLeafCond.setSchema(\"cool\");\n \n         List<SyncopeUser> users = searchDAO.search(\n-                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(coolLeafCond),\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), SearchCond.getLeafCond(coolLeafCond),\n                 AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertEquals(4, users.size());\n@@ -227,7 +227,7 @@ public void searchByIsNull() {\n         coolLeafCond.setSchema(\"cool\");\n \n         users = searchDAO.search(\n-                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(coolLeafCond),\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), SearchCond.getLeafCond(coolLeafCond),\n                 AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertEquals(1, users.size());\n@@ -241,7 +241,7 @@ public void searchByResource() {\n         ResourceCond ws1 = new ResourceCond();\n         ws1.setResourceName(\"ws-target-resource-list-mappings-2\");\n \n-        NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getLeafCond(ws1));\n+        SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getNotLeafCond(ws2), SearchCond.getLeafCond(ws1));\n \n         assertTrue(searchCondition.isValid());\n \n@@ -263,8 +263,8 @@ public void searchByUsernameAndId() {\n         idRightCond.setSchema(\"id\");\n         idRightCond.setExpression(\"2\");\n \n-        final NodeCond searchCondition = NodeCond.getOrCond(NodeCond.getLeafCond(usernameLeafCond),\n-                NodeCond.getLeafCond(idRightCond));\n+        final SearchCond searchCondition = SearchCond.getOrCond(SearchCond.getLeafCond(usernameLeafCond),\n+                SearchCond.getLeafCond(idRightCond));\n \n         final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n@@ -285,8 +285,8 @@ public void searchByRolenameAndId() {\n         idRightCond.setSchema(\"id\");\n         idRightCond.setExpression(\"2\");\n \n-        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(rolenameLeafCond),\n-                NodeCond.getLeafCond(idRightCond));\n+        final SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getLeafCond(rolenameLeafCond),\n+                SearchCond.getLeafCond(idRightCond));\n \n         assertTrue(searchCondition.isValid());\n \n@@ -309,8 +309,8 @@ public void searchByUsernameAndFullname() {\n         idRightCond.setSchema(\"fullname\");\n         idRightCond.setExpression(\"Giuseppe V%\");\n \n-        final NodeCond searchCondition = NodeCond.getOrCond(NodeCond.getLeafCond(usernameLeafCond),\n-                NodeCond.getLeafCond(idRightCond));\n+        final SearchCond searchCondition = SearchCond.getOrCond(SearchCond.getLeafCond(usernameLeafCond),\n+                SearchCond.getLeafCond(idRightCond));\n \n         final List<SyncopeUser> matchingUsers =\n                 searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n@@ -326,7 +326,7 @@ public void searchById() {\n         idLeafCond.setSchema(\"id\");\n         idLeafCond.setExpression(\"2\");\n \n-        NodeCond searchCondition = NodeCond.getLeafCond(idLeafCond);\n+        SearchCond searchCondition = SearchCond.getLeafCond(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n         List<SyncopeUser> users =\n@@ -341,7 +341,7 @@ public void searchById() {\n         idLeafCond.setSchema(\"id\");\n         idLeafCond.setExpression(\"4\");\n \n-        searchCondition = NodeCond.getNotLeafCond(idLeafCond);\n+        searchCondition = SearchCond.getNotLeafCond(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n         users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n@@ -366,8 +366,8 @@ public void issue202() {\n         final ResourceCond ws1 = new ResourceCond();\n         ws1.setResourceName(\"ws-target-resource-list-mappings-1\");\n \n-        final NodeCond searchCondition =\n-                NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getNotLeafCond(ws1));\n+        final SearchCond searchCondition =\n+                SearchCond.getAndCond(SearchCond.getNotLeafCond(ws2), SearchCond.getNotLeafCond(ws1));\n         assertTrue(searchCondition.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n@@ -389,7 +389,7 @@ public void issue242() {\n         cond.setSchema(\"id\");\n         cond.setExpression(\"test%\");\n \n-        final NodeCond searchCondition = NodeCond.getLeafCond(cond);\n+        final SearchCond searchCondition = SearchCond.getLeafCond(cond);\n         assertTrue(searchCondition.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n@@ -404,7 +404,7 @@ public void issueSYNCOPE46() {\n         cond.setSchema(\"username\");\n         cond.setExpression(\"%ossin%\");\n \n-        NodeCond searchCondition = NodeCond.getLeafCond(cond);\n+        SearchCond searchCondition = SearchCond.getLeafCond(cond);\n         assertTrue(searchCondition.isValid());\n \n         List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n@@ -422,7 +422,8 @@ public void issueSYNCOPE433() {\n         likeCond.setSchema(\"username\");\n         likeCond.setExpression(\"%ossin%\");\n \n-        NodeCond searchCond = NodeCond.getOrCond(NodeCond.getLeafCond(isNullCond), NodeCond.getLeafCond(likeCond));\n+        SearchCond searchCond = SearchCond.getOrCond(\n+                SearchCond.getLeafCond(isNullCond), SearchCond.getLeafCond(likeCond));\n \n         Integer count = searchDAO.count(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCond,\n                 AttributableUtil.getInstance(AttributableType.USER));"},{"sha":"d5add93471179e2d8301c21254a75b9c483c23a3","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/NotificationTest.java","status":"modified","additions":4,"deletions":60,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,23 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n \n import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n \n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.MembershipCond;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.types.EntityViolationType;\n+import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.core.persistence.beans.Notification;\n-import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -52,9 +44,7 @@ public void find() {\n         assertNotNull(notification.getEvents());\n         assertFalse(notification.getEvents().isEmpty());\n         assertNotNull(notification.getAbout());\n-        assertTrue(notification.getAbout().isValid());\n         assertNotNull(notification.getRecipients());\n-        assertTrue(notification.getRecipients().isValid());\n     }\n \n     @Test\n@@ -69,22 +59,10 @@ public void save() {\n         Notification notification = new Notification();\n         notification.addEvent(\"save\");\n \n-        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n-        fullnameLeafCond1.setSchema(\"fullname\");\n-        fullnameLeafCond1.setExpression(\"%o%\");\n-        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n-        fullnameLeafCond2.setSchema(\"fullname\");\n-        fullnameLeafCond2.setExpression(\"%i%\");\n-        NodeCond about = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond.getLeafCond(\n-                fullnameLeafCond2));\n+        notification.setAbout(SyncopeClient.getSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query());\n \n-        notification.setAbout(about);\n-\n-        MembershipCond membCond = new MembershipCond();\n-        membCond.setRoleId(7L);\n-        NodeCond recipients = NodeCond.getLeafCond(membCond);\n-\n-        notification.setRecipients(recipients);\n+        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n \n         notification.setRecipientAttrName(\"email\");\n         notification.setRecipientAttrType(IntMappingType.UserSchema);\n@@ -98,40 +76,6 @@ public void save() {\n         assertNotNull(actual.getId());\n     }\n \n-    @Test\n-    public void saveWithException() {\n-        Notification notification = new Notification();\n-        notification.addEvent(\"saveWithException\");\n-\n-        MembershipCond membCond = new MembershipCond();\n-        NodeCond about = NodeCond.getLeafCond(membCond);\n-\n-        notification.setAbout(about);\n-\n-        NodeCond recipients = NodeCond.getLeafCond(membCond);\n-\n-        notification.setRecipients(recipients);\n-\n-        notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n-\n-        notification.setSender(\"syncope@syncope.apache.org\");\n-        notification.setSubject(\"Test notification\");\n-        notification.setTemplate(\"test\");\n-\n-        Map<Class<?>, Set<EntityViolationType>> violations;\n-        try {\n-            notificationDAO.save(notification);\n-            violations = null;\n-        } catch (InvalidEntityException e) {\n-            violations = e.getViolations();\n-        }\n-\n-        assertNotNull(violations);\n-        assertEquals(1, violations.size());\n-        assertFalse(violations.get(Notification.class).isEmpty());\n-    }\n-\n     @Test\n     public void delete() {\n         notificationDAO.delete(1L);"},{"sha":"974a25c4c97edb170958473b932c0d340da007fc","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -26,7 +26,6 @@\n import java.util.List;\n import java.util.Set;\n \n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n@@ -80,21 +79,18 @@ public void findAllByPageAndSize() {\n     }\n \n     @Test\n-    public void findByDerAttributeValue()\n-            throws InvalidSearchConditionException {\n+    public void findByDerAttributeValue() {\n         final List<SyncopeUser> list = userDAO.findByDerAttrValue(\"cn\", \"Vivaldi, Antonio\");\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n     }\n \n-    @Test(expected = InvalidSearchConditionException.class)\n-    public void findByInvalidDerAttrValue()\n-            throws InvalidSearchConditionException {\n+    @Test(expected = IllegalArgumentException.class)\n+    public void findByInvalidDerAttrValue() {\n         userDAO.findByDerAttrValue(\"cn\", \"Antonio, Maria, Rossi\");\n     }\n \n-    @Test(expected = InvalidSearchConditionException.class)\n-    public void findByInvalidDerAttrExpression()\n-            throws InvalidSearchConditionException {\n+    @Test(expected = IllegalArgumentException.class)\n+    public void findByInvalidDerAttrExpression() {\n         userDAO.findByDerAttrValue(\"noschema\", \"Antonio, Maria\");\n     }\n "},{"sha":"f84b1c63083b6333706a9d1aded8bca750cd8e7f","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/AttributableSearchTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttributableSearchTest.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -26,8 +26,8 @@\n import java.util.List;\n import java.util.Set;\n \n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -70,7 +70,7 @@ public void issueSYNCOPE95() {\n         coolLeafCond.setSchema(\"cool\");\n         coolLeafCond.setExpression(\"true\");\n \n-        final NodeCond cond = NodeCond.getLeafCond(coolLeafCond);\n+        final SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n         assertTrue(cond.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,"},{"sha":"a8abb911e37f05f30d6df7106708e3481fa1c723","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":14,"deletions":18,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -31,17 +31,16 @@\n import java.util.Set;\n \n import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.mod.StatusMod;\n \n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.EntitlementService;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.to.AttributeTO;\n-import org.apache.syncope.common.to.EntitlementTO;\n+import org.apache.syncope.common.wrap.EntitlementTO;\n import org.apache.syncope.common.to.MembershipTO;\n+import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -52,7 +51,7 @@\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.junit.Assume;\n import org.junit.FixMethodOrder;\n@@ -189,7 +188,7 @@ public void testUserRead() {\n     }\n \n     @Test\n-    public void testUserSearch() throws InvalidSearchConditionException {\n+    public void testUserSearch() {\n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"testusersearch@test.org\");\n \n         MembershipTO membershipTO = new MembershipTO();\n@@ -206,28 +205,25 @@ public void testUserSearch() throws InvalidSearchConditionException {\n         UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n                 getService(UserService.class);\n \n-        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n-        isNullCond.setSchema(\"loginDate\");\n-        NodeCond searchCondition = NodeCond.getLeafCond(isNullCond);\n-\n-        List<UserTO> matchedUsers = userService2.search(searchCondition);\n+        PagedResult<UserTO> matchedUsers = userService2.search(\n+                SyncopeClient.getSearchConditionBuilder().isNotNull(\"loginDate\").query());\n         assertNotNull(matchedUsers);\n-        assertFalse(matchedUsers.isEmpty());\n-        Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n-        for (UserTO user : matchedUsers) {\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.getResult().size());\n+        for (UserTO user : matchedUsers.getResult()) {\n             userIds.add(user.getId());\n         }\n         assertTrue(userIds.contains(1L));\n \n         UserService userService3 = clientFactory.create(\"verdi\", \"password\").getService(UserService.class);\n \n-        matchedUsers = userService3.search(searchCondition);\n-\n+        matchedUsers = userService3.search(\n+                SyncopeClient.getSearchConditionBuilder().isNotNull(\"loginDate\").query());\n         assertNotNull(matchedUsers);\n \n-        userIds = new HashSet<Long>(matchedUsers.size());\n+        userIds = new HashSet<Long>(matchedUsers.getResult().size());\n \n-        for (UserTO user : matchedUsers) {\n+        for (UserTO user : matchedUsers.getResult()) {\n             userIds.add(user.getId());\n         }\n         assertFalse(userIds.contains(1L));"},{"sha":"7921c3e17653ba0270eb41f8ec4b3e708552405f","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;"},{"sha":"0479e784d385ee172ae0298dd507f73e2236ab6d","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnectorTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnectorTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnectorTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnectorTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -39,7 +39,7 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.common.services.ConnectorService;\n import org.apache.syncope.common.services.ResourceService;\n-import org.apache.syncope.common.to.BulkAction;\n+import org.apache.syncope.common.reqres.BulkAction;\n import org.apache.syncope.common.to.ConnBundleTO;\n import org.apache.syncope.common.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n@@ -52,7 +52,7 @@\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ConnectorCapability;\n import org.apache.syncope.common.types.IntMappingType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.common.security.GuardedString;\n import org.junit.BeforeClass;"},{"sha":"4cc34510e783c9330338577c5c3539a969d8edd6","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;"},{"sha":"2ff3636d0ebd44eda5de6fa30fece1e699aeb1ff","filename":"core/src/test/java/org/apache/syncope/core/rest/NotificationTestITCase.java","status":"modified","additions":7,"deletions":39,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -26,16 +26,13 @@\n import java.util.List;\n \n import javax.ws.rs.core.Response;\n-\n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.MembershipCond;\n-import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.services.NotificationService;\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.types.TraceLevel;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -48,16 +45,8 @@ private NotificationTO buildNotificationTO() {\n         notificationTO.setTraceLevel(TraceLevel.SUMMARY);\n         notificationTO.getEvents().add(\"create\");\n \n-        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n-        fullnameLeafCond1.setSchema(\"fullname\");\n-        fullnameLeafCond1.setExpression(\"%o%\");\n-        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n-        fullnameLeafCond2.setSchema(\"fullname\");\n-        fullnameLeafCond2.setExpression(\"%i%\");\n-        NodeCond about = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1),\n-                NodeCond.getLeafCond(fullnameLeafCond2));\n-\n-        notificationTO.setAbout(about);\n+        notificationTO.setAbout(SyncopeClient.getSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query());\n \n         notificationTO.setRecipientAttrName(\"email\");\n         notificationTO.setRecipientAttrType(IntMappingType.UserSchema);\n@@ -87,11 +76,7 @@ public void list() {\n     @Test\n     public void create() {\n         NotificationTO notificationTO = buildNotificationTO();\n-\n-        MembershipCond membCond = new MembershipCond();\n-        membCond.setRoleId(7L);\n-        NodeCond recipients = NodeCond.getLeafCond(membCond);\n-        notificationTO.setRecipients(recipients);\n+        notificationTO.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n \n         Response response = notificationService.create(notificationTO);\n         NotificationTO actual = getObject(response.getLocation(), NotificationService.class,\n@@ -106,23 +91,7 @@ public void create() {\n     @Test\n     public void update() {\n         NotificationTO notificationTO = notificationService.read(1L);\n-        assertNotNull(notificationTO);\n-\n-        notificationTO.setRecipients(NodeCond.getLeafCond(new MembershipCond()));\n-\n-        SyncopeClientException exception = null;\n-        try {\n-            notificationService.update(notificationTO.getId(), notificationTO);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidNotification, e.getType());\n-        }\n-\n-        MembershipCond membCond = new MembershipCond();\n-        membCond.setRoleId(7L);\n-        NodeCond recipients = NodeCond.getLeafCond(membCond);\n-\n-        notificationTO.setRecipients(recipients);\n+        notificationTO.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n \n         notificationService.update(notificationTO.getId(), notificationTO);\n         NotificationTO actual = notificationService.read(notificationTO.getId());\n@@ -153,12 +122,11 @@ public void issueSYNCOPE83() {\n         notificationTO.setSelfAsRecipient(true);\n \n         NotificationTO actual = null;\n-        SyncopeClientException exception = null;\n         try {\n             Response response = notificationService.create(notificationTO);\n             actual = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidNotification, e.getType());\n+            assertNotNull(e);\n         }\n         assertNotNull(actual);\n         assertNotNull(actual.getId());"},{"sha":"92d34938f86a890c1f2052a6a637fb544f608a70","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.SyncPolicySpec;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.sync.TestSyncRule;\n import org.junit.FixMethodOrder;\n import org.junit.Test;"},{"sha":"33526a3e6827e0222897d0db84d66451f0e26139","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":8,"deletions":14,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -33,12 +33,13 @@\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.report.UserReportletConf;\n import org.apache.syncope.common.services.ReportService;\n-import org.apache.syncope.common.types.ReportletConfClasses;\n+import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.types.ReportExecStatus;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.wrap.ReportletConfClass;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -54,24 +55,17 @@ public ReportTO createReport(final ReportTO report) {\n \n     @Test\n     public void getReportletClasses() {\n-        ReportletConfClasses reportletClasses = reportService.getReportletConfClasses();\n+        List<ReportletConfClass> reportletClasses = reportService.getReportletConfClasses();\n         assertNotNull(reportletClasses);\n-        assertFalse(reportletClasses.getConfClasses().isEmpty());\n-    }\n-\n-    @Test\n-    public void count() {\n-        Integer count = reportService.count();\n-        assertNotNull(count);\n-        assertTrue(count > 0);\n+        assertFalse(reportletClasses.isEmpty());\n     }\n \n     @Test\n     public void list() {\n-        List<ReportTO> reports = reportService.list();\n+        PagedResult<ReportTO> reports = reportService.list();\n         assertNotNull(reports);\n-        assertFalse(reports.isEmpty());\n-        for (ReportTO report : reports) {\n+        assertFalse(reports.getResult().isEmpty());\n+        for (ReportTO report : reports.getResult()) {\n             assertNotNull(report);\n         }\n     }"},{"sha":"b02e2fb36901964dd192a8aad2948a5cc50bcf8c","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -34,19 +34,19 @@\n \n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.services.ResourceService;\n-import org.apache.syncope.common.to.BulkAction;\n+import org.apache.syncope.common.reqres.BulkAction;\n \n import org.apache.syncope.common.to.MappingItemTO;\n import org.apache.syncope.common.to.MappingTO;\n-import org.apache.syncope.common.to.PropagationActionClassTO;\n+import org.apache.syncope.common.wrap.PropagationActionClass;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -90,7 +90,7 @@ private ResourceTO buildResourceTO(final String resourceName) {\n \n     @Test\n     public void getPropagationActionsClasses() {\n-        List<PropagationActionClassTO> actions = resourceService.getPropagationActionsClasses();\n+        List<PropagationActionClass> actions = resourceService.getPropagationActionsClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }"},{"sha":"cae4ddb02107660b308e76e11a83070f88c9e7f7","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -36,7 +36,8 @@\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.services.RoleService;\n import org.apache.syncope.common.to.ConnObjectTO;\n-import org.apache.syncope.common.to.ResourceNameTO;\n+import org.apache.syncope.common.reqres.PagedResult;\n+import org.apache.syncope.common.wrap.ResourceName;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -47,7 +48,7 @@\n import org.apache.syncope.common.types.ResourceAssociationActionType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.identityconnectors.framework.common.objects.Name;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -169,10 +170,10 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<RoleTO> roleTOs = roleService.list();\n+        PagedResult<RoleTO> roleTOs = roleService.list();\n         assertNotNull(roleTOs);\n-        assertTrue(roleTOs.size() >= 8);\n-        for (RoleTO roleTO : roleTOs) {\n+        assertTrue(roleTOs.getResult().size() >= 8);\n+        for (RoleTO roleTO : roleTOs.getResult()) {\n             assertNotNull(roleTO);\n         }\n     }\n@@ -403,7 +404,7 @@ public void unlink() {\n \n         actual = roleService.associate(actual.getId(),\n                 ResourceAssociationActionType.UNLINK,\n-                CollectionWrapper.wrap(\"resource-ldap\", ResourceNameTO.class)).\n+                CollectionWrapper.wrap(\"resource-ldap\", ResourceName.class)).\n                 readEntity(RoleTO.class);\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n@@ -425,7 +426,7 @@ public void unassign() {\n \n         actual = roleService.associate(actual.getId(),\n                 ResourceAssociationActionType.UNASSIGN,\n-                CollectionWrapper.wrap(\"resource-ldap\", ResourceNameTO.class)).\n+                CollectionWrapper.wrap(\"resource-ldap\", ResourceName.class)).\n                 readEntity(RoleTO.class);\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n@@ -451,7 +452,7 @@ public void deprovision() {\n \n         actual = roleService.associate(actual.getId(),\n                 ResourceAssociationActionType.DEPROVISION,\n-                CollectionWrapper.wrap(\"resource-ldap\", ResourceNameTO.class)).\n+                CollectionWrapper.wrap(\"resource-ldap\", ResourceName.class)).\n                 readEntity(RoleTO.class);\n         assertNotNull(actual);\n         assertFalse(actual.getResources().isEmpty());\n@@ -516,7 +517,7 @@ public void anonymous() {\n         }\n \n         RoleService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(RoleService.class);\n-        assertFalse(anonymous.list().isEmpty());\n+        assertFalse(anonymous.list().getResult().isEmpty());\n     }\n \n     @Test"},{"sha":"260cbdddfea12e82a6649990d127a7c171bc18d6","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.util.AttributableOperations;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;"},{"sha":"5983cfc3dc8f4b49cd12d219c537b0810b687d5f","filename":"core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java","status":"modified","additions":69,"deletions":156,"changes":225,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -24,17 +24,13 @@\n import static org.junit.Assert.assertTrue;\n \n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n \n-import org.apache.syncope.common.search.AttributableCond;\n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.EntitlementCond;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.search.ResourceCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n+import org.apache.syncope.client.SyncopeClient;\n+import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n+\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -43,110 +39,65 @@\n public class SearchTestITCase extends AbstractTest {\n \n     @Test\n-    public void searchUser() throws InvalidSearchConditionException {\n+    public void searchUser() {\n         // LIKE\n-        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n-        fullnameLeafCond1.setSchema(\"fullname\");\n-        fullnameLeafCond1.setExpression(\"%o%\");\n-\n-        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n-        fullnameLeafCond2.setSchema(\"fullname\");\n-        fullnameLeafCond2.setExpression(\"%i%\");\n-\n-        NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond.getLeafCond(\n-                fullnameLeafCond2));\n-\n-        assertTrue(searchCondition.isValid());\n-\n-        List<UserTO> matchedUsers = userService.search(searchCondition);\n-        \n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query());\n         assertNotNull(matchedUsers);\n-        assertFalse(matchedUsers.isEmpty());\n-        for (UserTO user : matchedUsers) {\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+\n+        for (UserTO user : matchedUsers.getResult()) {\n             assertNotNull(user);\n         }\n \n         // ISNULL\n-        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNULL);\n-        isNullCond.setSchema(\"loginDate\");\n-        searchCondition = NodeCond.getLeafCond(isNullCond);\n-\n-        matchedUsers = userService.search(searchCondition);\n+        matchedUsers = userService.search(\n+                SyncopeClient.getSearchConditionBuilder().isNull(\"loginDate\").query());\n         assertNotNull(matchedUsers);\n-        assertFalse(matchedUsers.isEmpty());\n+        assertFalse(matchedUsers.getResult().isEmpty());\n \n-        Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n-        for (UserTO user : matchedUsers) {\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.getResult().size());\n+        for (UserTO user : matchedUsers.getResult()) {\n             userIds.add(user.getId());\n         }\n         assertTrue(userIds.contains(2L));\n         assertTrue(userIds.contains(3L));\n     }\n \n     @Test\n-    public void searchByUsernameAndId() throws InvalidSearchConditionException {\n-        final AttributableCond usernameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n-        usernameLeafCond.setSchema(\"username\");\n-        usernameLeafCond.setExpression(\"rossini\");\n-\n-        final AttributableCond idRightCond = new AttributableCond(AttributableCond.Type.LT);\n-        idRightCond.setSchema(\"id\");\n-        idRightCond.setExpression(\"2\");\n-\n-        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(usernameLeafCond), NodeCond.\n-                getLeafCond(idRightCond));\n-\n-        assertTrue(searchCondition.isValid());\n-\n-        final List<UserTO> matchingUsers = userService.search(searchCondition);\n+    public void searchByUsernameAndId() {\n+        final PagedResult<UserTO> matchingUsers = userService.search(\n+                SyncopeClient.getSearchConditionBuilder().\n+                is(\"username\").equalTo(\"rossini\").and(\"id\").lessThan(2).query());\n \n         assertNotNull(matchingUsers);\n-        assertEquals(1, matchingUsers.size());\n-        assertEquals(\"rossini\", matchingUsers.iterator().next().getUsername());\n-        assertEquals(1L, matchingUsers.iterator().next().getId());\n+        assertEquals(1, matchingUsers.getResult().size());\n+        assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n+        assertEquals(1L, matchingUsers.getResult().iterator().next().getId());\n     }\n \n     @Test\n-    public void searchByRolenameAndId() throws InvalidSearchConditionException {\n-        final AttributableCond rolenameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n-        rolenameLeafCond.setSchema(\"name\");\n-        rolenameLeafCond.setExpression(\"root\");\n-\n-        final AttributableCond idRightCond = new AttributableCond(AttributableCond.Type.LT);\n-        idRightCond.setSchema(\"id\");\n-        idRightCond.setExpression(\"2\");\n-\n-        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(rolenameLeafCond),\n-                NodeCond.getLeafCond(idRightCond));\n-\n-        assertTrue(searchCondition.isValid());\n-\n-        final List<RoleTO> matchingRoles = roleService.search(searchCondition);\n+    public void searchByRolenameAndId() {\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(\n+                SyncopeClient.getSearchConditionBuilder().\n+                is(\"name\").equalTo(\"root\").and(\"id\").lessThan(2).query());\n \n         assertNotNull(matchingRoles);\n-        assertEquals(1, matchingRoles.size());\n-        assertEquals(\"root\", matchingRoles.iterator().next().getName());\n-        assertEquals(1L, matchingRoles.iterator().next().getId());\n+        assertEquals(1, matchingRoles.getResult().size());\n+        assertEquals(\"root\", matchingRoles.getResult().iterator().next().getName());\n+        assertEquals(1L, matchingRoles.getResult().iterator().next().getId());\n     }\n \n     @Test\n-    public void searchUserByResourceName() throws InvalidSearchConditionException {\n-        ResourceCond ws2 = new ResourceCond();\n-        ws2.setResourceName(\"ws-target-resource2\");\n-\n-        ResourceCond ws1 = new ResourceCond();\n-        ws1.setResourceName(RESOURCE_NAME_MAPPINGS2);\n-\n-        NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getLeafCond(ws1));\n-\n-        assertTrue(searchCondition.isValid());\n-\n-        List<UserTO> matchedUsers = userService.search(searchCondition);\n+    public void searchUserByResourceName() {\n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query());\n         assertNotNull(matchedUsers);\n-        assertFalse(matchedUsers.isEmpty());\n+        assertFalse(matchedUsers.getResult().isEmpty());\n \n-        Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n-        for (UserTO user : matchedUsers) {\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.getResult().size());\n+        for (UserTO user : matchedUsers.getResult()) {\n             userIds.add(user.getId());\n         }\n \n@@ -155,105 +106,67 @@ public void searchUserByResourceName() throws InvalidSearchConditionException {\n     }\n \n     @Test\n-    public void paginatedSearch() throws InvalidSearchConditionException {\n+    public void paginatedSearch() {\n         // LIKE\n-        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n-        fullnameLeafCond1.setSchema(\"fullname\");\n-        fullnameLeafCond1.setExpression(\"%o%\");\n-\n-        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n-        fullnameLeafCond2.setSchema(\"fullname\");\n-        fullnameLeafCond2.setExpression(\"%i%\");\n-\n-        NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond.getLeafCond(\n-                fullnameLeafCond2));\n-\n-        assertTrue(searchCondition.isValid());\n-\n-        List<UserTO> matchedUsers = userService.search(searchCondition, 1, 2);\n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query(), 1, 2);\n         assertNotNull(matchedUsers);\n \n-        assertFalse(matchedUsers.isEmpty());\n-        for (UserTO user : matchedUsers) {\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+        for (UserTO user : matchedUsers.getResult()) {\n             assertNotNull(user);\n         }\n \n         // ISNULL\n-        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNULL);\n-        isNullCond.setSchema(\"loginDate\");\n-        searchCondition = NodeCond.getLeafCond(isNullCond);\n-\n-        matchedUsers = userService.search(searchCondition, 1, 2);\n+        matchedUsers = userService.search(\n+                SyncopeClient.getSearchConditionBuilder().isNull(\"loginDate\").query(), 1, 2);\n \n         assertNotNull(matchedUsers);\n-        assertFalse(matchedUsers.isEmpty());\n-        Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n-        for (UserTO user : matchedUsers) {\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.getResult().size());\n+        for (UserTO user : matchedUsers.getResult()) {\n             userIds.add(user.getId());\n         }\n         assertEquals(2, userIds.size());\n     }\n \n     @Test\n-    public void searchCount() throws InvalidSearchConditionException {\n-        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNULL);\n-        isNullCond.setSchema(\"loginDate\");\n-        NodeCond searchCond = NodeCond.getLeafCond(isNullCond);\n-\n-        Integer count = userService.searchCount(searchCond);\n-        assertNotNull(count);\n-        assertTrue(count > 0);\n+    public void searchByBooleanAttributableCond() {\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(\n+                SyncopeClient.getSearchConditionBuilder().is(\"inheritAttrs\").equalTo(\"true\").query());\n+        assertNotNull(matchingRoles);\n+        assertFalse(matchingRoles.getResult().isEmpty());\n     }\n \n     @Test\n-    public void searchByBooleanAttributableCond() throws InvalidSearchConditionException {\n-        final AttributableCond cond = new AttributableCond(AttributableCond.Type.EQ);\n-        cond.setSchema(\"inheritAttrs\");\n-        cond.setExpression(\"true\");\n-\n-        final NodeCond searchCondition = NodeCond.getLeafCond(cond);\n-\n-        final List<RoleTO> matchingRoles = roleService.search(searchCondition);\n+    public void searchByEntitlement() {\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(\n+                SyncopeClient.getSearchConditionBuilder().hasEntitlements(\"USER_LIST\", \"USER_READ\").query());\n         assertNotNull(matchingRoles);\n-        assertFalse(matchingRoles.isEmpty());\n+        assertFalse(matchingRoles.getResult().isEmpty());\n     }\n \n     @Test\n-    public void searchByEntitlement() throws InvalidSearchConditionException {\n-        final EntitlementCond userListCond = new EntitlementCond();\n-        userListCond.setExpression(\"USER_LIST\");\n-\n-        final EntitlementCond userReadcond = new EntitlementCond();\n-        userReadcond.setExpression(\"USER_READ\");\n+    public void searchByRelationshipAttributableCond() {\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(SyncopeClient.getSearchConditionBuilder().\n+                isNotNull(\"passwordPolicy\").and(\"userOwner\").equalTo(5).query());\n \n-        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(userListCond),\n-                NodeCond.getLeafCond(userReadcond));\n-        assertTrue(searchCondition.isValid());\n-\n-        final List<RoleTO> matchingRoles = roleService.search(searchCondition);\n         assertNotNull(matchingRoles);\n-        assertFalse(matchingRoles.isEmpty());\n+        assertEquals(1, matchingRoles.getResult().size());\n+        assertEquals(\"director\", matchingRoles.getResult().iterator().next().getName());\n+        assertEquals(6L, matchingRoles.getResult().iterator().next().getId());\n     }\n \n     @Test\n-    public void searchByRelationshipAttributableCond() throws InvalidSearchConditionException {\n-        final AttributableCond userOwnerCond = new AttributableCond(AttributableCond.Type.EQ);\n-        userOwnerCond.setSchema(\"userOwner\");\n-        userOwnerCond.setExpression(\"5\");\n-\n-        final AttributableCond ppolicyCond = new AttributableCond(AttributableCond.Type.ISNOTNULL);\n-        ppolicyCond.setSchema(\"passwordPolicy\");\n-\n-        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(userOwnerCond),\n-                NodeCond.getLeafCond(ppolicyCond));\n-\n-        assertTrue(searchCondition.isValid());\n-\n-        final List<RoleTO> matchingRoles = roleService.search(searchCondition);\n+    public void nested() {\n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                \"((fullname==*o*,fullname==*i*);$resources!=ws-target-resource-1)\", 1, 2);\n+        assertNotNull(matchedUsers);\n \n-        assertNotNull(matchingRoles);\n-        assertEquals(1, matchingRoles.size());\n-        assertEquals(\"director\", matchingRoles.iterator().next().getName());\n-        assertEquals(6L, matchingRoles.iterator().next().getId());\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+        for (UserTO user : matchedUsers.getResult()) {\n+            assertNotNull(user);\n+        }\n     }\n }"},{"sha":"6647f847933eb037b745dc4fe37af952463732e7","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":43,"deletions":63,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -28,35 +28,32 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.search.AttributableCond;\n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.MembershipCond;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.services.NotificationService;\n import org.apache.syncope.common.services.TaskService;\n import org.apache.syncope.common.to.AttributeTO;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.JobClassTO;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.wrap.JobClass;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.to.NotificationTaskTO;\n import org.apache.syncope.common.to.PropagationTaskTO;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.SchedTaskTO;\n-import org.apache.syncope.common.to.SyncActionClassTO;\n+import org.apache.syncope.common.wrap.SyncActionClass;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n+import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.types.TraceLevel;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.sync.TestSyncActions;\n import org.apache.syncope.core.sync.TestSyncRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n@@ -91,14 +88,14 @@ public void removeTestUsers() {\n \n     @Test\n     public void getJobClasses() {\n-        List<JobClassTO> jobClasses = taskService.getJobClasses();\n+        List<JobClass> jobClasses = taskService.getJobClasses();\n         assertNotNull(jobClasses);\n         assertFalse(jobClasses.isEmpty());\n     }\n \n     @Test\n     public void getSyncActionsClasses() {\n-        List<SyncActionClassTO> actions = taskService.getSyncActionsClasses();\n+        List<SyncActionClass> actions = taskService.getSyncActionsClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }\n@@ -149,49 +146,42 @@ public void update() {\n         assertNull(actual.getCronExpression());\n     }\n \n-    @Test\n-    public void count() {\n-        Integer count = taskService.count(TaskType.PROPAGATION);\n-        assertNotNull(count);\n-        assertTrue(count > 0);\n-    }\n-\n     @Test\n     public void list() {\n-        List<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n-        assertFalse(tasks.isEmpty());\n-        for (AbstractTaskTO task : tasks) {\n+        assertFalse(tasks.getResult().isEmpty());\n+        for (AbstractTaskTO task : tasks.getResult()) {\n             assertNotNull(task);\n         }\n     }\n \n     @Test\n     public void paginatedList() {\n-        List<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 2);\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 2);\n \n         assertNotNull(tasks);\n-        assertFalse(tasks.isEmpty());\n-        assertEquals(2, tasks.size());\n+        assertFalse(tasks.getResult().isEmpty());\n+        assertEquals(2, tasks.getResult().size());\n \n-        for (AbstractTaskTO task : tasks) {\n+        for (AbstractTaskTO task : tasks.getResult()) {\n             assertNotNull(task);\n         }\n \n         tasks = taskService.list(TaskType.PROPAGATION, 2, 2);\n \n         assertNotNull(tasks);\n-        assertFalse(tasks.isEmpty());\n+        assertFalse(tasks.getResult().isEmpty());\n \n-        for (AbstractTaskTO task : tasks) {\n+        for (AbstractTaskTO task : tasks.getResult()) {\n             assertNotNull(task);\n         }\n \n         tasks = taskService.list(TaskType.PROPAGATION, 1000, 2);\n \n         assertNotNull(tasks);\n-        assertTrue(tasks.isEmpty());\n+        assertTrue(tasks.getResult().isEmpty());\n     }\n \n     @Test\n@@ -261,7 +251,7 @@ public void sync() {\n \n         // -----------------------------\n         try {\n-            int usersPre = userService.count();\n+            int usersPre = userService.list(1, 1).getTotalCount();\n             assertNotNull(usersPre);\n \n             // Update sync task\n@@ -318,7 +308,7 @@ public void sync() {\n             assertEquals(\"TYPE_8\", userTO.getAttrMap().get(\"type\").getValues().get(0));\n \n             // check for sync results\n-            int usersPost = userService.count();\n+            int usersPost = userService.list(1, 1).getTotalCount();\n             assertNotNull(usersPost);\n             assertEquals(usersPre + 9, usersPost);\n \n@@ -386,9 +376,7 @@ public void reconcileFromDB() {\n     }\n \n     @Test\n-    public void reconcileFromLDAP()\n-            throws InvalidSearchConditionException {\n-\n+    public void reconcileFromLDAP() {\n         // Update sync task\n         SyncTaskTO task = taskService.read(11L);\n         assertNotNull(task);\n@@ -423,37 +411,33 @@ public void reconcileFromLDAP()\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n         // 2. verify that synchronized role is found, with expected attributes\n-        final AttributableCond rolenameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n-        rolenameLeafCond.setSchema(\"name\");\n-        rolenameLeafCond.setExpression(\"testLDAPGroup\");\n-        final List<RoleTO> matchingRoles = roleService.search(NodeCond.getLeafCond(rolenameLeafCond));\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(\n+                SyncopeClient.getSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query());\n         assertNotNull(matchingRoles);\n-        assertEquals(1, matchingRoles.size());\n+        assertEquals(1, matchingRoles.getResult().size());\n \n-        final AttributableCond usernameLeafCond = new AttributableCond(AttributeCond.Type.EQ);\n-        usernameLeafCond.setSchema(\"username\");\n-        usernameLeafCond.setExpression(\"syncFromLDAP\");\n-        final List<UserTO> matchingUsers = userService.search(NodeCond.getLeafCond(usernameLeafCond));\n+        final PagedResult<UserTO> matchingUsers = userService.search(\n+                SyncopeClient.getSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query());\n         assertNotNull(matchingUsers);\n-        assertEquals(1, matchingUsers.size());\n+        assertEquals(1, matchingUsers.getResult().size());\n \n         // Check for SYNCOPE-436\n-        assertEquals(\"syncFromLDAP\", matchingUsers.get(0).getVirAttrMap().get(\"virtualReadOnly\").getValues().get(0));\n+        assertEquals(\"syncFromLDAP\", matchingUsers.getResult().get(0).getVirAttrMap().\n+                get(\"virtualReadOnly\").getValues().get(0));\n \n-        final RoleTO roleTO = matchingRoles.iterator().next();\n+        final RoleTO roleTO = matchingRoles.getResult().iterator().next();\n         assertNotNull(roleTO);\n         assertEquals(\"testLDAPGroup\", roleTO.getName());\n         assertEquals(8L, roleTO.getParent());\n         assertEquals(\"true\", roleTO.getAttrMap().get(\"show\").getValues().get(0));\n-        assertEquals(matchingUsers.iterator().next().getId(), (long) roleTO.getUserOwner());\n+        assertEquals(matchingUsers.getResult().iterator().next().getId(), (long) roleTO.getUserOwner());\n         assertNull(roleTO.getRoleOwner());\n \n         // 3. verify that LDAP group membership is propagated as Syncope role membership\n-        final MembershipCond membershipCond = new MembershipCond();\n-        membershipCond.setRoleId(roleTO.getId());\n-        final List<UserTO> members = userService.search(NodeCond.getLeafCond(membershipCond));\n+        final PagedResult<UserTO> members = userService.search(\n+                SyncopeClient.getSearchConditionBuilder().hasRoles(roleTO.getId()).query());\n         assertNotNull(members);\n-        assertEquals(1, members.size());\n+        assertEquals(1, members.getResult().size());\n     }\n \n     @Test\n@@ -535,11 +519,11 @@ public void issueSYNCOPE86() {\n     }\n \n     private NotificationTaskTO findNotificationTaskBySender(final String sender) {\n-        List<NotificationTaskTO> tasks = taskService.list(TaskType.NOTIFICATION);\n+        PagedResult<NotificationTaskTO> tasks = taskService.list(TaskType.NOTIFICATION);\n         assertNotNull(tasks);\n-        assertFalse(tasks.isEmpty());\n+        assertFalse(tasks.getResult().isEmpty());\n         NotificationTaskTO taskTO = null;\n-        for (NotificationTaskTO task : tasks) {\n+        for (NotificationTaskTO task : tasks.getResult()) {\n             if (sender.equals(task.getSender())) {\n                 taskTO = task;\n             }\n@@ -553,13 +537,9 @@ private void createNotificationTask(final String sender) {\n         notification.setTraceLevel(TraceLevel.FAILURES);\n         notification.getEvents().add(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n-        MembershipCond membCond = new MembershipCond();\n-        membCond.setRoleId(7L);\n-        notification.setAbout(NodeCond.getLeafCond(membCond));\n+        notification.setAbout(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n \n-        membCond = new MembershipCond();\n-        membCond.setRoleId(8L);\n-        notification.setRecipients(NodeCond.getLeafCond(membCond));\n+        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(8L).query());\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n@@ -905,17 +885,17 @@ public void issueSYNCOPE307() {\n \n     @Test\n     public void bulkAction() {\n-        final List<PropagationTaskTO> before = taskService.list(TaskType.PROPAGATION);\n+        final PagedResult<PropagationTaskTO> before = taskService.list(TaskType.PROPAGATION);\n \n         // create user with testdb resource\n         final UserTO userTO = UserTestITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         createUser(userTO);\n \n         final List<PropagationTaskTO> after = new ArrayList<PropagationTaskTO>(\n-                taskService.<PropagationTaskTO>list(TaskType.PROPAGATION));\n+                taskService.<PropagationTaskTO>list(TaskType.PROPAGATION).getResult());\n \n-        after.removeAll(before);\n+        after.removeAll(before.getResult());\n \n         assertFalse(after.isEmpty());\n \n@@ -928,6 +908,6 @@ public void bulkAction() {\n \n         taskService.bulk(bulkAction);\n \n-        assertFalse(taskService.list(TaskType.PROPAGATION).containsAll(after));\n+        assertFalse(taskService.list(TaskType.PROPAGATION).getResult().containsAll(after));\n     }\n }"},{"sha":"f6dc86077a96c71c63273693bd1c8209ff4723e2","filename":"core/src/test/java/org/apache/syncope/core/rest/UserSelfTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.types.Preference;\n import org.apache.syncope.common.types.RESTHeaders;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.junit.Assume;\n import org.junit.FixMethodOrder;"},{"sha":"8cd2cc77dde4e30fe104d856fea56fd940f2961b","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":50,"deletions":65,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -43,17 +43,17 @@\n import org.apache.syncope.common.services.ResourceService;\n import org.apache.syncope.common.services.UserSelfService;\n import org.apache.syncope.common.to.AttributeTO;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n-import org.apache.syncope.common.to.BulkActionRes.Status;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n+import org.apache.syncope.common.reqres.BulkActionResult.Status;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.MappingItemTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n-import org.apache.syncope.common.to.PropagationStatusTO;\n+import org.apache.syncope.common.to.PropagationStatus;\n import org.apache.syncope.common.to.PropagationTaskTO;\n-import org.apache.syncope.common.to.ResourceNameTO;\n+import org.apache.syncope.common.wrap.ResourceName;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -66,7 +66,7 @@\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.AttributableOperations;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n@@ -80,6 +80,7 @@\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.types.Preference;\n import org.apache.syncope.common.types.RESTHeaders;\n import org.identityconnectors.framework.common.objects.Name;\n@@ -138,12 +139,12 @@ public static UserTO getSampleTO(final String email) {\n     @SuppressWarnings(\"unchecked\")\n     public void createUserWithNoPropagation() {\n         // get task list\n-        List<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n-        assertFalse(tasks.isEmpty());\n+        assertFalse(tasks.getResult().isEmpty());\n \n-        long maxId = getMaxTaskId(tasks);\n+        long maxId = getMaxTaskId(tasks.getResult());\n \n         // create a new user\n         UserTO userTO = getUniqueSampleTO(\"xxx@xxx.xxx\");\n@@ -156,9 +157,9 @@ public void createUserWithNoPropagation() {\n         // get the new task list\n         tasks = taskService.list(TaskType.PROPAGATION);\n         assertNotNull(tasks);\n-        assertFalse(tasks.isEmpty());\n+        assertFalse(tasks.getResult().isEmpty());\n \n-        long newMaxId = getMaxTaskId(tasks);\n+        long newMaxId = getMaxTaskId(tasks.getResult());\n \n         assertTrue(newMaxId > maxId);\n \n@@ -365,12 +366,12 @@ public void createWithException() {\n     @SuppressWarnings(\"unchecked\")\n     public void create() {\n         // get task list\n-        List<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n-        assertFalse(tasks.isEmpty());\n+        assertFalse(tasks.getResult().isEmpty());\n \n-        long maxId = getMaxTaskId(tasks);\n+        long maxId = getMaxTaskId(tasks.getResult());\n         PropagationTaskTO taskTO = taskService.read(maxId);\n \n         assertNotNull(taskTO);\n@@ -423,9 +424,9 @@ public void create() {\n         tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n-        assertFalse(tasks.isEmpty());\n+        assertFalse(tasks.getResult().isEmpty());\n \n-        long newMaxId = getMaxTaskId(tasks);\n+        long newMaxId = getMaxTaskId(tasks.getResult());\n \n         // default configuration for ws-target-resource2:\n         // only failed executions have to be registered\n@@ -566,45 +567,36 @@ public void deleteByUsername() {\n         }\n     }\n \n-    @Test\n-    public void count() {\n-        Integer count = userService.count();\n-        assertNotNull(count);\n-        assertTrue(count > 0);\n-    }\n-\n     @Test\n     public void list() {\n-        List<UserTO> users = userService.list();\n+        PagedResult<UserTO> users = userService.list();\n         assertNotNull(users);\n-        assertFalse(users.isEmpty());\n-        for (UserTO user : users) {\n+        assertFalse(users.getResult().isEmpty());\n+\n+        for (UserTO user : users.getResult()) {\n             assertNotNull(user);\n         }\n     }\n \n     @Test\n     public void paginatedList() {\n-        List<UserTO> users = userService.list(1, 2);\n-\n+        PagedResult<UserTO> users = userService.list(1, 2);\n         assertNotNull(users);\n-        assertFalse(users.isEmpty());\n-        assertEquals(2, users.size());\n+        assertFalse(users.getResult().isEmpty());\n+        assertEquals(2, users.getResult().size());\n \n-        for (UserTO user : users) {\n+        for (UserTO user : users.getResult()) {\n             assertNotNull(user);\n         }\n \n         users = userService.list(2, 2);\n-\n         assertNotNull(users);\n-        assertFalse(users.isEmpty());\n-        assertEquals(2, users.size());\n+        assertFalse(users.getResult().isEmpty());\n+        assertEquals(2, users.getResult().size());\n \n         users = userService.list(100, 2);\n-\n         assertNotNull(users);\n-        assertTrue(users.isEmpty());\n+        assertTrue(users.getResult().isEmpty());\n     }\n \n     @Test\n@@ -730,11 +722,9 @@ public void update() {\n     }\n \n     @Test\n-    @SuppressWarnings(\"unchecked\")\n     public void updatePasswordOnly() {\n-        List<PropagationTaskTO> beforeTasks = taskService.list(TaskType.PROPAGATION);\n-        assertNotNull(beforeTasks);\n-        assertFalse(beforeTasks.isEmpty());\n+        int beforeTasks = taskService.list(TaskType.PROPAGATION, 1, 1).getTotalCount();\n+        assertFalse(beforeTasks <= 0);\n \n         UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n         MembershipTO membershipTO = new MembershipTO();\n@@ -753,27 +743,22 @@ public void updatePasswordOnly() {\n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n \n-        SyncopeUser passwordTestUser = new SyncopeUser();\n-        passwordTestUser.setPassword(\"newPassword123\", CipherAlgorithm.SHA1, 0);\n-        assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n-\n-        List<PropagationTaskTO> afterTasks = taskService.list(TaskType.PROPAGATION);\n-        assertNotNull(afterTasks);\n-        assertFalse(afterTasks.isEmpty());\n+        int afterTasks = taskService.list(TaskType.PROPAGATION, 1, 1).getTotalCount();\n+        assertFalse(beforeTasks <= 0);\n \n-        assertTrue(beforeTasks.size() < afterTasks.size());\n+        assertTrue(beforeTasks < afterTasks);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Test\n     public void verifyTaskRegistration() {\n         // get task list\n-        List<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n-        assertFalse(tasks.isEmpty());\n+        assertFalse(tasks.getResult().isEmpty());\n \n-        long maxId = getMaxTaskId(tasks);\n+        long maxId = getMaxTaskId(tasks.getResult());\n \n         // --------------------------------------\n         // Create operation\n@@ -793,9 +778,9 @@ public void verifyTaskRegistration() {\n         tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n-        assertFalse(tasks.isEmpty());\n+        assertFalse(tasks.getResult().isEmpty());\n \n-        long newMaxId = getMaxTaskId(tasks);\n+        long newMaxId = getMaxTaskId(tasks.getResult());\n \n         // default configuration for ws-target-resource2:\n         // only failed executions have to be registered\n@@ -818,7 +803,7 @@ public void verifyTaskRegistration() {\n         tasks = taskService.list(TaskType.PROPAGATION);\n \n         maxId = newMaxId;\n-        newMaxId = getMaxTaskId(tasks);\n+        newMaxId = getMaxTaskId(tasks.getResult());\n \n         // default configuration for ws-target-resource2:\n         // all update executions have to be registered\n@@ -838,7 +823,7 @@ public void verifyTaskRegistration() {\n         tasks = taskService.list(TaskType.PROPAGATION);\n \n         maxId = newMaxId;\n-        newMaxId = getMaxTaskId(tasks);\n+        newMaxId = getMaxTaskId(tasks.getResult());\n \n         // default configuration for ws-target-resource2: no delete executions have to be registered\n         // --> no more tasks/executions should be added\n@@ -1091,7 +1076,7 @@ public final void issue280() {\n         userTO = updateUser(userMod);\n         assertNotNull(userTO);\n \n-        final List<PropagationStatusTO> propagations = userTO.getPropagationStatusTOs();\n+        final List<PropagationStatus> propagations = userTO.getPropagationStatusTOs();\n \n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n@@ -1115,7 +1100,7 @@ public void issue281() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        final List<PropagationStatusTO> propagations = userTO.getPropagationStatusTOs();\n+        final List<PropagationStatus> propagations = userTO.getPropagationStatusTOs();\n \n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n@@ -1583,10 +1568,10 @@ public void isseSYNCOPE136AES() {\n         assertNotNull(userTO);\n \n         // 5. verify that propagation was successful\n-        List<PropagationStatusTO> props = userTO.getPropagationStatusTOs();\n+        List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n         assertNotNull(props);\n         assertEquals(1, props.size());\n-        PropagationStatusTO prop = props.iterator().next();\n+        PropagationStatus prop = props.iterator().next();\n         assertNotNull(prop);\n         assertEquals(RESOURCE_NAME_WS1, prop.getResource());\n         assertEquals(PropagationTaskExecStatus.SUBMITTED, prop.getStatus());\n@@ -1614,10 +1599,10 @@ public void isseSYNCOPE136Random() {\n         assertNotNull(userTO);\n \n         // 3. verify that propagation was successful\n-        List<PropagationStatusTO> props = userTO.getPropagationStatusTOs();\n+        List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n         assertNotNull(props);\n         assertEquals(1, props.size());\n-        PropagationStatusTO prop = props.iterator().next();\n+        PropagationStatus prop = props.iterator().next();\n         assertNotNull(prop);\n         assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n@@ -1675,7 +1660,7 @@ public void bulkActions() {\n         assertEquals(11, bulkAction.getTargets().size());\n \n         bulkAction.setOperation(BulkAction.Type.SUSPEND);\n-        BulkActionRes res = userService.bulk(bulkAction);\n+        BulkActionResult res = userService.bulk(bulkAction);\n         assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n         assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n         assertEquals(\"suspended\", userService.read(\n@@ -1870,7 +1855,7 @@ public void unlink() {\n \n         actual = userService.associate(actual.getId(),\n                 ResourceAssociationActionType.UNLINK,\n-                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceNameTO.class)).\n+                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class)).\n                 readEntity(UserTO.class);\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n@@ -1904,7 +1889,7 @@ public void unassign() {\n \n         actual = userService.associate(actual.getId(),\n                 ResourceAssociationActionType.UNASSIGN,\n-                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceNameTO.class)).\n+                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class)).\n                 readEntity(UserTO.class);\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n@@ -1940,7 +1925,7 @@ public void deprovision() {\n \n         actual = userService.associate(actual.getId(),\n                 ResourceAssociationActionType.DEPROVISION,\n-                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceNameTO.class)).\n+                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class)).\n                 readEntity(UserTO.class);\n         assertNotNull(actual);\n         assertFalse(actual.getResources().isEmpty());"},{"sha":"f65fe73a2fd41a06159ea9d2922fec2fb3842086","filename":"core/src/test/java/org/apache/syncope/core/rest/UserWorkflowTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserWorkflowTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserWorkflowTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserWorkflowTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.junit.Assume;\n import org.junit.FixMethodOrder;"},{"sha":"2e320d3eb2939894e0910b70d716d51310bd44f9","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;"},{"sha":"88494a739009156f08a4a46fa5325a1665d33ec3","filename":"core/src/test/java/org/apache/syncope/core/rest/data/SearchCondConverterTest.java","status":"added","additions":165,"deletions":0,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondConverterTest.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.data;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.syncope.client.SyncopeClient;\n+import org.apache.syncope.common.search.SpecialAttr;\n+import org.apache.syncope.core.AbstractNonDAOTest;\n+import org.apache.syncope.core.persistence.dao.search.AttributableCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.dao.search.EntitlementCond;\n+import org.apache.syncope.core.persistence.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.dao.search.ResourceCond;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n+import org.junit.Test;\n+\n+public class SearchCondConverterTest extends AbstractNonDAOTest {\n+\n+    @Test\n+    public void eq() {\n+        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().is(\"username\").equalTo(\"rossini\").query();\n+        assertEquals(\"username==rossini\", fiqlExpression);\n+\n+        AttributableCond attrCond = new AttributableCond(AttributeCond.Type.EQ);\n+        attrCond.setSchema(\"username\");\n+        attrCond.setExpression(\"rossini\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void like() {\n+        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().is(\"username\").equalTo(\"ros*\").query();\n+        assertEquals(\"username==ros*\", fiqlExpression);\n+\n+        AttributeCond attrCond = new AttributableCond(AttributeCond.Type.LIKE);\n+        attrCond.setSchema(\"username\");\n+        attrCond.setExpression(\"ros%\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void isNull() {\n+        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().is(\"loginDate\").nullValue().query();\n+        assertEquals(\"loginDate==\" + SpecialAttr.NULL, fiqlExpression);\n+\n+        AttributeCond attrCond = new AttributeCond(AttributeCond.Type.ISNULL);\n+        attrCond.setSchema(\"loginDate\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void isNotNull() {\n+        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().is(\"loginDate\").notNullValue().query();\n+        assertEquals(\"loginDate!=\" + SpecialAttr.NULL, fiqlExpression);\n+\n+        AttributeCond attrCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n+        attrCond.setSchema(\"loginDate\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void roles() {\n+        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().hasRoles(1L).query();\n+        assertEquals(SpecialAttr.ROLES + \"==1\", fiqlExpression);\n+\n+        MembershipCond membCond = new MembershipCond();\n+        membCond.setRoleId(1L);\n+        SearchCond simpleCond = SearchCond.getLeafCond(membCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void resources() {\n+        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().hasResources(\"resource-ldap\").query();\n+        assertEquals(SpecialAttr.RESOURCES + \"==resource-ldap\", fiqlExpression);\n+\n+        ResourceCond resCond = new ResourceCond();\n+        resCond.setResourceName(\"resource-ldap\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(resCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void entitlements() {\n+        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().hasEntitlements(\"USER_LIST\").query();\n+        assertEquals(SpecialAttr.ENTITLEMENTS + \"==USER_LIST\", fiqlExpression);\n+\n+        EntitlementCond entCond = new EntitlementCond();\n+        entCond.setExpression(\"USER_LIST\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(entCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void and() {\n+        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query();\n+        assertEquals(\"fullname==*o*;fullname==*i*\", fiqlExpression);\n+\n+        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n+        fullnameLeafCond1.setSchema(\"fullname\");\n+        fullnameLeafCond1.setExpression(\"%o%\");\n+        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n+        fullnameLeafCond2.setSchema(\"fullname\");\n+        fullnameLeafCond2.setExpression(\"%i%\");\n+        SearchCond andCond = SearchCond.getAndCond(\n+                SearchCond.getLeafCond(fullnameLeafCond1),\n+                SearchCond.getLeafCond(fullnameLeafCond2));\n+\n+        assertEquals(andCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void or() {\n+        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"*o*\", \"*i*\", \"*ini\").query();\n+        assertEquals(\"fullname==*o*,fullname==*i*,fullname==*ini\", fiqlExpression);\n+\n+        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n+        fullnameLeafCond1.setSchema(\"fullname\");\n+        fullnameLeafCond1.setExpression(\"%o%\");\n+        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n+        fullnameLeafCond2.setSchema(\"fullname\");\n+        fullnameLeafCond2.setExpression(\"%i%\");\n+        AttributeCond fullnameLeafCond3 = new AttributeCond(AttributeCond.Type.LIKE);\n+        fullnameLeafCond3.setSchema(\"fullname\");\n+        fullnameLeafCond3.setExpression(\"%ini\");\n+        SearchCond orCond = SearchCond.getOrCond(\n+                SearchCond.getLeafCond(fullnameLeafCond1),\n+                SearchCond.getOrCond(\n+                        SearchCond.getLeafCond(fullnameLeafCond2),\n+                        SearchCond.getLeafCond(fullnameLeafCond3)));\n+\n+        assertEquals(orCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+}"},{"sha":"834794d04395d28383ad04eed7387f53d3c24995","filename":"core/src/test/java/org/apache/syncope/core/sync/TestSyncRule.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncRule.java?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -18,19 +18,19 @@\n  */\n package org.apache.syncope.core.sync;\n \n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n public class TestSyncRule implements SyncCorrelationRule {\n \n     @Override\n-    public NodeCond getSearchCond(ConnectorObject connObj) {\n+    public SearchCond getSearchCond(ConnectorObject connObj) {\n         AttributeCond cond = new AttributeCond();\n         cond.setSchema(\"email\");\n         cond.setType(AttributeCond.Type.EQ);\n         cond.setExpression(connObj.getName().getNameValue());\n \n-        return NodeCond.getLeafCond(cond);\n+        return SearchCond.getLeafCond(cond);\n     }\n }"},{"sha":"409207aa85270539dcbe423a835c1d391c82e75c","filename":"core/src/test/resources/content.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -842,8 +842,8 @@ under the License.\n         jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\"/>        \n       \n   <Notification id=\"1\" sender=\"test@syncope.apache.org\" subject=\"Test subject\" template=\"test\" selfAsRecipient=\"0\" traceLevel=\"ALL\"\n-                xmlAbout=\"%3Corg.apache.syncope.common.search.NodeCond%3E%0A++%3Ctype%3EAND%3C%2Ftype%3E%0A++%3CleftNodeCond%3E%0A++++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++++%3CattributeCond%3E%0A++++++%3Ctype%3ELIKE%3C%2Ftype%3E%0A++++++%3Cschema%3Efullname%3C%2Fschema%3E%0A++++++%3Cexpression%3E%25o%25%3C%2Fexpression%3E%0A++++%3C%2FattributeCond%3E%0A++%3C%2FleftNodeCond%3E%0A++%3CrightNodeCond%3E%0A++++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++++%3CattributeCond%3E%0A++++++%3Ctype%3ELIKE%3C%2Ftype%3E%0A++++++%3Cschema%3Efullname%3C%2Fschema%3E%0A++++++%3Cexpression%3E%25i%25%3C%2Fexpression%3E%0A++++%3C%2FattributeCond%3E%0A++%3C%2FrightNodeCond%3E%0A%3C%2Forg.apache.syncope.common.search.NodeCond%3E\"\n-                xmlRecipients=\"%3Corg.apache.syncope.common.search.NodeCond%3E%0A++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++%3CmembershipCond%3E%0A++++%3CroleId%3E7%3C%2FroleId%3E%0A++%3C%2FmembershipCond%3E%0A%3C%2Forg.apache.syncope.common.search.NodeCond%3E\"\n+                about=\"fullname==*o*;fullname==*i*\"\n+                recipients=\"$roles==7\"\n                 recipientAttrType=\"UserSchema\" recipientAttrName=\"email\"/>\n   <Notification_events Notification_id=\"1\" events=\"[CUSTOM]:[]:[]:[unexisting1]:[FAILURE]\"/>\n   <Notification_events Notification_id=\"1\" events=\"[CUSTOM]:[]:[]:[unexisting2]:[SUCCESS]\"/>"},{"sha":"280c5a073869685d782c739d2d7123ce9f953168","filename":"pom.xml","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","patch":"@@ -506,9 +506,9 @@ under the License.\n       </dependency>\n       \n       <dependency>\n-        <groupId>javax.validation</groupId>\n-        <artifactId>validation-api</artifactId>\n-        <version>1.0.0.GA</version>\n+        <groupId>org.apache.geronimo.specs</groupId>\n+        <artifactId>geronimo-validation_1.0_spec</artifactId>\n+        <version>1.1</version>\n       </dependency>\n       <dependency>\n         <groupId>org.apache.bval</groupId>\n@@ -868,10 +868,6 @@ under the License.\n \n   <repositories>\n \n-    <repository>\n-      <id>activiti</id>\n-      <url>https://artifacts.alfresco.com/nexus/content/groups/public/</url>\n-    </repository>\n     <repository>\n       <id>sonatype</id>\n       <url>https://oss.sonatype.org/content/repositories/snapshots</url>"}]}