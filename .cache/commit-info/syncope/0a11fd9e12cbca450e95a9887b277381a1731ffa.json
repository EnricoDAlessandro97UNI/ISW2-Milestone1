{"sha":"0a11fd9e12cbca450e95a9887b277381a1731ffa","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBhMTFmZDllMTJjYmNhNDUwZTk1YTk4ODdiMjc3MzgxYTE3MzFmZmE=","commit":{"author":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2014-05-21T11:14:12Z"},"committer":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2014-05-21T11:14:12Z"},"message":"Better password generation\n\n\nConflicts:\n\tcore/src/main/java/org/apache/syncope/core/connid/PasswordGenerator.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1596538 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"85669b60eabebd10b4f36ac72f1cba8c5deb5081","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/85669b60eabebd10b4f36ac72f1cba8c5deb5081"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0a11fd9e12cbca450e95a9887b277381a1731ffa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0a11fd9e12cbca450e95a9887b277381a1731ffa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0a11fd9e12cbca450e95a9887b277381a1731ffa","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0a11fd9e12cbca450e95a9887b277381a1731ffa/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"a82e9512b5bec411173cd0fde8dd1cff42d63501","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a82e9512b5bec411173cd0fde8dd1cff42d63501","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a82e9512b5bec411173cd0fde8dd1cff42d63501"}],"stats":{"total":70,"additions":37,"deletions":33},"files":[{"sha":"aa953c313f95d6a1b3a06a32099137a727b0d84c","filename":"core/src/main/java/org/apache/syncope/core/connid/PasswordGenerator.java","status":"modified","additions":20,"deletions":23,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a11fd9e12cbca450e95a9887b277381a1731ffa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a11fd9e12cbca450e95a9887b277381a1731ffa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java?ref=0a11fd9e12cbca450e95a9887b277381a1731ffa","patch":"@@ -20,7 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.lang.RandomStringUtils;\n+\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.types.PasswordPolicySpec;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n@@ -30,6 +30,7 @@\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.policy.PolicyPattern;\n import org.apache.syncope.core.util.InvalidPasswordPolicySpecException;\n+import org.apache.syncope.core.util.SecureRandomUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -41,7 +42,7 @@\n @Component\n public class PasswordGenerator {\n \n-    private static final String[] SPECIAL_CHARS = {\"\", \"!\", \"£\", \"%\", \"&\", \"(\", \")\", \"?\", \"#\", \"_\", \"$\"};\n+    private static final char[] SPECIAL_CHARS = {'!', '£', '%', '&', '(', ')', '?', '#', '$'};\n \n     @Autowired\n     private PolicyDAO policyDAO;\n@@ -216,56 +217,51 @@ private String generate(final PasswordPolicySpec policySpec) {\n         //filled empty chars\n         for (int firstEmptyChar = firstEmptyChar(generatedPassword);\n                 firstEmptyChar < generatedPassword.length - 1; firstEmptyChar++) {\n-            generatedPassword[firstEmptyChar] = RandomStringUtils.randomAlphabetic(1);\n+            generatedPassword[firstEmptyChar] = SecureRandomUtil.generateRandomLetter();\n         }\n \n         checkPrefixAndSuffix(generatedPassword, policySpec);\n \n         return StringUtils.join(generatedPassword);\n     }\n \n-    private int randomNumber(final int range) {\n-        int randomNumber = (int) (Math.random() * (range - 1));\n-        return randomNumber == 0 ? 1 : randomNumber;\n-    }\n-\n     private void checkStartChar(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n         if (policySpec.isMustStartWithAlpha()) {\n-            generatedPassword[0] = RandomStringUtils.randomAlphabetic(1);\n+            generatedPassword[0] = SecureRandomUtil.generateRandomLetter();\n         }\n         if (policySpec.isMustStartWithNonAlpha() || policySpec.isMustStartWithDigit()) {\n-            generatedPassword[0] = RandomStringUtils.randomNumeric(1);\n+            generatedPassword[0] = SecureRandomUtil.generateRandomNumber();\n         }\n         if (policySpec.isMustntStartWithAlpha()) {\n-            generatedPassword[0] = RandomStringUtils.randomNumeric(1);\n+            generatedPassword[0] = SecureRandomUtil.generateRandomNumber();\n \n         }\n         if (policySpec.isMustntStartWithDigit()) {\n-            generatedPassword[0] = RandomStringUtils.randomAlphabetic(1);\n+            generatedPassword[0] = SecureRandomUtil.generateRandomLetter();\n \n         }\n         if (policySpec.isMustntStartWithNonAlpha()) {\n-            generatedPassword[0] = RandomStringUtils.randomAlphabetic(1);\n+            generatedPassword[0] = SecureRandomUtil.generateRandomLetter();\n \n         }\n     }\n \n     private void checkEndChar(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n         if (policySpec.isMustEndWithAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = RandomStringUtils.randomAlphabetic(1);\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtil.generateRandomLetter();\n         }\n         if (policySpec.isMustEndWithNonAlpha() || policySpec.isMustEndWithDigit()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = RandomStringUtils.randomNumeric(1);\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtil.generateRandomNumber();\n         }\n \n         if (policySpec.isMustntEndWithAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = RandomStringUtils.randomNumeric(1);\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtil.generateRandomNumber();\n         }\n         if (policySpec.isMustntEndWithDigit()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = RandomStringUtils.randomAlphabetic(1);\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtil.generateRandomLetter();\n         }\n         if (policySpec.isMustntEndWithNonAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = RandomStringUtils.randomAlphabetic(1);\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtil.generateRandomLetter();\n \n         }\n     }\n@@ -282,26 +278,26 @@ private void checkRequired(final String[] generatedPassword, final PasswordPolic\n         if (policySpec.isDigitRequired()\n                 && !PolicyPattern.DIGIT.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n-            generatedPassword[firstEmptyChar(generatedPassword)] = RandomStringUtils.randomNumeric(1);\n+            generatedPassword[firstEmptyChar(generatedPassword)] = SecureRandomUtil.generateRandomNumber();\n         }\n \n         if (policySpec.isUppercaseRequired()\n                 && !PolicyPattern.ALPHA_UPPERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n-            generatedPassword[firstEmptyChar(generatedPassword)] = RandomStringUtils.randomAlphabetic(1).toUpperCase();\n+            generatedPassword[firstEmptyChar(generatedPassword)] = SecureRandomUtil.generateRandomLetter().toUpperCase();\n         }\n \n         if (policySpec.isLowercaseRequired()\n                 && !PolicyPattern.ALPHA_LOWERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n-            generatedPassword[firstEmptyChar(generatedPassword)] = RandomStringUtils.randomAlphabetic(1).toLowerCase();\n+            generatedPassword[firstEmptyChar(generatedPassword)] = SecureRandomUtil.generateRandomLetter().toLowerCase();\n         }\n \n         if (policySpec.isNonAlphanumericRequired()\n                 && !PolicyPattern.NON_ALPHANUMERIC.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n-            generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SPECIAL_CHARS[randomNumber(SPECIAL_CHARS.length - 1)];\n+            generatedPassword[firstEmptyChar(generatedPassword)] = \n+                SecureRandomUtil.generateRandomSpecialCharacter(SPECIAL_CHARS);\n         }\n     }\n \n@@ -318,4 +314,5 @@ private void checkPrefixAndSuffix(final String[] generatedPassword, final Passwo\n             }\n         }\n     }\n+    \n }"},{"sha":"860a1538eeb972ed18a09d42df3e44b6661da912","filename":"core/src/main/java/org/apache/syncope/core/util/SecureRandomUtil.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a11fd9e12cbca450e95a9887b277381a1731ffa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSecureRandomUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a11fd9e12cbca450e95a9887b277381a1731ffa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSecureRandomUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSecureRandomUtil.java?ref=0a11fd9e12cbca450e95a9887b277381a1731ffa","patch":"@@ -19,19 +19,26 @@\n package org.apache.syncope.core.util;\n \n import java.security.SecureRandom;\n-import java.util.Random;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n \n public class SecureRandomUtil {\n+    \n+    private static final SecureRandom RANDOM = new SecureRandom();\n \n     public static String generateRandomPassword(final int tokenLength) {\n-        Random random = new SecureRandom();\n-\n-        final String letters = \"abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ0123456789\";\n-\n-        String pw = \"\";\n-        for (int i = 0; i < tokenLength; i++) {\n-            pw += letters.charAt((int) (random.nextDouble() * letters.length()));\n-        }\n-        return pw;\n+        return RandomStringUtils.random(tokenLength, 0, 0, true, false, null, RANDOM);\n+    }\n+    \n+    public static String generateRandomLetter() {\n+        return RandomStringUtils.random(1, 0, 0, true, false, null, RANDOM);\n+    }\n+    \n+    public static String generateRandomNumber() {\n+        return RandomStringUtils.random(1, 0, 0, false, true, null, RANDOM);\n+    }\n+    \n+    public static String generateRandomSpecialCharacter(char[] characters) {\n+        return RandomStringUtils.random(1, 0, 0, false, false, characters, RANDOM);\n     }\n }"}]}