{"sha":"d5b5792269ed931100ac9b6526790253c4133763","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ1YjU3OTIyNjllZDkzMTEwMGFjOWI2NTI2NzkwMjUzYzQxMzM3NjM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-30T13:57:26Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-10T06:34:13Z"},"message":"[SYNCOPE-956] Core implementation","tree":{"sha":"5414bdc3287181e344d69d01f4dc70ac69a586c1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5414bdc3287181e344d69d01f4dc70ac69a586c1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d5b5792269ed931100ac9b6526790253c4133763","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d5b5792269ed931100ac9b6526790253c4133763","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d5b5792269ed931100ac9b6526790253c4133763","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d5b5792269ed931100ac9b6526790253c4133763/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e8e56d521fe35ba6d91d77004432ceb80b5ae62b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e8e56d521fe35ba6d91d77004432ceb80b5ae62b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e8e56d521fe35ba6d91d77004432ceb80b5ae62b"}],"stats":{"total":6733,"additions":4404,"deletions":2329},"files":[{"sha":"9ee78855413cfaf64e3719d3d12a4e3d88c6593b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/CommandClassScanner.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FCommandClassScanner.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FCommandClassScanner.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FCommandClassScanner.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.client.cli.commands.AbstractCommand;\n-import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n import org.springframework.core.type.filter.AnnotationTypeFilter;\n import org.springframework.util.ClassUtils;\n@@ -33,15 +32,16 @@ public CommandClassScanner() {\n         addIncludeFilter(new AnnotationTypeFilter(Command.class));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public final List<Class<? extends AbstractCommand>> getComponentClasses() throws IllegalArgumentException {\n         final String basePackage = \"org.apache.syncope.client.cli.commands\";\n         List<Class<? extends AbstractCommand>> classes = new ArrayList<>();\n-        for (final BeanDefinition candidate : findCandidateComponents(basePackage)) {\n-            @SuppressWarnings(\"unchecked\")\n-            final Class<? extends AbstractCommand> cls = (Class<? extends AbstractCommand>) ClassUtils.resolveClassName(\n-                    candidate.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n-            classes.add(cls);\n-        }\n+        findCandidateComponents(basePackage).stream().\n+                map(candidate -> (Class<? extends AbstractCommand>) ClassUtils.resolveClassName(\n+                candidate.getBeanClassName(), ClassUtils.getDefaultClassLoader())).\n+                forEachOrdered(cls -> {\n+                    classes.add(cls);\n+                });\n         return classes;\n     }\n }"},{"sha":"2e86c08f43b9a22214dfe115b89cd9c33160cd6b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/Input.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -107,9 +107,9 @@ public int parameterNumber() {\n \n     public String printCommandFields() {\n         final StringBuilder commandBuilder = new StringBuilder();\n-        for (final String commandField : commandFields) {\n+        commandFields.forEach(commandField -> {\n             commandBuilder.append(commandField).append(\" \");\n-        }\n+        });\n         return commandBuilder.toString();\n     }\n }"},{"sha":"dd0b32000d8267d0344dc57250d00d51445c1f07","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/CommonsResultManager.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -73,27 +73,27 @@ public String commandHelpMessage(final Class<?> name) {\n         return Messages.commandHelpMessage(name.getAnnotation(Command.class).name());\n     }\n \n-    protected void printConfiguration(final Collection<ConnConfProperty> configurationPropertys) {\n-        for (final ConnConfProperty configuration : configurationPropertys) {\n-            System.out.println(\"       name: \" + configuration.getSchema().getName());\n-            System.out.println(\"       values: \" + configuration.getValues());\n-            System.out.println(\"       type: \" + configuration.getSchema().getType());\n-            System.out.println(\"       display name: \" + configuration.getSchema().getDisplayName());\n-            System.out.println(\"       help message: \" + configuration.getSchema().getHelpMessage());\n-            System.out.println(\"       order: \" + configuration.getSchema().getOrder());\n-            System.out.println(\"       default values: \" + configuration.getSchema().getDefaultValues());\n-            System.out.println(\"       confidential: \" + configuration.getSchema().isConfidential());\n-            System.out.println(\"       required: \" + configuration.getSchema().isRequired());\n-            System.out.println(\"       overridable: \" + configuration.isOverridable());\n+    protected void printConfiguration(final Collection<ConnConfProperty> props) {\n+        props.forEach(prop -> {\n+            System.out.println(\"       name: \" + prop.getSchema().getName());\n+            System.out.println(\"       values: \" + prop.getValues());\n+            System.out.println(\"       type: \" + prop.getSchema().getType());\n+            System.out.println(\"       display name: \" + prop.getSchema().getDisplayName());\n+            System.out.println(\"       help message: \" + prop.getSchema().getHelpMessage());\n+            System.out.println(\"       order: \" + prop.getSchema().getOrder());\n+            System.out.println(\"       default values: \" + prop.getSchema().getDefaultValues());\n+            System.out.println(\"       confidential: \" + prop.getSchema().isConfidential());\n+            System.out.println(\"       required: \" + prop.getSchema().isRequired());\n+            System.out.println(\"       overridable: \" + prop.isOverridable());\n             System.out.println(\"\");\n-        }\n+        });\n     }\n \n     protected void printDetails(final String title, final Map<String, String> details) {\n         final Table.TableBuilder tableBuilder = new Table.TableBuilder(title).header(\"detail\").header(\"value\");\n-        for (final Map.Entry<String, String> entrySet : details.entrySet()) {\n+        details.entrySet().forEach(entrySet -> {\n             tableBuilder.rowValues(Arrays.asList(entrySet.getKey(), entrySet.getValue()));\n-        }\n+        });\n         tableBuilder.build().print();\n     }\n }"},{"sha":"971e10d4d2fddeaa77617a6ce16cf17440ccce79","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationResultManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -40,12 +40,12 @@ public void fromUpdate(final List<AttrTO> attrTOs) {\n \n     private void fromCommandToView(final String title, final List<AttrTO> attrTOs) {\n         final Table.TableBuilder tableBuilder = new Table.TableBuilder(title).header(\"attribute\").header(\"value\");\n-        for (final AttrTO attrTO : attrTOs) {\n+        attrTOs.forEach(attrTO -> {\n             String attrValue = attrTO.getValues().toString();\n             attrValue = attrValue.substring(0, attrValue.length() - 1);\n             attrValue = attrValue.substring(1, attrValue.length());\n             tableBuilder.rowValues(Arrays.asList(attrTO.getSchema(), attrValue));\n-        }\n+        });\n         tableBuilder.build().print();\n     }\n }"},{"sha":"6b7e91ea5f1b3c4ba45fbf890f7fa8c9d65b7e51","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/connector/ConnectorResultManager.java","status":"modified","additions":6,"deletions":19,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -26,17 +26,16 @@\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n-import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n \n public class ConnectorResultManager extends CommonsResultManager {\n \n     public void printConnectors(final List<ConnInstanceTO> connInstanceTOs) {\n         System.out.println(\"\");\n-        for (final ConnInstanceTO connInstanceTO : connInstanceTOs) {\n+        connInstanceTOs.forEach(connInstanceTO -> {\n             printConnector(connInstanceTO);\n-        }\n+        });\n     }\n \n     public void printConnector(final ConnInstanceTO connInstanceTO) {\n@@ -57,9 +56,9 @@ public void printConnector(final ConnInstanceTO connInstanceTO) {\n     }\n \n     private void printCapabilities(final Set<ConnectorCapability> capabilities) {\n-        for (final ConnectorCapability capability : capabilities) {\n+        capabilities.forEach(capability -> {\n             System.out.println(\"       - \" + capability.name());\n-        }\n+        });\n     }\n \n     private void printConfPool(final ConnPoolConfTO connPoolConfTO) {\n@@ -71,25 +70,13 @@ private void printConfPool(final ConnPoolConfTO connPoolConfTO) {\n     }\n \n     public void printBundles(final List<ConnBundleTO> connBundleTOs) {\n-        for (final ConnBundleTO connBundleTO : connBundleTOs) {\n+        connBundleTOs.forEach(connBundleTO -> {\n             System.out.println(\" > BUNDLE NAME: \" + connBundleTO.getBundleName());\n             System.out.println(\"    connector name: \" + connBundleTO.getConnectorName());\n             System.out.println(\"    display name: \" + connBundleTO.getDisplayName());\n             System.out.println(\"    location: \" + connBundleTO.getLocation());\n             System.out.println(\"    version: \" + connBundleTO.getVersion());\n-        }\n-    }\n-\n-    private void printConfPropSchema(final List<ConnConfPropSchema> connConfPropSchemas) {\n-        for (final ConnConfPropSchema connConfPropSchema : connConfPropSchemas) {\n-            System.out.println(\"       name: \" + connConfPropSchema.getName());\n-            System.out.println(\"       display name: \" + connConfPropSchema.getDisplayName());\n-            System.out.println(\"       help message: \" + connConfPropSchema.getHelpMessage());\n-            System.out.println(\"       type: \" + connConfPropSchema.getType());\n-            System.out.println(\"       order: \" + connConfPropSchema.getOrder());\n-            System.out.println(\"       default value: \" + connConfPropSchema.getDefaultValues().toString());\n-            System.out.println(\"\");\n-        }\n+        });\n     }\n \n     public void printConfigurationProperties(final Collection<ConnConfProperty> connConfPropertys) {"},{"sha":"23fad70d8a4102fce617d074fd698479e392ca7b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/domain/DomainResultManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -27,9 +27,9 @@ public class DomainResultManager extends CommonsResultManager {\n \n     public void printDomains(final List<DomainTO> domainTOs) {\n         System.out.println(\"\");\n-        for (final DomainTO domainTO : domainTOs) {\n+        domainTOs.forEach(domainTO -> {\n             printDomain(domainTO);\n-        }\n+        });\n     }\n \n     public void printDomain(final DomainTO domainTO) {"},{"sha":"6a5b5b5e75d81466bec2da0b5197516f7994dc07","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/entitlement/EntitlementResultManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -26,17 +26,17 @@ public class EntitlementResultManager extends CommonsResultManager {\n \n     public void toView(final Collection<String> entitlements) {\n         System.out.println(\"\");\n-        for (final String entitlement : entitlements) {\n+        entitlements.forEach(entitlement -> {\n             System.out.println(\"- \" + entitlement);\n-        }\n+        });\n         System.out.println(\"\");\n     }\n \n     public void rolesToView(final Collection<RoleTO> roles) {\n         System.out.println(\"\");\n-        for (final RoleTO role : roles) {\n+        roles.forEach(role -> {\n             printRole(role);\n-        }\n+        });\n     }\n \n     private void printRole(final RoleTO roleTO) {\n@@ -47,8 +47,8 @@ private void printRole(final RoleTO roleTO) {\n     }\n \n     private void printRealms(final Collection<String> realms) {\n-        for (final String realm : realms) {\n+        realms.forEach(realm -> {\n             System.out.println(\"       - \" + realm);\n-        }\n+        });\n     }\n }"},{"sha":"28e4002023cad17a452360bfac31685421af7e54","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/group/GroupResultManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -29,9 +29,9 @@ public class GroupResultManager extends CommonsResultManager {\n \n     public void printGroups(final List<GroupTO> groupTOs) {\n         System.out.println(\"\");\n-        for (final GroupTO groupTO : groupTOs) {\n+        groupTOs.forEach(groupTO -> {\n             printGroup(groupTO);\n-        }\n+        });\n     }\n \n     public void printGroup(final GroupTO groupTO) {\n@@ -54,15 +54,15 @@ public void printGroup(final GroupTO groupTO) {\n     }\n \n     private void printResources(final Set<String> resources) {\n-        for (final String resource : resources) {\n+        resources.forEach(resource -> {\n             System.out.println(\"      - \" + resource);\n-        }\n+        });\n     }\n \n     public void printAttributes(final Set<AttrTO> attributes) {\n-        for (final AttrTO attribute : attributes) {\n+        attributes.forEach(attribute -> {\n             printAttribute(attribute);\n-        }\n+        });\n     }\n \n     public void printAttribute(final AttrTO attribute) {"},{"sha":"f766f16f32d3f7ae2df0344bdeb6bdd6779474f2","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/Info.java","status":"modified","additions":102,"deletions":72,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,8 +18,11 @@\n  */\n package org.apache.syncope.client.cli.commands.info;\n \n+import java.util.Optional;\n import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -94,11 +97,14 @@ public void workflowAdapter() {\n     }\n \n     public void accountRules() {\n-        try {\n-            infoResultManager.printAccountRules(platformInfo.getAccountRules());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.ACCOUNT_RULE);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printAccountRules(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n@@ -111,115 +117,139 @@ public void connidLocations() {\n         }\n     }\n \n-    public void reconciliationFilterBuilders() {\n-        try {\n-            infoResultManager.printReconciliationFilterBuilders(platformInfo.getReconciliationFilterBuilders());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+    public void reconFilterBuilders() {\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.RECON_FILTER_BUILDER);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printReconFilterBuilders(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n     public void logicActions() {\n-        try {\n-            infoResultManager.printLogicActions(platformInfo.getLogicActions());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.LOGIC_ACTIONS);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printLogicActions(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n-    public void mappingItemTransformers() {\n-        try {\n-            infoResultManager.printMappingItemTransformers(platformInfo.getItemTransformers());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+    public void itemTransformers() {\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.ITEM_TRANSFORMER);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printItemTransformers(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n     public void passwordRules() {\n-        try {\n-            infoResultManager.printPasswordRules(platformInfo.getPasswordRules());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.PASSWORD_RULE);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printPasswordRules(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n     public void propagationActions() {\n-        try {\n-            infoResultManager.printPropagationActions(platformInfo.getPropagationActions());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.PROPAGATION_ACTIONS);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printPropagationActions(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n     public void pushActions() {\n-        try {\n-            infoResultManager.printPushActions(platformInfo.getPushActions());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n-        }\n-    }\n-\n-    public void pushCorrelationActions() {\n-        try {\n-            infoResultManager.printCorrelationActions(platformInfo.getPushCorrelationRules());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.PUSH_ACTIONS);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printPushActions(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n     public void reportletConfs() {\n-        try {\n-            infoResultManager.printReportletConfs(platformInfo.getReportletConfs());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.REPORTLET);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printReportletConfs(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n     public void pullActions() {\n-        try {\n-            infoResultManager.printPullActions(platformInfo.getPullActions());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.PULL_ACTIONS);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printPullActions(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n     public void pullCorrelationRules() {\n-        try {\n-            infoResultManager.printCorrelationRules(platformInfo.getPullCorrelationRules());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.PULL_CORRELATION_RULE);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printCorrelationRules(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n     public void taskJobs() {\n-        try {\n-            infoResultManager.printJobs(platformInfo.getTaskJobs());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.TASKJOB_DELEGATE);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printJobs(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n     public void validators() {\n-        try {\n-            infoResultManager.printValidators(platformInfo.getValidators());\n-        } catch (final Exception ex) {\n-            LOG.error(\"Information error\", ex);\n-            infoResultManager.genericError(ex.getMessage());\n+        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.VALIDATOR);\n+        if (info.isPresent()) {\n+            try {\n+                infoResultManager.printValidators(info.get().getClasses());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Information error\", ex);\n+                infoResultManager.genericError(ex.getMessage());\n+            }\n         }\n     }\n \n-    public void passwordGenerators() {\n+    public void passwordGenerator() {\n         try {\n             infoResultManager.printPasswordGenerator(platformInfo.getPasswordGenerator());\n         } catch (final Exception ex) {"},{"sha":"28559be44fe726a35be31c274bb4400eac2082e0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/InfoCommand.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoCommand.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -61,14 +61,14 @@ public void execute(final Input input) {\n             case CONNID_LOCATION:\n                 info.connidLocations();\n                 break;\n-            case RECONCILIATION_FILTER_BUILDERS:\n-                info.reconciliationFilterBuilders();\n+            case RECON_FILTER_BUILDERS:\n+                info.reconFilterBuilders();\n                 break;\n             case LOGIC_ACTIONS:\n                 info.logicActions();\n                 break;\n             case MAPPING_ITEM_TRANSFORMERS:\n-                info.mappingItemTransformers();\n+                info.itemTransformers();\n                 break;\n             case PASSWORD_RULES:\n                 info.passwordRules();\n@@ -79,9 +79,6 @@ public void execute(final Input input) {\n             case PUSH_ACTIONS:\n                 info.pushActions();\n                 break;\n-            case PUSH_CORRELATION_ACTIONS:\n-                info.pushCorrelationActions();\n-                break;\n             case REPORTLET_CONFS:\n                 info.reportletConfs();\n                 break;\n@@ -98,7 +95,7 @@ public void execute(final Input input) {\n                 info.validators();\n                 break;\n             case PASSWORD_GENERATOR:\n-                info.passwordGenerators();\n+                info.passwordGenerator();\n                 break;\n             case VIR_ATTR_CACHE:\n                 info.virAttrCache();\n@@ -128,13 +125,12 @@ private enum Options {\n         WORKFLOW_ADAPTER(\"--workflow-adapter-classes\"),\n         ACCOUNT_RULES(\"--account-rules-classes\"),\n         CONNID_LOCATION(\"--connid-locations\"),\n-        RECONCILIATION_FILTER_BUILDERS(\"--reconciliation-filter-builders\"),\n+        RECON_FILTER_BUILDERS(\"--reconciliation-filter-builders\"),\n         LOGIC_ACTIONS(\"--logic-actions\"),\n         MAPPING_ITEM_TRANSFORMERS(\"--mapping-item-transformers\"),\n         PASSWORD_RULES(\"--password-rules\"),\n         PROPAGATION_ACTIONS(\"--propagation-actions\"),\n         PUSH_ACTIONS(\"--push-actions\"),\n-        PUSH_CORRELATION_ACTIONS(\"--push-correlation-actions\"),\n         REPORTLET_CONFS(\"--reportletConfs\"),\n         SYNC_ACTIONS(\"--sync-actions\"),\n         SYNC_CORRELATION_RULES(\"--sync-correlation-rules\"),"},{"sha":"d19b0aeddae1aa5c92a36b10d77048fc07e17894","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/InfoResultManager.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -58,87 +58,87 @@ public void printWorkflowAdapter(final String anyObjectWorkflowAdapter,\n     }\n \n     public void printAccountRules(final Collection<String> rules) {\n-        for (final String accountRule : rules) {\n+        rules.forEach(accountRule -> {\n             genericMessage(\"Account rule: \" + accountRule);\n-        }\n+        });\n     }\n \n     public void printConnidLocations(final Collection<String> locations) {\n-        for (final String location : locations) {\n+        locations.forEach(location -> {\n             genericMessage(\"ConnId location: \" + location);\n-        }\n+        });\n     }\n \n-    public void printReconciliationFilterBuilders(final Collection<String> reconciliationFilterBuilders) {\n-        for (final String reconciliationFilterBuilder : reconciliationFilterBuilders) {\n+    public void printReconFilterBuilders(final Collection<String> reconFilterBuilders) {\n+        reconFilterBuilders.forEach(reconciliationFilterBuilder -> {\n             genericMessage(\"Reconciliation filter builder: \" + reconciliationFilterBuilder);\n-        }\n+        });\n     }\n \n     public void printLogicActions(final Collection<String> actions) {\n-        for (final String action : actions) {\n+        actions.forEach(action -> {\n             genericMessage(\"Logic action: \" + action);\n-        }\n+        });\n     }\n \n-    public void printMappingItemTransformers(final Collection<String> transformers) {\n-        for (final String tranformer : transformers) {\n+    public void printItemTransformers(final Collection<String> transformers) {\n+        transformers.forEach(tranformer -> {\n             genericMessage(\"Mapping item tranformer: \" + tranformer);\n-        }\n+        });\n     }\n \n     public void printPasswordRules(final Collection<String> rules) {\n-        for (final String rule : rules) {\n+        rules.forEach(rule -> {\n             genericMessage(\"Password rule: \" + rule);\n-        }\n+        });\n     }\n \n     public void printCorrelationRules(final Collection<String> rules) {\n-        for (final String rule : rules) {\n+        rules.forEach(rule -> {\n             genericMessage(\"Correlation rule: \" + rule);\n-        }\n+        });\n     }\n \n     public void printPropagationActions(final Collection<String> actions) {\n-        for (final String action : actions) {\n+        actions.forEach(action -> {\n             genericMessage(\"Propagation action: \" + action);\n-        }\n+        });\n     }\n \n     public void printPushActions(final Collection<String> actions) {\n-        for (final String action : actions) {\n+        actions.forEach(action -> {\n             genericMessage(\"Push action: \" + action);\n-        }\n+        });\n     }\n \n     public void printPullActions(final Collection<String> actions) {\n-        for (final String action : actions) {\n+        actions.forEach(action -> {\n             genericMessage(\"Sync action: \" + action);\n-        }\n+        });\n     }\n \n     public void printCorrelationActions(final Collection<String> actions) {\n-        for (final String action : actions) {\n+        actions.forEach(action -> {\n             genericMessage(\"Push correlation rule: \" + action);\n-        }\n+        });\n     }\n \n     public void printReportletConfs(final Collection<String> reportletConfs) {\n-        for (final String reportletConf : reportletConfs) {\n+        reportletConfs.forEach(reportletConf -> {\n             genericMessage(\"Reportlet conf: \" + reportletConf);\n-        }\n+        });\n     }\n \n     public void printJobs(final Collection<String> jobs) {\n-        for (final String job : jobs) {\n+        jobs.forEach(job -> {\n             genericMessage(\"Task job: \" + job);\n-        }\n+        });\n     }\n \n     public void printValidators(final Collection<String> validators) {\n-        for (final String validator : validators) {\n+        validators.forEach(validator -> {\n             genericMessage(\"Validator: \" + validator);\n-        }\n+        });\n     }\n \n     public void printPasswordGenerator(final String passwordGenerator) {"},{"sha":"327f8c082095cbcdeceb217d82b3481d8f8147cc","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -35,9 +35,9 @@ public class LoggerResultManager extends CommonsResultManager {\n \n     public void fromListMemoryAppenders(final List<String> memoryAppenders) {\n         final Table.TableBuilder tableBuilder = new Table.TableBuilder(\"list memory appenders\").header(\"appender\");\n-        for (final String appender : memoryAppenders) {\n+        memoryAppenders.forEach(appender -> {\n             tableBuilder.rowValues(Collections.singletonList(appender));\n-        }\n+        });\n         tableBuilder.build().print();\n     }\n \n@@ -76,9 +76,9 @@ private void fromCommandToView(\n             final List<LoggerTO> loggerTOs) {\n \n         final Table.TableBuilder tableBuilder = new Table.TableBuilder(title).header(\"logger\").header(secondHeader);\n-        for (final LoggerTO loggerTO : loggerTOs) {\n+        loggerTOs.forEach(loggerTO -> {\n             tableBuilder.rowValues(Arrays.asList(loggerTO.getKey(), loggerTO.getLevel().getLevel().name()));\n-        }\n+        });\n         tableBuilder.build().print();\n     }\n "},{"sha":"5e1740fc194fcf9eadd7fa0df8935912f4e7b0bb","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationResultManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -26,9 +26,9 @@ public class NotificationResultManager extends CommonsResultManager {\n \n     public void printNotifications(final List<NotificationTO> notificationTOs) {\n         System.out.println(\"\");\n-        for (final NotificationTO notificationTO : notificationTOs) {\n+        notificationTOs.forEach(notificationTO -> {\n             printNotification(notificationTO);\n-        }\n+        });\n     }\n \n     public void printNotification(final NotificationTO notificationTO) {"},{"sha":"11ec813f2a032094a2ff964dd863e7517cca0632","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,40 +31,40 @@ public class PolicyResultManager extends CommonsResultManager {\n \n     public void printPolicies(final List<AbstractPolicyTO> policyTOs) {\n         System.out.println(\"\");\n-        for (AbstractPolicyTO policyTO : policyTOs) {\n+        policyTOs.forEach(policyTO -> {\n             if (policyTO instanceof AccountPolicyTO) {\n                 printAccountPolicy((AccountPolicyTO) policyTO);\n             } else if (policyTO instanceof PasswordPolicyTO) {\n                 printPasswordPolicy((PasswordPolicyTO) policyTO);\n             } else if (policyTO instanceof PullPolicyTO) {\n                 printPullPolicy((PullPolicyTO) policyTO);\n             }\n-        }\n+        });\n     }\n \n     public void printPoliciesByType(final String policyTypeString, final List<AbstractPolicyTO> policyTOs) {\n         System.out.println(\"\");\n         final PolicyType policyType = PolicyType.valueOf(policyTypeString);\n         switch (policyType) {\n             case ACCOUNT:\n-                for (final AbstractPolicyTO policyTO : policyTOs) {\n+                policyTOs.forEach(policyTO -> {\n                     printAccountPolicy((AccountPolicyTO) policyTO);\n-                }\n+                });\n                 break;\n             case PASSWORD:\n-                for (final AbstractPolicyTO policyTO : policyTOs) {\n+                policyTOs.forEach(policyTO -> {\n                     printPasswordPolicy((PasswordPolicyTO) policyTO);\n-                }\n+                });\n                 break;\n             case PUSH:\n-                for (final AbstractPolicyTO policyTO : policyTOs) {\n+                policyTOs.forEach(policyTO -> {\n                     System.out.println(policyTO);\n-                }\n+                });\n                 break;\n             case PULL:\n-                for (final AbstractPolicyTO policyTO : policyTOs) {\n+                policyTOs.forEach(policyTO -> {\n                     printPullPolicy((PullPolicyTO) policyTO);\n-                }\n+                });\n                 break;\n             default:\n                 break;\n@@ -80,7 +80,7 @@ public void printAccountPolicy(final AccountPolicyTO policyTO) {\n         System.out.println(\"    max authentication attempts : \" + policyTO.getMaxAuthenticationAttempts());\n         System.out.println(\"    propagation suspension : \" + policyTO.isPropagateSuspension());\n         System.out.println(\"    RULES : \");\n-        System.out.println(\"       > class : \" + policyTO.getRuleConfs());\n+        System.out.println(\"       > class : \" + policyTO.getRules());\n         System.out.println(\"\");\n     }\n \n@@ -93,7 +93,7 @@ public void printPasswordPolicy(final PasswordPolicyTO policyTO) {\n         System.out.println(\"    history lenght : \" + policyTO.getHistoryLength());\n         System.out.println(\"    allow null password : \" + policyTO.isAllowNullPassword());\n         System.out.println(\"    RULES : \");\n-        System.out.println(\"       > class : \" + policyTO.getRuleConfs());\n+        System.out.println(\"       > class : \" + policyTO.getRules());\n         System.out.println(\"\");\n     }\n "},{"sha":"fb0bd18b7a8e6f2aef7d07f10a734bfb123fe980","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/question/QuestionResultManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fquestion%2FQuestionResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fquestion%2FQuestionResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fquestion%2FQuestionResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -26,9 +26,9 @@ public class QuestionResultManager extends CommonsResultManager {\n \n     public void printQuestions(final List<SecurityQuestionTO> questionTOs) {\n         System.out.println(\"\");\n-        for (final SecurityQuestionTO questionTO : questionTOs) {\n+        questionTOs.forEach(questionTO -> {\n             printQuestion(questionTO);\n-        }\n+        });\n     }\n \n     public void printQuestion(final SecurityQuestionTO securityQuestionTO) {"},{"sha":"b207450abd3742d1095c471f6435514dc8e468d7","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/realm/RealmResultManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frealm%2FRealmResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frealm%2FRealmResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frealm%2FRealmResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -27,16 +27,16 @@ public class RealmResultManager extends CommonsResultManager {\n \n     public void printRealms(final List<RealmTO> realmTOs) {\n         System.out.println(\"\");\n-        for (final RealmTO realmTO : realmTOs) {\n+        realmTOs.forEach(realmTO -> {\n             printRealm(realmTO);\n-        }\n+        });\n     }\n \n     private void printRealm(final RealmTO realmTO) {\n         System.out.println(\" > REALM KEY: \" + realmTO.getKey());\n         System.out.println(\"    name: \" + realmTO.getName());\n         System.out.println(\"    full path: \" + realmTO.getFullPath());\n-        System.out.println(\"    actions: \" + realmTO.getActionsClassNames());\n+        System.out.println(\"    actions: \" + realmTO.getActions());\n         System.out.println(\"    templates: \" + realmTO.getTemplates());\n         System.out.println(\"    parent key: \" + realmTO.getParent());\n         System.out.println(\"    account policy key: \" + realmTO.getAccountPolicy());"},{"sha":"4b693d7dccc8ac5e2c683c6c5d4706a911151c29","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportDetails.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDetails.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -44,12 +44,8 @@ public void details() {\n             try {\n                 final Map<String, String> details = new LinkedHashMap<>();\n                 final List<ReportTO> reportTOs = reportSyncopeOperations.list();\n-                int withoutExecutions = 0;\n-                for (final ReportTO reportTO : reportTOs) {\n-                    if (reportTO.getExecutions().isEmpty()) {\n-                        withoutExecutions++;\n-                    }\n-                }\n+                long withoutExecutions = reportTOs.stream().\n+                        filter(reportTO -> (reportTO.getExecutions().isEmpty())).count();\n                 details.put(\"Total numbers\", String.valueOf(reportTOs.size()));\n                 details.put(\"Never executed\", String.valueOf(withoutExecutions));\n                 reportResultManager.printDetails(details);"},{"sha":"7c737ccba218718698bbd9e73a55c9d7dcd8fffa","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportResultManager.java","status":"modified","additions":9,"deletions":23,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -21,8 +21,6 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n-import org.apache.syncope.common.lib.report.AbstractReportletConf;\n-import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -31,9 +29,9 @@ public class ReportResultManager extends CommonsResultManager {\n \n     public void printReports(final List<ReportTO> reportTOs) {\n         System.out.println(\"\");\n-        for (final ReportTO reportTO : reportTOs) {\n+        reportTOs.forEach((reportTO) -> {\n             printReport(reportTO);\n-        }\n+        });\n     }\n \n     private void printReport(final ReportTO reportTO) {\n@@ -44,44 +42,32 @@ private void printReport(final ReportTO reportTO) {\n         System.out.println(\"    start date: \" + reportTO.getStart());\n         System.out.println(\"    end date: \" + reportTO.getEnd());\n         System.out.println(\"    CONF:\");\n-        for (final AbstractReportletConf reportletConf : reportTO.getReportletConfs()) {\n-            printReportletConf(reportletConf);\n-        }\n+        reportTO.getReportlets().forEach(reportlet -> {\n+            System.out.println(\"       name: \" + reportlet);\n+        });\n         System.out.println(\"    EXECUTIONS:\");\n         printReportExecutions(reportTO.getExecutions());\n         System.out.println(\"\");\n     }\n \n-    private void printReportletConf(final AbstractReportletConf reportletConf) {\n-        if (reportletConf instanceof UserReportletConf) {\n-            final UserReportletConf userReportletConf = (UserReportletConf) reportletConf;\n-            System.out.println(\"       name: \" + userReportletConf.getName());\n-            System.out.println(\"       features: \" + userReportletConf.getFeatures());\n-            System.out.println(\"       plain attributes: \" + userReportletConf.getPlainAttrs());\n-            System.out.println(\"       derived attributes: \" + userReportletConf.getDerAttrs());\n-            System.out.println(\"       virtual attributes: \" + userReportletConf.getVirAttrs());\n-            System.out.println(\"       matching condition: \" + userReportletConf.getMatchingCond());\n-        }\n-    }\n-\n     public void printReportExecutions(final List<ExecTO> reportExecTOs) {\n-        for (final ExecTO reportExecTO : reportExecTOs) {\n+        reportExecTOs.forEach(reportExecTO -> {\n             System.out.println(\"       REPORT EXEC KEY: \" + reportExecTO.getKey());\n             System.out.println(\"       status: \" + reportExecTO.getStatus());\n             System.out.println(\"       message: \" + reportExecTO.getMessage());\n             System.out.println(\"       start date: \" + reportExecTO.getStart());\n             System.out.println(\"       end date: \" + reportExecTO.getEnd());\n             System.out.println(\"       report: \" + reportExecTO.getRefDesc());\n-        }\n+        });\n     }\n \n     public void printJobs(final List<JobTO> jobTOs) {\n-        for (final JobTO jobTO : jobTOs) {\n+        jobTOs.forEach(jobTO -> {\n             System.out.println(\"       REPORT: \" + jobTO.getRefDesc());\n             System.out.println(\"       start date: \" + jobTO.getStart());\n             System.out.println(\"       running: \" + jobTO.isRunning());\n             System.out.println(\"       scheduled: \" + jobTO.isScheduled());\n-        }\n+        });\n     }\n \n     public void printDetails(final Map<String, String> details) {"},{"sha":"4c772eedf18bc11f82f49920789f64f1a6669a9f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/resource/ResourceResultManager.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -30,9 +30,9 @@ public class ResourceResultManager extends CommonsResultManager {\n \n     public void printResources(final List<ResourceTO> resourceTOs) {\n         System.out.println(\"\");\n-        for (final ResourceTO resourceTO : resourceTOs) {\n+        resourceTOs.forEach(resourceTO -> {\n             printResource(resourceTO);\n-        }\n+        });\n     }\n \n     private void printResource(final ResourceTO resourceTO) {\n@@ -42,7 +42,7 @@ private void printResource(final ResourceTO resourceTO) {\n         System.out.println(\"    account policy key: \" + resourceTO.getAccountPolicy());\n         System.out.println(\"    password policy key: \" + resourceTO.getPasswordPolicy());\n         System.out.println(\"    pull policy key: \" + resourceTO.getPullPolicy());\n-        System.out.println(\"    propagation actions class: \" + resourceTO.getPropagationActionsClassNames());\n+        System.out.println(\"    propagation actions: \" + resourceTO.getPropagationActions());\n         System.out.println(\"    propagation priority: \" + resourceTO.getPropagationPriority());\n         System.out.println(\"    PROVISIONS:\");\n         printProvision(resourceTO.getProvisions());\n@@ -57,40 +57,40 @@ private void printResource(final ResourceTO resourceTO) {\n     }\n \n     private void printProvision(final List<ProvisionTO> provisionTOs) {\n-        for (final ProvisionTO provisionTO : provisionTOs) {\n+        provisionTOs.forEach(provisionTO -> {\n             System.out.println(\"       provision key: \" + provisionTO.getKey());\n             System.out.println(\"       any type: \" + provisionTO.getAnyType());\n             System.out.println(\"       object class: \" + provisionTO.getObjectClass());\n             System.out.println(\"       sync token: \" + provisionTO.getSyncToken());\n             System.out.println(\"       virtual schema: \" + provisionTO.getVirSchemas());\n             System.out.println(\"       MAPPING: \");\n             printMapping(provisionTO.getMapping());\n-        }\n+        });\n     }\n \n     private void printMapping(final MappingTO mappingTO) {\n         System.out.println(\"          ConnObjectLink: \" + mappingTO.getConnObjectLink());\n         System.out.println(\"          MAPPING ITEM: \");\n-        printMappingItem(mappingTO.getItems());\n+        printItem(mappingTO.getItems());\n     }\n \n-    private void printMappingItem(final List<ItemTO> mappingItemTOs) {\n-        for (final ItemTO mappingItemTO : mappingItemTOs) {\n-            System.out.println(\"             mapping key: \" + mappingItemTO.getKey());\n-            System.out.println(\"             internal attribute name: \" + mappingItemTO.getIntAttrName());\n-            System.out.println(\"             external attribute name: \" + mappingItemTO.getExtAttrName());\n-            System.out.println(\"             mandatory condition: \" + mappingItemTO.getMandatoryCondition());\n+    private void printItem(final List<ItemTO> itemTOs) {\n+        itemTOs.forEach(itemTO -> {\n+            System.out.println(\"             mapping key: \" + itemTO.getKey());\n+            System.out.println(\"             internal attribute name: \" + itemTO.getIntAttrName());\n+            System.out.println(\"             external attribute name: \" + itemTO.getExtAttrName());\n+            System.out.println(\"             mandatory condition: \" + itemTO.getMandatoryCondition());\n             System.out.println(\"             JEXL propagation transformer: \"\n-                    + mappingItemTO.getPropagationJEXLTransformer());\n+                    + itemTO.getPropagationJEXLTransformer());\n             System.out.println(\"             JEXL pull transformer: \"\n-                    + mappingItemTO.getPullJEXLTransformer());\n-            System.out.println(\"             transformers classes: \"\n-                    + mappingItemTO.getTransformerClassNames());\n-            System.out.println(\"             purpose: \" + mappingItemTO.getPurpose());\n-            System.out.println(\"             connector object key: \" + mappingItemTO.isConnObjectKey());\n-            System.out.println(\"             password: \" + mappingItemTO.isPassword());\n+                    + itemTO.getPullJEXLTransformer());\n+            System.out.println(\"             transformers: \"\n+                    + itemTO.getTransformers());\n+            System.out.println(\"             purpose: \" + itemTO.getPurpose());\n+            System.out.println(\"             connector object key: \" + itemTO.isConnObjectKey());\n+            System.out.println(\"             password: \" + itemTO.isPassword());\n             System.out.println(\"\");\n-        }\n+        });\n     }\n \n     public void printDetails(final Map<String, String> details) {"},{"sha":"0fd28676225917881fdfcc5430fe76db98442a06","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/role/RoleDetails.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleDetails.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -44,12 +44,8 @@ public void details() {\n             try {\n                 final Map<String, String> details = new LinkedHashMap<>();\n                 final List<RoleTO> roleTOs = roleSyncopeOperations.list();\n-                int withoutEntitlements = 0;\n-                for (final RoleTO roleTO : roleTOs) {\n-                    if (roleTO.getEntitlements() == null || roleTO.getEntitlements().isEmpty()) {\n-                        withoutEntitlements++;\n-                    }\n-                }\n+                long withoutEntitlements = roleTOs.stream().\n+                        filter(roleTO -> roleTO.getEntitlements().isEmpty()).count();\n                 details.put(\"Total number\", String.valueOf(roleTOs.size()));\n                 details.put(\"Without entitlements\", String.valueOf(withoutEntitlements));\n                 roleResultManager.printDetails(details);"},{"sha":"158f26d050789bc3250b822c367f34fb0792090c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/role/RoleResultManager.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -28,9 +28,9 @@ public class RoleResultManager extends CommonsResultManager {\n \n     public void printRoles(final List<RoleTO> roleTOs) {\n         System.out.println(\"\");\n-        for (final RoleTO roleTO : roleTOs) {\n+        roleTOs.forEach(roleTO -> {\n             printRole(roleTO);\n-        }\n+        });\n     }\n \n     private void printRole(final RoleTO roleTO) {\n@@ -42,17 +42,17 @@ private void printRole(final RoleTO roleTO) {\n         System.out.println(\"    dynamic membership condition: \" + roleTO.getDynMembershipCond());\n         System.out.println(\"\");\n     }\n-    \n+\n     private void printRealms(final List<String> realms) {\n-        for (final String realm : realms) {\n+        realms.forEach(realm -> {\n             System.out.println(\"       - \" + realm);\n-        }\n+        });\n     }\n \n     private void printEntitlements(final Set<String> entitlements) {\n-        for (final String entitlement : entitlements) {\n+        entitlements.forEach(entitlement -> {\n             System.out.println(\"       - \" + entitlement);\n-        }\n+        });\n     }\n \n     public void printDetails(final Map<String, String> details) {"},{"sha":"95d562867a51e0d7a5bcce201eda373f1cc6486d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaResultManager.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -49,9 +49,9 @@ public void toView(final String schemaTypeString, final List<? extends AbstractS\n \n     private void printPlainSchemasDetailed(final List<? extends AbstractSchemaTO> schemaTOs) {\n         System.out.println(\"\");\n-        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+        schemaTOs.forEach(schemaTO -> {\n             printPlanSchemaDetailed((PlainSchemaTO) schemaTO);\n-        }\n+        });\n     }\n \n     private void printPlanSchemaDetailed(final PlainSchemaTO schemaTO) {\n@@ -70,34 +70,34 @@ private void printPlanSchemaDetailed(final PlainSchemaTO schemaTO) {\n     public void printPlainSchemas(final List<? extends AbstractSchemaTO> schemaTOs) {\n         final Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"plain schemas\").header(\"schema key\").header(\"type\").header(\"mandatory\");\n-        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+        schemaTOs.forEach(schemaTO -> {\n             tableBuilder.rowValues(Arrays.asList(\n                     ((PlainSchemaTO) schemaTO).getKey(),\n                     ((PlainSchemaTO) schemaTO).getType().toString(),\n                     ((PlainSchemaTO) schemaTO).getMandatoryCondition()));\n-        }\n+        });\n         tableBuilder.build().print();\n     }\n \n     public void fromListDerived(final List<? extends AbstractSchemaTO> schemaTOs) {\n         final Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"derived schemas\").header(\"schema key\").header(\"expression\");\n-        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+        schemaTOs.forEach(schemaTO -> {\n             tableBuilder.rowValues(Arrays.asList(\n                     ((DerSchemaTO) schemaTO).getKey(),\n                     ((DerSchemaTO) schemaTO).getExpression()));\n-        }\n+        });\n         tableBuilder.build().print();\n     }\n \n     public void fromListVirtual(final List<? extends AbstractSchemaTO> schemaTOs) {\n         final Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"virtual schemas\").header(\"schema key\").header(\"readonly\");\n-        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+        schemaTOs.forEach(schemaTO -> {\n             tableBuilder.rowValues(Arrays.asList(\n                     ((VirSchemaTO) schemaTO).getKey(),\n                     String.valueOf(((VirSchemaTO) schemaTO).isReadonly())));\n-        }\n+        });\n         tableBuilder.build().print();\n     }\n "},{"sha":"4e875660708cfd94b079079328199b0a6e26bafc","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskDetails.java","status":"modified","additions":13,"deletions":29,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -63,45 +63,29 @@ public void details() {\n                 final int propagationTaskSize = propagationTaskTOs.size();\n                 final int pushTaskSize = pushTaskTOs.size();\n                 final int scheduledTaskSize = scheduledTaskTOs.size();\n-                int scheduledNotExecuted = 0;\n                 final int pullTaskSize = pullTaskTOs.size();\n                 final int jobsSize = jobTOs.size();\n \n-                int notificationNotExecuted = 0;\n-                for (final AbstractTaskTO notificationTaskTO : notificationTaskTOs) {\n-                    if (!((NotificationTaskTO) notificationTaskTO).isExecuted()) {\n-                        notificationNotExecuted++;\n-                    }\n-                }\n+                long notificationNotExecuted = notificationTaskTOs.stream().\n+                        filter(notificationTaskTO -> !((NotificationTaskTO) notificationTaskTO).isExecuted()).\n+                        count();\n \n-                int propagationNotExecuted = 0;\n-                for (final AbstractTaskTO propagationTaskTO : propagationTaskTOs) {\n-                    if (((PropagationTaskTO) propagationTaskTO).getExecutions() == null\n-                            || ((PropagationTaskTO) propagationTaskTO).getExecutions().isEmpty()) {\n-                        propagationNotExecuted++;\n-                    }\n-                }\n+                long propagationNotExecuted = propagationTaskTOs.stream().\n+                        filter(propagationTaskTO -> ((PropagationTaskTO) propagationTaskTO).getExecutions().isEmpty()).\n+                        count();\n \n-                int pushNotExecuted = 0;\n-                for (final AbstractTaskTO pushTaskTO : pushTaskTOs) {\n-                    if (((PushTaskTO) pushTaskTO).getExecutions() == null\n-                            || ((PushTaskTO) pushTaskTO).getExecutions().isEmpty()) {\n-                        pushNotExecuted++;\n-                    }\n-                }\n+                long pushNotExecuted = pushTaskTOs.stream().\n+                        filter(pushTaskTO -> ((PushTaskTO) pushTaskTO).getExecutions().isEmpty()).\n+                        count();\n \n-                for (final AbstractTaskTO scheduledTaskTO : scheduledTaskTOs) {\n-                    if (((SchedTaskTO) scheduledTaskTO).getExecutions() == null\n-                            || ((SchedTaskTO) scheduledTaskTO).getExecutions().isEmpty()) {\n-                        scheduledNotExecuted++;\n-                    }\n-                }\n+                long scheduledNotExecuted = scheduledTaskTOs.stream().\n+                        filter(scheduledTaskTO -> ((SchedTaskTO) scheduledTaskTO).getExecutions().isEmpty()).\n+                        count();\n \n                 int pullNotExecuted = 0;\n                 int pullFull = 0;\n                 for (final AbstractTaskTO pullTaskTO : pullTaskTOs) {\n-                    if (((PullTaskTO) pullTaskTO).getExecutions() == null\n-                            || ((PullTaskTO) pullTaskTO).getExecutions().isEmpty()) {\n+                    if (((PullTaskTO) pullTaskTO).getExecutions().isEmpty()) {\n                         pullNotExecuted++;\n                     }\n                     if (((PullTaskTO) pullTaskTO).getPullMode() == PullMode.FULL_RECONCILIATION) {"},{"sha":"d811edc4f7ecbf2b9c8c51e3cf3a7d440fc77dfe","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskResultManager.java","status":"modified","additions":27,"deletions":29,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -36,7 +36,7 @@ public class TaskResultManager extends CommonsResultManager {\n \n     public void printTasks(final List<AbstractTaskTO> taskTOs) {\n         System.out.println(\"\");\n-        for (final AbstractTaskTO taskTO : taskTOs) {\n+        taskTOs.forEach(taskTO -> {\n             if (taskTO instanceof NotificationTaskTO) {\n                 printNotificationTask((NotificationTaskTO) taskTO);\n             } else if (taskTO instanceof PropagationTaskTO) {\n@@ -48,36 +48,36 @@ public void printTasks(final List<AbstractTaskTO> taskTOs) {\n             } else if (taskTO instanceof PullTaskTO) {\n                 printPullTask((PullTaskTO) taskTO);\n             }\n-        }\n+        });\n     }\n \n     public void printTasksType(final String taskTypeString, final List<AbstractTaskTO> taskTOs) {\n         System.out.println(\"\");\n         switch (TaskType.valueOf(taskTypeString)) {\n             case NOTIFICATION:\n-                for (final AbstractTaskTO taskTO : taskTOs) {\n+                taskTOs.forEach(taskTO -> {\n                     printNotificationTask(((NotificationTaskTO) taskTO));\n-                }\n+                });\n                 break;\n             case PROPAGATION:\n-                for (final AbstractTaskTO taskTO : taskTOs) {\n+                taskTOs.forEach(taskTO -> {\n                     printPropagationTask((PropagationTaskTO) taskTO);\n-                }\n+                });\n                 break;\n             case PUSH:\n-                for (final AbstractTaskTO taskTO : taskTOs) {\n+                taskTOs.forEach(taskTO -> {\n                     printPushTask((PushTaskTO) taskTO);\n-                }\n+                });\n                 break;\n             case SCHEDULED:\n-                for (final AbstractTaskTO taskTO : taskTOs) {\n+                taskTOs.forEach(taskTO -> {\n                     printScheduledTask((SchedTaskTO) taskTO);\n-                }\n+                });\n                 break;\n             case PULL:\n-                for (final AbstractTaskTO taskTO : taskTOs) {\n+                taskTOs.forEach(taskTO -> {\n                     printPullTask((PullTaskTO) taskTO);\n-                }\n+                });\n                 break;\n             default:\n                 break;\n@@ -133,8 +133,8 @@ private void printPushTask(final PushTaskTO pushTaskTO) {\n         System.out.println(\"     next execution: \" + pushTaskTO.getNextExec());\n         System.out.println(\"     latest execution status: \" + pushTaskTO.getLatestExecStatus());\n         System.out.println(\"     filters: \" + pushTaskTO.getFilters());\n-        System.out.println(\"     delegate class: \" + pushTaskTO.getJobDelegateClassName());\n-        System.out.println(\"     action class: \" + pushTaskTO.getActionsClassNames());\n+        System.out.println(\"     delegate: \" + pushTaskTO.getJobDelegate());\n+        System.out.println(\"     actions: \" + pushTaskTO.getActions());\n         System.out.println(\"     matching rule: \" + pushTaskTO.getMatchingRule());\n         System.out.println(\"     not matching rule: \" + pushTaskTO.getUnmatchingRule());\n         printTaskExecTOs(pushTaskTO.getExecutions());\n@@ -151,7 +151,7 @@ private void printScheduledTask(final SchedTaskTO schedTaskTO) {\n         System.out.println(\"     last execution: \" + schedTaskTO.getLastExec());\n         System.out.println(\"     next execution: \" + schedTaskTO.getNextExec());\n         System.out.println(\"     latest execution status: \" + schedTaskTO.getLatestExecStatus());\n-        System.out.println(\"     job delegate class: \" + schedTaskTO.getJobDelegateClassName());\n+        System.out.println(\"     job delegate: \" + schedTaskTO.getJobDelegate());\n         printTaskExecTOs(schedTaskTO.getExecutions());\n         System.out.println(\"\");\n     }\n@@ -175,27 +175,25 @@ private void printPullTask(final PullTaskTO pullTaskTO) {\n         System.out.println(\"     next execution: \" + pullTaskTO.getNextExec());\n         System.out.println(\"     last execution: \" + pullTaskTO.getLastExec());\n         System.out.println(\"     latest execution status: \" + pullTaskTO.getLatestExecStatus());\n-        System.out.println(\"     job delegate class: \" + pullTaskTO.getJobDelegateClassName());\n-        System.out.println(\"     action class name: \" + pullTaskTO.getActionsClassNames());\n+        System.out.println(\"     job delegate: \" + pullTaskTO.getJobDelegate());\n+        System.out.println(\"     actions: \" + pullTaskTO.getActions());\n         System.out.println(\"     matching rule: \" + pullTaskTO.getMatchingRule());\n         System.out.println(\"     unmatching rule: \" + pullTaskTO.getUnmatchingRule());\n         printTaskExecTOs(pullTaskTO.getExecutions());\n         System.out.println(\"\");\n     }\n \n     private void printTemplates(final Map<String, AnyTO> templates) {\n-        for (final Map.Entry<String, AnyTO> entrySet : templates.entrySet()) {\n-            final String key = entrySet.getKey();\n-            final AnyTO value = entrySet.getValue();\n-            System.out.println(\"        \" + key + \" key: \" + value.getKey()\n-                    + \" of realm\" + value.getRealm()\n-                    + \" on resource \" + value.getResources());\n-\n-        }\n+        templates.entrySet().forEach(entrySet -> {\n+            System.out.println(\"        \"\n+                    + entrySet.getKey() + \" key: \" + entrySet.getValue().getKey()\n+                    + \" of realm\" + entrySet.getValue().getRealm()\n+                    + \" on resource \" + entrySet.getValue().getResources());\n+        });\n     }\n \n     public void printTaskExecTOs(final List<ExecTO> taskExecTOs) {\n-        for (final ExecTO taskExecTO : taskExecTOs) {\n+        taskExecTOs.forEach(taskExecTO -> {\n             System.out.println(\"     EXECUTIONS: \");\n             System.out.println(\"     - task execution key: \" + taskExecTO.getKey());\n             System.out.println(\"       task: \" + taskExecTO.getRefDesc());\n@@ -207,16 +205,16 @@ public void printTaskExecTOs(final List<ExecTO> taskExecTOs) {\n             System.out.println(\"       start date: \" + taskExecTO.getStart());\n             System.out.println(\"       end date: \" + taskExecTO.getEnd());\n             System.out.println(\"\");\n-        }\n+        });\n     }\n \n     public void printJobs(final List<JobTO> jobTOs) {\n-        for (final JobTO jobTO : jobTOs) {\n+        jobTOs.forEach(jobTO -> {\n             System.out.println(\"       TASK: \" + jobTO.getRefDesc());\n             System.out.println(\"       start date: \" + jobTO.getStart());\n             System.out.println(\"       running: \" + jobTO.isRunning());\n             System.out.println(\"       scheduled: \" + jobTO.isScheduled());\n-        }\n+        });\n     }\n \n     public void printDetails(final Map<String, String> details) {"},{"sha":"cbd0eb510b1925a81e72103d3a042e3957532d64","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -85,9 +85,9 @@ public Map<String, BulkActionResult.Status> deleteAll(final String realm) {\n     private Map<String, BulkActionResult.Status> deleteBulk(final List<UserTO> users) {\n         final BulkAction bulkAction = new BulkAction();\n         bulkAction.setType(BulkAction.Type.DELETE);\n-        for (UserTO user : users) {\n-            bulkAction.getTargets().add(String.valueOf(user.getKey()));\n-        }\n+        users.forEach(user -> {\n+            bulkAction.getTargets().add(user.getKey());\n+        });\n         final BulkActionResult bulkResult = userService.bulk(bulkAction).readEntity(BulkActionResult.class);\n         return bulkResult.getResults();\n     }"},{"sha":"01703ca2f9e57ed925d5c6a4a85cff85b6391a1d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/util/CommandUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -75,9 +75,9 @@ public static String[] fromEnumToArray(final Class<? extends Enum<?>> enumClass)\n     public static String helpMessage(final String command, final List<String> options) {\n         final StringBuilder helpMessageBuilder = new StringBuilder(String.format(\"%nUsage: %s [options]%n\", command));\n         helpMessageBuilder.append(\"  Options:\\n\");\n-        for (final String option : options) {\n+        options.forEach(option -> {\n             helpMessageBuilder.append(\"    \").append(option).append(\"\\n\");\n-        }\n+        });\n         return helpMessageBuilder.toString();\n     }\n "},{"sha":"9264798c7aa8a17b368d98d2dc9090ff032828c3","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/view/Table.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FTable.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -95,13 +95,13 @@ private void initializeColumnSize() {\n             }\n         }\n \n-        for (final List<String> value : values) {\n+        values.forEach(value -> {\n             for (int j = 0; j < columnsSize.length; j++) {\n                 if (value.get(j) != null && value.get(j).length() > columnsSize[j]) {\n                     columnsSize[j] = value.get(j).length();\n                 }\n             }\n-        }\n+        });\n     }\n \n     private void countTableWidth() {\n@@ -146,7 +146,7 @@ private void printHeaders() {\n     private void printeContent() {\n         printColumnSpace();\n \n-        for (final List<String> value : values) {\n+        values.forEach(value -> {\n             for (int j = 0; j < columnsNumber; j++) {\n                 if (value.get(j) == null) {\n                     tmpValuesArray[j] = StringUtils.center(\"null\", columnsSize[j]);\n@@ -155,7 +155,7 @@ private void printeContent() {\n                 }\n             }\n             System.out.format(tableContentFormat, tmpValuesArray);\n-        }\n+        });\n \n         printColumnSpace();\n     }"},{"sha":"b8da090e53700235cf910cd2dfab4d61d7a4e0fc","filename":"client/cli/src/test/resources/log4j2.xml","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fcli%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,12 +19,19 @@ under the License.\n -->\n <configuration status=\"WARN\" shutdownHook=\"disable\">\n   <appenders>\n-    <console name=\"main\" target=\"SYSTEM_OUT\">\n+    <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/cli-test.log\"\n+                                 filePattern=\"${log.directory}/cli-test-%d{yyyy-MM-dd}.log.gz\"\n+                                 immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n         <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n       </PatternLayout>\n-    </console>\n+      <Policies>\n+        <TimeBasedTriggeringPolicy/>\n+        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n+      </Policies>\n+    </RollingRandomAccessFile>\n   </appenders>\n+\n   <loggers>    \n     <root level=\"ERROR\">\n       <appenderRef ref=\"main\"/>"},{"sha":"9e9097ab2307386b411fe961b3f23b4123d09a42","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -24,6 +24,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -43,12 +44,14 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.wicket.PageReference;\n@@ -329,8 +332,13 @@ public class Recipients extends WizardStep {\n \n             @Override\n             protected List<String> load() {\n-                return new ArrayList<>(\n-                        SyncopeConsoleSession.get().getPlatformInfo().getNotificationRecipientsProviders());\n+                Optional<JavaImplInfo> providers = SyncopeConsoleSession.get().getPlatformInfo().\n+                        getJavaImplInfo(ImplementationType.RECIPIENTS_PROVIDER);\n+                List<String> load = providers.isPresent()\n+                        ? new ArrayList<>(providers.get().getClasses())\n+                        : new ArrayList<>();\n+                Collections.sort(load);\n+                return load;\n             }\n         };\n "},{"sha":"ceff7411040db7e37f91058d3af28d09c7cfe44b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -24,6 +24,7 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -36,10 +37,12 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n@@ -238,7 +241,13 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected List<String> load() {\n-                return new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getValidators());\n+                Optional<JavaImplInfo> validators = SyncopeConsoleSession.get().getPlatformInfo().\n+                        getJavaImplInfo(ImplementationType.VALIDATOR);\n+                List<String> load = validators.isPresent()\n+                        ? new ArrayList<>(validators.get().getClasses())\n+                        : new ArrayList<>();\n+                Collections.sort(load);\n+                return load;\n             }\n         };\n         final AjaxDropDownChoicePanel<String> validatorClass = new AjaxDropDownChoicePanel<>(\"validatorClass\","},{"sha":"0c7c3dc1aeff8b0fcf1d5b33c32ad2c08b470de8","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RealmDetails.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,9 +19,10 @@\n package org.apache.syncope.client.console.panels;\n \n import java.util.ArrayList;\n-import java.util.LinkedHashMap;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n@@ -33,9 +34,10 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.PolicyRenderer;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n@@ -63,11 +65,8 @@ public class RealmDetails extends Panel {\n \n         @Override\n         protected Map<String, String> load() {\n-            Map<String, String> res = new LinkedHashMap<>();\n-            for (AbstractPolicyTO policyTO : policyRestClient.getPolicies(PolicyType.ACCOUNT)) {\n-                res.put(policyTO.getKey(), policyTO.getDescription());\n-            }\n-            return res;\n+            return policyRestClient.getPolicies(PolicyType.ACCOUNT).stream().\n+                    collect(Collectors.toMap(policyTO -> policyTO.getKey(), policyTO -> policyTO.getDescription()));\n         }\n     };\n \n@@ -77,11 +76,8 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            Map<String, String> res = new LinkedHashMap<>();\n-            for (AbstractPolicyTO policyTO : policyRestClient.getPolicies(PolicyType.PASSWORD)) {\n-                res.put(policyTO.getKey(), policyTO.getDescription());\n-            }\n-            return res;\n+            return policyRestClient.getPolicies(PolicyType.PASSWORD).stream().\n+                    collect(Collectors.toMap(policyTO -> policyTO.getKey(), policyTO -> policyTO.getDescription()));\n         }\n     };\n \n@@ -91,7 +87,13 @@ protected Map<String, String> load() {\n \n         @Override\n         protected List<String> load() {\n-            return new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getLogicActions());\n+            Optional<JavaImplInfo> actions = SyncopeConsoleSession.get().getPlatformInfo().\n+                    getJavaImplInfo(ImplementationType.LOGIC_ACTIONS);\n+            List<String> load = actions.isPresent()\n+                    ? new ArrayList<>(actions.get().getClasses())\n+                    : new ArrayList<>();\n+            Collections.sort(load);\n+            return load;\n         }\n     };\n "},{"sha":"8b066309d67f2195ca65094afa67f17d35e91a5f","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":14,"deletions":72,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -24,7 +24,6 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -34,7 +33,6 @@\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.panels.ModalPanel;\n-import org.apache.syncope.client.console.policies.PolicyRuleDirectoryPanel.PolicyRuleWrapper;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -44,12 +42,12 @@\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.ComposablePolicy;\n import org.apache.syncope.common.lib.policy.RuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.core.util.lang.PropertyResolver;\n import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n@@ -134,7 +132,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n                 PolicyRuleDirectoryPanel.this.getTogglePanel().close(target);\n                 send(PolicyRuleDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                new PolicyRuleWrapper().setConf(clone),\n+                                new PolicyRuleWrapper().setConf(clone).setName(null),\n                                 target));\n             }\n         }, ActionLink.ActionType.CLONE, StandardEntitlement.POLICY_CREATE);\n@@ -155,15 +153,16 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper ignore) {\n-                final RuleConf rule = model.getObject().getConf();\n+                RuleConf rule = model.getObject().getConf();\n                 try {\n-                    final T actual = restClient.getPolicy(policy);\n-                    List<RuleConf> conf = getRuleConf(actual);\n-                    conf.removeAll(conf.stream().\n-                            filter(object -> object.getName().equals(rule.getName())).collect(Collectors.toList()));\n-                    restClient.updatePolicy(actual);\n-                    SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n-                    customActionOnFinishCallback(target);\n+                    T actual = restClient.getPolicy(policy);\n+                    if (actual instanceof ComposablePolicy) {\n+                        ((ComposablePolicy) actual).getRules().remove(model.getObject().getImplementationKey());\n+                        restClient.updatePolicy(actual);\n+\n+                        SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n+                        customActionOnFinishCallback(target);\n+                    }\n                 } catch (SyncopeClientException e) {\n                     LOG.error(\"While deleting {}\", rule.getName(), e);\n                     SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n@@ -220,7 +219,7 @@ protected class PolicyRuleDataProvider extends DirectoryDataProvider<PolicyRuleW\n         public PolicyRuleDataProvider(final int paginatorRows) {\n             super(paginatorRows);\n \n-            //Default sorting\n+            // Default sorting\n             setSort(\"name\", SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n@@ -229,9 +228,7 @@ public PolicyRuleDataProvider(final int paginatorRows) {\n         public Iterator<PolicyRuleWrapper> iterator(final long first, final long count) {\n             final T actual = restClient.getPolicy(policy);\n \n-            final List<PolicyRuleWrapper> rules = getRuleConf(actual).stream().map(input\n-                    -> new PolicyRuleWrapper(input.getName()).setName(input.getName()).setConf(input)).\n-                    collect(Collectors.toList());\n+            List<PolicyRuleWrapper> rules = PolicyRuleWizardBuilder.getPolicyRuleWrappers(actual);\n \n             Collections.sort(rules, comparator);\n             return rules.subList((int) first, (int) (first + count)).iterator();\n@@ -240,7 +237,7 @@ public Iterator<PolicyRuleWrapper> iterator(final long first, final long count)\n         @Override\n         public long size() {\n             final T actual = restClient.getPolicy(policy);\n-            return getRuleConf(actual).size();\n+            return PolicyRuleWizardBuilder.getPolicyRuleWrappers(actual).size();\n         }\n \n         @Override\n@@ -249,61 +246,6 @@ public IModel<PolicyRuleWrapper> model(final PolicyRuleWrapper object) {\n         }\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private List<RuleConf> getRuleConf(final T policyTO) {\n-        Object res = PropertyResolver.getValue(\"ruleConfs\", policyTO);\n-        if (res instanceof List) {\n-            return (List<RuleConf>) res;\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public static class PolicyRuleWrapper implements Serializable {\n-\n-        private static final long serialVersionUID = 2472755929742424558L;\n-\n-        private String oldname;\n-\n-        private String name;\n-\n-        private RuleConf conf;\n-\n-        public PolicyRuleWrapper() {\n-            this(null);\n-        }\n-\n-        public PolicyRuleWrapper(final String name) {\n-            this.oldname = name;\n-        }\n-\n-        public boolean isNew() {\n-            return oldname == null;\n-        }\n-\n-        public String getOldName() {\n-            return this.oldname;\n-        }\n-\n-        public String getName() {\n-            return this.name;\n-        }\n-\n-        public PolicyRuleWrapper setName(final String name) {\n-            this.name = name;\n-            return this;\n-        }\n-\n-        public RuleConf getConf() {\n-            return conf;\n-        }\n-\n-        public PolicyRuleWrapper setConf(final RuleConf conf) {\n-            this.conf = conf;\n-            return this;\n-        }\n-    }\n-\n     @Override\n     public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);"},{"sha":"261604b6f2680c238acfb36c3425d537a60a6bd7","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":79,"deletions":24,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,34 +18,70 @@\n  */\n package org.apache.syncope.client.console.policies;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.BeanPanel;\n+import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.ComposablePolicy;\n import org.apache.syncope.common.lib.policy.RuleConf;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.core.util.lang.PropertyResolver;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n-import org.springframework.beans.BeanWrapper;\n-import org.springframework.beans.PropertyAccessorFactory;\n \n-public class PolicyRuleWizardBuilder\n-        extends AjaxWizardBuilder<PolicyRuleDirectoryPanel.PolicyRuleWrapper> {\n+public class PolicyRuleWizardBuilder extends AjaxWizardBuilder<PolicyRuleWrapper> {\n \n     private static final long serialVersionUID = 5945391813567245081L;\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private static final ImplementationRestClient IMPLEMENTATION_CLIENT = new ImplementationRestClient();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static List<PolicyRuleWrapper> getPolicyRuleWrappers(final AbstractPolicyTO policyTO) {\n+        Object rules = PropertyResolver.getValue(\"rules\", policyTO);\n+        if (rules instanceof List) {\n+            return ((List<String>) rules).stream().map(rule -> {\n+                ImplementationTO implementation = IMPLEMENTATION_CLIENT.read(rule);\n+\n+                PolicyRuleWrapper wrapper = null;\n+                if (implementation.getEngine() == ImplementationEngine.JAVA) {\n+                    try {\n+                        RuleConf ruleConf = MAPPER.readValue(implementation.getBody(), RuleConf.class);\n+                        wrapper = new PolicyRuleWrapper().\n+                                setImplementationKey(implementation.getKey()).\n+                                setName(ruleConf.getName());\n+                    } catch (Exception e) {\n+                        LOG.error(\"During deserialization\", e);\n+                    }\n+                }\n+\n+                return wrapper;\n+            }).filter(wrapper -> wrapper != null).collect(Collectors.toList());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n     private final PolicyRestClient restClient = new PolicyRestClient();\n \n     private final String policy;\n@@ -55,42 +91,53 @@\n     public PolicyRuleWizardBuilder(\n             final String policy,\n             final PolicyType type,\n-            final PolicyRuleDirectoryPanel.PolicyRuleWrapper reportlet,\n+            final PolicyRuleWrapper reportlet,\n             final PageReference pageRef) {\n         super(reportlet, pageRef);\n         this.policy = policy;\n         this.type = type;\n     }\n \n     @Override\n-    protected Serializable onApplyInternal(final PolicyRuleDirectoryPanel.PolicyRuleWrapper modelObject) {\n-        BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(modelObject.getConf());\n-        wrapper.setPropertyValue(\"name\", modelObject.getName());\n-\n+    protected Serializable onApplyInternal(final PolicyRuleWrapper modelObject) {\n         AbstractPolicyTO policyTO = restClient.getPolicy(policy);\n \n-        final ComposablePolicy<RuleConf> composable;\n+        ComposablePolicy composable;\n         if (policyTO instanceof ComposablePolicy) {\n-            composable = (ComposablePolicy<RuleConf>) policyTO;\n+            composable = (ComposablePolicy) policyTO;\n         } else {\n             throw new IllegalStateException(\"Non composable policy\");\n         }\n \n-        if (modelObject.isNew()) {\n-            composable.getRuleConfs().add(modelObject.getConf());\n-        } else {\n-            composable.getRuleConfs().removeAll(composable.getRuleConfs().stream().\n-                    filter(conf -> conf.getName().equals(modelObject.getOldName())).collect(Collectors.toList()));\n-            composable.getRuleConfs().add(modelObject.getConf());\n+        ImplementationTO rule = new ImplementationTO();\n+        rule.setKey(modelObject.getName());\n+        rule.setEngine(ImplementationEngine.JAVA);\n+        rule.setType(composable instanceof AccountPolicyTO\n+                ? ImplementationType.ACCOUNT_RULE : ImplementationType.PASSWORD_RULE);\n+        try {\n+            rule.setBody(MAPPER.writeValueAsString(modelObject.getConf()));\n+\n+            rule = IMPLEMENTATION_CLIENT.create(rule);\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Could not create rule\", e);\n+        }\n+\n+        if (!modelObject.isNew()) {\n+            List<PolicyRuleWrapper> wrappers = getPolicyRuleWrappers(policyTO);\n+            wrappers.removeAll(wrappers.stream().\n+                    filter(wrapper -> wrapper.getName().equals(modelObject.getOldName())).collect(Collectors.toSet()));\n+            composable.getRules().clear();\n+            composable.getRules().addAll(wrappers.stream().\n+                    map(PolicyRuleWrapper::getImplementationKey).collect(Collectors.toSet()));\n         }\n+        composable.getRules().add(rule.getKey());\n \n         restClient.updatePolicy(policyTO);\n         return modelObject;\n     }\n \n     @Override\n-    protected WizardModel buildModelSteps(\n-            final PolicyRuleDirectoryPanel.PolicyRuleWrapper modelObject, final WizardModel wizardModel) {\n+    protected WizardModel buildModelSteps(final PolicyRuleWrapper modelObject, final WizardModel wizardModel) {\n         wizardModel.add(new Profile(modelObject));\n         wizardModel.add(new Configuration(modelObject));\n         return wizardModel;\n@@ -100,8 +147,7 @@ public class Profile extends WizardStep {\n \n         private static final long serialVersionUID = -3043839139187792810L;\n \n-        public Profile(final PolicyRuleDirectoryPanel.PolicyRuleWrapper rule) {\n-\n+        public Profile(final PolicyRuleWrapper rule) {\n             final AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n                     \"name\", \"rule\", new PropertyModel<>(rule, \"name\"), false);\n             name.addRequiredLabel();\n@@ -131,14 +177,23 @@ public void setObject(final String object) {\n                 }\n             });\n \n+            Optional<JavaImplInfo> providers;\n             List<String> choices;\n             switch (type) {\n                 case ACCOUNT:\n-                    choices = new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getAccountRules());\n+                    providers = SyncopeConsoleSession.get().getPlatformInfo().\n+                            getJavaImplInfo(ImplementationType.ACCOUNT_RULE);\n+                    choices = providers.isPresent()\n+                            ? new ArrayList<>(providers.get().getClasses())\n+                            : new ArrayList<>();\n                     break;\n \n                 case PASSWORD:\n-                    choices = new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getPasswordRules());\n+                    providers = SyncopeConsoleSession.get().getPlatformInfo().\n+                            getJavaImplInfo(ImplementationType.PASSWORD_RULE);\n+                    choices = providers.isPresent()\n+                            ? new ArrayList<>(providers.get().getClasses())\n+                            : new ArrayList<>();\n                     break;\n \n                 default:\n@@ -159,7 +214,7 @@ public class Configuration extends WizardStep {\n \n         private final LoadableDetachableModel<Serializable> bean;\n \n-        public Configuration(final PolicyRuleDirectoryPanel.PolicyRuleWrapper rule) {\n+        public Configuration(final PolicyRuleWrapper rule) {\n             bean = new LoadableDetachableModel<Serializable>() {\n \n                 private static final long serialVersionUID = 2092144708018739371L;"},{"sha":"b05eabc4bb46a32a663c33cbe898f91d21f4f7d7","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWrapper.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWrapper.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.common.lib.policy.RuleConf;\n+\n+public class PolicyRuleWrapper implements Serializable {\n+\n+    private static final long serialVersionUID = 2472755929742424558L;\n+\n+    private String implementationKey;\n+\n+    private String oldname;\n+\n+    private String name;\n+\n+    private RuleConf conf;\n+\n+    public String getImplementationKey() {\n+        return implementationKey;\n+    }\n+\n+    public boolean isNew() {\n+        return oldname == null;\n+    }\n+\n+    public String getOldName() {\n+        return this.oldname;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public PolicyRuleWrapper setImplementationKey(final String implementationKey) {\n+        this.implementationKey = implementationKey;\n+        return this;\n+    }\n+\n+    public PolicyRuleWrapper setName(final String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public RuleConf getConf() {\n+        return conf;\n+    }\n+\n+    public PolicyRuleWrapper setConf(final RuleConf conf) {\n+        this.conf = conf;\n+        return this;\n+    }\n+}"},{"sha":"7cee8abebd52a99713480471b4706325a83995da","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -26,6 +26,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -40,10 +41,12 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -96,11 +99,10 @@ public List<CorrelationRule> getObject() {\n             @Override\n             public void setObject(final List<CorrelationRule> object) {\n                 policyTO.getSpecification().getCorrelationRules().clear();\n-                for (CorrelationRule rule : rules) {\n+                rules.forEach(rule -> {\n                     policyTO.getSpecification().getCorrelationRules().put(rule.getAny(), rule.getRule());\n-                }\n+                });\n             }\n-\n         };\n \n         add(new MultiPanel<CorrelationRule>(\"correlationRules\", \"correlationRules\", model) {\n@@ -159,9 +161,14 @@ public CorrelationRulePanel(final String id, final IModel<CorrelationRule> rule)\n             // ---------------------------------------------------------------\n             // Java rule palette\n             // ---------------------------------------------------------------\n+            Optional<JavaImplInfo> pullCorrelationRules = SyncopeConsoleSession.get().getPlatformInfo().\n+                    getJavaImplInfo(ImplementationType.PULL_CORRELATION_RULE);\n+            List<String> load = pullCorrelationRules.isPresent()\n+                    ? new ArrayList<>(pullCorrelationRules.get().getClasses())\n+                    : new ArrayList<>();\n+            Collections.sort(load);\n             final AjaxDropDownChoicePanel<String> javaRule = new AjaxDropDownChoicePanel<>(\n-                    \"javaRule\", \"rule.java\", new PropertyModel<String>(rule.getObject(), \"rule\")).setChoices(\n-                    new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getPullCorrelationRules()));\n+                    \"javaRule\", \"rule.java\", new PropertyModel<String>(rule.getObject(), \"rule\")).setChoices(load);\n             javaRule.setOutputMarkupPlaceholderTag(true);\n             add(javaRule.setVisible(\"JAVA\".equals(rule.getObject().getType())));\n             // ---------------------------------------------------------------"},{"sha":"721ab0e5f0dcd1dba4ec6c72a0f5a16d073ea6c7","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":6,"deletions":69,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,23 +22,17 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.panels.ModalPanel;\n-import org.apache.syncope.client.console.panels.search.SearchClause;\n-import org.apache.syncope.client.console.reports.ReportletDirectoryPanel.ReportletWrapper;\n import org.apache.syncope.client.console.rest.ReportRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -47,9 +41,7 @@\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.report.AbstractReportletConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -134,12 +126,11 @@ public ActionsPanel<ReportletWrapper> getActions(final IModel<ReportletWrapper>\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignore) {\n                 ReportletDirectoryPanel.this.getTogglePanel().close(target);\n-                AbstractReportletConf clone = SerializationUtils.clone(model.getObject().getConf());\n-                clone.setName(null);\n+                ReportletConf clone = SerializationUtils.clone(model.getObject().getConf());\n \n                 send(ReportletDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                new ReportletWrapper().setConf(clone),\n+                                new ReportletWrapper().setConf(clone).setName(null),\n                                 target));\n             }\n         }, ActionLink.ActionType.CLONE, StandardEntitlement.REPORT_CREATE);\n@@ -163,9 +154,9 @@ public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignor\n                 final ReportletConf reportlet = model.getObject().getConf();\n                 try {\n                     final ReportTO actual = restClient.read(report);\n-                    actual.getReportletConfs().removeAll(actual.getReportletConfs().stream().\n-                            filter(conf -> conf.getName().equals(reportlet.getName())).collect(Collectors.toList()));\n+                    actual.getReportlets().remove(model.getObject().getImplementationKey());\n                     restClient.update(actual);\n+\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     customActionOnFinishCallback(target);\n                 } catch (SyncopeClientException e) {\n@@ -233,9 +224,7 @@ public ReportDataProvider(final int paginatorRows) {\n         public Iterator<ReportletWrapper> iterator(final long first, final long count) {\n             final ReportTO actual = restClient.read(report);\n \n-            final List<ReportletWrapper> reportlets = actual.getReportletConfs().stream().\n-                    map(conf -> new ReportletWrapper(conf.getName()).setName(conf.getName()).setConf(conf)).\n-                    collect(Collectors.toList());\n+            List<ReportletWrapper> reportlets = ReportletWizardBuilder.getReportletWrappers(actual);\n \n             Collections.sort(reportlets, comparator);\n             return reportlets.subList((int) first, (int) (first + count)).iterator();\n@@ -244,7 +233,7 @@ public Iterator<ReportletWrapper> iterator(final long first, final long count) {\n         @Override\n         public long size() {\n             final ReportTO actual = restClient.read(report);\n-            return actual.getReportletConfs().size();\n+            return ReportletWizardBuilder.getReportletWrappers(actual).size();\n         }\n \n         @Override\n@@ -253,58 +242,6 @@ public IModel<ReportletWrapper> model(final ReportletWrapper object) {\n         }\n     }\n \n-    public static class ReportletWrapper implements Serializable {\n-\n-        private static final long serialVersionUID = 2472755929742424558L;\n-\n-        private String oldname;\n-\n-        private String name;\n-\n-        private AbstractReportletConf conf;\n-\n-        private final Map<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> scondWrapper;\n-\n-        public ReportletWrapper() {\n-            this(null);\n-        }\n-\n-        public ReportletWrapper(final String name) {\n-            this.oldname = name;\n-            this.scondWrapper = new HashMap<>();\n-        }\n-\n-        public boolean isNew() {\n-            return oldname == null;\n-        }\n-\n-        public String getOldName() {\n-            return this.oldname;\n-        }\n-\n-        public String getName() {\n-            return this.name;\n-        }\n-\n-        public ReportletWrapper setName(final String name) {\n-            this.name = name;\n-            return this;\n-        }\n-\n-        public AbstractReportletConf getConf() {\n-            return conf;\n-        }\n-\n-        public ReportletWrapper setConf(final AbstractReportletConf conf) {\n-            this.conf = conf;\n-            return this;\n-        }\n-\n-        public Map<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> getSCondWrapper() {\n-            return scondWrapper;\n-        }\n-    }\n-\n     @Override\n     public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);"},{"sha":"0355ce6259fd86e90ee1b72d4c053fd1dada88e4","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":65,"deletions":27,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,71 +18,104 @@\n  */\n package org.apache.syncope.client.console.reports;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.BeanPanel;\n-import org.apache.syncope.client.console.panels.search.SearchUtils;\n+import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.rest.ReportRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.report.AbstractReportletConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.model.PropertyModel;\n-import org.springframework.beans.BeanWrapper;\n-import org.springframework.beans.PropertyAccessorFactory;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n-public class ReportletWizardBuilder extends AjaxWizardBuilder<ReportletDirectoryPanel.ReportletWrapper> {\n+public class ReportletWizardBuilder extends AjaxWizardBuilder<ReportletWrapper> {\n \n     private static final long serialVersionUID = 5945391813567245081L;\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private static final ImplementationRestClient IMPLEMENTATION_CLIENT = new ImplementationRestClient();\n+\n+    public static List<ReportletWrapper> getReportletWrappers(final ReportTO reportTO) {\n+        return reportTO.getReportlets().stream().map(reportlet -> {\n+            ImplementationTO implementation = IMPLEMENTATION_CLIENT.read(reportlet);\n+\n+            ReportletWrapper wrapper = null;\n+            if (implementation.getEngine() == ImplementationEngine.JAVA) {\n+                try {\n+                    ReportletConf reportletCOnf = MAPPER.readValue(implementation.getBody(), ReportletConf.class);\n+                    wrapper = new ReportletWrapper().\n+                            setImplementationKey(implementation.getKey()).\n+                            setName(reportletCOnf.getName());\n+                } catch (Exception e) {\n+                    LOG.error(\"During deserialization\", e);\n+                }\n+            }\n+\n+            return wrapper;\n+        }).filter(wrapper -> wrapper != null).collect(Collectors.toList());\n+    }\n+\n     private final ReportRestClient restClient = new ReportRestClient();\n \n     private final String report;\n \n     public ReportletWizardBuilder(\n             final String report,\n-            final ReportletDirectoryPanel.ReportletWrapper reportlet,\n+            final ReportletWrapper reportlet,\n             final PageReference pageRef) {\n         super(reportlet, pageRef);\n         this.report = report;\n     }\n \n     @Override\n-    protected Serializable onApplyInternal(final ReportletDirectoryPanel.ReportletWrapper modelObject) {\n-        modelObject.getConf().setName(modelObject.getName());\n-\n-        final ReportTO reportTO = restClient.read(report);\n-\n-        if (modelObject.isNew()) {\n-            reportTO.getReportletConfs().add(modelObject.getConf());\n-        } else {\n-            reportTO.getReportletConfs().removeAll(\n-                    reportTO.getReportletConfs().stream().\n-                            filter(object -> object.getName().equals(modelObject.getOldName())).\n-                            collect(Collectors.toList()));\n-            reportTO.getReportletConfs().add(modelObject.getConf());\n+    protected Serializable onApplyInternal(final ReportletWrapper modelObject) {\n+        ImplementationTO reportlet = new ImplementationTO();\n+        reportlet.setKey(modelObject.getName());\n+        reportlet.setEngine(ImplementationEngine.JAVA);\n+        reportlet.setType(ImplementationType.REPORTLET);\n+        try {\n+            reportlet.setBody(MAPPER.writeValueAsString(modelObject.getConf()));\n+\n+            reportlet = IMPLEMENTATION_CLIENT.create(reportlet);\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Could not create reportlet\", e);\n         }\n \n-        BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(modelObject.getConf());\n-        modelObject.getSCondWrapper().entrySet().forEach(entry -> {\n-            wrapper.setPropertyValue(entry.getKey(),\n-                    SearchUtils.buildFIQL(entry.getValue().getRight(), entry.getValue().getLeft()));\n-        });\n+        ReportTO reportTO = restClient.read(report);\n+        if (!modelObject.isNew()) {\n+            List<ReportletWrapper> wrappers = getReportletWrappers(reportTO);\n+            wrappers.removeAll(wrappers.stream().\n+                    filter(wrapper -> wrapper.getName().equals(modelObject.getOldName())).collect(Collectors.toSet()));\n+            reportTO.getReportlets().clear();\n+            reportTO.getReportlets().addAll(wrappers.stream().\n+                    map(ReportletWrapper::getImplementationKey).collect(Collectors.toSet()));\n+        }\n+        reportTO.getReportlets().add(reportlet.getKey());\n \n         restClient.update(reportTO);\n         return modelObject;\n     }\n \n     @Override\n     protected WizardModel buildModelSteps(\n-            final ReportletDirectoryPanel.ReportletWrapper modelObject, final WizardModel wizardModel) {\n+            final ReportletWrapper modelObject, final WizardModel wizardModel) {\n         wizardModel.add(new Profile(modelObject));\n         wizardModel.add(new Configuration(modelObject));\n         return wizardModel;\n@@ -92,7 +125,7 @@ public class Profile extends WizardStep {\n \n         private static final long serialVersionUID = -3043839139187792810L;\n \n-        public Profile(final ReportletDirectoryPanel.ReportletWrapper reportlet) {\n+        public Profile(final ReportletWrapper reportlet) {\n \n             final AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n                     \"name\", \"reportlet\", new PropertyModel<>(reportlet, \"name\"), false);\n@@ -124,7 +157,12 @@ public void setObject(final String object) {\n                 }\n             });\n \n-            conf.setChoices(new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getReportletConfs()));\n+            Optional<JavaImplInfo> reportlets = SyncopeConsoleSession.get().getPlatformInfo().\n+                    getJavaImplInfo(ImplementationType.REPORTLET);\n+            List<String> choices = reportlets.isPresent()\n+                    ? new ArrayList<>(reportlets.get().getClasses())\n+                    : new ArrayList<>();\n+            conf.setChoices(choices);\n \n             conf.addRequiredLabel();\n             add(conf);\n@@ -135,7 +173,7 @@ public class Configuration extends WizardStep {\n \n         private static final long serialVersionUID = -785981096328637758L;\n \n-        public Configuration(final ReportletDirectoryPanel.ReportletWrapper reportlet) {\n+        public Configuration(final ReportletWrapper reportlet) {\n             final LoadableDetachableModel<Serializable> bean = new LoadableDetachableModel<Serializable>() {\n \n                 private static final long serialVersionUID = 2092144708018739371L;"},{"sha":"d6d1d775f488456dbbbe6edce1125cb86fbaffed","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWrapper.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWrapper.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.reports;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.client.console.panels.search.SearchClause;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n+\n+public class ReportletWrapper implements Serializable {\n+\n+    private static final long serialVersionUID = 2472755929742424558L;\n+\n+    private String implementationKey;\n+\n+    private String oldname;\n+\n+    private String name;\n+\n+    private ReportletConf conf;\n+\n+    private final Map<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> scondWrapper;\n+\n+    public ReportletWrapper() {\n+        this(null);\n+    }\n+\n+    public ReportletWrapper(final String name) {\n+        this.oldname = name;\n+        this.scondWrapper = new HashMap<>();\n+    }\n+\n+    public String getImplementationKey() {\n+        return implementationKey;\n+    }\n+\n+    public ReportletWrapper setImplementationKey(final String implementationKey) {\n+        this.implementationKey = implementationKey;\n+        return this;\n+    }\n+\n+    public boolean isNew() {\n+        return oldname == null;\n+    }\n+\n+    public String getOldName() {\n+        return this.oldname;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public ReportletWrapper setName(final String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public ReportletConf getConf() {\n+        return conf;\n+    }\n+\n+    public ReportletWrapper setConf(final ReportletConf conf) {\n+        this.conf = conf;\n+        return this;\n+    }\n+\n+    public Map<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> getSCondWrapper() {\n+        return scondWrapper;\n+    }\n+}"},{"sha":"2de2a546a973bf50ae6509395abb40f41d6ecb3a","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ImplementationRestClient.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import static org.apache.syncope.client.console.rest.BaseRestClient.getObject;\n+import static org.apache.syncope.client.console.rest.BaseRestClient.getService;\n+\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.rest.api.service.ImplementationService;\n+\n+public class ImplementationRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = -4111950555473526287L;\n+\n+    public ImplementationTO read(final String key) {\n+        return getService(ImplementationService.class).read(key);\n+    }\n+\n+    public ImplementationTO create(final ImplementationTO implementation) {\n+        ImplementationService service = getService(ImplementationService.class);\n+        Response response = service.create(implementation);\n+        return getObject(service, response.getLocation(), ImplementationTO.class);\n+    }\n+}"},{"sha":"a2c48fd7307d80c9df2b1d64b73eb341fe147645","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -72,9 +72,6 @@\n \n     private static final long serialVersionUID = 4984337552918213290L;\n \n-    private static final String GROUP_MEMBER_PROVISION_TASKJOB =\n-            \"org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate\";\n-\n     protected final Class<T> reference;\n \n     protected T schedTaskTO;\n@@ -213,11 +210,6 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                                         Model.of(Pair.of(\n                                                 ActionLink.ActionType.EDIT, model.getObject())))));\n             }\n-\n-            @Override\n-            protected boolean statusCondition(final T modelObject) {\n-                return !GROUP_MEMBER_PROVISION_TASKJOB.equals(taskTO.getJobDelegateClassName());\n-            }\n         }, ActionLink.ActionType.EDIT, StandardEntitlement.TASK_UPDATE);\n \n         panel.add(new ActionLink<T>() {\n@@ -249,11 +241,6 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                         model.getObject().getKey(), model.getObject().getName(), target);\n                 startAt.toggle(target, true);\n             }\n-\n-            @Override\n-            protected boolean statusCondition(final T modelObject) {\n-                return !GROUP_MEMBER_PROVISION_TASKJOB.equals(taskTO.getJobDelegateClassName());\n-            }\n         }, ActionLink.ActionType.EXECUTE, StandardEntitlement.TASK_EXECUTE);\n \n         addFurtherActions(panel, model);"},{"sha":"b940cf16331aa076623a01656d8cfd4c92404db1","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":31,"deletions":4,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -23,6 +23,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -34,11 +35,13 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.to.AbstractProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -116,7 +119,13 @@ public class Profile extends WizardStep {\n \n             @Override\n             protected List<String> load() {\n-                return new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getTaskJobs());\n+                Optional<JavaImplInfo> taskJobDelegates = SyncopeConsoleSession.get().getPlatformInfo().\n+                        getJavaImplInfo(ImplementationType.TASKJOB_DELEGATE);\n+                List<String> load = taskJobDelegates.isPresent()\n+                        ? new ArrayList<>(taskJobDelegates.get().getClasses())\n+                        : new ArrayList<>();\n+                Collections.sort(load);\n+                return load;\n             }\n         };\n \n@@ -127,7 +136,13 @@ protected List<String> load() {\n \n             @Override\n             protected List<String> load() {\n-                return new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getReconciliationFilterBuilders());\n+                Optional<JavaImplInfo> reconFilterBuilders = SyncopeConsoleSession.get().getPlatformInfo().\n+                        getJavaImplInfo(ImplementationType.RECON_FILTER_BUILDER);\n+                List<String> load = reconFilterBuilders.isPresent()\n+                        ? new ArrayList<>(reconFilterBuilders.get().getClasses())\n+                        : new ArrayList<>();\n+                Collections.sort(load);\n+                return load;\n             }\n         };\n \n@@ -137,7 +152,13 @@ protected List<String> load() {\n \n             @Override\n             protected List<String> load() {\n-                return new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getPullActions());\n+                Optional<JavaImplInfo> pullActions = SyncopeConsoleSession.get().getPlatformInfo().\n+                        getJavaImplInfo(ImplementationType.PULL_ACTIONS);\n+                List<String> load = pullActions.isPresent()\n+                        ? new ArrayList<>(pullActions.get().getClasses())\n+                        : new ArrayList<>();\n+                Collections.sort(load);\n+                return load;\n             }\n         };\n \n@@ -147,7 +168,13 @@ protected List<String> load() {\n \n             @Override\n             protected List<String> load() {\n-                return new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getPushActions());\n+                Optional<JavaImplInfo> pushActions = SyncopeConsoleSession.get().getPlatformInfo().\n+                        getJavaImplInfo(ImplementationType.PUSH_ACTIONS);\n+                List<String> load = pushActions.isPresent()\n+                        ? new ArrayList<>(pushActions.get().getClasses())\n+                        : new ArrayList<>();\n+                Collections.sort(load);\n+                return load;\n             }\n         };\n "},{"sha":"5478c61924fd9b22cb51b98c36af03454ca9d474","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -24,8 +24,8 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.panels.TogglePanel;\n-import org.apache.syncope.client.console.policies.PolicyRuleDirectoryPanel.PolicyRuleWrapper;\n-import org.apache.syncope.client.console.reports.ReportletDirectoryPanel.ReportletWrapper;\n+import org.apache.syncope.client.console.policies.PolicyRuleWrapper;\n+import org.apache.syncope.client.console.reports.ReportletWrapper;\n import org.apache.syncope.client.console.wizards.any.AnyWrapper;\n import org.apache.syncope.client.console.wizards.any.GroupWrapper;\n import org.apache.syncope.client.console.wizards.any.UserWrapper;"},{"sha":"fcdfebc13deb81e972a6bcdc80ee463e0f38ba4b","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ItemTransformerWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -56,7 +56,7 @@ protected IModel<List<String>> getLatestAlerts() {\n \n             @Override\n             public List<String> getObject() {\n-                return item.getTransformerClassNames();\n+                return item.getTransformers();\n             }\n         };\n     }"},{"sha":"9b10057dce5af75c5b5e1d572dd305ed2faa8b42","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.java","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,11 +22,14 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.TogglePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n@@ -55,13 +58,20 @@ protected List<String> load() {\n                 // [!] this is required to disable changed with close button\n                 return item == null\n                         ? Collections.<String>emptyList()\n-                        : new ArrayList<>(item.getTransformerClassNames());\n+                        : item.getTransformers();\n             }\n         };\n \n         Form<?> form = new Form<>(\"form\");\n         addInnerObject(form);\n \n+        Optional<JavaImplInfo> itemTransformers = SyncopeConsoleSession.get().getPlatformInfo().\n+                getJavaImplInfo(ImplementationType.ITEM_TRANSFORMER);\n+        List<String> choices = itemTransformers.isPresent()\n+                ? new ArrayList<>(itemTransformers.get().getClasses())\n+                : new ArrayList<>();\n+        Collections.sort(choices);\n+\n         form.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setRenderer(new IChoiceRenderer<String>() {\n \n             private static final long serialVersionUID = 3464376099975468136L;\n@@ -89,7 +99,7 @@ public String getObject(final String id, final IModel<? extends List<? extends S\n         }).build(\n                 \"classes\",\n                 model,\n-                new ListModel<>(new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getItemTransformers()))).\n+                new ListModel<>(choices)).\n                 hideLabel().setEnabled(true).setOutputMarkupId(true));\n \n         form.add(new AjaxSubmitLink(\"submit\", form) {\n@@ -101,8 +111,8 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 toggle(target, false);\n \n                 // [!] this is required to disable changed with close button\n-                item.getTransformerClassNames().clear();\n-                item.getTransformerClassNames().addAll(model.getObject());\n+                item.getTransformers().clear();\n+                item.getTransformers().addAll(model.getObject());\n \n                 target.add(container);\n             }"},{"sha":"9c24f9a1b1436ee92d349d9cb276317dc7e97db9","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,15 +20,19 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -49,7 +53,13 @@ public class ResourceDetailsPanel extends WizardStep {\n \n         @Override\n         protected List<String> load() {\n-            return new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getPropagationActions());\n+            Optional<JavaImplInfo> propagationActions = SyncopeConsoleSession.get().getPlatformInfo().\n+                    getJavaImplInfo(ImplementationType.PROPAGATION_ACTIONS);\n+            List<String> load = propagationActions.isPresent()\n+                    ? new ArrayList<>(propagationActions.get().getClasses())\n+                    : new ArrayList<>();\n+            Collections.sort(load);\n+            return load;\n         }\n     };\n "},{"sha":"82cd73bab4cbc8f6ae0128b37cd5627935e0dbe7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/JavaImplInfo.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FJavaImplInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FJavaImplInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FJavaImplInfo.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.info;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+\n+@XmlRootElement(name = \"javaImplInfo\")\n+@XmlType\n+public class JavaImplInfo extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 4036793959111794959L;\n+\n+    private ImplementationType type;\n+\n+    private final Set<String> classes = new HashSet<>();\n+\n+    public ImplementationType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final ImplementationType type) {\n+        this.type = type;\n+    }\n+\n+    @XmlElementWrapper(name = \"classes\")\n+    @XmlElement(name = \"class\")\n+    @JsonProperty(\"classes\")\n+    public Set<String> getClasses() {\n+        return classes;\n+    }\n+\n+}"},{"sha":"285425929e76fe99539646df0d92b562e486fd4e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/PlatformInfo.java","status":"modified","additions":12,"deletions":130,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,16 +18,19 @@\n  */\n package org.apache.syncope.common.lib.info;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n \n @XmlRootElement(name = \"platformInfo\")\n @XmlType\n@@ -77,35 +80,7 @@ public class PlatformInfo extends AbstractBaseBean {\n \n     private final Set<String> entitlements = new HashSet<>();\n \n-    private final Set<String> jwtSSOProviders = new HashSet<>();\n-\n-    private final Set<String> reportletConfs = new HashSet<>();\n-\n-    private final Set<String> accountRules = new HashSet<>();\n-\n-    private final Set<String> passwordRules = new HashSet<>();\n-\n-    private final Set<String> itemTransformers = new HashSet<>();\n-\n-    private final Set<String> taskJobs = new HashSet<>();\n-\n-    private final Set<String> reconciliationFilterBuilders = new HashSet<>();\n-\n-    private final Set<String> logicActions = new HashSet<>();\n-\n-    private final Set<String> propagationActions = new HashSet<>();\n-\n-    private final Set<String> pullActions = new HashSet<>();\n-\n-    private final Set<String> pushActions = new HashSet<>();\n-\n-    private final Set<String> pullCorrelationRules = new HashSet<>();\n-\n-    private final Set<String> pushCorrelationRules = new HashSet<>();\n-\n-    private final Set<String> validators = new HashSet<>();\n-\n-    private final Set<String> notificationRecipientsProviders = new HashSet<>();\n+    private final Set<JavaImplInfo> javaImplInfos = new HashSet<>();\n \n     public String getVersion() {\n         return version;\n@@ -217,109 +192,16 @@ public Set<String> getEntitlements() {\n         return entitlements;\n     }\n \n-    @XmlElementWrapper(name = \"jwtSSOProviders\")\n-    @XmlElement(name = \"jwtSSOProvider\")\n-    @JsonProperty(\"jwtSSOProviders\")\n-    public Set<String> getJwtSSOProviders() {\n-        return jwtSSOProviders;\n-    }\n-\n-    @XmlElementWrapper(name = \"reportletConfs\")\n-    @XmlElement(name = \"reportletConf\")\n-    @JsonProperty(\"reportletConfs\")\n-    public Set<String> getReportletConfs() {\n-        return reportletConfs;\n-    }\n-\n-    @XmlElementWrapper(name = \"accountRules\")\n-    @XmlElement(name = \"accountRule\")\n-    @JsonProperty(\"accountRules\")\n-    public Set<String> getAccountRules() {\n-        return accountRules;\n-    }\n-\n-    @XmlElementWrapper(name = \"passwordRules\")\n-    @XmlElement(name = \"passwordRule\")\n-    @JsonProperty(\"passwordRules\")\n-    public Set<String> getPasswordRules() {\n-        return passwordRules;\n-    }\n-\n-    @XmlElementWrapper(name = \"itemTransformers\")\n-    @XmlElement(name = \"itemTransformer\")\n-    @JsonProperty(\"itemTransformers\")\n-    public Set<String> getItemTransformers() {\n-        return itemTransformers;\n-    }\n-\n-    @XmlElementWrapper(name = \"taskJobs\")\n-    @XmlElement(name = \"taskJob\")\n-    @JsonProperty(\"taskJobs\")\n-    public Set<String> getTaskJobs() {\n-        return taskJobs;\n-    }\n-\n-    @XmlElementWrapper(name = \"reconciliationFilterBuilders\")\n-    @XmlElement(name = \"reconciliationFilterBuilder\")\n-    @JsonProperty(\"reconciliationFilterBuilders\")\n-    public Set<String> getReconciliationFilterBuilders() {\n-        return reconciliationFilterBuilders;\n-    }\n-\n-    @XmlElementWrapper(name = \"logicActions\")\n-    @XmlElement(name = \"logicAction\")\n-    @JsonProperty(\"logicActions\")\n-    public Set<String> getLogicActions() {\n-        return logicActions;\n-    }\n-\n-    @XmlElementWrapper(name = \"propagationActions\")\n-    @XmlElement(name = \"propagationAction\")\n-    @JsonProperty(\"propagationActions\")\n-    public Set<String> getPropagationActions() {\n-        return propagationActions;\n-    }\n-\n-    @XmlElementWrapper(name = \"pullActions\")\n-    @XmlElement(name = \"pullAction\")\n-    @JsonProperty(\"pullActions\")\n-    public Set<String> getPullActions() {\n-        return pullActions;\n-    }\n-\n-    @XmlElementWrapper(name = \"pushActions\")\n-    @XmlElement(name = \"pushAction\")\n-    @JsonProperty(\"pushActions\")\n-    public Set<String> getPushActions() {\n-        return pushActions;\n-    }\n-\n-    @XmlElementWrapper(name = \"pullCorrelationRules\")\n-    @XmlElement(name = \"pullCorrelationRule\")\n-    @JsonProperty(\"pullCorrelationRules\")\n-    public Set<String> getPullCorrelationRules() {\n-        return pullCorrelationRules;\n-    }\n-\n-    @XmlElementWrapper(name = \"pushCorrelationRules\")\n-    @XmlElement(name = \"pushCorrelationRule\")\n-    @JsonProperty(\"pushCorrelationRules\")\n-    public Set<String> getPushCorrelationRules() {\n-        return pushCorrelationRules;\n-    }\n-\n-    @XmlElementWrapper(name = \"validators\")\n-    @XmlElement(name = \"validator\")\n-    @JsonProperty(\"validators\")\n-    public Set<String> getValidators() {\n-        return validators;\n+    @JsonIgnore\n+    public Optional<JavaImplInfo> getJavaImplInfo(final ImplementationType type) {\n+        return javaImplInfos.stream().filter(javaImplInfo -> javaImplInfo.getType() == type).findFirst();\n     }\n \n-    @XmlElementWrapper(name = \"notificationRecipientsProviders\")\n-    @XmlElement(name = \"notificationRecipientsProvider\")\n-    @JsonProperty(\"notificationRecipientsProviders\")\n-    public Set<String> getNotificationRecipientsProviders() {\n-        return notificationRecipientsProviders;\n+    @XmlElementWrapper(name = \"javaImplInfos\")\n+    @XmlElement(name = \"javaImplInfo\")\n+    @JsonProperty(\"javaImplInfos\")\n+    public Set<JavaImplInfo> getJavaImplInfos() {\n+        return javaImplInfos;\n     }\n \n     public void setVersion(final String version) {"},{"sha":"7811c0092a6f431701391e5b1a698da080cfd282","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountPolicyTO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -28,15 +28,15 @@\n \n @XmlRootElement(name = \"accountPolicy\")\n @XmlType\n-public class AccountPolicyTO extends AbstractPolicyTO implements ComposablePolicy<AbstractAccountRuleConf> {\n+public class AccountPolicyTO extends AbstractPolicyTO implements ComposablePolicy {\n \n     private static final long serialVersionUID = -1557150042828800134L;\n \n     private boolean propagateSuspension;\n \n     private int maxAuthenticationAttempts;\n \n-    private final List<AbstractAccountRuleConf> ruleConfs = new ArrayList<>();\n+    private final List<String> rules = new ArrayList<>();\n \n     private final List<String> passthroughResources = new ArrayList<>();\n \n@@ -56,12 +56,12 @@ public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n         this.maxAuthenticationAttempts = maxAuthenticationAttempts;\n     }\n \n-    @XmlElementWrapper(name = \"ruleConfs\")\n-    @XmlElement(name = \"ruleConf\")\n-    @JsonProperty(\"ruleConfs\")\n+    @XmlElementWrapper(name = \"rules\")\n+    @XmlElement(name = \"rule\")\n+    @JsonProperty(\"rules\")\n     @Override\n-    public List<AbstractAccountRuleConf> getRuleConfs() {\n-        return ruleConfs;\n+    public List<String> getRules() {\n+        return rules;\n     }\n \n     @XmlElementWrapper(name = \"passthroughResources\")"},{"sha":"a0835c115d8224a360c8cdbe7a87648df5a1e68f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/ComposablePolicy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FComposablePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FComposablePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FComposablePolicy.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -21,12 +21,12 @@\n import java.io.Serializable;\n import java.util.List;\n \n-public interface ComposablePolicy<T extends RuleConf> extends Serializable {\n+public interface ComposablePolicy extends Serializable {\n \n     /**\n      * Return policy rules.\n      *\n      * @return policy rules.\n      */\n-    List<T> getRuleConfs();\n+    List<String> getRules();\n }"},{"sha":"fd7d55c56120242b15befa769c1b9d923f82ddad","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordPolicyTO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -28,15 +28,15 @@\n \n @XmlRootElement(name = \"passwordPolicy\")\n @XmlType\n-public class PasswordPolicyTO extends AbstractPolicyTO implements ComposablePolicy<AbstractPasswordRuleConf> {\n+public class PasswordPolicyTO extends AbstractPolicyTO implements ComposablePolicy {\n \n     private static final long serialVersionUID = -5606086441294799690L;\n \n     private boolean allowNullPassword;\n \n     private int historyLength;\n \n-    private final List<AbstractPasswordRuleConf> ruleConfs = new ArrayList<>();\n+    private final List<String> rules = new ArrayList<>();\n \n     public boolean isAllowNullPassword() {\n         return allowNullPassword;\n@@ -54,11 +54,11 @@ public void setHistoryLength(final int historyLength) {\n         this.historyLength = historyLength;\n     }\n \n-    @XmlElementWrapper(name = \"ruleConfs\")\n-    @XmlElement(name = \"ruleConf\")\n-    @JsonProperty(\"ruleConfs\")\n+    @XmlElementWrapper(name = \"rules\")\n+    @XmlElement(name = \"rule\")\n+    @JsonProperty(\"rules\")\n     @Override\n-    public List<AbstractPasswordRuleConf> getRuleConfs() {\n-        return ruleConfs;\n+    public List<String> getRules() {\n+        return rules;\n     }\n }"},{"sha":"0e4c1c70a39138d2f01643166fadef8757051edd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/ReportletConf.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FReportletConf.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,9 +19,10 @@\n package org.apache.syncope.common.lib.report;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.io.Serializable;\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public interface ReportletConf {\n+public interface ReportletConf extends Serializable {\n \n     /**\n      * Give name of related reportlet instance."},{"sha":"14637eef4200e9b15de9c1c485c38d4afe4c5e80","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractProvisioningTaskTO.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractProvisioningTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractProvisioningTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractProvisioningTaskTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -50,7 +50,7 @@ public class AbstractProvisioningTaskTO extends SchedTaskTO {\n \n     private MatchingRule matchingRule;\n \n-    private final Set<String> actionsClassNames = new HashSet<>();\n+    private final List<String> actions = new ArrayList<>();\n \n     public String getResource() {\n         return resource;\n@@ -92,11 +92,11 @@ public void setSyncStatus(final boolean syncStatus) {\n         this.syncStatus = syncStatus;\n     }\n \n-    @XmlElementWrapper(name = \"actionsClassNames\")\n-    @XmlElement(name = \"actionsClassName\")\n-    @JsonProperty(\"actionsClassNames\")\n-    public Set<String> getActionsClassNames() {\n-        return actionsClassNames;\n+    @XmlElementWrapper(name = \"actions\")\n+    @XmlElement(name = \"action\")\n+    @JsonProperty(\"actions\")\n+    public List<String> getActions() {\n+        return actions;\n     }\n \n     public UnmatchingRule getUnmatchingRule() {"},{"sha":"b212021a9d103b865c75ae5dae182fe95aba5a0e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ImplementationTO.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FImplementationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FImplementationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FImplementationTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+\n+@XmlRootElement(name = \"implementation\")\n+@XmlType\n+public class ImplementationTO extends AbstractBaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = 2703397698393060586L;\n+\n+    private String key;\n+\n+    private ImplementationEngine engine;\n+\n+    private ImplementationType type;\n+\n+    private String body;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public ImplementationEngine getEngine() {\n+        return engine;\n+    }\n+\n+    public void setEngine(final ImplementationEngine engine) {\n+        this.engine = engine;\n+    }\n+\n+    public ImplementationType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final ImplementationType type) {\n+        this.type = type;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public void setBody(final String body) {\n+        this.body = body;\n+    }\n+\n+}"},{"sha":"0bed6276d38ff8972c33122a3953a83a45188f82","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ItemTO.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -77,7 +77,7 @@ public class ItemTO extends AbstractBaseBean implements EntityTO {\n      */\n     private String pullJEXLTransformer;\n \n-    private final List<String> transformerClassNames = new ArrayList<>();\n+    private final List<String> transformers = new ArrayList<>();\n \n     public boolean isConnObjectKey() {\n         return connObjectKey;\n@@ -153,11 +153,10 @@ public void setPullJEXLTransformer(final String pullJEXLTransformer) {\n         this.pullJEXLTransformer = pullJEXLTransformer;\n     }\n \n-    @XmlElementWrapper(name = \"transformerClassNames\")\n-    @XmlElement(name = \"transformerClassName\")\n-    @JsonProperty(\"transformerClassNames\")\n-    public List<String> getTransformerClassNames() {\n-        return transformerClassNames;\n+    @XmlElementWrapper(name = \"transformers\")\n+    @XmlElement(name = \"transformer\")\n+    @JsonProperty(\"transformers\")\n+    public List<String> getTransformers() {\n+        return transformers;\n     }\n-\n }"},{"sha":"d09fe072bc07e080fef1834cf6f7425150c75ad0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -56,7 +56,7 @@ public class NotificationTO extends AbstractBaseBean implements EntityTO {\n \n     private boolean selfAsRecipient;\n \n-    private String recipientsProviderClassName;\n+    private String recipientsProvider;\n \n     private String sender;\n \n@@ -122,12 +122,12 @@ public void setSelfAsRecipient(final boolean selfAsRecipient) {\n         this.selfAsRecipient = selfAsRecipient;\n     }\n \n-    public String getRecipientsProviderClassName() {\n-        return recipientsProviderClassName;\n+    public String getRecipientsProvider() {\n+        return recipientsProvider;\n     }\n \n-    public void setRecipientsProviderClassName(final String recipientsProviderClassName) {\n-        this.recipientsProviderClassName = recipientsProviderClassName;\n+    public void setRecipientsProvider(final String recipientsProvider) {\n+        this.recipientsProvider = recipientsProvider;\n     }\n \n     public String getSender() {"},{"sha":"0b706089f1531672dcc5aedf0661517298fe6baa","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PullTaskTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -39,7 +39,7 @@ public class PullTaskTO extends AbstractProvisioningTaskTO implements Templatabl\n \n     private PullMode pullMode;\n \n-    private String reconciliationFilterBuilderClassName;\n+    private String reconFilterBuilder;\n \n     private String destinationRealm;\n \n@@ -55,12 +55,12 @@ public void setPullMode(final PullMode pullMode) {\n         this.pullMode = pullMode;\n     }\n \n-    public String getReconciliationFilterBuilderClassName() {\n-        return reconciliationFilterBuilderClassName;\n+    public String getReconFilterBuilder() {\n+        return reconFilterBuilder;\n     }\n \n-    public void setReconciliationFilterBuilderClassName(final String reconciliationFilterBuilderClassName) {\n-        this.reconciliationFilterBuilderClassName = reconciliationFilterBuilderClassName;\n+    public void setReconFilterBuilder(final String reconFilterBuilder) {\n+        this.reconFilterBuilder = reconFilterBuilder;\n     }\n \n     public String getDestinationRealm() {"},{"sha":"7615d8f02030d98259b1d051583dad5ce03782c1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,8 +20,10 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javax.ws.rs.PathParam;\n@@ -51,7 +53,7 @@ public class RealmTO extends AbstractBaseBean implements EntityTO, TemplatableTO\n \n     private String passwordPolicy;\n \n-    private final Set<String> actionsClassNames = new HashSet<>();\n+    private final List<String> actions = new ArrayList<>();\n \n     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n     @JsonIgnore\n@@ -110,11 +112,11 @@ public void setPasswordPolicy(final String passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n \n-    @XmlElementWrapper(name = \"actionsClassNames\")\n-    @XmlElement(name = \"actionsClassName\")\n-    @JsonProperty(\"actionsClassNames\")\n-    public Set<String> getActionsClassNames() {\n-        return actionsClassNames;\n+    @XmlElementWrapper(name = \"actions\")\n+    @XmlElement(name = \"action\")\n+    @JsonProperty(\"actions\")\n+    public List<String> getActions() {\n+        return actions;\n     }\n \n     @JsonProperty"},{"sha":"636f3eb52837486f5f59a254bed06d27c246138b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ReportTO.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -27,7 +27,6 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.report.AbstractReportletConf;\n \n @XmlRootElement(name = \"report\")\n @XmlType\n@@ -39,7 +38,7 @@ public class ReportTO extends AbstractStartEndBean implements EntityTO {\n \n     private String name;\n \n-    private final List<AbstractReportletConf> reportletConfs = new ArrayList<>();\n+    private final List<String> reportlets = new ArrayList<>();\n \n     private String cronExpression;\n \n@@ -74,11 +73,11 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n-    @XmlElementWrapper(name = \"reportletConfs\")\n-    @XmlElement(name = \"reportletConf\")\n-    @JsonProperty(\"reportletConfs\")\n-    public List<AbstractReportletConf> getReportletConfs() {\n-        return reportletConfs;\n+    @XmlElementWrapper(name = \"reportlets\")\n+    @XmlElement(name = \"reportlets\")\n+    @JsonProperty(\"reportlets\")\n+    public List<String> getReportlets() {\n+        return reportlets;\n     }\n \n     public String getCronExpression() {"},{"sha":"ab7e0e669cc7dd54d005f8831540a929242c4407","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -83,7 +83,7 @@ public class ResourceTO extends AbstractBaseBean implements EntityTO {\n \n     private final Set<ConnectorCapability> capabilitiesOverride = EnumSet.noneOf(ConnectorCapability.class);\n \n-    private final List<String> propagationActionsClassNames = new ArrayList<>();\n+    private final List<String> propagationActions = new ArrayList<>();\n \n     @Override\n     public String getKey() {\n@@ -236,11 +236,10 @@ public void setProvisioningTraceLevel(final TraceLevel provisioningTraceLevel) {\n         this.provisioningTraceLevel = provisioningTraceLevel;\n     }\n \n-    @XmlElementWrapper(name = \"propagationActionsClassNames\")\n-    @XmlElement(name = \"propagationActionsClassName\")\n-    @JsonProperty(\"propagationActionsClassNames\")\n-    public List<String> getPropagationActionsClassNames() {\n-        return propagationActionsClassNames;\n+    @XmlElementWrapper(name = \"propagationActions\")\n+    @XmlElement(name = \"propagationAction\")\n+    @JsonProperty(\"propagationActions\")\n+    public List<String> getPropagationActions() {\n+        return propagationActions;\n     }\n-\n }"},{"sha":"e6c0697ef0cf5a7d31c02cc489239c5792eaaaf1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SchedTaskTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -35,7 +35,7 @@ public class SchedTaskTO extends AbstractTaskTO {\n \n     private String cronExpression;\n \n-    private String jobDelegateClassName;\n+    private String jobDelegate;\n \n     private String name;\n \n@@ -63,12 +63,12 @@ public void setCronExpression(final String cronExpression) {\n         this.cronExpression = cronExpression;\n     }\n \n-    public String getJobDelegateClassName() {\n-        return jobDelegateClassName;\n+    public String getJobDelegate() {\n+        return jobDelegate;\n     }\n \n-    public void setJobDelegateClassName(final String jobDelegateClassName) {\n-        this.jobDelegateClassName = jobDelegateClassName;\n+    public void setJobDelegate(final String jobDelegate) {\n+        this.jobDelegate = jobDelegate;\n     }\n \n     public Date getLastExec() {"},{"sha":"92238d8955975235e85cff037b7014fbfc2a7d95","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,6 +31,7 @@ public enum ClientExceptionType {\n     EntityExists(Response.Status.CONFLICT),\n     GenericPersistence(Response.Status.BAD_REQUEST),\n     HasChildren(Response.Status.BAD_REQUEST),\n+    InvalidImplementation(Response.Status.BAD_REQUEST),\n     InvalidSecurityAnswer(Response.Status.BAD_REQUEST),\n     InvalidEntity(Response.Status.BAD_REQUEST),\n     InvalidLogger(Response.Status.BAD_REQUEST),"},{"sha":"36baddd83bddcc0b175231b7be300752a921f8e0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ImplementationEngine.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationEngine.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationEngine.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationEngine.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ImplementationEngine {\n+\n+    JAVA(\"application/java\"),\n+    GROOVY(\"application/x-groovy\");\n+\n+    private final String mimeType;\n+\n+    ImplementationEngine(final String mimeType) {\n+        this.mimeType = mimeType;\n+    }\n+\n+    public String getMimeType() {\n+        return mimeType;\n+    }\n+\n+}"},{"sha":"c528274d2570dcd05acee1fc884bfa29a83a3dcc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ImplementationType.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationType.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ImplementationType {\n+\n+    JWT_SSO_PROVIDER,\n+    REPORTLET,\n+    ACCOUNT_RULE,\n+    PASSWORD_RULE,\n+    ITEM_TRANSFORMER,\n+    TASKJOB_DELEGATE,\n+    RECON_FILTER_BUILDER,\n+    LOGIC_ACTIONS,\n+    PROPAGATION_ACTIONS,\n+    PULL_ACTIONS,\n+    PUSH_ACTIONS,\n+    PULL_CORRELATION_RULE,\n+    VALIDATOR,\n+    RECIPIENTS_PROVIDER,\n+    AUDIT_APPENDER;\n+\n+}"},{"sha":"49420370cf986cc24daac77cf49c8bc868702608","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -282,6 +282,16 @@ public final class StandardEntitlement {\n \n     public static final String ACCESS_TOKEN_DELETE = \"TASK_DELETE\";\n \n+    public static final String IMPLEMENTATION_LIST = \"IMPLEMENTATION_LIST\";\n+\n+    public static final String IMPLEMENTATION_READ = \"IMPLEMENTATION_READ\";\n+\n+    public static final String IMPLEMENTATION_CREATE = \"IMPLEMENTATION_CREATE\";\n+\n+    public static final String IMPLEMENTATION_UPDATE = \"IMPLEMENTATION_UPDATE\";\n+\n+    public static final String IMPLEMENTATION_DELETE = \"IMPLEMENTATION_DELETE\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"bf2ab851e3a865edbb3a94d7c4220d2ca8eb27ec","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -30,13 +30,11 @@\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n-import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.junit.jupiter.api.Test;\n@@ -58,22 +56,6 @@ public void map() throws IOException {\n         assertEquals(prop, unserializedProp);\n     }\n \n-    @Test\n-    public void reportletConfImplementations() throws IOException {\n-        ReportTO report = new ReportTO();\n-        report.setName(\"testReportForCreate\");\n-        report.getReportletConfs().add(new UserReportletConf(\"first\"));\n-        report.getReportletConfs().add(new UserReportletConf(\"second\"));\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-\n-        StringWriter writer = new StringWriter();\n-        mapper.writeValue(writer, report);\n-\n-        ReportTO actual = mapper.readValue(writer.toString(), ReportTO.class);\n-        assertEquals(report, actual);\n-    }\n-\n     @Test\n     public void patch() throws IOException {\n         UserPatch patch = new UserPatch();"},{"sha":"4dffa0d74c2bf303dd50c300873d1006cfaba1e0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+\n+/**\n+ * REST operations for implementations.\n+ */\n+@Path(\"implementations\")\n+public interface ImplementationService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all implementations.\n+     *\n+     * @param type implementation type\n+     * @return list of all implementations.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    List<ImplementationTO> list(@NotNull @MatrixParam(\"type\") ImplementationType type);\n+\n+    /**\n+     * Returns implementation with matching key.\n+     *\n+     * @param key key of implementation to be read\n+     * @return implementation with matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    ImplementationTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Creates a new implementation.\n+     *\n+     * @param implementationTO implementation.\n+     * @return Response object featuring Location header of created implementation\n+     */\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    Response create(@NotNull ImplementationTO implementationTO);\n+\n+    /**\n+     * Updates an existing implementation.\n+     *\n+     * @param implementationTO implementation.\n+     */\n+    @PUT\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    void update(@NotNull ImplementationTO implementationTO);\n+\n+    /**\n+     * Deletes the implementation matching the given key.\n+     *\n+     * @param key key for implementation to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+\n+}"},{"sha":"4e84455bf43f0aba85faeda768dd91a80d4b92dd","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -48,8 +47,8 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n \n public abstract class AbstractAnyLogic<TO extends AnyTO, P extends AnyPatch> extends AbstractResourceAssociator<TO> {\n \n@@ -74,15 +73,11 @@\n     private List<LogicActions> getActions(final Realm realm) {\n         List<LogicActions> actions = new ArrayList<>();\n \n-        realm.getActionsClassNames().forEach(className -> {\n+        realm.getActions().forEach(impl -> {\n             try {\n-                Class<?> actionsClass = Class.forName(className);\n-                LogicActions logicActions = (LogicActions) ApplicationContextProvider.getBeanFactory().\n-                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-\n-                actions.add(logicActions);\n+                actions.add(ImplementationManager.build(impl));\n             } catch (Exception e) {\n-                LOG.warn(\"Class '{}' not found\", className, e);\n+                LOG.warn(\"While building {}\", impl, e);\n             }\n         });\n "},{"sha":"55e9b3e8ac1441a4fed39d3dd73c476dd431187f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -42,16 +42,20 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n@@ -85,6 +89,9 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {\n     @Autowired\n     protected AnySearchDAO searchDAO;\n \n+    @Autowired\n+    protected ImplementationDAO implementationDAO;\n+\n     @Autowired\n     protected TaskDAO taskDAO;\n \n@@ -376,10 +383,22 @@ public ExecTO bulkMembersAction(final String key, final BulkMembersActionType ac\n             throw new NotFoundException(\"Group \" + key);\n         }\n \n+        Implementation jobDelegate = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n+                filter(impl -> GroupMemberProvisionTaskJobDelegate.class.getName().equals(impl.getBody())).\n+                findFirst().orElse(null);\n+        if (jobDelegate == null) {\n+            jobDelegate = entityFactory.newEntity(Implementation.class);\n+            jobDelegate.setKey(GroupMemberProvisionTaskJobDelegate.class.getSimpleName());\n+            jobDelegate.setEngine(ImplementationEngine.JAVA);\n+            jobDelegate.setType(ImplementationType.TASKJOB_DELEGATE);\n+            jobDelegate.setBody(GroupMemberProvisionTaskJobDelegate.class.getName());\n+            jobDelegate = implementationDAO.save(jobDelegate);\n+        }\n+\n         SchedTask task = entityFactory.newEntity(SchedTask.class);\n         task.setName(\"Bulk member provision for group \" + group.getName());\n         task.setActive(true);\n-        task.setJobDelegateClassName(GroupMemberProvisionTaskJobDelegate.class.getName());\n+        task.setJobDelegate(jobDelegate);\n         task = taskDAO.save(task);\n \n         try {"},{"sha":"5dca6f5e3568a9c7fe6e703d1444b7bc380ae8db","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ImplementationLogic extends AbstractTransactionalLogic<ImplementationTO> {\n+\n+    @Autowired\n+    private ImplementationDataBinder binder;\n+\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_LIST + \"')\")\n+    public List<ImplementationTO> list(final ImplementationType type) {\n+        return implementationDAO.find(type).stream().\n+                map(implementation -> binder.getImplementationTO(implementation)).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_READ + \"')\")\n+    public ImplementationTO read(final String key) {\n+        Implementation implementation = implementationDAO.find(key);\n+        if (implementation == null) {\n+            LOG.error(\"Could not find implementation '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        return binder.getImplementationTO(implementation);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_CREATE + \"')\")\n+    public ImplementationTO create(final ImplementationTO implementationTO) {\n+        return binder.getImplementationTO(implementationDAO.save(binder.create(implementationTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_UPDATE + \"')\")\n+    public ImplementationTO update(final ImplementationTO implementationTO) {\n+        Implementation implementation = implementationDAO.find(implementationTO.getKey());\n+        if (implementation == null) {\n+            LOG.error(\"Could not find implementation '\" + implementationTO.getKey() + \"'\");\n+\n+            throw new NotFoundException(implementationTO.getKey());\n+        }\n+\n+        binder.update(implementation, implementationTO);\n+        implementation = implementationDAO.save(implementation);\n+\n+        return binder.getImplementationTO(implementation);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_DELETE + \"')\")\n+    public void delete(final String key) {\n+        Implementation implementation = implementationDAO.find(key);\n+        if (implementation == null) {\n+            LOG.error(\"Could not find implementation '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        implementationDAO.delete(key);\n+    }\n+\n+    @Override\n+    protected ImplementationTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof ImplementationTO) {\n+                    key = ((ImplementationTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (StringUtils.isNotBlank(key)) {\n+            try {\n+                return binder.getImplementationTO(implementationDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"0867c62d26995c694b4cbd38d7a734c76567d00d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -52,10 +51,8 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n-import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n@@ -85,9 +82,6 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private TaskDAO taskDAO;\n-\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -385,12 +379,6 @@ public List<EventCategoryTO> listAuditEvents() {\n                 });\n             }\n \n-            for (SchedTask task : taskDAO.<SchedTask>findAll(TaskType.SCHEDULED)) {\n-                EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n-                eventCategoryTO.setCategory(Class.forName(task.getJobDelegateClassName()).getSimpleName());\n-                events.add(eventCategoryTO);\n-            }\n-\n             EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n             eventCategoryTO.setCategory(PullJobDelegate.class.getSimpleName());\n             events.add(eventCategoryTO);"},{"sha":"427c1e5a720da22350b6a16f16affdc4ef56dd23","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":11,"deletions":18,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -24,6 +24,7 @@\n import java.lang.reflect.Method;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n@@ -34,16 +35,17 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n-import org.apache.syncope.core.persistence.api.ImplementationLookup.Type;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n@@ -221,23 +223,14 @@ public PlatformInfo platform() {\n                 PLATFORM_INFO.setPasswordGenerator(AopUtils.getTargetClass(passwordGenerator).getName());\n                 PLATFORM_INFO.setAnySearchDAO(AopUtils.getTargetClass(anySearchDAO).getName());\n \n-                PLATFORM_INFO.getJwtSSOProviders().addAll(implLookup.getClassNames(Type.JWT_SSO_PROVIDER));\n-                PLATFORM_INFO.getReportletConfs().addAll(implLookup.getClassNames(Type.REPORTLET_CONF));\n-                PLATFORM_INFO.getAccountRules().addAll(implLookup.getClassNames(Type.ACCOUNT_RULE_CONF));\n-                PLATFORM_INFO.getPasswordRules().addAll(implLookup.getClassNames(Type.PASSWORD_RULE_CONF));\n-                PLATFORM_INFO.getItemTransformers().addAll(\n-                        implLookup.getClassNames(Type.ITEM_TRANSFORMER));\n-                PLATFORM_INFO.getTaskJobs().addAll(implLookup.getClassNames(Type.TASKJOBDELEGATE));\n-                PLATFORM_INFO.getReconciliationFilterBuilders().\n-                        addAll(implLookup.getClassNames(Type.RECONCILIATION_FILTER_BUILDER));\n-                PLATFORM_INFO.getLogicActions().addAll(implLookup.getClassNames(Type.LOGIC_ACTIONS));\n-                PLATFORM_INFO.getPropagationActions().addAll(implLookup.getClassNames(Type.PROPAGATION_ACTIONS));\n-                PLATFORM_INFO.getPullActions().addAll(implLookup.getClassNames(Type.PULL_ACTIONS));\n-                PLATFORM_INFO.getPushActions().addAll(implLookup.getClassNames(Type.PUSH_ACTIONS));\n-                PLATFORM_INFO.getPullCorrelationRules().addAll(implLookup.getClassNames(Type.PULL_CORRELATION_RULE));\n-                PLATFORM_INFO.getValidators().addAll(implLookup.getClassNames(Type.VALIDATOR));\n-                PLATFORM_INFO.getNotificationRecipientsProviders().\n-                        addAll(implLookup.getClassNames(Type.NOTIFICATION_RECIPIENTS_PROVIDER));\n+                Arrays.stream(ImplementationType.values()).\n+                        forEach(type -> {\n+                            JavaImplInfo javaImplInfo = new JavaImplInfo();\n+                            javaImplInfo.setType(type);\n+                            javaImplInfo.getClasses().addAll(implLookup.getClassNames(type));\n+\n+                            PLATFORM_INFO.getJavaImplInfos().add(javaImplInfo);\n+                        });\n             }\n \n             PLATFORM_INFO.setSelfRegAllowed(isSelfRegAllowed());"},{"sha":"8aa628fe035f20c874aa29af54dd736ef7b8553a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":34,"deletions":30,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n@@ -40,12 +41,12 @@\n import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationRecipientsProvider;\n+import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n-import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBuilder;\n+import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.apache.syncope.core.provisioning.java.data.JEXLItemTransformerImpl;\n import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PlainAttrsPullCorrelationRule;\n@@ -54,7 +55,6 @@\n import org.apache.syncope.core.spring.security.JWTSSOProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.util.ClassUtils;\n@@ -68,7 +68,7 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n     private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.core\";\n \n-    private Map<Type, Set<String>> classNames;\n+    private Map<ImplementationType, Set<String>> classNames;\n \n     private Set<Class<?>> jwtSSOProviderClasses;\n \n@@ -97,8 +97,8 @@ protected String getBasePackage() {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void load() {\n-        classNames = new EnumMap<>(Type.class);\n-        for (Type type : Type.values()) {\n+        classNames = new EnumMap<>(ImplementationType.class);\n+        for (ImplementationType type : ImplementationType.values()) {\n             classNames.put(type, new HashSet<>());\n         }\n \n@@ -115,24 +115,24 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(ItemTransformer.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SchedTaskJobDelegate.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(ReconciliationFilterBuilder.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(ReconFilterBuilder.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(LogicActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PropagationActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PullActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PushActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PullCorrelationRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(Validator.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(NotificationRecipientsProvider.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(RecipientsProvider.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AuditAppender.class));\n \n-        for (BeanDefinition bd : scanner.findCandidateComponents(getBasePackage())) {\n+        scanner.findCandidateComponents(getBasePackage()).forEach(bd -> {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(\n                         bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n                 boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n \n                 if (JWTSSOProvider.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(Type.JWT_SSO_PROVIDER).add(clazz.getName());\n+                    classNames.get(ImplementationType.JWT_SSO_PROVIDER).add(clazz.getName());\n                     jwtSSOProviderClasses.add(clazz);\n                 }\n \n@@ -141,7 +141,7 @@ public void load() {\n                     if (annotation == null) {\n                         LOG.warn(\"Found Reportlet {} without declared configuration\", clazz.getName());\n                     } else {\n-                        classNames.get(Type.REPORTLET_CONF).add(annotation.value().getName());\n+                        classNames.get(ImplementationType.REPORTLET).add(clazz.getName());\n                         reportletClasses.put(annotation.value(), (Class<? extends Reportlet>) clazz);\n                     }\n                 }\n@@ -151,7 +151,7 @@ public void load() {\n                     if (annotation == null) {\n                         LOG.warn(\"Found account policy rule {} without declared configuration\", clazz.getName());\n                     } else {\n-                        classNames.get(Type.ACCOUNT_RULE_CONF).add(annotation.value().getName());\n+                        classNames.get(ImplementationType.ACCOUNT_RULE).add(clazz.getName());\n                         accountRuleClasses.put(annotation.value(), (Class<? extends AccountRule>) clazz);\n                     }\n                 }\n@@ -161,76 +161,80 @@ public void load() {\n                     if (annotation == null) {\n                         LOG.warn(\"Found password policy rule {} without declared configuration\", clazz.getName());\n                     } else {\n-                        classNames.get(Type.PASSWORD_RULE_CONF).add(annotation.value().getName());\n+                        classNames.get(ImplementationType.PASSWORD_RULE).add(clazz.getName());\n                         passwordRuleClasses.put(annotation.value(), (Class<? extends PasswordRule>) clazz);\n                     }\n                 }\n \n                 if (ItemTransformer.class.isAssignableFrom(clazz) && !isAbstractClazz\n                         && !clazz.equals(JEXLItemTransformerImpl.class)) {\n \n-                    classNames.get(Type.ITEM_TRANSFORMER).add(clazz.getName());\n+                    classNames.get(ImplementationType.ITEM_TRANSFORMER).add(clazz.getName());\n                 }\n \n                 if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbstractClazz\n                         && !PullJobDelegate.class.isAssignableFrom(clazz)\n                         && !PushJobDelegate.class.isAssignableFrom(clazz)\n                         && !GroupMemberProvisionTaskJobDelegate.class.isAssignableFrom(clazz)) {\n \n-                    classNames.get(Type.TASKJOBDELEGATE).add(bd.getBeanClassName());\n+                    classNames.get(ImplementationType.TASKJOB_DELEGATE).add(bd.getBeanClassName());\n                 }\n \n-                if (ReconciliationFilterBuilder.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(Type.RECONCILIATION_FILTER_BUILDER).add(bd.getBeanClassName());\n+                if (ReconFilterBuilder.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                    classNames.get(ImplementationType.RECON_FILTER_BUILDER).add(bd.getBeanClassName());\n                 }\n \n                 if (LogicActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(Type.LOGIC_ACTIONS).add(bd.getBeanClassName());\n+                    classNames.get(ImplementationType.LOGIC_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n                 if (PropagationActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(Type.PROPAGATION_ACTIONS).add(bd.getBeanClassName());\n+                    classNames.get(ImplementationType.PROPAGATION_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n                 if (PullActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(Type.PULL_ACTIONS).add(bd.getBeanClassName());\n+                    classNames.get(ImplementationType.PULL_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n                 if (PushActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(Type.PUSH_ACTIONS).add(bd.getBeanClassName());\n+                    classNames.get(ImplementationType.PUSH_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n                 if (PullCorrelationRule.class.isAssignableFrom(clazz) && !isAbstractClazz\n                         && !PlainAttrsPullCorrelationRule.class.isAssignableFrom(clazz)) {\n-                    classNames.get(Type.PULL_CORRELATION_RULE).add(bd.getBeanClassName());\n+\n+                    classNames.get(ImplementationType.PULL_CORRELATION_RULE).add(bd.getBeanClassName());\n                 }\n \n                 if (Validator.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(Type.VALIDATOR).add(bd.getBeanClassName());\n+                    classNames.get(ImplementationType.VALIDATOR).add(bd.getBeanClassName());\n                 }\n \n-                if (NotificationRecipientsProvider.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(Type.NOTIFICATION_RECIPIENTS_PROVIDER).add(bd.getBeanClassName());\n+                if (RecipientsProvider.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                    classNames.get(ImplementationType.RECIPIENTS_PROVIDER).add(bd.getBeanClassName());\n                 }\n \n                 if (AuditAppender.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(Type.AUDIT_APPENDER).add(clazz.getName());\n+                    classNames.get(ImplementationType.AUDIT_APPENDER).add(clazz.getName());\n                     auditAppenderClasses.add(clazz);\n                 }\n             } catch (Throwable t) {\n                 LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n             }\n-        }\n+        });\n+\n         classNames = Collections.unmodifiableMap(classNames);\n+        LOG.debug(\"Implementation classes found: {}\", classNames);\n+\n+        jwtSSOProviderClasses = Collections.unmodifiableSet(jwtSSOProviderClasses);\n         reportletClasses = Collections.unmodifiableMap(reportletClasses);\n         accountRuleClasses = Collections.unmodifiableMap(accountRuleClasses);\n         passwordRuleClasses = Collections.unmodifiableMap(passwordRuleClasses);\n-\n-        LOG.debug(\"Implementation classes found: {}\", classNames);\n+        auditAppenderClasses = Collections.unmodifiableSet(auditAppenderClasses);\n     }\n \n     @Override\n-    public Set<String> getClassNames(final Type type) {\n+    public Set<String> getClassNames(final ImplementationType type) {\n         return classNames.get(type);\n     }\n "},{"sha":"774928d3e977b3266b325f7095ab6206801c642e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":2,"deletions":21,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,33 +22,14 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n \n public interface ImplementationLookup extends SyncopeLoader {\n \n-    enum Type {\n-\n-        JWT_SSO_PROVIDER,\n-        REPORTLET_CONF,\n-        ACCOUNT_RULE_CONF,\n-        PASSWORD_RULE_CONF,\n-        ITEM_TRANSFORMER,\n-        TASKJOBDELEGATE,\n-        RECONCILIATION_FILTER_BUILDER,\n-        LOGIC_ACTIONS,\n-        PROPAGATION_ACTIONS,\n-        PULL_ACTIONS,\n-        PUSH_ACTIONS,\n-        PULL_CORRELATION_RULE,\n-        VALIDATOR,\n-        NOTIFICATION_RECIPIENTS_PROVIDER,\n-        AUDIT_APPENDER;\n-\n-    }\n-\n-    Set<String> getClassNames(Type type);\n+    Set<String> getClassNames(ImplementationType type);\n \n     Set<Class<?>> getJWTSSOProviderClasses();\n "},{"sha":"5b49b4ccf86c36dce893deeb1cc3b980ab5844d1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/Validator.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,8 +19,11 @@\n package org.apache.syncope.core.persistence.api.attrvalue.validation;\n \n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public interface Validator {\n \n+    void setSchema(PlainSchema schema);\n+\n     void validate(String value, PlainAttrValue attrValue);\n }"},{"sha":"9327266d88d596989aacd0a16771d758a74ded9c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -26,5 +26,7 @@\n  */\n public interface AccountRule {\n \n-    void enforce(AccountRuleConf conf, User user);\n+    void setConf(AccountRuleConf conf);\n+\n+    void enforce(User user);\n }"},{"sha":"71b7399de9cd95ada631b0c398c960a6b4d28df0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ImplementationDAO.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FImplementationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FImplementationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FImplementationDAO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+\n+public interface ImplementationDAO extends DAO<Implementation> {\n+\n+    Implementation find(String key);\n+\n+    List<Implementation> find(ImplementationType type);\n+\n+    List<Implementation> findAll();\n+\n+    Implementation save(Implementation implementation);\n+\n+    void delete(String key);\n+\n+}"},{"sha":"8ac914a0167ea0d6899fb6222ebbda59b9684a87","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -26,5 +26,9 @@\n  */\n public interface PasswordRule {\n \n-    void enforce(PasswordRuleConf conf, User user);\n+    PasswordRuleConf getConf();\n+\n+    void setConf(PasswordRuleConf conf);\n+\n+    void enforce(User user);\n }"},{"sha":"5366403957080b629dc41d799bcacba01860de2c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/Reportlet.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -30,11 +30,17 @@\n public interface Reportlet {\n \n     /**\n-     * Actual data extraction for reporting.\n+     * Optional configuration.\n      *\n      * @param conf configuration\n+     */\n+    void setConf(ReportletConf conf);\n+\n+    /**\n+     * Actual data extraction for reporting.\n+     *\n      * @param handler SAX content handler for streaming result\n      * @throws SAXException if there is any problem in SAX handling\n      */\n-    void extract(ReportletConf conf, ContentHandler handler) throws SAXException;\n+    void extract(ContentHandler handler) throws SAXException;\n }"},{"sha":"761a06e1f3c99d82735719e333c65f4746e8936d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Implementation.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FImplementation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FImplementation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FImplementation.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+\n+public interface Implementation extends ProvidedKeyEntity {\n+\n+    ImplementationEngine getEngine();\n+\n+    void setEngine(ImplementationEngine engine);\n+\n+    ImplementationType getType();\n+\n+    void setType(ImplementationType type);\n+\n+    String getBody();\n+\n+    void setBody(String body);\n+}"},{"sha":"e4fb71a0c60648463e576d68942f4027ea63938d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/LinkingMappingItem.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -133,7 +133,12 @@ public void setPullJEXLTransformer(final String pullJEXLTransformer) {\n     }\n \n     @Override\n-    public List<String> getTransformerClassNames() {\n+    public boolean add(final Implementation transformer) {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getTransformers() {\n         return Collections.emptyList();\n     }\n }"},{"sha":"1614a7e3c18095dab656c3a5e7d8d38057fe0b6a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Notification.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -40,9 +40,9 @@ public interface Notification extends Entity {\n \n     void setRecipientsFIQL(String recipientsFIQL);\n \n-    String getRecipientsProviderClassName();\n+    Implementation getRecipientsProvider();\n \n-    void setRecipientsProviderClassName(String recipientsProviderClassName);\n+    void setRecipientsProvider(Implementation recipientsProvider);\n \n     boolean add(AnyAbout about);\n "},{"sha":"97821e0e766b02aecdc5e475104bf75fcc88e94b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainSchema.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainSchema.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,7 +20,6 @@\n \n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n \n public interface PlainSchema extends Schema {\n \n@@ -36,9 +35,7 @@ public interface PlainSchema extends Schema {\n \n     String getSecretKey();\n \n-    Validator getValidator();\n-\n-    String getValidatorClass();\n+    Implementation getValidator();\n \n     void setCipherAlgorithm(CipherAlgorithm cipherAlgorithm);\n \n@@ -52,7 +49,7 @@ public interface PlainSchema extends Schema {\n \n     void setSecretKey(String secretKey);\n \n-    void setValidatorClass(String validatorClass);\n+    void setValidator(Implementation validator);\n \n     void setType(AttrSchemaType type);\n "},{"sha":"c4ef281c348a5a3dca90fffddd514cf65ebebeb8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -45,7 +44,9 @@ public interface Realm extends Entity {\n \n     void setPasswordPolicy(PasswordPolicy passwordPolicy);\n \n-    Set<String> getActionsClassNames();\n+    boolean add(Implementation action);\n+\n+    List<? extends Implementation> getActions();\n \n     boolean add(AnyTemplateRealm template);\n "},{"sha":"a6cc50ebd5e82a53b7be3525207f1f6a8246885a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Report.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.report.ReportletConf;\n \n public interface Report extends Entity {\n \n@@ -31,11 +30,9 @@ public interface Report extends Entity {\n \n     List<? extends ReportExec> getExecs();\n \n-    boolean add(ReportletConf reportletConf);\n+    boolean add(Implementation reportlet);\n \n-    void removeAllReportletConfs();\n-\n-    List<? extends ReportletConf> getReportletConfs();\n+    List<? extends Implementation> getReportlets();\n \n     String getCronExpression();\n "},{"sha":"3fe3c5e2a0656a2ccd5f209954aa2c02b12a7543","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccountPolicy.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n@@ -34,15 +34,11 @@ public interface AccountPolicy extends Policy {\n \n     void setMaxAuthenticationAttempts(int maxAuthenticationAttempts);\n \n-    boolean add(AccountRuleConf accountRuleConf);\n+    boolean add(Implementation rule);\n \n-    void removeAllRuleConfs();\n-\n-    List<AccountRuleConf> getRuleConfs();\n+    List<? extends Implementation> getRules();\n \n     boolean add(ExternalResource resource);\n \n-    Set<String> getResourceKeys();\n-\n     Set<? extends ExternalResource> getResources();\n }"},{"sha":"e44eba0428cc557c994620d28b29579cc1099659","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PasswordPolicy.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,22 +19,20 @@\n package org.apache.syncope.core.persistence.api.entity.policy;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface PasswordPolicy extends Policy {\n \n     boolean isAllowNullPassword();\n \n-    void setAllowNullPassword(final boolean allowNullPassword);\n+    void setAllowNullPassword(boolean allowNullPassword);\n \n     int getHistoryLength();\n \n     void setHistoryLength(int historyLength);\n \n-    boolean add(PasswordRuleConf passwordRuleConf);\n+    boolean add(Implementation rule);\n \n-    void removeAllRuleConfs();\n-\n-    List<PasswordRuleConf> getRuleConfs();\n+    List<? extends Implementation> getRules();\n }"},{"sha":"4093becfea2269a3f0f45647441094cf5a3ffb94","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n@@ -76,7 +77,9 @@ public interface ExternalResource extends ProvidedKeyEntity {\n \n     void setProvisioningTraceLevel(TraceLevel provisioningTraceLevel);\n \n-    List<String> getPropagationActionsClassNames();\n+    boolean add(Implementation propagationAction);\n+\n+    List<? extends Implementation> getPropagationActions();\n \n     Integer getPropagationPriority();\n "},{"sha":"b46cab595221f0a24c9753c18b5d2b85c52026f2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Item.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FItem.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n \n public interface Item extends Entity {\n \n@@ -56,5 +57,7 @@ public interface Item extends Entity {\n \n     void setPullJEXLTransformer(String pullJEXLTransformer);\n \n-    List<String> getTransformerClassNames();\n+    boolean add(Implementation transformer);\n+\n+    List<? extends Implementation> getTransformers();\n }"},{"sha":"971e8e5dbd4232b7349c9d99753f2a11fd9dd81f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/ProvisioningTask.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.task;\n \n-import java.util.Set;\n+import java.util.List;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface ProvisioningTask extends SchedTask {\n@@ -29,7 +30,9 @@ public interface ProvisioningTask extends SchedTask {\n \n     void setResource(ExternalResource resource);\n \n-    Set<String> getActionsClassNames();\n+    boolean add(Implementation action);\n+\n+    List<? extends Implementation> getActions();\n \n     MatchingRule getMatchingRule();\n "},{"sha":"d4234f2a1434533a146f93250b45dd27ce70ab0f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PullTask.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,6 +22,7 @@\n import java.util.Optional;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n \n public interface PullTask extends ProvisioningTask {\n@@ -30,9 +31,9 @@ public interface PullTask extends ProvisioningTask {\n \n     void setPullMode(PullMode pullMode);\n \n-    String getReconciliationFilterBuilderClassName();\n+    Implementation getReconFilterBuilder();\n \n-    void setReconciliationFilterBuilderClassName(String reconciliationFilterBuilderClassName);\n+    void setReconFilterBuilder(Implementation reconFilterBuilder);\n \n     Realm getDestinatioRealm();\n "},{"sha":"abddc8b1091478a10094b2ad6c7d9e6a28741fb2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/SchedTask.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity.task;\n \n import java.util.Date;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n \n public interface SchedTask extends Task {\n \n@@ -30,9 +31,9 @@ public interface SchedTask extends Task {\n \n     String getDescription();\n \n-    void setJobDelegateClassName(String jobDelegateClassName);\n+    void setJobDelegate(Implementation jobDelegate);\n \n-    String getJobDelegateClassName();\n+    Implementation getJobDelegate();\n \n     Date getStartAt();\n "},{"sha":"8c149db99ad27862c015b463badea74c05bd59c5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/AbstractValidator.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAbstractValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,9 +31,10 @@ public abstract class AbstractValidator implements Validator, Serializable {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractValidator.class);\n \n-    protected final PlainSchema schema;\n+    protected PlainSchema schema;\n \n-    public AbstractValidator(final PlainSchema schema) {\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n         this.schema = schema;\n     }\n "},{"sha":"65d63edc4ffefa6f8ef9c1af1cf67a21ed2ab712","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/AlwaysTrueValidator.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAlwaysTrueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAlwaysTrueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAlwaysTrueValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,16 +20,11 @@\n \n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class AlwaysTrueValidator extends AbstractValidator {\n \n     private static final long serialVersionUID = 872107345555773183L;\n \n-    public AlwaysTrueValidator(final PlainSchema schema) {\n-        super(schema);\n-    }\n-\n     @Override\n     protected void doValidate(final PlainAttrValue attrValue) {\n         Boolean value = attrValue.getValue();"},{"sha":"fc64f03f30702c0b4b3f90a1dff0cc2a0b5bac9d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/BasicValidator.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,16 +22,11 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class BasicValidator extends AbstractValidator {\n \n     private static final long serialVersionUID = -2606728447694223607L;\n \n-    public BasicValidator(final PlainSchema schema) {\n-        super(schema);\n-    }\n-\n     @Override\n     protected void doValidate(final PlainAttrValue attrValue) {\n         if (AttrSchemaType.Enum == schema.getType()) {"},{"sha":"1202373f73475332d6268283e765df6f5c55eb28","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/EmailAddressValidator.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,16 +22,11 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class EmailAddressValidator extends AbstractValidator {\n \n     private static final long serialVersionUID = 792457177290331518L;\n \n-    public EmailAddressValidator(final PlainSchema schema) {\n-        super(schema);\n-    }\n-\n     @Override\n     protected void doValidate(final PlainAttrValue attrValue) {\n         Matcher matcher = SyncopeConstants.EMAIL_PATTERN.matcher(attrValue.<CharSequence>getValue());"},{"sha":"5646b0b1e28d2672e09b3f00f739222553c1d16e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/URLValidator.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FURLValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FURLValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FURLValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,16 +22,11 @@\n import java.net.URL;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class URLValidator extends AbstractValidator {\n \n     private static final long serialVersionUID = 792457177290331518L;\n \n-    public URLValidator(final PlainSchema schema) {\n-        super(schema);\n-    }\n-\n     @Override\n     protected void doValidate(final PlainAttrValue attrValue) {\n         try {"},{"sha":"e67d5c8b29a1838bad9b45d9aaa4528563230ee5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/ContentLoaderHandler.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -41,21 +41,19 @@ public class ContentLoaderHandler extends DefaultHandler {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ContentLoaderHandler.class);\n \n-    private final DataSource dataSource;\n+    private final JdbcTemplate jdbcTemplate;\n \n     private final String rootElement;\n \n     private final boolean continueOnError;\n \n     public ContentLoaderHandler(final DataSource dataSource, final String rootElement, final boolean continueOnError) {\n-        this.dataSource = dataSource;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n         this.rootElement = rootElement;\n         this.continueOnError = continueOnError;\n     }\n \n     private Object[] getParameters(final String tableName, final Attributes attrs) {\n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-\n         Map<String, Integer> colTypes = jdbcTemplate.query(\n                 \"SELECT * FROM \" + tableName + \" WHERE 0=1\", (final ResultSet rs) -> {\n                     Map<String, Integer> colTypes1 = new HashMap<>();\n@@ -185,7 +183,6 @@ public void startElement(final String uri, final String localName, final String\n         }\n         query.append(\") VALUES (\").append(values).append(')');\n \n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n         try {\n             jdbcTemplate.update(query.toString(), getParameters(qName, atts));\n         } catch (DataAccessException e) {"},{"sha":"cf93dc5ea77e435e3346fa8e3811d0920cde7163","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -153,7 +153,7 @@ protected Pair<PlainSchema, PlainAttrValue> check(final AttributeCond cond, fina\n                     && cond.getType() != AttributeCond.Type.ISNULL\n                     && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n \n-                schema.getValidator().validate(cond.getExpression(), attrValue);\n+                ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);\n             }\n         } catch (ValidationException e) {\n             LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n@@ -225,7 +225,7 @@ protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond,\n                 && condClone.getType() != AttributeCond.Type.ISNOTNULL) {\n \n             try {\n-                schema.getValidator().validate(condClone.getExpression(), attrValue);\n+                ((JPAPlainSchema) schema).validator().validate(condClone.getExpression(), attrValue);\n             } catch (ValidationException e) {\n                 LOG.error(\"Could not validate expression '\" + condClone.getExpression() + \"'\", e);\n                 throw new IllegalArgumentException();"},{"sha":"6faf055d098ea346c95e8defcb4ee0ed6ef366e2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -35,16 +35,20 @@ public class DefaultAccountRule implements AccountRule {\n \n     private DefaultAccountRuleConf conf;\n \n-    @Transactional(readOnly = true)\n     @Override\n-    public void enforce(final AccountRuleConf conf, final User user) {\n+    public void setConf(final AccountRuleConf conf) {\n         if (conf instanceof DefaultAccountRuleConf) {\n             this.conf = DefaultAccountRuleConf.class.cast(conf);\n         } else {\n             throw new IllegalArgumentException(\n-                    AccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+                    DefaultAccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n \n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final User user) {\n         this.conf.getSchemasNotPermitted().stream().\n                 map(schema -> user.getPlainAttr(schema)).\n                 filter(attr -> attr.isPresent())."},{"sha":"d0abddd3c450e10a9ef8a920da904e5f3c45a141","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPasswordRule.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -33,16 +33,24 @@ public class DefaultPasswordRule implements PasswordRule {\n \n     private DefaultPasswordRuleConf conf;\n \n-    @Transactional(readOnly = true)\n     @Override\n-    public void enforce(final PasswordRuleConf conf, final User user) {\n+    public PasswordRuleConf getConf() {\n+        return conf;\n+    }\n+\n+    @Override\n+    public void setConf(final PasswordRuleConf conf) {\n         if (conf instanceof DefaultPasswordRuleConf) {\n             this.conf = (DefaultPasswordRuleConf) conf;\n         } else {\n             throw new IllegalArgumentException(\n-                    PasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+                    DefaultPasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n+    }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final User user) {\n         this.conf.getSchemasNotPermitted().stream().\n                 map(schema -> user.getPlainAttr(schema)).\n                 filter(attr -> attr.isPresent())."},{"sha":"01c1c2950f9c452e56017081dcade06e69d8c84c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,7 +22,6 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -123,15 +122,12 @@ public Map<String, Integer> countByRealm(final AnyType anyType) {\n                 \"SELECT e.realm, COUNT(e) FROM  \" + JPAAnyObject.class.getSimpleName() + \" e \"\n                 + \"WHERE e.type=:type GROUP BY e.realm\");\n         query.setParameter(\"type\", anyType);\n+\n         @SuppressWarnings(\"unchecked\")\n         List<Object[]> results = query.getResultList();\n-\n-        Map<String, Integer> countByRealm = new HashMap<>(results.size());\n-        for (Object[] result : results) {\n-            countByRealm.put(((Realm) result[0]).getFullPath(), ((Number) result[1]).intValue());\n-        }\n-\n-        return Collections.unmodifiableMap(countByRealm);\n+        return results.stream().collect(Collectors.toMap(\n+                result -> ((Realm) result[0]).getFullPath(),\n+                result -> ((Number) result[1]).intValue()));\n     }\n \n     @Override"},{"sha":"62be797233e67bdd2e0f1756f8728e88ce11ee90","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,7 +22,6 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -161,15 +160,12 @@ public int count() {\n     public Map<String, Integer> countByRealm() {\n         Query query = entityManager().createQuery(\n                 \"SELECT e.realm, COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e GROUP BY e.realm\");\n+\n         @SuppressWarnings(\"unchecked\")\n         List<Object[]> results = query.getResultList();\n-\n-        Map<String, Integer> countByRealm = new HashMap<>(results.size());\n-        for (Object[] result : results) {\n-            countByRealm.put(((Realm) result[0]).getFullPath(), ((Number) result[1]).intValue());\n-        }\n-\n-        return Collections.unmodifiableMap(countByRealm);\n+        return results.stream().collect(Collectors.toMap(\n+                result -> ((Realm) result[0]).getFullPath(),\n+                result -> ((Number) result[1]).intValue()));\n     }\n \n     @Override"},{"sha":"091c4b09f2754cb20ce55855d454cd679a7d50ca","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPAImplementationDAO extends AbstractDAO<Implementation> implements ImplementationDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Implementation find(final String key) {\n+        return entityManager().find(JPAImplementation.class, key);\n+    }\n+\n+    @Override\n+    public List<Implementation> find(final ImplementationType type) {\n+        TypedQuery<Implementation> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAImplementation.class.getSimpleName() + \" e WHERE e.type=:type\",\n+                Implementation.class);\n+        query.setParameter(\"type\", type);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<Implementation> findAll() {\n+        TypedQuery<Implementation> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAImplementation.class.getSimpleName() + \" e\", Implementation.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Implementation save(final Implementation implementation) {\n+        return entityManager().merge(implementation);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        Implementation implementation = find(key);\n+        if (implementation == null) {\n+            return;\n+        }\n+\n+        entityManager().remove(implementation);\n+    }\n+\n+}"},{"sha":"e419f20db4592a7c3f2f7f884e707fc785a2abc5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAMailTemplateDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAMailTemplateDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAMailTemplateDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAMailTemplateDAO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -41,8 +41,8 @@ public List<MailTemplate> findAll() {\n     }\n \n     @Override\n-    public MailTemplate save(final MailTemplate notification) {\n-        return entityManager().merge(notification);\n+    public MailTemplate save(final MailTemplate template) {\n+        return entityManager().merge(template);\n     }\n \n     @Override"},{"sha":"92f7c0a17b6476442b122b4ed3c45bb1d34a854a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":21,"deletions":62,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,10 +22,10 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n@@ -44,7 +44,6 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n@@ -56,6 +55,7 @@\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -68,8 +68,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -86,9 +86,6 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n     @Autowired\n     private AccessTokenDAO accessTokenDAO;\n \n-    @Autowired\n-    private ImplementationLookup implementationLookup;\n-\n     @Resource(name = \"adminUser\")\n     private String adminUser;\n \n@@ -145,30 +142,24 @@ public int count() {\n     public Map<String, Integer> countByRealm() {\n         Query query = entityManager().createQuery(\n                 \"SELECT e.realm, COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e GROUP BY e.realm\");\n+\n         @SuppressWarnings(\"unchecked\")\n         List<Object[]> results = query.getResultList();\n-\n-        Map<String, Integer> countByRealm = new HashMap<>(results.size());\n-        for (Object[] result : results) {\n-            countByRealm.put(((Realm) result[0]).getFullPath(), ((Number) result[1]).intValue());\n-        }\n-\n-        return Collections.unmodifiableMap(countByRealm);\n+        return results.stream().collect(Collectors.toMap(\n+                result -> ((Realm) result[0]).getFullPath(),\n+                result -> ((Number) result[1]).intValue()));\n     }\n \n     @Override\n     public Map<String, Integer> countByStatus() {\n         Query query = entityManager().createQuery(\n                 \"SELECT e.status, COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e GROUP BY e.status\");\n+\n         @SuppressWarnings(\"unchecked\")\n         List<Object[]> results = query.getResultList();\n-\n-        Map<String, Integer> countByStatus = new HashMap<>(results.size());\n-        for (Object[] result : results) {\n-            countByStatus.put(((String) result[0]), ((Number) result[1]).intValue());\n-        }\n-\n-        return Collections.unmodifiableMap(countByStatus);\n+        return results.stream().collect(Collectors.toMap(\n+                result -> (String) result[0],\n+                result -> ((Number) result[1]).intValue()));\n     }\n \n     @Override\n@@ -304,28 +295,12 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                     throw new PasswordPolicyException(\"Password mandatory\");\n                 }\n \n-                policy.getRuleConfs().forEach(ruleConf -> {\n-                    Class<? extends PasswordRule> ruleClass =\n-                            implementationLookup.getPasswordRuleClass(ruleConf.getClass());\n-                    if (ruleClass == null) {\n-                        LOG.warn(\"Could not find matching password rule for {}\", ruleConf.getClass());\n-                    } else {\n-                        // fetch (or create) rule\n-                        PasswordRule rule;\n-                        if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n-                            rule = (PasswordRule) ApplicationContextProvider.getBeanFactory().\n-                                    getSingleton(ruleClass.getName());\n-                        } else {\n-                            rule = (PasswordRule) ApplicationContextProvider.getBeanFactory().\n-                                    createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                            ApplicationContextProvider.getBeanFactory().\n-                                    registerSingleton(ruleClass.getName(), rule);\n-                        }\n-\n-                        // enforce rule\n-                        rule.enforce(ruleConf, user);\n+                for (Implementation impl : policy.getRules()) {\n+                    Optional<PasswordRule> rule = ImplementationManager.buildPasswordRule(impl);\n+                    if (rule.isPresent()) {\n+                        rule.get().enforce(user);\n                     }\n-                });\n+                }\n \n                 if (user.verifyPasswordHistory(user.getClearPassword(), policy.getHistoryLength())) {\n                     throw new PasswordPolicyException(\"Password value was used in the past: not allowed\");\n@@ -376,28 +351,12 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n             }\n \n             for (AccountPolicy policy : getAccountPolicies(user)) {\n-                policy.getRuleConfs().forEach(ruleConf -> {\n-                    Class<? extends AccountRule> ruleClass =\n-                            implementationLookup.getAccountRuleClass(ruleConf.getClass());\n-                    if (ruleClass == null) {\n-                        LOG.warn(\"Could not find matching account rule for {}\", ruleConf.getClass());\n-                    } else {\n-                        // fetch (or create) rule\n-                        AccountRule rule;\n-                        if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n-                            rule = (AccountRule) ApplicationContextProvider.getBeanFactory().\n-                                    getSingleton(ruleClass.getName());\n-                        } else {\n-                            rule = (AccountRule) ApplicationContextProvider.getBeanFactory().\n-                                    createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                            ApplicationContextProvider.getBeanFactory().\n-                                    registerSingleton(ruleClass.getName(), rule);\n-                        }\n-\n-                        // enforce rule\n-                        rule.enforce(ruleConf, user);\n+                for (Implementation impl : policy.getRules()) {\n+                    Optional<AccountRule> rule = ImplementationManager.buildAccountRule(impl);\n+                    if (rule.isPresent()) {\n+                        rule.get().enforce(user);\n                     }\n-                });\n+                }\n \n                 suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n                         && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended();"},{"sha":"edc21db7b14f445ff98bd0e717080a153f0ab54e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractEntity.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -24,7 +24,9 @@\n import java.util.Set;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -41,6 +43,12 @@ protected void checkType(final Object object, final Class<?> clazz) {\n         }\n     }\n \n+    protected void checkImplementationType(final Implementation object, final ImplementationType expected) {\n+        if (object != null && object.getType() != expected) {\n+            throw new ClassCastException(\"Expected \" + expected + \", got \" + object.getType());\n+        }\n+    }\n+\n     /**\n      * @param property the integer representing a boolean value\n      * @return the boolean value corresponding to the property param"},{"sha":"f67adefa2600efd2b2a5fadf1e0e83ea56e54544","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -48,7 +48,7 @@\n     protected JPAPlainSchema schema;\n \n     @Override\n-    public PlainSchema getSchema() {\n+    public JPAPlainSchema getSchema() {\n         return schema;\n     }\n \n@@ -71,7 +71,7 @@ public void add(final String value, final PlainAttrValue attrValue) {\n         checkNonNullSchema();\n \n         attrValue.setAttr(this);\n-        getSchema().getValidator().validate(value, attrValue);\n+        getSchema().validator().validate(value, attrValue);\n \n         if (getSchema().isUniqueConstraint()) {\n             setUniqueValue((PlainAttrUniqueValue) attrValue);"},{"sha":"3223f1852110ad7c232221e17c83fafeb1b53010","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -127,6 +127,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResourceHistoryConf;\n@@ -272,6 +273,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAUDynGroupMembership();\n         } else if (reference.equals(AccessToken.class)) {\n             result = (E) new JPAAccessToken();\n+        } else if (reference.equals(Implementation.class)) {\n+            result = (E) new JPAImplementation();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"dfa1134e09aeebefb0ecb2f68d99d8f51d76246b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAImplementation.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAImplementation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAImplementation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAImplementation.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+\n+@Entity\n+@Table(name = JPAImplementation.TABLE)\n+@Cacheable\n+public class JPAImplementation extends AbstractProvidedKeyEntity implements Implementation {\n+\n+    public static final String TABLE = \"Implementation\";\n+\n+    private static final long serialVersionUID = 8700713975100295322L;\n+\n+    @Column(nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private ImplementationEngine engine;\n+\n+    @Column(nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private ImplementationType type;\n+\n+    @Lob\n+    private String body;\n+\n+    @Override\n+    public ImplementationEngine getEngine() {\n+        return engine;\n+    }\n+\n+    @Override\n+    public void setEngine(final ImplementationEngine engine) {\n+        this.engine = engine;\n+    }\n+\n+    @Override\n+    public ImplementationType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public void setType(final ImplementationType type) {\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    @Override\n+    public void setBody(final String body) {\n+        this.body = body;\n+    }\n+\n+}"},{"sha":"b895d6511a33e200d7a8ff01fdd75d5cd4cb9a03","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -33,13 +33,16 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n \n@@ -73,7 +76,8 @@ public class JPANotification extends AbstractGeneratedKeyEntity implements Notif\n     @NotNull\n     private String recipientAttrName;\n \n-    private String recipientsProviderClassName;\n+    @OneToOne\n+    private JPAImplementation recipientsProvider;\n \n     @NotNull\n     @Basic\n@@ -131,13 +135,15 @@ public void setRecipientAttrName(final String recipientAttrName) {\n     }\n \n     @Override\n-    public String getRecipientsProviderClassName() {\n-        return recipientsProviderClassName;\n+    public Implementation getRecipientsProvider() {\n+        return recipientsProvider;\n     }\n \n     @Override\n-    public void setRecipientsProviderClassName(final String recipientsProviderClassName) {\n-        this.recipientsProviderClassName = recipientsProviderClassName;\n+    public void setRecipientsProvider(final Implementation recipientsProvider) {\n+        checkType(recipientsProvider, JPAImplementation.class);\n+        checkImplementationType(recipientsProvider, ImplementationType.RECIPIENTS_PROVIDER);\n+        this.recipientsProvider = (JPAImplementation) recipientsProvider;\n     }\n \n     @Override"},{"sha":"e97017f4f4c1e0dece60bc15c62663a7d96b6bfb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java","status":"modified","additions":23,"deletions":19,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.lang.reflect.Constructor;\n import javax.persistence.Basic;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n@@ -35,11 +34,14 @@\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.BasicValidator;\n import org.apache.syncope.core.persistence.jpa.validation.entity.PlainSchemaCheck;\n+import org.apache.syncope.core.spring.ImplementationManager;\n \n @Entity\n @Table(name = JPAPlainSchema.TABLE)\n@@ -100,8 +102,11 @@ public class JPAPlainSchema extends AbstractSchema implements PlainSchema {\n     @Column(nullable = true)\n     private String mimeType;\n \n+    @OneToOne\n+    private JPAImplementation validator;\n+\n     @Transient\n-    private Validator validator;\n+    private Validator validatorImpl;\n \n     public JPAPlainSchema() {\n         super();\n@@ -174,38 +179,37 @@ public void setReadonly(final boolean readonly) {\n         this.readonly = getBooleanAsInteger(readonly);\n     }\n \n-    @Override\n-    public Validator getValidator() {\n-        if (validator != null) {\n-            return validator;\n+    public Validator validator() {\n+        if (validatorImpl != null) {\n+            return validatorImpl;\n         }\n \n-        if (getValidatorClass() != null && getValidatorClass().length() > 0) {\n+        if (getValidator() != null) {\n             try {\n-                Constructor<?> validatorConstructor = Class.forName(getValidatorClass()).\n-                        getConstructor(new Class<?>[] { PlainSchema.class });\n-                validator = (Validator) validatorConstructor.newInstance(this);\n+                validatorImpl = ImplementationManager.build(getValidator());\n             } catch (Exception e) {\n-                LOG.error(\"Could not instantiate validator of type {}, reverting to {}\",\n-                        getValidatorClass(), BasicValidator.class.getSimpleName(), e);\n+                LOG.error(\"While building {}\", getValidator(), e);\n             }\n         }\n \n-        if (validator == null) {\n-            validator = new BasicValidator(this);\n+        if (validatorImpl == null) {\n+            validatorImpl = new BasicValidator();\n         }\n+        validatorImpl.setSchema(this);\n \n-        return validator;\n+        return validatorImpl;\n     }\n \n     @Override\n-    public String getValidatorClass() {\n-        return validatorClass;\n+    public Implementation getValidator() {\n+        return validator;\n     }\n \n     @Override\n-    public void setValidatorClass(final String validatorClass) {\n-        this.validatorClass = validatorClass;\n+    public void setValidator(final Implementation validator) {\n+        checkType(validator, JPAImplementation.class);\n+        checkImplementationType(validator, ImplementationType.VALIDATOR);\n+        this.validator = (JPAImplementation) validator;\n     }\n \n     @Override"},{"sha":"49bb739f20e7fbdfcb16879067e9d78f3fc0443f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":17,"deletions":12,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,16 +19,11 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import java.util.stream.Collectors;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n-import javax.persistence.CollectionTable;\n-import javax.persistence.Column;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n@@ -41,8 +36,10 @@\n import javax.validation.constraints.Size;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -75,12 +72,13 @@ public class JPARealm extends AbstractGeneratedKeyEntity implements Realm {\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAAccountPolicy accountPolicy;\n \n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Column(name = \"actionClassName\")\n-    @CollectionTable(name = \"Realm_actionsClassNames\",\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Action\",\n             joinColumns =\n-            @JoinColumn(name = \"realm_id\", referencedColumnName = \"id\"))\n-    private Set<String> actionsClassNames = new HashSet<>();\n+            @JoinColumn(name = \"realm_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> actions = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"realm\")\n     private List<JPAAnyTemplateRealm> templates = new ArrayList<>();\n@@ -143,8 +141,15 @@ public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n     }\n \n     @Override\n-    public Set<String> getActionsClassNames() {\n-        return actionsClassNames;\n+    public boolean add(final Implementation action) {\n+        checkType(action, JPAImplementation.class);\n+        checkImplementationType(action, ImplementationType.LOGIC_ACTIONS);\n+        return actions.contains((JPAImplementation) action) || actions.add((JPAImplementation) action);\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getActions() {\n+        return actions;\n     }\n \n     @Override"},{"sha":"29e7bf7ca91d9e66c1949267378ae06f0169901a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReport.java","status":"modified","additions":17,"deletions":21,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,20 +20,22 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.stream.Collectors;\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n@@ -51,8 +53,13 @@ public class JPAReport extends AbstractGeneratedKeyEntity implements Report {\n     @Column(unique = true, nullable = false)\n     private String name;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"report\")\n-    private List<JPAReportletConfInstance> reportletConfs = new ArrayList<>();\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Reportlet\",\n+            joinColumns =\n+            @JoinColumn(name = \"report_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> reportlets = new ArrayList<>();\n \n     private String cronExpression;\n \n@@ -91,26 +98,15 @@ public List<? extends ReportExec> getExecs() {\n     }\n \n     @Override\n-    public boolean add(final ReportletConf reportletConf) {\n-        if (reportletConf == null) {\n-            return false;\n-        }\n-\n-        JPAReportletConfInstance instance = new JPAReportletConfInstance();\n-        instance.setReport(this);\n-        instance.setInstance(reportletConf);\n-\n-        return reportletConfs.add(instance);\n-    }\n-\n-    @Override\n-    public void removeAllReportletConfs() {\n-        reportletConfs.clear();\n+    public boolean add(final Implementation reportlet) {\n+        checkType(reportlet, JPAImplementation.class);\n+        checkImplementationType(reportlet, ImplementationType.REPORTLET);\n+        return reportlets.contains((JPAImplementation) reportlet) || reportlets.add((JPAImplementation) reportlet);\n     }\n \n     @Override\n-    public List<ReportletConf> getReportletConfs() {\n-        return reportletConfs.stream().map(input -> input.getInstance()).collect(Collectors.toList());\n+    public List<? extends Implementation> getReportlets() {\n+        return reportlets;\n     }\n \n     @Override"},{"sha":"1fe7c37460710912f60f8957c1894e1b9c4d3552","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReportletConfInstance.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e56d521fe35ba6d91d77004432ceb80b5ae62b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e56d521fe35ba6d91d77004432ceb80b5ae62b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java?ref=e8e56d521fe35ba6d91d77004432ceb80b5ae62b","patch":"@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Lob;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.core.persistence.api.entity.Report;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-\n-@Entity\n-@Table(name = JPAReportletConfInstance.TABLE)\n-public class JPAReportletConfInstance extends AbstractGeneratedKeyEntity {\n-\n-    private static final long serialVersionUID = -2436055132955674610L;\n-\n-    public static final String TABLE = \"ReportletConfInstance\";\n-\n-    @Lob\n-    private String serializedInstance;\n-\n-    @ManyToOne\n-    private JPAReport report;\n-\n-    public Report getReport() {\n-        return report;\n-    }\n-\n-    public void setReport(final Report report) {\n-        checkType(report, JPAReport.class);\n-        this.report = (JPAReport) report;\n-    }\n-\n-    public ReportletConf getInstance() {\n-        return serializedInstance == null\n-                ? null\n-                : POJOHelper.deserialize(serializedInstance, ReportletConf.class);\n-    }\n-\n-    public void setInstance(final ReportletConf instance) {\n-        this.serializedInstance = instance == null\n-                ? null\n-                : POJOHelper.serialize(instance);\n-    }\n-}"},{"sha":"aebad0b821b1eedfe9322a96b677781ce5f792f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"modified","additions":16,"deletions":28,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,21 +22,20 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.stream.Collectors;\n import javax.persistence.Basic;\n-import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n-import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n \n @Entity\n@@ -54,8 +53,13 @@ public class JPAAccountPolicy extends AbstractPolicy implements AccountPolicy {\n \n     private int maxAuthenticationAttempts;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"accountPolicy\")\n-    private List<JPAAccountRuleConfInstance> ruleConfs = new ArrayList<>();\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Rule\",\n+            joinColumns =\n+            @JoinColumn(name = \"policy_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> rules = new ArrayList<>();\n \n     /**\n      * Resources for alternative user authentication: if empty, only internal storage will be used.\n@@ -88,26 +92,15 @@ public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n     }\n \n     @Override\n-    public boolean add(final AccountRuleConf accountRuleConf) {\n-        if (accountRuleConf == null) {\n-            return false;\n-        }\n-\n-        JPAAccountRuleConfInstance instance = new JPAAccountRuleConfInstance();\n-        instance.setAccountPolicy(this);\n-        instance.setInstance(accountRuleConf);\n-\n-        return ruleConfs.add(instance);\n-    }\n-\n-    @Override\n-    public void removeAllRuleConfs() {\n-        ruleConfs.clear();\n+    public boolean add(final Implementation rule) {\n+        checkType(rule, JPAImplementation.class);\n+        checkImplementationType(rule, ImplementationType.ACCOUNT_RULE);\n+        return rules.contains((JPAImplementation) rule) || rules.add((JPAImplementation) rule);\n     }\n \n     @Override\n-    public List<AccountRuleConf> getRuleConfs() {\n-        return ruleConfs.stream().map(input -> input.getInstance()).collect(Collectors.toList());\n+    public List<? extends Implementation> getRules() {\n+        return rules;\n     }\n \n     @Override\n@@ -120,9 +113,4 @@ public boolean add(final ExternalResource resource) {\n     public Set<? extends ExternalResource> getResources() {\n         return resources;\n     }\n-\n-    @Override\n-    public Set<String> getResourceKeys() {\n-        return getResources().stream().map(resource -> resource.getKey()).collect(Collectors.toSet());\n-    }\n }"},{"sha":"7272c6e841fd8d82c88cdb64f9a52b0478ee53a7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountRuleConfInstance.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e56d521fe35ba6d91d77004432ceb80b5ae62b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountRuleConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e56d521fe35ba6d91d77004432ceb80b5ae62b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountRuleConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountRuleConfInstance.java?ref=e8e56d521fe35ba6d91d77004432ceb80b5ae62b","patch":"@@ -1,64 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.policy;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Lob;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.common.lib.policy.AccountRuleConf;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-\n-@Entity\n-@Table(name = JPAAccountRuleConfInstance.TABLE)\n-public class JPAAccountRuleConfInstance extends AbstractGeneratedKeyEntity {\n-\n-    private static final long serialVersionUID = -2436055132955674610L;\n-\n-    public static final String TABLE = \"AccountRuleConfInstance\";\n-\n-    @Lob\n-    private String serializedInstance;\n-\n-    @ManyToOne\n-    private JPAAccountPolicy accountPolicy;\n-\n-    public AccountPolicy getAccountPolicy() {\n-        return accountPolicy;\n-    }\n-\n-    public void setAccountPolicy(final AccountPolicy report) {\n-        checkType(report, JPAAccountPolicy.class);\n-        this.accountPolicy = (JPAAccountPolicy) report;\n-    }\n-\n-    public AccountRuleConf getInstance() {\n-        return serializedInstance == null\n-                ? null\n-                : POJOHelper.deserialize(serializedInstance, AccountRuleConf.class);\n-    }\n-\n-    public void setInstance(final AccountRuleConf instance) {\n-        this.serializedInstance = instance == null\n-                ? null\n-                : POJOHelper.serialize(instance);\n-    }\n-}"},{"sha":"fddf5ed199376211744cdf202c19dad8a3f571ae","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordPolicy.java","status":"modified","additions":19,"deletions":23,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,17 +20,19 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.stream.Collectors;\n import javax.persistence.Basic;\n-import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n-import javax.persistence.OneToMany;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n \n @Entity\n @Table(name = JPAPasswordPolicy.TABLE)\n@@ -47,8 +49,13 @@ public class JPAPasswordPolicy extends AbstractPolicy implements PasswordPolicy\n \n     private int historyLength;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"passwordPolicy\")\n-    private List<JPAPasswordRuleConfInstance> ruleConfs = new ArrayList<>();\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Rule\",\n+            joinColumns =\n+            @JoinColumn(name = \"policy_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> rules = new ArrayList<>();\n \n     @Override\n     public boolean isAllowNullPassword() {\n@@ -71,25 +78,14 @@ public void setHistoryLength(final int historyLength) {\n     }\n \n     @Override\n-    public boolean add(final PasswordRuleConf passwordRuleConf) {\n-        if (passwordRuleConf == null) {\n-            return false;\n-        }\n-\n-        JPAPasswordRuleConfInstance instance = new JPAPasswordRuleConfInstance();\n-        instance.setPasswordPolicy(this);\n-        instance.setInstance(passwordRuleConf);\n-\n-        return ruleConfs.add(instance);\n-    }\n-\n-    @Override\n-    public void removeAllRuleConfs() {\n-        ruleConfs.clear();\n+    public boolean add(final Implementation rule) {\n+        checkType(rule, JPAImplementation.class);\n+        checkImplementationType(rule, ImplementationType.PASSWORD_RULE);\n+        return rules.contains((JPAImplementation) rule) || rules.add((JPAImplementation) rule);\n     }\n \n     @Override\n-    public List<PasswordRuleConf> getRuleConfs() {\n-        return ruleConfs.stream().map(input -> input.getInstance()).collect(Collectors.toList());\n+    public List<? extends Implementation> getRules() {\n+        return rules;\n     }\n }"},{"sha":"788496fcd2a1f43327585cdd92881059c453a495","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordRuleConfInstance.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e56d521fe35ba6d91d77004432ceb80b5ae62b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordRuleConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e56d521fe35ba6d91d77004432ceb80b5ae62b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordRuleConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordRuleConfInstance.java?ref=e8e56d521fe35ba6d91d77004432ceb80b5ae62b","patch":"@@ -1,64 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.policy;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Lob;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-\n-@Entity\n-@Table(name = JPAPasswordRuleConfInstance.TABLE)\n-public class JPAPasswordRuleConfInstance extends AbstractGeneratedKeyEntity {\n-\n-    private static final long serialVersionUID = -2436055132955674610L;\n-\n-    public static final String TABLE = \"PasswordRuleConfInstance\";\n-\n-    @Lob\n-    private String serializedInstance;\n-\n-    @ManyToOne\n-    private JPAPasswordPolicy passwordPolicy;\n-\n-    public PasswordPolicy getPasswordPolicy() {\n-        return passwordPolicy;\n-    }\n-\n-    public void setPasswordPolicy(final PasswordPolicy report) {\n-        checkType(report, JPAPasswordPolicy.class);\n-        this.passwordPolicy = (JPAPasswordPolicy) report;\n-    }\n-\n-    public PasswordRuleConf getInstance() {\n-        return serializedInstance == null\n-                ? null\n-                : POJOHelper.deserialize(serializedInstance, PasswordRuleConf.class);\n-    }\n-\n-    public void setInstance(final PasswordRuleConf instance) {\n-        this.serializedInstance = instance == null\n-                ? null\n-                : POJOHelper.serialize(instance);\n-    }\n-}"},{"sha":"0dd78eaa88c99adb1707d8d6e8545849c036a281","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":22,"deletions":10,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -35,7 +35,9 @@\n import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n import javax.persistence.Lob;\n+import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n@@ -46,13 +48,15 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ExternalResourceCheck;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n@@ -62,6 +66,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n /**\n@@ -156,15 +161,13 @@ public class JPAExternalResource extends AbstractProvidedKeyEntity implements Ex\n             @JoinColumn(name = \"resource_id\", referencedColumnName = \"id\"))\n     private Set<ConnectorCapability> capabilitiesOverride = new HashSet<>();\n \n-    /**\n-     * (Optional) classes for PropagationAction.\n-     */\n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Column(name = \"actionClassName\")\n-    @CollectionTable(name = \"ExternalResource_PropActions\",\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"PropagationAction\",\n             joinColumns =\n-            @JoinColumn(name = \"resource_id\", referencedColumnName = \"id\"))\n-    private List<String> propagationActionsClassNames = new ArrayList<>();\n+            @JoinColumn(name = \"resource_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> propagationActions = new ArrayList<>();\n \n     public JPAExternalResource() {\n         super();\n@@ -357,7 +360,16 @@ public Set<ConnectorCapability> getCapabilitiesOverride() {\n     }\n \n     @Override\n-    public List<String> getPropagationActionsClassNames() {\n-        return propagationActionsClassNames;\n+    public boolean add(final Implementation propagationAction) {\n+        checkType(propagationAction, JPAImplementation.class);\n+        checkImplementationType(propagationAction, ImplementationType.PROPAGATION_ACTIONS);\n+        return propagationActions.contains((JPAImplementation) propagationAction)\n+                || propagationActions.add((JPAImplementation) propagationAction);\n     }\n+\n+    @Override\n+    public List<? extends Implementation> getPropagationActions() {\n+        return propagationActions;\n+    }\n+\n }"},{"sha":"1f55c8dca94174c64f225c2b828bbe507dadef98","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"modified","additions":22,"deletions":13,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -21,16 +21,18 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.Cacheable;\n-import javax.persistence.CollectionTable;\n-import javax.persistence.Column;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n \n @Entity\n @Table(name = JPAMappingItem.TABLE)\n@@ -44,15 +46,13 @@ public class JPAMappingItem extends AbstractItem implements MappingItem {\n     @ManyToOne\n     private JPAMapping mapping;\n \n-    /**\n-     * (Optional) classes for MappingItem transformation.\n-     */\n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Column(name = \"transformerClassName\")\n-    @CollectionTable(name = TABLE + \"_Transformer\",\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Transformer\",\n             joinColumns =\n-            @JoinColumn(name = \"mappingItem_id\", referencedColumnName = \"id\"))\n-    private List<String> transformerClassNames = new ArrayList<>();\n+            @JoinColumn(name = \"item_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> transformers = new ArrayList<>();\n \n     @Override\n     public Mapping getMapping() {\n@@ -66,7 +66,16 @@ public void setMapping(final Mapping mapping) {\n     }\n \n     @Override\n-    public List<String> getTransformerClassNames() {\n-        return transformerClassNames;\n+    public boolean add(final Implementation transformer) {\n+        checkType(transformer, JPAImplementation.class);\n+        checkImplementationType(transformer, ImplementationType.ITEM_TRANSFORMER);\n+        return transformers.contains((JPAImplementation) transformer)\n+                || transformers.add((JPAImplementation) transformer);\n     }\n+\n+    @Override\n+    public List<? extends Implementation> getTransformers() {\n+        return transformers;\n+    }\n+\n }"},{"sha":"769ca9fc492575f0ee1abdd80a22095117b0056a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnitItem.java","status":"modified","additions":21,"deletions":13,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -21,16 +21,18 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.Cacheable;\n-import javax.persistence.CollectionTable;\n-import javax.persistence.Column;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n \n @Entity\n @Table(name = JPAOrgUnitItem.TABLE)\n@@ -44,15 +46,13 @@ public class JPAOrgUnitItem extends AbstractItem implements OrgUnitItem {\n     @ManyToOne\n     private JPAOrgUnit orgUnit;\n \n-    /**\n-     * (Optional) classes for Item transformation.\n-     */\n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Column(name = \"transformerClassName\")\n-    @CollectionTable(name = TABLE + \"_Transformer\",\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Transformer\",\n             joinColumns =\n-            @JoinColumn(name = \"orgUnitItem_id\", referencedColumnName = \"id\"))\n-    private List<String> transformerClassNames = new ArrayList<>();\n+            @JoinColumn(name = \"item_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> transformers = new ArrayList<>();\n \n     @Override\n     public OrgUnit getOrgUnit() {\n@@ -66,7 +66,15 @@ public void setOrgUnit(final OrgUnit mapping) {\n     }\n \n     @Override\n-    public List<String> getTransformerClassNames() {\n-        return transformerClassNames;\n+    public boolean add(final Implementation transformer) {\n+        checkType(transformer, JPAImplementation.class);\n+        checkImplementationType(transformer, ImplementationType.ITEM_TRANSFORMER);\n+        return transformers.contains((JPAImplementation) transformer)\n+                || transformers.add((JPAImplementation) transformer);\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getTransformers() {\n+        return transformers;\n     }\n }"},{"sha":"d42c3ea14ddb80879174c1b5fa3931e0bef6fb6c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPullTask.java","status":"modified","additions":29,"deletions":17,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,29 +19,30 @@\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import javax.persistence.CascadeType;\n-import javax.persistence.CollectionTable;\n-import javax.persistence.Column;\n import javax.persistence.DiscriminatorValue;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n \n @Entity\n @DiscriminatorValue(\"PullTask\")\n@@ -53,17 +54,19 @@ public class JPAPullTask extends AbstractProvisioningTask implements PullTask {\n     @NotNull\n     private PullMode pullMode;\n \n-    private String reconciliationFilterBuilderClassName;\n+    @OneToOne\n+    private JPAImplementation reconFilterBuilder;\n \n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n     private JPARealm destinationRealm;\n \n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Column(name = \"actionClassName\")\n-    @CollectionTable(name = \"PullTask_actionsClassNames\",\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = \"PullTaskAction\",\n             joinColumns =\n-            @JoinColumn(name = \"pullTask_id\", referencedColumnName = \"id\"))\n-    private Set<String> actionsClassNames = new HashSet<>();\n+            @JoinColumn(name = \"task_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> actions = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"pullTask\")\n     private List<JPAAnyTemplatePullTask> templates = new ArrayList<>();\n@@ -79,13 +82,15 @@ public void setPullMode(final PullMode pullMode) {\n     }\n \n     @Override\n-    public String getReconciliationFilterBuilderClassName() {\n-        return reconciliationFilterBuilderClassName;\n+    public Implementation getReconFilterBuilder() {\n+        return reconFilterBuilder;\n     }\n \n     @Override\n-    public void setReconciliationFilterBuilderClassName(final String reconciliationFilterBuilderClassName) {\n-        this.reconciliationFilterBuilderClassName = reconciliationFilterBuilderClassName;\n+    public void setReconFilterBuilder(final Implementation reconFilterBuilder) {\n+        checkType(reconFilterBuilder, JPAImplementation.class);\n+        checkImplementationType(reconFilterBuilder, ImplementationType.RECON_FILTER_BUILDER);\n+        this.reconFilterBuilder = (JPAImplementation) reconFilterBuilder;\n     }\n \n     @Override\n@@ -100,8 +105,15 @@ public void setDestinationRealm(final Realm destinationRealm) {\n     }\n \n     @Override\n-    public Set<String> getActionsClassNames() {\n-        return actionsClassNames;\n+    public boolean add(final Implementation action) {\n+        checkType(action, JPAImplementation.class);\n+        checkImplementationType(action, ImplementationType.PULL_ACTIONS);\n+        return actions.contains((JPAImplementation) action) || actions.add((JPAImplementation) action);\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getActions() {\n+        return actions;\n     }\n \n     @Override"},{"sha":"abadd8c37f971ea8f743c946935029e2deaf56ed","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTask.java","status":"modified","additions":20,"deletions":12,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,24 +19,24 @@\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import javax.persistence.CascadeType;\n-import javax.persistence.CollectionTable;\n-import javax.persistence.Column;\n import javax.persistence.DiscriminatorValue;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTaskAnyFilter;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n \n @Entity\n@@ -48,12 +48,13 @@ public class JPAPushTask extends AbstractProvisioningTask implements PushTask {\n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n     private JPARealm sourceRealm;\n \n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Column(name = \"actionClassName\")\n-    @CollectionTable(name = \"PushTask_actionsClassNames\",\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = \"PushTaskAction\",\n             joinColumns =\n-            @JoinColumn(name = \"pushTask_id\", referencedColumnName = \"id\"))\n-    private Set<String> actionsClassNames = new HashSet<>();\n+            @JoinColumn(name = \"task_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> actions = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"pushTask\")\n     private List<JPAPushTaskAnyFilter> filters = new ArrayList<>();\n@@ -70,8 +71,15 @@ public void setSourceRealm(final Realm sourceRealm) {\n     }\n \n     @Override\n-    public Set<String> getActionsClassNames() {\n-        return actionsClassNames;\n+    public boolean add(final Implementation action) {\n+        checkType(action, JPAImplementation.class);\n+        checkImplementationType(action, ImplementationType.PUSH_ACTIONS);\n+        return actions.contains((JPAImplementation) action) || actions.add((JPAImplementation) action);\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getActions() {\n+        return actions;\n     }\n \n     @Override"},{"sha":"e69d5efd416ff349dbf7595c12f9db2e667a2527","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASchedTask.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,12 +22,16 @@\n import javax.persistence.Basic;\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SchedTaskCheck;\n \n @Entity\n@@ -42,7 +46,8 @@ public class JPASchedTask extends AbstractTask implements SchedTask {\n \n     private String cronExpression;\n \n-    private String jobDelegateClassName;\n+    @OneToOne(optional = false)\n+    private JPAImplementation jobDelegate;\n \n     @NotNull\n     private String name;\n@@ -83,13 +88,15 @@ public void setCronExpression(final String cronExpression) {\n     }\n \n     @Override\n-    public String getJobDelegateClassName() {\n-        return jobDelegateClassName;\n+    public Implementation getJobDelegate() {\n+        return jobDelegate;\n     }\n \n     @Override\n-    public void setJobDelegateClassName(final String jobDelegateClassName) {\n-        this.jobDelegateClassName = jobDelegateClassName;\n+    public void setJobDelegate(final Implementation jobDelegate) {\n+        checkType(jobDelegate, JPAImplementation.class);\n+        checkImplementationType(jobDelegate, ImplementationType.TASKJOB_DELEGATE);\n+        this.jobDelegate = (JPAImplementation) jobDelegate;\n     }\n \n     @Override"},{"sha":"f4f6bc3c77cdf63ffdf2b5777ed14bbb8c0fa6cd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":1,"deletions":46,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -29,9 +29,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class ExternalResourceValidator extends AbstractValidator<ExternalResourceCheck, ExternalResource> {\n \n@@ -44,30 +42,7 @@ private boolean isValid(final List<? extends Item> items, final ConstraintValida\n             return false;\n         }\n \n-        boolean isValid = true;\n-\n-        for (Item item : items) {\n-            for (String className : item.getTransformerClassNames()) {\n-                Class<?> actionsClass = null;\n-                boolean isAssignable = false;\n-                try {\n-                    actionsClass = Class.forName(className);\n-                    isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n-                } catch (Exception e) {\n-                    LOG.error(\"Invalid ItemTransformer specified: {}\", className, e);\n-                }\n-\n-                if (actionsClass == null || !isAssignable) {\n-                    context.buildConstraintViolationWithTemplate(\n-                            getTemplate(EntityViolationType.InvalidMapping,\n-                                    \"Invalid item trasformer class name\")).\n-                            addPropertyNode(\"itemTransformerClassName\").addConstraintViolation();\n-                    isValid = false;\n-                }\n-            }\n-        }\n-\n-        return isValid;\n+        return true;\n     }\n \n     private boolean isValid(final OrgUnit orgUnit, final ConstraintValidatorContext context) {\n@@ -107,26 +82,6 @@ public boolean isValid(final ExternalResource resource, final ConstraintValidato\n             return false;\n         }\n \n-        if (!resource.getPropagationActionsClassNames().isEmpty()) {\n-            for (String className : resource.getPropagationActionsClassNames()) {\n-                Class<?> actionsClass = null;\n-                boolean isAssignable = false;\n-                try {\n-                    actionsClass = Class.forName(className);\n-                    isAssignable = PropagationActions.class.isAssignableFrom(actionsClass);\n-                } catch (Exception e) {\n-                    LOG.error(\"Invalid PropagationActions specified: {}\", className, e);\n-                }\n-\n-                if (actionsClass == null || !isAssignable) {\n-                    context.buildConstraintViolationWithTemplate(\n-                            getTemplate(EntityViolationType.InvalidResource, \"Invalid actions class name\")).\n-                            addPropertyNode(\"actionsClassName\").addConstraintViolation();\n-                    return false;\n-                }\n-            }\n-        }\n-\n         final Set<AnyType> anyTypes = new HashSet<>();\n         final Set<String> objectClasses = new HashSet<>();\n         boolean validMappings = resource.getProvisions().stream().allMatch(provision -> {"},{"sha":"cdfb78bc40688c2bbbf5ddcfc9c33e99f362e6c5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ProvisioningTaskValidator.java","status":"modified","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,14 +20,7 @@\n \n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTask;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTask;\n-import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n-import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBuilder;\n-import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n-import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n \n public class ProvisioningTaskValidator extends AbstractValidator<ProvisioningTaskCheck, ProvisioningTask> {\n \n@@ -53,58 +46,6 @@ public boolean isValid(final ProvisioningTask task, final ConstraintValidatorCon\n                         getTemplate(EntityViolationType.InvalidProvisioningTask, \"Resource cannot be null\")).\n                         addPropertyNode(\"resource\").addConstraintViolation();\n             }\n-\n-            if (!task.getActionsClassNames().isEmpty()) {\n-                for (String className : task.getActionsClassNames()) {\n-                    Class<?> actionsClass = null;\n-                    boolean isAssignable = false;\n-                    try {\n-                        actionsClass = Class.forName(className);\n-                        isAssignable = task instanceof JPAPullTask\n-                                ? PullActions.class.isAssignableFrom(actionsClass)\n-                                : task instanceof JPAPushTask\n-                                        ? PushActions.class.isAssignableFrom(actionsClass)\n-                                        : false;\n-                    } catch (Exception e) {\n-                        LOG.error(\"Invalid {} / {} specified\",\n-                                PushActions.class.getName(), PullActions.class.getName(), e);\n-                        isValid = false;\n-                    }\n-\n-                    if (actionsClass == null || !isAssignable) {\n-                        isValid = false;\n-\n-                        context.disableDefaultConstraintViolation();\n-                        context.buildConstraintViolationWithTemplate(\n-                                getTemplate(EntityViolationType.InvalidProvisioningTask, \"Invalid class name\")).\n-                                addPropertyNode(\"actionsClassName\").addConstraintViolation();\n-                    }\n-                }\n-            }\n-\n-            if (isValid && task instanceof PullTask\n-                    && ((PullTask) task).getPullMode() == PullMode.FILTERED_RECONCILIATION) {\n-\n-                Class<?> filterBuilderClass = null;\n-                boolean isAssignable = false;\n-                try {\n-                    filterBuilderClass = Class.forName(((PullTask) task).getReconciliationFilterBuilderClassName());\n-                    isAssignable = ReconciliationFilterBuilder.class.isAssignableFrom(filterBuilderClass);\n-                } catch (Exception e) {\n-                    LOG.error(\"Invalid {} specified\",\n-                            ReconciliationFilterBuilder.class.getName(), PullActions.class.getName(), e);\n-                    isValid = false;\n-                }\n-\n-                if (filterBuilderClass == null || !isAssignable) {\n-                    isValid = false;\n-\n-                    context.disableDefaultConstraintViolation();\n-                    context.buildConstraintViolationWithTemplate(\n-                            getTemplate(EntityViolationType.InvalidProvisioningTask, \"Invalid class name\")).\n-                            addPropertyNode(\"reconciliationFilterBuilderClassName\").addConstraintViolation();\n-                }\n-            }\n         }\n \n         return isValid;"},{"sha":"6b542d0e17249aacb1c876271a0b073fe5c164e6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java","status":"modified","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.provisioning.api.LogicActions;\n \n public class RealmValidator extends AbstractValidator<RealmCheck, Realm> {\n \n@@ -64,29 +63,6 @@ public boolean isValid(final Realm realm, final ConstraintValidatorContext conte\n             }\n         }\n \n-        if (!realm.getActionsClassNames().isEmpty()) {\n-            for (String className : realm.getActionsClassNames()) {\n-                Class<?> actionsClass = null;\n-                boolean isAssignable = false;\n-                try {\n-                    actionsClass = Class.forName(className);\n-                    isAssignable = LogicActions.class.isAssignableFrom(actionsClass);\n-                } catch (Exception e) {\n-                    LOG.error(\"Invalid {} specified\", LogicActions.class.getName(), e);\n-                    isValid = false;\n-                }\n-\n-                if (actionsClass == null || !isAssignable) {\n-                    isValid = false;\n-\n-                    context.disableDefaultConstraintViolation();\n-                    context.buildConstraintViolationWithTemplate(\n-                            getTemplate(EntityViolationType.InvalidRealm, \"Invalid class name\")).\n-                            addPropertyNode(\"actionsClassName\").addConstraintViolation();\n-                }\n-            }\n-        }\n-\n         return isValid;\n     }\n }"},{"sha":"e58a889cb24de01793855884223802052cf4c1b6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,8 +22,8 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.validation.ConstraintValidatorContext;\n-import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.quartz.CronExpression;\n \n@@ -48,10 +48,10 @@ public boolean isValid(final Report object, final ConstraintValidatorContext con\n             }\n         }\n \n-        Set<String> reportletNames = object.getReportletConfs().stream().\n-                map(ReportletConf::getName).collect(Collectors.toSet());\n-        if (reportletNames.size() != object.getReportletConfs().size()) {\n-            LOG.error(\"Reportlet name must be unique\");\n+        Set<String> reportletKeys = object.getReportlets().stream().\n+                map(Entity::getKey).collect(Collectors.toSet());\n+        if (reportletKeys.size() != object.getReportlets().size()) {\n+            LOG.error(\"Reportlet key must be unique\");\n             isValid = false;\n \n             context.disableDefaultConstraintViolation();"},{"sha":"cc813c6fe39aa7f113438f079b0427b7194fcf95","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SchedTaskValidator.java","status":"modified","additions":1,"deletions":24,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -21,39 +21,16 @@\n import java.text.ParseException;\n \n import javax.validation.ConstraintValidatorContext;\n-import org.apache.commons.lang3.ClassUtils;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n-import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.quartz.CronExpression;\n \n public class SchedTaskValidator extends AbstractValidator<SchedTaskCheck, SchedTask> {\n \n     @Override\n     public boolean isValid(final SchedTask task, final ConstraintValidatorContext context) {\n         boolean isValid = true;\n-\n-        if (!(task instanceof ProvisioningTask)) {\n-            Class<?> jobDelegateClass = null;\n-            try {\n-                jobDelegateClass = ClassUtils.getClass(task.getJobDelegateClassName());\n-                isValid = SchedTaskJobDelegate.class.isAssignableFrom(jobDelegateClass);\n-            } catch (Exception e) {\n-                LOG.error(\"Invalid JobDelegate class specified\", e);\n-                isValid = false;\n-            }\n-            if (jobDelegateClass == null || !isValid) {\n-                isValid = false;\n-\n-                context.disableDefaultConstraintViolation();\n-                context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidSchedTask, \"Invalid job delegate class name\")).\n-                        addPropertyNode(\"jobDelegateClassName\").addConstraintViolation();\n-            }\n-        }\n-\n-        if (isValid && task.getCronExpression() != null) {\n+        if (task.getCronExpression() != null) {\n             try {\n                 new CronExpression(task.getCronExpression());\n             } catch (ParseException e) {"},{"sha":"08e241b694fc54c6754a402fc9aaacab95379c99","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":19,"deletions":8,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -178,17 +178,27 @@ under the License.\n   <AnyType_AnyTypeClass anyType_id=\"GROUP\" anyTypeClass_id=\"BaseGroup\"/>\n         \n   <!-- Actual plain schemas -->\n+  <Implementation id=\"EmailAddressValidator\" type=\"VALIDATOR\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n   <SyncopeSchema id=\"email\"/>\n   <PlainSchema id=\"email\" type=\"String\" anyTypeClass_id=\"BaseUser\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n-               validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n+               validator_id=\"EmailAddressValidator\"/>\n \n-  <Task DTYPE=\"SchedTask\" id=\"e95555d2-1b09-42c8-b25b-f4c4ec598989\" name=\"Identity Recertification Task\"  active=\"0\"\n-        jobDelegateClassName=\"org.apache.syncope.core.provisioning.java.job.IdentityRecertification\"/>\n-  \n+  <Implementation id=\"PullJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate\"/>\n+  <Implementation id=\"PushJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate\"/>\n+\n+  <Implementation id=\"IdentityRecertification\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.job.IdentityRecertification\"/>\n+  <Task DTYPE=\"SchedTask\" id=\"e95555d2-1b09-42c8-b25b-f4c4ec598989\" name=\"Identity Recertification Task\"  active=\"1\"\n+        jobDelegate_id=\"IdentityRecertification\"/>\n+\n+  <Implementation id=\"ExpiredAccessTokenCleanup\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.job.ExpiredAccessTokenCleanup\"/>\n   <Task DTYPE=\"SchedTask\" id=\"89de5014-e3f5-4462-84d8-d97575740baf\" name=\"Access Token Cleanup Task\"  active=\"1\"\n-        jobDelegateClassName=\"org.apache.syncope.core.provisioning.java.job.ExpiredAccessTokenCleanup\"\n-        cronExpression=\"0 0/5 * * * ?\"/>\n+        jobDelegate_id=\"ExpiredAccessTokenCleanup\" cronExpression=\"0 0/5 * * * ?\"/>\n \n   <!-- Password reset notifications -->\n   <MailTemplate id=\"requestPasswordReset\"\n@@ -243,7 +253,8 @@ we are happy to inform you that the password request was successfully executed f\n   <ReportTemplate id=\"empty\"/>  \n \n   <Report id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" name=\"reconciliation\" active=\"1\" template_id=\"empty\"/>\n-  <ReportletConfInstance id=\"d6c2b475-4860-4eb1-8fde-618299c2a97c\" report_id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" \n-                         serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n+  <Implementation id=\"ReconciliationReportletConf\" type=\"REPORTLET\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n+  <ReportReportlet report_id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" implementation_id=\"ReconciliationReportletConf\"/>\n \n </dataset>"},{"sha":"943a0e3aa039bbbd34fdd2e8bcf5c3f091451c2b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyImplementationLookup.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n@@ -45,7 +46,7 @@ public void load() {\n     }\n \n     @Override\n-    public Set<String> getClassNames(final Type type) {\n+    public Set<String> getClassNames(final ImplementationType type) {\n         return Collections.emptySet();\n     }\n "},{"sha":"86acf12034a4d07f29c6f8e5ca01a61b4dfaaebb","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class ImplementationTest extends AbstractTest {\n+\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n+    @Test\n+    public void findAll() {\n+        List<Implementation> implementations = implementationDAO.findAll();\n+        assertFalse(implementations.isEmpty());\n+\n+        assertEquals(15, implementations.size());\n+\n+        implementations = implementationDAO.find(ImplementationType.PULL_ACTIONS);\n+        assertEquals(1, implementations.size());\n+\n+        implementations = implementationDAO.find(ImplementationType.PROPAGATION_ACTIONS);\n+        assertEquals(1, implementations.size());\n+\n+        implementations = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE);\n+        assertEquals(5, implementations.size());\n+\n+        implementations = implementationDAO.find(ImplementationType.REPORTLET);\n+        assertEquals(2, implementations.size());\n+\n+        implementations = implementationDAO.find(ImplementationType.ACCOUNT_RULE);\n+        assertEquals(2, implementations.size());\n+\n+        implementations = implementationDAO.find(ImplementationType.PASSWORD_RULE);\n+        assertEquals(3, implementations.size());\n+\n+        implementations = implementationDAO.find(ImplementationType.VALIDATOR);\n+        assertEquals(1, implementations.size());\n+    }\n+\n+    @Test\n+    public void create() {\n+        Implementation impl = entityFactory.newEntity(Implementation.class);\n+        impl.setKey(\"new\");\n+        impl.setEngine(ImplementationEngine.GROOVY);\n+        impl.setType(ImplementationType.VALIDATOR);\n+        impl.setBody(\"\");\n+\n+        Implementation actual = implementationDAO.save(impl);\n+        assertNotNull(actual);\n+        assertEquals(impl, actual);\n+    }\n+}"},{"sha":"9be9cff99f48cae495bb72db4bd51a260687807c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n@@ -45,6 +46,9 @@ public class PlainSchemaTest extends AbstractTest {\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Test\n     public void findAll() {\n         List<PlainSchema> schemas = plainSchemaDAO.findAll();\n@@ -72,7 +76,7 @@ public void save() {\n         PlainSchema schema = entityFactory.newEntity(PlainSchema.class);\n         schema.setKey(\"secondaryEmail\");\n         schema.setType(AttrSchemaType.String);\n-        schema.setValidatorClass(\"org.apache.syncope.core.validation.EmailAddressValidator\");\n+        schema.setValidator(implementationDAO.find(\"EmailAddressValidator\"));\n         schema.setMandatoryCondition(\"false\");\n         schema.setMultivalue(true);\n \n@@ -89,7 +93,7 @@ public void saveNonValid() {\n             PlainSchema schema = entityFactory.newEntity(PlainSchema.class);\n             schema.setKey(\"secondaryEmail\");\n             schema.setType(AttrSchemaType.String);\n-            schema.setValidatorClass(\"org.apache.syncope.core.validation.EmailAddressValidator\");\n+            schema.setValidator(implementationDAO.find(\"EmailAddressValidator\"));\n             schema.setMandatoryCondition(\"false\");\n             schema.setMultivalue(true);\n             schema.setUniqueConstraint(true);"},{"sha":"e570aefaa75640583592d0c4b3925e47b20c4604","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":26,"deletions":6,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -25,13 +25,18 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n+import java.util.UUID;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullPolicySpec;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n@@ -49,6 +54,9 @@ public class PolicyTest extends AbstractTest {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Test\n     public void findAll() {\n         List<Policy> policies = policyDAO.findAll();\n@@ -106,20 +114,32 @@ public void create() {\n \n     @Test\n     public void update() {\n+        PasswordPolicy policy = policyDAO.find(\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\");\n+        assertNotNull(policy);\n+        assertEquals(1, policy.getRules().size());\n+\n         DefaultPasswordRuleConf ruleConf = new DefaultPasswordRuleConf();\n         ruleConf.setMaxLength(8);\n         ruleConf.setMinLength(6);\n \n-        PasswordPolicy policy = policyDAO.find(\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\");\n-        assertNotNull(policy);\n-        assertEquals(1, policy.getRuleConfs().size());\n-        policy.add(ruleConf);\n+        Implementation rule = entityFactory.newEntity(Implementation.class);\n+        rule.setKey(\"PasswordRule\" + UUID.randomUUID().toString());\n+        rule.setEngine(ImplementationEngine.JAVA);\n+        rule.setType(ImplementationType.PASSWORD_RULE);\n+        rule.setBody(POJOHelper.serialize(ruleConf));\n+        rule = implementationDAO.save(rule);\n+\n+        policy.add(rule);\n \n         policy = policyDAO.save(policy);\n \n         assertNotNull(policy);\n-        assertEquals(((DefaultPasswordRuleConf) policy.getRuleConfs().get(1)).getMaxLength(), 8);\n-        assertEquals(((DefaultPasswordRuleConf) policy.getRuleConfs().get(1)).getMinLength(), 6);\n+\n+        rule = policy.getRules().get(1);\n+\n+        DefaultPasswordRuleConf actual = POJOHelper.deserialize(rule.getBody(), DefaultPasswordRuleConf.class);\n+        assertEquals(actual.getMaxLength(), 8);\n+        assertEquals(actual.getMinLength(), 6);\n     }\n \n     @Test"},{"sha":"e35b0bfcae2e0ea6c312c60a2b06bc34764145ed","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ReportTest.java","status":"modified","additions":24,"deletions":2,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -25,11 +25,16 @@\n import java.util.List;\n import java.util.UUID;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -42,6 +47,9 @@ public class ReportTest extends AbstractTest {\n     @Autowired\n     private ReportTemplateDAO reportTemplateDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Test\n     public void find() {\n         Report report = reportDAO.find(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\");\n@@ -60,13 +68,27 @@ public void findAll() {\n \n     @Test\n     public void save() {\n+        Implementation reportlet1 = entityFactory.newEntity(Implementation.class);\n+        reportlet1.setKey(\"UserReportlet\" + UUID.randomUUID().toString());\n+        reportlet1.setEngine(ImplementationEngine.JAVA);\n+        reportlet1.setType(ImplementationType.REPORTLET);\n+        reportlet1.setBody(POJOHelper.serialize(new UserReportletConf(\"first\")));\n+        reportlet1 = implementationDAO.save(reportlet1);\n+\n+        Implementation reportlet2 = entityFactory.newEntity(Implementation.class);\n+        reportlet2.setKey(\"UserReportlet\" + UUID.randomUUID().toString());\n+        reportlet2.setEngine(ImplementationEngine.JAVA);\n+        reportlet2.setType(ImplementationType.REPORTLET);\n+        reportlet2.setBody(POJOHelper.serialize(new UserReportletConf(\"second\")));\n+        reportlet2 = implementationDAO.save(reportlet2);\n+\n         int beforeCount = reportDAO.findAll().size();\n \n         Report report = entityFactory.newEntity(Report.class);\n         report.setName(\"new report\");\n         report.setActive(true);\n-        report.add(new UserReportletConf(\"first\"));\n-        report.add(new UserReportletConf(\"second\"));\n+        report.add(reportlet1);\n+        report.add(reportlet2);\n         report.setTemplate(reportTemplateDAO.find(\"sample\"));\n \n         report = reportDAO.save(report);"},{"sha":"5fa8b8ce3cd4dcf81374b662dafa2b00c3315a9f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -259,7 +259,7 @@ public void emptyMapping() {\n         assertNotNull(ldap.getProvision(anyTypeDAO.findGroup()).get().getMapping());\n \n         // need to avoid any class not defined in this Maven module\n-        ldap.getPropagationActionsClassNames().clear();\n+        ldap.getPropagationActions().clear();\n \n         List<? extends MappingItem> items = ldap.getProvision(anyTypeDAO.findGroup()).get().getMapping().getItems();\n         assertNotNull(items);"},{"sha":"d73d25d72c663f5d194eeead70bf965e6d5c0d0c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":78,"deletions":68,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -28,8 +28,11 @@\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.UUID;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -38,10 +41,12 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n@@ -59,164 +64,167 @@\n \n @Transactional(\"Master\")\n public class TaskTest extends AbstractTest {\n-    \n+\n     @Autowired\n     private TaskDAO taskDAO;\n-    \n+\n     @Autowired\n     private TaskExecDAO taskExecDAO;\n-    \n+\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n-    \n+\n     @Autowired\n     private UserDAO userDAO;\n-    \n+\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Test\n     public void read() {\n         PropagationTask task = taskDAO.find(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\");\n         assertNotNull(task);\n-        \n+\n         assertNotNull(task.getExecs());\n         assertFalse(task.getExecs().isEmpty());\n         assertEquals(1, task.getExecs().size());\n     }\n-    \n+\n     @Test\n     public void save() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n-        \n+\n         User user = userDAO.findByUsername(\"verdi\");\n         assertNotNull(user);\n-        \n+\n         PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n         task.setResource(resource);\n         task.setAnyTypeKind(AnyTypeKind.USER);\n         task.setAnyType(AnyTypeKind.USER.name());\n         task.setOperation(ResourceOperation.CREATE);\n         task.setConnObjectKey(\"one@two.com\");\n-        \n+\n         Set<Attribute> attributes = new HashSet<>();\n         attributes.add(AttributeBuilder.build(\"testAttribute\", \"testValue1\", \"testValue2\"));\n         attributes.add(AttributeBuilder.buildPassword(\"password\".toCharArray()));\n         task.setAttributes(attributes);\n-        \n+\n         task = taskDAO.save(task);\n         assertNotNull(task);\n-        \n+\n         PropagationTask actual = taskDAO.find(task.getKey());\n         assertEquals(task, actual);\n-        \n+\n         taskDAO.flush();\n-        \n+\n         resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertTrue(taskDAO.findAll(\n                 TaskType.PROPAGATION, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n                 contains(task));\n     }\n-    \n+\n     @Test\n     public void addPropagationTaskExecution() {\n         PropagationTask task = taskDAO.find(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\");\n         assertNotNull(task);\n-        \n+\n         int executionNumber = task.getExecs().size();\n-        \n+\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n         execution.setStatus(PropagationTaskExecStatus.CREATED.name());\n         execution.setStart(new Date());\n         task.add(execution);\n-        \n+\n         taskDAO.save(task);\n         taskDAO.flush();\n-        \n+\n         task = taskDAO.find(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\");\n         assertNotNull(task);\n-        \n+\n         assertEquals(executionNumber + 1, task.getExecs().size());\n     }\n-    \n+\n     @Test\n     public void addPullTaskExecution() {\n         PullTask task = taskDAO.find(\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\");\n         assertNotNull(task);\n-        \n+\n         int executionNumber = task.getExecs().size();\n-        \n+\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n         execution.setStart(new Date());\n         execution.setMessage(\"A message\");\n         task.add(execution);\n-        \n+\n         taskDAO.save(task);\n         taskDAO.flush();\n-        \n+\n         task = taskDAO.find(\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\");\n         assertNotNull(task);\n-        \n+\n         assertEquals(executionNumber + 1, task.getExecs().size());\n     }\n-    \n+\n     @Test\n     public void addPushTaskExecution() {\n         PushTask task = taskDAO.find(\"af558be4-9d2f-4359-bf85-a554e6e90be1\");\n         assertNotNull(task);\n-        \n+\n         int executionNumber = task.getExecs().size();\n-        \n+\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n         execution.setStart(new Date());\n         execution.setMessage(\"A message\");\n         task.add(execution);\n-        \n+\n         taskDAO.save(task);\n         taskDAO.flush();\n-        \n+\n         task = taskDAO.find(\"af558be4-9d2f-4359-bf85-a554e6e90be1\");\n         assertNotNull(task);\n-        \n+\n         assertEquals(executionNumber + 1, task.getExecs().size());\n     }\n-    \n+\n     @Test\n     public void deleteTask() {\n         taskDAO.delete(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\");\n-        \n+\n         taskDAO.flush();\n-        \n+\n         assertNull(taskDAO.find(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\"));\n         assertNull(taskExecDAO.find(\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\"));\n     }\n-    \n+\n     @Test\n     public void deleteTaskExecution() {\n         TaskExec execution = taskExecDAO.find(\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\");\n         int executionNumber = execution.getTask().getExecs().size();\n-        \n+\n         taskExecDAO.delete(\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\");\n-        \n+\n         taskExecDAO.flush();\n-        \n+\n         assertNull(taskExecDAO.find(\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\"));\n-        \n+\n         PropagationTask task = taskDAO.find(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\");\n         assertEquals(task.getExecs().size(), executionNumber - 1);\n     }\n-    \n+\n     @Test\n     public void savePullTask() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n-        \n+\n         AnyTemplatePullTask template = entityFactory.newEntity(AnyTemplatePullTask.class);\n         template.set(new UserTO());\n-        \n+\n         PullTask task = entityFactory.newEntity(PullTask.class);\n         task.setName(\"savePullTask\");\n         task.setDescription(\"PullTask description\");\n@@ -235,7 +243,7 @@ public void savePullTask() {\n             exception = e;\n         }\n         assertNotNull(exception);\n-        \n+\n         task.setCronExpression(null);\n         // this save() fails because a PullTask requires a target resource\n         exception = null;\n@@ -245,61 +253,63 @@ public void savePullTask() {\n             exception = e;\n         }\n         assertNotNull(exception);\n-        \n+\n         task.setResource(resource);\n-        task.getActionsClassNames().add(getClass().getName());\n \n-        // this save() fails because jobActionsClassName does not implement \n-        // the right interface\n-        exception = null;\n-        try {\n-            taskDAO.save(task);\n-        } catch (InvalidEntityException e) {\n-            exception = e;\n-        }\n-        assertNotNull(exception);\n-        \n-        task.getActionsClassNames().clear();\n-        task.getActionsClassNames().add(PullActions.class.getName());\n+        Implementation pullActions = entityFactory.newEntity(Implementation.class);\n+        pullActions.setKey(\"PullActions\" + UUID.randomUUID().toString());\n+        pullActions.setEngine(ImplementationEngine.JAVA);\n+        pullActions.setType(ImplementationType.PULL_ACTIONS);\n+        pullActions.setBody(PullActions.class.getName());\n+        pullActions = implementationDAO.save(pullActions);\n+\n+        task.add(pullActions);\n+\n         // this save() finally works\n         task = taskDAO.save(task);\n         assertNotNull(task);\n-        \n+\n         PullTask actual = taskDAO.find(task.getKey());\n         assertEquals(task, actual);\n     }\n-    \n+\n     @Test\n     public void issueSYNCOPE144() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n-        \n+\n+        Implementation pullActions = entityFactory.newEntity(Implementation.class);\n+        pullActions.setEngine(ImplementationEngine.JAVA);\n+        pullActions.setType(ImplementationType.PULL_ACTIONS);\n+        pullActions.setBody(PullActions.class.getName());\n+        pullActions = implementationDAO.save(pullActions);\n+\n         PullTask task = entityFactory.newEntity(PullTask.class);\n-        \n+\n         task.setResource(resource);\n         task.setName(\"issueSYNCOPE144\");\n         task.setDescription(\"issueSYNCOPE144 Description\");\n         task.setActive(true);\n         task.setPullMode(PullMode.FULL_RECONCILIATION);\n-        task.getActionsClassNames().add(PullActions.class.getName());\n+        task.add(pullActions);\n         task.setMatchingRule(MatchingRule.UPDATE);\n         task.setUnmatchingRule(UnmatchingRule.PROVISION);\n-        \n+\n         task = taskDAO.save(task);\n         assertNotNull(task);\n-        \n+\n         PullTask actual = taskDAO.find(task.getKey());\n         assertEquals(task, actual);\n         assertEquals(\"issueSYNCOPE144\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n-        \n+\n         actual.setName(\"issueSYNCOPE144_2\");\n         actual.setDescription(\"issueSYNCOPE144 Description_2\");\n-        \n+\n         actual = taskDAO.save(actual);\n         assertNotNull(actual);\n         assertEquals(\"issueSYNCOPE144_2\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description_2\", actual.getDescription());\n     }\n-    \n+\n }"},{"sha":"cde22efafd5c4d2b3dbbdc5c88cc7f346bb41267","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":68,"deletions":49,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -173,30 +173,32 @@ under the License.\n   <PullPolicy id=\"66691e96-285f-4464-bc19-e68384ea4c85\" description=\"a pull policy\"\n               specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n   <PasswordPolicy id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" description=\"a password policy\"\n-                  historyLength=\"1\" allowNullPassword=\"1\"/> \n-  <PasswordRuleConfInstance id=\"2e3fb762-d37a-46c6-a2e5-662b527dead3\"\n-                            passwordPolicy_id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\"\n-                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+                  historyLength=\"1\" allowNullPassword=\"1\"/>\n+  <Implementation id=\"DefaultPasswordRuleConf1\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <PasswordPolicyRule policy_id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" implementation_id=\"DefaultPasswordRuleConf1\"/>\n   <PullPolicy id=\"880f8553-069b-4aed-9930-2cd53873f544\" description=\"another pull policy\"\n               specification='{\"conflictResolutionAction\":\"ALL\",\"correlationRules\":{\"USER\":\"[\\\"username\\\",\\\"firstname\\\"]\"}}'/>\n   <PasswordPolicy id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"\n                   description=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"1\"/> \n-  <PasswordRuleConfInstance id=\"62fe25b4-9124-4f01-9bc4-0013399da893\"\n-                            passwordPolicy_id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"\n-                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <Implementation id=\"DefaultPasswordRuleConf2\" type=\"PASSWORD_RULE\"  engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <PasswordPolicyRule policy_id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\" implementation_id=\"DefaultPasswordRuleConf2\"/>\n   <AccountPolicy id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\" description=\"an account policy\"\n                  propagateSuspension=\"0\" maxAuthenticationAttempts=\"0\"/>\n-  <AccountRuleConfInstance id=\"5\" accountPolicy_id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\"\n-                           serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n+  <Implementation id=\"DefaultAccountRuleConf1\" type=\"ACCOUNT_RULE\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n+  <AccountPolicyRule policy_id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\" implementation_id=\"DefaultAccountRuleConf1\"/>\n   <AccountPolicy id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" description=\"sample account policy\"\n                  propagateSuspension=\"0\" maxAuthenticationAttempts=\"3\"/>\n-  <AccountRuleConfInstance id=\"6\" accountPolicy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\"\n-                           serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <Implementation id=\"DefaultAccountRuleConf2\" type=\"ACCOUNT_RULE\"  engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <AccountPolicyRule policy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" implementation_id=\"DefaultAccountRuleConf2\"/>\n   <PullPolicy id=\"4ad10d94-e002-4b3f-b771-16089cc71da9\" description=\"pull policy 1\" specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n   <PasswordPolicy id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" description=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"0\"/> \n-  <PasswordRuleConfInstance id=\"69b9d9fb-b37b-48f0-adba-5080f4768a8f\"\n-                            passwordPolicy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\"\n-                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <Implementation id=\"DefaultAccountRuleConf3\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultAccountRuleConf3\"/>\n   <PullPolicy id=\"9454b0d7-2610-400a-be82-fc23cf553dd6\" description=\"pull policy for java rule\"\n               specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n \n@@ -420,9 +422,11 @@ under the License.\n   <PlainSchema id=\"fullname\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"/>\n   <SyncopeSchema id=\"userId\"/>\n+  <Implementation id=\"EmailAddressValidator\" type=\"VALIDATOR\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n   <PlainSchema id=\"userId\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"\n-               validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n+               validator_id=\"EmailAddressValidator\"/>\n   <SyncopeSchema id=\"loginDate\"/>\n   <PlainSchema id=\"loginDate\" type=\"Date\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n@@ -439,7 +443,7 @@ under the License.\n   <SyncopeSchema id=\"email\"/>\n   <PlainSchema id=\"email\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n-               validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n+               validator_id=\"EmailAddressValidator\"/>\n   <SyncopeSchema id=\"activationDate\"/>\n   <PlainSchema id=\"activationDate\" type=\"Date\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n@@ -793,8 +797,9 @@ under the License.\n                     randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"1\"\n                     createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" provisioningTraceLevel=\"ALL\"/>\n-  <ExternalResource_PropActions resource_id=\"resource-ldap\"\n-                                actionClassName=\"org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions\"/>\n+  <Implementation id=\"LDAPMembershipPropagationActions\" type=\"PROPAGATION_ACTIONS\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions\"/>\n+  <ExternalResourcePropagationAction resource_id=\"resource-ldap\" implementation_id=\"LDAPMembershipPropagationActions\"/>\n   <ExternalResource id=\"resource-ldap-orgunit\" connector_id=\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\"\n                     randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"1\"\n@@ -1152,6 +1157,10 @@ under the License.\n                extAttrName=\"surname\" intAttrName=\"surname\" mandatoryCondition=\"true\" password=\"0\" PURPOSE=\"BOTH\"\n                mapping_id=\"e6b64584-94a2-4890-b645-8494a2089011\"/>\n \n+  <Implementation id=\"PullJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate\"/>\n+  <Implementation id=\"PushJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n@@ -1164,133 +1173,141 @@ under the License.\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"PullTask\" id=\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\" name=\"CSV (update matching; assign unmatching)\" resource_id=\"resource-csv\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        pullMode=\"INCREMENTAL\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\" active=\"1\"/>\n+        pullMode=\"INCREMENTAL\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\" active=\"1\"\n+        jobDelegate_id=\"PullJobDelegate\"/>\n   <AnyTemplatePullTask id=\"3a6173a9-8c34-4e37-b3b1-0c2ea385fac0\"\n                        pullTask_id=\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\" anyType_id=\"USER\"\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"relationships\":[],\"memberships\":[{\"rightType\":\"GROUP\",\"rightKey\":\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\",\"groupName\":null}],\"dynMemberships\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"ctype\",\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n   <AnyTemplatePullTask id=\"b3772d66-ec06-4133-bf38-b3273845ac5b\"\n                        pullTask_id=\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\" anyType_id=\"GROUP\"\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"plainAttrs\":[]}'/>\n-  <Task DTYPE=\"SchedTask\" id=\"e95555d2-1b09-42c8-b25b-f4c4ec597979\" name=\"SampleJob Task\"  active=\"1\"\n-        jobDelegateClassName=\"org.apache.syncope.fit.core.reference.TestSampleJobDelegate\" cronExpression=\"0 0 0 1 * ?\"/>\n+  <Implementation id=\"TestSampleJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.fit.core.reference.TestSampleJobDelegate\"/>\n+  <Task DTYPE=\"SchedTask\" id=\"e95555d2-1b09-42c8-b25b-f4c4ec597979\" name=\"SampleJob Task\" active=\"1\"\n+        jobDelegate_id=\"TestSampleJobDelegate\" cronExpression=\"0 0 0 1 * ?\"/>\n+  <Implementation id=\"IdentityRecertification\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.job.IdentityRecertification\"/>\n   <Task DTYPE=\"SchedTask\" id=\"e95555d2-1b09-42c8-b25b-f4c4ec598989\" name=\"Identity Recertification Task\"  active=\"1\"\n-        jobDelegateClassName=\"org.apache.syncope.core.provisioning.java.job.IdentityRecertification\"/>\n+        jobDelegate_id=\"IdentityRecertification\"/>\n+  <Implementation id=\"ExpiredAccessTokenCleanup\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.job.ExpiredAccessTokenCleanup\"/>\n   <Task DTYPE=\"SchedTask\" id=\"89de5014-e3f5-4462-84d8-d97575740baf\" name=\"Access Token Cleanup Task\"  active=\"1\"\n-        jobDelegateClassName=\"org.apache.syncope.core.provisioning.java.job.ExpiredAccessTokenCleanup\"\n-        cronExpression=\"0 0/5 * * * ?\"/>\n+        jobDelegate_id=\"ExpiredAccessTokenCleanup\" cronExpression=\"0 0/5 * * * ?\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <TaskExec id=\"d789462f-e395-424f-bd8e-0db44a93222f\" task_id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PullTask\" id=\"83f7e85d-9774-43fe-adba-ccd856312994\" name=\"TestDB Task\" resource_id=\"resource-testdb\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" pullMode=\"FULL_RECONCILIATION\"\n-        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n   <AnyTemplatePullTask id=\"6c3f578d-327b-4a7c-8037-6f5ba24eb770\" pullTask_id=\"83f7e85d-9774-43fe-adba-ccd856312994\" anyType_id=\"USER\"\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"relationships\":[],\"memberships\":[],\"dynMemberships\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"ctype\",\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"values\":[\"&apos;surname&apos;\"]}]}'/>\n   <AnyTemplatePullTask id=\"45b61137-c7c3-49ee-86e0-9efffa75ae68\" pullTask_id=\"83f7e85d-9774-43fe-adba-ccd856312994\" anyType_id=\"GROUP\"\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"PullTask\" id=\"81d88f73-d474-4450-9031-605daa4e313f\" name=\"TestDB2 Task\" resource_id=\"resource-testdb2\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" pullMode=\"FULL_RECONCILIATION\"\n-        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n   <Task DTYPE=\"PullTask\" id=\"7c2242f4-14af-4ab5-af31-cdae23783655\" name=\"TestDB Pull Task\" resource_id=\"resource-db-pull\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" pullMode=\"FULL_RECONCILIATION\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n-        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n   <Task DTYPE=\"PullTask\" id=\"1e419ca4-ea81-4493-a14f-28b90113686d\" name=\"LDAP Pull Task\" resource_id=\"resource-ldap\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" pullMode=\"FULL_RECONCILIATION\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n-        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n   <AnyTemplatePullTask id=\"df655a2a-40c0-43b1-a157-3f4988802f58\" pullTask_id=\"1e419ca4-ea81-4493-a14f-28b90113686d\" anyType_id=\"USER\"\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"USER\",\"realm\":\"&apos;/&apos; + title\",\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"minimal group\"],\"derAttrs\":[],\"virAttrs\":[{\"schema\":\"virtualReadOnly\",\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynMemberships\":[],\"plainAttrs\":[]}'/>\n   <AnyTemplatePullTask id=\"fda22ff3-98f3-42e4-a2ae-cd9a28282d57\" pullTask_id=\"1e419ca4-ea81-4493-a14f-28b90113686d\" anyType_id=\"GROUP\"\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"plainAttrs\":[{\"schema\":\"show\",\"values\":[\"true\"]}]}'/>\n-  <PullTask_actionsClassNames pullTask_id=\"1e419ca4-ea81-4493-a14f-28b90113686d\" actionClassName=\"org.apache.syncope.core.provisioning.java.pushpull.LDAPMembershipPullActions\"/>\n+  <Implementation id=\"LDAPMembershipPullActions\" type=\"PULL_ACTIONS\"  engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.pushpull.LDAPMembershipPullActions\"/>\n+  <PullTaskAction task_id=\"1e419ca4-ea81-4493-a14f-28b90113686d\" implementation_id=\"LDAPMembershipPullActions\"/>\n   <Task DTYPE=\"PullTask\" id=\"38abbf9e-a1a3-40a1-a15f-7d0ac02f47f1\" name=\"VirAttrCache test\" resource_id=\"resource-csv\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" pullMode=\"FULL_RECONCILIATION\"\n-        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n   <Task DTYPE=\"PushTask\" id=\"af558be4-9d2f-4359-bf85-a554e6e90be1\" name=\"Export on resource-testdb2\" resource_id=\"resource-testdb2\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"         \n-        unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\" active=\"1\"/>  \n+        unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\" active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>  \n   <PushTaskAnyFilter id=\"1fdcff65-765f-4a6e-98a7-13ef7cca47e2\" anyType_id=\"USER\" pushTask_id=\"af558be4-9d2f-4359-bf85-a554e6e90be1\" fiql=\"surname==Vivaldi\"/>\n   <PushTaskAnyFilter id=\"3b564c51-5d64-48b3-8da5-fd4ebc10e0a8\" anyType_id=\"GROUP\" pushTask_id=\"af558be4-9d2f-4359-bf85-a554e6e90be1\" fiql=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" id=\"97f327b6-2eff-4d35-85e8-d581baaab855\" name=\"Export on resource-testdb2\" resource_id=\"resource-testdb2\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"         \n-        unmatchingRule=\"PROVISION\" matchingRule=\"IGNORE\" active=\"1\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"IGNORE\" active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>\n   <PushTaskAnyFilter id=\"199efd21-5e89-46ac-95de-f47e9d0569fc\" anyType_id=\"USER\" pushTask_id=\"97f327b6-2eff-4d35-85e8-d581baaab855\" fiql=\"surname==Bellini\"/>\n   <PushTaskAnyFilter id=\"7672a167-77d6-4639-8b1d-0af561293c7d\" anyType_id=\"GROUP\" pushTask_id=\"97f327b6-2eff-4d35-85e8-d581baaab855\" fiql=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" id=\"03aa2a04-4881-4573-9117-753f81b04865\" name=\"Export on resource-testdb2\" resource_id=\"resource-testdb2\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n-        unmatchingRule=\"UNLINK\" matchingRule=\"IGNORE\" active=\"1\"/>\n+        unmatchingRule=\"UNLINK\" matchingRule=\"IGNORE\" active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>\n   <PushTaskAnyFilter id=\"39a11ba6-397a-4c94-8bfe-1f4f757d6501\" anyType_id=\"USER\" pushTask_id=\"03aa2a04-4881-4573-9117-753f81b04865\" fiql=\"surname==Puccini\"/>\n   <PushTaskAnyFilter id=\"5bd7501e-8a18-4fbd-a3fe-a1e731ba95db\" anyType_id=\"GROUP\" pushTask_id=\"03aa2a04-4881-4573-9117-753f81b04865\" fiql=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" id=\"5e5f7c7e-9de7-4c6a-99f1-4df1af959807\" name=\"Export on resource-testdb2\" resource_id=\"resource-testdb2\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"         \n-        unmatchingRule=\"IGNORE\" matchingRule=\"IGNORE\" active=\"1\"/>\n+        unmatchingRule=\"IGNORE\" matchingRule=\"IGNORE\" active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>\n   <PushTaskAnyFilter id=\"0d0371a3-5772-4b4c-ad14-139adf1d346a\" anyType_id=\"USER\" pushTask_id=\"5e5f7c7e-9de7-4c6a-99f1-4df1af959807\" fiql=\"surname==Verdi\"/>\n   <PushTaskAnyFilter id=\"2e7488ae-a2fc-4657-a93b-159b8433c0e7\" anyType_id=\"GROUP\" pushTask_id=\"5e5f7c7e-9de7-4c6a-99f1-4df1af959807\" fiql=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" id=\"0bc11a19-6454-45c2-a4e3-ceef84e5d79b\" name=\"Export on resource-testdb2\" resource_id=\"resource-testdb2\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n-        unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\" active=\"1\"/>\n+        unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>\n   <PushTaskAnyFilter id=\"41bf22fe-a014-41af-9a75-402b987eb433\" anyType_id=\"USER\" pushTask_id=\"0bc11a19-6454-45c2-a4e3-ceef84e5d79b\" fiql=\"username==_NO_ONE_\"/>\n   <PushTaskAnyFilter id=\"fa983fde-795e-4c89-a6f7-1ccd80a8adeb\" anyType_id=\"GROUP\" pushTask_id=\"0bc11a19-6454-45c2-a4e3-ceef84e5d79b\" fiql=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" id=\"ec674143-480a-4816-98ad-b61fa090821e\" name=\"Export on resource-testdb2\" resource_id=\"resource-testdb2\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n-        unmatchingRule=\"IGNORE\" matchingRule=\"DEPROVISION\" active=\"1\"/>\n+        unmatchingRule=\"IGNORE\" matchingRule=\"DEPROVISION\" active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>\n   <PushTaskAnyFilter id=\"e238a6dc-0b04-46cf-9bfa-be68bd9f2da0\" anyType_id=\"USER\" pushTask_id=\"ec674143-480a-4816-98ad-b61fa090821e\" fiql=\"surname==Verdi\"/>\n   <PushTaskAnyFilter id=\"0eaa643e-0add-4c46-8273-539f9d6abec5\" anyType_id=\"GROUP\" pushTask_id=\"ec674143-480a-4816-98ad-b61fa090821e\" fiql=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" id=\"c46edc3a-a18b-4af2-b707-f4a415507496\" name=\"Export on resource-testdb2\" resource_id=\"resource-testdb2\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n-        unmatchingRule=\"IGNORE\" matchingRule=\"UNASSIGN\" active=\"1\"/>\n+        unmatchingRule=\"IGNORE\" matchingRule=\"UNASSIGN\" active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>\n   <PushTaskAnyFilter id=\"335b4f11-589a-44c5-80b0-ba94892f0c62\" anyType_id=\"USER\" pushTask_id=\"c46edc3a-a18b-4af2-b707-f4a415507496\" fiql=\"surname==Rossini\"/>\n   <PushTaskAnyFilter id=\"b32eecc2-aa4f-43c6-a501-a692c3e93113\" anyType_id=\"GROUP\" pushTask_id=\"c46edc3a-a18b-4af2-b707-f4a415507496\" fiql=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" id=\"51318433-cce4-4f71-8f45-9534b6c9c819\" name=\"Export on resource-testdb2\" resource_id=\"resource-testdb2\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n-        unmatchingRule=\"IGNORE\" matchingRule=\"LINK\" active=\"1\"/>\n+        unmatchingRule=\"IGNORE\" matchingRule=\"LINK\" active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>\n   <PushTaskAnyFilter id=\"9f974a0d-87d8-4cae-9ea9-1fc245bc1dbf\" anyType_id=\"USER\" pushTask_id=\"51318433-cce4-4f71-8f45-9534b6c9c819\" fiql=\"surname==Verdi\"/>\n   <PushTaskAnyFilter id=\"0dc46ba4-1270-4fa9-b3e1-79f940d4308f\" anyType_id=\"GROUP\" pushTask_id=\"51318433-cce4-4f71-8f45-9534b6c9c819\" fiql=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" id=\"24b1be9c-7e3b-443a-86c9-798ebce5eaf2\" name=\"Export on resource-testdb2\" resource_id=\"resource-testdb2\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n-        unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\" active=\"1\"/>\n+        unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\" active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>\n   <PushTaskAnyFilter id=\"3aa3b0b8-7469-4859-89d5-476ae5915101\" anyType_id=\"USER\" pushTask_id=\"24b1be9c-7e3b-443a-86c9-798ebce5eaf2\" fiql=\"surname==Verdi\"/>\n   <PushTaskAnyFilter id=\"f054810e-6842-4017-8f60-5b4031fa2c72\" anyType_id=\"GROUP\" pushTask_id=\"24b1be9c-7e3b-443a-86c9-798ebce5eaf2\" fiql=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" id=\"375c7b7f-9e3a-4833-88c9-b7787b0a69f2\" name=\"Export on resource-testdb2\" resource_id=\"resource-testdb2\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n-        unmatchingRule=\"IGNORE\" matchingRule=\"UPDATE\"  active=\"1\"/>\n+        unmatchingRule=\"IGNORE\" matchingRule=\"UPDATE\"  active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>\n   <PushTaskAnyFilter id=\"95f047fc-1a8a-45f4-b56c-6e04d8ca5567\" anyType_id=\"USER\" pushTask_id=\"375c7b7f-9e3a-4833-88c9-b7787b0a69f2\" fiql=\"surname==Verdi\"/>\n   <PushTaskAnyFilter id=\"013a4298-4b14-4f8b-9f59-191c2d53dbd8\" anyType_id=\"GROUP\" pushTask_id=\"375c7b7f-9e3a-4833-88c9-b7787b0a69f2\" fiql=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" id=\"fd905ba5-9d56-4f51-83e2-859096a67b75\" name=\"Export on resource-ldap\" resource_id=\"resource-ldap\"\n         sourceRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n-        unmatchingRule=\"ASSIGN\" matchingRule=\"UNLINK\" active=\"1\"/>\n+        unmatchingRule=\"ASSIGN\" matchingRule=\"UNLINK\" active=\"1\" jobDelegate_id=\"PushJobDelegate\"/>\n   <PushTaskAnyFilter id=\"30842acc-f2dd-4d47-b359-20db06c30803\" anyType_id=\"USER\" pushTask_id=\"fd905ba5-9d56-4f51-83e2-859096a67b75\" fiql=\"username==_NO_ONE_\"/>\n   <PushTaskAnyFilter id=\"9e4c0233-440e-4b5b-9563-11ec0f55a334\" anyType_id=\"GROUP\" pushTask_id=\"fd905ba5-9d56-4f51-83e2-859096a67b75\" fiql=\"name==citizen\"/>\n   <Task DTYPE=\"PullTask\" id=\"986867e2-993b-430e-8feb-aa9abb4c1dcd\" name=\"CSV Task (update matching; provision unmatching)\" resource_id=\"resource-csv\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" pullMode=\"INCREMENTAL\"\n-        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n   <AnyTemplatePullTask id=\"8bc41ba1-cc1d-4ee0-bb43-61cd148b414f\" pullTask_id=\"986867e2-993b-430e-8feb-aa9abb4c1dcd\" anyType_id=\"USER\"\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynMemberships\":[],\"plainAttrs\":[{\"schema\":\"firstname\",\"values\":[\"\"]},{\"schema\":\"userId\",\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"values\":[\"&apos;test&apos;\"]}]}'/>\n   <AnyTemplatePullTask id=\"9af0e343-8a37-42d2-9bc7-6e2e3b103219\" pullTask_id=\"986867e2-993b-430e-8feb-aa9abb4c1dcd\" anyType_id=\"GROUP\"\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"PullTask\" id=\"feae4e57-15ca-40d9-b973-8b9015efca49\" name=\"CSV (unlink matching; ignore unmatching)\" resource_id=\"resource-csv\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" pullMode=\"FULL_RECONCILIATION\"\n-        unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\" active=\"1\"/>\n+        unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n   <Task DTYPE=\"PullTask\" id=\"55d5e74b-497e-4bc0-9156-73abef4b9adc\" name=\"CSV (ignore matching; assign unmatching)\" resource_id=\"resource-csv\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" pullMode=\"FULL_RECONCILIATION\"\n-        unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\" active=\"1\"/>\n+        unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"0f618183-17ce-48bc-80bc-cc535f38983a\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"resource-testdb\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"PullTask\" id=\"30cfd653-257b-495f-8665-281281dbcb3d\" name=\"Scripted SQL\" resource_id=\"resource-db-scripted\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" pullMode=\"INCREMENTAL\"\n-        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n \n   <MailTemplate id=\"requestPasswordReset\"\n                 textTemplate=\"Hi,\n@@ -2510,14 +2527,16 @@ $$ }&#10;\n &lt;/xsl:stylesheet&gt;&#10;\"/>\n   \n   <Report id=\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\" name=\"test\" active=\"1\" template_id=\"sample\"/>\n-  <ReportletConfInstance id=\"5874f3fa-578c-42c6-83b0-c11adafc98b2\" report_id=\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\" \n-                         serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.UserReportletConf\",\"name\":\"testUserReportlet\",\"matchingCond\":null,\"plainAttrs\":[\"fullname\",\"gender\"],\"derAttrs\":[\"cn\"],\"virAttrs\":[\"virtualdata\"],\"features\":[\"key\",\"username\",\"workflowId\",\"status\",\"creationDate\",\"lastLoginDate\",\"changePwdDate\",\"passwordHistorySize\",\"failedLoginCount\",\"memberships\",\"resources\"]}'/>\n+  <Implementation id=\"UserReportletConf\" type=\"REPORTLET\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.report.UserReportletConf\",\"name\":\"testUserReportlet\",\"matchingCond\":null,\"plainAttrs\":[\"fullname\",\"gender\"],\"derAttrs\":[\"cn\"],\"virAttrs\":[\"virtualdata\"],\"features\":[\"key\",\"username\",\"workflowId\",\"status\",\"creationDate\",\"lastLoginDate\",\"changePwdDate\",\"passwordHistorySize\",\"failedLoginCount\",\"memberships\",\"resources\"]}'/>\n+  <ReportReportlet report_id=\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\" implementation_id=\"UserReportletConf\"/>\n   <ReportExec report_id=\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\" id=\"c13f39c5-0d35-4bff-ba79-3cd5de940369\"\n               status=\"SUCCESS\" startDate=\"2012-02-26 15:40:04\" endDate=\"2012-02-26 15:41:04\"/>\n \n   <Report id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" name=\"reconciliation\" active=\"1\" template_id=\"empty\"/>\n-  <ReportletConfInstance id=\"d6c2b475-4860-4eb1-8fde-618299c2a97c\" report_id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" \n-                         serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n+  <Implementation id=\"ReconciliationReportletConf\" type=\"REPORTLET\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n+  <ReportReportlet report_id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" implementation_id=\"ReconciliationReportletConf\"/>\n   \n   <SyncopeLogger logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n   "},{"sha":"b35beb4cdfc523dfdb4de33e9aa64377bd176694","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -129,10 +129,28 @@ under the License.\n \n   <AnyType id=\"GROUP\" kind=\"GROUP\"/>\n         \n+  <!-- Actual plain schemas -->\n+  <Implementation id=\"EmailAddressValidator\" type=\"VALIDATOR\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n   <SyncopeSchema id=\"email\"/>\n   <PlainSchema id=\"email\" type=\"String\" anyTypeClass_id=\"BaseUser\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n-               validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n+               validator_id=\"EmailAddressValidator\"/>\n+\n+  <Implementation id=\"PullJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate\"/>\n+  <Implementation id=\"PushJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate\"/>\n+\n+  <Implementation id=\"IdentityRecertification\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.job.IdentityRecertification\"/>\n+  <Task DTYPE=\"SchedTask\" id=\"e95555d2-1b09-42c8-b25b-f4c4ec598989\" name=\"Identity Recertification Task\"  active=\"1\"\n+        jobDelegate_id=\"IdentityRecertification\"/>\n+\n+  <Implementation id=\"ExpiredAccessTokenCleanup\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.job.ExpiredAccessTokenCleanup\"/>\n+  <Task DTYPE=\"SchedTask\" id=\"89de5014-e3f5-4462-84d8-d97575740baf\" name=\"Access Token Cleanup Task\"  active=\"1\"\n+        jobDelegate_id=\"ExpiredAccessTokenCleanup\" cronExpression=\"0 0/5 * * * ?\"/>\n   \n   <!-- Password reset notifications -->\n   <MailTemplate id=\"requestPasswordReset\""},{"sha":"7b84fc5a3cfe067fa68e167b592965c73a6a60f0","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -32,7 +32,7 @@\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n-import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBuilder;\n+import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.identityconnectors.framework.common.objects.SearchResult;\n \n /**\n@@ -115,7 +115,7 @@ void delete(\n      */\n     void filteredReconciliation(\n             ObjectClass objectClass,\n-            ReconciliationFilterBuilder filterBuilder,\n+            ReconFilterBuilder filterBuilder,\n             SyncResultsHandler handler,\n             OperationOptions options);\n "},{"sha":"8f88d63020214edf08b549545c29e015ff1de6e9","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ImplementationDataBinder.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FImplementationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FImplementationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FImplementationDataBinder.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+\n+public interface ImplementationDataBinder {\n+\n+    Implementation create(ImplementationTO implementationTO);\n+\n+    void update(Implementation implementation, ImplementationTO implementationTO);\n+\n+    ImplementationTO getImplementationTO(Implementation implementation);\n+\n+}"},{"sha":"61e430cfb7de1b2d7422e4171260d7c3f8e6540e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/notification/RecipientsProvider.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FRecipientsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FRecipientsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FRecipientsProvider.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -21,7 +21,7 @@\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n \n-public interface NotificationRecipientsProvider {\n+public interface RecipientsProvider {\n \n     Set<String> provideRecipients(Notification notification);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/notification/NotificationRecipientsProvider.java"},{"sha":"8d77d6b40f678ab86a03ae5352b0bf4de3e6b25e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ReconFilterBuilder.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FReconFilterBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FReconFilterBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FReconFilterBuilder.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -25,7 +25,7 @@\n  * Interface to be implemented for performing filtered reconciliation of a\n  * {@link org.apache.syncope.core.persistence.api.entity.task.PullTask}.\n  */\n-public interface ReconciliationFilterBuilder {\n+public interface ReconFilterBuilder {\n \n     FilteredResultsHandler.PassThroughFilter PASS_THROUGH = new FilteredResultsHandler.PassThroughFilter();\n ","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ReconciliationFilterBuilder.java"},{"sha":"2b890ff0cc8732e7290c7a4ec85cae69b04c9553","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBuilder;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n@@ -62,6 +61,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ClassUtils;\n+import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n \n public class ConnectorFacadeProxy implements Connector {\n \n@@ -314,7 +314,7 @@ public void fullReconciliation(\n     @Override\n     public void filteredReconciliation(\n             final ObjectClass objectClass,\n-            final ReconciliationFilterBuilder filterBuilder,\n+            final ReconFilterBuilder filterBuilder,\n             final SyncResultsHandler handler,\n             final OperationOptions options) {\n "},{"sha":"0977a606c030fc9cf25f4acf31eb5853a8e1b11b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -25,6 +25,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n@@ -102,14 +103,13 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n             String connObjectKeyValue = connObjectKeyItem.isPresent()\n                     ? mappingManager.getConnObjectKeyValue(any, entry.getKey()).orElse(null)\n                     : null;\n-            if (!connObjectKeyItem.isPresent()) {\n-                LOG.error(\"No ConnObjectKey found for {}, ignoring...\", entry.getKey());\n+            if (!connObjectKeyItem.isPresent() || connObjectKeyValue == null) {\n+                LOG.error(\"No ConnObjectKey or value found for {}, ignoring...\", entry.getKey());\n             } else {\n                 Set<MappingItem> linkingMappingItems = new HashSet<>();\n                 linkingMappingItems.add(connObjectKeyItem.get());\n-                for (VirSchema schema : entry.getValue()) {\n-                    linkingMappingItems.add(schema.asLinkingMappingItem());\n-                }\n+                linkingMappingItems.addAll(entry.getValue().stream().\n+                        map(schema -> schema.asLinkingMappingItem()).collect(Collectors.toSet()));\n \n                 Connector connector = connFactory.getConnector(entry.getKey().getResource());\n                 try {"},{"sha":"5387a75334460f36aa55c11dfa196858df562056","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -354,7 +354,7 @@ protected PropagationByResource fill(\n         for (StringPatchItem patch : anyPatch.getAuxClasses()) {\n             AnyTypeClass auxClass = anyTypeClassDAO.find(patch.getValue());\n             if (auxClass == null) {\n-                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", patch.getValue());\n+                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \" {}, ignoring...\", patch.getValue());\n             } else {\n                 switch (patch.getOperation()) {\n                     case ADD_REPLACE:\n@@ -372,7 +372,7 @@ protected PropagationByResource fill(\n         for (StringPatchItem patch : anyPatch.getResources()) {\n             ExternalResource resource = resourceDAO.find(patch.getValue());\n             if (resource == null) {\n-                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", patch.getValue());\n+                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \" {}, ignoring...\", patch.getValue());\n             } else {\n                 switch (patch.getOperation()) {\n                     case ADD_REPLACE:\n@@ -396,8 +396,8 @@ protected PropagationByResource fill(\n                 filter(patch -> patch.getAttrTO() != null).forEach(patch -> {\n             PlainSchema schema = getPlainSchema(patch.getAttrTO().getSchema());\n             if (schema == null) {\n-                LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n-                        + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n+                LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName() + \" {}, ignoring...\",\n+                        patch.getAttrTO().getSchema());\n             } else {\n                 PlainAttr<?> attr = (PlainAttr<?>) any.getPlainAttr(schema.getKey()).orElse(null);\n                 if (attr == null) {\n@@ -445,7 +445,7 @@ protected void fill(\n                 map(className -> anyTypeClassDAO.find(className)).\n                 forEachOrdered(auxClass -> {\n                     if (auxClass == null) {\n-                        LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", auxClass);\n+                        LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \" {}, ignoring...\", auxClass);\n                     } else {\n                         any.add(auxClass);\n                     }\n@@ -488,7 +488,7 @@ protected void fill(\n         anyTO.getResources().forEach(resourceKey -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             if (resource == null) {\n-                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceKey);\n+                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \" {}, ignoring...\", resourceKey);\n             } else {\n                 any.add(resource);\n             }"},{"sha":"a80ba3a6f59b3f49481cda470b67870a95dcc2c3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeClassDataBinderImpl.java","status":"modified","additions":22,"deletions":25,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,15 +19,16 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Collections;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.data.AnyTypeClassDataBinder;\n@@ -69,50 +70,50 @@ public void update(final AnyTypeClass anyTypeClass, final AnyTypeClassTO anyType\n             anyTypeClass.setKey(anyTypeClassTO.getKey());\n         }\n \n-        for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n+        plainSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass)).forEach(schema -> {\n             schema.setAnyTypeClass(null);\n-        }\n+        });\n \n         anyTypeClass.getPlainSchemas().clear();\n-        for (String schemaName : anyTypeClassTO.getPlainSchemas()) {\n+        anyTypeClassTO.getPlainSchemas().forEach(schemaName -> {\n             PlainSchema schema = plainSchemaDAO.find(schemaName);\n             if (schema == null || schema.getAnyTypeClass() != null) {\n                 LOG.debug(\"Invalid or already in use\" + PlainSchema.class.getSimpleName()\n                         + \"{}, ignoring...\", schemaName);\n             } else {\n                 anyTypeClass.add(schema);\n             }\n-        }\n+        });\n \n-        for (DerSchema schema : derSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n+        derSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass)).forEach((schema) -> {\n             schema.setAnyTypeClass(null);\n-        }\n+        });\n \n         anyTypeClass.getDerSchemas().clear();\n-        for (String schemaName : anyTypeClassTO.getDerSchemas()) {\n+        anyTypeClassTO.getDerSchemas().forEach(schemaName -> {\n             DerSchema schema = derSchemaDAO.find(schemaName);\n             if (schema == null || schema.getAnyTypeClass() != null) {\n                 LOG.debug(\"Invalid or already in use\" + DerSchema.class.getSimpleName()\n                         + \"{}, ignoring...\", schemaName);\n             } else {\n                 anyTypeClass.add(schema);\n             }\n-        }\n+        });\n \n-        for (VirSchema schema : virSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n+        virSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass)).forEach(schema -> {\n             schema.setAnyTypeClass(null);\n-        }\n+        });\n \n         anyTypeClass.getVirSchemas().clear();\n-        for (String schemaName : anyTypeClassTO.getVirSchemas()) {\n+        anyTypeClassTO.getVirSchemas().forEach(schemaName -> {\n             VirSchema schema = virSchemaDAO.find(schemaName);\n             if (schema == null || schema.getAnyTypeClass() != null) {\n                 LOG.debug(\"Invalid or already in use\" + VirSchema.class.getSimpleName()\n                         + \"{}, ignoring...\", schemaName);\n             } else {\n                 anyTypeClass.add(schema);\n             }\n-        }\n+        });\n     }\n \n     @Override\n@@ -121,19 +122,15 @@ public AnyTypeClassTO getAnyTypeClassTO(final AnyTypeClass anyTypeClass) {\n \n         anyTypeClassTO.setKey(anyTypeClass.getKey());\n \n-        for (AnyType anyType : anyTypeDAO.findByTypeClass(anyTypeClass)) {\n-            anyTypeClassTO.getInUseByTypes().add(anyType.getKey());\n-        }\n+        anyTypeClassTO.getInUseByTypes().addAll(\n+                anyTypeDAO.findByTypeClass(anyTypeClass).stream().map(Entity::getKey).collect(Collectors.toList()));\n \n-        for (PlainSchema schema : anyTypeClass.getPlainSchemas()) {\n-            anyTypeClassTO.getPlainSchemas().add(schema.getKey());\n-        }\n-        for (DerSchema schema : anyTypeClass.getDerSchemas()) {\n-            anyTypeClassTO.getDerSchemas().add(schema.getKey());\n-        }\n-        for (VirSchema schema : anyTypeClass.getVirSchemas()) {\n-            anyTypeClassTO.getVirSchemas().add(schema.getKey());\n-        }\n+        anyTypeClassTO.getPlainSchemas().addAll(\n+                anyTypeClass.getPlainSchemas().stream().map(Entity::getKey).collect(Collectors.toList()));\n+        anyTypeClassTO.getDerSchemas().addAll(\n+                anyTypeClass.getDerSchemas().stream().map(Entity::getKey).collect(Collectors.toList()));\n+        anyTypeClassTO.getVirSchemas().addAll(\n+                anyTypeClass.getVirSchemas().stream().map(Entity::getKey).collect(Collectors.toList()));\n \n         return anyTypeClassTO;\n     }"},{"sha":"974088c75291b3607a341207b4a7a43289cb4650","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -119,7 +119,7 @@ public void update(final AnyType anyType, final AnyTypeTO anyTypeTO) {\n         anyTypeTO.getClasses().forEach(anyTypeClassName -> {\n             AnyTypeClass anyTypeClass = anyTypeClassDAO.find(anyTypeClassName);\n             if (anyTypeClass == null) {\n-                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", anyTypeClassName);\n+                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \" {}, ignoring...\", anyTypeClassName);\n             } else {\n                 anyType.add(anyTypeClass);\n             }"},{"sha":"2b980767f17f13f833c67111b110687c98415a79","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import java.lang.reflect.Modifier;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.policy.RuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n+import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n+import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.BeanUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider;\n+\n+@Component\n+public class ImplementationDataBinderImpl implements ImplementationDataBinder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ImplementationDataBinder.class);\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public Implementation create(final ImplementationTO implementationTO) {\n+        Implementation implementation = entityFactory.newEntity(Implementation.class);\n+        update(implementation, implementationTO);\n+        return implementation;\n+    }\n+\n+    @Override\n+    public void update(final Implementation implementation, final ImplementationTO implementationTO) {\n+        BeanUtils.copyProperties(implementationTO, implementation);\n+\n+        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidImplementation);\n+\n+        if (implementation.getBody() == null) {\n+            sce.getElements().add(\"No actual implementation provided\");\n+            throw sce;\n+        }\n+\n+        if (implementation.getEngine() == ImplementationEngine.JAVA) {\n+            Class<?> base = null;\n+            switch (implementation.getType()) {\n+                case REPORTLET:\n+                    base = Reportlet.class;\n+                    break;\n+\n+                case ACCOUNT_RULE:\n+                    base = AccountRule.class;\n+                    break;\n+\n+                case PASSWORD_RULE:\n+                    base = PasswordRule.class;\n+                    break;\n+\n+                case ITEM_TRANSFORMER:\n+                    base = ItemTransformer.class;\n+                    break;\n+\n+                case TASKJOB_DELEGATE:\n+                    base = SchedTaskJobDelegate.class;\n+                    break;\n+\n+                case RECON_FILTER_BUILDER:\n+                    base = ReconFilterBuilder.class;\n+                    break;\n+\n+                case LOGIC_ACTIONS:\n+                    base = LogicActions.class;\n+                    break;\n+\n+                case PROPAGATION_ACTIONS:\n+                    base = PropagationActions.class;\n+                    break;\n+\n+                case PULL_ACTIONS:\n+                    base = PullActions.class;\n+                    break;\n+\n+                case PUSH_ACTIONS:\n+                    base = PushActions.class;\n+                    break;\n+\n+                case PULL_CORRELATION_RULE:\n+                    base = PullCorrelationRule.class;\n+                    break;\n+\n+                case VALIDATOR:\n+                    base = Validator.class;\n+                    break;\n+\n+                case RECIPIENTS_PROVIDER:\n+                    base = RecipientsProvider.class;\n+                    break;\n+\n+                default:\n+            }\n+\n+            if (base == null) {\n+                sce.getElements().add(\"No Java interface found for \" + implementation.getType());\n+                throw sce;\n+            }\n+\n+            if (implementation.getType() == ImplementationType.REPORTLET) {\n+                ReportletConf reportlet = POJOHelper.deserialize(implementation.getBody(), ReportletConf.class);\n+                if (reportlet == null) {\n+                    sce.getElements().add(\"Could not deserialize as ReportletConf\");\n+                    throw sce;\n+                }\n+            } else if (implementation.getType() == ImplementationType.ACCOUNT_RULE\n+                    || implementation.getType() == ImplementationType.PASSWORD_RULE) {\n+\n+                RuleConf rule = POJOHelper.deserialize(implementation.getBody(), RuleConf.class);\n+                if (rule == null) {\n+                    sce.getElements().add(\"Could not deserialize as neither Account nor Password RuleConf\");\n+                    throw sce;\n+                }\n+            } else {\n+                Class<?> clazz = null;\n+                try {\n+                    clazz = Class.forName(implementation.getBody());\n+                } catch (Exception e) {\n+                    LOG.error(\"Class '{}' not found\", implementation.getBody(), e);\n+                    sce.getElements().add(\"No Java class found: \" + implementation.getBody());\n+                    throw sce;\n+                }\n+                if (!base.isAssignableFrom(clazz)) {\n+                    sce.getElements().add(\n+                            \"Java class \" + implementation.getBody() + \" must comply with \" + base.getName());\n+                    throw sce;\n+                }\n+                if (Modifier.isAbstract(clazz.getModifiers())) {\n+                    sce.getElements().add(\"Java class \" + implementation.getBody() + \" is abstract\");\n+                    throw sce;\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ImplementationTO getImplementationTO(final Implementation implementation) {\n+        ImplementationTO implementationTO = new ImplementationTO();\n+        BeanUtils.copyProperties(implementation, implementationTO);\n+        return implementationTO;\n+    }\n+\n+}"},{"sha":"84a3085888d55dc0fac8ec324ee1150e6af7629a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java","status":"modified","additions":28,"deletions":7,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,9 +31,11 @@\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.slf4j.Logger;\n@@ -46,14 +48,17 @@ public class NotificationDataBinderImpl implements NotificationDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(NotificationDataBinder.class);\n \n-    private static final String[] IGNORE_PROPERTIES = { \"key\", \"template\", \"abouts\" };\n+    private static final String[] IGNORE_PROPERTIES = { \"key\", \"template\", \"abouts\", \"recipientsProvider\" };\n \n     @Autowired\n     private MailTemplateDAO mailTemplateDAO;\n \n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -62,17 +67,21 @@ public class NotificationDataBinderImpl implements NotificationDataBinder {\n \n     @Override\n     public NotificationTO getNotificationTO(final Notification notification) {\n-        NotificationTO result = new NotificationTO();\n-        result.setKey(notification.getKey());\n-        result.setTemplate(notification.getTemplate().getKey());\n+        NotificationTO notificationTO = new NotificationTO();\n+        notificationTO.setKey(notification.getKey());\n+        notificationTO.setTemplate(notification.getTemplate().getKey());\n \n-        BeanUtils.copyProperties(notification, result, IGNORE_PROPERTIES);\n+        BeanUtils.copyProperties(notification, notificationTO, IGNORE_PROPERTIES);\n \n         notification.getAbouts().forEach(about -> {\n-            result.getAbouts().put(about.getAnyType().getKey(), about.get());\n+            notificationTO.getAbouts().put(about.getAnyType().getKey(), about.get());\n         });\n \n-        return result;\n+        if (notification.getRecipientsProvider() != null) {\n+            notificationTO.setRecipientsProvider(notification.getRecipientsProvider().getKey());\n+        }\n+\n+        return notificationTO;\n     }\n \n     @Override\n@@ -140,5 +149,17 @@ public void update(final Notification notification, final NotificationTO notific\n \n         // 3. verify recipientAttrName\n         intAttrNameParser.parse(notification.getRecipientAttrName(), AnyTypeKind.USER);\n+\n+        if (notificationTO.getRecipientsProvider() == null) {\n+            notification.setRecipientsProvider(null);\n+        } else {\n+            Implementation recipientsProvider = implementationDAO.find(notificationTO.getRecipientsProvider());\n+            if (recipientsProvider == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                        notificationTO.getRecipientsProvider());\n+            } else {\n+                notification.setRecipientsProvider(recipientsProvider);\n+            }\n+        }\n     }\n }"},{"sha":"267a6a26a1b0eb06ca641a037fdff81273d4d656","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":67,"deletions":22,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,19 +18,23 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n-import org.apache.syncope.common.lib.policy.AbstractAccountRuleConf;\n-import org.apache.syncope.common.lib.policy.AbstractPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n-import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PullPolicySpec;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n@@ -52,6 +56,12 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {\n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -70,10 +80,18 @@ private <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO po\n             passwordPolicy.setAllowNullPassword(passwordPolicyTO.isAllowNullPassword());\n             passwordPolicy.setHistoryLength(passwordPolicyTO.getHistoryLength());\n \n-            passwordPolicy.removeAllRuleConfs();\n-            for (PasswordRuleConf conf : passwordPolicyTO.getRuleConfs()) {\n-                passwordPolicy.add(conf);\n-            }\n+            passwordPolicyTO.getRules().forEach(ruleKey -> {\n+                Implementation rule = implementationDAO.find(ruleKey);\n+                if (rule == null) {\n+                    LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", ruleKey);\n+                } else {\n+                    passwordPolicy.add(rule);\n+                }\n+            });\n+            // remove all implementations not contained in the TO\n+            passwordPolicy.getRules().removeAll(passwordPolicy.getRules().stream().\n+                    filter(implementation -> !passwordPolicyTO.getRules().contains(implementation.getKey())).\n+                    collect(Collectors.toList()));\n         } else if (policyTO instanceof AccountPolicyTO) {\n             if (result == null) {\n                 result = (T) entityFactory.newEntity(AccountPolicy.class);\n@@ -85,26 +103,54 @@ private <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO po\n             accountPolicy.setMaxAuthenticationAttempts(accountPolicyTO.getMaxAuthenticationAttempts());\n             accountPolicy.setPropagateSuspension(accountPolicyTO.isPropagateSuspension());\n \n-            accountPolicy.removeAllRuleConfs();\n-            for (AccountRuleConf conf : accountPolicyTO.getRuleConfs()) {\n-                accountPolicy.add(conf);\n-            }\n+            accountPolicyTO.getRules().forEach(ruleKey -> {\n+                Implementation rule = implementationDAO.find(ruleKey);\n+                if (rule == null) {\n+                    LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", ruleKey);\n+                } else {\n+                    accountPolicy.add(rule);\n+                }\n+            });\n+            // remove all implementations not contained in the TO\n+            accountPolicy.getRules().removeAll(accountPolicy.getRules().stream().\n+                    filter(implementation -> !accountPolicyTO.getRules().contains(implementation.getKey())).\n+                    collect(Collectors.toList()));\n \n             accountPolicy.getResources().clear();\n-            for (String resourceName : accountPolicyTO.getPassthroughResources()) {\n+            accountPolicyTO.getPassthroughResources().forEach(resourceName -> {\n                 ExternalResource resource = resourceDAO.find(resourceName);\n                 if (resource == null) {\n                     LOG.debug(\"Ignoring invalid resource {} \", resourceName);\n                 } else {\n                     accountPolicy.add(resource);\n                 }\n-            }\n+            });\n         } else if (policyTO instanceof PullPolicyTO) {\n             if (result == null) {\n                 result = (T) entityFactory.newEntity(PullPolicy.class);\n             }\n \n-            ((PullPolicy) result).setSpecification(((PullPolicyTO) policyTO).getSpecification());\n+            PullPolicy pullPolicy = PullPolicy.class.cast(result);\n+            PullPolicyTO pullPolicyTO = PullPolicyTO.class.cast(policyTO);\n+\n+            PullPolicySpec pullPolicySpec = SerializationUtils.clone(pullPolicyTO.getSpecification());\n+            pullPolicySpec.getCorrelationRules().clear();\n+            pullPolicyTO.getSpecification().getCorrelationRules().entrySet().forEach(entry -> {\n+                AnyType anyType = anyTypeDAO.find(entry.getKey());\n+                if (anyType == null) {\n+                    LOG.debug(\"Invalid \" + AnyType.class.getSimpleName() + \" {}, ignoring...\",\n+                            entry.getKey());\n+                } else {\n+                    Implementation rule = implementationDAO.find(entry.getValue());\n+                    if (rule == null) {\n+                        LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                                entry.getValue());\n+                    } else {\n+                        pullPolicySpec.getCorrelationRules().put(anyType.getKey(), rule.getKey());\n+                    }\n+                }\n+            });\n+            pullPolicy.setSpecification(pullPolicySpec);\n         }\n \n         if (result != null) {\n@@ -137,9 +183,8 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n             passwordPolicyTO.setAllowNullPassword(passwordPolicy.isAllowNullPassword());\n             passwordPolicyTO.setHistoryLength(passwordPolicy.getHistoryLength());\n \n-            for (PasswordRuleConf ruleConf : passwordPolicy.getRuleConfs()) {\n-                passwordPolicyTO.getRuleConfs().add((AbstractPasswordRuleConf) ruleConf);\n-            }\n+            passwordPolicyTO.getRules().addAll(\n+                    passwordPolicy.getRules().stream().map(Entity::getKey).collect(Collectors.toList()));\n         } else if (policy instanceof AccountPolicy) {\n             AccountPolicy accountPolicy = AccountPolicy.class.cast(policy);\n             AccountPolicyTO accountPolicyTO = new AccountPolicyTO();\n@@ -148,11 +193,11 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n             accountPolicyTO.setMaxAuthenticationAttempts(accountPolicy.getMaxAuthenticationAttempts());\n             accountPolicyTO.setPropagateSuspension(accountPolicy.isPropagateSuspension());\n \n-            for (AccountRuleConf ruleConf : accountPolicy.getRuleConfs()) {\n-                accountPolicyTO.getRuleConfs().add((AbstractAccountRuleConf) ruleConf);\n-            }\n+            accountPolicyTO.getRules().addAll(\n+                    accountPolicy.getRules().stream().map(Entity::getKey).collect(Collectors.toList()));\n \n-            accountPolicyTO.getPassthroughResources().addAll(accountPolicy.getResourceKeys());\n+            accountPolicyTO.getPassthroughResources().addAll(\n+                    accountPolicy.getResources().stream().map(Entity::getKey).collect(Collectors.toList()));\n         } else if (policy instanceof PullPolicy) {\n             policyTO = (T) new PullPolicyTO();\n             ((PullPolicyTO) policyTO).setSpecification(((PullPolicy) policy).getSpecification());"},{"sha":"08bd7872ae1e85dcaec085d912b272e3f788a0a3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":36,"deletions":12,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -27,13 +27,14 @@\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -52,6 +53,9 @@ public class RealmDataBinderImpl implements RealmDataBinder {\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -123,14 +127,21 @@ public Realm create(final String parentPath, final RealmTO realmTO) {\n             }\n         }\n \n-        realm.getActionsClassNames().addAll(realmTO.getActionsClassNames());\n+        realmTO.getActions().forEach(logicActionsKey -> {\n+            Implementation logicAction = implementationDAO.find(logicActionsKey);\n+            if (logicAction == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", logicActionsKey);\n+            } else {\n+                realm.add(logicAction);\n+            }\n+        });\n \n         setTemplates(realmTO, realm);\n \n         realmTO.getResources().forEach(resourceKey -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             if (resource == null) {\n-                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceKey);\n+                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \" {}, ignoring...\", resourceKey);\n             } else {\n                 realm.add(resource);\n             }\n@@ -172,16 +183,26 @@ public PropagationByResource update(final Realm realm, final RealmTO realmTO) {\n             }\n         }\n \n-        realm.getActionsClassNames().clear();\n-        realm.getActionsClassNames().addAll(realmTO.getActionsClassNames());\n+        realmTO.getActions().forEach(logicActionsKey -> {\n+            Implementation logicActions = implementationDAO.find(logicActionsKey);\n+            if (logicActions == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", logicActionsKey);\n+            } else {\n+                realm.add(logicActions);\n+            }\n+        });\n+        // remove all implementations not contained in the TO\n+        realm.getActions().removeAll(realm.getActions().stream().\n+                filter(implementation -> !realmTO.getActions().contains(implementation.getKey())).\n+                collect(Collectors.toList()));\n \n         setTemplates(realmTO, realm);\n \n-        final PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource propByRes = new PropagationByResource();\n         realmTO.getResources().forEach(resourceKey -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             if (resource == null) {\n-                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceKey);\n+                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \" {}, ignoring...\", resourceKey);\n             } else {\n                 realm.add(resource);\n                 propByRes.add(ResourceOperation.CREATE, resource.getKey());\n@@ -212,15 +233,18 @@ public RealmTO getRealmTO(final Realm realm, final boolean admin) {\n         if (admin) {\n             realmTO.setAccountPolicy(realm.getAccountPolicy() == null ? null : realm.getAccountPolicy().getKey());\n             realmTO.setPasswordPolicy(realm.getPasswordPolicy() == null ? null : realm.getPasswordPolicy().getKey());\n-            realmTO.getActionsClassNames().addAll(realm.getActionsClassNames());\n \n-            for (AnyTemplate template : realm.getTemplates()) {\n+            realm.getActions().forEach(action -> {\n+                realmTO.getActions().add(action.getKey());\n+            });\n+\n+            realm.getTemplates().forEach(template -> {\n                 realmTO.getTemplates().put(template.getAnyType().getKey(), template.get());\n-            }\n+            });\n \n-            for (ExternalResource resource : realm.getResources()) {\n+            realm.getResources().forEach(resource -> {\n                 realmTO.getResources().add(resource.getKey());\n-            }\n+            });\n         }\n \n         return realmTO;"},{"sha":"b2b9808c048a99a50d770e5552066933f1bb80f2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":23,"deletions":13,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,21 +18,23 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.report.AbstractReportletConf;\n import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n-import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.JobType;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n@@ -59,6 +61,9 @@ public class ReportDataBinderImpl implements ReportDataBinder {\n     @Autowired\n     private ReportExecDAO reportExecDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Autowired\n     private SchedulerFactoryBean scheduler;\n \n@@ -74,10 +79,18 @@ public void getReport(final Report report, final ReportTO reportTO) {\n         }\n         report.setTemplate(template);\n \n-        report.removeAllReportletConfs();\n-        for (ReportletConf conf : reportTO.getReportletConfs()) {\n-            report.add(conf);\n-        }\n+        reportTO.getReportlets().forEach(reportletKey -> {\n+            Implementation reportlet = implementationDAO.find(reportletKey);\n+            if (reportlet == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", reportletKey);\n+            } else {\n+                report.add(reportlet);\n+            }\n+        });\n+        // remove all implementations not contained in the TO\n+        report.getReportlets().removeAll(report.getReportlets().stream().\n+                filter(reportlet -> !reportTO.getReportlets().contains(reportlet.getKey())).\n+                collect(Collectors.toList()));\n     }\n \n     @Override\n@@ -88,10 +101,8 @@ public ReportTO getReportTO(final Report report) {\n \n         BeanUtils.copyProperties(report, reportTO, IGNORE_REPORT_PROPERTIES);\n \n-        reportTO.getReportletConfs().clear();\n-        for (ReportletConf reportletConf : report.getReportletConfs()) {\n-            reportTO.getReportletConfs().add((AbstractReportletConf) reportletConf);\n-        }\n+        reportTO.getReportlets().addAll(\n+                report.getReportlets().stream().map(Entity::getKey).collect(Collectors.toList()));\n \n         ReportExec latestExec = reportExecDAO.findLatestStarted(report);\n         if (latestExec == null) {\n@@ -104,9 +115,8 @@ public ReportTO getReportTO(final Report report) {\n             reportTO.setLastExec(reportTO.getStart());\n         }\n \n-        for (ReportExec reportExec : report.getExecs()) {\n-            reportTO.getExecutions().add(getExecTO(reportExec));\n-        }\n+        reportTO.getExecutions().addAll(report.getExecs().stream().\n+                map(reportExec -> getExecTO(reportExec)).collect(Collectors.toList()));\n \n         String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(report).getName());\n         try {"},{"sha":"db151aff1bb571890bbfa2b8b868603eeb41ca32","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":53,"deletions":4,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -52,9 +52,12 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceHistoryConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n@@ -77,7 +80,7 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ResourceDataBinder.class);\n \n-    private static final String[] ITEM_IGNORE_PROPERTIES = { \"key\", \"mapping\" };\n+    private static final String[] ITEM_IGNORE_PROPERTIES = { \"key\", \"mapping\", \"transformers\" };\n \n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n@@ -100,6 +103,9 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n     @Autowired\n     private ConfDAO confDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -321,6 +327,19 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                             orgUnit.add(item);\n                         }\n \n+                        itemTO.getTransformers().forEach(transformerKey -> {\n+                            Implementation transformer = implementationDAO.find(transformerKey);\n+                            if (transformer == null) {\n+                                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                                        transformerKey);\n+                            } else {\n+                                item.add(transformer);\n+                            }\n+                        });\n+                        // remove all implementations not contained in the TO\n+                        item.getTransformers().removeAll(item.getTransformers().stream().\n+                                filter(implementation -> !itemTO.getTransformers().contains(implementation.getKey())).\n+                                collect(Collectors.toList()));\n                     }\n                 }\n             }\n@@ -352,8 +371,18 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         resource.getCapabilitiesOverride().clear();\n         resource.getCapabilitiesOverride().addAll(resourceTO.getCapabilitiesOverride());\n \n-        resource.getPropagationActionsClassNames().clear();\n-        resource.getPropagationActionsClassNames().addAll(resourceTO.getPropagationActionsClassNames());\n+        resourceTO.getPropagationActions().forEach(propagationActionKey -> {\n+            Implementation propagationAction = implementationDAO.find(propagationActionKey);\n+            if (propagationAction == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", propagationActionKey);\n+            } else {\n+                resource.add(propagationAction);\n+            }\n+        });\n+        // remove all implementations not contained in the TO\n+        resource.getPropagationActions().removeAll(resource.getPropagationActions().stream().\n+                filter(implementation -> !resourceTO.getPropagationActions().contains(implementation.getKey())).\n+                collect(Collectors.toList()));\n \n         return resource;\n     }\n@@ -421,6 +450,7 @@ private void populateMapping(\n                         MappingItem item = entityFactory.newEntity(MappingItem.class);\n                         BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);\n                         item.setMapping(mapping);\n+\n                         if (item.isConnObjectKey()) {\n                             if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n                                 invalidMapping.getElements().\n@@ -436,6 +466,20 @@ private void populateMapping(\n                             mapping.add(item);\n                         }\n \n+                        itemTO.getTransformers().forEach(transformerKey -> {\n+                            Implementation transformer = implementationDAO.find(transformerKey);\n+                            if (transformer == null) {\n+                                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                                        transformerKey);\n+                            } else {\n+                                item.add(transformer);\n+                            }\n+                        });\n+                        // remove all implementations not contained in the TO\n+                        item.getTransformers().removeAll(item.getTransformers().stream().\n+                                filter(implementation -> !itemTO.getTransformers().contains(implementation.getKey())).\n+                                collect(Collectors.toList()));\n+\n                         if (intAttrName.getEnclosingGroup() != null\n                                 && item.getPurpose() != MappingPurpose.PROPAGATION) {\n \n@@ -495,6 +539,10 @@ private void populateItems(final List<? extends Item> items, final ItemContainer\n             } else {\n                 containerTO.add(itemTO);\n             }\n+\n+            item.getTransformers().forEach(transformer -> {\n+                itemTO.getTransformers().add(transformer.getKey());\n+            });\n         });\n     }\n \n@@ -583,7 +631,8 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         resourceTO.setOverrideCapabilities(resource.isOverrideCapabilities());\n         resourceTO.getCapabilitiesOverride().addAll(resource.getCapabilitiesOverride());\n \n-        resourceTO.getPropagationActionsClassNames().addAll(resource.getPropagationActionsClassNames());\n+        resourceTO.getPropagationActions().addAll(\n+                resource.getPropagationActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n \n         return resourceTO;\n     }"},{"sha":"e469d66b238233c71ca201a298ce37b296dee73a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":131,"deletions":44,"changes":175,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,6 +31,8 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -50,9 +52,12 @@\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n@@ -77,7 +82,7 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n \n     private static final String[] IGNORE_TASK_PROPERTIES = {\n         \"destinationRealm\", \"templates\", \"filters\", \"executions\", \"resource\", \"matchingRule\", \"unmatchingRule\",\n-        \"notification\" };\n+        \"notification\", \"jobDelegate\", \"actions\" };\n \n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"key\", \"task\" };\n \n@@ -93,6 +98,9 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -108,11 +116,22 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n     private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO taskTO) {\n         if (task instanceof PushTask && taskTO instanceof PushTaskTO) {\n             PushTask pushTask = (PushTask) task;\n-            final PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n-\n-            pushTask.setJobDelegateClassName(pushTaskTO.getJobDelegateClassName() == null\n-                    ? PushJobDelegate.class.getName()\n-                    : pushTaskTO.getJobDelegateClassName());\n+            PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n+\n+            Implementation jobDelegate = pushTaskTO.getJobDelegate() == null\n+                    ? implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n+                            filter(impl -> PushJobDelegate.class.getName().equals(impl.getBody())).\n+                            findFirst().orElse(null)\n+                    : implementationDAO.find(pushTaskTO.getJobDelegate());\n+            if (jobDelegate == null) {\n+                jobDelegate = entityFactory.newEntity(Implementation.class);\n+                jobDelegate.setKey(PushJobDelegate.class.getSimpleName());\n+                jobDelegate.setEngine(ImplementationEngine.JAVA);\n+                jobDelegate.setType(ImplementationType.TASKJOB_DELEGATE);\n+                jobDelegate.setBody(PushJobDelegate.class.getName());\n+                jobDelegate = implementationDAO.save(jobDelegate);\n+            }\n+            pushTask.setJobDelegate(jobDelegate);\n \n             pushTask.setSourceRealm(realmDAO.findByFullPath(pushTaskTO.getSourceRealm()));\n \n@@ -143,16 +162,38 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n                             collect(Collectors.toList()));\n         } else if (task instanceof PullTask && taskTO instanceof PullTaskTO) {\n             PullTask pullTask = (PullTask) task;\n-            final PullTaskTO pullTaskTO = (PullTaskTO) taskTO;\n+            PullTaskTO pullTaskTO = (PullTaskTO) taskTO;\n+\n+            Implementation jobDelegate = pullTaskTO.getJobDelegate() == null\n+                    ? implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n+                            filter(impl -> PullJobDelegate.class.getName().equals(impl.getBody())).\n+                            findFirst().orElse(null)\n+                    : implementationDAO.find(pullTaskTO.getJobDelegate());\n+            if (jobDelegate == null) {\n+                jobDelegate = entityFactory.newEntity(Implementation.class);\n+                jobDelegate.setKey(PullJobDelegate.class.getSimpleName());\n+                jobDelegate.setEngine(ImplementationEngine.JAVA);\n+                jobDelegate.setType(ImplementationType.TASKJOB_DELEGATE);\n+                jobDelegate.setBody(PullJobDelegate.class.getName());\n+                jobDelegate = implementationDAO.save(jobDelegate);\n+            }\n+            pullTask.setJobDelegate(jobDelegate);\n \n             pullTask.setPullMode(pullTaskTO.getPullMode());\n-            pullTask.setReconciliationFilterBuilderClassName(pullTaskTO.getReconciliationFilterBuilderClassName());\n \n-            pullTask.setDestinationRealm(realmDAO.findByFullPath(pullTaskTO.getDestinationRealm()));\n+            if (pullTaskTO.getReconFilterBuilder() == null) {\n+                pullTask.setReconFilterBuilder(null);\n+            } else {\n+                Implementation reconFilterBuilder = implementationDAO.find(pullTaskTO.getReconFilterBuilder());\n+                if (reconFilterBuilder == null) {\n+                    LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                            pullTaskTO.getReconFilterBuilder());\n+                } else {\n+                    pullTask.setReconFilterBuilder(reconFilterBuilder);\n+                }\n+            }\n \n-            pullTask.setJobDelegateClassName(pullTaskTO.getJobDelegateClassName() == null\n-                    ? PullJobDelegate.class.getName()\n-                    : pullTaskTO.getJobDelegateClassName());\n+            pullTask.setDestinationRealm(realmDAO.findByFullPath(pullTaskTO.getDestinationRealm()));\n \n             pullTask.setMatchingRule(pullTaskTO.getMatchingRule() == null\n                     ? MatchingRule.UPDATE : pullTaskTO.getMatchingRule());\n@@ -189,8 +230,19 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n         task.setPerformUpdate(taskTO.isPerformUpdate());\n         task.setPerformDelete(taskTO.isPerformDelete());\n         task.setSyncStatus(taskTO.isSyncStatus());\n-        task.getActionsClassNames().clear();\n-        task.getActionsClassNames().addAll(taskTO.getActionsClassNames());\n+\n+        taskTO.getActions().forEach(action -> {\n+            Implementation implementation = implementationDAO.find(action);\n+            if (implementation == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", action);\n+            } else {\n+                task.add(implementation);\n+            }\n+        });\n+        // remove all implementations not contained in the TO\n+        task.getActions().removeAll(task.getActions().stream().\n+                filter(implementation -> !taskTO.getActions().contains(implementation.getKey())).\n+                collect(Collectors.toList()));\n     }\n \n     @Override\n@@ -208,7 +260,11 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskU\n         task.setActive(taskTO.isActive());\n \n         if (taskUtils.getType() == TaskType.SCHEDULED) {\n-            task.setJobDelegateClassName(taskTO.getJobDelegateClassName());\n+            Implementation implementation = implementationDAO.find(taskTO.getJobDelegate());\n+            if (implementation == null) {\n+                throw new NotFoundException(\"Implementation \" + taskTO.getJobDelegate());\n+            }\n+            task.setJobDelegate(implementation);\n         } else if (taskTO instanceof AbstractProvisioningTaskTO) {\n             AbstractProvisioningTaskTO provisioningTaskTO = (AbstractProvisioningTaskTO) taskTO;\n \n@@ -314,49 +370,80 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n \n         switch (taskUtils.getType()) {\n             case PROPAGATION:\n-                ((PropagationTaskTO) taskTO).setAnyTypeKind(((PropagationTask) task).getAnyTypeKind());\n-                ((PropagationTaskTO) taskTO).setEntityKey(((PropagationTask) task).getEntityKey());\n-                ((PropagationTaskTO) taskTO).setResource(((PropagationTask) task).getResource().getKey());\n-                ((PropagationTaskTO) taskTO).setAttributes(((PropagationTask) task).getSerializedAttributes());\n+                PropagationTask propagationTask = (PropagationTask) task;\n+                PropagationTaskTO propagationTaskTO = (PropagationTaskTO) taskTO;\n+\n+                propagationTaskTO.setAnyTypeKind(propagationTask.getAnyTypeKind());\n+                propagationTaskTO.setEntityKey(propagationTask.getEntityKey());\n+                propagationTaskTO.setResource(propagationTask.getResource().getKey());\n+                propagationTaskTO.setAttributes(propagationTask.getSerializedAttributes());\n                 break;\n \n             case SCHEDULED:\n-                setExecTime((SchedTaskTO) taskTO, task);\n+                SchedTask schedTask = (SchedTask) task;\n+                SchedTaskTO schedTaskTO = (SchedTaskTO) taskTO;\n+\n+                setExecTime(schedTaskTO, task);\n+\n+                if (schedTask.getJobDelegate() != null) {\n+                    schedTaskTO.setJobDelegate(schedTask.getJobDelegate().getKey());\n+                }\n                 break;\n \n             case PULL:\n-                setExecTime((SchedTaskTO) taskTO, task);\n-                ((PullTaskTO) taskTO).setDestinationRealm(((PullTask) task).getDestinatioRealm().getFullPath());\n-                ((PullTaskTO) taskTO).setResource(((PullTask) task).getResource().getKey());\n-                ((PullTaskTO) taskTO).setMatchingRule(((PullTask) task).getMatchingRule() == null\n-                        ? MatchingRule.UPDATE : ((PullTask) task).getMatchingRule());\n-                ((PullTaskTO) taskTO).setUnmatchingRule(((PullTask) task).getUnmatchingRule() == null\n-                        ? UnmatchingRule.PROVISION : ((PullTask) task).getUnmatchingRule());\n-\n-                ((PullTask) task).getTemplates().forEach(template -> {\n-                    ((PullTaskTO) taskTO).getTemplates().put(template.getAnyType().getKey(), template.get());\n+                PullTask pullTask = (PullTask) task;\n+                PullTaskTO pullTaskTO = (PullTaskTO) taskTO;\n+\n+                setExecTime(pullTaskTO, task);\n+\n+                pullTaskTO.setDestinationRealm(pullTask.getDestinatioRealm().getFullPath());\n+                pullTaskTO.setResource(pullTask.getResource().getKey());\n+                pullTaskTO.setMatchingRule(pullTask.getMatchingRule() == null\n+                        ? MatchingRule.UPDATE : pullTask.getMatchingRule());\n+                pullTaskTO.setUnmatchingRule(pullTask.getUnmatchingRule() == null\n+                        ? UnmatchingRule.PROVISION : pullTask.getUnmatchingRule());\n+\n+                if (pullTask.getReconFilterBuilder() != null) {\n+                    pullTaskTO.setReconFilterBuilder(pullTask.getReconFilterBuilder().getKey());\n+                }\n+\n+                pullTaskTO.getActions().addAll(\n+                        pullTask.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n+\n+                pullTask.getTemplates().forEach(template -> {\n+                    pullTaskTO.getTemplates().put(template.getAnyType().getKey(), template.get());\n                 });\n                 break;\n \n             case PUSH:\n-                setExecTime((SchedTaskTO) taskTO, task);\n-                ((PushTaskTO) taskTO).setSourceRealm(((PushTask) task).getSourceRealm().getFullPath());\n-                ((PushTaskTO) taskTO).setResource(((PushTask) task).getResource().getKey());\n-                ((PushTaskTO) taskTO).setMatchingRule(((PushTask) task).getMatchingRule() == null\n-                        ? MatchingRule.LINK : ((PushTask) task).getMatchingRule());\n-                ((PushTaskTO) taskTO).setUnmatchingRule(((PushTask) task).getUnmatchingRule() == null\n-                        ? UnmatchingRule.ASSIGN : ((PushTask) task).getUnmatchingRule());\n-\n-                ((PushTask) task).getFilters().forEach(filter -> {\n-                    ((PushTaskTO) taskTO).getFilters().put(filter.getAnyType().getKey(), filter.getFIQLCond());\n+                PushTask pushTask = (PushTask) task;\n+                PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n+\n+                setExecTime(pushTaskTO, task);\n+\n+                pushTaskTO.setSourceRealm(pushTask.getSourceRealm().getFullPath());\n+                pushTaskTO.setResource(pushTask.getResource().getKey());\n+                pushTaskTO.setMatchingRule(pushTask.getMatchingRule() == null\n+                        ? MatchingRule.LINK : pushTask.getMatchingRule());\n+                pushTaskTO.setUnmatchingRule(pushTask.getUnmatchingRule() == null\n+                        ? UnmatchingRule.ASSIGN : pushTask.getUnmatchingRule());\n+\n+                pushTaskTO.getActions().addAll(\n+                        pushTask.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n+\n+                pushTask.getFilters().forEach(filter -> {\n+                    pushTaskTO.getFilters().put(filter.getAnyType().getKey(), filter.getFIQLCond());\n                 });\n                 break;\n \n             case NOTIFICATION:\n-                ((NotificationTaskTO) taskTO).setNotification(((NotificationTask) task).getNotification().getKey());\n-                ((NotificationTaskTO) taskTO).setAnyTypeKind(((NotificationTask) task).getAnyTypeKind());\n-                ((NotificationTaskTO) taskTO).setEntityKey(((NotificationTask) task).getEntityKey());\n-                if (((NotificationTask) task).isExecuted() && StringUtils.isBlank(taskTO.getLatestExecStatus())) {\n+                NotificationTask notificationTask = (NotificationTask) task;\n+                NotificationTaskTO notificationTaskTO = (NotificationTaskTO) taskTO;\n+\n+                notificationTaskTO.setNotification(notificationTask.getNotification().getKey());\n+                notificationTaskTO.setAnyTypeKind(notificationTask.getAnyTypeKind());\n+                notificationTaskTO.setEntityKey(notificationTask.getEntityKey());\n+                if (notificationTask.isExecuted() && StringUtils.isBlank(taskTO.getLatestExecStatus())) {\n                     taskTO.setLatestExecStatus(\"[EXECUTED]\");\n                 }\n                 break;"},{"sha":"d24e11d40986037372d685c0888bd5e770d556dc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,6 +31,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -46,6 +47,8 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.quartz.CronScheduleBuilder;\n import org.quartz.Job;\n import org.quartz.JobBuilder;\n@@ -92,6 +95,9 @@ public class JobManagerImpl implements JobManager, SyncopeLoader {\n     @Autowired\n     private ConfDAO confDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     private boolean disableQuartzInstance;\n \n     public void setDisableQuartzInstance(final boolean disableQuartzInstance) {\n@@ -215,22 +221,26 @@ public Map<String, Object> register(final SchedTask task, final Date startAt, fi\n         TaskJob job = createSpringBean(TaskJob.class);\n         job.setTaskKey(task.getKey());\n \n-        String jobDelegateClassName = task.getJobDelegateClassName() == null\n+        Implementation jobDelegate = task.getJobDelegate() == null\n                 ? task instanceof PullTask\n-                        ? PullJobDelegate.class.getName()\n+                        ? implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n+                                filter(impl -> PullJobDelegate.class.getName().equals(impl.getBody())).\n+                                findFirst().orElse(null)\n                         : task instanceof PushTask\n-                                ? PushJobDelegate.class.getName()\n+                                ? implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n+                                        filter(impl -> PushJobDelegate.class.getName().equals(impl.getBody())).\n+                                        findFirst().orElse(null)\n                                 : null\n-                : task.getJobDelegateClassName();\n-        if (jobDelegateClassName == null) {\n+                : task.getJobDelegate();\n+        if (jobDelegate == null) {\n             throw new IllegalArgumentException(\"Task \" + task\n                     + \" does not provide any \" + SchedTaskJobDelegate.class.getSimpleName());\n         }\n \n         Map<String, Object> jobMap = new HashMap<>();\n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n-        jobMap.put(TaskJob.DELEGATE_CLASS_KEY, jobDelegateClassName);\n-        jobMap.put(INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n+        jobMap.put(TaskJob.DELEGATE_IMPLEMENTATION, jobDelegate.getKey());\n+        jobMap.put(JobManager.INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n \n         registerJob(\n                 JobNamer.getJobKey(task).getName(),\n@@ -250,7 +260,7 @@ public void register(final Report report, final Date startAt, final long interru\n \n         Map<String, Object> jobMap = new HashMap<>();\n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n-        jobMap.put(INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n+        jobMap.put(JobManager.INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n \n         registerJob(JobNamer.getJobKey(report).getName(), job, report.getCronExpression(), startAt, jobMap);\n     }\n@@ -342,7 +352,7 @@ public void load() {\n \n         Map<String, Object> jobMap = new HashMap<>();\n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n-        jobMap.put(INTERRUPT_MAX_RETRIES_KEY, conf.getRight());\n+        jobMap.put(JobManager.INTERRUPT_MAX_RETRIES_KEY, conf.getRight());\n \n         // 3. NotificationJob\n         if (StringUtils.isBlank(conf.getLeft())) {"},{"sha":"6f926cf0256a0c02f53a9e0a51b4428dacc3b901","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":17,"deletions":11,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,14 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n-import org.apache.commons.lang3.ClassUtils;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -35,7 +36,7 @@ public class TaskJob extends AbstractInterruptableJob {\n \n     public static final String DRY_RUN_JOBDETAIL_KEY = \"dryRun\";\n \n-    public static final String DELEGATE_CLASS_KEY = \"delegateClass\";\n+    public static final String DELEGATE_IMPLEMENTATION = \"delegateImpl\";\n \n     /**\n      * Task execution status.\n@@ -69,14 +70,19 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n             AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n                     () -> {\n                         try {\n-                            Class<?> delegateClass =\n-                            ClassUtils.getClass(context.getMergedJobDataMap().getString(DELEGATE_CLASS_KEY));\n-\n-                            ((SchedTaskJobDelegate) ApplicationContextProvider.getBeanFactory().\n-                                    createBean(delegateClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false)).\n-                                    execute(taskKey,\n-                                            context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n-                                            context);\n+                            ImplementationDAO implementationDAO =\n+                            ApplicationContextProvider.getApplicationContext().getBean(ImplementationDAO.class);\n+                            Implementation taskJobDelegate = implementationDAO.find(\n+                                    context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n+                            if (taskJobDelegate == null) {\n+                                LOG.error(\"Could not find Implementation '{}', aborting\",\n+                                        context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n+                            } else {\n+                                ImplementationManager.<SchedTaskJobDelegate>build(taskJobDelegate).\n+                                        execute(taskKey,\n+                                                context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n+                                                context);\n+                            }\n                         } catch (Exception e) {\n                             LOG.error(\"While executing task {}\", taskKey, e);\n                             throw new RuntimeException(e);"},{"sha":"ede35358b847beca5321074dae6135dc9d939d65","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/AbstractReportlet.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAbstractReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAbstractReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAbstractReportlet.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,15 +31,18 @@ public abstract class AbstractReportlet implements Reportlet {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractReportlet.class);\n \n+    protected ReportletConf conf;\n+\n+    @Override\n+    public void setConf(final ReportletConf conf) {\n+        this.conf = conf;\n+    }\n+\n     protected abstract void doExtract(ReportletConf conf, ContentHandler handler) throws SAXException;\n \n     @Override\n     @Transactional(readOnly = true)\n-    public void extract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n-        if (conf == null) {\n-            throw new ReportException(new IllegalArgumentException(\"No configuration provided\"));\n-        }\n-\n+    public void extract(final ContentHandler handler) throws SAXException {\n         AttributesImpl atts = new AttributesImpl();\n         atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, conf.getName());\n         atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_CLASS, ReportXMLConst.XSD_STRING, getClass().getName());"},{"sha":"10a529fe5fe1ed57a8c45c3333d3cd7a42744577","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJobDelegate.java","status":"modified","additions":7,"deletions":27,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJobDelegate.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -22,6 +22,7 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Date;\n+import java.util.Optional;\n import java.util.zip.Deflater;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n@@ -31,22 +32,20 @@\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n import org.apache.commons.io.IOUtils;\n-import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.xml.sax.helpers.AttributesImpl;\n@@ -71,9 +70,6 @@ public class ReportJobDelegate {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Autowired\n-    private ImplementationLookup implementationLookup;\n-\n     @Transactional\n     public void execute(final String reportKey) throws JobExecutionException {\n         Report report = reportDAO.find(reportKey);\n@@ -132,27 +128,11 @@ public void execute(final String reportKey) throws JobExecutionException {\n             handler.startElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORT, atts);\n \n             // iterate over reportlet instances defined for this report\n-            for (ReportletConf reportletConf : report.getReportletConfs()) {\n-                Class<? extends Reportlet> reportletClass =\n-                        implementationLookup.getReportletClass(reportletConf.getClass());\n-                if (reportletClass == null) {\n-                    LOG.warn(\"Could not find matching reportlet for {}\", reportletConf.getClass());\n-                } else {\n-                    // fetch (or create) reportlet\n-                    Reportlet reportlet;\n-                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(reportletClass.getName())) {\n-                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n-                                getSingleton(reportletClass.getName());\n-                    } else {\n-                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n-                                createBean(reportletClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                        ApplicationContextProvider.getBeanFactory().\n-                                registerSingleton(reportletClass.getName(), reportlet);\n-                    }\n-\n-                    // invoke reportlet\n+            for (Implementation impl : report.getReportlets()) {\n+                Optional<Reportlet> reportlet = ImplementationManager.buildReportlet(impl);\n+                if (reportlet.isPresent()) {\n                     try {\n-                        reportlet.extract(reportletConf, handler);\n+                        reportlet.get().extract(handler);\n                     } catch (Throwable t) {\n                         LOG.error(\"While executing reportlet {} for report {}\", reportlet, reportKey, t);\n "},{"sha":"75b028fa5803fad719ed6743c31c11e4b63376a4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":9,"deletions":15,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -27,6 +27,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -47,7 +48,6 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n@@ -56,7 +56,6 @@\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -73,14 +72,14 @@\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationRecipientsProvider;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider;\n+import org.apache.syncope.core.spring.ImplementationManager;\n \n @Component\n @Transactional(rollbackFor = { Throwable.class })\n@@ -210,15 +209,13 @@ private NotificationTask getNotificationTask(\n             recipientEmails.addAll(notification.getStaticRecipients());\n         }\n \n-        if (notification.getRecipientsProviderClassName() != null) {\n+        if (notification.getRecipientsProvider() != null) {\n             try {\n-                NotificationRecipientsProvider recipientsProvider =\n-                        (NotificationRecipientsProvider) ApplicationContextProvider.getBeanFactory().\n-                                createBean(Class.forName(notification.getRecipientsProviderClassName()),\n-                                        AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                RecipientsProvider recipientsProvider =\n+                        ImplementationManager.build(notification.getRecipientsProvider());\n                 recipientEmails.addAll(recipientsProvider.provideRecipients(notification));\n             } catch (Exception e) {\n-                LOG.error(\"Could not fetch recipients from {}\", notification.getRecipientsProviderClassName(), e);\n+                LOG.error(\"While building {}\", notification.getRecipientsProvider(), e);\n             }\n         }\n \n@@ -470,10 +467,7 @@ public long countExecutionsWithStatus(final String taskKey, final String status)\n     }\n \n     protected Map<String, String> findAllSyncopeConfs() {\n-        Map<String, String> syncopeConfMap = new HashMap<>();\n-        for (PlainAttr<?> attr : confDAO.get().getPlainAttrs()) {\n-            syncopeConfMap.put(attr.getSchema().getKey(), attr.getValuesAsStrings().get(0));\n-        }\n-        return syncopeConfMap;\n+        return confDAO.get().getPlainAttrs().stream().collect(\n+                Collectors.toMap(attr -> attr.getSchema().getKey(), attr -> attr.getValuesAsStrings().get(0)));\n     }\n }"},{"sha":"e4f443f59ac780b9a275610cc299b2943ef032b4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -47,7 +47,6 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -65,6 +64,7 @@\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -77,7 +77,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(rollbackFor = { Throwable.class })\n@@ -162,17 +161,13 @@ public TaskExec execute(final PropagationTask task) {\n     protected List<PropagationActions> getPropagationActions(final ExternalResource resource) {\n         List<PropagationActions> result = new ArrayList<>();\n \n-        if (!resource.getPropagationActionsClassNames().isEmpty()) {\n-            resource.getPropagationActionsClassNames().forEach(className -> {\n-                try {\n-                    Class<?> actionsClass = Class.forName(className);\n-                    result.add((PropagationActions) ApplicationContextProvider.getBeanFactory().\n-                            createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true));\n-                } catch (ClassNotFoundException e) {\n-                    LOG.error(\"Invalid PropagationAction class name '{}' for resource {}\", resource, className, e);\n-                }\n-            });\n-        }\n+        resource.getPropagationActions().forEach(impl -> {\n+            try {\n+                result.add(ImplementationManager.build(impl));\n+            } catch (Exception e) {\n+                LOG.error(\"While building {}\", impl, e);\n+            }\n+        });\n \n         return result;\n     }"},{"sha":"8f3ee71128563c3dc3053ca2516230cfc6a3bbf1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":9,"deletions":17,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -44,7 +44,6 @@\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBuilder;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPullResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n@@ -57,6 +56,8 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n+import org.apache.syncope.core.spring.ImplementationManager;\n \n public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> implements SyncopePullExecutor {\n \n@@ -170,15 +171,11 @@ protected String doExecuteProvisioning(\n         LOG.debug(\"Executing pull on {}\", pullTask.getResource());\n \n         List<PullActions> actions = new ArrayList<>();\n-        pullTask.getActionsClassNames().forEach(className -> {\n+        pullTask.getActions().forEach(impl -> {\n             try {\n-                Class<?> actionsClass = Class.forName(className);\n-                PullActions pullActions = (PullActions) ApplicationContextProvider.getBeanFactory().\n-                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-\n-                actions.add(pullActions);\n+                actions.add(ImplementationManager.build(impl));\n             } catch (Exception e) {\n-                LOG.warn(\"Class '{}' not found\", className, e);\n+                LOG.warn(\"While building {}\", impl, e);\n             }\n         });\n \n@@ -223,10 +220,8 @@ protected String doExecuteProvisioning(\n                         break;\n \n                     case FILTERED_RECONCILIATION:\n-                        ReconciliationFilterBuilder filterBuilder =\n-                                (ReconciliationFilterBuilder) ApplicationContextProvider.getBeanFactory().\n-                                        createBean(Class.forName(pullTask.getReconciliationFilterBuilderClassName()),\n-                                                AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                        ReconFilterBuilder filterBuilder =\n+                                ImplementationManager.build(pullTask.getReconFilterBuilder());\n                         connector.filteredReconciliation(orgUnit.getObjectClass(),\n                                 filterBuilder,\n                                 rhandler,\n@@ -296,11 +291,8 @@ protected String doExecuteProvisioning(\n                             break;\n \n                         case FILTERED_RECONCILIATION:\n-                            ReconciliationFilterBuilder filterBuilder =\n-                                    (ReconciliationFilterBuilder) ApplicationContextProvider.getBeanFactory().\n-                                            createBean(\n-                                                    Class.forName(pullTask.getReconciliationFilterBuilderClassName()),\n-                                                    AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                            ReconFilterBuilder filterBuilder =\n+                                    ImplementationManager.build(pullTask.getReconFilterBuilder());\n                             connector.filteredReconciliation(provision.getObjectClass(),\n                                     filterBuilder,\n                                     handler,"},{"sha":"44c80bdc7fae2281b349f743a08b732b5a531a4f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":22,"deletions":15,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -23,7 +23,6 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.policy.PullPolicySpec;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -33,12 +32,15 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -68,6 +70,7 @@\n import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.spring.ImplementationManager;\n \n @Transactional(readOnly = true)\n @Component\n@@ -108,6 +111,9 @@ public class PullUtils {\n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Autowired\n     private AnyUtilsFactory anyUtilsFactory;\n \n@@ -264,32 +270,33 @@ private List<String> findByConnObjectKeyItem(\n     private List<String> findByCorrelationRule(\n             final ConnectorObject connObj, final PullCorrelationRule rule, final AnyTypeKind type) {\n \n-        List<String> result = new ArrayList<>();\n-        searchDAO.search(rule.getSearchCond(connObj), type).forEach(any -> {\n-            result.add(any.getKey());\n-        });\n-\n-        return result;\n+        return searchDAO.search(rule.getSearchCond(connObj), type).stream().\n+                map(Entity::getKey).collect(Collectors.toList());\n     }\n \n     private PullCorrelationRule getCorrelationRule(final Provision provision, final PullPolicySpec policySpec) {\n-        PullCorrelationRule result = null;\n+        PullCorrelationRule rule = null;\n \n         String pullCorrelationRule = policySpec.getCorrelationRules().get(provision.getAnyType().getKey());\n-        if (StringUtils.isNotBlank(pullCorrelationRule)) {\n+        if (pullCorrelationRule != null) {\n             if (pullCorrelationRule.charAt(0) == '[') {\n-                result = new PlainAttrsPullCorrelationRule(\n+                rule = new PlainAttrsPullCorrelationRule(\n                         POJOHelper.deserialize(pullCorrelationRule, String[].class), provision);\n             } else {\n-                try {\n-                    result = (PullCorrelationRule) Class.forName(pullCorrelationRule).newInstance();\n-                } catch (Exception e) {\n-                    LOG.error(\"Failure instantiating correlation rule class '{}'\", pullCorrelationRule, e);\n+                Implementation impl = implementationDAO.find(pullCorrelationRule);\n+                if (impl == null) {\n+                    LOG.error(\"Could not find any Implementation matching '{}'\", pullCorrelationRule);\n+                } else {\n+                    try {\n+                        rule = ImplementationManager.build(impl);\n+                    } catch (Exception e) {\n+                        LOG.error(\"While building {}\", impl, e);\n+                    }\n                 }\n             }\n         }\n \n-        return result;\n+        return rule;\n     }\n \n     /**"},{"sha":"b1a8b07b750286cddef8faff0c43a5d4c05a3441","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.core.provisioning.api.pushpull.RealmPushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPushResultHandler;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n@@ -164,15 +165,11 @@ protected String doExecuteProvisioning(\n         LOG.debug(\"Executing push on {}\", pushTask.getResource());\n \n         List<PushActions> actions = new ArrayList<>();\n-        pushTask.getActionsClassNames().forEach(className -> {\n+        pushTask.getActions().forEach(impl -> {\n             try {\n-                Class<?> actionsClass = Class.forName(className);\n-\n-                PushActions pushActions = (PushActions) ApplicationContextProvider.getBeanFactory().\n-                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-                actions.add(pushActions);\n+                actions.add(ImplementationManager.build(impl));\n             } catch (Exception e) {\n-                LOG.info(\"Class '{}' not found\", className, e);\n+                LOG.warn(\"While building {}\", impl, e);\n             }\n         });\n "},{"sha":"6aa8e886086658d36226945fb3db314c1f37d94f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -24,7 +24,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -41,6 +40,7 @@\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n@@ -171,26 +171,27 @@ public <T extends AnyTO> T getAnyTO(\n         if (anyTO instanceof UserTO && StringUtils.isBlank(((UserTO) anyTO).getPassword())) {\n             UserTO userTO = (UserTO) anyTO;\n \n-            List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n+            List<PasswordPolicy> passwordPolicies = new ArrayList<>();\n \n             Realm realm = realmDAO.findByFullPath(userTO.getRealm());\n             if (realm != null) {\n                 realmDAO.findAncestors(realm).stream().\n-                        filter(ancestor -> (ancestor.getPasswordPolicy() != null)).\n-                        forEachOrdered(ancestor -> {\n-                            ruleConfs.addAll(ancestor.getPasswordPolicy().getRuleConfs());\n+                        filter(ancestor -> ancestor.getPasswordPolicy() != null).\n+                        forEach(ancestor -> {\n+                            passwordPolicies.add(ancestor.getPasswordPolicy());\n                         });\n             }\n \n-            userTO.getResources().stream().map(resName -> resourceDAO.find(resName)).\n-                    filter(resource -> (resource != null && resource.getPasswordPolicy() != null)).\n-                    forEachOrdered(resource -> {\n-                        ruleConfs.addAll(resource.getPasswordPolicy().getRuleConfs());\n+            userTO.getResources().stream().\n+                    map(resource -> resourceDAO.find(resource)).\n+                    filter(resource -> resource != null && resource.getPasswordPolicy() != null).\n+                    forEach(resource -> {\n+                        passwordPolicies.add(resource.getPasswordPolicy());\n                     });\n \n             String password;\n             try {\n-                password = passwordGenerator.generate(ruleConfs);\n+                password = passwordGenerator.generate(passwordPolicies);\n             } catch (InvalidPasswordRuleConf e) {\n                 LOG.error(\"Could not generate policy-compliant random password for {}\", userTO, e);\n "},{"sha":"9041b10643822297ad7aa2ce4838da3b774a838e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":18,"deletions":40,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -27,9 +27,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n-import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -51,6 +49,7 @@\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.data.JEXLItemTransformer;\n+import org.apache.syncope.core.spring.ImplementationManager;\n \n public final class MappingUtils {\n \n@@ -69,14 +68,14 @@ public static Optional<MappingItem> getConnObjectKeyItem(final Provision provisi\n \n     public static List<? extends Item> getPropagationItems(final List<? extends Item> items) {\n         return items.stream().\n-                        filter(item -> item.getPurpose() == MappingPurpose.PROPAGATION\n-                        || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n+                filter(item -> item.getPurpose() == MappingPurpose.PROPAGATION\n+                || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n     }\n \n     public static List<? extends Item> getPullItems(final List<? extends Item> items) {\n         return items.stream().\n-                        filter(item -> item.getPurpose() == MappingPurpose.PULL\n-                        || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n+                filter(item -> item.getPurpose() == MappingPurpose.PULL\n+                || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n     }\n \n     private static Name evaluateNAME(final String evalConnObjectLink, final String connObjectKey) {\n@@ -160,54 +159,33 @@ public static Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final\n         return evaluateNAME(evalConnObjectLink, connObjectKey);\n     }\n \n-    private static List<ItemTransformer> getItemTransformers(\n-            final String propagationJEXLTransformer,\n-            final String pullJEXLTransformer,\n-            final List<String> mappingItemTransformerClassNames) {\n-\n+    public static List<ItemTransformer> getItemTransformers(final Item item) {\n         List<ItemTransformer> result = new ArrayList<>();\n \n         // First consider the JEXL transformation expressions\n-        if (StringUtils.isNotBlank(propagationJEXLTransformer) || StringUtils.isNotBlank(pullJEXLTransformer)) {\n-            JEXLItemTransformer jexlTransformer =\n-                    (JEXLItemTransformer) ApplicationContextProvider.getBeanFactory().\n-                            createBean(JEXLItemTransformerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME,\n-                                    false);\n-\n-            jexlTransformer.setPropagationJEXL(propagationJEXLTransformer);\n-            jexlTransformer.setPullJEXL(pullJEXLTransformer);\n+        if (StringUtils.isNotBlank(item.getPropagationJEXLTransformer())\n+                || StringUtils.isNotBlank(item.getPullJEXLTransformer())) {\n+\n+            JEXLItemTransformer jexlTransformer = (JEXLItemTransformer) ApplicationContextProvider.getBeanFactory().\n+                    createBean(JEXLItemTransformerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+\n+            jexlTransformer.setPropagationJEXL(item.getPropagationJEXLTransformer());\n+            jexlTransformer.setPullJEXL(item.getPullJEXLTransformer());\n             result.add(jexlTransformer);\n         }\n \n-        // Then other custom tranaformers\n-        mappingItemTransformerClassNames.forEach(className -> {\n+        // Then other custom transformers\n+        item.getTransformers().forEach(impl -> {\n             try {\n-                Class<?> transformerClass = ClassUtils.getClass(className);\n-\n-                result.add((ItemTransformer) ApplicationContextProvider.getBeanFactory().\n-                        createBean(transformerClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false));\n+                result.add(ImplementationManager.build(impl));\n             } catch (Exception e) {\n-                LOG.error(\"Could not instantiate {}, ignoring...\", className, e);\n+                LOG.error(\"While building {}\", impl, e);\n             }\n         });\n \n         return result;\n     }\n \n-    public static List<ItemTransformer> getItemTransformers(final ItemTO item) {\n-        return getItemTransformers(\n-                item.getPropagationJEXLTransformer(),\n-                item.getPullJEXLTransformer(),\n-                item.getTransformerClassNames());\n-    }\n-\n-    public static List<ItemTransformer> getItemTransformers(final Item item) {\n-        return getItemTransformers(\n-                item.getPropagationJEXLTransformer(),\n-                item.getPullJEXLTransformer(),\n-                item.getTransformerClassNames());\n-    }\n-\n     /**\n      * Build options for requesting all mapped connector attributes.\n      *"},{"sha":"55e2a26730f3a38b987564f7a480d09ea544cc1b","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyImplementationLookup.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n@@ -45,7 +46,7 @@ public void load() {\n     }\n \n     @Override\n-    public Set<String> getClassNames(final Type type) {\n+    public Set<String> getClassNames(final ImplementationType type) {\n         return Collections.emptySet();\n     }\n "},{"sha":"c3190affbf706446bb864c532660dbbf1125618f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ImplementationServiceImpl.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ImplementationService;\n+import org.apache.syncope.core.logic.ImplementationLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ImplementationServiceImpl extends AbstractServiceImpl implements ImplementationService {\n+\n+    @Autowired\n+    private ImplementationLogic logic;\n+\n+    @Override\n+    public List<ImplementationTO> list(final ImplementationType type) {\n+        return logic.list(type);\n+    }\n+\n+    @Override\n+    public ImplementationTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response create(final ImplementationTO implementationTO) {\n+        ImplementationTO created = logic.create(implementationTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final ImplementationTO implementationTO) {\n+        logic.update(implementationTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+}"},{"sha":"22ba98ba9603369543c8417a15c6c5f9d7b20693","filename":"core/spring/pom.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fpom.xml?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -72,6 +72,11 @@ under the License.\n       <artifactId>spring-tx</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.codehaus.groovy</groupId>\n+      <artifactId>groovy-all</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.core</groupId>\n       <artifactId>syncope-core-provisioning-api</artifactId>\n@@ -90,6 +95,11 @@ under the License.\n       <version>${slf4j.version}</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.junit.jupiter</groupId>\n       <artifactId>junit-jupiter-engine</artifactId>"},{"sha":"af1b2f7631c927bb3494e07e22db89303ef07346","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring;\n+\n+import groovy.lang.GroovyClassLoader;\n+import java.util.Optional;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+\n+public final class ImplementationManager {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ImplementationManager.class);\n+\n+    private static final GroovyClassLoader GROOVY_CLASSLOADER = new GroovyClassLoader();\n+\n+    public static Optional<Reportlet> buildReportlet(final Implementation impl)\n+            throws InstantiationException, IllegalAccessException {\n+\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                return Optional.of(ImplementationManager.<Reportlet>buildGroovy(impl.getBody()));\n+\n+            case JAVA:\n+            default:\n+                Reportlet reportlet = null;\n+\n+                ReportletConf reportletConf = POJOHelper.deserialize(impl.getBody(), ReportletConf.class);\n+                Class<? extends Reportlet> reportletClass = ApplicationContextProvider.getApplicationContext().\n+                        getBean(ImplementationLookup.class).getReportletClass(reportletConf.getClass());\n+                if (reportletClass == null) {\n+                    LOG.warn(\"Could not find matching reportlet for {}\", reportletConf.getClass());\n+                } else {\n+                    // fetch (or create) reportlet\n+                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(reportletClass.getName())) {\n+                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n+                                getSingleton(reportletClass.getName());\n+                    } else {\n+                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n+                                createBean(reportletClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                        ApplicationContextProvider.getBeanFactory().\n+                                registerSingleton(reportletClass.getName(), reportlet);\n+                    }\n+                    reportlet.setConf(reportletConf);\n+                }\n+\n+                return Optional.ofNullable(reportlet);\n+        }\n+    }\n+\n+    public static Optional<AccountRule> buildAccountRule(final Implementation impl)\n+            throws InstantiationException, IllegalAccessException {\n+\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                return Optional.of(ImplementationManager.<AccountRule>buildGroovy(impl.getBody()));\n+\n+            case JAVA:\n+            default:\n+                AccountRule rule = null;\n+\n+                AccountRuleConf ruleConf = POJOHelper.deserialize(impl.getBody(), AccountRuleConf.class);\n+                Class<? extends AccountRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n+                        getBean(ImplementationLookup.class).getAccountRuleClass(ruleConf.getClass());\n+                if (ruleClass == null) {\n+                    LOG.warn(\"Could not find matching password rule for {}\", impl.getClass());\n+                } else {\n+                    // fetch (or create) rule\n+                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n+                        rule = (AccountRule) ApplicationContextProvider.getBeanFactory().\n+                                getSingleton(ruleClass.getName());\n+                    } else {\n+                        rule = (AccountRule) ApplicationContextProvider.getBeanFactory().\n+                                createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                        ApplicationContextProvider.getBeanFactory().\n+                                registerSingleton(ruleClass.getName(), rule);\n+                    }\n+                    rule.setConf(ruleConf);\n+                }\n+\n+                return Optional.ofNullable(rule);\n+        }\n+    }\n+\n+    public static Optional<PasswordRule> buildPasswordRule(final Implementation impl)\n+            throws InstantiationException, IllegalAccessException {\n+\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                return Optional.of(ImplementationManager.<PasswordRule>buildGroovy(impl.getBody()));\n+\n+            case JAVA:\n+            default:\n+                PasswordRule rule = null;\n+\n+                PasswordRuleConf ruleConf = POJOHelper.deserialize(impl.getBody(), PasswordRuleConf.class);\n+                Class<? extends PasswordRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n+                        getBean(ImplementationLookup.class).getPasswordRuleClass(ruleConf.getClass());\n+                if (ruleClass == null) {\n+                    LOG.warn(\"Could not find matching password rule for {}\", impl.getClass());\n+                } else {\n+                    // fetch (or create) rule\n+                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n+                        rule = (PasswordRule) ApplicationContextProvider.getBeanFactory().\n+                                getSingleton(ruleClass.getName());\n+                    } else {\n+                        rule = (PasswordRule) ApplicationContextProvider.getBeanFactory().\n+                                createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                        ApplicationContextProvider.getBeanFactory().\n+                                registerSingleton(ruleClass.getName(), rule);\n+                    }\n+                    rule.setConf(ruleConf);\n+                }\n+\n+                return Optional.ofNullable(rule);\n+        }\n+    }\n+\n+    public static <T> T build(final Implementation impl)\n+            throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                return ImplementationManager.<T>buildGroovy(impl.getBody());\n+\n+            case JAVA:\n+            default:\n+                return ImplementationManager.<T>buildJava(impl.getBody());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T buildGroovy(final String classBody) throws InstantiationException, IllegalAccessException {\n+        Class<?> clazz = GROOVY_CLASSLOADER.parseClass(classBody);\n+        return (T) ApplicationContextProvider.getBeanFactory().\n+                createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T buildJava(final String className) throws ClassNotFoundException {\n+        Class<?> clazz = Class.forName(className);\n+        return (T) ApplicationContextProvider.getBeanFactory().\n+                createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+    }\n+\n+    private ImplementationManager() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"691ff3669f1b306581db02b65b49f4a3161f8f69","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -141,7 +141,7 @@ public JWTSSOProvider getJWTSSOProvider(final String issuer) {\n                 jwtSSOProviders = new HashMap<>();\n \n                 implementationLookup.getJWTSSOProviderClasses().stream().\n-                        map((clazz) -> (JWTSSOProvider) ApplicationContextProvider.getBeanFactory().\n+                        map(clazz -> (JWTSSOProvider) ApplicationContextProvider.getBeanFactory().\n                         createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true)).\n                         forEachOrdered(jwtSSOProvider -> {\n                             jwtSSOProviders.put(jwtSSOProvider.getIssuer(), jwtSSOProvider);"},{"sha":"b0a4d95a569257bf9697e332be05203f39418109","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DefaultPasswordGenerator.java","status":"modified","additions":28,"deletions":15,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,12 +20,17 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.provisioning.api.utils.policy.PolicyPattern;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.spring.ImplementationManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n@@ -36,6 +41,8 @@\n  */\n public class DefaultPasswordGenerator implements PasswordGenerator {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(PasswordGenerator.class);\n+\n     private static final char[] SPECIAL_CHARS = { '!', '£', '%', '&', '(', ')', '?', '#', '$' };\n \n     private static final int VERY_MIN_LENGTH = 0;\n@@ -47,23 +54,29 @@ public class DefaultPasswordGenerator implements PasswordGenerator {\n     @Transactional(readOnly = true)\n     @Override\n     public String generate(final ExternalResource resource) throws InvalidPasswordRuleConf {\n-        List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n+        List<PasswordPolicy> policies = new ArrayList<>();\n \n         if (resource.getPasswordPolicy() != null) {\n-            ruleConfs.addAll(resource.getPasswordPolicy().getRuleConfs());\n+            policies.add(resource.getPasswordPolicy());\n         }\n \n-        return generate(ruleConfs);\n+        return generate(policies);\n     }\n \n     @Override\n-    public String generate(final List<PasswordRuleConf> ruleConfs) throws InvalidPasswordRuleConf {\n+    public String generate(final List<PasswordPolicy> policies) throws InvalidPasswordRuleConf {\n         List<DefaultPasswordRuleConf> defaultRuleConfs = new ArrayList<>();\n-        ruleConfs.stream().\n-                filter(ruleConf -> (ruleConf instanceof DefaultPasswordRuleConf)).\n-                forEachOrdered(ruleConf -> {\n-                    defaultRuleConfs.add((DefaultPasswordRuleConf) ruleConf);\n-                });\n+\n+        policies.stream().forEach(policy -> policy.getRules().forEach(impl -> {\n+            try {\n+                Optional<PasswordRule> rule = ImplementationManager.buildPasswordRule(impl);\n+                if (rule.isPresent() && rule.get().getConf() instanceof DefaultPasswordRuleConf) {\n+                    defaultRuleConfs.add((DefaultPasswordRuleConf) rule.get().getConf());\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"Invalid {}, ignoring...\", impl, e);\n+            }\n+        }));\n \n         DefaultPasswordRuleConf ruleConf = merge(defaultRuleConfs);\n         check(ruleConf);\n@@ -301,17 +314,17 @@ private void checkRequired(final String[] generatedPassword, final DefaultPasswo\n     }\n \n     private void checkPrefixAndSuffix(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n-        for (String prefix : ruleConf.getPrefixesNotPermitted()) {\n+        ruleConf.getPrefixesNotPermitted().forEach(prefix -> {\n             if (StringUtils.join(generatedPassword).startsWith(prefix)) {\n                 checkStartChar(generatedPassword, ruleConf);\n             }\n-        }\n+        });\n \n-        for (String suffix : ruleConf.getSuffixesNotPermitted()) {\n+        ruleConf.getSuffixesNotPermitted().forEach(suffix -> {\n             if (StringUtils.join(generatedPassword).endsWith(suffix)) {\n                 checkEndChar(generatedPassword, ruleConf);\n             }\n-        }\n+        });\n     }\n \n }"},{"sha":"cf40d5fb8b73fe4be5082bd4e8e6e2d36ae629a4","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/PasswordGenerator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,14 +19,14 @@\n package org.apache.syncope.core.spring.security;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n \n public interface PasswordGenerator {\n \n     String generate(ExternalResource resource) throws InvalidPasswordRuleConf;\n \n-    String generate(List<PasswordRuleConf> ruleConfs) throws InvalidPasswordRuleConf;\n+    String generate(List<PasswordPolicy> policies) throws InvalidPasswordRuleConf;\n \n }"},{"sha":"e6446452ec21f4268a1c165062df60e08d539176","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/DummyImplementationLookup.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+\n+public class DummyImplementationLookup implements ImplementationLookup {\n+\n+    @Override\n+    public Integer getPriority() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public void load() {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public Set<String> getClassNames(final ImplementationType type) {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public Set<Class<?>> getJWTSSOProviderClasses() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public Class<Reportlet> getReportletClass(\n+            final Class<? extends ReportletConf> reportletConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends AccountRule> getAccountRuleClass(\n+            final Class<? extends AccountRuleConf> accountRuleConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends PasswordRule> getPasswordRuleClass(\n+            final Class<? extends PasswordRuleConf> passwordRuleConfClass) {\n+\n+        return TestPasswordRule.class;\n+    }\n+\n+    @Override\n+    public Set<Class<?>> getAuditAppenderClasses() {\n+        return Collections.emptySet();\n+    }\n+\n+}"},{"sha":"4ec78b90fd1992826535d6946e1bed01bda30240","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/EncryptorTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptorTest.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import org.apache.syncope.core.spring.security.Encryptor;\n-\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"sha":"8378a575966f62d8c47587dd8124a66244eec2df","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/PasswordGeneratorTest.java","status":"modified","additions":73,"deletions":34,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -27,11 +27,14 @@\n import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.provisioning.api.utils.policy.PolicyPattern;\n import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n+@SpringJUnitConfig(locations = { \"classpath:springTest.xml\" })\n public class PasswordGeneratorTest {\n \n     private final DefaultPasswordGenerator passwordGenerator = new DefaultPasswordGenerator();\n@@ -62,83 +65,119 @@ private DefaultPasswordRuleConf createBaseDefaultPasswordRuleConf() {\n \n     @Test\n     public void startEndWithDigit() throws InvalidPasswordRuleConf {\n-        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf.setMustStartWithDigit(true);\n+        DefaultPasswordRuleConf pwdRuleConf1 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf1.setMustStartWithDigit(true);\n+        TestImplementation passwordRule1 = new TestImplementation();\n+        passwordRule1.setBody(POJOHelper.serialize(pwdRuleConf1));\n+        TestPasswordPolicy policy1 = new TestPasswordPolicy();\n+        policy1.add(passwordRule1);\n \n         DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n         pwdRuleConf2.setMustEndWithDigit(true);\n-\n-        List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n-        ruleConfs.add(pwdRuleConf);\n-        ruleConfs.add(pwdRuleConf2);\n-        String generatedPassword = passwordGenerator.generate(ruleConfs);\n+        TestImplementation passwordRule2 = new TestImplementation();\n+        passwordRule2.setBody(POJOHelper.serialize(pwdRuleConf2));\n+        TestPasswordPolicy policy2 = new TestPasswordPolicy();\n+        policy2.add(passwordRule2);\n+\n+        List<PasswordPolicy> policies = new ArrayList<>();\n+        policies.add(policy1);\n+        policies.add(policy2);\n+        String generatedPassword = passwordGenerator.generate(policies);\n         assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n         assertTrue(Character.isDigit(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n     @Test\n     public void startWithDigitAndWithAlpha() throws InvalidPasswordRuleConf {\n-        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf.setMustStartWithDigit(true);\n+        DefaultPasswordRuleConf pwdRuleConf1 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf1.setMustStartWithDigit(true);\n+        TestImplementation passwordRule1 = new TestImplementation();\n+        passwordRule1.setBody(POJOHelper.serialize(pwdRuleConf1));\n+        TestPasswordPolicy policy1 = new TestPasswordPolicy();\n+        policy1.add(passwordRule1);\n \n         DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n         pwdRuleConf2.setMustEndWithAlpha(true);\n-\n-        List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n-        pwdRuleConfs.add(pwdRuleConf);\n-        pwdRuleConfs.add(pwdRuleConf2);\n-        String generatedPassword = passwordGenerator.generate(pwdRuleConfs);\n+        TestImplementation passwordRule2 = new TestImplementation();\n+        passwordRule2.setBody(POJOHelper.serialize(pwdRuleConf2));\n+        TestPasswordPolicy policy2 = new TestPasswordPolicy();\n+        policy2.add(passwordRule2);\n+\n+        List<PasswordPolicy> policies = new ArrayList<>();\n+        policies.add(policy1);\n+        policies.add(policy2);\n+        String generatedPassword = passwordGenerator.generate(policies);\n         assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n     @Test\n     public void passwordWithNonAlpha() throws InvalidPasswordRuleConf {\n-        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf.setNonAlphanumericRequired(true);\n+        DefaultPasswordRuleConf pwdRuleConf1 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf1.setNonAlphanumericRequired(true);\n+        TestImplementation passwordRule1 = new TestImplementation();\n+        passwordRule1.setBody(POJOHelper.serialize(pwdRuleConf1));\n+        TestPasswordPolicy policy1 = new TestPasswordPolicy();\n+        policy1.add(passwordRule1);\n \n         DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n         pwdRuleConf2.setMustEndWithAlpha(true);\n-\n-        List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n-        pwdRuleConfs.add(pwdRuleConf);\n-        pwdRuleConfs.add(pwdRuleConf2);\n-        String generatedPassword = passwordGenerator.generate(pwdRuleConfs);\n+        TestImplementation passwordRule2 = new TestImplementation();\n+        passwordRule2.setBody(POJOHelper.serialize(pwdRuleConf2));\n+        TestPasswordPolicy policy2 = new TestPasswordPolicy();\n+        policy2.add(passwordRule2);\n+\n+        List<PasswordPolicy> policies = new ArrayList<>();\n+        policies.add(policy1);\n+        policies.add(policy2);\n+        String generatedPassword = passwordGenerator.generate(policies);\n         assertTrue(PolicyPattern.NON_ALPHANUMERIC.matcher(generatedPassword).matches());\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n     @Test\n     public void incopatiblePolicies() {\n         assertThrows(InvalidPasswordRuleConf.class, () -> {\n-            DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n-            pwdRuleConf.setMinLength(12);\n+            DefaultPasswordRuleConf pwdRuleConf1 = createBaseDefaultPasswordRuleConf();\n+            pwdRuleConf1.setMinLength(12);\n+            TestImplementation passwordRule1 = new TestImplementation();\n+            passwordRule1.setBody(POJOHelper.serialize(pwdRuleConf1));\n+            TestPasswordPolicy policy1 = new TestPasswordPolicy();\n+            policy1.add(passwordRule1);\n \n             DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n-            pwdRuleConf.setMaxLength(10);\n-\n-            List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n-            pwdRuleConfs.add(pwdRuleConf);\n-            pwdRuleConfs.add(pwdRuleConf2);\n-            passwordGenerator.generate(pwdRuleConfs);\n+            pwdRuleConf2.setMaxLength(10);\n+            TestImplementation passwordRule2 = new TestImplementation();\n+            passwordRule2.setBody(POJOHelper.serialize(pwdRuleConf2));\n+            TestPasswordPolicy policy2 = new TestPasswordPolicy();\n+            policy2.add(passwordRule2);\n+\n+            List<PasswordPolicy> policies = new ArrayList<>();\n+            policies.add(policy1);\n+            policies.add(policy2);\n+            passwordGenerator.generate(policies);\n         });\n     }\n \n     @Test\n     public void issueSYNCOPE678() {\n         String password = null;\n         try {\n-            password = passwordGenerator.generate(Collections.<PasswordRuleConf>emptyList());\n+            password = passwordGenerator.generate(Collections.<PasswordPolicy>emptyList());\n         } catch (InvalidPasswordRuleConf e) {\n             fail(e.getMessage());\n         }\n         assertNotNull(password);\n \n-        DefaultPasswordRuleConf ppSpec = createBaseDefaultPasswordRuleConf();\n-        ppSpec.setMinLength(0);\n+        DefaultPasswordRuleConf pwdRuleConf1 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf1.setMinLength(0);\n+        TestImplementation passwordRule1 = new TestImplementation();\n+        passwordRule1.setBody(POJOHelper.serialize(pwdRuleConf1));\n+        TestPasswordPolicy policy1 = new TestPasswordPolicy();\n+\n         password = null;\n         try {\n-            password = passwordGenerator.generate(Collections.<PasswordRuleConf>singletonList(ppSpec));\n+            password = passwordGenerator.generate(Collections.<PasswordPolicy>singletonList(policy1));\n         } catch (InvalidPasswordRuleConf e) {\n             fail(e.getMessage());\n         }"},{"sha":"96479ce7cab13622970f30c2dae7c7d5db5700a3","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/TestImplementation.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestImplementation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestImplementation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestImplementation.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+\n+public class TestImplementation implements Implementation {\n+\n+    private static final long serialVersionUID = -2362660463135828190L;\n+\n+    private String body;\n+\n+    @Override\n+    public void setKey(final String key) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public ImplementationEngine getEngine() {\n+        return ImplementationEngine.JAVA;\n+    }\n+\n+    @Override\n+    public void setEngine(ImplementationEngine engine) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public ImplementationType getType() {\n+        return ImplementationType.PASSWORD_RULE;\n+    }\n+\n+    @Override\n+    public void setType(ImplementationType type) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    @Override\n+    public void setBody(final String body) {\n+        this.body = body;\n+    }\n+\n+}"},{"sha":"bf2255d3476f2c484c06fbf20f3d43097d3ebfd0","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/TestPasswordPolicy.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordPolicy.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+\n+public class TestPasswordPolicy implements PasswordPolicy {\n+\n+    private static final long serialVersionUID = 4978614846223679095L;\n+\n+    private final List<Implementation> rules = new ArrayList<>();\n+\n+    @Override\n+    public String getKey() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public void setDescription(String description) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public boolean isAllowNullPassword() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setAllowNullPassword(final boolean allowNullPassword) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public int getHistoryLength() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void setHistoryLength(final int historyLength) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public boolean add(final Implementation rule) {\n+        return this.rules.add(rule);\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getRules() {\n+        return this.rules;\n+\n+    }\n+}"},{"sha":"549549ad0ac8f25268aca8949c9889c9c056d63e","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/TestPasswordRule.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordRule.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+\n+@PasswordRuleConfClass(DefaultPasswordRuleConf.class)\n+public class TestPasswordRule implements PasswordRule {\n+\n+    private DefaultPasswordRuleConf conf;\n+\n+    @Override\n+    public PasswordRuleConf getConf() {\n+        return conf;\n+    }\n+\n+    @Override\n+    public void setConf(final PasswordRuleConf conf) {\n+        if (conf instanceof DefaultPasswordRuleConf) {\n+            this.conf = (DefaultPasswordRuleConf) conf;\n+        } else {\n+            throw new IllegalArgumentException(\n+                    DefaultPasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n+    }\n+\n+    @Override\n+    public void enforce(final User user) {\n+        // nothing to do\n+    }\n+\n+}"},{"sha":"76ae5117e8e3dececaff467c5391013101094797","filename":"core/spring/src/test/resources/springTest.xml","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fresources%2FspringTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/core%2Fspring%2Fsrc%2Ftest%2Fresources%2FspringTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fresources%2FspringTest.xml?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://www.springframework.org/schema/context\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n+\n+  <bean class=\"org.apache.syncope.core.spring.ApplicationContextProvider\"/>\n+  <bean class=\"org.apache.syncope.core.spring.security.DummyImplementationLookup\"/>\n+\n+</beans>"},{"sha":"9c78366066f20c34878b916d35f6236c25fa9ee9","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,9 +20,7 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -61,7 +59,7 @@ public class SAML2IdPTO extends AbstractBaseBean implements EntityTO, ItemContai\n \n     private final List<ItemTO> items = new ArrayList<>();\n \n-    private final Set<String> actionsClassNames = new HashSet<>();\n+    private final List<String> actions = new ArrayList<>();\n \n     @Override\n     public String getKey() {\n@@ -182,11 +180,11 @@ public boolean remove(final ItemTO item) {\n         return this.items.remove(item);\n     }\n \n-    @XmlElementWrapper(name = \"actionsClassNames\")\n-    @XmlElement(name = \"actionsClassName\")\n-    @JsonProperty(\"actionsClassNames\")\n-    public Set<String> getActionsClassNames() {\n-        return actionsClassNames;\n+    @XmlElementWrapper(name = \"actions\")\n+    @XmlElement(name = \"action\")\n+    @JsonProperty(\"actions\")\n+    public List<String> getActions() {\n+        return actions;\n     }\n \n     public boolean isSupportUnsolicited() {"},{"sha":"4e40e83772a53321c98d93f09d4aa7e8be784b51","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -68,7 +68,6 @@\n import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n import org.opensaml.saml.saml2.core.AuthnContextComparisonTypeEnumeration;\n import org.opensaml.saml.saml2.core.AuthnRequest;\n-import org.opensaml.saml.saml2.core.AuthnStatement;\n import org.opensaml.saml.saml2.core.Issuer;\n import org.opensaml.saml.saml2.core.LogoutRequest;\n import org.opensaml.saml.saml2.core.LogoutResponse;\n@@ -448,14 +447,14 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         if (assertion.getConditions().getNotOnOrAfter() != null) {\n             responseTO.setNotOnOrAfter(assertion.getConditions().getNotOnOrAfter().toDate());\n         }\n-        for (AuthnStatement authnStmt : assertion.getAuthnStatements()) {\n+        assertion.getAuthnStatements().forEach(authnStmt -> {\n             responseTO.setSessionIndex(authnStmt.getSessionIndex());\n \n             responseTO.setAuthInstant(authnStmt.getAuthnInstant().toDate());\n             if (authnStmt.getSessionNotOnOrAfter() != null) {\n                 responseTO.setNotOnOrAfter(authnStmt.getSessionNotOnOrAfter().toDate());\n             }\n-        }\n+        });\n \n         for (AttributeStatement attrStmt : assertion.getAttributeStatements()) {\n             for (Attribute attr : attrStmt.getAttributes()) {\n@@ -469,19 +468,19 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n \n                     AttrTO attrTO = new AttrTO();\n                     attrTO.setSchema(attrName);\n-                    for (XMLObject value : attr.getAttributeValues()) {\n-                        if (value.getDOM() != null) {\n-                            attrTO.getValues().add(value.getDOM().getTextContent());\n-                        }\n-                    }\n+                    attr.getAttributeValues().stream().\n+                            filter(value -> value.getDOM() != null).\n+                            forEachOrdered(value -> {\n+                                attrTO.getValues().add(value.getDOM().getTextContent());\n+                            });\n                     responseTO.getAttrs().add(attrTO);\n                 }\n             }\n         }\n \n         final List<String> matchingUsers = keyValue == null\n                 ? Collections.<String>emptyList()\n-                : userManager.findMatchingUser(keyValue, idp.getConnObjectKeyItem());\n+                : userManager.findMatchingUser(keyValue, idp.getKey());\n         LOG.debug(\"Found {} matching users for {}\", matchingUsers.size(), keyValue);\n \n         String username;"},{"sha":"487478befa4d9f94d34d4cd4d8001494354d94f2","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java","status":"modified","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,7 +31,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -41,9 +40,7 @@\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.opensaml.saml.saml2.metadata.IDPSSODescriptor;\n import org.opensaml.saml.saml2.metadata.KeyDescriptor;\n-import org.opensaml.saml.saml2.metadata.NameIDFormat;\n import org.opensaml.saml.saml2.metadata.SingleLogoutService;\n-import org.opensaml.saml.saml2.metadata.SingleSignOnService;\n import org.opensaml.xmlsec.signature.X509Data;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -75,21 +72,21 @@ public SAML2IdPEntity(\n \n         IDPSSODescriptor idpdescriptor = entityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS);\n \n-        for (SingleSignOnService sso : idpdescriptor.getSingleSignOnServices()) {\n+        idpdescriptor.getSingleSignOnServices().forEach(sso -> {\n             LOG.debug(\"[{}] Add SSO binding {}({})\", id, sso.getBinding(), sso.getLocation());\n             this.ssoBindings.put(sso.getBinding(), sso);\n-        }\n+        });\n \n-        for (SingleLogoutService slo : idpdescriptor.getSingleLogoutServices()) {\n+        idpdescriptor.getSingleLogoutServices().forEach(slo -> {\n             LOG.debug(\"[{}] Add SLO binding '{}'\\n\\tLocation: '{}'\\n\\tResponse Location: '{}'\",\n                     id, slo.getBinding(), slo.getLocation(), slo.getResponseLocation());\n             this.sloBindings.put(slo.getBinding(), slo);\n-        }\n+        });\n \n-        for (NameIDFormat nameIDFormat : idpdescriptor.getNameIDFormats()) {\n+        idpdescriptor.getNameIDFormats().forEach(nameIDFormat -> {\n             LOG.debug(\"[{}] Add NameIDFormat '{}'\", id, nameIDFormat.getFormat());\n             nameIDFormats.add(nameIDFormat.getFormat());\n-        }\n+        });\n \n         CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n \n@@ -125,6 +122,10 @@ public String getId() {\n         return id;\n     }\n \n+    public String getKey() {\n+        return idpTO.getKey();\n+    }\n+\n     public boolean isCreateUnmatching() {\n         return idpTO.isCreateUnmatching();\n     }\n@@ -149,16 +150,12 @@ public ItemTO getConnObjectKeyItem() {\n         return idpTO.getConnObjectKeyItem();\n     }\n \n-    public List<ItemTO> getItems() {\n-        return idpTO.getItems();\n-    }\n-\n     public UserTO getUserTemplate() {\n         return idpTO.getUserTemplate();\n     }\n \n-    public Set<String> getActionsClassNames() {\n-        return idpTO.getActionsClassNames();\n+    public List<String> getActions() {\n+        return idpTO.getActions();\n     }\n \n     public Endpoint getSSOLocation(final SAML2BindingType bindingType) {"},{"sha":"4083a4513bfd0cd9a6be14c9ede1c08f172336d0","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":45,"deletions":18,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -29,17 +29,20 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n@@ -64,12 +67,18 @@ public class SAML2UserManager {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SAML2UserManager.class);\n \n+    @Autowired\n+    private SAML2IdPDAO idpDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Autowired\n     private IntAttrNameParser intAttrNameParser;\n \n@@ -86,11 +95,17 @@ public class SAML2UserManager {\n     private UserDataBinder binder;\n \n     @Transactional(readOnly = true)\n-    public List<String> findMatchingUser(final String keyValue, final ItemTO connObjectKeyItem) {\n+    public List<String> findMatchingUser(final String keyValue, final String idpKey) {\n         List<String> result = new ArrayList<>();\n \n+        SAML2IdP idp = idpDAO.find(idpKey);\n+        if (idp == null) {\n+            LOG.warn(\"Invalid IdP: {}\", idpKey);\n+            return result;\n+        }\n+\n         String transformed = keyValue;\n-        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n+        for (ItemTransformer transformer : MappingUtils.getItemTransformers(idp.getConnObjectKeyItem().get())) {\n             List<Object> output = transformer.beforePull(\n                     null,\n                     null,\n@@ -100,7 +115,8 @@ public List<String> findMatchingUser(final String keyValue, final ItemTO connObj\n             }\n         }\n \n-        IntAttrName intAttrName = intAttrNameParser.parse(connObjectKeyItem.getIntAttrName(), AnyTypeKind.USER);\n+        IntAttrName intAttrName = intAttrNameParser.parse(\n+                idp.getConnObjectKeyItem().get().getIntAttrName(), AnyTypeKind.USER);\n \n         if (intAttrName.getField() != null) {\n             switch (intAttrName.getField()) {\n@@ -156,23 +172,34 @@ public List<String> findMatchingUser(final String keyValue, final ItemTO connObj\n     private List<SAML2IdPActions> getActions(final SAML2IdPEntity idp) {\n         List<SAML2IdPActions> actions = new ArrayList<>();\n \n-        idp.getActionsClassNames().forEach((className) -> {\n-            try {\n-                Class<?> actionsClass = Class.forName(className);\n-                SAML2IdPActions idpActions = (SAML2IdPActions) ApplicationContextProvider.getBeanFactory().\n-                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-\n-                actions.add(idpActions);\n-            } catch (Exception e) {\n-                LOG.warn(\"Class '{}' not found\", className, e);\n+        idp.getActions().forEach(key -> {\n+            Implementation impl = implementationDAO.find(key);\n+            if (impl == null) {\n+                LOG.warn(\"Invalid implementation: {}\", key);\n+            } else {\n+                try {\n+                    Class<?> actionsClass = Class.forName(impl.getBody());\n+                    SAML2IdPActions idpActions = (SAML2IdPActions) ApplicationContextProvider.getBeanFactory().\n+                            createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+\n+                    actions.add(idpActions);\n+                } catch (Exception e) {\n+                    LOG.warn(\"Class '{}' not found\", impl.getBody(), e);\n+                }\n             }\n         });\n \n         return actions;\n     }\n \n-    private void fill(final SAML2IdPEntity idp, final SAML2LoginResponseTO responseTO, final UserTO userTO) {\n-        for (ItemTO item : idp.getItems()) {\n+    private void fill(final String idpKey, final SAML2LoginResponseTO responseTO, final UserTO userTO) {\n+        SAML2IdP idp = idpDAO.find(idpKey);\n+        if (idp == null) {\n+            LOG.warn(\"Invalid IdP: {}\", idpKey);\n+            return;\n+        }\n+\n+        idp.getItems().forEach(item -> {\n             IntAttrName intAttrName = intAttrNameParser.parse(item.getIntAttrName(), AnyTypeKind.USER);\n \n             List<String> values = Collections.emptyList();\n@@ -218,7 +245,7 @@ private void fill(final SAML2IdPEntity idp, final SAML2LoginResponseTO responseT\n                         LOG.warn(\"Unsupported: {} {}\", intAttrName.getSchemaType(), intAttrName.getSchemaName());\n                 }\n             }\n-        }\n+        });\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n@@ -234,7 +261,7 @@ public String create(final SAML2IdPEntity idp, final SAML2LoginResponseTO respon\n             userTO = action.beforeCreate(userTO, responseTO);\n         }\n \n-        fill(idp, responseTO, userTO);\n+        fill(idp.getKey(), responseTO, userTO);\n \n         if (userTO.getRealm() == null) {\n             userTO.setRealm(SyncopeConstants.ROOT_REALM);\n@@ -258,7 +285,7 @@ public String update(final String username, final SAML2IdPEntity idp, final SAML\n         UserTO userTO = binder.getUserTO(userDAO.findKey(username));\n         UserTO original = SerializationUtils.clone(userTO);\n \n-        fill(idp, responseTO, userTO);\n+        fill(idp.getKey(), responseTO, userTO);\n \n         UserPatch userPatch = AnyOperations.diff(userTO, original, true);\n "},{"sha":"b3bda7cec990ec1f5593280d22a16fe93cd25244","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n public interface SAML2IdP extends Entity {\n@@ -69,6 +68,7 @@ public interface SAML2IdP extends Entity {\n \n     List<? extends SAML2IdPItem> getItems();\n \n-    Set<String> getActionsClassNames();\n+    boolean add(Implementation action);\n \n+    List<? extends Implementation> getActions();\n }"},{"sha":"13b43f130557b75cb649d69916c69d813c0fcee0","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java","status":"modified","additions":19,"deletions":11,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,27 +19,27 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n-import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n import javax.persistence.Lob;\n+import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n@@ -94,12 +94,13 @@ public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP\n     @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"idp\")\n     private JPASAML2UserTemplate userTemplate;\n \n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Column(name = \"actionClassName\")\n-    @CollectionTable(name = TABLE + \"_actionsClassNames\",\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Action\",\n             joinColumns =\n-            @JoinColumn(name = \"saml2IdP_id\", referencedColumnName = \"id\"))\n-    private Set<String> actionsClassNames = new HashSet<>();\n+            @JoinColumn(name = \"idp_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> actions = new ArrayList<>();\n \n     @Override\n     public String getEntityID() {\n@@ -215,7 +216,14 @@ public void setConnObjectKeyItem(final SAML2IdPItem item) {\n     }\n \n     @Override\n-    public Set<String> getActionsClassNames() {\n-        return actionsClassNames;\n+    public boolean add(final Implementation action) {\n+        checkType(action, JPAImplementation.class);\n+        checkImplementationType(action, ImplementationType.LOGIC_ACTIONS);\n+        return this.actions.add((JPAImplementation) action);\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getActions() {\n+        return actions;\n     }\n }"},{"sha":"6e22a43badf68471eec2fee9a1e0a324e1878939","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdPItem.java","status":"modified","additions":19,"deletions":13,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -21,14 +21,15 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.Cacheable;\n-import javax.persistence.CollectionTable;\n-import javax.persistence.Column;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n@@ -45,15 +46,13 @@ public class JPASAML2IdPItem extends AbstractItem implements SAML2IdPItem {\n     @ManyToOne\n     private JPASAML2IdP idp;\n \n-    /**\n-     * (Optional) classes for Item transformation.\n-     */\n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Column(name = \"transformerClassName\")\n-    @CollectionTable(name = TABLE + \"_Transformer\",\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Transformer\",\n             joinColumns =\n-            @JoinColumn(name = \"saml2IdPItemItem_id\", referencedColumnName = \"id\"))\n-    private List<String> transformerClassNames = new ArrayList<>();\n+            @JoinColumn(name = \"item_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> transformers = new ArrayList<>();\n \n     @Override\n     public SAML2IdP getIdP() {\n@@ -67,7 +66,14 @@ public void setIdP(final SAML2IdP idp) {\n     }\n \n     @Override\n-    public List<String> getTransformerClassNames() {\n-        return transformerClassNames;\n+    public boolean add(final Implementation transformer) {\n+        checkType(transformer, JPAImplementation.class);\n+        checkImplementationType(transformer, ImplementationType.ITEM_TRANSFORMER);\n+        return this.transformers.add((JPAImplementation) transformer);\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getTransformers() {\n+        return transformers;\n     }\n }"},{"sha":"83bf3486e507e4d4631f10035a3e14d1a1e8a257","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java","status":"modified","additions":26,"deletions":23,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -20,8 +20,8 @@\n \n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP> {\n@@ -36,38 +36,41 @@ public boolean isValid(final SAML2IdP value, final ConstraintValidatorContext co\n             return false;\n         }\n \n-        boolean isValid = true;\n+        final boolean[] isValid = new boolean[] { true };\n \n         long passwords = value.getItems().stream().filter(item -> item.isPassword()).count();\n         if (passwords > 0) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"No password mapping is allowed\")).\n                     addPropertyNode(\"password.size\").addConstraintViolation();\n-            isValid = false;\n+            isValid[0] = false;\n         }\n \n-        for (SAML2IdPItem item : value.getItems()) {\n-            for (String className : item.getTransformerClassNames()) {\n-                Class<?> actionsClass = null;\n-                boolean isAssignable = false;\n-                try {\n-                    actionsClass = Class.forName(className);\n-                    isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n-                } catch (Exception e) {\n-                    LOG.error(\"Invalid MappingItemTransformer specified: {}\", className, e);\n-                }\n+        value.getItems().forEach(item -> {\n+            item.getTransformers().stream().\n+                    filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).\n+                    forEach(transformer -> {\n \n-                if (actionsClass == null || !isAssignable) {\n-                    context.buildConstraintViolationWithTemplate(\n-                            getTemplate(EntityViolationType.InvalidMapping,\n-                                    \"Invalid mapping item trasformer class name\")).\n-                            addPropertyNode(\"mappingItemTransformerClassName\").addConstraintViolation();\n-                    isValid = false;\n-                }\n-            }\n-        }\n+                        Class<?> actionsClass = null;\n+                        boolean isAssignable = false;\n+                        try {\n+                            actionsClass = Class.forName(transformer.getBody());\n+                            isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Invalid ItemTransformer specified: {}\", transformer.getBody(), e);\n+                        }\n+\n+                        if (actionsClass == null || !isAssignable) {\n+                            context.buildConstraintViolationWithTemplate(\n+                                    getTemplate(EntityViolationType.InvalidMapping,\n+                                            \"Invalid item trasformer class name\")).\n+                                    addPropertyNode(\"itemTransformers\").addConstraintViolation();\n+                            isValid[0] = false;\n+                        }\n+                    });\n+        });\n \n-        return isValid;\n+        return isValid[0];\n     }\n \n }"},{"sha":"4413fc3e6a8b450fef37670a6cde54172c4cd5ff","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":20,"deletions":3,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,7 +31,9 @@\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n@@ -59,6 +61,9 @@ public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {\n     @Autowired\n     private SAML2IdPDAO saml2IdPDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Autowired\n     private SAML2EntityFactory entityFactory;\n \n@@ -196,8 +201,18 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         });\n         populateItems(idpTO, idp, allowedSchemas);\n \n-        idp.getActionsClassNames().clear();\n-        idp.getActionsClassNames().addAll(idpTO.getActionsClassNames());\n+        idpTO.getActions().forEach(implementationKey -> {\n+            Implementation implementation = implementationDAO.find(implementationKey);\n+            if (implementation == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \"{}, ignoring...\", implementationKey);\n+            } else {\n+                idp.add(implementation);\n+            }\n+        });\n+        // remove all implementations not contained in the TO\n+        idp.getActions().removeAll(idp.getActions().stream().\n+                filter(implementation -> !idpTO.getActions().contains(implementation.getKey())).\n+                collect(Collectors.toList()));\n \n         return saml2IdPDAO.save(idp);\n     }\n@@ -237,7 +252,9 @@ public SAML2IdPTO getIdPTO(final SAML2IdP idp) {\n \n         populateItems(idp, idpTO);\n \n-        idpTO.getActionsClassNames().addAll(idp.getActionsClassNames());\n+        idp.getActions().forEach(action -> {\n+            idpTO.getActions().add(action.getKey());\n+        });\n \n         return idpTO;\n     }"},{"sha":"e4d94d078b3239f1d513d7eb743d0d0c7477e690","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":99,"deletions":75,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.sql.DataSource;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n@@ -34,19 +36,24 @@\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.logic.TaskLogic;\n+import org.apache.syncope.core.migration.MigrationPullActions;\n import org.apache.syncope.core.provisioning.java.job.report.AuditReportlet;\n import org.apache.syncope.core.provisioning.java.job.report.GroupReportlet;\n import org.apache.syncope.core.provisioning.java.job.report.ReconciliationReportlet;\n import org.apache.syncope.core.provisioning.java.job.report.StaticReportlet;\n import org.apache.syncope.core.provisioning.java.job.report.UserReportlet;\n-import org.apache.syncope.core.migration.MigrationPullActions;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.AlwaysTrueValidator;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.BasicValidator;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator;\n@@ -68,126 +75,137 @@\n  */\n public class ITImplementationLookup implements ImplementationLookup {\n \n-    private static final Map<Type, Set<String>> CLASS_NAMES = new HashMap<Type, Set<String>>() {\n+    private static final String ES_REINDEX = \"org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex\";\n+\n+    private static final Set<Class<?>> JWTSSOPROVIDER_CLASSES = new HashSet<>(\n+            Arrays.asList(SyncopeJWTSSOProvider.class, CustomJWTSSOProvider.class));\n+\n+    private static final Map<Class<? extends ReportletConf>, Class<? extends Reportlet>> REPORTLET_CLASSES =\n+            new HashMap<Class<? extends ReportletConf>, Class<? extends Reportlet>>() {\n+\n+        private static final long serialVersionUID = 3109256773218160485L;\n+\n+        {\n+            put(AuditReportletConf.class, AuditReportlet.class);\n+            put(ReconciliationReportletConf.class, ReconciliationReportlet.class);\n+            put(GroupReportletConf.class, GroupReportlet.class);\n+            put(UserReportletConf.class, UserReportlet.class);\n+            put(StaticReportletConf.class, StaticReportlet.class);\n+        }\n+    };\n+\n+    private static final Map<Class<? extends AccountRuleConf>, Class<? extends AccountRule>> ACCOUNT_RULE_CLASSES =\n+            new HashMap<Class<? extends AccountRuleConf>, Class<? extends AccountRule>>() {\n+\n+        private static final long serialVersionUID = 3109256773218160485L;\n+\n+        {\n+            put(TestAccountRuleConf.class, TestAccountRule.class);\n+            put(DefaultAccountRuleConf.class, DefaultAccountRule.class);\n+        }\n+    };\n+\n+    private static final Map<Class<? extends PasswordRuleConf>, Class<? extends PasswordRule>> PASSWORD_RULE_CLASSES =\n+            new HashMap<Class<? extends PasswordRuleConf>, Class<? extends PasswordRule>>() {\n+\n+        private static final long serialVersionUID = -6624291041977583649L;\n+\n+        {\n+            put(TestPasswordRuleConf.class, TestPasswordRule.class);\n+            put(DefaultPasswordRuleConf.class, DefaultPasswordRule.class);\n+        }\n+    };\n+\n+    private static final Set<Class<?>> AUDITAPPENDER_CLASSES = new HashSet<>(\n+            Arrays.asList(TestFileAuditAppender.class, TestFileRewriteAuditAppender.class));\n+\n+    private static final Map<ImplementationType, Set<String>> CLASS_NAMES =\n+            new HashMap<ImplementationType, Set<String>>() {\n \n         private static final long serialVersionUID = 3109256773218160485L;\n \n         {\n-            Set<String> classNames = new HashSet<>();\n-            classNames.add(SyncopeJWTSSOProvider.class.getName());\n-            classNames.add(CustomJWTSSOProvider.class.getName());\n-            put(Type.JWT_SSO_PROVIDER, classNames);\n+            Set<String> classNames = ITImplementationLookup.JWTSSOPROVIDER_CLASSES.stream().\n+                    map(Class::getName).collect(Collectors.toSet());\n+            put(ImplementationType.JWT_SSO_PROVIDER, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(ReconciliationReportletConf.class.getName());\n             classNames.add(UserReportletConf.class.getName());\n             classNames.add(GroupReportletConf.class.getName());\n             classNames.add(AuditReportletConf.class.getName());\n             classNames.add(StaticReportletConf.class.getName());\n-            put(Type.REPORTLET_CONF, classNames);\n+            put(ImplementationType.REPORTLET, classNames);\n \n-            classNames = new HashSet<>();\n-            classNames.add(TestAccountRuleConf.class.getName());\n-            classNames.add(DefaultAccountRuleConf.class.getName());\n-            put(Type.ACCOUNT_RULE_CONF, classNames);\n+            classNames = ITImplementationLookup.ACCOUNT_RULE_CLASSES.values().stream().\n+                    map(Class::getName).collect(Collectors.toSet());\n+            put(ImplementationType.ACCOUNT_RULE, classNames);\n \n-            classNames = new HashSet<>();\n-            classNames.add(TestPasswordRuleConf.class.getName());\n-            classNames.add(DefaultPasswordRuleConf.class.getName());\n-            put(Type.PASSWORD_RULE_CONF, classNames);\n+            classNames = ITImplementationLookup.PASSWORD_RULE_CLASSES.values().stream().\n+                    map(Class::getName).collect(Collectors.toSet());\n+            put(ImplementationType.PASSWORD_RULE, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(PrefixItemTransformer.class.getName());\n-            put(Type.ITEM_TRANSFORMER, classNames);\n+            put(ImplementationType.ITEM_TRANSFORMER, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(TestSampleJobDelegate.class.getName());\n-            put(Type.TASKJOBDELEGATE, classNames);\n+            put(ImplementationType.TASKJOB_DELEGATE, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(TestReconciliationFilterBuilder.class.getName());\n-            put(Type.RECONCILIATION_FILTER_BUILDER, classNames);\n+            put(ImplementationType.RECON_FILTER_BUILDER, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(DoubleValueLogicActions.class.getName());\n-            put(Type.LOGIC_ACTIONS, classNames);\n+            put(ImplementationType.LOGIC_ACTIONS, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(LDAPMembershipPropagationActions.class.getName());\n             classNames.add(LDAPPasswordPropagationActions.class.getName());\n             classNames.add(DBPasswordPropagationActions.class.getName());\n-            put(Type.PROPAGATION_ACTIONS, classNames);\n+            put(ImplementationType.PROPAGATION_ACTIONS, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(LDAPPasswordPullActions.class.getName());\n             classNames.add(TestPullActions.class.getName());\n             classNames.add(MigrationPullActions.class.getName());\n             classNames.add(LDAPMembershipPullActions.class.getName());\n             classNames.add(DBPasswordPullActions.class.getName());\n-            put(Type.PULL_ACTIONS, classNames);\n+            put(ImplementationType.PULL_ACTIONS, classNames);\n \n             classNames = new HashSet<>();\n-            put(Type.PUSH_ACTIONS, classNames);\n+            put(ImplementationType.PUSH_ACTIONS, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(TestPullRule.class.getName());\n-            put(Type.PULL_CORRELATION_RULE, classNames);\n+            put(ImplementationType.PULL_CORRELATION_RULE, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(BasicValidator.class.getName());\n             classNames.add(EmailAddressValidator.class.getName());\n             classNames.add(AlwaysTrueValidator.class.getName());\n-            put(Type.VALIDATOR, classNames);\n+            put(ImplementationType.VALIDATOR, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(TestNotificationRecipientsProvider.class.getName());\n-            put(Type.NOTIFICATION_RECIPIENTS_PROVIDER, classNames);\n+            put(ImplementationType.RECIPIENTS_PROVIDER, classNames);\n \n-            classNames = new HashSet<>();\n-            classNames.add(TestFileRewriteAuditAppender.class.getName());\n-            classNames.add(TestFileAuditAppender.class.getName());\n-            put(Type.AUDIT_APPENDER, classNames);\n+            classNames = ITImplementationLookup.AUDITAPPENDER_CLASSES.stream().\n+                    map(Class::getName).collect(Collectors.toSet());\n+            put(ImplementationType.AUDIT_APPENDER, classNames);\n         }\n     };\n \n-    private static final Map<Class<? extends ReportletConf>, Class<? extends Reportlet>> REPORTLET_CLASSES =\n-            new HashMap<Class<? extends ReportletConf>, Class<? extends Reportlet>>() {\n-\n-        private static final long serialVersionUID = 3109256773218160485L;\n-\n-        {\n-            put(AuditReportletConf.class, AuditReportlet.class);\n-            put(ReconciliationReportletConf.class, ReconciliationReportlet.class);\n-            put(GroupReportletConf.class, GroupReportlet.class);\n-            put(UserReportletConf.class, UserReportlet.class);\n-            put(StaticReportletConf.class, StaticReportlet.class);\n-        }\n-    };\n-\n-    private static final Map<Class<? extends AccountRuleConf>, Class<? extends AccountRule>> ACCOUNT_RULE_CLASSES =\n-            new HashMap<Class<? extends AccountRuleConf>, Class<? extends AccountRule>>() {\n-\n-        private static final long serialVersionUID = 3109256773218160485L;\n-\n-        {\n-            put(TestAccountRuleConf.class, TestAccountRule.class);\n-            put(DefaultAccountRuleConf.class, DefaultAccountRule.class);\n-        }\n-    };\n-\n-    private static final Map<Class<? extends PasswordRuleConf>, Class<? extends PasswordRule>> PASSWORD_RULE_CLASSES =\n-            new HashMap<Class<? extends PasswordRuleConf>, Class<? extends PasswordRule>>() {\n-\n-        private static final long serialVersionUID = -6624291041977583649L;\n+    @Autowired\n+    private AnySearchDAO anySearchDAO;\n \n-        {\n-            put(TestPasswordRuleConf.class, TestPasswordRule.class);\n-            put(DefaultPasswordRuleConf.class, DefaultPasswordRule.class);\n-        }\n-    };\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n \n     @Autowired\n-    private AnySearchDAO anySearchDAO;\n+    private EntityFactory entityFactory;\n \n     @Autowired\n     private DomainsHolder domainsHolder;\n@@ -206,9 +224,21 @@ public void load() {\n         if (AopUtils.getTargetClass(anySearchDAO).getName().contains(\"Elasticsearch\")) {\n             for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n                 AuthContextUtils.execWithAuthContext(entry.getKey(), () -> {\n+                    Implementation reindex = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).\n+                            stream().\n+                            filter(impl -> impl.getEngine() == ImplementationEngine.JAVA\n+                            && ES_REINDEX.equals(impl.getBody())).\n+                            findAny().orElse(null);\n+                    if (reindex == null) {\n+                        reindex = entityFactory.newEntity(Implementation.class);\n+                        reindex.setEngine(ImplementationEngine.JAVA);\n+                        reindex.setType(ImplementationType.TASKJOB_DELEGATE);\n+                        reindex.setBody(ES_REINDEX);\n+                        reindex = implementationDAO.save(reindex);\n+                    }\n+\n                     SchedTaskTO task = new SchedTaskTO();\n-                    task.setJobDelegateClassName(\n-                            \"org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex\");\n+                    task.setJobDelegate(reindex.getKey());\n                     task.setName(\"Elasticsearch Reindex\");\n                     task = taskLogic.createSchedTask(task);\n \n@@ -221,16 +251,13 @@ public void load() {\n     }\n \n     @Override\n-    public Set<String> getClassNames(final Type type) {\n+    public Set<String> getClassNames(final ImplementationType type) {\n         return CLASS_NAMES.get(type);\n     }\n \n     @Override\n     public Set<Class<?>> getJWTSSOProviderClasses() {\n-        Set<Class<?>> classNames = new HashSet<>();\n-        classNames.add(SyncopeJWTSSOProvider.class);\n-        classNames.add(CustomJWTSSOProvider.class);\n-        return classNames;\n+        return JWTSSOPROVIDER_CLASSES;\n     }\n \n     @Override\n@@ -256,9 +283,6 @@ public Class<? extends PasswordRule> getPasswordRuleClass(\n \n     @Override\n     public Set<Class<?>> getAuditAppenderClasses() {\n-        Set<Class<?>> classes = new HashSet<>();\n-        classes.add(TestFileRewriteAuditAppender.class);\n-        classes.add(TestFileAuditAppender.class);\n-        return classes;\n+        return AUDITAPPENDER_CLASSES;\n     }\n }"},{"sha":"ddd48fe7a1655317aea5a9c780c7038f2e8c3e62","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRule.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -30,16 +30,19 @@ public class TestAccountRule implements AccountRule {\n \n     private TestAccountRuleConf conf;\n \n-    @Transactional(readOnly = true)\n     @Override\n-    public void enforce(final AccountRuleConf conf, final User user) {\n+    public void setConf(final AccountRuleConf conf) {\n         if (conf instanceof TestAccountRuleConf) {\n             this.conf = TestAccountRuleConf.class.cast(conf);\n         } else {\n             throw new IllegalArgumentException(\n                     AccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n+    }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final User user) {\n         if (!user.getUsername().contains(this.conf.getMustContainSubstring())) {\n             throw new AccountPolicyException(\"Username not containing \" + this.conf.getMustContainSubstring());\n         }"},{"sha":"4d1e3f7a53c9bf544c2c2c7872ef54d2e0302eb5","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestNotificationRecipientsProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestNotificationRecipientsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestNotificationRecipientsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestNotificationRecipientsProvider.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -21,10 +21,10 @@\n import java.util.Collections;\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationRecipientsProvider;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider;\n \n-public class TestNotificationRecipientsProvider implements NotificationRecipientsProvider {\n+public class TestNotificationRecipientsProvider implements RecipientsProvider {\n \n     @Transactional(readOnly = true)\n     @Override"},{"sha":"69431ef870260938b8933abbef0c7ef7c7cbf8de","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -30,16 +30,25 @@ public class TestPasswordRule implements PasswordRule {\n \n     private TestPasswordRuleConf conf;\n \n-    @Transactional(readOnly = true)\n     @Override\n-    public void enforce(final PasswordRuleConf conf, final User user) {\n+    public TestPasswordRuleConf getConf() {\n+        return conf;\n+    }\n+\n+    @Override\n+    public void setConf(final PasswordRuleConf conf) {\n         if (conf instanceof TestPasswordRuleConf) {\n             this.conf = TestPasswordRuleConf.class.cast(conf);\n         } else {\n             throw new IllegalArgumentException(\n                     PasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n \n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final User user) {\n         if (!user.getClearPassword().endsWith(this.conf.getMustEndWith())) {\n             throw new PasswordPolicyException(\"Password not ending with \" + this.conf.getMustEndWith());\n         }"},{"sha":"931b1834ba230470ba63f0888b5a42e282ed8beb","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestReconciliationFilterBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestReconciliationFilterBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestReconciliationFilterBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestReconciliationFilterBuilder.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBuilder;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n \n-public class TestReconciliationFilterBuilder implements ReconciliationFilterBuilder {\n+public class TestReconciliationFilterBuilder implements ReconFilterBuilder {\n \n     private static final Filter EQUALS = FilterBuilder.equalTo(AttributeBuilder.build(\"SURNAME\", \"Rossi\"));\n "},{"sha":"97667c32d83a1f6b92fe63a523be6b8c5a512428","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -81,6 +81,7 @@\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n+import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.common.rest.api.service.MailTemplateService;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n@@ -234,6 +235,8 @@ public abstract class AbstractITCase {\n \n     protected static SecurityQuestionService securityQuestionService;\n \n+    protected static ImplementationService implementationService;\n+\n     protected static CamelRouteService camelRouteService;\n \n     protected static SAML2SPService saml2SpService;\n@@ -304,6 +307,7 @@ public static void restSetup() {\n         notificationService = adminClient.getService(NotificationService.class);\n         schemaService = adminClient.getService(SchemaService.class);\n         securityQuestionService = adminClient.getService(SecurityQuestionService.class);\n+        implementationService = adminClient.getService(ImplementationService.class);\n         camelRouteService = adminClient.getService(CamelRouteService.class);\n         saml2SpService = adminClient.getService(SAML2SPService.class);\n         saml2IdPService = adminClient.getService(SAML2IdPService.class);\n@@ -321,7 +325,7 @@ protected static AttrPatch attrAddReplacePatch(final String schema, final String\n         return new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(schema, value)).build();\n     }\n \n-    public <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n+    public static <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n         WebClient webClient = WebClient.fromClient(WebClient.client(adminClient.getService(serviceClass)));\n         webClient.accept(clientFactory.getContentType().getMediaType()).to(location.toASCIIString(), false);\n "},{"sha":"fe8968e5d626d7aff062c00aa88919bc86993785","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ImplementationITCase.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.UUID;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ImplementationService;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.apache.syncope.fit.core.reference.TestPullActions;\n+import org.junit.jupiter.api.Test;\n+\n+public class ImplementationITCase extends AbstractITCase {\n+\n+    @Test\n+    public void create() {\n+        ImplementationTO implementationTO = new ImplementationTO();\n+        implementationTO.setKey(UUID.randomUUID().toString());\n+        implementationTO.setEngine(ImplementationEngine.JAVA);\n+        implementationTO.setType(ImplementationType.PUSH_ACTIONS);\n+        implementationTO.setBody(TestPullActions.class.getName());\n+\n+        // fail because type is wrong\n+        try {\n+            implementationService.create(implementationTO);\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidImplementation, e.getType());\n+        }\n+        implementationTO.setType(ImplementationType.PULL_ACTIONS);\n+\n+        Response response = implementationService.create(implementationTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+\n+        ImplementationTO actual =\n+                getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        assertNotNull(actual);\n+\n+        implementationTO.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+        assertEquals(actual, implementationTO);\n+    }\n+\n+}"},{"sha":"943fe9217485213f12b4feb21f29bbbbcfacb11d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -234,15 +234,6 @@ public void listAuditEvents() {\n         }\n         assertTrue(found);\n \n-        found = false;\n-        for (EventCategoryTO eventCategoryTO : events) {\n-            if (EventCategoryType.TASK == eventCategoryTO.getType()\n-                    && \"TestSampleJobDelegate\".equals(eventCategoryTO.getCategory())) {\n-                found = true;\n-            }\n-        }\n-        assertTrue(found);\n-\n         found = false;\n         for (EventCategoryTO eventCategoryTO : events) {\n             if (EventCategoryType.TASK == eventCategoryTO.getType()"},{"sha":"38832be8f651bd8e8559f9a021eaaa95513c2aea","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -31,13 +31,17 @@\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n+import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n import org.apache.syncope.fit.core.reference.TestNotificationRecipientsProvider;\n@@ -219,6 +223,15 @@ public void issueSYNCOPE445() throws Exception {\n     @Test\n     public void issueSYNCOPE446() throws Exception {\n         // 1. Create notification\n+        ImplementationTO recipientsProvider = new ImplementationTO();\n+        recipientsProvider.setKey(TestNotificationRecipientsProvider.class.getSimpleName());\n+        recipientsProvider.setEngine(ImplementationEngine.JAVA);\n+        recipientsProvider.setType(ImplementationType.RECIPIENTS_PROVIDER);\n+        recipientsProvider.setBody(TestNotificationRecipientsProvider.class.getName());\n+        Response response = implementationService.create(recipientsProvider);\n+        recipientsProvider = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        assertNotNull(recipientsProvider);\n+\n         NotificationTO notification = new NotificationTO();\n         notification.setTraceLevel(TraceLevel.ALL);\n         notification.getEvents().add(\"[LOGIC]:[GroupLogic]:[]:[create]:[SUCCESS]\");\n@@ -232,7 +245,7 @@ public void issueSYNCOPE446() throws Exception {\n         notification.setSelfAsRecipient(false);\n         notification.setRecipientAttrName(\"email\");\n         notification.getStaticRecipients().add(\"notificationtest@syncope.apache.org\");\n-        notification.setRecipientsProviderClassName(TestNotificationRecipientsProvider.class.getName());\n+        notification.setRecipientsProvider(recipientsProvider.getKey());\n \n         String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n         notification.setSender(sender);\n@@ -241,10 +254,10 @@ public void issueSYNCOPE446() throws Exception {\n         notification.setTemplate(\"optin\");\n         notification.setActive(true);\n \n-        Response response = notificationService.create(notification);\n+        response = notificationService.create(notification);\n         notification = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n         assertNotNull(notification);\n-        assertEquals(TestNotificationRecipientsProvider.class.getName(), notification.getRecipientsProviderClassName());\n+        assertEquals(recipientsProvider.getKey(), notification.getRecipientsProvider());\n \n         // 2. create group\n         GroupTO groupTO = new GroupTO();"},{"sha":"51b49ff6d5cdde16c728e8eee9445310863db049","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":59,"deletions":11,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -27,6 +27,7 @@\n \n import java.util.Arrays;\n import java.util.List;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n@@ -38,18 +39,40 @@\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.policy.PullPolicySpec;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ImplementationService;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.TestPullRule;\n import org.junit.jupiter.api.Test;\n \n public class PolicyITCase extends AbstractITCase {\n \n     private PullPolicyTO buildPullPolicyTO() {\n-        PullPolicyTO policy = new PullPolicyTO();\n+        ImplementationTO corrRule = null;\n+        try {\n+            corrRule = implementationService.read(TestPullRule.class.getSimpleName());\n+        } catch (SyncopeClientException e) {\n+            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n+                corrRule = new ImplementationTO();\n+                corrRule.setKey(TestPullRule.class.getSimpleName());\n+                corrRule.setEngine(ImplementationEngine.JAVA);\n+                corrRule.setType(ImplementationType.PULL_CORRELATION_RULE);\n+                corrRule.setBody(TestPullRule.class.getName());\n+                Response response = implementationService.create(corrRule);\n+                corrRule = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+                assertNotNull(corrRule);\n+            }\n+        }\n+        assertNotNull(corrRule);\n \n         PullPolicySpec spec = new PullPolicySpec();\n-        spec.getCorrelationRules().put(AnyTypeKind.USER.name(), TestPullRule.class.getName());\n+        spec.getCorrelationRules().put(AnyTypeKind.USER.name(), corrRule.getKey());\n \n+        PullPolicyTO policy = new PullPolicyTO();\n         policy.setSpecification(spec);\n         policy.setDescription(\"Pull policy\");\n \n@@ -110,7 +133,7 @@ public void create() {\n         PullPolicyTO policyTO = createPolicy(policy);\n \n         assertNotNull(policyTO);\n-        assertEquals(TestPullRule.class.getName(),\n+        assertEquals(TestPullRule.class.getSimpleName(),\n                 policyTO.getSpecification().getCorrelationRules().get(AnyTypeKind.USER.name()));\n     }\n \n@@ -126,15 +149,21 @@ public void update() {\n         assertNotNull(policy);\n         assertNotEquals(\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\", policy.getKey());\n \n-        ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).setMaxLength(22);\n+        ImplementationTO rule = implementationService.read(policy.getRules().get(0));\n+        assertNotNull(rule);\n+\n+        DefaultPasswordRuleConf ruleConf = POJOHelper.deserialize(rule.getBody(), DefaultPasswordRuleConf.class);\n+        ruleConf.setMaxLength(22);\n+        rule.setBody(POJOHelper.serialize(ruleConf));\n \n         // update new password policy\n         policyService.update(policy);\n         policy = policyService.read(policy.getKey());\n-\n         assertNotNull(policy);\n-        assertEquals(22, ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).getMaxLength());\n-        assertEquals(8, ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).getMinLength());\n+\n+        ruleConf = POJOHelper.deserialize(rule.getBody(), DefaultPasswordRuleConf.class);\n+        assertEquals(22, ruleConf.getMaxLength());\n+        assertEquals(8, ruleConf.getMinLength());\n     }\n \n     @Test\n@@ -155,8 +184,9 @@ public void delete() {\n     }\n \n     @Test\n-    public void getCorrelationRules() {\n-        assertEquals(1, syncopeService.platform().getPullCorrelationRules().size());\n+    public void getPullCorrelationRuleJavaClasses() {\n+        assertEquals(1, syncopeService.platform().\n+                getJavaImplInfo(ImplementationType.PULL_CORRELATION_RULE).get().getClasses().size());\n     }\n \n     @Test\n@@ -167,7 +197,16 @@ public void issueSYNCOPE553() {\n         DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n         ruleConf.setMinLength(3);\n         ruleConf.setMaxLength(8);\n-        policy.getRuleConfs().add(ruleConf);\n+\n+        ImplementationTO rule = new ImplementationTO();\n+        rule.setKey(\"DefaultAccountRuleConf\" + getUUIDString());\n+        rule.setEngine(ImplementationEngine.JAVA);\n+        rule.setType(ImplementationType.ACCOUNT_RULE);\n+        rule.setBody(POJOHelper.serialize(ruleConf));\n+        Response response = implementationService.create(rule);\n+        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        policy.getRules().add(rule.getKey());\n \n         policy = createPolicy(policy);\n         assertNotNull(policy);\n@@ -182,7 +221,16 @@ public void issueSYNCOPE682() {\n         DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n         ruleConf.setMinLength(3);\n         ruleConf.setMaxLength(8);\n-        policy.getRuleConfs().add(ruleConf);\n+\n+        ImplementationTO rule = new ImplementationTO();\n+        rule.setKey(\"DefaultAccountRuleConf\" + getUUIDString());\n+        rule.setEngine(ImplementationEngine.JAVA);\n+        rule.setType(ImplementationType.ACCOUNT_RULE);\n+        rule.setBody(POJOHelper.serialize(ruleConf));\n+        Response response = implementationService.create(rule);\n+        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        policy.getRules().add(rule.getKey());\n \n         policy = createPolicy(policy);\n         assertNotNull(policy);"},{"sha":"a130bd5a0c954d28c621179959d0d505423ca49b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -116,7 +116,7 @@ public void propagationJEXLTransformer() {\n         Optional<ItemTO> mappingItem = provision.getMapping().getItems().stream().\n                 filter(item -> \"location\".equals(item.getIntAttrName())).findFirst();\n         assertTrue(mappingItem.isPresent());\n-        assertTrue(mappingItem.get().getTransformerClassNames().isEmpty());\n+        assertTrue(mappingItem.get().getTransformers().isEmpty());\n \n         String suffix = getUUIDString();\n         mappingItem.get().setPropagationJEXLTransformer(\"value + '\" + suffix + \"'\");"},{"sha":"5d67ece97e66ef1bece51f964df9c0b99b2943db","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":88,"deletions":14,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -62,20 +62,24 @@\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n+import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.provisioning.java.pushpull.DBPasswordPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n@@ -100,14 +104,32 @@ public class PullTaskITCase extends AbstractTaskITCase {\n \n     @BeforeAll\n     public static void testPullActionsSetup() {\n+        ImplementationTO pullActions = null;\n+        try {\n+            pullActions = implementationService.read(TestPullActions.class.getSimpleName());\n+        } catch (SyncopeClientException e) {\n+            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n+                pullActions = new ImplementationTO();\n+                pullActions.setKey(TestPullActions.class.getSimpleName());\n+                pullActions.setEngine(ImplementationEngine.JAVA);\n+                pullActions.setType(ImplementationType.PULL_ACTIONS);\n+                pullActions.setBody(TestPullActions.class.getName());\n+                Response response = implementationService.create(pullActions);\n+                pullActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+                assertNotNull(pullActions);\n+            }\n+        }\n+        assertNotNull(pullActions);\n+\n         PullTaskTO pullTask = taskService.read(PULL_TASK_KEY, true);\n-        pullTask.getActionsClassNames().add(TestPullActions.class.getName());\n+        pullTask.getActions().add(pullActions.getKey());\n         taskService.update(pullTask);\n     }\n \n     @Test\n     public void getPullActionsClasses() {\n-        Set<String> actions = syncopeService.platform().getPullActions();\n+        Set<String> actions = syncopeService.platform().\n+                getJavaImplInfo(ImplementationType.PULL_ACTIONS).get().getClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }\n@@ -147,7 +169,7 @@ public void create() {\n         task = taskService.read(actual.getKey(), true);\n         assertNotNull(task);\n         assertEquals(actual.getKey(), task.getKey());\n-        assertEquals(actual.getJobDelegateClassName(), task.getJobDelegateClassName());\n+        assertEquals(actual.getJobDelegate(), task.getJobDelegate());\n         assertEquals(userTemplate, task.getTemplates().get(AnyTypeKind.USER.name()));\n         assertEquals(groupTemplate, task.getTemplates().get(AnyTypeKind.GROUP.name()));\n     }\n@@ -406,8 +428,18 @@ public void reconcileFromScriptedSQL() {\n         ItemTO mappingItem = provision.getMapping().getItems().stream().\n                 filter(object -> \"location\".equals(object.getIntAttrName())).findFirst().get();\n         assertNotNull(mappingItem);\n-        mappingItem.getTransformerClassNames().clear();\n-        mappingItem.getTransformerClassNames().add(PrefixItemTransformer.class.getName());\n+\n+        ImplementationTO transformer = new ImplementationTO();\n+        transformer.setKey(PrefixItemTransformer.class.getSimpleName());\n+        transformer.setEngine(ImplementationEngine.JAVA);\n+        transformer.setType(ImplementationType.ITEM_TRANSFORMER);\n+        transformer.setBody(PrefixItemTransformer.class.getName());\n+        Response response = implementationService.create(transformer);\n+        transformer = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        assertNotNull(transformer);\n+\n+        mappingItem.getTransformers().clear();\n+        mappingItem.getTransformers().add(transformer.getKey());\n \n         try {\n             resourceService.update(resource);\n@@ -488,15 +520,22 @@ public void filteredReconciliation() {\n                     + \"'\" + user2OnTestPull + \"', 'user2', 'Rossi', 'mail2@apache.org', NULL)\");\n \n             // 2. create new pull task for test-db, with reconciliation filter (surname 'Rossi') \n+            ImplementationTO reconFilterBuilder = new ImplementationTO();\n+            reconFilterBuilder.setKey(TestReconciliationFilterBuilder.class.getSimpleName());\n+            reconFilterBuilder.setEngine(ImplementationEngine.JAVA);\n+            reconFilterBuilder.setType(ImplementationType.RECON_FILTER_BUILDER);\n+            reconFilterBuilder.setBody(TestReconciliationFilterBuilder.class.getName());\n+            Response response = implementationService.create(reconFilterBuilder);\n+            reconFilterBuilder = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+            assertNotNull(reconFilterBuilder);\n+\n             task = taskService.read(\"7c2242f4-14af-4ab5-af31-cdae23783655\", true);\n             task.setPullMode(PullMode.FILTERED_RECONCILIATION);\n-            task.setReconciliationFilterBuilderClassName(TestReconciliationFilterBuilder.class.getName());\n-            Response response = taskService.create(task);\n+            task.setReconFilterBuilder(reconFilterBuilder.getKey());\n+            response = taskService.create(task);\n             task = getObject(response.getLocation(), TaskService.class, PullTaskTO.class);\n             assertNotNull(task);\n-            assertEquals(\n-                    TestReconciliationFilterBuilder.class.getName(),\n-                    task.getReconciliationFilterBuilderClassName());\n+            assertEquals(reconFilterBuilder.getKey(), task.getReconFilterBuilder());\n \n             // 3. exec task\n             ExecTO execution = execProvisioningTask(taskService, task.getKey(), 50, false);\n@@ -714,8 +753,25 @@ public void issueSYNCOPE258() {\n         // -----------------------------\n         // Add a custom correlation rule\n         // -----------------------------\n+        ImplementationTO corrRule = null;\n+        try {\n+            corrRule = implementationService.read(TestPullRule.class.getSimpleName());\n+        } catch (SyncopeClientException e) {\n+            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n+                corrRule = new ImplementationTO();\n+                corrRule.setKey(TestPullRule.class.getSimpleName());\n+                corrRule.setEngine(ImplementationEngine.JAVA);\n+                corrRule.setType(ImplementationType.PULL_CORRELATION_RULE);\n+                corrRule.setBody(TestPullRule.class.getName());\n+                Response response = implementationService.create(corrRule);\n+                corrRule = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+                assertNotNull(corrRule);\n+            }\n+        }\n+        assertNotNull(corrRule);\n+\n         PullPolicyTO policyTO = policyService.read(\"9454b0d7-2610-400a-be82-fc23cf553dd6\");\n-        policyTO.getSpecification().getCorrelationRules().put(AnyTypeKind.USER.name(), TestPullRule.class.getName());\n+        policyTO.getSpecification().getCorrelationRules().put(AnyTypeKind.USER.name(), corrRule.getKey());\n         policyService.update(policyTO);\n         // -----------------------------\n \n@@ -856,6 +912,15 @@ public void issueSYNCOPE313DB() throws Exception {\n         jdbcTemplate.execute(\"UPDATE test set PASSWORD='\" + newPassword + \"' where ID='\" + user.getUsername() + \"'\");\n \n         // 4. Pull the user from the resource\n+        ImplementationTO pullActions = new ImplementationTO();\n+        pullActions.setKey(DBPasswordPullActions.class.getSimpleName());\n+        pullActions.setEngine(ImplementationEngine.JAVA);\n+        pullActions.setType(ImplementationType.PULL_ACTIONS);\n+        pullActions.setBody(DBPasswordPullActions.class.getName());\n+        Response response = implementationService.create(pullActions);\n+        pullActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        assertNotNull(pullActions);\n+\n         PullTaskTO pullTask = new PullTaskTO();\n         pullTask.setDestinationRealm(SyncopeConstants.ROOT_REALM);\n         pullTask.setName(\"DB Pull Task\");\n@@ -864,7 +929,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         pullTask.setPerformUpdate(true);\n         pullTask.setPullMode(PullMode.FULL_RECONCILIATION);\n         pullTask.setResource(RESOURCE_NAME_TESTDB);\n-        pullTask.getActionsClassNames().add(DBPasswordPullActions.class.getName());\n+        pullTask.getActions().add(pullActions.getKey());\n         Response taskResponse = taskService.create(pullTask);\n \n         PullTaskTO actual = getObject(taskResponse.getLocation(), TaskService.class, PullTaskTO.class);\n@@ -873,7 +938,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         pullTask = taskService.read(actual.getKey(), true);\n         assertNotNull(pullTask);\n         assertEquals(actual.getKey(), pullTask.getKey());\n-        assertEquals(actual.getJobDelegateClassName(), pullTask.getJobDelegateClassName());\n+        assertEquals(actual.getJobDelegate(), pullTask.getJobDelegate());\n \n         ExecTO execution = execProvisioningTask(taskService, pullTask.getKey(), 50, false);\n         assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n@@ -936,6 +1001,15 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             connectorService.update(resourceConnector);\n \n             // 6. Pull the user from the resource\n+            ImplementationTO pullActions = new ImplementationTO();\n+            pullActions.setKey(LDAPPasswordPullActions.class.getSimpleName());\n+            pullActions.setEngine(ImplementationEngine.JAVA);\n+            pullActions.setType(ImplementationType.PULL_ACTIONS);\n+            pullActions.setBody(LDAPPasswordPullActions.class.getName());\n+            Response response = implementationService.create(pullActions);\n+            pullActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+            assertNotNull(pullActions);\n+\n             pullTask = new PullTaskTO();\n             pullTask.setDestinationRealm(SyncopeConstants.ROOT_REALM);\n             pullTask.setName(\"LDAP Pull Task\");\n@@ -944,7 +1018,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             pullTask.setPerformUpdate(true);\n             pullTask.setPullMode(PullMode.FULL_RECONCILIATION);\n             pullTask.setResource(RESOURCE_NAME_LDAP);\n-            pullTask.getActionsClassNames().add(LDAPPasswordPullActions.class.getName());\n+            pullTask.getActions().add(pullActions.getKey());\n             Response taskResponse = taskService.create(pullTask);\n \n             pullTask = getObject(taskResponse.getLocation(), TaskService.class, PullTaskTO.class);"},{"sha":"c46c445b4a4660a248a546aeaaf1ff117315974d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n@@ -70,7 +71,8 @@ public class PushTaskITCase extends AbstractTaskITCase {\n \n     @Test\n     public void getPushActionsClasses() {\n-        Set<String> actions = syncopeService.platform().getPushActions();\n+        Set<String> actions = syncopeService.platform().\n+                getJavaImplInfo(ImplementationType.PUSH_ACTIONS).get().getClasses();\n         assertNotNull(actions);\n     }\n \n@@ -110,7 +112,7 @@ public void createPushTask() {\n         task = taskService.read(actual.getKey(), true);\n         assertNotNull(task);\n         assertEquals(task.getKey(), actual.getKey());\n-        assertEquals(task.getJobDelegateClassName(), actual.getJobDelegateClassName());\n+        assertEquals(task.getJobDelegate(), actual.getJobDelegate());\n         assertEquals(task.getFilters().get(AnyTypeKind.USER.name()),\n                 actual.getFilters().get(AnyTypeKind.USER.name()));\n         assertEquals(task.getFilters().get(AnyTypeKind.GROUP.name()),"},{"sha":"23c202ac4abe1980e12da8bec5cf39008830cc4a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":19,"deletions":5,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -27,17 +27,23 @@\n \n import java.util.List;\n import java.util.Optional;\n+import java.util.UUID;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.RealmService;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n@@ -122,13 +128,21 @@ public void createUpdate() {\n     @Test\n     public void deletingAccountPolicy() {\n         // 1. create account policy\n-        AccountPolicyTO policy = new AccountPolicyTO();\n-        policy.setDescription(\"deletingAccountPolicy\");\n-\n         DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n         ruleConf.setMinLength(3);\n         ruleConf.setMaxLength(8);\n-        policy.getRuleConfs().add(ruleConf);\n+\n+        ImplementationTO rule = new ImplementationTO();\n+        rule.setKey(\"DefaultAccountRuleConf\" + UUID.randomUUID().toString());\n+        rule.setEngine(ImplementationEngine.JAVA);\n+        rule.setType(ImplementationType.ACCOUNT_RULE);\n+        rule.setBody(POJOHelper.serialize(ruleConf));\n+        Response response = implementationService.create(rule);\n+        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        AccountPolicyTO policy = new AccountPolicyTO();\n+        policy.setDescription(\"deletingAccountPolicy\");\n+        policy.getRules().add(rule.getKey());\n \n         policy = createPolicy(policy);\n         assertNotNull(policy);\n@@ -138,7 +152,7 @@ public void deletingAccountPolicy() {\n         realm.setName(\"withppolicy\");\n         realm.setAccountPolicy(policy.getKey());\n \n-        Response response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n+        response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n         RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n         assertNotNull(actuals);\n         assertTrue(actuals.length > 0);"},{"sha":"0100d5a40661e426e6e13755fcb6b6a8ee999162","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":83,"deletions":13,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -39,24 +39,30 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n public class ReportITCase extends AbstractITCase {\n \n     @Test\n     public void getReportletConfs() {\n-        Set<String> reportletConfs = syncopeService.platform().getReportletConfs();\n+        Set<String> reportletConfs = syncopeService.platform().\n+                getJavaImplInfo(ImplementationType.REPORTLET).get().getClasses();\n         assertNotNull(reportletConfs);\n         assertFalse(reportletConfs.isEmpty());\n         assertTrue(reportletConfs.contains(UserReportletConf.class.getName()));\n@@ -67,9 +73,9 @@ public void list() {\n         List<ReportTO> reports = reportService.list();\n         assertNotNull(reports);\n         assertFalse(reports.isEmpty());\n-        for (ReportTO report : reports) {\n+        reports.forEach(report -> {\n             assertNotNull(report);\n-        }\n+        });\n     }\n \n     @Test\n@@ -83,10 +89,26 @@ public void read() {\n \n     @Test\n     public void create() {\n+        ImplementationTO reportlet1 = new ImplementationTO();\n+        reportlet1.setKey(\"UserReportletConf\" + getUUIDString());\n+        reportlet1.setEngine(ImplementationEngine.JAVA);\n+        reportlet1.setType(ImplementationType.REPORTLET);\n+        reportlet1.setBody(POJOHelper.serialize(new UserReportletConf(\"first\")));\n+        Response response = implementationService.create(reportlet1);\n+        reportlet1.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        ImplementationTO reportlet2 = new ImplementationTO();\n+        reportlet2.setKey(\"UserReportletConf\" + getUUIDString());\n+        reportlet2.setEngine(ImplementationEngine.JAVA);\n+        reportlet2.setType(ImplementationType.REPORTLET);\n+        reportlet2.setBody(POJOHelper.serialize(new UserReportletConf(\"second\")));\n+        response = implementationService.create(reportlet2);\n+        reportlet2.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n         ReportTO report = new ReportTO();\n         report.setName(\"testReportForCreate\" + getUUIDString());\n-        report.getReportletConfs().add(new UserReportletConf(\"first\"));\n-        report.getReportletConfs().add(new UserReportletConf(\"second\"));\n+        report.getReportlets().add(reportlet1.getKey());\n+        report.getReportlets().add(reportlet2.getKey());\n         report.setTemplate(\"sample\");\n \n         report = createReport(report);\n@@ -100,30 +122,70 @@ public void create() {\n \n     @Test\n     public void update() {\n+        ImplementationTO reportlet1 = new ImplementationTO();\n+        reportlet1.setKey(\"UserReportletConf\" + getUUIDString());\n+        reportlet1.setEngine(ImplementationEngine.JAVA);\n+        reportlet1.setType(ImplementationType.REPORTLET);\n+        reportlet1.setBody(POJOHelper.serialize(new UserReportletConf(\"first\")));\n+        Response response = implementationService.create(reportlet1);\n+        reportlet1.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        ImplementationTO reportlet2 = new ImplementationTO();\n+        reportlet2.setKey(\"UserReportletConf\" + getUUIDString());\n+        reportlet2.setEngine(ImplementationEngine.JAVA);\n+        reportlet2.setType(ImplementationType.REPORTLET);\n+        reportlet2.setBody(POJOHelper.serialize(new UserReportletConf(\"second\")));\n+        response = implementationService.create(reportlet2);\n+        reportlet2.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n         ReportTO report = new ReportTO();\n         report.setName(\"testReportForUpdate\" + getUUIDString());\n-        report.getReportletConfs().add(new UserReportletConf(\"first\"));\n-        report.getReportletConfs().add(new UserReportletConf(\"second\"));\n+        report.getReportlets().add(reportlet1.getKey());\n+        report.getReportlets().add(reportlet2.getKey());\n         report.setTemplate(\"sample\");\n \n         report = createReport(report);\n         assertNotNull(report);\n-        assertEquals(2, report.getReportletConfs().size());\n+        assertEquals(2, report.getReportlets().size());\n \n-        report.getReportletConfs().add(new UserReportletConf(\"last\"));\n+        ImplementationTO reportlet3 = new ImplementationTO();\n+        reportlet3.setKey(\"UserReportletConf\" + getUUIDString());\n+        reportlet3.setEngine(ImplementationEngine.JAVA);\n+        reportlet3.setType(ImplementationType.REPORTLET);\n+        reportlet3.setBody(POJOHelper.serialize(new UserReportletConf(\"last\")));\n+        response = implementationService.create(reportlet3);\n+        reportlet3.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        report.getReportlets().add(reportlet3.getKey());\n \n         reportService.update(report);\n         ReportTO updated = reportService.read(report.getKey());\n         assertNotNull(updated);\n-        assertEquals(3, updated.getReportletConfs().size());\n+        assertEquals(3, updated.getReportlets().size());\n     }\n \n     @Test\n     public void delete() {\n+        ImplementationTO reportlet1 = new ImplementationTO();\n+        reportlet1.setKey(\"UserReportletConf\" + getUUIDString());\n+        reportlet1.setEngine(ImplementationEngine.JAVA);\n+        reportlet1.setType(ImplementationType.REPORTLET);\n+        reportlet1.setBody(POJOHelper.serialize(new UserReportletConf(\"first\")));\n+        Response response = implementationService.create(reportlet1);\n+        reportlet1.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        ImplementationTO reportlet2 = new ImplementationTO();\n+        reportlet2.setKey(\"UserReportletConf\" + getUUIDString());\n+        reportlet2.setEngine(ImplementationEngine.JAVA);\n+        reportlet2.setType(ImplementationType.REPORTLET);\n+        reportlet2.setBody(POJOHelper.serialize(new UserReportletConf(\"second\")));\n+        response = implementationService.create(reportlet2);\n+        reportlet2.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n         ReportTO report = new ReportTO();\n         report.setName(\"testReportForDelete\" + getUUIDString());\n-        report.getReportletConfs().add(new UserReportletConf(\"first\"));\n-        report.getReportletConfs().add(new UserReportletConf(\"second\"));\n+        report.getReportlets().add(reportlet1.getKey());\n+        report.getReportlets().add(reportlet2.getKey());\n         report.setTemplate(\"sample\");\n \n         report = createReport(report);\n@@ -259,10 +321,18 @@ public void auditReport() throws IOException {\n             loggerTO.setLevel(LoggerLevel.DEBUG);\n             loggerService.update(LoggerType.AUDIT, loggerTO);\n \n+            ImplementationTO auditReportlet = new ImplementationTO();\n+            auditReportlet.setKey(\"UserReportletConf\" + getUUIDString());\n+            auditReportlet.setEngine(ImplementationEngine.JAVA);\n+            auditReportlet.setType(ImplementationType.REPORTLET);\n+            auditReportlet.setBody(POJOHelper.serialize(new AuditReportletConf(\"auditReportlet\" + getUUIDString())));\n+            Response response = implementationService.create(auditReportlet);\n+            auditReportlet.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n             ReportTO report = new ReportTO();\n             report.setName(\"auditReport\" + getUUIDString());\n             report.setActive(true);\n-            report.getReportletConfs().add(new AuditReportletConf(\"auditReportlet\" + getUUIDString()));\n+            report.getReportlets().add(auditReportlet.getKey());\n             report.setTemplate(\"sample\");\n             report = createReport(report);\n "},{"sha":"2515264a5a317b0e349d2032a793ea1333b17fbe","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -54,6 +54,7 @@\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n@@ -102,7 +103,8 @@ private ResourceTO buildResourceTO(final String resourceKey) {\n \n     @Test\n     public void getPropagationActionsClasses() {\n-        Set<String> actions = syncopeService.platform().getPropagationActions();\n+        Set<String> actions = syncopeService.platform().\n+                getJavaImplInfo(ImplementationType.PROPAGATION_ACTIONS).get().getClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }"},{"sha":"a88327fd84bc3b467dfdb86c4e6a20a66e96c127","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -37,6 +37,8 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -50,7 +52,8 @@ public class SchedTaskITCase extends AbstractTaskITCase {\n \n     @Test\n     public void getJobClasses() {\n-        Set<String> jobClasses = syncopeService.platform().getTaskJobs();\n+        Set<String> jobClasses = syncopeService.platform().\n+                getJavaImplInfo(ImplementationType.TASKJOB_DELEGATE).get().getClasses();\n         assertNotNull(jobClasses);\n         assertFalse(jobClasses.isEmpty());\n     }\n@@ -86,10 +89,13 @@ public void update() {\n \n     @Test\n     public void deferred() {\n+        ImplementationTO taskJobDelegate = implementationService.read(TestSampleJobDelegate.class.getSimpleName());\n+        assertNotNull(taskJobDelegate);\n+\n         SchedTaskTO task = new SchedTaskTO();\n         task.setActive(true);\n         task.setName(\"deferred\");\n-        task.setJobDelegateClassName(TestSampleJobDelegate.class.getName());\n+        task.setJobDelegate(taskJobDelegate.getKey());\n \n         Response response = taskService.create(task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n@@ -128,10 +134,13 @@ public void deferred() {\n \n     @Test\n     public void issueSYNCOPE144() {\n+        ImplementationTO taskJobDelegate = implementationService.read(TestSampleJobDelegate.class.getSimpleName());\n+        assertNotNull(taskJobDelegate);\n+\n         SchedTaskTO task = new SchedTaskTO();\n         task.setName(\"issueSYNCOPE144\");\n         task.setDescription(\"issueSYNCOPE144 Description\");\n-        task.setJobDelegateClassName(TestSampleJobDelegate.class.getName());\n+        task.setJobDelegate(taskJobDelegate.getKey());\n \n         Response response = taskService.create(task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n@@ -159,10 +168,13 @@ public void issueSYNCOPE660() {\n         List<JobTO> jobs = taskService.listJobs();\n         int old_size = jobs.size();\n \n+        ImplementationTO taskJobDelegate = implementationService.read(TestSampleJobDelegate.class.getSimpleName());\n+        assertNotNull(taskJobDelegate);\n+\n         SchedTaskTO task = new SchedTaskTO();\n         task.setName(\"issueSYNCOPE660\");\n         task.setDescription(\"issueSYNCOPE660 Description\");\n-        task.setJobDelegateClassName(TestSampleJobDelegate.class.getName());\n+        task.setJobDelegate(taskJobDelegate.getKey());\n \n         Response response = taskService.create(task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);"},{"sha":"6c33ee7362e680b7412d8a390a674fe4ac7875f1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":23,"deletions":2,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -59,6 +59,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.BulkActionResult.Status;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -69,17 +70,21 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.core.reference.TestAccountRuleConf;\n import org.apache.syncope.fit.core.reference.TestPasswordRuleConf;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -934,15 +939,31 @@ public void customPolicyRules() {\n         // @XmlSeeAlso - the power of JAXB :-/\n         assumeTrue(MediaType.APPLICATION_JSON_TYPE.equals(clientFactory.getContentType().getMediaType()));\n \n+        ImplementationTO implementationTO = new ImplementationTO();\n+        implementationTO.setKey(\"TestAccountRuleConf\" + UUID.randomUUID().toString());\n+        implementationTO.setEngine(ImplementationEngine.JAVA);\n+        implementationTO.setType(ImplementationType.ACCOUNT_RULE);\n+        implementationTO.setBody(POJOHelper.serialize(new TestAccountRuleConf()));\n+        Response response = implementationService.create(implementationTO);\n+        implementationTO.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n         AccountPolicyTO accountPolicy = new AccountPolicyTO();\n         accountPolicy.setDescription(\"Account Policy with custom rules\");\n-        accountPolicy.getRuleConfs().add(new TestAccountRuleConf());\n+        accountPolicy.getRules().add(implementationTO.getKey());\n         accountPolicy = createPolicy(accountPolicy);\n         assertNotNull(accountPolicy);\n \n+        implementationTO = new ImplementationTO();\n+        implementationTO.setKey(\"TestPasswordRuleConf\" + UUID.randomUUID().toString());\n+        implementationTO.setEngine(ImplementationEngine.JAVA);\n+        implementationTO.setType(ImplementationType.PASSWORD_RULE);\n+        implementationTO.setBody(POJOHelper.serialize(new TestPasswordRuleConf()));\n+        response = implementationService.create(implementationTO);\n+        implementationTO.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n         PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n         passwordPolicy.setDescription(\"Password Policy with custom rules\");\n-        passwordPolicy.getRuleConfs().add(new TestPasswordRuleConf());\n+        passwordPolicy.getRules().add(implementationTO.getKey());\n         passwordPolicy = createPolicy(passwordPolicy);\n         assertNotNull(passwordPolicy);\n "},{"sha":"91072d1dffd1a1ce27c3030693ca1a4ef63464f1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":51,"deletions":9,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -37,6 +37,7 @@\n import javax.naming.NamingException;\n import javax.sql.DataSource;\n import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -53,6 +54,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -64,9 +66,14 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ImplementationService;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n import org.apache.syncope.core.spring.security.Encryptor;\n@@ -792,9 +799,18 @@ public void issueSYNCOPE402() {\n \n     @Test\n     public void issueSYNCOPE420() {\n+        ImplementationTO logicActions = new ImplementationTO();\n+        logicActions.setKey(DoubleValueLogicActions.class.getSimpleName());\n+        logicActions.setEngine(ImplementationEngine.JAVA);\n+        logicActions.setType(ImplementationType.LOGIC_ACTIONS);\n+        logicActions.setBody(DoubleValueLogicActions.class.getName());\n+        Response response = implementationService.create(logicActions);\n+        logicActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        assertNotNull(logicActions);\n+\n         RealmTO realm = realmService.list(\"/even/two\").iterator().next();\n         assertNotNull(realm);\n-        realm.getActionsClassNames().add(DoubleValueLogicActions.class.getName());\n+        realm.getActions().add(logicActions.getKey());\n         realmService.update(realm);\n \n         UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope420@syncope.apache.org\");\n@@ -964,9 +980,18 @@ public void issueSYNCOPE505DB() throws Exception {\n         assertTrue(user.getResources().isEmpty());\n \n         // 2. Add DBPasswordPropagationActions\n+        ImplementationTO propagationActions = new ImplementationTO();\n+        propagationActions.setKey(DBPasswordPropagationActions.class.getSimpleName());\n+        propagationActions.setEngine(ImplementationEngine.JAVA);\n+        propagationActions.setType(ImplementationType.PROPAGATION_ACTIONS);\n+        propagationActions.setBody(DBPasswordPropagationActions.class.getName());\n+        Response response = implementationService.create(propagationActions);\n+        propagationActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        assertNotNull(propagationActions);\n+\n         ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_TESTDB);\n         assertNotNull(resourceTO);\n-        resourceTO.getPropagationActionsClassNames().add(DBPasswordPropagationActions.class.getName());\n+        resourceTO.getPropagationActions().add(propagationActions.getKey());\n         resourceService.update(resourceTO);\n \n         // 3. Add a db resource to the User\n@@ -990,7 +1015,7 @@ public void issueSYNCOPE505DB() throws Exception {\n         // 5. Remove DBPasswordPropagationActions\n         resourceTO = resourceService.read(RESOURCE_NAME_TESTDB);\n         assertNotNull(resourceTO);\n-        resourceTO.getPropagationActionsClassNames().remove(DBPasswordPropagationActions.class.getName());\n+        resourceTO.getPropagationActions().remove(propagationActions.getKey());\n         resourceService.update(resourceTO);\n     }\n \n@@ -1004,9 +1029,18 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         assertTrue(user.getResources().isEmpty());\n \n         // 2. Add LDAPPasswordPropagationActions\n+        ImplementationTO propagationActions = new ImplementationTO();\n+        propagationActions.setKey(LDAPPasswordPropagationActions.class.getSimpleName());\n+        propagationActions.setEngine(ImplementationEngine.JAVA);\n+        propagationActions.setType(ImplementationType.PROPAGATION_ACTIONS);\n+        propagationActions.setBody(LDAPPasswordPropagationActions.class.getName());\n+        Response response = implementationService.create(propagationActions);\n+        propagationActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        assertNotNull(propagationActions);\n+\n         ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_LDAP);\n         assertNotNull(resourceTO);\n-        resourceTO.getPropagationActionsClassNames().add(LDAPPasswordPropagationActions.class.getName());\n+        resourceTO.getPropagationActions().add(propagationActions.getKey());\n         resourceTO.setRandomPwdIfNotProvided(false);\n         resourceService.update(resourceTO);\n \n@@ -1034,7 +1068,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         // 5. Remove LDAPPasswordPropagationActions\n         resourceTO = resourceService.read(RESOURCE_NAME_LDAP);\n         assertNotNull(resourceTO);\n-        resourceTO.getPropagationActionsClassNames().remove(LDAPPasswordPropagationActions.class.getName());\n+        resourceTO.getPropagationActions().remove(propagationActions.getKey());\n         resourceTO.setRandomPwdIfNotProvided(true);\n         resourceService.update(resourceTO);\n     }\n@@ -1179,12 +1213,20 @@ public void issueSYNCOPE647() {\n \n     @Test\n     public void issueSYNCOPE626() {\n-        PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n-        passwordPolicy.setDescription(\"Password Policy for SYNCOPE-626\");\n-\n         DefaultPasswordRuleConf ruleConf = new DefaultPasswordRuleConf();\n         ruleConf.setUsernameAllowed(false);\n-        passwordPolicy.getRuleConfs().add(ruleConf);\n+\n+        ImplementationTO rule = new ImplementationTO();\n+        rule.setKey(\"DefaultPasswordRuleConf\" + getUUIDString());\n+        rule.setEngine(ImplementationEngine.JAVA);\n+        rule.setType(ImplementationType.PASSWORD_RULE);\n+        rule.setBody(POJOHelper.serialize(ruleConf));\n+        Response response = implementationService.create(rule);\n+        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n+        passwordPolicy.setDescription(\"Password Policy for SYNCOPE-626\");\n+        passwordPolicy.getRules().add(rule.getKey());\n \n         passwordPolicy = createPolicy(passwordPolicy);\n         assertNotNull(passwordPolicy);"},{"sha":"cfb3a62951954ae32314d9d05f1f6595a0863aab","filename":"fit/core-reference/src/test/resources/log4j2.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -19,8 +19,8 @@ under the License.\n -->\n <configuration status=\"WARN\" shutdownHook=\"disable\">\n   <appenders>\n-    <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/it.log\"\n-                             filePattern=\"${log.directory}/it-%d{yyyy-MM-dd}.log.gz\"\n+    <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/core-fit.log\"\n+                             filePattern=\"${log.directory}/core-fit-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n         <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>"}]}