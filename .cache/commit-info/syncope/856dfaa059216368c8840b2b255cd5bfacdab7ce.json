{"sha":"856dfaa059216368c8840b2b255cd5bfacdab7ce","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg1NmRmYWEwNTkyMTYzNjhjODg0MGIyYjI1NWNkNWJmYWNkYWI3Y2U=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-23T11:19:38Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-23T11:19:38Z"},"message":"One-way hashed passwords, and minor fixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246641 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"75579abbb2e086081a40c160d0b5ff381d60d264","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/75579abbb2e086081a40c160d0b5ff381d60d264"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/856dfaa059216368c8840b2b255cd5bfacdab7ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/856dfaa059216368c8840b2b255cd5bfacdab7ce","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/856dfaa059216368c8840b2b255cd5bfacdab7ce","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/856dfaa059216368c8840b2b255cd5bfacdab7ce/comments","author":null,"committer":null,"parents":[{"sha":"512b024a91f2d7a2d2a5094a6d406716eefbe387","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/512b024a91f2d7a2d2a5094a6d406716eefbe387","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/512b024a91f2d7a2d2a5094a6d406716eefbe387"}],"stats":{"total":363,"additions":117,"deletions":246},"files":[{"sha":"6d9753484bb56a1a2e195a6a4a007a2469074867","filename":"core/pom.xml","status":"modified","additions":9,"deletions":14,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -34,17 +34,17 @@\n         <jetty.port>8888</jetty.port>\n \n         <cargo.servlet.port>9080</cargo.servlet.port>\n-        <cargo.log>/tmp/syncope-core-cargo.log</cargo.log>\n-        <cargo.output>/tmp/syncope-core-cargo-output.log</cargo.output>\n+        <cargo.log>/var/tmp/syncope-core-cargo.log</cargo.log>\n+        <cargo.output>/var/tmp/syncope-core-cargo-output.log</cargo.output>\n \n-        <logfile>/tmp/syncope-core.log</logfile>\n-        <logfile.persistence>/tmp/syncope-core-persistence.log</logfile.persistence>\n-        <logfile.rest>/tmp/syncope-core-rest.log</logfile.rest>\n-        <logfile.identityconnectors>/tmp/syncope-core-identityconnectors.log</logfile.identityconnectors>\n-        <logfile.test>/tmp/syncope-core-test.log</logfile.test>\n-        <logfile.monitor>/tmp/syncope-core-monitor.log</logfile.monitor>\n+        <logfile>/var/tmp/syncope-core.log</logfile>\n+        <logfile.persistence>/var/tmp/syncope-core-persistence.log</logfile.persistence>\n+        <logfile.rest>/var/tmp/syncope-core-rest.log</logfile.rest>\n+        <logfile.identityconnectors>/var/tmp/syncope-core-identityconnectors.log</logfile.identityconnectors>\n+        <logfile.test>/var/tmp/syncope-core-test.log</logfile.test>\n+        <logfile.monitor>/var/tmp/syncope-core-monitor.log</logfile.monitor>\n \n-        <bundles.directory>/tmp/bundles</bundles.directory>\n+        <bundles.directory>/var/tmp/bundles</bundles.directory>\n     </properties>\n \n     <dependencies>\n@@ -70,11 +70,6 @@\n             <artifactId>jstl</artifactId>\n         </dependency>\n \n-        <dependency>\n-            <groupId>bouncycastle</groupId>\n-            <artifactId>bcprov-jdk16</artifactId>\n-        </dependency>\n-\n         <dependency>\n             <groupId>org.apache.commons</groupId>\n             <artifactId>commons-jexl</artifactId>"},{"sha":"b126aff35179a378735027f477426952b06fc4ef","filename":"core/src/main/java/jpasymphony/dao/impl/JPAPropertySetItemDAOImpl.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAPropertySetItemDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAPropertySetItemDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAPropertySetItemDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -18,7 +18,6 @@\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import jpasymphony.beans.JPAPropertySetItem;\n import jpasymphony.dao.JPAPropertySetItemDAO;\n import org.syncope.core.persistence.dao.impl.AbstractDAOImpl;\n@@ -28,13 +27,11 @@ public class JPAPropertySetItemDAOImpl extends AbstractDAOImpl\n         implements JPAPropertySetItemDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n     public JPAPropertySetItem find(final Long id) {\n         return entityManager.find(JPAPropertySetItem.class, id);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public JPAPropertySetItem find(final Long workflowEntryId,\n             final String propertyKey) {\n \n@@ -57,15 +54,13 @@ public JPAPropertySetItem find(final Long workflowEntryId,\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<JPAPropertySetItem> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM JPAPropertySetItem e\");\n         return query.getResultList();\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<JPAPropertySetItem> findAll(final Long workflowEntryId) {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM JPAPropertySetItem e \""},{"sha":"4c83072106f544582e4e468f4072d274b5618b2e","filename":"core/src/main/java/jpasymphony/dao/impl/JPAWorkflowEntryDAOImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -23,7 +23,6 @@\n import jpasymphony.dao.JPAWorkflowEntryDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.dao.impl.AbstractDAOImpl;\n \n @Repository\n@@ -34,13 +33,11 @@ public class JPAWorkflowEntryDAOImpl extends AbstractDAOImpl\n     private JPAPropertySetItemDAO propertySetItemDAO;\n \n     @Override\n-    @Transactional(readOnly = true)\n     public JPAWorkflowEntry find(final Long id) {\n         return entityManager.find(JPAWorkflowEntry.class, id);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<JPAWorkflowEntry> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM JPAWorkflowEntry e\");"},{"sha":"af36d1848fccd5fc432daea387496d2b9f38e43f","filename":"core/src/main/java/jpasymphony/workflow/spi/jpa/JPAWorkflowStore.java","status":"modified","additions":14,"deletions":26,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -66,16 +66,23 @@ public class JPAWorkflowStore implements WorkflowStore {\n     @Autowired\n     private PropertySetDelegate propertySetDelegate;\n \n-    @Override\n-    public void setEntryState(final long entryId, final int state)\n+    private JPAWorkflowEntry getEntry(final long entryId)\n             throws StoreException {\n \n-        JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n+        final JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n         if (entry == null) {\n             throw new StoreException(\n                     \"Could not find workflow entry \" + entryId);\n         }\n \n+        return entry;\n+    }\n+\n+    @Override\n+    public void setEntryState(final long entryId, final int state)\n+            throws StoreException {\n+\n+        final JPAWorkflowEntry entry = getEntry(entryId);\n         entry.setWorkflowState(state);\n     }\n \n@@ -102,13 +109,9 @@ public Step createCurrentStep(final long entryId,\n             final long[] previousIds)\n             throws StoreException {\n \n-        JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n-        if (entry == null) {\n-            throw new StoreException(\n-                    \"Could not find workflow entry \" + entryId);\n-        }\n+        JPAWorkflowEntry entry = getEntry(entryId);\n \n-        JPACurrentStep step = new JPACurrentStep();\n+        final JPACurrentStep step = new JPACurrentStep();\n         step.setWorkflowEntry(entry);\n         step.setStepId(stepId);\n         step.setOwner(owner);\n@@ -139,12 +142,7 @@ public WorkflowEntry createEntry(final String workflowName)\n     public List findCurrentSteps(final long entryId)\n             throws StoreException {\n \n-        JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n-        if (entry == null) {\n-            throw new StoreException(\n-                    \"Could not find workflow entry \" + entryId);\n-        }\n-\n+        JPAWorkflowEntry entry = getEntry(entryId);\n         return entry.getCurrentSteps();\n     }\n \n@@ -167,12 +165,7 @@ public WorkflowEntry findEntry(final long entryId)\n     public List findHistorySteps(final long entryId)\n             throws StoreException {\n \n-        JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n-        if (entry == null) {\n-            throw new StoreException(\n-                    \"Could not find workflow entry \" + entryId);\n-        }\n-\n+        final JPAWorkflowEntry entry = getEntry(entryId);\n         return entry.getHistorySteps();\n     }\n \n@@ -196,8 +189,6 @@ public Step markFinished(final Step step,\n         currentStep.setStatus(status);\n         currentStep.setCaller(caller);\n \n-        workflowEntryDAO.save(currentStep.getWorkflowEntry());\n-\n         return currentStep;\n     }\n \n@@ -220,10 +211,7 @@ public void moveToHistory(final Step step)\n         historyStep.setWorkflowEntry(entry);\n \n         entry.removeCurrentStep(currentStep);\n-        workflowEntryDAO.deleteCurrentStep(currentStep.getId());\n-\n         entry.addHistoryStep(historyStep);\n-        workflowEntryDAO.save(entry);\n     }\n \n     @Override"},{"sha":"548878c51d512446fcca55f7143f2306acdc1773","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -36,7 +36,10 @@\n \n @Entity\n @Table(uniqueConstraints =\n-@UniqueConstraint(columnNames = {\"syncopeUser_id\", \"syncopeRole_id\"}))\n+@UniqueConstraint(columnNames = {\n+    \"syncopeUser_id\",\n+    \"syncopeRole_id\"\n+}))\n public class Membership extends AbstractAttributable {\n \n     @Id"},{"sha":"0d7bdc28fbf9bd80f22903ae24ac31d47865b6a4","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":16,"deletions":52,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -14,16 +14,15 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n-import java.security.KeyPair;\n-import java.security.Security;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n-import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n@@ -39,11 +38,8 @@\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import org.apache.commons.lang.RandomStringUtils;\n-import org.bouncycastle.jce.provider.BouncyCastleProvider;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.security.AsymmetricCipher;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n@@ -67,29 +63,13 @@\n })\n public class SyncopeUser extends AbstractAttributable {\n \n-    static {\n-        BouncyCastleProvider securityProvider = new BouncyCastleProvider();\n-        if (Security.getProvider(securityProvider.getName()) == null) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Setting BouncyCastle as security provider\");\n-            }\n-\n-            Security.addProvider(securityProvider);\n-        }\n-    }\n     @Id\n     @GeneratedValue(strategy = GenerationType.TABLE,\n     generator = \"SEQ_SyncopeUser\")\n     @TableGenerator(name = \"SEQ_SyncopeUser\", allocationSize = 100)\n     private Long id;\n \n-    @Basic\n-    @Lob\n-    private byte[] passwordKeyPair;\n-\n-    @Basic\n-    @Lob\n-    private byte[] password;\n+    private String password;\n \n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeUser\")\n     private List<Membership> memberships;\n@@ -192,40 +172,25 @@ public Set<TargetResource> getInheritedTargetResources() {\n     }\n \n     public String getPassword() {\n-        if (password == null || passwordKeyPair == null) {\n-            return null;\n-        }\n-\n-        String result = null;\n-        try {\n-            KeyPair kp = AsymmetricCipher.deserializeKeyPair(passwordKeyPair);\n-            result = new String(AsymmetricCipher.decrypt(password,\n-                    kp.getPrivate()));\n-        } catch (Throwable t) {\n-            LOG.error(\"Could not get the key pair and the password\", t);\n-        }\n-\n-        return result;\n+        return password;\n     }\n \n     /**\n-     * TODO: password policies\n+     * TODO: password policies.\n      * @param password\n      */\n-    public void setPassword(String password) {\n+    public void setPassword(final String password) {\n         if (password == null) {\n             this.password = null;\n-            this.passwordKeyPair = null;\n-            return;\n-        }\n-\n-        try {\n-            KeyPair kp = AsymmetricCipher.generateKeyPair();\n-            this.password = AsymmetricCipher.encrypt(password.getBytes(),\n-                    kp.getPublic());\n-            this.passwordKeyPair = AsymmetricCipher.serializeKeyPair(kp);\n-        } catch (Throwable t) {\n-            LOG.error(\"Could not set the password and the key pair\", t);\n+        } else {\n+            MessageDigest md = null;\n+            try {\n+                md = MessageDigest.getInstance(\"MD5\");\n+                md.update(password.getBytes());\n+                this.password = new String(md.digest());\n+            } catch (NoSuchAlgorithmException e) {\n+                LOG.error(\"Could not find required digest \");\n+            }\n         }\n     }\n \n@@ -312,8 +277,7 @@ public Date getTokenExpireTime() {\n         return tokenExpireTime;\n     }\n \n-    public boolean checkToken(String token, String prefix) {\n-\n+    public boolean checkToken(final String token, String prefix) {\n         if (prefix == null || prefix.isEmpty()) {\n             prefix = \"\";\n         } else {"},{"sha":"8fc44ae91e7cb83970974244cbba2a96cc739278","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -20,14 +20,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Configurable;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.AbstractBaseBean;\n import org.syncope.core.persistence.dao.DAO;\n \n @Configurable\n-@Transactional(rollbackFor = {\n-    Throwable.class\n-})\n public abstract class AbstractDAOImpl implements DAO {\n \n     /**"},{"sha":"3621acd5563191c230199f766fd3d8e170d15f5e","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeDAOImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -17,7 +17,6 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.dao.AttributeDAO;\n \n@@ -26,15 +25,13 @@ public class AttributeDAOImpl extends AbstractDAOImpl\n         implements AttributeDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractAttribute> T find(final Long id,\n             final Class<T> reference) {\n \n         return entityManager.find(reference, id);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractAttribute> List<T> findAll(\n             final Class<T> reference) {\n "},{"sha":"e89806e804b12cacb826acc80eb2bae191db9e33","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeValueDAOImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -19,7 +19,6 @@\n import java.util.Set;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n \n@@ -28,15 +27,13 @@ public class AttributeValueDAOImpl extends AbstractDAOImpl\n         implements AttributeValueDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractAttributeValue> T find(\n             final Long id, final Class<T> reference) {\n \n         return entityManager.find(reference, id);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractAttributeValue> boolean nonUniqueAttributeValue(\n             final T attributeValue) {\n \n@@ -71,7 +68,6 @@ public <T extends AbstractAttributeValue> boolean nonUniqueAttributeValue(\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractAttributeValue> List<T> findAll(\n             final Class<T> reference) {\n "},{"sha":"f60218f65f765a7662f41bb95de2465f925fee79","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConnectorInstanceDAOImpl.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -18,26 +18,20 @@\n import javassist.NotFoundException;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n \n-/**\n- * Spring-JPA implementation.\n- */\n @Repository\n public class ConnectorInstanceDAOImpl extends AbstractDAOImpl\n         implements ConnectorInstanceDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n     public ConnectorInstance find(final Long id) {\n         return entityManager.find(ConnectorInstance.class, id);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<ConnectorInstance> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM ConnectorInstance e\");"},{"sha":"bb61168ebca5f6575d35db1ba25ef5a51536f2ef","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedAttributeDAOImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -17,7 +17,6 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n \n@@ -26,15 +25,13 @@ public class DerivedAttributeDAOImpl extends AbstractDAOImpl\n         implements DerivedAttributeDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractDerivedAttribute> T find(\n             final Long id, final Class<T> reference) {\n \n         return entityManager.find(reference, id);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractDerivedAttribute> List<T> findAll(\n             final Class<T> reference) {\n \n@@ -44,7 +41,6 @@ public <T extends AbstractDerivedAttribute> List<T> findAll(\n     }\n \n     @Override\n-    @Transactional\n     public <T extends AbstractDerivedAttribute> T save(\n             final T derivedAttribute) {\n "},{"sha":"e9c7fc7a0880ed59cc95b8e24315f88260dfb2eb","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedSchemaDAOImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -20,7 +20,6 @@\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n@@ -35,15 +34,13 @@ public class DerivedSchemaDAOImpl extends AbstractDAOImpl\n     private DerivedAttributeDAO derivedAttributeDAO;\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractDerivedSchema> T find(final String name,\n             final Class<T> reference) {\n \n         return entityManager.find(reference, name);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractDerivedSchema> List<T> findAll(\n             final Class<T> reference) {\n "},{"sha":"46849d0a75a60d7e4e641a0d869c63141e8e71ee","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/EntitlementDAOImpl.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -18,26 +18,24 @@\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n @Repository\n-public class EntitlementDAOImpl extends AbstractDAOImpl implements EntitlementDAO {\n+public class EntitlementDAOImpl extends AbstractDAOImpl\n+        implements EntitlementDAO {\n \n     @Autowired\n     private SyncopeRoleDAO syncopeRoleDAO;\n \n     @Override\n-    @Transactional(readOnly = true)\n     public Entitlement find(String name) {\n         return entityManager.find(Entitlement.class, name);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<Entitlement> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM Entitlement e\");"},{"sha":"80c95b307b8fb1225fed35df0a8c4a78168b81a2","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/MembershipDAOImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -19,7 +19,6 @@\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -38,13 +37,11 @@ public class MembershipDAOImpl extends AbstractDAOImpl\n     private SyncopeRoleDAO syncopeRoleDAO;\n \n     @Override\n-    @Transactional(readOnly = true)\n     public Membership find(final Long id) {\n         return entityManager.find(Membership.class, id);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public Membership find(final SyncopeUser user, final SyncopeRole role) {\n         Query query = entityManager.createQuery(\"SELECT e FROM Membership e \"\n                 + \"WHERE e.syncopeUser = :user AND e.syncopeRole = :role\");\n@@ -66,7 +63,6 @@ public Membership find(final SyncopeUser user, final SyncopeRole role) {\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<Membership> findAll() {\n         Query query = entityManager.createQuery(\"SELECT e FROM Membership e\");\n         return query.getResultList();"},{"sha":"1d9dad2db6cf232236e75c4a9164f127e03e1d8f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -18,7 +18,6 @@\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n@@ -31,7 +30,6 @@ public class ResourceDAOImpl extends AbstractDAOImpl\n         implements ResourceDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n     public TargetResource find(final String name) {\n         Query query = entityManager.createNamedQuery(\"TargetResource.find\");\n         query.setParameter(\"name\", name);\n@@ -44,7 +42,6 @@ public TargetResource find(final String name) {\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<TargetResource> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM TargetResource e\");\n@@ -68,7 +65,6 @@ public TargetResource save(final TargetResource resource) {\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<SchemaMapping> getMappings(final String schemaName,\n             final SchemaType schemaType) {\n \n@@ -81,7 +77,6 @@ public List<SchemaMapping> getMappings(final String schemaName,\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<SchemaMapping> getMappings(final String schemaName,\n             final SchemaType schemaType, final String resourceName) {\n \n@@ -95,7 +90,6 @@ public List<SchemaMapping> getMappings(final String schemaName,\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public String getSchemaNameForAccountId(final String resourceName) {\n         Query query = entityManager.createQuery(\n                 \"SELECT m FROM SchemaMapping m \"\n@@ -123,9 +117,8 @@ public void deleteMappings(final String schemaName,\n         query.setParameter(\"schemaType\", schemaType);\n \n         int items = query.executeUpdate();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Removed \" + items + \" schema mappings\");\n-        }\n+        LOG.debug(\"Removed {} schema mappings\", items);\n+\n     }\n \n     @Override\n@@ -134,10 +127,9 @@ public void deleteAllMappings(final TargetResource resource) {\n                 + SchemaMapping.class.getSimpleName()\n                 + \" m WHERE m.resource=:resource\");\n         query.setParameter(\"resource\", resource);\n+\n         int items = query.executeUpdate();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Removed \" + items + \" schema mappings\");\n-        }\n+        LOG.debug(\"Removed {} schema mappings\", items);\n \n         resource.getMappings().clear();\n     }"},{"sha":"6dbfedb54bc5d863e32b8ff60a3f9e30e7432b16","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -20,7 +20,6 @@\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n@@ -41,15 +40,13 @@ public class SchemaDAOImpl extends AbstractDAOImpl\n     private ResourceDAO resourceDAO;\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractSchema> T find(final String name,\n             final Class<T> reference) {\n \n         return entityManager.find(reference, name);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public <T extends AbstractSchema> List<T> findAll(\n             final Class<T> reference) {\n "},{"sha":"c7d154a04f527870a6b905bd8411b2e663b04a69","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeConfigurationDAOImpl.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -17,7 +17,6 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.SyncopeConfiguration;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n@@ -27,8 +26,7 @@ public class SyncopeConfigurationDAOImpl extends AbstractDAOImpl\n         implements SyncopeConfigurationDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n-    public SyncopeConfiguration find(String name)\n+    public SyncopeConfiguration find(final String name)\n             throws MissingConfKeyException {\n \n         SyncopeConfiguration syncopeConfiguration =\n@@ -42,7 +40,6 @@ public SyncopeConfiguration find(String name)\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<SyncopeConfiguration> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM SyncopeConfiguration e\");\n@@ -57,7 +54,7 @@ public SyncopeConfiguration save(\n     }\n \n     @Override\n-    public void delete(String name) {\n+    public void delete(final String name) {\n         try {\n             entityManager.remove(find(name));\n         } catch (MissingConfKeyException e) {"},{"sha":"c0f548628b835454e79be7fc401aa71579696e35","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeRoleDAOImpl.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -19,7 +19,6 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.RoleAttribute;\n@@ -32,7 +31,6 @@ public class SyncopeRoleDAOImpl extends AbstractDAOImpl\n         implements SyncopeRoleDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n     public SyncopeRole find(final String name, final Long parentId) {\n         Query query = null;\n \n@@ -53,13 +51,11 @@ public SyncopeRole find(final String name, final Long parentId) {\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public SyncopeRole find(final Long id) {\n         return entityManager.find(SyncopeRole.class, id);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<SyncopeRole> findChildren(final Long roleId) {\n         Query query = entityManager.createQuery(\n                 \"SELECT r FROM SyncopeRole r WHERE \"\n@@ -81,7 +77,6 @@ private List<Long> getAncestors(final SyncopeRole role,\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<RoleAttribute> findInheritedAttributes(final SyncopeRole role) {\n         if (role.getParent() == null) {\n             return Collections.EMPTY_LIST;\n@@ -112,7 +107,6 @@ public List<RoleAttribute> findInheritedAttributes(final SyncopeRole role) {\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<RoleDerivedAttribute> findInheritedDerivedAttributes(\n             final SyncopeRole role) {\n \n@@ -145,7 +139,6 @@ public List<RoleDerivedAttribute> findInheritedDerivedAttributes(\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<SyncopeRole> findAll() {\n         Query query = entityManager.createQuery(\"SELECT e FROM SyncopeRole e\");\n         return query.getResultList();\n@@ -159,7 +152,7 @@ public SyncopeRole save(final SyncopeRole syncopeRole) {\n     @Override\n     public void delete(final Long id) {\n         SyncopeRole role = find(id);\n-        if (id == null) {\n+        if (role == null) {\n             return;\n         }\n "},{"sha":"d08c73673446d2c50804cec37428a94e4f531ce4","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -24,7 +24,6 @@\n import org.hibernate.criterion.Restrictions;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n@@ -49,7 +48,6 @@ public class SyncopeUserDAOImpl extends AbstractDAOImpl\n     private SyncopeRoleDAO syncopeRoleDAO;\n \n     @Override\n-    @Transactional(readOnly = true)\n     public SyncopeUser find(final Long id) {\n         Query query = entityManager.createNamedQuery(\"SyncopeUser.find\");\n         query.setParameter(\"id\", id);\n@@ -62,7 +60,6 @@ public SyncopeUser find(final Long id) {\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public SyncopeUser findByWorkflowId(final Long workflowId) {\n         Query query = entityManager.createNamedQuery(\n                 \"SyncopeUser.findByWorkflowId\");\n@@ -72,15 +69,13 @@ public SyncopeUser findByWorkflowId(final Long workflowId) {\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<SyncopeUser> findByAttributeValue(\n             final UserAttributeValue attributeValue) {\n \n         return findByAttributeValue(attributeValue, -1, -1);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public final List<SyncopeUser> findByAttributeValue(\n             final UserAttributeValue attributeValue,\n             final int page, final int itemsPerPage) {\n@@ -116,13 +111,11 @@ public final List<SyncopeUser> findByAttributeValue(\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public final List<SyncopeUser> findAll() {\n         return findAll(-1, -1);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public final List<SyncopeUser> findAll(\n             final int page, final int itemsPerPage) {\n \n@@ -169,13 +162,11 @@ public void delete(final Long id) {\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<SyncopeUser> search(final NodeCond searchCondition) {\n         return search(searchCondition, -1, -1);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<SyncopeUser> search(final NodeCond searchCondition,\n             final int page, final int itemsPerPage) {\n         if (LOG.isDebugEnabled()) {\n@@ -200,7 +191,6 @@ public List<SyncopeUser> search(final NodeCond searchCondition,\n         return from > to ? Collections.EMPTY_LIST : result.subList(from, to);\n     }\n \n-    @Transactional(readOnly = true)\n     private List<SyncopeUser> doSearch(\n             final NodeCond nodeCond) {\n         List<SyncopeUser> result;\n@@ -279,7 +269,6 @@ private List<SyncopeUser> doSearch(\n         return result;\n     }\n \n-    @Transactional(readOnly = true)\n     private Criteria getBaseCriteria() {\n         Session hibernateSess = (Session) entityManager.getDelegate();\n         Criteria baseCriteria = hibernateSess.createCriteria(SyncopeUser.class).\n@@ -293,7 +282,6 @@ private Criteria getBaseCriteria() {\n         return baseCriteria;\n     }\n \n-    @Transactional(readOnly = true)\n     private Criterion getCriterion(final NodeCond leafCond) {\n         Criterion criterion = null;\n \n@@ -411,7 +399,6 @@ private Criterion getCriterion(final NodeCond leafCond) {\n         return criterion;\n     }\n \n-    @Transactional(readOnly = true)\n     private Criterion getCriterion(final AttributeCond.Type type,\n             final AbstractAttributeValue attributeValue) {\n "},{"sha":"c18f49ebce512c886c616fb831219fe20edc6b30","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -17,7 +17,6 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.dao.TaskDAO;\n \n@@ -26,13 +25,11 @@ public class TaskDAOImpl extends AbstractDAOImpl\n         implements TaskDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n     public Task find(final Long id) {\n         return entityManager.find(Task.class, id);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<Task> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM Task e\");"},{"sha":"93e465ecb8b6d76dc373c302387b476521fedc8f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskExecutionDAOImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecutionDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecutionDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecutionDAOImpl.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -17,7 +17,6 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.TaskExecution;\n import org.syncope.core.persistence.dao.TaskExecutionDAO;\n \n@@ -26,13 +25,11 @@ public class TaskExecutionDAOImpl extends AbstractDAOImpl\n         implements TaskExecutionDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n     public TaskExecution find(final Long id) {\n         return entityManager.find(TaskExecution.class, id);\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List<TaskExecution> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM TaskExecution e\");"},{"sha":"34f46acccae9142c26985e734199e21bf9621946","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":31,"deletions":29,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -84,10 +84,10 @@ public class PropagationManager {\n      * @param user to be created.\n      * @throws PropagationException\n      */\n-    public void create(final SyncopeUser user)\n+    public void create(final SyncopeUser user, final String password)\n             throws PropagationException {\n \n-        create(user, Collections.EMPTY_SET);\n+        create(user, password, Collections.EMPTY_SET);\n     }\n \n     /**\n@@ -101,7 +101,8 @@ public void create(final SyncopeUser user)\n      * asynchronous provisioning.\n      * @throws PropagationException\n      */\n-    public void create(SyncopeUser user, Set<String> syncResourceNames)\n+    public void create(final SyncopeUser user,\n+            final String password, Set<String> syncResourceNames)\n             throws PropagationException {\n \n         if (syncResourceNames == null) {\n@@ -119,7 +120,7 @@ public void create(SyncopeUser user, Set<String> syncResourceNames)\n         ResourceOperations resourceOperations = new ResourceOperations();\n         resourceOperations.set(ResourceOperationType.CREATE, resources);\n \n-        provision(user, resourceOperations, syncResourceNames);\n+        provision(user, password, resourceOperations, syncResourceNames);\n     }\n \n     /**\n@@ -133,16 +134,17 @@ public void create(SyncopeUser user, Set<String> syncResourceNames)\n      * @param syncResourceNames to ask for a synchronous or asynchronous update.\n      * @throws PropagationException\n      */\n-    public void update(SyncopeUser user,\n-            ResourceOperations resourceOperations,\n+    public void update(final SyncopeUser user,\n+            final String password,\n+            final ResourceOperations resourceOperations,\n             Set<String> syncResourceNames)\n             throws PropagationException {\n \n         if (syncResourceNames == null) {\n             syncResourceNames = Collections.EMPTY_SET;\n         }\n \n-        provision(user, resourceOperations, syncResourceNames);\n+        provision(user, password, resourceOperations, syncResourceNames);\n     }\n \n     public void delete(SyncopeUser user, Set<String> syncResourceNames)\n@@ -163,7 +165,7 @@ public void delete(SyncopeUser user, Set<String> syncResourceNames)\n         ResourceOperations resourceOperations = new ResourceOperations();\n         resourceOperations.set(ResourceOperationType.DELETE, resources);\n \n-        provision(user, resourceOperations, syncResourceNames);\n+        provision(user, null, resourceOperations, syncResourceNames);\n     }\n \n     /**\n@@ -175,27 +177,24 @@ public void delete(SyncopeUser user, Set<String> syncResourceNames)\n      */\n     private void provision(\n             final SyncopeUser user,\n+            final String password,\n             final ResourceOperations resourceOperations,\n             final Set<String> syncResourceNames)\n             throws PropagationException {\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Provisioning with user \" + user + \":\\n\"\n-                    + resourceOperations);\n-        }\n+        LOG.debug(\"Provisioning with user {}:\\n{}\",\n+                user, resourceOperations);\n \n         // Avoid duplicates - see javadoc\n         resourceOperations.purge();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"After purge: \" + resourceOperations);\n-        }\n+        LOG.debug(\"After purge: {}\", resourceOperations);\n \n         Task task;\n         TaskExecution taskExecution;\n         for (ResourceOperationType type : ResourceOperationType.values()) {\n             for (TargetResource resource : resourceOperations.get(type)) {\n                 Map<String, Set<Attribute>> preparedAttributes =\n-                        prepareAttributes(user, resource);\n+                        prepareAttributes(user, password, resource);\n                 String accountId =\n                         preparedAttributes.keySet().iterator().next();\n \n@@ -241,7 +240,7 @@ private void provision(\n     }\n \n     private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n-            TargetResource resource) {\n+            String password, TargetResource resource) {\n \n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Preparing resource attributes for \" + user\n@@ -253,27 +252,24 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n         Set<Attribute> attributes = new HashSet<Attribute>();\n \n         // cast to be applied on SchemaValueType\n-        Class castToBeApplied = null;\n+        Class castToBeApplied;\n \n         // account id\n         String accountId = null;\n \n         // resource field values\n-        Set objValues = null;\n+        Set objValues;\n \n         // syncope user attribute\n-        UserAttribute userAttribute = null;\n+        UserAttribute userAttribute;\n         // syncope user attribute schema type\n         SchemaValueType schemaValueType = null;\n         // syncope user attribute values\n-        List<UserAttributeValue> values = null;\n+        List<UserAttributeValue> values;\n \n         for (SchemaMapping mapping : resource.getMappings()) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Process schema \" + mapping.getSchemaName()\n-                        + \"(\" + mapping.getSchemaType().getClassName()\n-                        + \")\");\n-            }\n+            LOG.debug(\"Processing schema {} ({})\", mapping.getSchemaName(),\n+                    mapping.getSchemaType().getClassName());\n \n             try {\n                 AbstractSchema schema = null;\n@@ -316,9 +312,15 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                     UserAttributeValue userAttributeValue =\n                             new UserAttributeValue();\n \n-                    userAttributeValue.setStringValue(\n-                            SchemaType.AccountId.equals(mapping.getSchemaType())\n-                            ? user.getId().toString() : user.getPassword());\n+                    if (SchemaType.AccountId.equals(mapping.getSchemaType())) {\n+                        userAttributeValue.setStringValue(\n+                                user.getId().toString());\n+                    }\n+                    if (SchemaType.Password.equals(mapping.getSchemaType())\n+                            && password != null) {\n+\n+                        userAttributeValue.setStringValue(password);\n+                    }\n \n                     values = Collections.singletonList(userAttributeValue);\n                 }"},{"sha":"1145465fcdb79c537431327ff739da792ac69e52","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -440,7 +440,8 @@ public UserTO create(HttpServletResponse response,\n                     syncResourceNames);\n         }\n \n-        propagationManager.create(user, syncResourceNames);\n+        propagationManager.create(\n+                user, userTO.getPassword(), syncResourceNames);\n \n         // User is created locally and propagated, let's advance on the workflow\n         Map<String, Object> inputs = new HashMap<String, Object>();\n@@ -501,7 +502,8 @@ public UserTO update(@RequestBody UserMod userMod,\n                     + syncResourceNames);\n         }\n \n-        propagationManager.update(user, resourceOperations, syncResourceNames);\n+        propagationManager.update(user, userMod.getPassword(),\n+                resourceOperations, syncResourceNames);\n \n         return userDataBinder.getUserTO(user, userWorkflow);\n     }"},{"sha":"4b87a0235b5181f6290f1b98fd03bf891d0ce663","filename":"core/src/main/java/org/syncope/core/workflow/GenerateToken.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -18,11 +18,6 @@\n import com.opensymphony.workflow.FunctionProvider;\n import com.opensymphony.workflow.WorkflowException;\n import java.util.Map;\n-import javax.crypto.Cipher;\n-import javax.crypto.SecretKey;\n-import javax.crypto.SecretKeyFactory;\n-import javax.crypto.spec.DESKeySpec;\n-import org.bouncycastle.util.encoders.Base64;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n@@ -31,9 +26,11 @@\n public class GenerateToken extends OSWorkflowComponent\n         implements FunctionProvider {\n \n-    protected SyncopeConfigurationDAO syncopeConfigurationDAO;\n+    private SyncopeConfigurationDAO syncopeConfigurationDAO;\n \n     public GenerateToken() {\n+        super();\n+\n         syncopeConfigurationDAO =\n                 (SyncopeConfigurationDAO) context.getBean(\n                 \"syncopeConfigurationDAOImpl\");"},{"sha":"3a1bedfb70ed055ffb1585ae1c66fa47d2168347","filename":"core/src/main/resources/content.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -44,8 +44,7 @@\n     <SyncopeConfiguration confKey=\"verifyToken.email.template.html\" confValue=\"verifyToken.html\"/>\n     <SyncopeConfiguration confKey=\"verifyToken.email.template.txt\" confValue=\"verifyToken.txt\"/>\n     <SyncopeConfiguration confKey=\"servicelayer.baseurl\" confValue=\"http://www.google.it/\"/>\n-    <SyncopeConfiguration confKey=\"identityconnectors.bundle.directory\"\n-                          confValue=\"/tmp/bundles\"/>\n+    <SyncopeConfiguration confKey=\"identityconnectors.bundle.directory\" confValue=\"${bundles.directory}\"/>\n \n     <UserSchema name=\"surname\" type=\"String\" virtual=\"F\"\n                 mandatoryCondition=\"true\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>"},{"sha":"b2c0a46f0b9e9477684049c0d3c05d90c9448cb4","filename":"core/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -14,7 +14,8 @@\n -->\n <web-app xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/javaee/web-app_2_4.xsd\"\n+         xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee\n+                             http://java.sun.com/xml/ns/javaee/web-app_2_4.xsd\"\n          version=\"2.4\">\n \n     <display-name>Syncope</display-name>"},{"sha":"26e24c776ef223b69d4e108e03bbafe9dcdee53b","filename":"core/src/test/java/org/syncope/core/persistence/relationships/PropagationManagerTest.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FPropagationManagerTest.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -36,8 +36,10 @@ public class PropagationManagerTest extends AbstractTest {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n+\n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n+\n     @Autowired\n     private PropagationManager propagationManager;\n \n@@ -53,7 +55,7 @@ public final void create() {\n \n         PropagationException pe = null;\n         try {\n-            propagationManager.create(user);\n+            propagationManager.create(user, \"password\");\n         } catch (PropagationException e) {\n             pe = e;\n         }\n@@ -76,7 +78,8 @@ public final void update() {\n \n         PropagationException pe = null;\n         try {\n-            propagationManager.update(user, resourceOperations, null);\n+            propagationManager.update(\n+                    user, \"password\", resourceOperations, null);\n         } catch (PropagationException e) {\n             pe = e;\n         }\n@@ -96,8 +99,8 @@ public final void createWithException() {\n \n         PropagationException re = null;\n         try {\n-            propagationManager.create(\n-                    user, Collections.singleton(\"ws-target-resource-2\"));\n+            propagationManager.create(user, \"password\",\n+                    Collections.singleton(\"ws-target-resource-2\"));\n         } catch (PropagationException e) {\n             re = e;\n         }\n@@ -119,7 +122,7 @@ public final void updateWithException() {\n \n         PropagationException re = null;\n         try {\n-            propagationManager.update(user, resourceOperations,\n+            propagationManager.update(user, \"password\", resourceOperations,\n                     Collections.singleton(\"ws-target-resource-2\"));\n         } catch (PropagationException e) {\n             re = e;"},{"sha":"33da6f8387d03212bc72e98ac75e89de8234f10d","filename":"core/src/test/java/org/syncope/core/rest/AbstractTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"e8bb8a60d6f5c13a1cfec198689cb8c06362c554","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -39,6 +39,7 @@\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.workflow.Constants;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -458,7 +459,10 @@ public final void update() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n                 userMod, UserTO.class);\n \n-        assertEquals(\"newPassword\", userTO.getPassword());\n+        SyncopeUser passwordTestUser = new SyncopeUser();\n+        passwordTestUser.setPassword(\"newPassword\");\n+        assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n+        \n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(1, userTO.getMemberships().iterator().next().\n                 getAttributes().size());"},{"sha":"6bfdc2ab92778e9506cc8548507e7173179bfd76","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -43,8 +43,7 @@\n     <SyncopeConfiguration confKey=\"verifyToken.email.subject\" confValue=\"Syncope: reset successful\"/>\n     <SyncopeConfiguration confKey=\"verifyToken.email.template.html\" confValue=\"verifyToken.html\"/>\n     <SyncopeConfiguration confKey=\"verifyToken.email.template.txt\" confValue=\"verifyToken.txt\"/>\n-    <SyncopeConfiguration confKey=\"identityconnectors.bundle.directory\"\n-                          confValue=\"/tmp/bundles\"/>\n+    <SyncopeConfiguration confKey=\"identityconnectors.bundle.directory\" confValue=\"${bundles.directory}\"/>\n                           \n     <SyncopeUser id=\"1\" workflowId=\"0\"/>\n     <SyncopeUser id=\"2\" workflowId=\"0\"/>"},{"sha":"d2c087c0b4f20f2b49386a2f4cdcb868ecdc011b","filename":"pom.xml","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856dfaa059216368c8840b2b255cd5bfacdab7ce/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856dfaa059216368c8840b2b255cd5bfacdab7ce/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=856dfaa059216368c8840b2b255cd5bfacdab7ce","patch":"@@ -96,8 +96,6 @@\n         <jsp-api.version>2.1</jsp-api.version>\n         <jstl.version>1.2</jstl.version>\n \n-        <bouncycastle.version>140</bouncycastle.version>\n-\n         <commons-jexl.version>2.0.1</commons-jexl.version>\n         <commons-lang.version>2.5</commons-lang.version>\n         <commons-email.version>1.2</commons-email.version>\n@@ -161,12 +159,6 @@\n                 <version>${jstl.version}</version>\n             </dependency>\n \n-            <dependency>\n-                <groupId>bouncycastle</groupId>\n-                <artifactId>bcprov-jdk16</artifactId>\n-                <version>${bouncycastle.version}</version>\n-            </dependency>\n-\n             <dependency>\n                 <groupId>org.apache.commons</groupId>\n                 <artifactId>commons-jexl</artifactId>"}]}