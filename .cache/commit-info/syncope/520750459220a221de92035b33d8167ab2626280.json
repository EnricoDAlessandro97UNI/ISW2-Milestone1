{"sha":"520750459220a221de92035b33d8167ab2626280","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUyMDc1MDQ1OTIyMGEyMjFkZTkyMDM1YjMzZDgxNjdhYjI2MjYyODA=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-03-22T16:44:41Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-03-22T16:44:41Z"},"message":"(Fix issue #86)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246815 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e76c39482e7160c084057627e1983c04a0eedfa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9e76c39482e7160c084057627e1983c04a0eedfa"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/520750459220a221de92035b33d8167ab2626280","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/520750459220a221de92035b33d8167ab2626280","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/520750459220a221de92035b33d8167ab2626280","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/520750459220a221de92035b33d8167ab2626280/comments","author":null,"committer":null,"parents":[{"sha":"49c5eaecc69db9d4bb29959945dc83d7f102beb8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/49c5eaecc69db9d4bb29959945dc83d7f102beb8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/49c5eaecc69db9d4bb29959945dc83d7f102beb8"}],"stats":{"total":3398,"additions":1065,"deletions":2333},"files":[{"sha":"492a2fd2b1841ff872163f75277c9ac0b83c2956","filename":"client/src/main/java/org/syncope/client/to/AbstractAttributableTO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -26,8 +26,11 @@\n public abstract class AbstractAttributableTO extends AbstractBaseBean {\n \n     private long id;\n+\n     private List<AttributeTO> attributes;\n+\n     private List<AttributeTO> derivedAttributes;\n+\n     private Set<String> resources;\n \n     protected AbstractAttributableTO() {"},{"sha":"93509cc81ca0c40a535a432d7c63a4bf90eab75e","filename":"client/src/main/java/org/syncope/client/to/PaginatedUserContainer.java","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49c5eaecc69db9d4bb29959945dc83d7f102beb8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPaginatedUserContainer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49c5eaecc69db9d4bb29959945dc83d7f102beb8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPaginatedUserContainer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPaginatedUserContainer.java?ref=49c5eaecc69db9d4bb29959945dc83d7f102beb8","patch":"@@ -1,71 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import java.util.List;\n-import org.syncope.client.to.UserTO;\n-\n-public class PaginatedUserContainer {\n-\n-    private int totalRecords;\n-\n-    private int recordsInPage;\n-\n-    private int pageNumber;\n-\n-    private int pageSize;\n-\n-    private List<UserTO> records;\n-\n-    public int getPageNumber() {\n-        return pageNumber;\n-    }\n-\n-    public void setPageNumber(int pageNumber) {\n-        this.pageNumber = pageNumber;\n-    }\n-\n-    public int getPageSize() {\n-        return pageSize;\n-    }\n-\n-    public void setPageSize(int pageSize) {\n-        this.pageSize = pageSize;\n-    }\n-\n-    public int getRecordsInPage() {\n-        return recordsInPage;\n-    }\n-\n-    public void setRecordsInPage(int recordsInPage) {\n-        this.recordsInPage = recordsInPage;\n-    }\n-\n-    public int getTotalRecords() {\n-        return totalRecords;\n-    }\n-\n-    public void setTotalRecords(int totalRecords) {\n-        this.totalRecords = totalRecords;\n-    }\n-\n-    public List<UserTO> getRecords() {\n-        return records;\n-    }\n-\n-    public void setRecords(final List<UserTO> records) {\n-        this.records = records;\n-    }\n-}"},{"sha":"903b745ac70fe190e92b20526d9e076ec04d21fa","filename":"client/src/test/java/org/syncope/client/test/JSONTest.java","status":"modified","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -20,16 +20,13 @@\n import java.io.StringWriter;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.junit.Test;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.SchemaTO;\n-import org.syncope.client.to.UserTO;\n-import org.syncope.client.to.PaginatedUserContainer;\n \n public class JSONTest {\n \n@@ -83,34 +80,4 @@ public void testLists()\n             assertNotNull(unserializedSchema);\n         }\n     }\n-\n-    @Test\n-    public void testPaginatedUserContainer()\n-            throws IOException {\n-\n-        PaginatedUserContainer puc = new PaginatedUserContainer();\n-        puc.setPageNumber(11);\n-        puc.setPageSize(12);\n-        puc.setRecordsInPage(13);\n-        puc.setTotalRecords(14);\n-        UserTO userTO = new UserTO();\n-        userTO.setId(15);\n-        puc.setRecords(Collections.singletonList(userTO));\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-\n-        StringWriter writer = new StringWriter();\n-        mapper.writeValue(writer, puc);\n-\n-        PaginatedUserContainer unserialized = mapper.readValue(\n-                writer.toString(), PaginatedUserContainer.class);\n-        assertNotNull(unserialized);\n-        assertNotNull(unserialized.getRecords());\n-        assertEquals(1, unserialized.getRecords().size());\n-        assertNotNull(unserialized.getRecords().iterator().next());\n-\n-        for (UserTO user : unserialized.getRecords()) {\n-            assertNotNull(user);\n-        }\n-    }\n }"},{"sha":"86f28dd446009d8971508dbf353178b3e7251c5d","filename":"console/pom.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fpom.xml?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -35,8 +35,8 @@\n         <logfile.test>/var/tmp/syncope-console-test.log</logfile.test>\n \n         <cargo.servlet.port>9080</cargo.servlet.port>\n-        <cargo.log>/var/tmp/syncope-core-cargo.log</cargo.log>\n-        <cargo.output>/var/tmp/syncope-core-cargo-output.log</cargo.output>\n+        <cargo.log>/var/tmp/syncope-console-cargo.log</cargo.log>\n+        <cargo.output>/var/tmp/syncope-console-cargo-output.log</cargo.output>\n \n         <bundles.directory>/var/tmp/bundles</bundles.directory>\n     </properties>\n@@ -156,6 +156,7 @@\n                                 <unzip src=\"${basedir}/../core/target/syncope.war\" dest=\"${project.build.directory}/syncope-core-test\">\n                                     <patternset>\n                                         <exclude name=\"**/content.xml\" />\n+                                        <exclude name=\"**/ehcache.xml\" />\n                                         <exclude name=\"**/persistence.properties\" />\n                                     </patternset>\n                                 </unzip>"},{"sha":"74a14c3ebeef45306507312696c1302a3b1df65f","filename":"console/src/main/java/org/syncope/console/SyncopeApplication.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -62,6 +62,8 @@ protected void init() {\n         getSecuritySettings().\n                 setUnauthorizedComponentInstantiationListener(this);\n \n+        getMarkupSettings().setStripWicketTags(true);\n+\n         // setup authorizations\n         MetaDataRoleAuthorizationStrategy.authorize(Schema.class,\n                 \"SCHEMA_LIST\");"},{"sha":"3dd75b9c1ec822609248411d0438660bd659f39b","filename":"console/src/main/java/org/syncope/console/commons/SortableDataProviderComparator.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -0,0 +1,52 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.commons;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class SortableDataProviderComparator<T> implements\n+        Comparator<T>, Serializable {\n+\n+    private final SortParam sortParam;\n+\n+    public SortableDataProviderComparator(SortParam sortParam) {\n+        this.sortParam = sortParam;\n+    }\n+\n+    @Override\n+    public int compare(final T o1, final T o2) {\n+        PropertyModel<Comparable> model1 =\n+                new PropertyModel<Comparable>(o1, sortParam.getProperty());\n+        PropertyModel<Comparable> model2 =\n+                new PropertyModel<Comparable>(o2, sortParam.getProperty());\n+\n+        int result;\n+        if (model1.getObject() == null && model2.getObject() == null) {\n+            result = 0;\n+        } else if (model1.getObject() == null) {\n+            result = 1;\n+        } else if (model2.getObject() == null) {\n+            result = -1;\n+        } else {\n+            result = ((Comparable) model1.getObject()).compareTo(\n+                    model2.getObject());\n+        }\n+\n+        return sortParam.isAscending() ? result : -result;\n+    }\n+}"},{"sha":"287d62314513f32466673d30277dab25d39a963d","filename":"console/src/main/java/org/syncope/console/pages/Configuration.java","status":"modified","additions":15,"deletions":65,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -22,14 +22,11 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.IAjaxCallDecorator;\n-import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -59,7 +56,9 @@\n import org.syncope.client.to.LoggerTO;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n+import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.rest.ConfigurationRestClient;\n+import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n \n@@ -145,11 +144,9 @@ public Page createPage() {\n                 EditLinkPanel panel = new EditLinkPanel(componentId, model);\n                 panel.add(editLink);\n \n-                String allowedRoles = xmlRolesReader.getAllAllowedRoles(\n-                        \"Configuration\", \"read\");\n-\n                 MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n-                        allowedRoles);\n+                        xmlRolesReader.getAllAllowedRoles(\n+                        \"Configuration\", \"read\"));\n \n                 cellItem.add(panel);\n             }\n@@ -158,17 +155,18 @@ public Page createPage() {\n         confColumns.add(new AbstractColumn<ConfigurationTO>(\n                 new Model<String>(getString(\"delete\"))) {\n \n+            @Override\n             public void populateItem(\n-                    Item<ICellPopulator<ConfigurationTO>> cellItem,\n-                    String componentId, IModel<ConfigurationTO> model) {\n+                    final Item<ICellPopulator<ConfigurationTO>> cellItem,\n+                    final String componentId, IModel<ConfigurationTO> model) {\n \n                 final ConfigurationTO configurationTO = model.getObject();\n \n-                AjaxLink deleteLink = new AjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n-\n+                    public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.deleteConfiguration(configurationTO.\n                                     getConfKey());\n@@ -183,32 +181,14 @@ public void onClick(AjaxRequestTarget target) {\n \n                         target.addComponent(confContainer);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-\n-                                return \"if (confirm('\" + getString(\n-                                        \"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n \n                 DeleteLinkPanel panel = new DeleteLinkPanel(componentId, model);\n                 panel.add(deleteLink);\n \n-                String allowedRoles = xmlRolesReader.getAllAllowedRoles(\n-                        \"Configuration\", \"delete\");\n-\n                 MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n-                        allowedRoles);\n+                        xmlRolesReader.getAllAllowedRoles(\n+                        \"Configuration\", \"delete\"));\n \n                 cellItem.add(panel);\n             }\n@@ -352,12 +332,13 @@ public void setOperationResult(boolean operationResult) {\n     private class SyncopeConfProvider\n             extends SortableDataProvider<ConfigurationTO> {\n \n-        private SortableDataProviderComparator comparator =\n-                new SortableDataProviderComparator();\n+        private SortableDataProviderComparator<ConfigurationTO> comparator;\n \n         public SyncopeConfProvider() {\n             //Default sorting\n             setSort(\"confKey\", true);\n+            comparator = new SortableDataProviderComparator<ConfigurationTO>(\n+                    getSort());\n         }\n \n         @Override\n@@ -397,37 +378,6 @@ private List<ConfigurationTO> getAllConfigurations() {\n             }\n             return list;\n         }\n-\n-        private class SortableDataProviderComparator implements\n-                Comparator<ConfigurationTO>, Serializable {\n-\n-            public int compare(final ConfigurationTO o1,\n-                    final ConfigurationTO o2) {\n-                PropertyModel<Comparable> model1 =\n-                        new PropertyModel<Comparable>(o1,\n-                        getSort().getProperty());\n-                PropertyModel<Comparable> model2 =\n-                        new PropertyModel<Comparable>(o2,\n-                        getSort().getProperty());\n-\n-                int result = 1;\n-\n-                if (model1.getObject() == null && model2.getObject() == null) {\n-                    result = 0;\n-                } else if (model1.getObject() == null) {\n-                    result = 1;\n-                } else if (model2.getObject() == null) {\n-                    result = -1;\n-                } else {\n-                    result = ((Comparable) model1.getObject()).compareTo(\n-                            model2.getObject());\n-                }\n-\n-                result = getSort().isAscending() ? result : -result;\n-\n-                return result;\n-            }\n-        }\n     }\n \n     enum LoggerLevel {"},{"sha":"d4e54c2c6340dc7d7571d308006265737759cd52","filename":"console/src/main/java/org/syncope/console/pages/Connectors.java","status":"modified","additions":22,"deletions":68,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectors.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectors.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectors.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -14,17 +14,13 @@\n  */\n package org.syncope.console.pages;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.IAjaxCallDecorator;\n-import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -49,8 +45,10 @@\n import org.syncope.client.to.ResourceTO;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n+import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.rest.ConnectorRestClient;\n import org.syncope.console.rest.ResourceRestClient;\n+import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n \n@@ -126,7 +124,7 @@ public void populateItem(\n                 final AjaxLink editLink = new IndicatingAjaxLink(\"editLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n \n                         editConnectorWin.setPageCreator(\n                                 new ModalWindow.PageCreator() {\n@@ -147,10 +145,9 @@ public Page createPage() {\n                 EditLinkPanel panel = new EditLinkPanel(componentId, model);\n                 panel.add(editLink);\n \n-                String allowedRoles = xmlRolesReader.getAllAllowedRoles(\n-                        \"Connectors\", \"read\");\n                 MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n-                        allowedRoles);\n+                        xmlRolesReader.getAllAllowedRoles(\n+                        \"Connectors\", \"read\"));\n \n                 cellItem.add(panel);\n             }\n@@ -159,16 +156,19 @@ public Page createPage() {\n         columns.add(new AbstractColumn<ConnectorInstanceTO>(\n                 new Model<String>(getString(\"delete\"))) {\n \n+            @Override\n             public void populateItem(\n-                    Item<ICellPopulator<ConnectorInstanceTO>> cellItem,\n-                    String componentId, IModel<ConnectorInstanceTO> model) {\n+                    final Item<ICellPopulator<ConnectorInstanceTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<ConnectorInstanceTO> model) {\n \n                 final ConnectorInstanceTO connectorTO = model.getObject();\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n \n                         if (!checkDeleteIsForbidden(connectorTO)) {\n                             restClient.deleteConnector(connectorTO.getId());\n@@ -180,31 +180,14 @@ public void onClick(AjaxRequestTarget target) {\n                         target.addComponent(container);\n                         target.addComponent(feedbackPanel);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-\n-                                return \"if (confirm('\" + getString(\n-                                        \"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n \n                 DeleteLinkPanel panel = new DeleteLinkPanel(componentId, model);\n                 panel.add(deleteLink);\n \n-                String allowedRoles = xmlRolesReader.getAllAllowedRoles(\n-                        \"Connectors\", \"delete\");\n                 MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n-                        allowedRoles);\n+                        xmlRolesReader.getAllAllowedRoles(\n+                        \"Connectors\", \"delete\"));\n \n                 cellItem.add(panel);\n             }\n@@ -337,12 +320,14 @@ public void setOperationResult(boolean operationResult) {\n \n     class ConnectorsProvider extends SortableDataProvider<ConnectorInstanceTO> {\n \n-        private SortableDataProviderComparator comparator =\n-                new SortableDataProviderComparator();\n+        private SortableDataProviderComparator<ConnectorInstanceTO> comparator;\n \n         public ConnectorsProvider() {\n             //Default sorting\n             setSort(\"id\", true);\n+            comparator =\n+                    new SortableDataProviderComparator<ConnectorInstanceTO>(\n+                    getSort());\n         }\n \n         @Override\n@@ -360,7 +345,9 @@ public int size() {\n         }\n \n         @Override\n-        public IModel<ConnectorInstanceTO> model(final ConnectorInstanceTO connector) {\n+        public IModel<ConnectorInstanceTO> model(\n+                final ConnectorInstanceTO connector) {\n+\n             return new AbstractReadOnlyModel<ConnectorInstanceTO>() {\n \n                 @Override\n@@ -371,40 +358,7 @@ public ConnectorInstanceTO getObject() {\n         }\n \n         public List<ConnectorInstanceTO> getConnectorsListDB() {\n-            List<ConnectorInstanceTO> list = restClient.getAllConnectors();\n-\n-            return list;\n-        }\n-\n-        class SortableDataProviderComparator implements\n-                Comparator<ConnectorInstanceTO>, Serializable {\n-\n-            public int compare(final ConnectorInstanceTO o1,\n-                    final ConnectorInstanceTO o2) {\n-                PropertyModel<Comparable> model1 =\n-                        new PropertyModel<Comparable>(o1,\n-                        getSort().getProperty());\n-                PropertyModel<Comparable> model2 =\n-                        new PropertyModel<Comparable>(o2,\n-                        getSort().getProperty());\n-\n-                int result = 1;\n-\n-                if (model1.getObject() == null && model2.getObject() == null) {\n-                    result = 0;\n-                } else if (model1.getObject() == null) {\n-                    result = 1;\n-                } else if (model2.getObject() == null) {\n-                    result = -1;\n-                } else {\n-                    result = ((Comparable) model1.getObject()).compareTo(\n-                            model2.getObject());\n-                }\n-\n-                result = getSort().isAscending() ? result : -result;\n-\n-                return result;\n-            }\n+            return restClient.getAllConnectors();\n         }\n     }\n }"},{"sha":"9d29da7165baa7e7d208154e2ac0c59d4b653f65","filename":"console/src/main/java/org/syncope/console/pages/DisplayAttributesModalPage.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -29,7 +29,6 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.syncope.client.to.ConfigurationTO;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.rest.SchemaRestClient;\n@@ -47,12 +46,10 @@ public class DisplayAttributesModalPage extends BaseModalPage {\n \n     private List<String> selections;\n \n-    private ConfigurationTO configuration;\n-\n     public AjaxButton submit;\n \n-    public DisplayAttributesModalPage(final BasePage basePage,\n-            final ModalWindow window, final boolean createFlag) {\n+    public DisplayAttributesModalPage(final Users basePage,\n+            final ModalWindow window) {\n \n         super();\n \n@@ -84,7 +81,7 @@ protected void onSubmit(final AjaxRequestTarget target,\n                         Constants.PREF_USERS_ATTRIBUTES_VIEW,\n                         selections);\n \n-                ((Users) basePage).setOperationResult(true);\n+                basePage.setModalResult(true);\n                 window.close(target);\n             }\n         };"},{"sha":"0dceab93f25aef7afbe81988bc0cfbe0e1ca2094","filename":"console/src/main/java/org/syncope/console/pages/Resources.java","status":"modified","additions":11,"deletions":63,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -14,17 +14,13 @@\n  */\n package org.syncope.console.pages;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.IAjaxCallDecorator;\n-import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -49,7 +45,9 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n+import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.rest.ResourceRestClient;\n+import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n \n@@ -128,11 +126,9 @@ public Page createPage() {\n                 EditLinkPanel panel = new EditLinkPanel(componentId, model);\n                 panel.add(editLink);\n \n-                String allowedRoles = xmlRolesReader.getAllAllowedRoles(\n-                        \"Resources\", \"read\");\n-\n                 MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n-                        allowedRoles);\n+                        xmlRolesReader.getAllAllowedRoles(\n+                        \"Resources\", \"read\"));\n \n                 cellItem.add(panel);\n             }\n@@ -145,7 +141,8 @@ public void populateItem(Item<ICellPopulator<ResourceTO>> cellItem,\n                     String componentId, IModel<ResourceTO> model) {\n                 final ResourceTO resourceTO = model.getObject();\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n@@ -163,25 +160,8 @@ public void onClick(final AjaxRequestTarget target) {\n                         target.addComponent(feedbackPanel);\n                         target.addComponent(container);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-\n-                                return \"if (confirm('\" + getString(\n-                                        \"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n-                DeleteLinkPanel panel = new DeleteLinkPanel(componentId,\n-                        model);\n+                DeleteLinkPanel panel = new DeleteLinkPanel(componentId, model);\n                 panel.add(deleteLink);\n \n                 String allowedRoles = xmlRolesReader.getAllAllowedRoles(\n@@ -296,12 +276,13 @@ public void onClose(AjaxRequestTarget target) {\n \n     class ResourcesProvider extends SortableDataProvider<ResourceTO> {\n \n-        private SortableDataProviderComparator comparator =\n-                new SortableDataProviderComparator();\n+        private SortableDataProviderComparator<ResourceTO> comparator;\n \n         public ResourcesProvider() {\n             //Default sorting\n             setSort(\"name\", true);\n+            comparator = new SortableDataProviderComparator<ResourceTO>(\n+                    getSort());\n         }\n \n         @Override\n@@ -330,40 +311,7 @@ public ResourceTO getObject() {\n         }\n \n         public List<ResourceTO> getResourcesListDB() {\n-            List<ResourceTO> list = restClient.getAllResources();\n-\n-            return list;\n-        }\n-\n-        class SortableDataProviderComparator implements\n-                Comparator<ResourceTO>, Serializable {\n-\n-            public int compare(final ResourceTO o1,\n-                    final ResourceTO o2) {\n-                PropertyModel<Comparable> model1 =\n-                        new PropertyModel<Comparable>(o1,\n-                        getSort().getProperty());\n-                PropertyModel<Comparable> model2 =\n-                        new PropertyModel<Comparable>(o2,\n-                        getSort().getProperty());\n-\n-                int result = 1;\n-\n-                if (model1.getObject() == null && model2.getObject() == null) {\n-                    result = 0;\n-                } else if (model1.getObject() == null) {\n-                    result = 1;\n-                } else if (model2.getObject() == null) {\n-                    result = -1;\n-                } else {\n-                    result = ((Comparable) model1.getObject()).compareTo(\n-                            model2.getObject());\n-                }\n-\n-                result = getSort().isAscending() ? result : -result;\n-\n-                return result;\n-            }\n+            return restClient.getAllResources();\n         }\n     }\n }"},{"sha":"05a1a6d0d4cfadf0168ac425ec6c0dfee1245d35","filename":"console/src/main/java/org/syncope/console/pages/Schema.java","status":"modified","additions":43,"deletions":189,"changes":232,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -14,17 +14,13 @@\n  */\n package org.syncope.console.pages;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.IAjaxCallDecorator;\n-import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -49,7 +45,9 @@\n import org.syncope.client.to.SchemaTO;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n+import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.rest.SchemaRestClient;\n+import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n \n@@ -263,7 +261,8 @@ public void populateItem(\n \n                 final SchemaTO schemaTO = model.getObject();\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n@@ -274,22 +273,6 @@ public void onClick(final AjaxRequestTarget target) {\n \n                         target.addComponent(roleSchemasContainer);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    final CharSequence script) {\n-\n-                                return \"if (confirm('\" + getString(\n-                                        \"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n \n                 DeleteLinkPanel panel = new DeleteLinkPanel(componentId, model);\n@@ -393,33 +376,18 @@ public void populateItem(\n \n                 final DerivedSchemaTO schemaTO = model.getObject();\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n                         restClient.deleteRoleDerivedSchema(schemaTO.getName());\n \n                         info(getString(\"operation_succeded\"));\n                         target.addComponent(feedbackPanel);\n \n                         target.addComponent(roleDerivedSchemasContainer);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-\n-                                return \"if (confirm('\" + getString(\n-                                        \"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n \n                 DeleteLinkPanel panel = new DeleteLinkPanel(componentId, model);\n@@ -517,39 +485,26 @@ public Page createPage() {\n         userColumns.add(new AbstractColumn<SchemaTO>(new Model<String>(getString(\n                 \"delete\"))) {\n \n+            @Override\n             public void populateItem(\n-                    Item<ICellPopulator<SchemaTO>> cellItem,\n-                    String componentId, IModel<SchemaTO> model) {\n+                    final Item<ICellPopulator<SchemaTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<SchemaTO> model) {\n \n                 final SchemaTO schemaTO = model.getObject();\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n                         restClient.deleteUserSchema(schemaTO.getName());\n \n                         info(getString(\"operation_succeded\"));\n                         target.addComponent(feedbackPanel);\n \n                         target.addComponent(userSchemaContainer);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-\n-                                return \"if (confirm('\" + getString(\n-                                        \"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n \n \n@@ -650,42 +605,28 @@ public Page createPage() {\n         columnsUsersDer.add(new AbstractColumn<DerivedSchemaTO>(\n                 new Model<String>(getString(\"delete\"))) {\n \n+            @Override\n             public void populateItem(\n-                    Item<ICellPopulator<DerivedSchemaTO>> cellItem,\n-                    String componentId, IModel<DerivedSchemaTO> model) {\n+                    final Item<ICellPopulator<DerivedSchemaTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<DerivedSchemaTO> model) {\n \n                 final DerivedSchemaTO schemaTO = model.getObject();\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n                         restClient.deleteUserDerivedSchema(schemaTO.getName());\n \n                         info(getString(\"operation_succeded\"));\n                         target.addComponent(feedbackPanel);\n \n                         target.addComponent(userDerivedSchemaContainer);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-\n-                                return \"if (confirm('\" + getString(\n-                                        \"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n \n-\n                 DeleteLinkPanel panel = new DeleteLinkPanel(componentId, model);\n \n                 MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n@@ -782,38 +723,26 @@ public Page createPage() {\n         membershipsColumns.add(new AbstractColumn<SchemaTO>(\n                 new Model<String>(getString(\"delete\"))) {\n \n+            @Override\n             public void populateItem(\n-                    Item<ICellPopulator<SchemaTO>> cellItem,\n-                    String componentId, IModel<SchemaTO> model) {\n+                    final Item<ICellPopulator<SchemaTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<SchemaTO> model) {\n \n                 final SchemaTO schemaTO = model.getObject();\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n                         restClient.deleteMemberhipSchema(schemaTO.getName());\n \n                         info(getString(\"operation_succeded\"));\n                         target.addComponent(feedbackPanel);\n \n                         target.addComponent(membershipSchemaContainer);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-                                return \"if (confirm('\" + getString(\n-                                        \"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n \n                 DeleteLinkPanel panel = new DeleteLinkPanel(componentId, model);\n@@ -916,16 +845,19 @@ public Page createPage() {\n         columnsMembershipsDer.add(new AbstractColumn<DerivedSchemaTO>(\n                 new Model<String>(getString(\"delete\"))) {\n \n+            @Override\n             public void populateItem(\n-                    Item<ICellPopulator<DerivedSchemaTO>> cellItem,\n-                    String componentId, IModel<DerivedSchemaTO> model) {\n+                    final Item<ICellPopulator<DerivedSchemaTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<DerivedSchemaTO> model) {\n \n                 final DerivedSchemaTO schemaTO = model.getObject();\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n                         restClient.deleteMembershipDerivedSchema(\n                                 schemaTO.getName());\n \n@@ -934,24 +866,8 @@ public void onClick(AjaxRequestTarget target) {\n \n                         target.addComponent(membershipDerivedSchemaContainer);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-                                return \"if (confirm('\" + getString(\n-                                        \"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n \n-\n                 DeleteLinkPanel panel = new DeleteLinkPanel(componentId, model);\n \n                 MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n@@ -1352,17 +1268,17 @@ public void setOperationResult(boolean operationResult) {\n \n     class SchemaProvider extends SortableDataProvider<SchemaTO> {\n \n-        private SortableDataProviderComparator comparator =\n-                new SortableDataProviderComparator();\n+        private SortableDataProviderComparator<SchemaTO> comparator;\n \n         private SchemaType schema;\n \n-        public SchemaProvider(SchemaType schema) {\n-\n+        public SchemaProvider(final SchemaType schema) {\n             this.schema = schema;\n \n             //Default sorting\n             setSort(\"name\", true);\n+            comparator = new SortableDataProviderComparator<SchemaTO>(\n+                    getSort());\n         }\n \n         @Override\n@@ -1404,52 +1320,21 @@ public List<SchemaTO> getAttributesSchemaListDB() {\n \n             return list;\n         }\n-\n-        class SortableDataProviderComparator implements\n-                Comparator<SchemaTO>, Serializable {\n-\n-            public int compare(final SchemaTO o1,\n-                    final SchemaTO o2) {\n-                PropertyModel<Comparable> model1 =\n-                        new PropertyModel<Comparable>(o1,\n-                        getSort().getProperty());\n-                PropertyModel<Comparable> model2 =\n-                        new PropertyModel<Comparable>(o2,\n-                        getSort().getProperty());\n-\n-                int result = 1;\n-\n-                if (model1.getObject() == null && model2.getObject() == null) {\n-                    result = 0;\n-                } else if (model1.getObject() == null) {\n-                    result = 1;\n-                } else if (model2.getObject() == null) {\n-                    result = -1;\n-                } else {\n-                    result = ((Comparable) model1.getObject()).compareTo(\n-                            model2.getObject());\n-                }\n-\n-                result = getSort().isAscending() ? result : -result;\n-\n-                return result;\n-            }\n-        }\n     }\n \n     class DerivedSchemaProvider extends SortableDataProvider<DerivedSchemaTO> {\n \n-        private SortableDataProviderComparator comparator =\n-                new SortableDataProviderComparator();\n+        private SortableDataProviderComparator<DerivedSchemaTO> comparator;\n \n         private SchemaDerivedType schema;\n \n-        public DerivedSchemaProvider(SchemaDerivedType schema) {\n-\n+        public DerivedSchemaProvider(final SchemaDerivedType schema) {\n             this.schema = schema;\n \n             //Default sorting\n             setSort(\"name\", true);\n+            comparator = new SortableDataProviderComparator<DerivedSchemaTO>(\n+                    getSort());\n         }\n \n         @Override\n@@ -1491,36 +1376,5 @@ public List<DerivedSchemaTO> getAttributesSchemaListDB() {\n \n             return list;\n         }\n-\n-        class SortableDataProviderComparator implements\n-                Comparator<DerivedSchemaTO>, Serializable {\n-\n-            public int compare(final DerivedSchemaTO o1,\n-                    final DerivedSchemaTO o2) {\n-                PropertyModel<Comparable> model1 =\n-                        new PropertyModel<Comparable>(o1,\n-                        getSort().getProperty());\n-                PropertyModel<Comparable> model2 =\n-                        new PropertyModel<Comparable>(o2,\n-                        getSort().getProperty());\n-\n-                int result = 1;\n-\n-                if (model1.getObject() == null && model2.getObject() == null) {\n-                    result = 0;\n-                } else if (model1.getObject() == null) {\n-                    result = 1;\n-                } else if (model2.getObject() == null) {\n-                    result = -1;\n-                } else {\n-                    result = ((Comparable) model1.getObject()).compareTo(\n-                            model2.getObject());\n-                }\n-\n-                result = getSort().isAscending() ? result : -result;\n-\n-                return result;\n-            }\n-        }\n     }\n }"},{"sha":"e37e4222962dbb8e1e1840a0681fec7cd0a52411","filename":"console/src/main/java/org/syncope/console/pages/TaskModalPage.java","status":"modified","additions":22,"deletions":72,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -16,18 +16,14 @@\n  */\n package org.syncope.console.pages;\n \n-import java.io.Serializable;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.Date;\n import java.util.Iterator;\n import java.util.List;\n import org.syncope.console.commons.Constants;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.IAjaxCallDecorator;\n-import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.datetime.DateConverter;\n@@ -48,12 +44,13 @@\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.syncope.client.to.TaskExecutionTO;\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.rest.TaskRestClient;\n+import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.LinkPanel;\n \n@@ -123,19 +120,18 @@ public TaskModalPage(final BasePage basePage, final ModalWindow window,\n         columns.add(new AbstractColumn<TaskExecutionTO>(\n                 new Model<String>(getString(\"message\"))) {\n \n+            @Override\n             public void populateItem(\n-                    Item<ICellPopulator<TaskExecutionTO>> cellItem,\n-                    String componentId, IModel<TaskExecutionTO> model) {\n-\n-                final TaskExecutionTO taskExecutionTO = model.getObject();\n+                    final Item<ICellPopulator<TaskExecutionTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<TaskExecutionTO> model) {\n \n                 AjaxLink messageLink = new IndicatingAjaxLink(\"link\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n-\n+                    public void onClick(final AjaxRequestTarget target) {\n                         dialogContent.setDefaultModelObject(\n-                                taskExecutionTO.getMessage());\n+                                model.getObject().getMessage());\n \n                         target.addComponent(dialogContent);\n \n@@ -157,18 +153,21 @@ public void onClick(AjaxRequestTarget target) {\n         columns.add(new AbstractColumn<TaskExecutionTO>(\n                 new Model<String>(getString(\"delete\"))) {\n \n+            @Override\n             public void populateItem(\n-                    Item<ICellPopulator<TaskExecutionTO>> cellItem,\n-                    String componentId, IModel<TaskExecutionTO> model) {\n+                    final Item<ICellPopulator<TaskExecutionTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<TaskExecutionTO> model) {\n \n                 final TaskExecutionTO taskExecutionTO = model.getObject();\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            taskRestClient.deleteTaskExecution(\n+                            taskRestClient.deleteExecution(\n                                     taskExecutionTO.getId());\n                             info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n@@ -178,33 +177,13 @@ public void onClick(final AjaxRequestTarget target) {\n                         target.addComponent(feedbackPanel);\n                         target.addComponent(container);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-                                return \"if (confirm('\"\n-                                        + getString(\"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n-                DeleteLinkPanel panel = new DeleteLinkPanel(componentId,\n-                        model);\n-                panel.add(deleteLink);\n \n-                String allowedRoles = null;\n-\n-                allowedRoles = xmlRolesReader.getAllAllowedRoles(\"Tasks\",\n-                        \"delete\");\n+                DeleteLinkPanel panel = new DeleteLinkPanel(componentId, model);\n+                panel.add(deleteLink);\n \n                 MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n-                        allowedRoles);\n+                        xmlRolesReader.getAllAllowedRoles(\"Tasks\", \"delete\"));\n \n                 cellItem.add(panel);\n             }\n@@ -225,15 +204,17 @@ public CharSequence preDecorateScript(\n \n     class TaskExecutionsProvider extends SortableDataProvider<TaskExecutionTO> {\n \n-        private SortableDataProviderComparator comparator =\n-                new SortableDataProviderComparator();\n+        private SortableDataProviderComparator<TaskExecutionTO> comparator;\n \n         private TaskTO taskTO;\n \n         public TaskExecutionsProvider(TaskTO taskTO) {\n             //Default sorting\n             this.taskTO = taskTO;\n             setSort(\"startDate\", true);\n+            comparator =\n+                    new SortableDataProviderComparator<TaskExecutionTO>(\n+                    getSort());\n         }\n \n         @Override\n@@ -266,37 +247,6 @@ public TaskExecutionTO getObject() {\n         public List<TaskExecutionTO> getTasksListDB() {\n             return taskTO.getExecutions();\n         }\n-\n-        class SortableDataProviderComparator implements\n-                Comparator<TaskExecutionTO>, Serializable {\n-\n-            public int compare(final TaskExecutionTO o1,\n-                    final TaskExecutionTO o2) {\n-                PropertyModel<Comparable> model1 =\n-                        new PropertyModel<Comparable>(o1,\n-                        getSort().getProperty());\n-                PropertyModel<Comparable> model2 =\n-                        new PropertyModel<Comparable>(o2,\n-                        getSort().getProperty());\n-\n-                int result = 1;\n-\n-                if (model1.getObject() == null && model2.getObject() == null) {\n-                    result = 0;\n-                } else if (model1.getObject() == null) {\n-                    result = 1;\n-                } else if (model2.getObject() == null) {\n-                    result = -1;\n-                } else {\n-                    result = ((Comparable) model1.getObject()).compareTo(\n-                            model2.getObject());\n-                }\n-\n-                result = getSort().isAscending() ? result : -result;\n-\n-                return result;\n-            }\n-        }\n     }\n \n     /**"},{"sha":"4aee1302b19671681a9b518ded26fbe4dca97202","filename":"console/src/main/java/org/syncope/console/pages/Tasks.java","status":"modified","additions":20,"deletions":69,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -14,17 +14,13 @@\n  */\n package org.syncope.console.pages;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.IAjaxCallDecorator;\n-import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -50,7 +46,9 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n+import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.rest.TaskRestClient;\n+import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n import org.syncope.console.wicket.markup.html.form.LinkPanel;\n@@ -138,15 +136,14 @@ public Page createPage() {\n                         window.show(target);\n                     }\n                 };\n+\n                 EditLinkPanel panel = new EditLinkPanel(componentId,\n                         model);\n                 panel.add(viewLink);\n \n-                String allowedRoles = xmlRolesReader.getAllAllowedRoles(\"Tasks\",\n-                        \"read\");\n-\n                 MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n-                        allowedRoles);\n+                        xmlRolesReader.getAllAllowedRoles(\"Tasks\",\n+                        \"read\"));\n \n                 cellItem.add(panel);\n             }\n@@ -155,6 +152,7 @@ public Page createPage() {\n         columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(\n                 \"execute\"))) {\n \n+            @Override\n             public void populateItem(\n                     final Item<ICellPopulator<TaskTO>> cellItem,\n                     final String componentId,\n@@ -167,7 +165,7 @@ public void populateItem(\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.startTaskExecution(taskTO.getId());\n+                            restClient.startExecution(taskTO.getId());\n                             getSession().info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());\n@@ -183,11 +181,8 @@ public void onClick(final AjaxRequestTarget target) {\n                 LinkPanel panel = new LinkPanel(componentId);\n                 panel.add(executeLink);\n \n-                String allowedRoles = xmlRolesReader.getAllAllowedRoles(\"Tasks\",\n-                        \"execute\");\n-\n                 MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n-                        allowedRoles);\n+                        xmlRolesReader.getAllAllowedRoles(\"Tasks\", \"execute\"));\n \n                 cellItem.add(panel);\n             }\n@@ -204,37 +199,23 @@ public void populateItem(\n \n                 final TaskTO taskTO = model.getObject();\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n-\n+                    public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.deleteTask(taskTO.getId());\n+                            restClient.delete(taskTO.getId());\n+                            info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());\n                         }\n                         target.addComponent(container);\n-                    }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    final CharSequence script) {\n-\n-                                return \"if (confirm('\"\n-                                        + getString(\"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n+                        target.addComponent(feedbackPanel);\n                     }\n                 };\n-                DeleteLinkPanel panel = new DeleteLinkPanel(componentId,\n-                        model);\n+\n+                DeleteLinkPanel panel = new DeleteLinkPanel(componentId, model);\n                 panel.add(deleteLink);\n \n                 String allowedRoles = xmlRolesReader.getAllAllowedRoles(\"Tasks\",\n@@ -305,18 +286,19 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n     private class TasksProvider extends SortableDataProvider<TaskTO> {\n \n-        private SortableDataProviderComparator comparator =\n-                new SortableDataProviderComparator();\n+        private SortableDataProviderComparator<TaskTO> comparator;\n \n         public TasksProvider() {\n             super();\n             //Default sorting\n             setSort(\"id\", true);\n+            comparator = new SortableDataProviderComparator<TaskTO>(getSort());\n         }\n \n         @Override\n         public Iterator<TaskTO> iterator(int first, int count) {\n-            List<TaskTO> tasks = restClient.list(first, count);\n+            List<TaskTO> tasks = restClient.list(\n+                    (first / paginatorRows) + 1, count);\n             Collections.sort(tasks, comparator);\n             return tasks.iterator();\n         }\n@@ -330,36 +312,5 @@ public int size() {\n         public IModel<TaskTO> model(final TaskTO object) {\n             return new CompoundPropertyModel<TaskTO>(object);\n         }\n-\n-        class SortableDataProviderComparator implements\n-                Comparator<TaskTO>, Serializable {\n-\n-            @Override\n-            public int compare(final TaskTO o1, final TaskTO o2) {\n-                PropertyModel<Comparable> model1 =\n-                        new PropertyModel<Comparable>(o1,\n-                        getSort().getProperty());\n-                PropertyModel<Comparable> model2 =\n-                        new PropertyModel<Comparable>(o2,\n-                        getSort().getProperty());\n-\n-                int result = 1;\n-\n-                if (model1.getObject() == null && model2.getObject() == null) {\n-                    result = 0;\n-                } else if (model1.getObject() == null) {\n-                    result = 1;\n-                } else if (model2.getObject() == null) {\n-                    result = -1;\n-                } else {\n-                    result = ((Comparable) model1.getObject()).compareTo(\n-                            model2.getObject());\n-                }\n-\n-                result = getSort().isAscending() ? result : -result;\n-\n-                return result;\n-            }\n-        }\n     }\n }"},{"sha":"4f1044579adcb40c1ebe4462913de9c3445d2b58","filename":"console/src/main/java/org/syncope/console/pages/UserModalPage.java","status":"modified","additions":15,"deletions":29,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -32,8 +32,6 @@\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.IAjaxCallDecorator;\n-import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -76,6 +74,7 @@\n import org.syncope.console.rest.RoleRestClient;\n import org.syncope.console.rest.SchemaRestClient;\n import org.syncope.console.rest.UserRestClient;\n+import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.syncope.console.wicket.markup.html.form.DateFieldPanel;\n@@ -117,7 +116,7 @@ public class UserModalPage extends BaseModalPage {\n \n     private UserMod userMod;\n \n-    public UserModalPage(final BasePage basePage, final ModalWindow window,\n+    public UserModalPage(final Users basePage, final ModalWindow window,\n             final UserTO userTO, final boolean createFlag) {\n \n         if (!createFlag) {\n@@ -350,7 +349,9 @@ public void onComponentTag(final Component component,\n                 getString(\"submit\"))) {\n \n             @Override\n-            protected void onSubmit(AjaxRequestTarget target, Form form) {\n+            protected void onSubmit(final AjaxRequestTarget target,\n+                    final Form form) {\n+\n                 UserTO userTO = (UserTO) form.getDefaultModelObject();\n                 try {\n                     userTO.setResources(getResourcesSet(resourcesPalette.\n@@ -359,17 +360,17 @@ protected void onSubmit(AjaxRequestTarget target, Form form) {\n                     userTO.setMemberships(getMembershipsSet());\n \n                     if (createFlag) {\n-                        userRestClient.createUser(userTO);\n+                        userRestClient.create(userTO);\n                     } else {\n                         setupUserMod(userTO);\n \n                         //Update user just if it is changed\n                         if (userMod != null) {\n-                            userRestClient.updateUser(userMod);\n+                            userRestClient.update(userMod);\n                         }\n                     }\n \n-                    ((Users) basePage).setOperationResult(true);\n+                    basePage.setModalResult(true);\n                     window.close(target);\n                 } catch (SyncopeClientCompositeErrorException e) {\n                     LOG.error(\"While creating or updating user\", e);\n@@ -472,31 +473,16 @@ public Page createPage() {\n                 };\n                 item.add(editLink);\n \n-                AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n+                AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                        \"deleteLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n                         int componentId = new Integer(getParent().getId());\n                         membershipTOs.remove(componentId);\n \n                         target.addComponent(membershipsContainer);\n                     }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-\n-                                return \"if (confirm('\"\n-                                        + getString(\"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n                 };\n                 item.add(deleteLink);\n             }\n@@ -832,8 +818,8 @@ private void searchAndAddResource(final String resource) {\n     private void searchAndDropResource(String resource, UserTO userTO) {\n         boolean found = false;\n \n-        /*Check if the current resource was existent before the update and in this\n-        case just ignore it */\n+        /*Check if the current resource was existing before the update\n+        and in this case just ignore it */\n         for (String newResource : userTO.getResources()) {\n             if (resource.equals(newResource)) {\n                 found = true;\n@@ -866,7 +852,8 @@ private void searchAndUpdateMembership(MembershipTO newMembership) {\n             if (newMembership.getRoleId() == oldMembership.getRoleId()) {\n \n                 for (AttributeTO newAttribute : newMembership.getAttributes()) {\n-                    for (AttributeTO oldAttribute : oldMembership.getAttributes()) {\n+                    for (AttributeTO oldAttribute :\n+                            oldMembership.getAttributes()) {\n \n                         if (oldAttribute.getSchema().equals(newAttribute.\n                                 getSchema())) {\n@@ -878,7 +865,6 @@ private void searchAndUpdateMembership(MembershipTO newMembership) {\n                                     getValues());\n \n                             membershipMod.addAttributeToBeUpdated(attributeMod);\n-                            //membershipMod.addAttributeToBeRemoved(oldAttribute.getSchema());\n                             attrFound = true;\n                             break;\n                         }"},{"sha":"2341a1382d16824a9d4b5934684ce53f4d5956a8","filename":"console/src/main/java/org/syncope/console/pages/Users.java","status":"modified","additions":539,"deletions":1249,"changes":1788,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -17,20 +17,24 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n-import org.apache.commons.httpclient.NameValuePair;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.IAjaxCallDecorator;\n-import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.CheckBox;\n@@ -39,8 +43,10 @@\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n-import org.apache.wicket.markup.html.list.PageableListView;\n import org.apache.wicket.markup.html.panel.FeedbackPanel;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n@@ -49,8 +55,6 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.to.PaginatedUserContainer;\n-import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -59,1169 +63,360 @@\n import org.syncope.console.commons.SearchConditionWrapper;\n import org.syncope.console.commons.SearchConditionWrapper.FilterType;\n import org.syncope.console.commons.SearchConditionWrapper.OperationType;\n-import org.syncope.console.rest.SchemaRestClient;\n-import org.syncope.console.rest.RoleRestClient;\n-import org.syncope.console.rest.UserRestClient;\n-\n-/**\n- * Users WebPage.\n- */\n-public class Users extends BasePage {\n-\n-    @SpringBean\n-    private UserRestClient userRestClient;\n-\n-    @SpringBean\n-    private SchemaRestClient schemaRestClient;\n-\n-    @SpringBean\n-    private RoleRestClient roleRestClient;\n-\n-    @SpringBean\n-    private PreferenceManager prefMan;\n-\n-    private final ModalWindow createUserWin;\n-\n-    private final ModalWindow editUserWin;\n-\n-    private final ModalWindow changeAttribsViewWin;\n-\n-    private final static int WIN_ATTRIBUTES_HEIGHT = 500;\n-\n-    private final static int WIN_ATTRIBUTES_WIDTH = 600;\n-\n-    private final static int WIN_USER_HEIGHT = 680;\n-\n-    private final static int WIN_USER_WIDTH = 1133;\n-\n-    private WebMarkupContainer usersTableSearchContainer;\n-\n-    private WebMarkupContainer searchResultsContainer;\n-\n-    private WebMarkupContainer usersTableContainer;\n-\n-    /*\n-    Response flag set by the Modal Window after the operation is completed\n-     */\n-    private boolean operationResult = false;\n-\n-    private List<SearchConditionWrapper> searchConditionsList;\n-\n-    private int paginatorRows;\n-\n-    private int paginatorSearchRows;\n-\n-    private int currentViewPage = 1;\n-\n-    private int currentSearchPage = 1;\n-\n-    /** Ajax Links for User's view paginator**/\n-    private AjaxLink incrementUserViewLink;\n-\n-    private AjaxLink decrementUserViewLink;\n-\n-    private AjaxLink firstPageLink;\n-\n-    private AjaxLink lastPageLink;\n-\n-    /** Labels for Users' view paginator*/\n-    private Label pageRecordFrom;\n-\n-    private Label pageRecordTo;\n-\n-    private Label totalRecords;\n-\n-    /** Ajax Links for Users' search paginator */\n-    private AjaxLink incrementUserLinkSearch;\n-\n-    private AjaxLink decrementUserLinkSearch;\n-\n-    private AjaxLink firstPageLinkSearch;\n-\n-    private AjaxLink lastPageLinkSearch;\n-\n-    /** \n-     * Labels for Users' search paginator\n-     */\n-    private Label pageRecordFromSearch;\n-\n-    private Label pageRecordToSearch;\n-\n-    private Label totalRecordsSearch;\n-\n-    private List<String> columnList;\n-\n-    private NodeCond nodeCond;\n-\n-    private PaginatedUserContainer paginatedUsers;\n-\n-    private Boolean firstLoad = Boolean.TRUE;\n-\n-    private PaginatedUserContainer paginatedSearchUsers;\n-\n-    private ListView navigation;\n-\n-    private ListView pageLinksSearchView;\n-\n-    public Users(PageParameters parameters) {\n-        super(parameters);\n-\n-        setupSearchConditionsList();\n-\n-        add(createUserWin = new ModalWindow(\"createUserWin\"));\n-        add(editUserWin = new ModalWindow(\"editUserWin\"));\n-        add(changeAttribsViewWin = new ModalWindow(\"changeAttributesViewWin\"));\n-\n-        //table's columnsList = attributes to view\n-        final IModel columns = new LoadableDetachableModel() {\n-\n-            @Override\n-            protected Object load() {\n-                columnList = prefMan.getList(\n-                        getWebRequestCycle().getWebRequest(),\n-                        Constants.PREF_USERS_ATTRIBUTES_VIEW);\n-\n-                Collections.sort(columnList);\n-                return columnList;\n-            }\n-        };\n-\n-        ListView columnsView = new ListView(\"usersSchema\", columns) {\n-\n-            @Override\n-            protected void populateItem(final ListItem item) {\n-                final String name =\n-                        (String) item.getDefaultModelObject();\n-\n-                item.add(new Label(\"attribute\", name));\n-            }\n-        };\n-\n-        paginatorRows = prefMan.getPaginatorRows(\n-                getWebRequestCycle().getWebRequest(),\n-                Constants.PREF_USERS_PAGINATOR_ROWS);\n-\n-        paginatorSearchRows = prefMan.getPaginatorRows(\n-                getWebRequestCycle().getWebRequest(),\n-                Constants.PREF_USERS_SEARCH_PAGINATOR_ROWS);\n-\n-        LOG.debug(\"Users list first load with page '{}'\", currentViewPage);\n-\n-        paginatedUsers = userRestClient.getPaginatedUser(\n-                currentViewPage, paginatorRows);\n-\n-        IModel usersModel = new LoadableDetachableModel() {\n-\n-            @Override\n-            protected Object load() {\n-\n-                if (!firstLoad) {\n-                    LOG.debug(\"Users list load with page '{}'\",\n-                            currentViewPage);\n-\n-                    paginatedUsers = userRestClient.getPaginatedUser(\n-                            currentViewPage, paginatorRows);\n-                } else {\n-                    firstLoad = Boolean.FALSE;\n-                }\n-\n-                //Refresh links just after the selecting page click\n-                if (incrementUserViewLink != null\n-                        && decrementUserViewLink != null\n-                        && firstPageLink != null && lastPageLink != null) {\n-\n-                    int totalPages = (int) Math.ceil(\n-                            paginatedUsers.getTotalRecords()\n-                            / new Double(paginatedUsers.getPageSize()));\n-\n-                    if (currentViewPage == totalPages) {\n-                        incrementUserViewLink.setEnabled(false);\n-                        lastPageLink.setEnabled(false);\n-                    } else {\n-                        incrementUserViewLink.setEnabled(true);\n-                        lastPageLink.setEnabled(true);\n-                    }\n-\n-                    if (currentViewPage == 1) {\n-                        decrementUserViewLink.setEnabled(false);\n-                        firstPageLink.setEnabled(false);\n-                    } else {\n-                        decrementUserViewLink.setEnabled(true);\n-                        firstPageLink.setEnabled(true);\n-                    }\n-                }\n-\n-                if (pageRecordFrom != null && pageRecordTo != null\n-                        && totalRecords != null) {\n-\n-                    //Records indexes for paginator's labels\n-                    int firstPageRecord = 1;\n-                    int lastPageRecord = paginatedUsers.getRecordsInPage();\n-\n-                    if (paginatedUsers.getPageNumber() > 1) {\n-                        firstPageRecord = (paginatedUsers.getPageSize()\n-                                * (paginatedUsers.getPageNumber() - 1)) + 1;\n-\n-                        lastPageRecord = (paginatedUsers.getPageSize()\n-                                * (paginatedUsers.getPageNumber() - 1))\n-                                + paginatedUsers.getRecordsInPage();\n-                    }\n-\n-                    pageRecordFrom.setDefaultModelObject(\n-                            String.valueOf(firstPageRecord));\n-\n-                    pageRecordTo.setDefaultModelObject(\n-                            String.valueOf(lastPageRecord));\n-\n-                    totalRecords.setDefaultModelObject(String.valueOf(\n-                            paginatedUsers.getTotalRecords()));\n-\n-                }\n-\n-\n-                return paginatedUsers.getRecords();\n-            }\n-        };\n-\n-        usersTableContainer = new WebMarkupContainer(\"usersTableContainer\");\n-\n-        final PageableListView usersView = new PageableListView<UserTO>(\n-                \"results\", usersModel, paginatorRows) {\n-\n-            @Override\n-            protected void populateItem(final ListItem<UserTO> item) {\n-\n-                final UserTO userTO = item.getModelObject();\n-\n-                item.add(new Label(\"id\", String.valueOf(userTO.getId())));\n-\n-                item.add(new Label(\"status\", userTO.getStatus()));\n-\n-                if (userTO.getToken() != null && !userTO.getToken().isEmpty()) {\n-                    item.add(new Label(\"token\", getString(\"tokenValued\")));\n-                } else {\n-                    item.add(new Label(\"token\", getString(\"tokenNotValued\")));\n-                }\n-\n-                item.add(new ListView<NameValuePair>(\"selectedAttributes\",\n-                        attributesToDisplay(userTO)) {\n-\n-                    @Override\n-                    protected void populateItem(\n-                            final ListItem<NameValuePair> item) {\n-\n-                        NameValuePair attribute = item.getModelObject();\n-\n-                        for (String name : columnList) {\n-                            if (name.equalsIgnoreCase(attribute.getName())) {\n-                                item.add(new Label(\"name\",\n-                                        attribute.getValue()));\n-                            }\n-                        }\n-                    }\n-                });\n-\n-                AjaxLink editLink = new IndicatingAjaxLink(\"editLink\",\n-                        new Model(getString(\"edit\"))) {\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n-                        final UserTO userTO = item.getModelObject();\n-\n-                        editUserWin.setPageCreator(\n-                                new ModalWindow.PageCreator() {\n-\n-                                    public Page createPage() {\n-                                        UserModalPage window =\n-                                                new UserModalPage(\n-                                                Users.this, editUserWin,\n-                                                userTO,\n-                                                false);\n-                                        return window;\n-                                    }\n-                                });\n-\n-                        editUserWin.show(target);\n-                    }\n-                };\n-\n-                item.add(editLink);\n-\n-                item.add(new IndicatingAjaxLink(\"deleteLink\", new Model(\n-                        getString(\"delete\"))) {\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n-                        userRestClient.deleteUser(\n-                                String.valueOf(userTO.getId()));\n-\n-                        info(getString(\"operation_succeded\"));\n-                        target.addComponent(feedbackPanel);\n-\n-                        target.addComponent(usersTableSearchContainer);\n-                    }\n-\n-                    @Override\n-                    protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()) {\n-\n-                            @Override\n-                            public CharSequence preDecorateScript(\n-                                    CharSequence script) {\n-\n-                                return \"if (confirm('\" + getString(\n-                                        \"confirmDelete\") + \"'))\"\n-                                        + \"{\" + script + \"}\";\n-                            }\n-                        };\n-                    }\n-                });\n-            }\n-        };\n-\n-        usersTableContainer.add(usersView);\n-        usersTableContainer.setOutputMarkupId(true);\n-\n-        incrementUserViewLink = new AjaxLink(\"incrementLink\") {\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target) {\n-                currentViewPage++;\n-\n-                //Update pageLinks on paginator\n-                List<Integer> pageIdList = getPaginatorIndexes();\n-                navigation.setList(pageIdList);\n-                target.addChildren(navigation, AjaxLink.class);\n-\n-                target.addComponent(usersTableContainer);\n-            }\n-        };\n-\n-        int totalPages = (int) Math.ceil(paginatedUsers.getTotalRecords()\n-                / new Double(paginatedUsers.getPageSize()));\n-\n-        firstPageLink = new AjaxLink(\"firstPageLink\") {\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target) {\n-                currentViewPage = 1;\n-\n-                //Update pageLinks on paginator\n-                List<Integer> pageIdList = getPaginatorIndexes();\n-                navigation.setList(pageIdList);\n-                target.addChildren(navigation, AjaxLink.class);\n-\n-                target.addComponent(usersTableContainer);\n-            }\n-        };\n-\n-        lastPageLink = new AjaxLink(\"lastPageLink\") {\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target) {\n-                int totalPages = (int) Math.ceil(\n-                        paginatedUsers.getTotalRecords()\n-                        / new Double(paginatedUsers.getPageSize()));\n-                currentViewPage = totalPages;\n-\n-                //Update pageLinks on paginator\n-                List<Integer> pageIdList = getPaginatorIndexes();\n-                navigation.setList(pageIdList);\n-                target.addChildren(navigation, AjaxLink.class);\n-\n-                target.addComponent(usersTableContainer);\n-            }\n-        };\n-\n-        decrementUserViewLink = new AjaxLink(\"decrementLink\") {\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target) {\n-                currentViewPage--;\n-\n-                //Update pageLinks on paginator\n-                List<Integer> pageIdList = getPaginatorIndexes();\n-                navigation.setList(pageIdList);\n-                target.addChildren(navigation, AjaxLink.class);\n-\n-                target.addComponent(usersTableContainer);\n-            }\n-        };\n-\n-        if (currentViewPage >= totalPages) {\n-            incrementUserViewLink.setEnabled(false);\n-            lastPageLink.setEnabled(false);\n-        }\n-\n-        if (currentViewPage <= 1) {\n-            decrementUserViewLink.setEnabled(false);\n-            firstPageLink.setEnabled(false);\n-        }\n-\n-        //Add to usersTableSearchContainer users' list navigation controls\n-        usersTableContainer.add(incrementUserViewLink);\n-        usersTableContainer.add(firstPageLink);\n-        usersTableContainer.add(lastPageLink);\n-\n-        //Records indexes for paginator's labels\n-        int firstPageRecord = 1;\n-        int lastPageRecord = paginatedUsers.getRecordsInPage();\n-\n-        if (paginatedUsers.getPageNumber() > 1) {\n-            firstPageRecord = (paginatedUsers.getPageSize()\n-                    * (paginatedUsers.getPageNumber() - 1)) + 1;\n-\n-            lastPageRecord = (paginatedUsers.getPageSize()\n-                    * (paginatedUsers.getPageNumber() - 1))\n-                    + paginatedUsers.getRecordsInPage();\n-        }\n-\n-        usersTableContainer.add(pageRecordFrom = new Label(\"pageRecordFrom\",\n-                new Model<String>(String.valueOf(firstPageRecord))));\n-\n-        usersTableContainer.add(pageRecordTo = new Label(\"pageRecordTo\",\n-                new Model<String>(String.valueOf(lastPageRecord))));\n-\n-        usersTableContainer.add(totalRecords = new Label(\"totalRecords\",\n-                new Model<String>(String.valueOf(\n-                paginatedUsers.getTotalRecords()))));\n-\n-        usersTableContainer.add(decrementUserViewLink);\n-\n-        //Build pages link for paginator\n-        List<Integer> pageIdList = getPaginatorIndexes();\n-\n-        navigation = new ListView(\"navigation\", pageIdList) {\n-\n-            @Override\n-            protected void populateItem(ListItem item) {\n-                final int pageId = (Integer) item.getDefaultModelObject();\n-\n-                AjaxLink pageLink = new AjaxLink(\"pageLink\") {\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n-                        currentViewPage = pageId;\n-\n-                        //Update pageLinks on paginator\n-                        List<Integer> pageIdList = getPaginatorSearchIndexes();\n-                        pageLinksSearchView.setList(pageIdList);\n-                        target.addChildren(pageLinksSearchView, AjaxLink.class);\n-\n-                        target.addComponent(usersTableContainer);\n-                    }\n-                };\n-\n-                pageLink.setEnabled(currentViewPage != pageId);\n-                pageLink.add(new Label(\"pageNumber\", new Model<String>(\n-                        String.valueOf(pageId))));\n-\n-                item.add(pageLink);\n-            }\n-        };\n-\n-        usersTableContainer.add(navigation);\n-        usersTableContainer.add(columnsView);\n-\n-        add(usersTableContainer);\n-\n-        createUserWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n-        createUserWin.setInitialHeight(WIN_USER_HEIGHT);\n-        createUserWin.setInitialWidth(WIN_USER_WIDTH);\n-        createUserWin.setPageMapName(\"create-user-modal\");\n-        createUserWin.setCookieName(\"create-user-modal\");\n-\n-        editUserWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n-        editUserWin.setInitialHeight(WIN_USER_HEIGHT);\n-        editUserWin.setInitialWidth(WIN_USER_HEIGHT);\n-        editUserWin.setPageMapName(\"edit-user-modal\");\n-        editUserWin.setCookieName(\"edit-user-modal\");\n-\n-        changeAttribsViewWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n-        changeAttribsViewWin.setInitialHeight(WIN_ATTRIBUTES_HEIGHT);\n-        changeAttribsViewWin.setInitialWidth(WIN_ATTRIBUTES_WIDTH);\n-        changeAttribsViewWin.setPageMapName(\"change-attribs-modal\");\n-        changeAttribsViewWin.setCookieName(\"change-attribs-modal\");\n-\n-        changeAttribsViewWin.setWindowClosedCallback(\n-                new ModalWindow.WindowClosedCallback() {\n-\n-                    @Override\n-                    public void onClose(AjaxRequestTarget target) {\n-\n-                        if (operationResult) {\n-                            getSession().info(getString(\"operation_succeded\"));\n-                            setResponsePage(Users.class);\n-                        } //When the window is closed without calling backend\n-                        else {\n-                            target.addComponent(feedbackPanel);\n-                        }\n-                    }\n-                });\n-\n-        AjaxLink createUserLink = new IndicatingAjaxLink(\"createUserLink\") {\n-\n-            @Override\n-            public void onClick(AjaxRequestTarget target) {\n-\n-                createUserWin.setPageCreator(new ModalWindow.PageCreator() {\n-\n-                    public Page createPage() {\n-                        UserModalPage window = new UserModalPage(Users.this,\n-                                createUserWin, new UserTO(), true);\n-                        return window;\n-                    }\n-                });\n-\n-                createUserWin.show(target);\n-            }\n-        };\n-\n-        String allowedRoles = null;\n-\n-        allowedRoles = xmlRolesReader.getAllAllowedRoles(\"Users\", \"create\");\n-\n-        MetaDataRoleAuthorizationStrategy.authorize(createUserLink, ENABLE,\n-                allowedRoles);\n-\n-        add(createUserLink);\n-\n-        Form paginatorForm = new Form(\"PaginatorForm\");\n-\n-        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\",\n-                new PropertyModel(this, \"paginatorRows\"),\n-                prefMan.getPaginatorChoices());\n-\n-        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                prefMan.set(getWebRequestCycle().getWebRequest(),\n-                        getWebRequestCycle().getWebResponse(),\n-                        Constants.PREF_USERS_PAGINATOR_ROWS,\n-                        String.valueOf(paginatorRows));\n-\n-                usersView.setRowsPerPage(paginatorRows);\n-\n-                //Reload page\n-                setResponsePage(Users.class);\n-            }\n-        });\n-\n-        paginatorForm.add(rowsChooser);\n-        add(paginatorForm);\n-\n-        AjaxLink changeAttributesViewLink = new IndicatingAjaxLink(\n-                \"changeAttributesViewLink\") {\n-\n-            @Override\n-            public void onClick(AjaxRequestTarget target) {\n-\n-                changeAttribsViewWin.setPageCreator(\n-                        new ModalWindow.PageCreator() {\n-\n-                            public Page createPage() {\n-                                DisplayAttributesModalPage window =\n-                                        new DisplayAttributesModalPage(\n-                                        Users.this,\n-                                        changeAttribsViewWin, true);\n-                                return window;\n-                            }\n-                        });\n-\n-                changeAttribsViewWin.show(target);\n-            }\n-        };\n-\n-        String allowedViewRoles = null;\n-\n-        allowedViewRoles = xmlRolesReader.getAllAllowedRoles(\"Users\",\n-                \"changeView\");\n-\n-        MetaDataRoleAuthorizationStrategy.authorize(changeAttributesViewLink,\n-                RENDER, allowedViewRoles);\n-\n-        add(changeAttributesViewLink);\n-\n-        //TAB 2 - Search section start\n-        final IModel schemaNames = new LoadableDetachableModel() {\n-\n-            @Override\n-            protected Object load() {\n-                return schemaRestClient.getAllUserSchemasNames();\n-            }\n-        };\n-\n-        final IModel roleNames = new LoadableDetachableModel() {\n-\n-            @Override\n-            protected Object load() {\n-                List<RoleTO> roleTOs = roleRestClient.getAllRoles();\n-\n-                List<String> roleNames = new ArrayList<String>();\n-\n-                for (RoleTO role : roleTOs) {\n-                    roleNames.add(role.getName());\n-                }\n-\n-                return roleNames;\n-            }\n-        };\n-\n-        final IModel attributeTypes = new LoadableDetachableModel() {\n-\n-            @Override\n-            protected Object load() {\n-                return Arrays.asList(AttributeCond.Type.values());\n-            }\n-        };\n-\n-        final IModel filterTypes = new LoadableDetachableModel() {\n-\n-            @Override\n-            protected Object load() {\n-                return Arrays.asList(\n-                        SearchConditionWrapper.FilterType.values());\n-            }\n-        };\n-\n-        Form form = new Form(\"UserSearchForm\");\n-\n-        form.add(new FeedbackPanel(\"searchFeedback\").setOutputMarkupId(true));\n-\n-        usersTableSearchContainer = new WebMarkupContainer(\"container\");\n-        usersTableSearchContainer.setOutputMarkupId(true);\n-\n-        setWindowClosedCallback(createUserWin, usersTableContainer);\n-        setWindowClosedCallback(editUserWin, usersTableSearchContainer);\n-\n-        ListView searchView = new ListView(\"searchView\", searchConditionsList) {\n-\n-            @Override\n-            protected void populateItem(final ListItem item) {\n-                final SearchConditionWrapper searchCondition =\n-                        (SearchConditionWrapper) item.getDefaultModelObject();\n-\n-                if (item.getIndex() == 0) {\n-                    item.add(new Label(\"operationType\", \"\"));\n-                } else {\n-                    item.add(new Label(\"operationType\", searchCondition.getOperationType().toString()));\n-                }\n-\n-                item.add(new CheckBox(\"notOperator\",\n-                        new PropertyModel(searchCondition,\n-                        \"notOperator\")));\n-\n-                final DropDownChoice filterNameChooser =\n-                        new DropDownChoice(\"filterName\",\n-                        new PropertyModel(searchCondition, \"filterName\"),\n-                        (IModel) null);\n-                filterNameChooser.setOutputMarkupId(true);\n-\n-                if (searchCondition.getFilterType() == null) {\n-                    filterNameChooser.setChoices(Collections.emptyList());\n-                } else if (searchCondition.getFilterType()\n-                            == SearchConditionWrapper.FilterType.ATTRIBUTE) {\n-                        filterNameChooser.setChoices(schemaNames);\n-                    } else {\n-                        filterNameChooser.setChoices(roleNames);\n-                    }\n-\n-                filterNameChooser.setRequired(true);\n-\n-                item.add(filterNameChooser);\n-\n-                final DropDownChoice type = new DropDownChoice(\n-                        \"type\", new PropertyModel(searchCondition, \"type\"),\n-                        attributeTypes);\n-\n-                item.add(type);\n-\n-                final TextField filterValue = new TextField(\n-                        \"filterValue\", new PropertyModel(searchCondition,\n-                        \"filterValue\"));\n-\n-                item.add(filterValue);\n-\n-                if (searchCondition.getFilterType()\n-                        == SearchConditionWrapper.FilterType.MEMBERSHIP) {\n-\n-                    type.setEnabled(false);\n-                    type.setRequired(false);\n-                    type.setModelObject(null);\n-\n-                    filterValue.setEnabled(false);\n-                    filterValue.setModelObject(\"\");\n-                } else {\n-                    if (!type.isEnabled()) {\n-                        type.setEnabled(true);\n-                        type.setRequired(true);\n-                    }\n-                    if (!filterValue.isEnabled()) {\n-                        filterValue.setEnabled(true);\n-                    }\n-                }\n-\n-                DropDownChoice filterTypeChooser =\n-                        new DropDownChoice(\"filterType\",\n-                        new PropertyModel(searchCondition, \"filterType\"),\n-                        filterTypes);\n-                filterTypeChooser.setOutputMarkupId(true);\n-\n-                filterTypeChooser.add(new AjaxFormComponentUpdatingBehavior(\n-                        \"onchange\") {\n-\n-                    @Override\n-                    protected void onUpdate(final AjaxRequestTarget target) {\n-                        filterNameChooser.setChoices(\n-                                new LoadableDetachableModel() {\n-\n-                                    @Override\n-                                    protected Object load() {\n-                                        FilterType schemaType =\n-                                                searchCondition.getFilterType();\n-\n-                                        return schemaType\n-                                                == FilterType.ATTRIBUTE\n-                                                ? schemaNames : roleNames;\n-                                    }\n-                                });\n-                        target.addComponent(filterNameChooser);\n-                        target.addComponent(usersTableSearchContainer);\n-                    }\n-                });\n-\n-                filterTypeChooser.setRequired(true);\n-\n-                item.add(filterTypeChooser);\n-\n-                AjaxButton dropButton = new IndicatingAjaxButton(\"dropButton\",\n-                        new Model(getString(\"dropButton\"))) {\n-\n-                    @Override\n-                    protected void onSubmit(AjaxRequestTarget target,\n-                            Form form) {\n-                        final int parentId = new Integer(getParent().getId());\n-                        searchConditionsList.remove(parentId);\n-                        target.addComponent(usersTableSearchContainer);\n-                    }\n-                };\n-\n-                dropButton.setDefaultFormProcessing(false);\n-\n-                if (item.getIndex() == 0) {\n-                    dropButton.setVisible(false);\n-                }\n-\n-                item.add(dropButton);\n-            }\n-        };\n-\n-        usersTableSearchContainer.add(searchView);\n-\n-        AjaxButton addAndButton = new IndicatingAjaxButton(\"addAndButton\",\n-                new Model(getString(\"addAndButton\"))) {\n-\n-            @Override\n-            protected void onSubmit(AjaxRequestTarget target, Form form) {\n-                SearchConditionWrapper conditionWrapper =\n-                        new SearchConditionWrapper();\n-                conditionWrapper.setOperationType(OperationType.AND);\n-                searchConditionsList.add(conditionWrapper);\n-                target.addComponent(usersTableSearchContainer);\n-            }\n-        };\n-\n-        addAndButton.setDefaultFormProcessing(false);\n-        usersTableSearchContainer.add(addAndButton);\n-\n-        AjaxButton addOrButton = new IndicatingAjaxButton(\"addOrButton\",\n-                new Model(getString(\"addOrButton\"))) {\n-\n-            @Override\n-            protected void onSubmit(AjaxRequestTarget target, Form form) {\n-                SearchConditionWrapper conditionWrapper =\n-                        new SearchConditionWrapper();\n-                conditionWrapper.setOperationType(OperationType.OR);\n-                searchConditionsList.add(conditionWrapper);\n-                target.addComponent(usersTableSearchContainer);\n-            }\n-        };\n-\n-        addOrButton.setDefaultFormProcessing(false);\n-        usersTableSearchContainer.add(addOrButton);\n+import org.syncope.console.commons.SortableDataProviderComparator;\n+import org.syncope.console.rest.RoleRestClient;\n+import org.syncope.console.rest.SchemaRestClient;\n+import org.syncope.console.rest.UserRestClient;\n+import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n+import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n+import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n \n-        form.add(usersTableSearchContainer);\n+public class Users extends BasePage {\n \n-        searchResultsContainer =\n-                new WebMarkupContainer(\"searchResultsContainer\");\n+    private final static int EDIT_MODAL_WIN_HEIGHT = 680;\n \n-        //Display warning message if no search matches have been found\n-        final Label noResults = new Label(\"noResults\", new Model<String>(\"\"));\n-        noResults.setOutputMarkupId(true);\n-        searchResultsContainer.add(noResults);\n+    private final static int EDIT_MODAL_WIN_WIDTH = 1133;\n \n-        IModel resultsModel = new LoadableDetachableModel() {\n+    private final static int DISPLAYATTRS_MODAL_WIN_HEIGHT = 500;\n \n-            @Override\n-            protected Object load() {\n+    private final static int DISPLAYATTRS_MODAL_WIN_WIDTH = 600;\n \n-                LOG.debug(\"Search with page '{}' and condition {}\",\n-                        currentSearchPage, nodeCond);\n+    @SpringBean\n+    private UserRestClient userRestClient;\n \n-                if (nodeCond != null) {\n+    @SpringBean\n+    private SchemaRestClient schemaRestClient;\n \n-                    paginatedSearchUsers = userRestClient.paginatedSearchUser(\n-                            nodeCond, currentSearchPage, paginatorSearchRows);\n+    @SpringBean\n+    private RoleRestClient roleRestClient;\n \n-                    //Update pageLinks on paginator\n-                    List<Integer> pageIdList = getPaginatorSearchIndexes();\n-                    pageLinksSearchView.setList(pageIdList);\n+    @SpringBean\n+    private PreferenceManager prefMan;\n \n-                    //Refresh links just after the selecting page click\n-                    if (incrementUserLinkSearch != null\n-                            && decrementUserLinkSearch != null\n-                            && firstPageLinkSearch != null\n-                            && lastPageLinkSearch != null) {\n+    final private ModalWindow editModalWin;\n \n-                        int totalPages = (int) Math.ceil(\n-                                paginatedSearchUsers.getTotalRecords()\n-                                / new Double(\n-                                paginatedSearchUsers.getPageSize()));\n+    final private ModalWindow displayAttrsModalWin;\n \n-                        if (currentSearchPage >= totalPages) {\n-                            incrementUserLinkSearch.setEnabled(false);\n-                            lastPageLinkSearch.setEnabled(false);\n-                        } else {\n-                            incrementUserLinkSearch.setEnabled(true);\n-                            lastPageLinkSearch.setEnabled(true);\n-                        }\n+    final private int paginatorRows = prefMan.getPaginatorRows(\n+            getWebRequestCycle().getWebRequest(),\n+            Constants.PREF_USERS_PAGINATOR_ROWS);\n \n-                        if (currentSearchPage <= 1) {\n-                            decrementUserLinkSearch.setEnabled(false);\n-                            firstPageLinkSearch.setEnabled(false);\n-                        } else {\n-                            decrementUserLinkSearch.setEnabled(true);\n-                            firstPageLinkSearch.setEnabled(true);\n-                        }\n+    final private int searchPaginatorRows = prefMan.getPaginatorRows(\n+            getWebRequestCycle().getWebRequest(),\n+            Constants.PREF_USERS_SEARCH_PAGINATOR_ROWS);\n \n-                        if (paginatedSearchUsers.getRecords().isEmpty()) {\n-                            noResults.setDefaultModel(new Model<String>(\n-                                    getString(\"search_noResults\")));\n-                        } else {\n-                            noResults.setDefaultModel(new Model<String>(\"\"));\n-                        }\n-                    }\n+    private boolean modalResult = false;\n \n-                    if (pageRecordFromSearch != null\n-                            && pageRecordToSearch != null\n-                            && totalRecordsSearch != null) {\n+    final private IModel<List<String>> schemaNames =\n+            new LoadableDetachableModel<List<String>>() {\n \n-                        //Records indexes for paginator's labels\n-                        int firstPageRecord = 1;\n-                        int lastPageRecord = paginatedSearchUsers.getRecordsInPage();\n+                @Override\n+                protected List<String> load() {\n+                    return schemaRestClient.getAllUserSchemasNames();\n+                }\n+            };\n \n-                        if (paginatedSearchUsers.getPageNumber() > 1) {\n-                            firstPageRecord = 1\n-                                    + (paginatedSearchUsers.getPageSize()\n-                                    * (paginatedSearchUsers.getPageNumber()\n-                                    - 1));\n+    final private IModel<List<String>> roleNames =\n+            new LoadableDetachableModel<List<String>>() {\n \n-                            lastPageRecord = (paginatedSearchUsers.getPageSize()\n-                                    * (paginatedSearchUsers.getPageNumber()\n-                                    - 1))\n-                                    + paginatedSearchUsers.getRecordsInPage();\n-                        }\n+                @Override\n+                protected List<String> load() {\n+                    List<RoleTO> roleTOs = roleRestClient.getAllRoles();\n \n-                        if (paginatedSearchUsers.getRecordsInPage() == 0) {\n-                            lastPageRecord = 0;\n-                            firstPageRecord = 0;\n+                    List<String> result = new ArrayList<String>(\n+                            roleTOs.size());\n+                    for (RoleTO role : roleTOs) {\n+                        result.add(role.getDisplayName());\n+                    }\n \n-                            firstPageLinkSearch.setEnabled(false);\n-                            incrementUserLinkSearch.setEnabled(false);\n-                            lastPageLinkSearch.setEnabled(false);\n-                            incrementUserLinkSearch.setEnabled(false);\n-                        }\n+                    return result;\n+                }\n+            };\n \n-                        pageRecordFromSearch.setDefaultModelObject(\n-                                String.valueOf(firstPageRecord));\n+    final private IModel<List<AttributeCond.Type>> attributeTypes =\n+            new LoadableDetachableModel<List<AttributeCond.Type>>() {\n \n-                        pageRecordToSearch.setDefaultModelObject(\n-                                String.valueOf(lastPageRecord));\n+                @Override\n+                protected List<AttributeCond.Type> load() {\n+                    return Arrays.asList(AttributeCond.Type.values());\n+                }\n+            };\n \n-                        totalRecordsSearch.setDefaultModelObject(String.valueOf(\n-                                paginatedSearchUsers.getTotalRecords()));\n+    final private IModel<List<FilterType>> filterTypes =\n+            new LoadableDetachableModel<List<FilterType>>() {\n \n-                    }\n-                    return paginatedSearchUsers.getRecords();\n-                } else {\n-                    return paginatedSearchUsers != null\n-                            && paginatedSearchUsers.getRecords() != null\n-                            ? paginatedSearchUsers.getRecords()\n-                            : Collections.emptyList();\n+                @Override\n+                protected List<FilterType> load() {\n+                    return Arrays.asList(FilterType.values());\n                 }\n-            }\n-        };\n+            };\n \n-        final PageableListView resultsView = new PageableListView<UserTO>(\n-                \"results\", resultsModel, paginatorSearchRows) {\n+    private NodeCond searchCond;\n \n-            @Override\n-            protected void populateItem(final ListItem<UserTO> item) {\n-                final UserTO userTO = item.getModelObject();\n+    public Users(final PageParameters parameters) {\n+        super(parameters);\n \n-                item.add(new Label(\"id\", String.valueOf(userTO.getId())));\n+        // Modal window for editing user attributes\n+        editModalWin = new ModalWindow(\"editModalWin\");\n+        editModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editModalWin.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);\n+        editModalWin.setInitialWidth(EDIT_MODAL_WIN_WIDTH);\n+        editModalWin.setPageMapName(\"user-edit-modal\");\n+        editModalWin.setCookieName(\"user-edit-modal\");\n+        add(editModalWin);\n+\n+        // Modal window for choosing which attributes to display in tables\n+        displayAttrsModalWin = new ModalWindow(\"displayAttrsModalWin\");\n+        displayAttrsModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        displayAttrsModalWin.setInitialHeight(DISPLAYATTRS_MODAL_WIN_HEIGHT);\n+        displayAttrsModalWin.setInitialWidth(DISPLAYATTRS_MODAL_WIN_WIDTH);\n+        displayAttrsModalWin.setPageMapName(\"user-displayAttrs-modal\");\n+        displayAttrsModalWin.setCookieName(\"user-displayAttrs-modal\");\n+        add(displayAttrsModalWin);\n+\n+        // Container for user list\n+        final WebMarkupContainer listContainer =\n+                new WebMarkupContainer(\"listContainer\");\n+        listContainer.setOutputMarkupId(true);\n+        setWindowClosedCallback(editModalWin, listContainer);\n+        setWindowClosedCallback(displayAttrsModalWin, listContainer);\n+        add(listContainer);\n+\n+        // Container for user search result\n+        final WebMarkupContainer searchResultContainer =\n+                new WebMarkupContainer(\"searchResultContainer\");\n+        searchResultContainer.setOutputMarkupId(true);\n+        setWindowClosedCallback(editModalWin, searchResultContainer);\n+        add(searchResultContainer);\n+\n+        // columns to be displayed in tables\n+        List<IColumn<UserTO>> columns = new ArrayList<IColumn<UserTO>>();\n+        columns.add(new PropertyColumn(\n+                new Model(getString(\"id\")), \"id\", \"id\"));\n+        columns.add(new PropertyColumn(\n+                new Model(getString(\"status\")), \"status\", \"status\"));\n+        columns.add(new TokenColumn(new Model(getString(\"token\")), \"token\"));\n+        for (String schemaName : prefMan.getList(getWebRequestCycle().\n+                getWebRequest(), Constants.PREF_USERS_ATTRIBUTES_VIEW)) {\n+\n+            columns.add(new UserAttrColumn(\n+                    new Model<String>(schemaName), schemaName));\n+        }\n+        columns.add(new AbstractColumn<UserTO>(new Model<String>(getString(\n+                \"edit\"))) {\n \n-                item.add(new Label(\"status\", userTO.getStatus()));\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<UserTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<UserTO> model) {\n \n-                if (userTO.getToken() != null && !userTO.getToken().isEmpty()) {\n-                    item.add(new Label(\"token\", getString(\"tokenValued\")));\n-                } else {\n-                    item.add(new Label(\"token\", getString(\"tokenNotValued\")));\n-                }\n+                Panel panel = new EditLinkPanel(componentId, model);\n+                MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n+                        xmlRolesReader.getAllAllowedRoles(\"Users\", \"read\"));\n \n-                AjaxButton editButton = new IndicatingAjaxButton(\"editLink\",\n-                        new Model(getString(\"edit\"))) {\n+                panel.add(new IndicatingAjaxLink(\"editLink\") {\n \n                     @Override\n-                    protected void onSubmit(final AjaxRequestTarget target,\n-                            final Form form) {\n-\n-                        editUserWin.setPageCreator(\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        editModalWin.setPageCreator(\n                                 new ModalWindow.PageCreator() {\n \n                                     @Override\n                                     public Page createPage() {\n-                                        return new UserModalPage(\n-                                                Users.this,\n-                                                editUserWin,\n-                                                userTO,\n-                                                false);\n+                                        return new UserModalPage(Users.this,\n+                                                editModalWin,\n+                                                model.getObject(), false);\n                                     }\n                                 });\n \n-                        editUserWin.show(target);\n+                        editModalWin.show(target);\n                     }\n-                };\n+                });\n+                cellItem.add(panel);\n+            }\n+        });\n+        columns.add(new AbstractColumn<UserTO>(new Model<String>(getString(\n+                \"delete\"))) {\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<UserTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<UserTO> model) {\n \n-                item.add(editButton);\n+                Panel panel = new DeleteLinkPanel(componentId, model);\n+                MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n+                        xmlRolesReader.getAllAllowedRoles(\"Users\", \"delete\"));\n \n-                item.add(new IndicatingAjaxLink(\"deleteLink\", new Model(\n-                        getString(\"delete\"))) {\n+                panel.add(new IndicatingDeleteOnConfirmAjaxLink(\"deleteLink\") {\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n-                        userRestClient.deleteUser(\n-                                String.valueOf(userTO.getId()));\n-\n-                        info(getString(\"operation_succeded\"));\n+                        try {\n+                            userRestClient.delete(model.getObject().getId());\n+                            info(getString(\"operation_succeded\"));\n+                        } catch (SyncopeClientCompositeErrorException scce) {\n+                            error(scce.getMessage());\n+                        }\n                         target.addComponent(feedbackPanel);\n-\n-                        target.addComponent(usersTableContainer);\n+                        target.addComponent(listContainer);\n+                        target.addComponent(searchResultContainer);\n                     }\n                 });\n+                cellItem.add(panel);\n             }\n-        };\n+        });\n \n-        searchResultsContainer.setOutputMarkupId(true);\n-        searchResultsContainer.add(resultsView);\n+        final AjaxFallbackDefaultDataTable<UserTO> listTable =\n+                new AjaxFallbackDefaultDataTable<UserTO>(\"listTable\",\n+                columns, new UserDataProvider(), paginatorRows);\n+        listContainer.add(listTable);\n \n-        /** SEARCH PAGiNATOR START */\n-        incrementUserLinkSearch = new AjaxLink(\"incrementLink\") {\n+        // create new user\n+        AjaxLink createLink = new IndicatingAjaxLink(\"createLink\") {\n \n             @Override\n-            public void onClick(AjaxRequestTarget target) {\n-                currentSearchPage++;\n-\n-                //Update pageLinks on paginator\n-                List<Integer> pageIdList = getPaginatorIndexes();\n-                pageLinksSearchView.setList(pageIdList);\n-                target.addChildren(pageLinksSearchView, AjaxLink.class);\n-\n-                target.addComponent(searchResultsContainer);\n-            }\n-        };\n-\n-        //Check if it is not null\n-        int totalSearchPages = 0;\n-        if (paginatedSearchUsers != null) {\n-            totalSearchPages = (int) Math.ceil(\n-                    paginatedSearchUsers.getTotalRecords()\n-                    / new Double(paginatedSearchUsers.getPageSize()));\n-        }\n-\n-        firstPageLinkSearch = new AjaxLink(\"firstPageLink\") {\n+            public void onClick(final AjaxRequestTarget target) {\n \n-            @Override\n-            public void onClick(AjaxRequestTarget target) {\n-                currentSearchPage = 1;\n+                editModalWin.setPageCreator(new ModalWindow.PageCreator() {\n \n-                //Update pageLinks on paginator\n-                List<Integer> pageIdList = getPaginatorSearchIndexes();\n-                pageLinksSearchView.setList(pageIdList);\n-                target.addChildren(pageLinksSearchView, AjaxLink.class);\n+                    @Override\n+                    public Page createPage() {\n+                        return new UserModalPage(Users.this, editModalWin,\n+                                new UserTO(), true);\n+                    }\n+                });\n \n-                target.addComponent(searchResultsContainer);\n+                editModalWin.show(target);\n             }\n         };\n+        MetaDataRoleAuthorizationStrategy.authorize(createLink, ENABLE,\n+                xmlRolesReader.getAllAllowedRoles(\"Users\", \"create\"));\n+        add(createLink);\n \n-        lastPageLinkSearch = new AjaxLink(\"lastPageLink\") {\n+        // select attributes to be displayed\n+        AjaxLink displayAttrsLink = new IndicatingAjaxLink(\"displayAttrsLink\") {\n \n             @Override\n-            public void onClick(AjaxRequestTarget target) {\n-                int totalPages = (int) Math.ceil(paginatedSearchUsers.getTotalRecords() / new Double(\n-                        paginatedSearchUsers.getPageSize()));\n-                currentSearchPage = totalPages;\n+            public void onClick(final AjaxRequestTarget target) {\n+\n+                displayAttrsModalWin.setPageCreator(\n+                        new ModalWindow.PageCreator() {\n \n-                //Update pageLinks on paginator\n-                List<Integer> pageIdList = getPaginatorSearchIndexes();\n-                pageLinksSearchView.setList(pageIdList);\n-                target.addChildren(pageLinksSearchView, AjaxLink.class);\n+                            @Override\n+                            public Page createPage() {\n+                                return new DisplayAttributesModalPage(\n+                                        Users.this, displayAttrsModalWin);\n+                            }\n+                        });\n \n-                target.addComponent(searchResultsContainer);\n+                displayAttrsModalWin.show(target);\n             }\n         };\n+        MetaDataRoleAuthorizationStrategy.authorize(displayAttrsLink, ENABLE,\n+                xmlRolesReader.getAllAllowedRoles(\"Users\", \"changeView\"));\n+        add(displayAttrsLink);\n \n-        decrementUserLinkSearch = new AjaxLink(\"decrementLink\") {\n+        // rows-per-page management\n+        Form paginatorForm = new Form(\"paginator\");\n+        add(paginatorForm);\n+        final DropDownChoice<Integer> rowsChooser =\n+                new DropDownChoice<Integer>(\"rowsChooser\",\n+                new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n             @Override\n-            public void onClick(AjaxRequestTarget target) {\n-                currentSearchPage--;\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequestCycle().getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_USERS_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n \n-                //Update pageLinks on paginator\n-                List<Integer> pageIdList = getPaginatorSearchIndexes();\n-                pageLinksSearchView.setList(pageIdList);\n-                target.addChildren(pageLinksSearchView, AjaxLink.class);\n+                listTable.setRowsPerPage(paginatorRows);\n \n-                target.addComponent(searchResultsContainer);\n+                target.addComponent(listContainer);\n             }\n-        };\n+        });\n+        paginatorForm.add(rowsChooser);\n \n-        if (currentSearchPage >= totalSearchPages) {\n-            incrementUserLinkSearch.setEnabled(false);\n-            lastPageLinkSearch.setEnabled(false);\n-        } else {\n-            incrementUserLinkSearch.setEnabled(true);\n-            lastPageLinkSearch.setEnabled(true);\n-        }\n+        // search form\n+        Form searchForm = new Form(\"searchForm\");\n+        add(searchForm);\n \n-        if (currentSearchPage <= 1) {\n-            decrementUserLinkSearch.setEnabled(false);\n-            firstPageLinkSearch.setEnabled(false);\n-        } else {\n-            decrementUserLinkSearch.setEnabled(true);\n-            firstPageLinkSearch.setEnabled(true);\n-        }\n+        searchForm.add(new FeedbackPanel(\"searchFeedback\").setOutputMarkupId(\n+                true));\n \n-        if (paginatedSearchUsers == null) {\n-            incrementUserLinkSearch.setEnabled(false);\n-            lastPageLinkSearch.setEnabled(false);\n-            firstPageLinkSearch.setEnabled(false);\n-            decrementUserLinkSearch.setEnabled(false);\n-        }\n+        final WebMarkupContainer searchFormContainer =\n+                new WebMarkupContainer(\"searchFormContainer\");\n+        searchFormContainer.setOutputMarkupId(true);\n+        setWindowClosedCallback(editModalWin, searchFormContainer);\n+        searchForm.add(searchFormContainer);\n \n-        searchResultsContainer.add(incrementUserLinkSearch);\n-        searchResultsContainer.add(firstPageLinkSearch);\n-        searchResultsContainer.add(lastPageLinkSearch);\n+        final List<SearchConditionWrapper> searchConditionList =\n+                new ArrayList<SearchConditionWrapper>();\n+        searchConditionList.add(new SearchConditionWrapper());\n \n-        //Records indexes for paginator's labels\n-        int firstPageRecordSearch = 1;\n-        int lastPageRecordSearch = 1;\n+        searchFormContainer.add(new SearchView(\"searchView\",\n+                searchConditionList, searchFormContainer));\n \n-        if (paginatedSearchUsers != null) {\n-            lastPageRecordSearch = paginatedSearchUsers.getRecordsInPage();\n+        AjaxButton addAndButton = new IndicatingAjaxButton(\"addAndButton\",\n+                new Model(getString(\"addAndButton\"))) {\n \n-            if (paginatedSearchUsers.getPageNumber() > 1) {\n-                firstPageRecordSearch = (paginatedSearchUsers.getPageSize()\n-                        * (paginatedSearchUsers.getPageNumber() - 1)) + 1;\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target,\n+                    final Form form) {\n \n-                lastPageRecordSearch = (paginatedSearchUsers.getPageSize()\n-                        * (paginatedSearchUsers.getPageNumber() - 1))\n-                        + paginatedSearchUsers.getRecordsInPage();\n+                SearchConditionWrapper conditionWrapper =\n+                        new SearchConditionWrapper();\n+                conditionWrapper.setOperationType(OperationType.AND);\n+                searchConditionList.add(conditionWrapper);\n+                target.addComponent(searchFormContainer);\n             }\n-        } else {\n-            firstPageRecordSearch = 0;\n-            lastPageRecordSearch = 0;\n-        }\n-\n-        searchResultsContainer.add(pageRecordFromSearch = new Label(\n-                \"pageRecordFrom\",\n-                new Model<String>(String.valueOf(firstPageRecordSearch))));\n-\n-        searchResultsContainer.add(pageRecordToSearch = new Label(\n-                \"pageRecordTo\",\n-                new Model<String>(String.valueOf(lastPageRecordSearch))));\n-\n-        if (paginatedSearchUsers != null) {\n-            searchResultsContainer.add(totalRecordsSearch = new Label(\n-                    \"totalRecords\",\n-                    new Model<String>(String.valueOf(paginatedSearchUsers.getTotalRecords()))));\n-        } else {\n-            searchResultsContainer.add(totalRecordsSearch = new Label(\n-                    \"totalRecords\",\n-                    new Model<String>(\"0\")));\n-        }\n-\n-        searchResultsContainer.add(decrementUserLinkSearch);\n-\n-        //Build pages link for paginator\n-        List<Integer> pageIdListSearch = getPaginatorSearchIndexes();\n+        };\n+        addAndButton.setDefaultFormProcessing(false);\n+        searchFormContainer.add(addAndButton);\n \n-        pageLinksSearchView = new ListView(\"navigation\", pageIdListSearch) {\n+        AjaxButton addOrButton = new IndicatingAjaxButton(\"addOrButton\",\n+                new Model(getString(\"addOrButton\"))) {\n \n             @Override\n-            protected void populateItem(final ListItem item) {\n-                final int pageId = (Integer) item.getDefaultModelObject();\n-\n-                AjaxLink pageLink = new AjaxLink(\"pageLink\") {\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n-                        currentSearchPage = pageId;\n-                        nodeCond = buildSearchExpression(searchConditionsList);\n-\n-                        LOG.debug(\"Node condition \" + nodeCond);\n-\n-                        if (nodeCond == null || !nodeCond.checkValidity()) {\n-                            error(getString(\"search_error\"));\n-                            return;\n-                        }\n-\n-                        target.addComponent(searchResultsContainer);\n-                    }\n-                };\n-\n-                pageLink.setEnabled(currentSearchPage != pageId);\n-\n-                pageLink.add(new Label(\"pageNumber\", new Model<String>(\n-                        String.valueOf(pageId))));\n+            protected void onSubmit(final AjaxRequestTarget target,\n+                    final Form form) {\n \n-                item.add(pageLink);\n+                SearchConditionWrapper conditionWrapper =\n+                        new SearchConditionWrapper();\n+                conditionWrapper.setOperationType(OperationType.OR);\n+                searchConditionList.add(conditionWrapper);\n+                target.addComponent(searchFormContainer);\n             }\n         };\n-\n-        searchResultsContainer.add(pageLinksSearchView);\n-\n-        /** SEARCH PAGiNATOR END */\n-        setWindowClosedCallback(editUserWin, searchResultsContainer);\n-\n-        form.add(new IndicatingAjaxButton(\"search\", new Model(\n+        addOrButton.setDefaultFormProcessing(false);\n+        searchFormContainer.add(addOrButton);\n+\n+        // search result\n+        final AjaxFallbackDefaultDataTable<UserTO> searchResultTable =\n+                new AjaxFallbackDefaultDataTable<UserTO>(\"searchResultTable\",\n+                columns, new UserSearchDataProvider(), searchPaginatorRows);\n+        searchResultTable.setOutputMarkupId(true);\n+        searchResultContainer.add(searchResultTable);\n+        searchForm.add(new IndicatingAjaxButton(\"search\", new Model(\n                 getString(\"search\"))) {\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target,\n-                    final Form form) {\n+                    final Form<?> form) {\n \n-                nodeCond = buildSearchExpression(searchConditionsList);\n+                searchCond = buildSearchCond(searchConditionList);\n+                LOG.debug(\"Node condition \" + searchCond);\n \n-                LOG.debug(\"Node condition \" + nodeCond);\n-\n-                if (nodeCond == null || !nodeCond.checkValidity()) {\n+                if (searchCond == null || !searchCond.checkValidity()) {\n                     error(getString(\"search_error\"));\n                     return;\n                 }\n \n-                target.addComponent(searchResultsContainer);\n+                target.addComponent(searchResultTable);\n             }\n \n             @Override\n@@ -1232,185 +427,63 @@ protected void onError(final AjaxRequestTarget target,\n             }\n         });\n \n-        add(form);\n-\n-        form.add(searchResultsContainer);\n-\n-        Form paginatorSearchForm = new Form(\"PaginatorSearchForm\");\n-\n-        final DropDownChoice rowsSearchChooser = new DropDownChoice(\n-                \"rowsSearchChooser\",\n-                new PropertyModel(this, \"paginatorSearchRows\"),\n+        // search rows-per-page management\n+        Form searchPaginatorForm = new Form(\"searchPaginator\");\n+        add(searchPaginatorForm);\n+        final DropDownChoice<Integer> searchRowsChooser =\n+                new DropDownChoice<Integer>(\"searchRowsChooser\",\n+                new PropertyModel(this, \"searchPaginatorRows\"),\n                 prefMan.getPaginatorChoices());\n-\n-        rowsSearchChooser.add(\n+        searchRowsChooser.add(\n                 new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n                     @Override\n                     protected void onUpdate(final AjaxRequestTarget target) {\n-\n                         prefMan.set(getWebRequestCycle().getWebRequest(),\n                                 getWebRequestCycle().getWebResponse(),\n                                 Constants.PREF_USERS_SEARCH_PAGINATOR_ROWS,\n-                                String.valueOf(paginatorSearchRows));\n+                                String.valueOf(searchPaginatorRows));\n \n-                        resultsView.setRowsPerPage(paginatorSearchRows);\n+                        searchResultTable.setRowsPerPage(searchPaginatorRows);\n \n-                        nodeCond = buildSearchExpression(searchConditionsList);\n-\n-                        if (nodeCond != null && nodeCond.checkValidity()) {\n-                            target.addComponent(searchResultsContainer);\n-                        }\n+                        target.addComponent(searchResultContainer);\n                     }\n                 });\n-\n-        paginatorSearchForm.add(rowsSearchChooser);\n-\n-        add(paginatorSearchForm);\n-    }\n-\n-    public PaginatedUserContainer getPaginatedUsers(int page, int size) {\n-\n-        PaginatedUserContainer paginatedResult =\n-                userRestClient.getPaginatedUser(page, size);\n-\n-        return paginatedResult;\n-    }\n-\n-    /**\n-     * Refresh paginator after page link click.\n-     */\n-    public List<Integer> getPaginatorIndexes() {\n-        int totalPages = (int) Math.ceil(paginatedUsers.getTotalRecords()\n-                / new Double(paginatedUsers.getPageSize()));\n-\n-        //Build pages link for paginator\n-        List<Integer> pageIdList = new ArrayList<Integer>();\n-\n-        int startIndex = 1;\n-\n-        if (totalPages > 10) {\n-            if (currentViewPage < 10) {\n-                startIndex = 1;\n-            } else {\n-                startIndex = currentViewPage - 2;\n-            }\n-        }\n-\n-        int endIndex = totalPages;\n-\n-        if (totalPages > 10) {\n-\n-            if (startIndex + 9 <= totalPages) {\n-                endIndex = startIndex + 9;\n-            } else {\n-                endIndex = startIndex + (totalPages - startIndex);\n-            }\n-        }\n-\n-        for (int i = startIndex; i <= endIndex; i++) {\n-            pageIdList.add(i);\n-        }\n-\n-        return pageIdList;\n-    }\n-\n-    /**\n-     * Return the user's attributes columnsList to display, ordered.\n-     * @param user instance\n-     * @return attributes columnsList to view depending the selection\n-     */\n-    public List<NameValuePair> attributesToDisplay(final UserTO user) {\n-        List<NameValuePair> attrList = new ArrayList<NameValuePair>();\n-\n-        columnList = prefMan.getList(getWebRequestCycle().getWebRequest(),\n-                Constants.PREF_USERS_ATTRIBUTES_VIEW);\n-        Collections.sort(columnList);\n-\n-        NameValuePair attributeWrapper = null;\n-\n-        boolean found = false;\n-        for (String name : columnList) {\n-            for (AttributeTO attribute : user.getAttributes()) {\n-                if (name.equals(attribute.getSchema()) && !found) {\n-                    attributeWrapper = new NameValuePair();\n-                    attributeWrapper.setName(attribute.getSchema());\n-                    for (String value : attribute.getValues()) {\n-                        attributeWrapper.setValue(value);\n-                        found = true;\n-                    }\n-                    attrList.add(attributeWrapper);\n-                }\n-            }\n-            //case the attribute's value is blank\n-            if (!found) {\n-                attributeWrapper = new NameValuePair();\n-                attributeWrapper.setName(name);\n-                attributeWrapper.setValue(\"\");\n-\n-                attrList.add(attributeWrapper);\n-            } else {\n-                found = false;\n-            }\n-        }\n-\n-        return attrList;\n+        searchPaginatorForm.add(searchRowsChooser);\n     }\n \n-    /**\n-     * Set a WindowClosedCallback for a ModalWindow instance.\n-     * @param window\n-     * @param usersTableSearchContainer\n-     */\n-    public final void setWindowClosedCallback(final ModalWindow window,\n+    private void setWindowClosedCallback(final ModalWindow window,\n             final WebMarkupContainer container) {\n \n         window.setWindowClosedCallback(\n                 new ModalWindow.WindowClosedCallback() {\n \n-                    public void onClose(AjaxRequestTarget target) {\n+                    @Override\n+                    public void onClose(final AjaxRequestTarget target) {\n                         target.addComponent(container);\n                         target.addComponent(feedbackPanel);\n \n-                        if (operationResult) {\n+                        if (modalResult) {\n                             info(getString(\"operation_succeded\"));\n-                            operationResult = false;\n+                            modalResult = false;\n                         }\n                     }\n                 });\n     }\n \n-    public boolean isOperationResult() {\n-        return operationResult;\n-    }\n-\n-    public void setOperationResult(boolean operationResult) {\n-        this.operationResult = operationResult;\n+    public void setModalResult(final boolean modalResult) {\n+        this.modalResult = modalResult;\n     }\n \n-    /**\n-     * Init search conditions list.\n-     */\n-    private void setupSearchConditionsList() {\n-        searchConditionsList = new ArrayList<SearchConditionWrapper>();\n-        searchConditionsList.add(new SearchConditionWrapper());\n-    }\n-\n-    /**\n-     * Build recursively search users expression from searchConditionsList.\n-     * @return NodeCond\n-     */\n-    public NodeCond buildSearchExpression(\n+    private NodeCond buildSearchCond(\n             final List<SearchConditionWrapper> conditions) {\n \n-        SearchConditionWrapper searchConditionWrapper = conditions.iterator().\n-                next();\n+        SearchConditionWrapper searchConditionWrapper =\n+                conditions.iterator().next();\n \n         AttributeCond attributeCond = null;\n         MembershipCond membershipCond = null;\n-        if (searchConditionWrapper.getFilterType()\n-                == SearchConditionWrapper.FilterType.ATTRIBUTE) {\n-\n+        if (searchConditionWrapper.getFilterType() == FilterType.ATTRIBUTE) {\n             attributeCond = new AttributeCond();\n             attributeCond.setSchema(searchConditionWrapper.getFilterName());\n             attributeCond.setType(searchConditionWrapper.getType());\n@@ -1451,21 +524,21 @@ public NodeCond buildSearchExpression(\n                     if (attributeCond != null) {\n                         return NodeCond.getAndCond(\n                                 NodeCond.getLeafCond(attributeCond),\n-                                buildSearchExpression(subList));\n+                                buildSearchCond(subList));\n                     } else {\n                         return NodeCond.getAndCond(\n                                 NodeCond.getLeafCond(membershipCond),\n-                                buildSearchExpression(subList));\n+                                buildSearchCond(subList));\n                     }\n                 } else {\n                     if (attributeCond != null) {\n                         return NodeCond.getAndCond(\n                                 NodeCond.getLeafCond(attributeCond),\n-                                buildSearchExpression(subList));\n+                                buildSearchCond(subList));\n                     } else {\n                         return NodeCond.getAndCond(\n                                 NodeCond.getLeafCond(membershipCond),\n-                                buildSearchExpression(subList));\n+                                buildSearchCond(subList));\n                     }\n                 }\n             } else {\n@@ -1474,67 +547,284 @@ public NodeCond buildSearchExpression(\n                     if (attributeCond != null) {\n                         return NodeCond.getOrCond(\n                                 NodeCond.getLeafCond(attributeCond),\n-                                buildSearchExpression(subList));\n+                                buildSearchCond(subList));\n                     } else {\n                         return NodeCond.getOrCond(\n                                 NodeCond.getLeafCond(membershipCond),\n-                                buildSearchExpression(subList));\n+                                buildSearchCond(subList));\n                     }\n                 } else {\n                     if (attributeCond != null) {\n                         return NodeCond.getOrCond(\n                                 NodeCond.getLeafCond(attributeCond),\n-                                buildSearchExpression(subList));\n+                                buildSearchCond(subList));\n                     } else {\n                         return NodeCond.getOrCond(\n                                 NodeCond.getLeafCond(membershipCond),\n-                                buildSearchExpression(subList));\n+                                buildSearchCond(subList));\n                     }\n                 }\n             }\n         }\n     }\n \n-    /**\n-     * Refresh paginator search after page link click.\n-     */\n-    public List<Integer> getPaginatorSearchIndexes() {\n-        int totalPages;\n+    private class UserDataProvider extends SortableDataProvider<UserTO> {\n \n-        if (paginatedSearchUsers != null) {\n-            totalPages = (int) Math.ceil(paginatedSearchUsers.getTotalRecords()\n-                    / new Double(paginatedSearchUsers.getPageSize()));\n-        } else {\n-            totalPages = 0;\n+        private SortableDataProviderComparator<UserTO> comparator;\n+\n+        public UserDataProvider() {\n+            super();\n+            //Default sorting\n+            setSort(\"id\", true);\n+            comparator = new SortableDataProviderComparator<UserTO>(getSort());\n+        }\n+\n+        @Override\n+        public Iterator<UserTO> iterator(final int first, final int count) {\n+            List<UserTO> users = userRestClient.list(\n+                    (first / paginatorRows) + 1, count);\n+            Collections.sort(users, comparator);\n+            return users.iterator();\n+        }\n+\n+        @Override\n+        public int size() {\n+            return userRestClient.count();\n+        }\n+\n+        @Override\n+        public IModel<UserTO> model(final UserTO object) {\n+            return new CompoundPropertyModel<UserTO>(object);\n+        }\n+    }\n+\n+    private class UserSearchDataProvider extends SortableDataProvider<UserTO> {\n+\n+        private SortableDataProviderComparator<UserTO> comparator;\n+\n+        public UserSearchDataProvider() {\n+            super();\n+            //Default sorting\n+            setSort(\"id\", true);\n+            comparator = new SortableDataProviderComparator<UserTO>(getSort());\n         }\n \n-        //Build pages link for paginator\n-        List<Integer> pageIdList = new ArrayList<Integer>();\n+        @Override\n+        public Iterator<UserTO> iterator(final int first, final int count) {\n+            List<UserTO> users;\n+            if (searchCond == null) {\n+                users = Collections.EMPTY_LIST;\n+            } else {\n+                users = userRestClient.search(searchCond,\n+                        (first / paginatorRows) + 1, count);\n+                Collections.sort(users, comparator);\n+            }\n+\n+            return users.iterator();\n+        }\n+\n+        @Override\n+        public int size() {\n+            return searchCond == null\n+                    ? 0 : userRestClient.searchCount(searchCond);\n+        }\n+\n+        @Override\n+        public IModel<UserTO> model(final UserTO object) {\n+            return new CompoundPropertyModel<UserTO>(object);\n+        }\n+    }\n+\n+    private class TokenColumn extends AbstractColumn<UserTO> {\n+\n+        public TokenColumn(final IModel<String> displayModel,\n+                final String sortProperty) {\n+\n+            super(displayModel, sortProperty);\n+        }\n \n-        int startIndex = 1;\n+        @Override\n+        public void populateItem(final Item<ICellPopulator<UserTO>> cellItem,\n+                final String componentId,\n+                final IModel<UserTO> rowModel) {\n \n-        if (totalPages > 10) {\n-            if (currentSearchPage < 10) {\n-                startIndex = 1;\n+            if (rowModel.getObject().getToken() != null\n+                    && !rowModel.getObject().getToken().isEmpty()) {\n+                cellItem.add(\n+                        new Label(componentId, getString(\"tokenValued\")));\n             } else {\n-                startIndex = currentSearchPage - 2;\n+                cellItem.add(\n+                        new Label(componentId, getString(\"tokenNotValued\")));\n             }\n         }\n+    }\n+\n+    private static class UserAttrColumn extends AbstractColumn<UserTO> {\n+\n+        private final String schemaName;\n+\n+        public UserAttrColumn(final IModel<String> displayModel,\n+                final String schemaName) {\n+\n+            super(displayModel);\n+            this.schemaName = schemaName;\n+        }\n+\n+        @Override\n+        public void populateItem(\n+                final Item<ICellPopulator<UserTO>> cellItem,\n+                final String componentId,\n+                final IModel<UserTO> rowModel) {\n \n-        int endIndex = totalPages;\n+            Label label;\n \n-        if (totalPages > 10) {\n-            if (startIndex + 9 <= totalPages) {\n-                endIndex = startIndex + 9;\n+            List<String> values =\n+                    rowModel.getObject().getAttributeMap().get(schemaName);\n+            if (values == null || values.isEmpty()) {\n+                label = new Label(componentId, \"\");\n             } else {\n-                endIndex = startIndex + (totalPages - startIndex);\n+                if (values.size() == 1) {\n+                    label = new Label(componentId, values.iterator().next());\n+                } else {\n+                    label = new Label(componentId, values.toString());\n+                }\n             }\n+\n+            cellItem.add(label);\n         }\n+    }\n \n-        for (int i = startIndex; i <= endIndex; i++) {\n-            pageIdList.add(i);\n+    private class SearchView extends ListView<SearchConditionWrapper> {\n+\n+        final private WebMarkupContainer searchFormContainer;\n+\n+        public SearchView(final String id,\n+                final List<? extends SearchConditionWrapper> list,\n+                final WebMarkupContainer searchFormContainer) {\n+\n+            super(id, list);\n+            this.searchFormContainer = searchFormContainer;\n         }\n \n-        return pageIdList;\n+        @Override\n+        protected void populateItem(\n+                final ListItem<SearchConditionWrapper> item) {\n+\n+            final SearchConditionWrapper searchCondition =\n+                    item.getModelObject();\n+\n+            if (item.getIndex() == 0) {\n+                item.add(new Label(\"operationType\", \"\"));\n+            } else {\n+                item.add(new Label(\"operationType\",\n+                        searchCondition.getOperationType().\n+                        toString()));\n+            }\n+\n+            item.add(new CheckBox(\"notOperator\",\n+                    new PropertyModel(searchCondition,\n+                    \"notOperator\")));\n+\n+            final DropDownChoice<String> filterNameChooser =\n+                    new DropDownChoice<String>(\"filterName\",\n+                    new PropertyModel<String>(\n+                    searchCondition, \"filterName\"), (IModel) null);\n+            filterNameChooser.setOutputMarkupId(true);\n+\n+            if (searchCondition.getFilterType() == null) {\n+                filterNameChooser.setChoices(\n+                        Collections.EMPTY_LIST);\n+            } else if (searchCondition.getFilterType()\n+                    == FilterType.ATTRIBUTE) {\n+\n+                filterNameChooser.setChoices(schemaNames);\n+            } else {\n+                filterNameChooser.setChoices(roleNames);\n+            }\n+\n+            filterNameChooser.setRequired(true);\n+\n+            item.add(filterNameChooser);\n+\n+            final DropDownChoice<AttributeCond.Type> type =\n+                    new DropDownChoice<AttributeCond.Type>(\n+                    \"type\", new PropertyModel<AttributeCond.Type>(\n+                    searchCondition, \"type\"),\n+                    attributeTypes);\n+            item.add(type);\n+\n+            final TextField<String> filterValue =\n+                    new TextField<String>(\"filterValue\",\n+                    new PropertyModel<String>(searchCondition,\n+                    \"filterValue\"));\n+            item.add(filterValue);\n+\n+            if (searchCondition.getFilterType()\n+                    == FilterType.MEMBERSHIP) {\n+\n+                type.setEnabled(false);\n+                type.setRequired(false);\n+                type.setModelObject(null);\n+\n+                filterValue.setEnabled(false);\n+                filterValue.setModelObject(\"\");\n+            } else {\n+                if (!type.isEnabled()) {\n+                    type.setEnabled(true);\n+                    type.setRequired(true);\n+                }\n+                if (!filterValue.isEnabled()) {\n+                    filterValue.setEnabled(true);\n+                }\n+            }\n+\n+            DropDownChoice<FilterType> filterTypeChooser =\n+                    new DropDownChoice<FilterType>(\"filterType\",\n+                    new PropertyModel<FilterType>(searchCondition,\n+                    \"filterType\"), filterTypes);\n+            filterTypeChooser.setOutputMarkupId(true);\n+\n+            filterTypeChooser.add(\n+                    new AjaxFormComponentUpdatingBehavior(\n+                    \"onchange\") {\n+\n+                        @Override\n+                        protected void onUpdate(\n+                                final AjaxRequestTarget target) {\n+\n+                            filterNameChooser.setChoices(searchCondition.\n+                                    getFilterType() == FilterType.ATTRIBUTE\n+                                    ? schemaNames : roleNames);\n+                            target.addComponent(filterNameChooser);\n+                            target.addComponent(searchFormContainer);\n+                        }\n+                    });\n+\n+            filterTypeChooser.setRequired(true);\n+\n+            item.add(filterTypeChooser);\n+\n+            AjaxButton dropButton = new IndicatingAjaxButton(\n+                    \"dropButton\", new Model(getString(\"dropButton\"))) {\n+\n+                @Override\n+                protected void onSubmit(\n+                        final AjaxRequestTarget target,\n+                        final Form form) {\n+\n+                    getList().remove(\n+                            Integer.valueOf(getParent().getId()).intValue());\n+                    target.addComponent(searchFormContainer);\n+                }\n+            };\n+\n+            dropButton.setDefaultFormProcessing(false);\n+\n+            if (item.getIndex() == 0) {\n+                dropButton.setVisible(false);\n+            }\n+\n+            item.add(dropButton);\n+        }\n     }\n }"},{"sha":"15451739c68c10724914179865c3795f5b226631","filename":"console/src/main/java/org/syncope/console/rest/TaskRestClient.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -34,22 +34,22 @@ public Integer count() {\n \n     /**\n      * Get all stored tasks.\n-     * @param first index to start from\n-     * @param count maximum number to fetch\n+     * @param page pagination element to fetch\n+     * @param size maximum number to fetch\n      * @return list of TaskTO objects\n      */\n-    public List<TaskTO> list(final int first, final int count) {\n+    public List<TaskTO> list(final int page, final int size) {\n         return Arrays.asList(restTemplate.getForObject(\n                 baseURL + \"task/list/{page}/{size}.json\",\n-                TaskTO[].class, first, count));\n+                TaskTO[].class, page, size));\n     }\n \n     /**\n      * Load an existing task.\n      * @param taskId task to read\n      * @return TaskTO object if the configuration exists, null otherwise\n      */\n-    public TaskTO readTask(final String taskId) {\n+    public TaskTO read(final String taskId) {\n         TaskTO taskTO = null;\n         try {\n             taskTO = restTemplate.getForObject(\n@@ -77,7 +77,7 @@ public List<TaskExecutionTO> listExecutions() {\n      * Delete specified task.\n      * @param taskId task to delete\n      */\n-    public void deleteTask(final Long taskId) {\n+    public void delete(final Long taskId) {\n         restTemplate.delete(\n                 baseURL + \"task/delete/{taskId}\", taskId);\n     }\n@@ -86,7 +86,7 @@ public void deleteTask(final Long taskId) {\n      * Start execution for the specified TaskTO.\n      * @param taskId task id\n      */\n-    public void startTaskExecution(final Long taskId) {\n+    public void startExecution(final Long taskId) {\n         restTemplate.getForObject(\n                 baseURL + \"task/execute/{taskId}\",\n                 TaskExecutionTO.class, taskId);\n@@ -96,7 +96,7 @@ public void startTaskExecution(final Long taskId) {\n      * Delete specified task's execution.\n      * @param taskExecId task execution id\n      */\n-    public void deleteTaskExecution(final Long taskExecId) {\n+    public void deleteExecution(final Long taskExecId) {\n         restTemplate.delete(baseURL\n                 + \"task/execution/delete/{execId}\", taskExecId);\n     }"},{"sha":"4f9927d20a6ed6b210d658a798130093da1f7a64","filename":"console/src/main/java/org/syncope/console/rest/UserRestClient.java","status":"modified","additions":32,"deletions":36,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -19,7 +19,6 @@\n import org.springframework.stereotype.Component;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n \n@@ -29,23 +28,29 @@\n @Component\n public class UserRestClient extends AbstractBaseRestClient {\n \n-    public List<UserTO> getAllUsers() {\n-        List<UserTO> users = null;\n-        try {\n-            users = Arrays.asList(restTemplate.getForObject(\n-                    baseURL + \"user/list.json\", UserTO[].class));\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"While listing all users\", e);\n-        }\n-        return users;\n+    public Integer count() {\n+        return restTemplate.getForObject(baseURL + \"user/count.json\",\n+                Integer.class);\n+    }\n+\n+    /**\n+     * Get all stored users.\n+     * @param page pagination element to fetch\n+     * @param size maximum number to fetch\n+     * @return list of TaskTO objects\n+     */\n+    public List<UserTO> list(final int page, final int size) {\n+        return Arrays.asList(restTemplate.getForObject(\n+                baseURL + \"user/list/{page}/{size}.json\",\n+                UserTO[].class, page, size));\n     }\n \n     /**\n      * Create a new user and start off the workflow.\n      * @param userTO instance\n      * @throws SyncopeClientCompositeErrorException\n      */\n-    public void createUser(final UserTO userTO)\n+    public void create(final UserTO userTO)\n             throws SyncopeClientCompositeErrorException {\n \n         restTemplate.postForObject(baseURL\n@@ -57,62 +62,53 @@ public void createUser(final UserTO userTO)\n      * @param userTO\n      * @return true is the opertion ends succesfully, false otherwise\n      */\n-    public void updateUser(UserMod userModTO)\n+    public void update(UserMod userModTO)\n             throws SyncopeClientCompositeErrorException {\n \n         restTemplate.postForObject(baseURL + \"user/update\",\n                 userModTO, UserTO.class);\n     }\n \n-    public void deleteUser(String id) {\n-        try {\n-            restTemplate.delete(baseURL\n-                    + \"user/delete/{userId}\", new Integer(id));\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"While deleting a user\", e);\n-        }\n+    public void delete(Long id) {\n+        restTemplate.delete(baseURL + \"user/delete/{userId}\", id);\n     }\n \n-    public UserTO getUser(String id) {\n+    public UserTO read(String id) {\n         UserTO userTO = null;\n         try {\n             userTO = restTemplate.getForObject(\n-                    baseURL\n-                    + \"user/read/{userId}.json\",\n+                    baseURL + \"user/read/{userId}.json\",\n                     UserTO.class, id);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a user\", e);\n         }\n         return userTO;\n     }\n \n+    public Integer searchCount(final NodeCond searchCond) {\n+        return restTemplate.postForObject(\n+                baseURL + \"user/search/count.json\", searchCond, Integer.class);\n+    }\n+\n     /**\n      * Search an user by its schema values.\n      * @param userTO\n      * @return UserTOs\n      */\n-    public List<UserTO> searchUsers(NodeCond nodeSearchCondition)\n+    public List<UserTO> search(final NodeCond searchCond)\n             throws SyncopeClientCompositeErrorException {\n \n         return Arrays.asList(restTemplate.postForObject(\n                 baseURL + \"user/search\",\n-                nodeSearchCondition, UserTO[].class));\n+                searchCond, UserTO[].class));\n     }\n \n-    public PaginatedUserContainer paginatedSearchUser(NodeCond nodeSearchCond,\n-            int page, int size)\n+    public List<UserTO> search(final NodeCond searchCond,\n+            final int page, final int size)\n             throws SyncopeClientCompositeErrorException {\n \n-        return restTemplate.postForObject(\n+        return Arrays.asList(restTemplate.postForObject(\n                 baseURL + \"user/search/{page}/{size}\",\n-                nodeSearchCond, PaginatedUserContainer.class, page, size);\n-    }\n-\n-    public PaginatedUserContainer getPaginatedUser(int page, int size)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        return restTemplate.getForObject(\n-                baseURL + \"user/list/{page}/{size}\",\n-                PaginatedUserContainer.class, page, size);\n+                searchCond, UserTO[].class, page, size));\n     }\n }"},{"sha":"33ad992f6fd7ceb244d3b7ba611c6f1d0e25b430","filename":"console/src/main/java/org/syncope/console/wicket/ajax/markup/html/IndicatingDeleteOnConfirmAjaxLink.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FIndicatingDeleteOnConfirmAjaxLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FIndicatingDeleteOnConfirmAjaxLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FIndicatingDeleteOnConfirmAjaxLink.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -0,0 +1,50 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.wicket.ajax.markup.html;\n+\n+import org.apache.wicket.ajax.IAjaxCallDecorator;\n+import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.model.IModel;\n+\n+public abstract class IndicatingDeleteOnConfirmAjaxLink<T>\n+        extends IndicatingAjaxLink<T> {\n+\n+    public IndicatingDeleteOnConfirmAjaxLink(final String id,\n+            final IModel<T> model) {\n+\n+        super(id, model);\n+    }\n+\n+    public IndicatingDeleteOnConfirmAjaxLink(final String id) {\n+        super(id);\n+    }\n+\n+    @Override\n+    protected IAjaxCallDecorator getAjaxCallDecorator() {\n+        return new AjaxPreprocessingCallDecorator(\n+                super.getAjaxCallDecorator()) {\n+\n+            @Override\n+            public CharSequence preDecorateScript(\n+                    final CharSequence script) {\n+\n+                return \"if (confirm('\"\n+                        + getString(\"confirmDelete\") + \"'))\"\n+                        + \"{\" + script + \"}\";\n+            }\n+        };\n+    }\n+}"},{"sha":"ae52228c712b508edb311748efbfa6a11c7331a9","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/DeleteLinkPanel.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDeleteLinkPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDeleteLinkPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDeleteLinkPanel.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -17,6 +17,10 @@\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n \n+/**\n+ * This empty class must exist because there not seems to be altrernative to\n+ * provide specialized HTML for delete links.\n+ */\n public class DeleteLinkPanel extends Panel {\n \n     public DeleteLinkPanel(final String componentId, final IModel<?> model) {"},{"sha":"c5d8e4cf4511e29cc4b3f77b61f078a975477ccf","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/EditLinkPanel.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FEditLinkPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FEditLinkPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FEditLinkPanel.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -17,6 +17,10 @@\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n \n+/**\n+ * This empty class must exist because there not seems to be altrernative to\n+ * provide specialized HTML for edit links.\n+ */\n public class EditLinkPanel extends Panel {\n \n     public EditLinkPanel(final String componentId, final IModel<?> model) {"},{"sha":"0cfb52760acf903f90041215cc5d304cacca9655","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/LinkPanel.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FLinkPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FLinkPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FLinkPanel.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -16,6 +16,10 @@\n \n import org.apache.wicket.markup.html.panel.Panel;\n \n+/**\n+ * This empty class must exist because there not seems to be altrernative to\n+ * provide specialized HTML for links.\n+ */\n public class LinkPanel extends Panel {\n \n     public LinkPanel(final String id) {"},{"sha":"ff0339d51353497a25e1a7060da0532e19d6882a","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/tree/NodeEditablePanel.java","status":"modified","additions":4,"deletions":20,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FNodeEditablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FNodeEditablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FNodeEditablePanel.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -16,8 +16,6 @@\n \n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.IAjaxCallDecorator;\n-import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n@@ -35,6 +33,7 @@\n import org.syncope.console.pages.RoleModalPage;\n import org.syncope.console.pages.Roles;\n import org.syncope.console.rest.RoleRestClient;\n+import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n \n /**\n  * Panel for a node element form.\n@@ -117,10 +116,11 @@ public Page createPage() {\n \n             fragment.add(updateRoleLink);\n \n-            AjaxLink dropRoleLink = new IndicatingAjaxLink(\"dropRoleLink\") {\n+            AjaxLink dropRoleLink = new IndicatingDeleteOnConfirmAjaxLink(\n+                    \"dropRoleLink\") {\n \n                 @Override\n-                public void onClick(AjaxRequestTarget target) {\n+                public void onClick(final AjaxRequestTarget target) {\n                     try {\n                         restClient.deleteRole(idRole);\n                         getSession().info(getString(\"operation_succeded\"));\n@@ -131,22 +131,6 @@ public void onClick(AjaxRequestTarget target) {\n \n                     setResponsePage(new Roles(null));\n                 }\n-\n-                @Override\n-                protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                    return new AjaxPreprocessingCallDecorator(super.\n-                            getAjaxCallDecorator()) {\n-\n-                        @Override\n-                        public CharSequence preDecorateScript(\n-                                CharSequence script) {\n-\n-                            return \"if (confirm('\"\n-                                    + getString(\"confirmDelete\") + \"'))\"\n-                                    + \"{\" + script + \"}\";\n-                        }\n-                    };\n-                }\n             };\n \n             String allowedDropRoles = xmlRolesReader.getAllAllowedRoles("},{"sha":"7dbbe231d97a4a592ff753a87b3a86e88c803561","filename":"console/src/main/resources/org/syncope/console/pages/Users.html","status":"modified","additions":43,"deletions":207,"changes":250,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.html?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -22,150 +22,66 @@\n             color: red;\n             border:0 none !important;\n             list-style-type: disc;\n-            padding: 0px;\n-            margin: 0px;\n+            padding: 5px;\n+            margin: 5px;\n         }\n \n         .feedbackPanelERROR span {\n             padding: 0px;\n             margin: 0px;\n         }\n-\n-        #pageNavigator a:visited {\n-            text-decoration: none;\n-        }\n-\n-        #pageNavigator a:hover {\n-            text-decoration: underline;\n-        }\n     </style>\n </wicket:head>\n <wicket:extend>\n \n     <div id=\"tabs\">\n         <ul>\n-            <li  class=\"tabs-selected\"><a href=\"#tabs-1\"><span><wicket:message key=\"tab1\"/></span></a></li>\n-            <li><a href=\"#tabs-2\"><span><wicket:message key=\"tab2\"/></span></a></li>\n+            <li class=\"tabs-selected\">\n+                <a href=\"#tabs-1\">\n+                    <span><wicket:message key=\"tab1\"/>\n+                    </span>\n+                </a>\n+            </li>\n+            <li>\n+                <a href=\"#tabs-2\">\n+                    <span><wicket:message key=\"tab2\"/>\n+                    </span>\n+                </a>\n+            </li>\n         </ul>\n         <div id=\"tabs-1\">\n-\n             <div id=\"users-contain\" class=\"ui-widget\" style=\"width:auto\">\n-                <span wicket:id=\"usersTableContainer\">\n-                    <span id=\"pageNavigator\" style=\"font-style:oblique\">\n-                        <span style=\"float:left\">\n-                            <wicket:message key=\"showingFrom\"/>\n-                            <span wicket:id=\"pageRecordFrom\"/>\n-                            <wicket:message key=\"showingTo\"/>\n-                            <span wicket:id=\"pageRecordTo\"/>\n-                            <wicket:message key=\"showingOf\"/>\n-                            <span wicket:id=\"totalRecords\"/>\n-                        </span>\n-\n-                        <span style=\"float:right\">\n-                            <a wicket:id=\"firstPageLink\" style=\"text-decoration:none\">\n-                                <span style=\"text-decoration:underline\">&lt;&lt;</span>\n-                            </a>\n-                            <a wicket:id=\"decrementLink\" style=\"text-decoration:none\">\n-                                <span style=\"text-decoration:underline\">&lt;</span>\n-                            </a>\n-\n-                            <span wicket:id=\"navigation\">\n-                                <a wicket:id=\"pageLink\" style=\"text-decoration:none\">\n-                                    <span style=\"text-decoration:underline\"\n-                                          wicket:id=\"pageNumber\"/>\n-                                </a>\n-                            </span>\n-\n-                            <a wicket:id=\"incrementLink\" style=\"text-decoration:none\">\n-                                <span style=\"text-decoration:underline\">&gt;</span>\n-                            </a>\n-                            <a wicket:id=\"lastPageLink\" style=\"text-decoration:none\">\n-                                <span style=\"text-decoration:underline\">&gt;&gt;</span>\n-                            </a>\n-                        </span>\n-                    </span>\n-\n-                    <span>\n-                        &nbsp;\n-                    </span>\n-\n-                    <table id=\"users\" class=\"ui-widget ui-widget-content table-hover\">\n-                        <thead>\n-                            <tr class=\"ui-widget-header\">\n-                                <th><wicket:message key=\"id\"/></th>\n-                        <th><wicket:message key=\"status\"/></th>\n-                        <th><wicket:message key=\"token\"/></th>\n-                        <th wicket:id=\"usersSchema\">\n-                            <span wicket:id=\"attribute\"/>\n-                        </th>\n-                        <th><wicket:message key=\"edit\"/></th>\n-                        <th><wicket:message key=\"delete\"/></th>\n-                        </tr>\n-                        </thead>\n-                        <tbody>\n-                            <tr wicket:id=\"results\">\n-                                <td>\n-                                    <span wicket:id=\"id\">\n-                                        [id]\n-                                    </span>\n-                                </td>\n-                                <td>\n-                                    <span wicket:id=\"status\">\n-                                        [status]\n-                                    </span>\n-                                </td>\n-                                <td>\n-                                    <span wicket:id=\"token\">\n-                                        [token]\n-                                    </span>\n-                                </td>\n-                                <td wicket:id=\"selectedAttributes\">\n-                                    <span wicket:id=\"name\">\n-                                        [selected attribute]\n-                                    </span>\n-                                </td>\n-                                <td>\n-                                    <a href=\"#\" wicket:id=\"editLink\">\n-                                        <wicket:message key=\"edit\"/>\n-                                    </a>\n-                                </td>\n-                                <td>\n-                                    <a href=\"#\" wicket:id=\"deleteLink\">\n-                                        <wicket:message key=\"delete\"/>\n-                                    </a>\n-                                </td>\n-                            </tr>\n-                        </tbody>\n-                    </table>\n+                <span wicket:id=\"listContainer\">\n+                    <table class=\"ui-widget ui-widget-content table-hover\"\n+                           wicket:id=\"listTable\"/>\n                 </span>\n \n                 <span style=\"float:right\">\n-                    <form wicket:id=\"PaginatorForm\" style=\"display:inline\">\n+                    <form wicket:id=\"paginator\" style=\"display:inline\">\n                         <label><wicket:message key=\"displayRows\"/></label>\n                         <select class=\"text ui-widget-content ui-corner-all\"\n                                 wicket:id=\"rowsChooser\"/>\n                     </form>\n                 </span>\n             </div>\n \n-            <div wicket:id=\"createUserWin\">[Show modal window for creating user]</div>\n-            <div wicket:id=\"editUserWin\">[Show modal window for editing user]</div>\n-            <div wicket:id=\"changeAttributesViewWin\">[Show modal window for editing user]</div>\n+            <div wicket:id=\"editModalWin\">\n+            </div>\n+            <div wicket:id=\"displayAttrsModalWin\">\n+            </div>\n \n             <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n-               wicket:id=\"createUserLink\">\n+               wicket:id=\"createLink\">\n                 <wicket:message key=\"create_user\"/>\n             </a>\n-\n             <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n-               wicket:id=\"changeAttributesViewLink\">\n+               wicket:id=\"displayAttrsLink\">\n                 <wicket:message key=\"change_attributes\"/>\n             </a>\n-\n         </div>\n \n         <div id=\"tabs-2\">\n-            <form wicket:id=\"UserSearchForm\">\n+            <form wicket:id=\"searchForm\">\n                 <div wicket:id=\"searchFeedback\"/>\n                 <div id=\"searchBox\">\n                     <h1><wicket:message key=\"search_title\"/></h1>\n@@ -181,7 +97,7 @@ <h1><wicket:message key=\"search_title\"/></h1>\n                         <th></th>\n                         </tr>\n                         </thead>\n-                        <tbody wicket:id=\"container\">\n+                        <tbody wicket:id=\"searchFormContainer\">\n                             <tr wicket:id=\"searchView\">\n                                 <td>\n                                     <b><span wicket:id=\"operationType\"/></b>\n@@ -226,105 +142,25 @@ <h1><wicket:message key=\"search_title\"/></h1>\n \n                 <input type=\"button\" class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n                        wicket:id=\"search\"/>\n+            </form>\n \n+            <div id=\"users-contain\" class=\"ui-widget\" style=\"width:auto\">\n+                <img src=\"img/search.png\" alt=\"search\"/>\n+                <h1 style=\"display:inline\"><wicket:message key=\"search_results_title\"/></h1>\n+                <span wicket:id=\"searchResultContainer\">\n+                    <table class=\"ui-widget ui-widget-content table-hover\"\n+                           wicket:id=\"searchResultTable\"/>\n+                </span>\n \n-                <!-- SEARCH RESULTS -->\n-                <div class=\"ui-widget\" id=\"users-contain\">\n-                    <p>\n-                        &nbsp;\n-                    </p>\n-                    <img src=\"img/search.png\" alt=\"search\"/>\n-                    <h1 style=\"display:inline\"><wicket:message key=\"search_results_title\"/></h1>\n-                    <div> &nbsp;</div>\n-                    <span wicket:id=\"searchResultsContainer\">\n-                        <div id=\"pageNavigator\" style=\"font-style:oblique\">\n-                            <span style=\"float:left\">\n-                                <wicket:message key=\"showingFrom\"/>\n-                                <span wicket:id=\"pageRecordFrom\"/>\n-                                <wicket:message key=\"showingTo\"/>\n-                                <span wicket:id=\"pageRecordTo\"/>\n-                                <wicket:message key=\"showingOf\"/>\n-                                <span wicket:id=\"totalRecords\"/>\n-                            </span>\n-\n-                            <span style=\"float:right\">\n-                                <a wicket:id=\"firstPageLink\" style=\"text-decoration:none\">\n-                                    <span style=\"text-decoration:underline\">&lt;&lt;</span>\n-                                </a>\n-                                <a wicket:id=\"decrementLink\" style=\"text-decoration:none\">\n-                                    <span style=\"text-decoration:underline\">&lt;</span>\n-                                </a>\n-\n-                                <span wicket:id=\"navigation\">\n-                                    <a wicket:id=\"pageLink\" style=\"text-decoration:none\">\n-                                        <span style=\"text-decoration:underline\"\n-                                              wicket:id=\"pageNumber\"/>\n-                                    </a>\n-                                </span>\n-\n-                                <a wicket:id=\"incrementLink\" style=\"text-decoration:none\">\n-                                    <span style=\"text-decoration:underline\">&gt;</span>\n-                                </a>\n-                                <a wicket:id=\"lastPageLink\" style=\"text-decoration:none\">\n-                                    <span style=\"text-decoration:underline\">&gt;&gt;</span>\n-                                </a>\n-                            </span>\n-                        </div>\n-\n-                        <div> &nbsp;</div>\n-\n-                        <table id=\"search-users\" class=\"ui-widget ui-widget-content table-hover\">\n-                            <thead>\n-                                <tr class=\"ui-widget-header\">\n-                                    <th><wicket:message key=\"id\"/></th>\n-                            <th><wicket:message key=\"status\"/></th>\n-                            <th><wicket:message key=\"token\"/></th>\n-                            <th><wicket:message key=\"edit\"/></th>\n-                            <th><wicket:message key=\"delete\"/></th>\n-                            </tr>\n-                            </thead>\n-                            <tbody>\n-                                <tr wicket:id=\"results\">\n-                                    <td>\n-                                        <span wicket:id=\"id\">[id]</span>\n-                                    </td>\n-                                    <td>\n-                                        <span wicket:id=\"status\">[status]</span>\n-                                    </td>\n-                                    <td>\n-                                        <span wicket:id=\"token\">[token]</span>\n-                                    </td>\n-                                    <td>\n-                                        <a href=\"#\" wicket:id=\"editLink\">\n-                                            <wicket:message key=\"edit\"/>\n-                                        </a>\n-                                    </td>\n-                                    <td>\n-                                        <a href=\"#\" wicket:id=\"deleteLink\">\n-                                            <wicket:message key=\"delete\"/>\n-                                        </a>\n-                                    </td>\n-                                </tr>\n-                            </tbody>\n-                        </table>\n-                        <span>\n-                            <b>\n-                                <span wicket:id=\"noResults\"/>\n-                            </b>\n-                        </span>\n-                    </span>\n-                    <div>\n-                        &nbsp;\n-                    </div>\n-                </div>\n-            </form>\n-            <span >\n-                <form wicket:id=\"PaginatorSearchForm\" style=\"display:inline\">\n-                    <label><wicket:message key=\"displayRows\"/></label>\n-                    <select class=\"text ui-widget-content ui-corner-all\"\n-                            wicket:id=\"rowsSearchChooser\"/>\n-                </form>\n-            </span>\n+                <span style=\"float:right\">\n+                    <form wicket:id=\"searchPaginator\" style=\"display:inline\">\n+                        <label><wicket:message key=\"displayRows\"/></label>\n+                        <select class=\"text ui-widget-content ui-corner-all\"\n+                                wicket:id=\"searchRowsChooser\"/>\n+                    </form>\n+                </span>\n+            </div>\n         </div>\n     </div>\n+\n </wicket:extend>\n\\ No newline at end of file"},{"sha":"08d22f7d8e1cab56d4de34ac7034f489c7eaee2c","filename":"console/src/main/resources/org/syncope/console/pages/Users.properties","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -1,7 +1,6 @@\n #Tabs\n-tab1=Users list\n-tab2=Search user\n-#tab1 - USERS LIST\n+tab1=List\n+tab2=Search\n search=Search\n firstname=Name\n surname=Surname\n@@ -12,7 +11,7 @@ delete=Delete\n id=Id\n status=Status\n token=Token\n-change_attributes=Change attributes view\n+change_attributes=Change display attributes\n tokenValued=Valued\n tokenNotValued=Not valued\n #tab2 - USERS SEARCH"},{"sha":"47b27b6d436c7728918893d9b9c375e21657b7e5","filename":"console/src/main/resources/org/syncope/console/pages/Users_it.properties","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -1,7 +1,6 @@\n #Tabs\n-tab1=Elenco utenti\n-tab2=Ricerca utente\n-#tab2\n+tab1=Elenco\n+tab2=Ricerca\n search=Cerca\n firstname=Nome\n surname=Cognome\n@@ -10,7 +9,7 @@ userId=User id\n edit=Modifica\n delete=Elimina\n id=Id\n-change_attributes=Cambia vista attributi\n+change_attributes=Gestisci attributi da visualizzare\n status=Stato\n token=Token\n tokenValued=Impostato"},{"sha":"8db49b921ba5e8e7aca44b436a1c51011d1eee8f","filename":"console/src/main/resources/org/syncope/console/pages/WelcomePage.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -19,7 +19,7 @@\n         <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n         <meta http-equiv=\"Content-Style-Type\" content=\"text/css\"/>\n \n-        <title>Syncope - Login</title>\n+        <title>Syncope - <wicket:message key=\"welcome\"/></title>\n \n         <link rel=\"stylesheet\" href=\"css/stile_sy.css\" type=\"text/css\" media=\"all\"/>\n         <style type=\"text/css\">"},{"sha":"d481aef75758d07e6ba873f67f5a72793efbcb68","filename":"console/src/test/resources/content.xml","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -45,6 +45,26 @@\n     <SyncopeUser id=\"2\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n     <SyncopeUser id=\"3\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n     <SyncopeUser id=\"4\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"5\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"6\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"7\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"8\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"9\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"10\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"11\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"12\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"13\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"14\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"15\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"16\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"17\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"18\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"19\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"20\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"21\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"22\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"23\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"24\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n \n     <SyncopeRole id=\"1\" name=\"root\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n     <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>"},{"sha":"64f1de2baf0e81c9ac4ab1a075623f9bdd8eec79","filename":"console/src/test/resources/ehcache.xml","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Ftest%2Fresources%2Fehcache.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/console%2Fsrc%2Ftest%2Fresources%2Fehcache.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fresources%2Fehcache.xml?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:noNamespaceSchemaLocation=\"http://ehcache.org/ehcache.xsd\">\n+  \n+    <diskStore path=\"java.io.tmpdir/syncope-cache\"/>\n+\n+    <defaultCache\n+            maxElementsInMemory=\"10000\"\n+            eternal=\"false\"\n+            timeToIdleSeconds=\"120\"\n+            timeToLiveSeconds=\"120\"\n+            overflowToDisk=\"true\"\n+            maxElementsOnDisk=\"10000000\"\n+            diskPersistent=\"false\"\n+            diskExpiryThreadIntervalSeconds=\"120\"\n+            memoryStoreEvictionPolicy=\"LRU\"\n+            />\n+</ehcache>"},{"sha":"b0e845ca869d7c407376770ece625e61f30c1304","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserSearchDAO.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -16,12 +16,13 @@\n \n import java.util.List;\n import java.util.Set;\n-import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n public interface UserSearchDAO extends DAO {\n \n+    Integer count(Set<Long> adminRoles, NodeCond searchCondition);\n+\n     /**\n      * @param adminRoles the set of admin roles owned by the caller\n      * @param searchCondition the search condition\n@@ -34,11 +35,8 @@ public interface UserSearchDAO extends DAO {\n      * @param searchCondition the search condition\n      * @param page position of the first result, start from 1\n      * @param itemsPerPage number of results per page\n-     * @param paginatedResult result to be sent to the REST caller\n      * @return the list of users matchin the given search condition\n      */\n     List<SyncopeUser> search(Set<Long> adminRoles,\n-            NodeCond searchCondition,\n-            int page, int itemsPerPage,\n-            PaginatedUserContainer paginatedResult);\n+            NodeCond searchCondition, int page, int itemsPerPage);\n }"},{"sha":"cfe543b1ab688e78d90eeaa5a0df439590e2feb3","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":69,"deletions":86,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -32,7 +32,6 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.beans.user.USchema;\n@@ -62,19 +61,82 @@ public UserSearchDAOImpl() {\n         random = new Random(Calendar.getInstance().getTimeInMillis());\n     }\n \n+    private String getAdminRolesFilter(final Set<Long> adminRoles) {\n+        final StringBuilder adminRolesFilter = new StringBuilder();\n+        if (adminRoles == null || adminRoles.isEmpty()) {\n+            adminRolesFilter.append(\"SELECT syncopeUser_id AS user_id \").\n+                    append(\"FROM Membership\");\n+        } else {\n+            adminRolesFilter.append(\"SELECT syncopeUser_id AS user_id \").\n+                    append(\"FROM Membership M1 \").\n+                    append(\"WHERE syncopeRole_id IN (\");\n+            adminRolesFilter.append(\"SELECT syncopeRole_id \").\n+                    append(\"FROM Membership M2 \").\n+                    append(\"WHERE M2.syncopeUser_id=M1.syncopeUser_id \").\n+                    append(\"AND syncopeRole_id NOT IN (\");\n+            adminRolesFilter.append(\n+                    \"SELECT id AS syncopeRole_id FROM SyncopeRole\");\n+            boolean firstRole = true;\n+            for (Long adminRoleId : adminRoles) {\n+                if (firstRole) {\n+                    adminRolesFilter.append(\" WHERE\");\n+                    firstRole = false;\n+                } else {\n+                    adminRolesFilter.append(\" OR\");\n+                }\n+\n+                adminRolesFilter.append(\" id=\").append(adminRoleId);\n+            }\n+            adminRolesFilter.append(\"))\");\n+        }\n+\n+        return adminRolesFilter.toString();\n+    }\n+\n+    @Override\n+    public Integer count(final Set<Long> adminRoles,\n+            final NodeCond searchCondition) {\n+\n+        Map<Integer, Object> parameters = Collections.synchronizedMap(\n+                new HashMap<Integer, Object>());\n+\n+        // 1. get the query string from the search condition\n+        StringBuilder queryString = getQuery(searchCondition, parameters);\n+\n+        // 2. take into account administrative roles\n+        queryString.insert(0, \"SELECT u.user_id FROM (\");\n+        queryString.append(\") u WHERE user_id NOT IN (\");\n+        queryString.append(getAdminRolesFilter(adminRoles)).append(\")\");\n+\n+        // 3. prepare the COUNT query\n+        queryString.insert(0, \"SELECT COUNT(user_id) FROM (\");\n+        queryString.append(\") count_user_id\");\n+\n+        Query countQuery =\n+                entityManager.createNativeQuery(queryString.toString());\n+        fillWithParameters(countQuery, parameters);\n+\n+        LOG.debug(\"Native count query\\n{}\\nwith parameters\\n{}\",\n+                queryString.toString(), parameters);\n+\n+        Integer result = ((Number) countQuery.getSingleResult()).intValue();\n+        LOG.debug(\"Native count query result: {}\", result);\n+\n+        return result;\n+    }\n+\n     @Override\n     public List<SyncopeUser> search(final Set<Long> adminRoles,\n             final NodeCond searchCondition) {\n \n-        return search(adminRoles, searchCondition, -1, -1, null);\n+        return search(adminRoles, searchCondition, -1, -1);\n     }\n \n     @Override\n     public List<SyncopeUser> search(final Set<Long> adminRoles,\n             final NodeCond searchCondition,\n             final int page,\n-            final int itemsPerPage,\n-            final PaginatedUserContainer paginatedResult) {\n+            final int itemsPerPage) {\n \n         List<SyncopeUser> result;\n \n@@ -86,8 +148,7 @@ public List<SyncopeUser> search(final Set<Long> adminRoles,\n         }\n \n         try {\n-            result = doSearch(adminRoles, searchCondition,\n-                    page, itemsPerPage, paginatedResult);\n+            result = doSearch(adminRoles, searchCondition, page, itemsPerPage);\n         } catch (Throwable t) {\n             LOG.error(\"While searching users\", t);\n \n@@ -126,41 +187,9 @@ private void fillWithParameters(final Query query,\n         }\n     }\n \n-    private void addAdminRolesFilter(final Set<Long> adminRoles,\n-            final StringBuilder queryString) {\n-\n-        final StringBuilder adminRolesFilter = new StringBuilder();\n-\n-        adminRolesFilter.append(\"SELECT syncopeUser_id FROM Membership M1 \").\n-                append(\"WHERE syncopeRole_id IN (\");\n-        adminRolesFilter.append(\"SELECT syncopeRole_id FROM Membership M2 \").\n-                append(\"WHERE M2.syncopeUser_id=M1.syncopeUser_id \").\n-                append(\"AND syncopeRole_id NOT IN (\");\n-\n-        adminRolesFilter.append(\"SELECT id AS syncopeRole_id FROM SyncopeRole\");\n-        boolean firstRole = true;\n-        for (Long adminRoleId : adminRoles) {\n-            if (firstRole) {\n-                adminRolesFilter.append(\" WHERE\");\n-                firstRole = false;\n-            } else {\n-                adminRolesFilter.append(\" OR\");\n-            }\n-\n-            adminRolesFilter.append(\" id=\").append(adminRoleId);\n-        }\n-\n-        adminRolesFilter.append(\")))\");\n-\n-        queryString.insert(0, \"SELECT user_id FROM (\");\n-        queryString.append(\") WHERE user_id NOT IN (\");\n-        queryString.append(adminRolesFilter);\n-    }\n-\n     private List<SyncopeUser> doSearch(final Set<Long> adminRoles,\n             final NodeCond nodeCond,\n-            final int page, final int itemsPerPage,\n-            final PaginatedUserContainer paginatedResult) {\n+            final int page, final int itemsPerPage) {\n \n         Map<Integer, Object> parameters = Collections.synchronizedMap(\n                 new HashMap<Integer, Object>());\n@@ -169,36 +198,9 @@ private List<SyncopeUser> doSearch(final Set<Long> adminRoles,\n         StringBuilder queryString = getQuery(nodeCond, parameters);\n \n         // 2. take into account administrative roles\n-        final StringBuilder adminRolesFilter = new StringBuilder();\n-        if (adminRoles == null || adminRoles.isEmpty()) {\n-            adminRolesFilter.append(\"SELECT syncopeUser_id AS user_id \").\n-                    append(\"FROM Membership\");\n-        } else {\n-            adminRolesFilter.append(\"SELECT syncopeUser_id AS user_id \").\n-                    append(\"FROM Membership M1 \").\n-                    append(\"WHERE syncopeRole_id IN (\");\n-            adminRolesFilter.append(\"SELECT syncopeRole_id FROM Membership M2 \").\n-                    append(\"WHERE M2.syncopeUser_id=M1.syncopeUser_id \").\n-                    append(\"AND syncopeRole_id NOT IN (\");\n-            adminRolesFilter.append(\n-                    \"SELECT id AS syncopeRole_id FROM SyncopeRole\");\n-            boolean firstRole = true;\n-            for (Long adminRoleId : adminRoles) {\n-                if (firstRole) {\n-                    adminRolesFilter.append(\" WHERE\");\n-                    firstRole = false;\n-                } else {\n-                    adminRolesFilter.append(\" OR\");\n-                }\n-\n-                adminRolesFilter.append(\" id=\").append(adminRoleId);\n-            }\n-            adminRolesFilter.append(\"))\");\n-        }\n-\n         queryString.insert(0, \"SELECT u.user_id FROM (\");\n         queryString.append(\") u WHERE user_id NOT IN (\");\n-        queryString.append(adminRolesFilter).append(\")\");\n+        queryString.append(getAdminRolesFilter(adminRoles)).append(\")\");\n \n         // 3. prepare the search query\n         Query query = entityManager.createNativeQuery(queryString.toString());\n@@ -234,25 +236,6 @@ private List<SyncopeUser> doSearch(final Set<Long> adminRoles,\n             }\n         }\n \n-        // 6. (if it's the case, paginate)\n-        if (paginatedResult != null) {\n-            queryString.insert(0, \"SELECT COUNT(user_id) FROM (\");\n-            queryString.append(\") count_user_id\");\n-\n-            Query countQuery =\n-                    entityManager.createNativeQuery(queryString.toString());\n-            fillWithParameters(countQuery, parameters);\n-\n-            LOG.debug(\"Native count query\\n{}\\nwith parameters\\n{}\",\n-                    queryString.toString(), parameters);\n-\n-            paginatedResult.setTotalRecords(\n-                    ((Number) countQuery.getSingleResult()).intValue());\n-\n-            LOG.debug(\"Native count query result: {}\",\n-                    paginatedResult.getTotalRecords());\n-        }\n-\n         return result;\n     }\n "},{"sha":"7a16d36cf3736a2e3ce9616544c12a3bf529d343","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":24,"deletions":22,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -46,7 +46,6 @@\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -196,6 +195,25 @@ public ModelAndView count() {\n         return new ModelAndView().addObject(userDAO.count(adminRoleIds));\n     }\n \n+    @PreAuthorize(\"hasRole('USER_READ')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/search/count\")\n+    @Transactional(readOnly = true)\n+    public ModelAndView searchCount(@RequestBody NodeCond searchCondition)\n+            throws InvalidSearchConditionException {\n+\n+        if (!searchCondition.checkValidity()) {\n+            LOG.error(\"Invalid search condition: {}\", searchCondition);\n+            throw new InvalidSearchConditionException();\n+        }\n+\n+        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+\n+        return new ModelAndView().addObject(\n+                userSearchDAO.count(adminRoleIds, searchCondition));\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n@@ -215,29 +233,20 @@ public List<UserTO> list() {\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list/{page}/{size}\")\n     @Transactional(readOnly = true)\n-    public PaginatedUserContainer list(\n+    public List<UserTO> list(\n             @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size) {\n \n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n                 EntitlementUtil.getOwnedEntitlementNames());\n \n-        PaginatedUserContainer paginatedResult = new PaginatedUserContainer();\n-        paginatedResult.setPageNumber(page);\n-        paginatedResult.setPageSize(size);\n-\n-        paginatedResult.setTotalRecords(userDAO.count(adminRoleIds));\n-\n         List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n             userTOs.add(userDataBinder.getUserTO(user, workflow));\n         }\n \n-        paginatedResult.setRecordsInPage(userTOs.size());\n-        paginatedResult.setRecords(userTOs);\n-\n-        return paginatedResult;\n+        return userTOs;\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n@@ -303,7 +312,7 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/search/{page}/{size}\")\n     @Transactional(readOnly = true)\n-    public PaginatedUserContainer search(\n+    public List<UserTO> search(\n             @RequestBody final NodeCond searchCondition,\n             @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size)\n@@ -316,24 +325,17 @@ public PaginatedUserContainer search(\n             throw new InvalidSearchConditionException();\n         }\n \n-        PaginatedUserContainer paginatedResult = new PaginatedUserContainer();\n-        paginatedResult.setPageNumber(page);\n-        paginatedResult.setPageSize(size);\n-\n         final List<SyncopeUser> matchingUsers = userSearchDAO.search(\n                 EntitlementUtil.getRoleIds(\n                 EntitlementUtil.getOwnedEntitlementNames()),\n-                searchCondition, page, size, paginatedResult);\n+                searchCondition, page, size);\n \n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user, workflow));\n         }\n \n-        paginatedResult.setRecordsInPage(result.size());\n-        paginatedResult.setRecords(result);\n-\n-        return paginatedResult;\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")"},{"sha":"49534f0e22d25b9535fb5cf9b2d1f927f0cf0728","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -230,13 +230,13 @@ public final void searchByPageAndSize() {\n \n         List<SyncopeUser> users = searchDAO.search(\n                 EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n-                cond, 1, 2, null);\n+                cond, 1, 2);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n         users = searchDAO.search(\n                 EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n-                cond, 2, 2, null);\n+                cond, 2, 2);\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }"},{"sha":"0196eae6ad8825d36a7df67e4f9adf8bedd3c2a1","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":22,"deletions":21,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -31,7 +31,6 @@\n import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.mod.MembershipMod;\n import org.syncope.client.mod.UserMod;\n-import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.to.MembershipTO;\n@@ -388,6 +387,18 @@ public final void count() {\n         assertTrue(count > 0);\n     }\n \n+    @Test\n+    public final void searchCount() {\n+        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNULL);\n+        isNullCond.setSchema(\"loginDate\");\n+        NodeCond searchCond = NodeCond.getLeafCond(isNullCond);\n+\n+        Integer count = restTemplate.postForObject(\n+                BASE_URL + \"user/search/count.json\", searchCond, Integer.class);\n+        assertNotNull(count);\n+        assertTrue(count > 0);\n+    }\n+\n     @Test\n     public final void list() {\n         List<UserTO> users = Arrays.asList(\n@@ -402,11 +413,9 @@ public final void list() {\n \n     @Test\n     public final void paginatedList() {\n-        PaginatedUserContainer paginatedResult = restTemplate.getForObject(\n+        List<UserTO> users = Arrays.asList(restTemplate.getForObject(\n                 BASE_URL + \"user/list/{page}/{size}.json\",\n-                PaginatedUserContainer.class, 1, 2);\n-\n-        List<UserTO> users = paginatedResult.getRecords();\n+                UserTO[].class, 1, 2));\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n@@ -416,21 +425,17 @@ public final void paginatedList() {\n             assertNotNull(user);\n         }\n \n-        paginatedResult = restTemplate.getForObject(\n+        users = Arrays.asList(restTemplate.getForObject(\n                 BASE_URL + \"user/list/{page}/{size}.json\",\n-                PaginatedUserContainer.class, 2, 2);\n-\n-        users = paginatedResult.getRecords();\n+                UserTO[].class, 2, 2));\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n         assertEquals(2, users.size());\n \n-        PaginatedUserContainer result = restTemplate.getForObject(\n+        users = Arrays.asList(restTemplate.getForObject(\n                 BASE_URL + \"user/list/{page}/{size}.json\",\n-                PaginatedUserContainer.class, 100, 2);\n-\n-        users = result.getRecords();\n+                UserTO[].class, 100, 2));\n \n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n@@ -533,11 +538,9 @@ public final void paginatedSearch() {\n \n         assertTrue(searchCondition.checkValidity());\n \n-        PaginatedUserContainer result = restTemplate.postForObject(\n+        List<UserTO> matchedUsers = Arrays.asList(restTemplate.postForObject(\n                 BASE_URL + \"user/search/{page}/{size}\",\n-                searchCondition, PaginatedUserContainer.class, 1, 2);\n-\n-        List<UserTO> matchedUsers = result.getRecords();\n+                searchCondition, UserTO[].class, 1, 2));\n         assertNotNull(matchedUsers);\n \n         assertFalse(matchedUsers.isEmpty());\n@@ -550,11 +553,9 @@ public final void paginatedSearch() {\n         isNullCond.setSchema(\"loginDate\");\n         searchCondition = NodeCond.getLeafCond(isNullCond);\n \n-        PaginatedUserContainer paginatedResult = restTemplate.postForObject(\n+        matchedUsers = Arrays.asList(restTemplate.postForObject(\n                 BASE_URL + \"user/search/{page}/{size}\",\n-                searchCondition, PaginatedUserContainer.class, 1, 2);\n-\n-        matchedUsers = paginatedResult.getRecords();\n+                searchCondition, UserTO[].class, 1, 2));\n \n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());"},{"sha":"7426692993db9cad180bcbe5ab399acb134eac60","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/520750459220a221de92035b33d8167ab2626280/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/520750459220a221de92035b33d8167ab2626280/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=520750459220a221de92035b33d8167ab2626280","patch":"@@ -119,7 +119,7 @@\n         <hibernate-validator.version>4.0.2.GA</hibernate-validator.version>\n         <ehcache.version>2.3.2</ehcache.version>\n \n-        <wicket.version>1.4.15</wicket.version>\n+        <wicket.version>1.4.16</wicket.version>\n \n         <org.apache.cxf.version>2.2.9</org.apache.cxf.version>\n "}]}