{"sha":"3688df9e7278acdb08f8b098043163321e895630","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM2ODhkZjllNzI3OGFjZGIwOGY4YjA5ODA0MzE2MzMyMWU4OTU2MzA=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-01T16:59:34Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-01T16:59:34Z"},"message":"Virtual attribute values retrieving failed in case of accountId derived or username\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1295673 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ebddd0ab0afc246ae8858e269d68929f22652e2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0ebddd0ab0afc246ae8858e269d68929f22652e2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3688df9e7278acdb08f8b098043163321e895630","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3688df9e7278acdb08f8b098043163321e895630","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3688df9e7278acdb08f8b098043163321e895630","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3688df9e7278acdb08f8b098043163321e895630/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"0a5bb7c528e9a8caf6df78834d259c8c7275add2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0a5bb7c528e9a8caf6df78834d259c8c7275add2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0a5bb7c528e9a8caf6df78834d259c8c7275add2"}],"stats":{"total":139,"additions":103,"deletions":36},"files":[{"sha":"acf42057dd925fbebed4fb2843ee7b011cc671ff","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=3688df9e7278acdb08f8b098043163321e895630","patch":"@@ -32,14 +32,9 @@ public abstract class AbstractAttributable extends AbstractBaseBean {\n     public <T extends AbstractAttr> T getAttribute(final String schemaName) {\n         T result = null;\n         T attribute;\n-        for (Iterator<? extends AbstractAttr> itor =\n-                getAttributes().iterator();\n-                result == null && itor.hasNext();) {\n-\n+        for (Iterator<? extends AbstractAttr> itor = getAttributes().iterator(); result == null && itor.hasNext();) {\n             attribute = (T) itor.next();\n-            if (attribute.getSchema() != null\n-                    && schemaName.equals(attribute.getSchema().getName())) {\n-\n+            if (attribute.getSchema() != null && schemaName.equals(attribute.getSchema().getName())) {\n                 result = attribute;\n             }\n         }"},{"sha":"2639e50b0fb3c0ca93a308a95c22c595bd115232","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=3688df9e7278acdb08f8b098043163321e895630","patch":"@@ -44,15 +44,13 @@ public Long getId() {\n \n     /**\n      * @see http://commons.apache.org/jexl/reference/index.html\n-     * @param attributes the set of attributes against which evaluate this\n-     * derived attribute\n+     * @param attributes the set of attributes against which evaluate this derived attribute\n      * @return the value of this derived attribute\n      */\n     public String getValue(\n             final Collection<? extends AbstractAttr> attributes) {\n \n-        final ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n+        final ConfigurableApplicationContext context = ApplicationContextManager.getApplicationContext();\n         final JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n \n         // Prepare context using user attributes"},{"sha":"2cce7a71a7e9fffc242a501dcc63ceca91d29031","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractVirAttr.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java?ref=3688df9e7278acdb08f8b098043163321e895630","patch":"@@ -35,6 +35,7 @@\n import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.util.ApplicationContextManager;\n+import org.syncope.core.util.SchemaMappingUtil;\n import org.syncope.types.IntMappingType;\n \n @MappedSuperclass\n@@ -102,7 +103,8 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n \n                 if (mapping.isAccountid()) {\n                     try {\n-                        accountId = attributable.getAttribute(mapping.getIntAttrName()).getValuesAsStrings().get(0);\n+                        final List<String> values = SchemaMappingUtil.getIntValueAsStrings(attributable, mapping);\n+                        accountId = values == null ? null : values.get(0);\n                     } catch (NullPointerException e) {\n                         // ignore exception\n                         LOG.debug(\"Invalid accountId specified\", e);\n@@ -114,7 +116,6 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n                 LOG.debug(\"Get object attribute for entry {}\", accountId);\n \n                 try {\n-\n                     final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n                     oob.setAttributesToGet(attributeNames);\n "},{"sha":"29acb3a0015fbf844c62e5ac4e3c87895491e02c","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=3688df9e7278acdb08f8b098043163321e895630","patch":"@@ -367,6 +367,7 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n     @Override\n     public void setVirtualAttributes(final List<? extends AbstractVirAttr> virtualAttributes) {\n         this.virtualAttributes.clear();\n+        \n         if (virtualAttributes != null && !virtualAttributes.isEmpty()) {\n             this.virtualAttributes.addAll((List<UVirAttr>) virtualAttributes);\n         }"},{"sha":"bdf6bf8d12edcd7f764f8d5112eb67f9d2a5d5d0","filename":"core/src/main/java/org/syncope/core/propagation/PropagationManager.java","status":"modified","additions":10,"deletions":17,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=3688df9e7278acdb08f8b098043163321e895630","patch":"@@ -325,7 +325,7 @@ private List<PropagationTask> getUpdateTaskIds(\n         PropagationByResource localPropByRes = userDataBinder.fillVirtual(\n                 user,\n                 vAttrsToBeRemoved == null ? Collections.EMPTY_SET : vAttrsToBeRemoved,\n-                vAttrsToBeUpdated == null ? Collections.EMPTY_SET : vAttrsToBeUpdated, \n+                vAttrsToBeUpdated == null ? Collections.EMPTY_SET : vAttrsToBeUpdated,\n                 AttributableUtil.USER);\n \n         if (propByRes != null && !propByRes.isEmpty()) {\n@@ -479,18 +479,16 @@ private Map.Entry<String, Attribute> prepareAttribute(\n         LOG.debug(\"Define mapping for: \"\n                 + \"\\n* ExtAttrName \" + mapping.getExtAttrName()\n                 + \"\\n* is accountId \" + mapping.isAccountid()\n-                + \"\\n* is password \" + (mapping.isPassword()\n-                || mapping.getIntMappingType().equals(\n-                IntMappingType.Password))\n-                + \"\\n* mandatory condition \"\n-                + mapping.getMandatoryCondition()\n+                + \"\\n* is password \"\n+                + (mapping.isPassword() || mapping.getIntMappingType().equals(IntMappingType.Password))\n+                + \"\\n* mandatory condition \" + mapping.getMandatoryCondition()\n                 + \"\\n* Schema \" + mapping.getIntAttrName()\n-                + \"\\n* IntMappingType \"\n-                + mapping.getIntMappingType().toString()\n+                + \"\\n* IntMappingType \" + mapping.getIntMappingType().toString()\n                 + \"\\n* ClassType \" + schemaType.getClassName()\n                 + \"\\n* Values \" + values);\n \n         List<Object> objValues = new ArrayList<Object>();\n+\n         for (AbstractAttrValue value : values) {\n             if (FrameworkUtil.isSupportedAttributeType(Class.forName(schemaType.getClassName()))) {\n                 objValues.add(value.getValue());\n@@ -552,26 +550,21 @@ private Entry<AbstractSchema, List<AbstractAttrValue>> getAttributeValues(\n             case UserSchema:\n             case RoleSchema:\n             case MembershipSchema:\n-                schema = schemaDAO.find(mapping.getIntAttrName(),\n-                        getIntMappingTypeClass(mapping.getIntMappingType()));\n+                schema = schemaDAO.find(mapping.getIntAttrName(), getIntMappingTypeClass(mapping.getIntMappingType()));\n \n                 for (AbstractAttributable attributable : attributables) {\n-                    final UAttr attr =\n-                            attributable.getAttribute(mapping.getIntAttrName());\n+                    final UAttr attr = attributable.getAttribute(mapping.getIntAttrName());\n \n                     if (attr != null && attr.getValues() != null) {\n                         values.addAll(schema.isUniqueConstraint()\n-                                ? Collections.singletonList(\n-                                attr.getUniqueValue())\n-                                : attr.getValues());\n+                                ? Collections.singletonList(attr.getUniqueValue()) : attr.getValues());\n                     }\n \n                     LOG.debug(\"Retrieved attribute {}\"\n                             + \"\\n* IntAttrName {}\"\n                             + \"\\n* IntMappingType {}\"\n                             + \"\\n* Attribute values {}\",\n-                            new Object[]{attr, mapping.getIntAttrName(),\n-                                mapping.getIntMappingType(), values});\n+                            new Object[]{attr, mapping.getIntAttrName(), mapping.getIntMappingType(), values});\n                 }\n \n                 break;"},{"sha":"787708ea9ac30391c09639de714833b933dbb2ab","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=3688df9e7278acdb08f8b098043163321e895630","patch":"@@ -771,8 +771,7 @@ protected void fillTO(\n \n         for (AbstractDerAttr derivedAttribute : derivedAttributes) {\n             attributeTO = new AttributeTO();\n-            attributeTO.setSchema(\n-                    derivedAttribute.getDerivedSchema().getName());\n+            attributeTO.setSchema(derivedAttribute.getDerivedSchema().getName());\n             attributeTO.addValue(derivedAttribute.getValue(attributes));\n             attributeTO.setReadonly(true);\n \n@@ -781,8 +780,7 @@ protected void fillTO(\n \n         for (AbstractVirAttr virtualAttribute : virtualAttributes) {\n             attributeTO = new AttributeTO();\n-            attributeTO.setSchema(\n-                    virtualAttribute.getVirtualSchema().getName());\n+            attributeTO.setSchema(virtualAttribute.getVirtualSchema().getName());\n             attributeTO.setValues(virtualAttribute.getValues());\n             attributeTO.setReadonly(false);\n "},{"sha":"986128eba4f64d38f9d8691c4e97d2acbe7d6011","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=3688df9e7278acdb08f8b098043163321e895630","patch":"@@ -128,9 +128,9 @@ public SyncopeUser getUserFromUsername(final String username)\n         }\n \n         Set<Long> roleIds = user.getRoleIds();\n-        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n-                EntitlementUtil.getOwnedEntitlementNames());\n+        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         roleIds.removeAll(adminRoleIds);\n+        \n         if (!roleIds.isEmpty()) {\n             throw new UnauthorizedRoleException(roleIds);\n         }"},{"sha":"1e98ea98528057647f0358bff4088b1da20f0f6f","filename":"core/src/main/java/org/syncope/core/util/SchemaMappingUtil.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3688df9e7278acdb08f8b098043163321e895630/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java?ref=3688df9e7278acdb08f8b098043163321e895630","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.syncope.core.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+\n+public class SchemaMappingUtil {\n+\n+    public static String getExtAttrName(final SchemaMapping mapping) {\n+        final String name;\n+\n+        if (mapping.isAccountid()) {\n+            name = Uid.NAME;\n+        } else if (mapping.isPassword()) {\n+            name = OperationalAttributes.PASSWORD_NAME;\n+        } else {\n+            name = mapping.getExtAttrName();\n+        }\n+\n+        return name;\n+    }\n+\n+    public static List<String> getIntValueAsStrings(\n+            final AbstractAttributable attributable, final SchemaMapping mapping) {\n+        final List<String> value;\n+\n+        switch (mapping.getIntMappingType()) {\n+            case Username:\n+                value = new ArrayList<String>();\n+                value.add(((SyncopeUser) attributable).getUsername());\n+                break;\n+            case Password:\n+                value = new ArrayList<String>();\n+                value.add(((SyncopeUser) attributable).getPassword());\n+                break;\n+            case UserSchema:\n+            case RoleSchema:\n+            case MembershipSchema:\n+                value = attributable.getAttribute(mapping.getIntAttrName()).getValuesAsStrings();\n+                break;\n+            case UserVirtualSchema:\n+            case RoleVirtualSchema:\n+            case MembershipVirtualSchema:\n+                value = attributable.getVirtualAttribute(mapping.getIntAttrName()).getValues();\n+                break;\n+            case UserDerivedSchema:\n+            case RoleDerivedSchema:\n+            case MembershipDerivedSchema:\n+                value = new ArrayList<String>();\n+                value.add(attributable.getDerivedAttribute(mapping.getIntAttrName()).getValue(\n+                        attributable.getAttributes()));\n+                break;\n+            default:\n+                value = null;\n+        }\n+\n+        return value;\n+    }\n+}"}]}