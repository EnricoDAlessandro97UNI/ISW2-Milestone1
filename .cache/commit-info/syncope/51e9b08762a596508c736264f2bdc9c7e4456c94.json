{"sha":"51e9b08762a596508c736264f2bdc9c7e4456c94","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUxZTliMDg3NjJhNTk2NTA4YzczNjI2NGYyYmRjOWM3ZTQ0NTZjOTQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-27T11:46:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-27T11:46:21Z"},"message":"[SYNCOPE-137] Better handling of ConnId file: locations\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1461539 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46ced7234932aad8d519d1fd084e6a93c8964b6f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/46ced7234932aad8d519d1fd084e6a93c8964b6f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/51e9b08762a596508c736264f2bdc9c7e4456c94","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51e9b08762a596508c736264f2bdc9c7e4456c94","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/51e9b08762a596508c736264f2bdc9c7e4456c94","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51e9b08762a596508c736264f2bdc9c7e4456c94/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a590cb4caa2505af2b93de1742005a3d2d54b913","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a590cb4caa2505af2b93de1742005a3d2d54b913","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a590cb4caa2505af2b93de1742005a3d2d54b913"}],"stats":{"total":93,"additions":75,"deletions":18},"files":[{"sha":"3e05cd57e1e01a31b26e94764de45e10c94277c2","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/ConnInstanceValidator.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51e9b08762a596508c736264f2bdc9c7e4456c94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FConnInstanceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51e9b08762a596508c736264f2bdc9c7e4456c94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FConnInstanceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FConnInstanceValidator.java?ref=51e9b08762a596508c736264f2bdc9c7e4456c94","patch":"@@ -18,13 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n-import java.net.URI;\n-import java.net.URISyntaxException;\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-import org.apache.commons.lang.ArrayUtils;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n+import org.apache.syncope.core.util.URIUtil;\n \n public class ConnInstanceValidator extends AbstractValidator implements\n         ConstraintValidator<ConnInstanceCheck, ConnInstance> {\n@@ -39,12 +37,13 @@ public void initialize(final ConnInstanceCheck constraintAnnotation) {\n     public boolean isValid(final ConnInstance connInstance, final ConstraintValidatorContext context) {\n         boolean isValid = true;\n         try {\n-            URI location = new URI(connInstance.getLocation());\n-            isValid = ArrayUtils.contains(ALLOWED_SCHEMES, location.getScheme());\n-        } catch (URISyntaxException e) {\n+            URIUtil.buildForConnId(connInstance.getLocation());\n+        } catch (Exception e) {\n+            LOG.error(\"While validating {}\", connInstance.getLocation(), e);\n+\n             context.disableDefaultConstraintViolation();\n             context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidConnInstanceLocation.toString())\n-                    .addNode(\" is not a valid URI for file:// or connid(s):// schemes\").addConstraintViolation();\n+                    .addNode(\"location\").addConstraintViolation();\n             isValid = false;\n         }\n "},{"sha":"679f1a1a59080efcf22686f94fb0fb68a63d768d","filename":"core/src/main/java/org/apache/syncope/core/util/ConnIdBundleManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51e9b08762a596508c736264f2bdc9c7e4456c94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnIdBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51e9b08762a596508c736264f2bdc9c7e4456c94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnIdBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnIdBundleManager.java?ref=51e9b08762a596508c736264f2bdc9c7e4456c94","patch":"@@ -22,7 +22,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.URI;\n-import java.net.URISyntaxException;\n import java.net.URL;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n@@ -93,9 +92,9 @@ public final class ConnIdBundleManager {\n         List<URI> locations = new ArrayList<URI>();\n         for (String location : stringLocations) {\n             try {\n-                locations.add(new URI(location.trim()));\n+                locations.add(URIUtil.buildForConnId(location));\n                 LOG.info(\"Valid ConnId location: {}\", location.trim());\n-            } catch (URISyntaxException e) {\n+            } catch (Exception e) {\n                 LOG.error(\"Invalid ConnId location: {}\", location.trim(), e);\n             }\n         }\n@@ -236,8 +235,8 @@ public static ConnectorInfo getConnectorInfo(\n         // check ConnIdLocation\n         URI uriLocation = null;\n         try {\n-            uriLocation = new URI(location);\n-        } catch (URISyntaxException e) {\n+            uriLocation = URIUtil.buildForConnId(location);\n+        } catch (Exception e) {\n             throw new IllegalArgumentException(\"Invalid ConnId location \" + location, e);\n         }\n "},{"sha":"5e2b1479618099fc5603c4bf541191fb4c6ed2ec","filename":"core/src/main/java/org/apache/syncope/core/util/URIUtil.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51e9b08762a596508c736264f2bdc9c7e4456c94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FURIUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51e9b08762a596508c736264f2bdc9c7e4456c94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FURIUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FURIUtil.java?ref=51e9b08762a596508c736264f2bdc9c7e4456c94","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+\n+public final class URIUtil {\n+\n+    private URIUtil() {\n+        // empty constructor for static utility class\n+    }\n+\n+    /**\n+     * Build a valid URI out of the given location.\n+     * Only \"file\", \"connid\" and \"connids\" schemes are allowed.\n+     * For \"file\", invalid characters are handled via intermediate transformation into URL.\n+     *\n+     * @param location the candidate location for URI\n+     * @return valid URI for the given location\n+     * @throws MalformedURLException if the intermediate URL is not valid\n+     * @throws URISyntaxException if the given location does not correspond to a valid URI\n+     */\n+    public static URI buildForConnId(final String location) throws MalformedURLException, URISyntaxException {\n+        final String candidate = location.trim();\n+\n+        if (!location.startsWith(\"file:\")\n+                && !location.startsWith(\"connid:\") && !location.startsWith(\"connids:\")) {\n+\n+            throw new IllegalArgumentException(candidate + \" is not a valid URI for file or connid(s) schemes\");\n+        }\n+\n+        URI uri;\n+        if (location.startsWith(\"file:\")) {\n+            uri = new File(new URL(candidate).getFile()).getAbsoluteFile().toURI();\n+        } else {\n+            uri = new URI(candidate);\n+        }\n+\n+        return uri;\n+    }\n+}"},{"sha":"07cb3d523ba35be5f9f1493a00dac1f3903cee53","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/ConnInstanceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51e9b08762a596508c736264f2bdc9c7e4456c94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51e9b08762a596508c736264f2bdc9c7e4456c94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java?ref=51e9b08762a596508c736264f2bdc9c7e4456c94","patch":"@@ -63,7 +63,7 @@ public void findById() {\n     public void save() throws ClassNotFoundException {\n         ConnInstance connInstance = new ConnInstance();\n \n-        connInstance.setLocation(new File(\"java.io.tmpdir\").toURI().toString());\n+        connInstance.setLocation(new File(System.getProperty(\"java.io.tmpdir\")).toURI().toString());\n \n         // set connector version\n         connInstance.setVersion(\"1.0\");"},{"sha":"65db5c83c805af5cfa322b61e9985dd8103cf85c","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51e9b08762a596508c736264f2bdc9c7e4456c94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51e9b08762a596508c736264f2bdc9c7e4456c94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=51e9b08762a596508c736264f2bdc9c7e4456c94","patch":"@@ -98,7 +98,7 @@ public void createWithException() {\n     public void create() {\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n \n-        connectorTO.setLocation(ConnIdBundleManager.getConnManagers().keySet().iterator().next().toString());\n+        connectorTO.setLocation(connectorService.read(100L).getLocation());\n \n         // set connector version\n         connectorTO.setVersion(connidSoapVersion);\n@@ -360,7 +360,6 @@ public void list() {\n     @Test\n     public void read() {\n         ConnInstanceTO connectorInstanceTO = connectorService.read(100L);\n-\n         assertNotNull(connectorInstanceTO);\n     }\n \n@@ -424,7 +423,7 @@ public void checkSelectedLanguage() {\n     @Test\n     public void validate() {\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n-        \n+\n         for (URI location : ConnIdBundleManager.getConnManagers().keySet()) {\n             if (!location.getScheme().equals(\"file\")) {\n                 connectorTO.setLocation(location.toString());\n@@ -557,7 +556,7 @@ public void issueSYNCOPE112() {\n         // ----------------------------------------\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n \n-        connectorTO.setLocation(ConnIdBundleManager.getConnManagers().keySet().iterator().next().toString());\n+        connectorTO.setLocation(connectorService.read(100L).getLocation());\n \n         // set connector version\n         connectorTO.setVersion(connidSoapVersion);\n@@ -600,7 +599,6 @@ public void issueSYNCOPE112() {\n         connectorTO.setConfiguration(conf);\n \n         try {\n-\n             assertFalse(connectorService.check(connectorTO));\n \n             Response response = connectorService.create(connectorTO);"}]}