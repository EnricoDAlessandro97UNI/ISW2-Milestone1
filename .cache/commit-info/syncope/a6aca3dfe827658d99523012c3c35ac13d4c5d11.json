{"sha":"a6aca3dfe827658d99523012c3c35ac13d4c5d11","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE2YWNhM2RmZTgyNzY1OGQ5OTUyMzAxMmMzYzM1YWMxM2Q0YzVkMTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-01T16:22:16Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-01T16:22:16Z"},"message":"[SYNCOPE-327] Removing cleanup thread for VirAttrCache\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1451634 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"335b46a32e3400341f5abfe3e3e65b68c4e173df","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/335b46a32e3400341f5abfe3e3e65b68c4e173df"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a6aca3dfe827658d99523012c3c35ac13d4c5d11","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a6aca3dfe827658d99523012c3c35ac13d4c5d11","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a6aca3dfe827658d99523012c3c35ac13d4c5d11","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a6aca3dfe827658d99523012c3c35ac13d4c5d11/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1b3c23b92afb10661afc724bfb4c82a97e1c19e6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1b3c23b92afb10661afc724bfb4c82a97e1c19e6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1b3c23b92afb10661afc724bfb4c82a97e1c19e6"}],"stats":{"total":101,"additions":43,"deletions":58},"files":[{"sha":"65dedc850cd89bd2d365d31847f4b2e5ab3f4fb6","filename":"core/src/main/java/org/apache/syncope/core/util/VirAttrCache.java","status":"modified","additions":22,"deletions":42,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6aca3dfe827658d99523012c3c35ac13d4c5d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6aca3dfe827658d99523012c3c35ac13d4c5d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCache.java?ref=a6aca3dfe827658d99523012c3c35ac13d4c5d11","patch":"@@ -24,8 +24,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.TimeUnit;\n import org.apache.syncope.common.types.AttributableType;\n \n /**\n@@ -43,73 +41,57 @@ public final class VirAttrCache {\n      */\n     private final int maxCacheSize;\n \n-    /**\n-     * Clean period.\n-     */\n-    private final int cleanPeriod;\n-\n     /**\n      * Cache entries.\n      */\n     private final Map<VirAttrCacheKey, VirAttrCacheValue> cache = new HashMap<VirAttrCacheKey, VirAttrCacheValue>();\n \n-    public VirAttrCache(final int ttl, final int maxCacheSize, final int cleanPeriod) {\n+    public VirAttrCache(final int ttl, final int maxCacheSize) {\n         this.ttl = ttl;\n         this.maxCacheSize = maxCacheSize;\n-        this.cleanPeriod = cleanPeriod;\n-\n-        Executors.newScheduledThreadPool(1).scheduleWithFixedDelay(\n-                new Runnable() {\n-\n-                    @Override\n-                    public void run() {\n-                        synchronized (cache) {\n-                            freeCacheSpace(false);\n-                        }\n-                    }\n-                }, cleanPeriod, cleanPeriod, TimeUnit.MINUTES);\n     }\n \n     /**\n      * Cache virtual attribute values.\n      *\n-     * @param userId user id.\n-     * @param schemaName virtual attribute name.\n-     * @param values virtual attribute values.\n+     * @param type user or role\n+     * @param id user or role id\n+     * @param schemaName virtual attribute name\n+     * @param values virtual attribute values\n      */\n-    public void put(\n-            final AttributableType type, final Long userId, final String schemaName, final List<String> values) {\n+    public void put(final AttributableType type, final Long id, final String schemaName, final List<String> values) {\n         synchronized (cache) {\n             // this operations (retrieve cache space and put entry on) have to be thread safe.\n-\n-            if (cache.size() >= maxCacheSize) {\n-                freeCacheSpace(true);\n+            if (this.cache.size() >= this.maxCacheSize) {\n+                free();\n             }\n \n-            cache.put(new VirAttrCacheKey(type, userId, schemaName), new VirAttrCacheValue(values));\n+            cache.put(new VirAttrCacheKey(type, id, schemaName), new VirAttrCacheValue(values));\n         }\n     }\n \n     /**\n      * Retrieve cached value. Return null in case of virtual attribute not cached.\n      *\n-     * @param userId user id.\n+     * @param type user or role\n+     * @param id user or role id\n      * @param schemaName virtual attribute schema name.\n      * @return cached values or null in case of virtual attribute not found.\n      */\n-    public List<String> get(final AttributableType type, final Long userId, final String schemaName) {\n-        final VirAttrCacheValue value = cache.get(new VirAttrCacheKey(type, userId, schemaName));\n+    public List<String> get(final AttributableType type, final Long id, final String schemaName) {\n+        final VirAttrCacheValue value = cache.get(new VirAttrCacheKey(type, id, schemaName));\n         return isValidEntry(value) ? value.getValues() : null;\n     }\n \n     /**\n      * Force entry expiring.\n      *\n-     * @param userId user id.\n-     * @param schemaName virtual attribute schema name.\n+     * @param type user or role\n+     * @param id user or role id\n+     * @param schemaName virtual attribute schema name\n      */\n-    public void expire(final AttributableType type, final Long userId, final String schemaName) {\n-        final VirAttrCacheValue value = cache.get(new VirAttrCacheKey(type, userId, schemaName));\n+    public void expire(final AttributableType type, final Long id, final String schemaName) {\n+        final VirAttrCacheValue value = cache.get(new VirAttrCacheKey(type, id, schemaName));\n         if (isValidEntry(value)) {\n             synchronized (cache) {\n                 value.forceExpiring();\n@@ -120,10 +102,8 @@ public void expire(final AttributableType type, final Long userId, final String\n     /**\n      * Remove expired entries if exist. If required, one entry at least (the latest recently used) will be taken off.\n      * This method is not thread safe: the caller have to take care to synchronize the call.\n-     *\n-     * @param forceEscape if TRUE the latest recently used entry at least will be taken off.\n      */\n-    private void freeCacheSpace(final boolean forceEscape) {\n+    private void free() {\n         final Set<VirAttrCacheKey> toBeRemoved = new HashSet<VirAttrCacheKey>();\n \n         Map.Entry<VirAttrCacheKey, VirAttrCacheValue> latest = null;\n@@ -139,11 +119,11 @@ private void freeCacheSpace(final boolean forceEscape) {\n             }\n         }\n \n-        if (toBeRemoved.isEmpty() && forceEscape) {\n-            // remove the oldest entry.\n+        if (toBeRemoved.isEmpty() && latest != null) {\n+            // remove the oldest entry\n             cache.remove(latest.getKey());\n         } else {\n-            // remove expired entries.\n+            // remove expired entries\n             cache.keySet().removeAll(toBeRemoved);\n         }\n     }"},{"sha":"ff8904137dd58523fb2b15327d3a029c623900c2","filename":"core/src/main/java/org/apache/syncope/core/util/VirAttrCacheKey.java","status":"modified","additions":21,"deletions":15,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6aca3dfe827658d99523012c3c35ac13d4c5d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCacheKey.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6aca3dfe827658d99523012c3c35ac13d4c5d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCacheKey.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCacheKey.java?ref=a6aca3dfe827658d99523012c3c35ac13d4c5d11","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.util;\n \n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang.builder.ToStringStyle;\n import org.apache.syncope.common.types.AttributableType;\n \n /**\n@@ -38,36 +42,38 @@ public class VirAttrCacheKey {\n     /**\n      * Virtual attribute schema name.\n      */\n-    private final transient String virAttrSchema;\n+    private final transient String virSchema;\n \n-    public VirAttrCacheKey(final AttributableType type, final Long id, final String virAttrSchema) {\n+    public VirAttrCacheKey(final AttributableType type, final Long id, final String virSchema) {\n         this.type = type;\n         this.id = id;\n-        this.virAttrSchema = virAttrSchema;\n+        this.virSchema = virSchema;\n+    }\n+\n+    public AttributableType getType() {\n+        return type;\n     }\n \n     public Long getId() {\n         return id;\n     }\n \n-    public String getVirAttrSchema() {\n-        return virAttrSchema;\n+    public String getVirSchema() {\n+        return virSchema;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n     }\n \n     @Override\n     public int hashCode() {\n-        return 31 * (31 * (31\n-                + (id == null ? 0 : id.hashCode()))\n-                + (virAttrSchema == null ? 0 : virAttrSchema.hashCode()))\n-                + (type == null ? 0 : type.hashCode());\n+        return HashCodeBuilder.reflectionHashCode(this);\n     }\n \n     @Override\n-    public boolean equals(Object o) {\n-        return o != null && o instanceof VirAttrCacheKey\n-                && ((id == null && ((VirAttrCacheKey) o).getId() == null)\n-                || id.equals(((VirAttrCacheKey) o).getId()))\n-                && ((virAttrSchema == null && ((VirAttrCacheKey) o).getVirAttrSchema() == null)\n-                || virAttrSchema.equals(((VirAttrCacheKey) o).getVirAttrSchema()));\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n     }\n }"},{"sha":"e36772f188fa98a23ef9715448be8a4a7d71b054","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6aca3dfe827658d99523012c3c35ac13d4c5d11/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6aca3dfe827658d99523012c3c35ac13d4c5d11/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=a6aca3dfe827658d99523012c3c35ac13d4c5d11","patch":"@@ -94,6 +94,5 @@ under the License.\n   <bean id=\"virAttrCache\" class=\"org.apache.syncope.core.util.VirAttrCache\" scope=\"singleton\">\n     <constructor-arg value=\"60\"/>\n     <constructor-arg value=\"5000\"/>\n-    <constructor-arg value=\"5\"/>\n   </bean>\n </beans>"}]}