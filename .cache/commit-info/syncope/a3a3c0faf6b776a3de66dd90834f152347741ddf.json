{"sha":"a3a3c0faf6b776a3de66dd90834f152347741ddf","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmEzYTNjMGZhZjZiNzc2YTNkZTY2ZGQ5MDgzNGYxNTIzNDc3NDFkZGY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-18T15:04:56Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-18T15:04:56Z"},"message":"General review: using Lists when possible, instead of Sets\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246434 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef8b58086a0c0a424e51c11a2ab8937b60ae7952","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ef8b58086a0c0a424e51c11a2ab8937b60ae7952"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a3a3c0faf6b776a3de66dd90834f152347741ddf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a3a3c0faf6b776a3de66dd90834f152347741ddf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a3a3c0faf6b776a3de66dd90834f152347741ddf","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a3a3c0faf6b776a3de66dd90834f152347741ddf/comments","author":null,"committer":null,"parents":[{"sha":"5587af43b504c896543657a2ee4f132bdfd7693b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5587af43b504c896543657a2ee4f132bdfd7693b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5587af43b504c896543657a2ee4f132bdfd7693b"}],"stats":{"total":651,"additions":337,"deletions":314},"files":[{"sha":"916cd8aa3fd04cf575d95e3b15c25d393699c142","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -17,6 +17,7 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.NoSuchElementException;\n import java.util.Set;\n import javax.persistence.FetchType;\n@@ -94,19 +95,19 @@ public void setResources(Set<Resource> resources) {\n \n     public abstract <T extends AbstractAttribute> boolean removeAttribute(T attribute);\n \n-    public abstract Set<? extends AbstractAttribute> getAttributes();\n+    public abstract List<? extends AbstractAttribute> getAttributes();\n \n     public abstract void setAttributes(\n-            Set<? extends AbstractAttribute> attributes);\n+            List<? extends AbstractAttribute> attributes);\n \n     public abstract <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n             T derivedAttribute);\n \n     public abstract <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n             T derivedAttribute);\n \n-    public abstract Set<? extends AbstractDerivedAttribute> getDerivedAttributes();\n+    public abstract List<? extends AbstractDerivedAttribute> getDerivedAttributes();\n \n     public abstract void setDerivedAttributes(\n-            Set<? extends AbstractDerivedAttribute> derivedAttributes);\n+            List<? extends AbstractDerivedAttribute> derivedAttributes);\n }"},{"sha":"57dc65e3800210163f16150d2643747a617a9fbb","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -39,7 +39,10 @@ protected String[] getExcludeFields() {\n         for (int i = 0; i < propertyDescriptors.length; i++) {\n \n             if (propertyDescriptors[i].getPropertyType().isInstance(\n-                    Collections.EMPTY_SET)) {\n+                    Collections.EMPTY_SET)\n+                    || propertyDescriptors[i].getPropertyType().isInstance(\n+                    Collections.EMPTY_LIST)) {\n+                \n                 excludeFields.add(propertyDescriptors[i].getName());\n             }\n         }"},{"sha":"ffdf8b44b086851c8d225eef25eff2cfb5e1c2b5","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerivedSchema.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedSchema.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.util.List;\n import java.util.Set;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n@@ -45,9 +46,9 @@ public void setExpression(String expression) {\n \n     public abstract <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(T derivedAttribute);\n \n-    public abstract Set<? extends AbstractDerivedAttribute> getDerivedAttributes();\n+    public abstract List<? extends AbstractDerivedAttribute> getDerivedAttributes();\n \n-    public abstract <T extends AbstractDerivedAttribute> void setDerivedAttributes(Set<T> derivedAttributes);\n+    public abstract <T extends AbstractDerivedAttribute> void setDerivedAttributes(List<T> derivedAttributes);\n \n     public abstract <T extends AbstractSchema> boolean addSchema(T schema);\n \n@@ -61,7 +62,7 @@ public void setExpression(String expression) {\n \n     public abstract boolean removeMapping(SchemaMapping mapping);\n \n-    public abstract Set<SchemaMapping> getMappings();\n+    public abstract List<SchemaMapping> getMappings();\n \n-    public abstract void setMappings(Set<SchemaMapping> mappings);\n+    public abstract void setMappings(List<SchemaMapping> mappings);\n }"},{"sha":"c3528d8cd132710439016ecf22f38823564a3c12","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -20,7 +20,7 @@\n import java.text.DecimalFormat;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n-import java.util.Set;\n+import java.util.List;\n import javax.persistence.Column;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n@@ -201,27 +201,27 @@ public abstract <T extends AbstractAttribute> boolean addAttribute(\n     public abstract <T extends AbstractAttribute> boolean removeAttribute(\n             T attribute);\n \n-    public abstract Set<? extends AbstractAttribute> getAttributes();\n+    public abstract List<? extends AbstractAttribute> getAttributes();\n \n     public abstract void setAttributes(\n-            Set<? extends AbstractAttribute> attributes);\n+            List<? extends AbstractAttribute> attributes);\n \n     public abstract <T extends AbstractDerivedSchema> boolean addDerivedSchema(\n             T derivedSchema);\n \n     public abstract <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n             T derivedSchema);\n \n-    public abstract Set<? extends AbstractDerivedSchema> getDerivedSchemas();\n+    public abstract List<? extends AbstractDerivedSchema> getDerivedSchemas();\n \n     public abstract void setDerivedSchemas(\n-            Set<? extends AbstractDerivedSchema> derivedSchemas);\n+            List<? extends AbstractDerivedSchema> derivedSchemas);\n \n     public abstract boolean addMapping(SchemaMapping mapping);\n \n     public abstract boolean removeMapping(SchemaMapping mapping);\n \n-    public abstract Set<SchemaMapping> getMappings();\n+    public abstract List<SchemaMapping> getMappings();\n \n-    public abstract void setMappings(Set<SchemaMapping> mappings);\n+    public abstract void setMappings(List<SchemaMapping> mappings);\n }"},{"sha":"0f5c689de509757353e7ca0bb36a59463849cd78","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnectorInstance.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,12 +14,11 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n@@ -32,29 +31,25 @@ public class ConnectorInstance extends AbstractBaseBean {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n-\n     /**\n      * Connector class name prefix used to retrieve configuration bean\n      */\n     @Column(nullable = false)\n     private String connectorName;\n-\n     /**\n      * ConnectorBundle-Name: Qualified name for the connector bundle.\n      * Within a given deployment, the pair (ConnectorBundle-Name,\n      * ConnectorBundle-Version) must be unique.\n      */\n     @Column(nullable = false)\n     private String bundleName;\n-\n     /**\n      * ConnectorBundle-Version: The version of the bundle. Within a given\n      * deployment, the pair (ConnectorBundle-Name, ConnectorBundle-Version)\n      * must be unique.\n      */\n     @Column(nullable = false)\n     private String version;\n-\n     /**\n      * The main configuration for the connector instance.\n      * This is directly implemented by the Configuration bean class which\n@@ -63,14 +58,13 @@ public class ConnectorInstance extends AbstractBaseBean {\n     @Lob\n     @Column(nullable = false)\n     private String xmlConfiguration;\n-\n     /**\n      * Provisioning target resources associated to the connector.\n      * The connector can be considered the resource's type.\n      */\n     @OneToMany(cascade = {CascadeType.REFRESH, CascadeType.MERGE},\n-    fetch = FetchType.EAGER, mappedBy = \"connector\")\n-    private Set<Resource> resources;\n+    mappedBy = \"connector\")\n+    private List<Resource> resources;\n \n     public String getVersion() {\n         return version;\n@@ -108,22 +102,28 @@ public Long getId() {\n         return id;\n     }\n \n-    public Set<Resource> getResources() {\n-        if (this.resources == null) this.resources = new HashSet<Resource>();\n+    public List<Resource> getResources() {\n+        if (this.resources == null) {\n+            this.resources = new ArrayList<Resource>();\n+        }\n         return this.resources;\n     }\n \n-    public void setResources(Set<Resource> resources) {\n+    public void setResources(List<Resource> resources) {\n         this.resources = resources;\n     }\n \n     public boolean addResource(Resource resource) {\n-        if (this.resources == null) this.resources = new HashSet<Resource>();\n+        if (this.resources == null) {\n+            this.resources = new ArrayList<Resource>();\n+        }\n         return this.resources.add(resource);\n     }\n \n     public boolean removeResource(Resource resource) {\n-        if (this.resources == null) return true;\n+        if (this.resources == null) {\n+            return true;\n+        }\n         return this.resources.remove(resource);\n     }\n }"},{"sha":"b8947ebd4f20794f1a4a82619353d045db25ad8a","filename":"core/src/main/java/org/syncope/core/persistence/beans/Entitlement.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -15,8 +15,8 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.HashSet;\n-import org.syncope.core.persistence.beans.role.SyncopeRole;\n import java.util.Set;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -28,10 +28,8 @@ public class Entitlement extends AbstractBaseBean {\n \n     @Id\n     private String name;\n-\n     @Column(nullable = true)\n     private String description;\n-\n     @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"entitlements\")\n     private Set<SyncopeRole> roles;\n \n@@ -52,17 +50,23 @@ public void setName(String name) {\n     }\n \n     public boolean addRole(SyncopeRole role) {\n-        if (this.roles == null) this.roles = new HashSet<SyncopeRole>();\n+        if (this.roles == null) {\n+            this.roles = new HashSet<SyncopeRole>();\n+        }\n         return this.roles.add(role);\n     }\n \n     public boolean removeRole(SyncopeRole role) {\n-        if (this.roles == null) return true;\n+        if (this.roles == null) {\n+            return true;\n+        }\n         return this.roles.remove(role);\n     }\n \n     public Set<SyncopeRole> getRoles() {\n-        if (this.roles == null) this.roles = new HashSet<SyncopeRole>();\n+        if (this.roles == null) {\n+            this.roles = new HashSet<SyncopeRole>();\n+        }\n         return this.roles;\n     }\n "},{"sha":"46769a2c8b8380cb8b4607376a7c5384e575a500","filename":"core/src/main/java/org/syncope/core/persistence/beans/Resource.java","status":"modified","additions":33,"deletions":17,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,7 +14,9 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n@@ -34,31 +36,27 @@ public class Resource extends AbstractBaseBean {\n      */\n     @Id\n     private String name;\n-\n     /**\n      * The resource type is identified by the associated connector.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private ConnectorInstance connector;\n-\n     /**\n      * Users associated to this resource.\n      */\n     @ManyToMany(fetch = FetchType.EAGER)\n     private Set<SyncopeUser> users;\n-\n     /**\n      * Roles associated to this resource.\n      */\n     @ManyToMany(fetch = FetchType.EAGER)\n     private Set<SyncopeRole> roles;\n-\n     /**\n      * Attribute mappings.\n      */\n     @OneToMany(cascade = {CascadeType.REFRESH, CascadeType.MERGE},\n-    fetch = FetchType.EAGER, mappedBy = \"resource\")\n-    private Set<SchemaMapping> mappings;\n+    mappedBy = \"resource\")\n+    private List<SchemaMapping> mappings;\n \n     public ConnectorInstance getConnector() {\n         return connector;\n@@ -68,22 +66,28 @@ public void setConnector(ConnectorInstance connector) {\n         this.connector = connector;\n     }\n \n-    public Set<SchemaMapping> getMappings() {\n-        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+    public List<SchemaMapping> getMappings() {\n+        if (this.mappings == null) {\n+            this.mappings = new ArrayList<SchemaMapping>();\n+        }\n         return this.mappings;\n     }\n \n     public boolean removeMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) return true;\n+        if (this.mappings == null) {\n+            return true;\n+        }\n         return this.mappings.remove(mapping);\n     }\n \n     public boolean addMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+        if (this.mappings == null) {\n+            this.mappings = new ArrayList<SchemaMapping>();\n+        }\n         return this.mappings.add(mapping);\n     }\n \n-    public void setMappings(Set<SchemaMapping> mappings) {\n+    public void setMappings(List<SchemaMapping> mappings) {\n         this.mappings = mappings;\n     }\n \n@@ -96,17 +100,23 @@ public void setName(String name) {\n     }\n \n     public Set<SyncopeRole> getRoles() {\n-        if (this.roles == null) this.roles = new HashSet<SyncopeRole>();\n+        if (this.roles == null) {\n+            this.roles = new HashSet<SyncopeRole>();\n+        }\n         return this.roles;\n     }\n \n     public boolean addRole(SyncopeRole role) {\n-        if (this.roles == null) this.roles = new HashSet<SyncopeRole>();\n+        if (this.roles == null) {\n+            this.roles = new HashSet<SyncopeRole>();\n+        }\n         return this.roles.add(role);\n     }\n \n     public boolean removeRole(SyncopeRole role) {\n-        if (this.roles == null) return true;\n+        if (this.roles == null) {\n+            return true;\n+        }\n         return this.roles.remove(role);\n     }\n \n@@ -115,17 +125,23 @@ public void setRoles(Set<SyncopeRole> roles) {\n     }\n \n     public Set<SyncopeUser> getUsers() {\n-        if (this.users == null) this.users = new HashSet<SyncopeUser>();\n+        if (this.users == null) {\n+            this.users = new HashSet<SyncopeUser>();\n+        }\n         return this.users;\n     }\n \n     public boolean addUser(SyncopeUser user) {\n-        if (this.users == null) this.users = new HashSet<SyncopeUser>();\n+        if (this.users == null) {\n+            this.users = new HashSet<SyncopeUser>();\n+        }\n         return this.users.add(user);\n     }\n \n     public boolean removeUser(SyncopeUser user) {\n-        if (this.users == null) return true;\n+        if (this.users == null) {\n+            return true;\n+        }\n         return this.users.remove(user);\n     }\n "},{"sha":"8870e8d8f1cb0f27e785c95a99c5048bd2bbcde5","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":14,"deletions":16,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,12 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n@@ -46,16 +46,14 @@ public class Membership extends AbstractAttributable {\n     private SyncopeUser syncopeUser;\n     @ManyToOne\n     private SyncopeRole syncopeRole;\n-    @OneToMany(cascade = CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"owner\")\n-    private Set<MembershipAttribute> attributes;\n-    @OneToMany(cascade = CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"owner\")\n-    private Set<MembershipDerivedAttribute> derivedAttributes;\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    private List<MembershipAttribute> attributes;\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    private List<MembershipDerivedAttribute> derivedAttributes;\n \n     public Membership() {\n-        attributes = new HashSet<MembershipAttribute>();\n-        derivedAttributes = new HashSet<MembershipDerivedAttribute>();\n+        attributes = new ArrayList<MembershipAttribute>();\n+        derivedAttributes = new ArrayList<MembershipDerivedAttribute>();\n     }\n \n     public Long getId() {\n@@ -89,13 +87,13 @@ public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n     }\n \n     @Override\n-    public Set<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttribute> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(Set<? extends AbstractAttribute> attributes) {\n-        this.attributes = (Set<MembershipAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n+        this.attributes = (List<MembershipAttribute>) attributes;\n     }\n \n     @Override\n@@ -115,16 +113,16 @@ public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n     }\n \n     @Override\n-    public Set<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n     public void setDerivedAttributes(\n-            Set<? extends AbstractDerivedAttribute> derivedAttributes) {\n+            List<? extends AbstractDerivedAttribute> derivedAttributes) {\n \n         this.derivedAttributes =\n-                (Set<MembershipDerivedAttribute>) derivedAttributes;\n+                (List<MembershipDerivedAttribute>) derivedAttributes;\n     }\n \n     @Override"},{"sha":"afc659ee63b45f0984a9e2cf506b0f77b327b93b","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipDerivedSchema.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedSchema.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,11 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n@@ -31,12 +32,12 @@ public class MembershipDerivedSchema extends AbstractDerivedSchema {\n \n     @ManyToMany\n     private Set<MembershipSchema> schemas;\n-    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"derivedSchema\")\n-    private Set<MembershipDerivedAttribute> derivedAttributes;\n+    @OneToMany(mappedBy = \"derivedSchema\")\n+    private List<MembershipDerivedAttribute> derivedAttributes;\n \n     public MembershipDerivedSchema() {\n         schemas = new HashSet<MembershipSchema>();\n-        derivedAttributes = new HashSet<MembershipDerivedAttribute>();\n+        derivedAttributes = new ArrayList<MembershipDerivedAttribute>();\n     }\n \n     @Override\n@@ -74,15 +75,15 @@ public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n     }\n \n     @Override\n-    public Set<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n     public <T extends AbstractDerivedAttribute> void setDerivedAttributes(\n-            Set<T> derivedAttributes) {\n+            List<T> derivedAttributes) {\n \n-        this.derivedAttributes = (Set<MembershipDerivedAttribute>) derivedAttributes;\n+        this.derivedAttributes = (List<MembershipDerivedAttribute>) derivedAttributes;\n     }\n \n     /**\n@@ -110,15 +111,15 @@ public boolean removeMapping(SchemaMapping mapping) {\n      * @return\n      */\n     @Override\n-    public Set<SchemaMapping> getMappings() {\n-        return Collections.EMPTY_SET;\n+    public List<SchemaMapping> getMappings() {\n+        return Collections.EMPTY_LIST;\n     }\n \n     /**\n      * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n      * @param mappings\n      */\n     @Override\n-    public void setMappings(Set<SchemaMapping> mappings) {\n+    public void setMappings(List<SchemaMapping> mappings) {\n     }\n }"},{"sha":"6235f74eb857932d8959dfd948911f7371c144ee","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipSchema.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,8 +14,8 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -29,21 +29,21 @@\n @Entity\n public class MembershipSchema extends AbstractSchema {\n \n-    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"schema\")\n-    private Set<MembershipAttribute> attributes;\n+    @OneToMany(mappedBy = \"schema\")\n+    private List<MembershipAttribute> attributes;\n     @ManyToMany(mappedBy = \"schemas\")\n-    private Set<MembershipDerivedSchema> derivedSchemas;\n+    private List<MembershipDerivedSchema> derivedSchemas;\n     /**\n      * All the mappings of the attribute schema.\n      */\n     @OneToMany(cascade = CascadeType.MERGE,\n     fetch = FetchType.EAGER, mappedBy = \"membershipSchema\")\n-    private Set<SchemaMapping> mappings;\n+    private List<SchemaMapping> mappings;\n \n     public MembershipSchema() {\n-        attributes = new HashSet<MembershipAttribute>();\n-        derivedSchemas = new HashSet<MembershipDerivedSchema>();\n-        mappings = new HashSet<SchemaMapping>();\n+        attributes = new ArrayList<MembershipAttribute>();\n+        derivedSchemas = new ArrayList<MembershipDerivedSchema>();\n+        mappings = new ArrayList<SchemaMapping>();\n     }\n \n     @Override\n@@ -57,13 +57,13 @@ public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n     }\n \n     @Override\n-    public Set<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttribute> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(Set<? extends AbstractAttribute> attributes) {\n-        this.attributes = (Set<MembershipAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n+        this.attributes = (List<MembershipAttribute>) attributes;\n     }\n \n     @Override\n@@ -81,34 +81,34 @@ public <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n     }\n \n     @Override\n-    public Set<? extends AbstractDerivedSchema> getDerivedSchemas() {\n+    public List<? extends AbstractDerivedSchema> getDerivedSchemas() {\n         return derivedSchemas;\n     }\n \n     @Override\n     public void setDerivedSchemas(\n-            Set<? extends AbstractDerivedSchema> derivedSchemas) {\n+            List<? extends AbstractDerivedSchema> derivedSchemas) {\n \n-        this.derivedSchemas = (Set<MembershipDerivedSchema>) derivedSchemas;\n+        this.derivedSchemas = (List<MembershipDerivedSchema>) derivedSchemas;\n     }\n \n     @Override\n-    public Set<SchemaMapping> getMappings() {\n+    public List<SchemaMapping> getMappings() {\n         if (this.mappings == null) {\n-            this.mappings = new HashSet<SchemaMapping>();\n+            this.mappings = new ArrayList<SchemaMapping>();\n         }\n         return this.mappings;\n     }\n \n     @Override\n-    public void setMappings(Set<SchemaMapping> mappings) {\n+    public void setMappings(List<SchemaMapping> mappings) {\n         this.mappings = mappings;\n     }\n \n     @Override\n     public boolean addMapping(SchemaMapping mapping) {\n         if (this.mappings == null) {\n-            this.mappings = new HashSet<SchemaMapping>();\n+            this.mappings = new ArrayList<SchemaMapping>();\n         }\n         return this.mappings.add(mapping);\n     }"},{"sha":"9b7072c4518d271eda858b0b2aef1c739b024c7a","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleDerivedSchema.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,11 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n@@ -31,12 +32,12 @@ public class RoleDerivedSchema extends AbstractDerivedSchema {\n \n     @ManyToMany\n     private Set<RoleSchema> schemas;\n-    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"derivedSchema\")\n-    private Set<RoleDerivedAttribute> derivedAttributes;\n+    @OneToMany(mappedBy = \"derivedSchema\")\n+    private List<RoleDerivedAttribute> derivedAttributes;\n \n     public RoleDerivedSchema() {\n         schemas = new HashSet<RoleSchema>();\n-        derivedAttributes = new HashSet<RoleDerivedAttribute>();\n+        derivedAttributes = new ArrayList<RoleDerivedAttribute>();\n     }\n \n     @Override\n@@ -74,15 +75,15 @@ public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n     }\n \n     @Override\n-    public Set<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n     public <T extends AbstractDerivedAttribute> void setDerivedAttributes(\n-            Set<T> derivedAttributes) {\n+            List<T> derivedAttributes) {\n \n-        this.derivedAttributes = (Set<RoleDerivedAttribute>) derivedAttributes;\n+        this.derivedAttributes = (List<RoleDerivedAttribute>) derivedAttributes;\n     }\n \n     /**\n@@ -110,15 +111,15 @@ public boolean removeMapping(SchemaMapping mapping) {\n      * @return\n      */\n     @Override\n-    public Set<SchemaMapping> getMappings() {\n-        return Collections.EMPTY_SET;\n+    public List<SchemaMapping> getMappings() {\n+        return Collections.EMPTY_LIST;\n     }\n \n     /**\n      * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n      * @param mappings\n      */\n     @Override\n-    public void setMappings(Set<SchemaMapping> mappings) {\n+    public void setMappings(List<SchemaMapping> mappings) {\n     }\n }"},{"sha":"35c3f0ecdf9537d0df0d47e37bdafab89a6abad6","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleSchema.java","status":"modified","additions":18,"deletions":20,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,11 +14,10 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n@@ -29,21 +28,20 @@\n @Entity\n public class RoleSchema extends AbstractSchema {\n \n-    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"schema\")\n-    private Set<RoleAttribute> attributes;\n+    @OneToMany(mappedBy = \"schema\")\n+    private List<RoleAttribute> attributes;\n     @ManyToMany(mappedBy = \"schemas\")\n-    private Set<RoleDerivedSchema> derivedSchemas;\n+    private List<RoleDerivedSchema> derivedSchemas;\n     /**\n      * All the mappings of the attribute schema.\n      */\n-    @OneToMany(cascade = CascadeType.MERGE,\n-    fetch = FetchType.EAGER, mappedBy = \"roleSchema\")\n-    private Set<SchemaMapping> mappings;\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"roleSchema\")\n+    private List<SchemaMapping> mappings;\n \n     public RoleSchema() {\n-        attributes = new HashSet<RoleAttribute>();\n-        derivedSchemas = new HashSet<RoleDerivedSchema>();\n-        mappings = new HashSet<SchemaMapping>();\n+        attributes = new ArrayList<RoleAttribute>();\n+        derivedSchemas = new ArrayList<RoleDerivedSchema>();\n+        mappings = new ArrayList<SchemaMapping>();\n     }\n \n     @Override\n@@ -57,13 +55,13 @@ public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n     }\n \n     @Override\n-    public Set<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttribute> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(Set<? extends AbstractAttribute> attributes) {\n-        this.attributes = (Set<RoleAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n+        this.attributes = (List<RoleAttribute>) attributes;\n     }\n \n     @Override\n@@ -81,24 +79,24 @@ public <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n     }\n \n     @Override\n-    public Set<? extends AbstractDerivedSchema> getDerivedSchemas() {\n+    public List<? extends AbstractDerivedSchema> getDerivedSchemas() {\n         return derivedSchemas;\n     }\n \n     @Override\n     public void setDerivedSchemas(\n-            Set<? extends AbstractDerivedSchema> derivedSchemas) {\n+            List<? extends AbstractDerivedSchema> derivedSchemas) {\n \n-        this.derivedSchemas = (Set<RoleDerivedSchema>) derivedSchemas;\n+        this.derivedSchemas = (List<RoleDerivedSchema>) derivedSchemas;\n     }\n \n     @Override\n-    public Set<SchemaMapping> getMappings() {\n+    public List<SchemaMapping> getMappings() {\n         return mappings;\n     }\n \n     @Override\n-    public void setMappings(Set<SchemaMapping> mappings) {\n+    public void setMappings(List<SchemaMapping> mappings) {\n         this.mappings = mappings;\n     }\n "},{"sha":"559a20a8f52459899c895df39929f0b383ad62a2","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":16,"deletions":18,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -50,21 +50,19 @@ public class SyncopeRole extends AbstractAttributable {\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeRole\")\n     private List<Membership> memberships;\n     @ManyToMany(fetch = FetchType.LAZY)\n-    private Set<Entitlement> entitlements;\n-    @OneToMany(cascade = CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"owner\")\n-    private Set<RoleAttribute> attributes;\n-    @OneToMany(cascade = CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"owner\")\n-    private Set<RoleDerivedAttribute> derivedAttributes;\n+    private List<Entitlement> entitlements;\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    private List<RoleAttribute> attributes;\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    private List<RoleDerivedAttribute> derivedAttributes;\n     private boolean inheritAttributes;\n     private boolean inheritDerivedAttributes;\n \n     public SyncopeRole() {\n         memberships = new ArrayList<Membership>();\n-        entitlements = new HashSet<Entitlement>();\n-        attributes = new HashSet<RoleAttribute>();\n-        derivedAttributes = new HashSet<RoleDerivedAttribute>();\n+        entitlements = new ArrayList<Entitlement>();\n+        attributes = new ArrayList<RoleAttribute>();\n+        derivedAttributes = new ArrayList<RoleDerivedAttribute>();\n     }\n \n     public Long getId() {\n@@ -95,11 +93,11 @@ public boolean removeEntitlement(Entitlement entitlement) {\n         return entitlements.remove(entitlement);\n     }\n \n-    public Set<Entitlement> getEntitlements() {\n+    public List<Entitlement> getEntitlements() {\n         return entitlements;\n     }\n \n-    public void setEntitlements(Set<Entitlement> entitlements) {\n+    public void setEntitlements(List<Entitlement> entitlements) {\n         this.entitlements = entitlements;\n     }\n \n@@ -140,13 +138,13 @@ public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n     }\n \n     @Override\n-    public Set<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttribute> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(Set<? extends AbstractAttribute> attributes) {\n-        this.attributes = (Set<RoleAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n+        this.attributes = (List<RoleAttribute>) attributes;\n     }\n \n     @Override\n@@ -164,15 +162,15 @@ public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n     }\n \n     @Override\n-    public Set<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n     public void setDerivedAttributes(\n-            Set<? extends AbstractDerivedAttribute> derivedAttributes) {\n+            List<? extends AbstractDerivedAttribute> derivedAttributes) {\n \n-        this.derivedAttributes = (Set<RoleDerivedAttribute>) derivedAttributes;\n+        this.derivedAttributes = (List<RoleDerivedAttribute>) derivedAttributes;\n     }\n \n     public boolean isInheritAttributes() {"},{"sha":"ee188037b0ab6b0d1d735fb3ceaf17508a06a6ff","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -26,7 +26,6 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n@@ -63,12 +62,10 @@ public class SyncopeUser extends AbstractAttributable {\n     private byte[] password;\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeUser\")\n     private List<Membership> memberships;\n-    @OneToMany(cascade = CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"owner\")\n-    private Set<UserAttribute> attributes;\n-    @OneToMany(cascade = CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"owner\")\n-    private Set<UserDerivedAttribute> derivedAttributes;\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    private List<UserAttribute> attributes;\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    private List<UserDerivedAttribute> derivedAttributes;\n     @Column(nullable = true)\n     private Long workflowId;\n     @Temporal(TemporalType.TIMESTAMP)\n@@ -80,8 +77,8 @@ public class SyncopeUser extends AbstractAttributable {\n \n     public SyncopeUser() {\n         memberships = new ArrayList<Membership>();\n-        attributes = new HashSet<UserAttribute>();\n-        derivedAttributes = new HashSet<UserDerivedAttribute>();\n+        attributes = new ArrayList<UserAttribute>();\n+        derivedAttributes = new ArrayList<UserDerivedAttribute>();\n     }\n \n     public Long getId() {\n@@ -163,13 +160,13 @@ public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n     }\n \n     @Override\n-    public Set<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttribute> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(Set<? extends AbstractAttribute> attributes) {\n-        this.attributes = (Set<UserAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n+        this.attributes = (List<UserAttribute>) attributes;\n     }\n \n     @Override\n@@ -187,15 +184,15 @@ public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n     }\n \n     @Override\n-    public Set<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n     public void setDerivedAttributes(\n-            Set<? extends AbstractDerivedAttribute> derivedAttributes) {\n+            List<? extends AbstractDerivedAttribute> derivedAttributes) {\n \n-        this.derivedAttributes = (Set<UserDerivedAttribute>) derivedAttributes;\n+        this.derivedAttributes = (List<UserDerivedAttribute>) derivedAttributes;\n     }\n \n     public Long getWorkflowId() {"},{"sha":"fadc4379f732839d2647288818c30bc94d1884a2","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserDerivedSchema.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,11 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n@@ -31,12 +32,12 @@ public class UserDerivedSchema extends AbstractDerivedSchema {\n \n     @ManyToMany\n     private Set<UserSchema> schemas;\n-    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"derivedSchema\")\n-    private Set<UserDerivedAttribute> derivedAttributes;\n+    @OneToMany(mappedBy = \"derivedSchema\")\n+    private List<UserDerivedAttribute> derivedAttributes;\n \n     public UserDerivedSchema() {\n         schemas = new HashSet<UserSchema>();\n-        derivedAttributes = new HashSet<UserDerivedAttribute>();\n+        derivedAttributes = new ArrayList<UserDerivedAttribute>();\n     }\n \n     @Override\n@@ -74,15 +75,15 @@ public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n     }\n \n     @Override\n-    public Set<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n     public <T extends AbstractDerivedAttribute> void setDerivedAttributes(\n-            Set<T> derivedAttributes) {\n+            List<T> derivedAttributes) {\n \n-        this.derivedAttributes = (Set<UserDerivedAttribute>) derivedAttributes;\n+        this.derivedAttributes = (List<UserDerivedAttribute>) derivedAttributes;\n     }\n \n     /**\n@@ -110,15 +111,15 @@ public boolean removeMapping(SchemaMapping mapping) {\n      * @return\n      */\n     @Override\n-    public Set<SchemaMapping> getMappings() {\n-        return Collections.EMPTY_SET;\n+    public List<SchemaMapping> getMappings() {\n+        return Collections.EMPTY_LIST;\n     }\n \n     /**\n      * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n      * @param mappings\n      */\n     @Override\n-    public void setMappings(Set<SchemaMapping> mappings) {\n+    public void setMappings(List<SchemaMapping> mappings) {\n     }\n }"},{"sha":"cdf2e843b6c2d5215f1bd3842e8a55ec2c082a3b","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserSchema.java","status":"modified","additions":27,"deletions":25,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,11 +14,10 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n@@ -29,23 +28,20 @@\n @Entity\n public class UserSchema extends AbstractSchema {\n \n-    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"schema\")\n-    private Set<UserAttribute> attributes;\n-\n+    @OneToMany(mappedBy = \"schema\")\n+    private List<UserAttribute> attributes;\n     @ManyToMany(mappedBy = \"schemas\")\n-    private Set<UserDerivedSchema> derivedSchemas;\n-\n+    private List<UserDerivedSchema> derivedSchemas;\n     /**\n      * All the mappings of the attribute schema.\n      */\n-    @OneToMany(cascade = CascadeType.MERGE,\n-    fetch = FetchType.EAGER, mappedBy = \"userSchema\")\n-    private Set<SchemaMapping> mappings;\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"userSchema\")\n+    private List<SchemaMapping> mappings;\n \n     public UserSchema() {\n-        attributes = new HashSet<UserAttribute>();\n-        derivedSchemas = new HashSet<UserDerivedSchema>();\n-        mappings = new HashSet<SchemaMapping>();\n+        attributes = new ArrayList<UserAttribute>();\n+        derivedSchemas = new ArrayList<UserDerivedSchema>();\n+        mappings = new ArrayList<SchemaMapping>();\n     }\n \n     @Override\n@@ -59,13 +55,13 @@ public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n     }\n \n     @Override\n-    public Set<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttribute> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(Set<? extends AbstractAttribute> attributes) {\n-        this.attributes = (Set<UserAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n+        this.attributes = (List<UserAttribute>) attributes;\n     }\n \n     @Override\n@@ -83,37 +79,43 @@ public <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n     }\n \n     @Override\n-    public Set<? extends AbstractDerivedSchema> getDerivedSchemas() {\n+    public List<? extends AbstractDerivedSchema> getDerivedSchemas() {\n         return derivedSchemas;\n     }\n \n     @Override\n     public void setDerivedSchemas(\n-            Set<? extends AbstractDerivedSchema> derivedSchemas) {\n+            List<? extends AbstractDerivedSchema> derivedSchemas) {\n \n-        this.derivedSchemas = (Set<UserDerivedSchema>) derivedSchemas;\n+        this.derivedSchemas = (List<UserDerivedSchema>) derivedSchemas;\n     }\n \n     @Override\n-    public Set<SchemaMapping> getMappings() {\n-        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+    public List<SchemaMapping> getMappings() {\n+        if (this.mappings == null) {\n+            this.mappings = new ArrayList<SchemaMapping>();\n+        }\n         return this.mappings;\n     }\n \n     @Override\n-    public void setMappings(Set<SchemaMapping> mappings) {\n+    public void setMappings(List<SchemaMapping> mappings) {\n         this.mappings = mappings;\n     }\n \n     @Override\n     public boolean addMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+        if (this.mappings == null) {\n+            this.mappings = new ArrayList<SchemaMapping>();\n+        }\n         return this.mappings.add(mapping);\n     }\n \n     @Override\n     public boolean removeMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) return true;\n+        if (this.mappings == null) {\n+            return true;\n+        }\n         return this.mappings.remove(mapping);\n     }\n }"},{"sha":"606234d6e847e18acf64543d60dc166b82504a90","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedSchemaDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -77,7 +77,7 @@ public <T extends AbstractDerivedSchema> void delete(String name,\n             derivedAttributeDAO.delete(derivedAttribute.getId(),\n                     derivedAttribute.getClass());\n         }\n-        derivedSchema.setDerivedAttributes(Collections.EMPTY_SET);\n+        derivedSchema.setDerivedAttributes(Collections.EMPTY_LIST);\n \n         entityManager.remove(derivedSchema);\n     }"},{"sha":"2801be629607da71c7389b69baf045fef2ad5aaa","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/EntitlementDAOImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -57,8 +57,7 @@ public void delete(String name) {\n             return;\n         }\n \n-        Set<SyncopeRole> roles = entitlement.getRoles();\n-        for (SyncopeRole role : roles) {\n+        for (SyncopeRole role : entitlement.getRoles()) {\n             role.removeEntitlement(entitlement);\n             syncopeRoleDAO.save(role);\n         }"},{"sha":"bf7b45f7365c5ccd0cee8515384a721b01634a67","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -62,7 +62,7 @@ public void delete(String name) {\n             return;\n         }\n \n-        Set<SchemaMapping> mappings = resource.getMappings();\n+        List<SchemaMapping> mappings = resource.getMappings();\n         if (mappings != null) {\n             for (SchemaMapping mapping : mappings) {\n                 mapping.setResource(null);\n@@ -88,7 +88,7 @@ public void delete(String name) {\n         resource.setRoles(null);\n \n         ConnectorInstance connector = resource.getConnector();\n-        Set<Resource> resources = null;\n+        List<Resource> resources = null;\n         if (connector != null) {\n             resources = connector.getResources();\n         }"},{"sha":"84c3228a1cf6fad754ae52b5644841fcf89cf2e4","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -78,13 +78,13 @@ public <T extends AbstractSchema> void delete(\n         for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {\n             derivedSchema.removeSchema(schema);\n         }\n-        schema.setDerivedSchemas(Collections.EMPTY_SET);\n+        schema.setDerivedSchemas(Collections.EMPTY_LIST);\n \n         for (AbstractAttribute attribute : schema.getAttributes()) {\n             attribute.setSchema(null);\n             attributeDAO.delete(attribute.getId(), attribute.getClass());\n         }\n-        schema.setAttributes(Collections.EMPTY_SET);\n+        schema.setAttributes(Collections.EMPTY_LIST);\n \n         for (SchemaMapping schemaMapping : schema.getMappings()) {\n             if (schema instanceof UserSchema) {\n@@ -99,7 +99,7 @@ public <T extends AbstractSchema> void delete(\n \n             schemaMappingDAO.delete(schemaMapping.getId());\n         }\n-        schema.setMappings(Collections.EMPTY_SET);\n+        schema.setMappings(Collections.EMPTY_LIST);\n \n         entityManager.remove(schema);\n     }"},{"sha":"8c786c93a09178de03ce6c5c4514aa6bea76c40a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeRoleDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -184,7 +184,7 @@ public void delete(Long id) {\n         for (Entitlement entitlement : role.getEntitlements()) {\n             entitlement.removeRole(role);\n         }\n-        role.setEntitlements(Collections.EMPTY_SET);\n+        role.setEntitlements(Collections.EMPTY_LIST);\n \n         role.setParent(null);\n         entityManager.remove(role);"},{"sha":"35d8a171e10676f09fb3ba8c223a1b420792c281","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -217,7 +217,7 @@ private void propagate(SyncopeUser user, Resource resource, Type type)\n         String password = user.getPassword();\n \n         // get mapping\n-        Set<SchemaMapping> mappings = resource.getMappings();\n+        List<SchemaMapping> mappings = resource.getMappings();\n \n         // set of user attributes\n         Set<Attribute> attrs = new HashSet<Attribute>();"},{"sha":"629078bd82a49cb8a211f005dc5f418be720ae6a","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -206,7 +206,7 @@ public ResourceTO update(HttpServletResponse response,\n             }\n \n             // remove older mappings\n-            Set<SchemaMapping> mappings = resource.getMappings();\n+            List<SchemaMapping> mappings = resource.getMappings();\n             for (SchemaMapping mapping : mappings) {\n                 mapping.setResource(null);\n                 schemaMappingDAO.delete(mapping.getId());\n@@ -357,7 +357,7 @@ public SchemaMappingTOs createMappings(HttpServletResponse response,\n             }\n \n             // resource.getMappings() can never return a null value\n-            Set<SchemaMapping> existentMappings = resource.getMappings();\n+            List<SchemaMapping> existentMappings = resource.getMappings();\n \n             for (SchemaMapping mapping : existentMappings) {\n                 schemaMappingDAO.delete(mapping.getId());\n@@ -366,7 +366,7 @@ public SchemaMappingTOs createMappings(HttpServletResponse response,\n             // to be sure ...\n             resource.getMappings().clear();\n \n-            Set<SchemaMapping> schemaMappings =\n+            List<SchemaMapping> schemaMappings =\n                     binder.getSchemaMappings(resource, mappings);\n \n             SchemaMapping actual = null;\n@@ -426,7 +426,7 @@ public void deleteMappings(HttpServletResponse response,\n \n         } else {\n \n-            Set<SchemaMapping> mappings = resource.getMappings();\n+            List<SchemaMapping> mappings = resource.getMappings();\n \n             // resource.getMappings() can never return a null value\n \n@@ -469,7 +469,7 @@ public SchemaMappingTOs getResourceMapping(HttpServletResponse response,\n             throw compositeErrorException;\n         }\n \n-        Set<SchemaMapping> schemaMappings = resource.getMappings();\n+        List<SchemaMapping> schemaMappings = resource.getMappings();\n \n         // resource.getMappings() can never return a null value\n \n@@ -523,7 +523,7 @@ public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n                 log.debug(\"Ask for the mappings of '\" + resource + \"'\");\n             }\n \n-            Set<SchemaMapping> schemaMappings = resource.getMappings();\n+            List<SchemaMapping> schemaMappings = resource.getMappings();\n \n             if (log.isDebugEnabled()) {\n                 log.debug(\"The mappings of '\" + resource + \"' are '\""},{"sha":"b6948050ee893c8050bc0208a563eb97f10ffd55","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -124,7 +124,7 @@ public SyncopeUser doExecuteAction(String actionName, Long userId,\n         Integer actionId = findWorkflowAction(syncopeUser.getWorkflowId(),\n                 actionName);\n         if (actionId == null) {\n-            throw new NotFoundException(actionName);\n+            throw new NotFoundException(\"Workflow action '\"+ actionName + \"'\");\n         }\n \n         try {\n@@ -436,16 +436,9 @@ public UserTO update(@RequestBody UserMod userMod,\n             log.debug(\"update called with parameter \" + userMod);\n         }\n \n-        SyncopeUser syncopeUser = syncopeUserDAO.find(userMod.getId());\n-        if (syncopeUser == null) {\n-            log.error(\"Could not find user '\" + userMod.getId() + \"'\");\n-\n-            throw new NotFoundException(String.valueOf(userMod.getId()));\n-        }\n-\n         // First of all, let's check if update is allowed\n-        syncopeUser = doExecuteAction(Constants.ACTION_UPDATE,\n-                syncopeUser.getId(), null);\n+        SyncopeUser syncopeUser = doExecuteAction(Constants.ACTION_UPDATE,\n+                userMod.getId(), null);\n \n         // Update user with provided userMod\n         ResourceOperations resourceOperations ="},{"sha":"87ade732e336d81901af2933ee4a817715813654","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":57,"deletions":53,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -196,10 +196,43 @@ protected ResourceOperations fill(\n         SyncopeClientException invalidValues = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidValues);\n \n-        // 1. attributes to be updated\n         AbstractSchema schema = null;\n         AbstractAttribute attribute = null;\n         AbstractAttributeValue attributeValue = null;\n+        AbstractDerivedSchema derivedSchema = null;\n+        AbstractDerivedAttribute derivedAttribute = null;\n+\n+        // 1. attributes to be removed\n+        for (String attributeToBeRemoved :\n+                attributableMod.getAttributesToBeRemoved()) {\n+\n+            schema = getSchema(attributeToBeRemoved,\n+                    attributableUtil.getSchemaClass());\n+\n+            if (schema != null) {\n+                for (SchemaMapping mapping : schema.getMappings()) {\n+                    if (mapping.getResource() != null) {\n+                        resourceOperations.add(Type.UPDATE,\n+                                mapping.getResource());\n+                    }\n+                }\n+\n+                attribute = attributable.getAttribute(schema.getName());\n+                if (attribute == null) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No attribute found for schema \"\n+                                + schema.getName());\n+                    }\n+                } else {\n+                    attributable.removeAttribute(attribute);\n+\n+                    attributeDAO.delete(attribute.getId(),\n+                            attributableUtil.getAttributeClass());\n+                }\n+            }\n+        }\n+\n+        // 2. attributes to be updated\n         Set<Long> valuesToBeRemoved = null;\n         for (AttributeMod attributeMod :\n                 attributableMod.getAttributesToBeUpdated()) {\n@@ -247,40 +280,13 @@ protected ResourceOperations fill(\n                         attributableUtil, schema, attribute,\n                         attributeValue, invalidValues);\n \n-                // if no values are in, the attribute can be saely removed\n+                // if no values are in, the attribute can be safely removed\n                 if (attribute.getAttributeValues().isEmpty()) {\n                     attributeDAO.delete(attribute);\n                 }\n             }\n         }\n \n-        // 2. attributes to be removed\n-        for (String attributeToBeRemoved :\n-                attributableMod.getAttributesToBeRemoved()) {\n-\n-            schema = getSchema(attributeToBeRemoved,\n-                    attributableUtil.getSchemaClass());\n-\n-            if (schema != null) {\n-                for (SchemaMapping mapping : schema.getMappings()) {\n-                    if (mapping.getResource() != null) {\n-                        resourceOperations.add(Type.UPDATE,\n-                                mapping.getResource());\n-                    }\n-                }\n-\n-                attribute = attributable.getAttribute(schema.getName());\n-                if (attribute == null) {\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"No attribute found for schema \"\n-                                + schema.getName());\n-                    }\n-                } else {\n-                    attributeDAO.delete(attribute);\n-                }\n-            }\n-        }\n-\n         if (!invalidValues.getElements().isEmpty()) {\n             compositeErrorException.addException(invalidValues);\n         }\n@@ -291,30 +297,7 @@ protected ResourceOperations fill(\n             compositeErrorException.addException(requiredValuesMissing);\n         }\n \n-        // 3. derived attributes to be added\n-        AbstractDerivedSchema derivedSchema = null;\n-        AbstractDerivedAttribute derivedAttribute = null;\n-        for (String derivedAttributeToBeAdded :\n-                attributableMod.getDerivedAttributesToBeAdded()) {\n-\n-            derivedSchema = getDerivedSchema(derivedAttributeToBeAdded,\n-                    attributableUtil.getDerivedSchemaClass());\n-            if (derivedSchema != null) {\n-                for (SchemaMapping mapping : derivedSchema.getMappings()) {\n-                    if (mapping.getResource() != null) {\n-                        resourceOperations.add(Type.UPDATE,\n-                                mapping.getResource());\n-                    }\n-                }\n-\n-                derivedAttribute = attributableUtil.newDerivedAttribute();\n-                derivedAttribute.setDerivedSchema(derivedSchema);\n-                derivedAttribute.setOwner(attributable);\n-                attributable.addDerivedAttribute(derivedAttribute);\n-            }\n-        }\n-\n-        // 4. derived attributes to be removed\n+        // 3. derived attributes to be removed\n         for (String derivedAttributeToBeRemoved :\n                 attributableMod.getDerivedAttributesToBeRemoved()) {\n \n@@ -341,6 +324,27 @@ protected ResourceOperations fill(\n             }\n         }\n \n+        // 4. derived attributes to be added\n+        for (String derivedAttributeToBeAdded :\n+                attributableMod.getDerivedAttributesToBeAdded()) {\n+\n+            derivedSchema = getDerivedSchema(derivedAttributeToBeAdded,\n+                    attributableUtil.getDerivedSchemaClass());\n+            if (derivedSchema != null) {\n+                for (SchemaMapping mapping : derivedSchema.getMappings()) {\n+                    if (mapping.getResource() != null) {\n+                        resourceOperations.add(Type.UPDATE,\n+                                mapping.getResource());\n+                    }\n+                }\n+\n+                derivedAttribute = attributableUtil.newDerivedAttribute();\n+                derivedAttribute.setDerivedSchema(derivedSchema);\n+                derivedAttribute.setOwner(attributable);\n+                attributable.addDerivedAttribute(derivedAttribute);\n+            }\n+        }\n+\n         // 5. resources to be removed\n         Resource resource = null;\n         for (String resourceToBeRemoved :"},{"sha":"a580ac86d41f334531b000cb2eaba45f4704e0d4","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,9 +14,9 @@\n  */\n package org.syncope.core.rest.data;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.List;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -147,13 +147,13 @@ public ResourceTO getResourceTO(Resource resource) {\n         return resourceTO;\n     }\n \n-    public Set<SchemaMapping> getSchemaMappings(\n+    public List<SchemaMapping> getSchemaMappings(\n             Resource resource,\n             SchemaMappingTOs mappings) {\n \n         if (mappings == null) return null;\n \n-        Set<SchemaMapping> schemaMappings = new HashSet<SchemaMapping>();\n+        List<SchemaMapping> schemaMappings = new ArrayList<SchemaMapping>();\n \n         for (SchemaMappingTO mapping : mappings) {\n "},{"sha":"41f147d5d9eba479393b9f6d2cf4070ef6c929ac","filename":"core/src/test/java/org/syncope/core/test/persistence/DerivedAttributeDAOTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedAttributeDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedAttributeDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedAttributeDAOTest.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -80,9 +80,8 @@ public final void save() throws ClassNotFoundException {\n         UserAttributeValue surnameAttribute =\n                 (UserAttributeValue) owner.getAttribute(\n                 \"surname\").getAttributeValues().iterator().next();\n-\n-        assertEquals(\"expected derived value\",\n-                surnameAttribute.getValue() + \", \"\n+        \n+        assertEquals(surnameAttribute.getValue() + \", \"\n                 + firstnameAttribute.getValue(),\n                 derivedAttribute.getValue(owner.getAttributes()));\n     }"},{"sha":"90a4735e4cb51fc7c13f05b469780925bb9d8953","filename":"core/src/test/java/org/syncope/core/test/persistence/EntitlementDAOTest.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FEntitlementDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FEntitlementDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FEntitlementDAOTest.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -24,15 +24,12 @@\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n @Transactional\n public class EntitlementDAOTest extends AbstractTest {\n \n     @Autowired\n     private EntitlementDAO entitlementDAO;\n-    @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n \n     @Test\n     public final void findAll() {"},{"sha":"7339127afeee09dd2eba804133461ab234a304fb","filename":"core/src/test/java/org/syncope/core/test/persistence/ResourceDAOTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,7 +14,7 @@\n  */\n package org.syncope.core.test.persistence;\n \n-import java.util.Set;\n+import java.util.List;\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n@@ -53,7 +53,7 @@ public final void findById() {\n         assertEquals(\"invalid bundle version\",\n                 \"0.1-SNAPSHOT\", connector.getVersion());\n \n-        Set<SchemaMapping> mappings = resource.getMappings();\n+        List<SchemaMapping> mappings = resource.getMappings();\n \n         assertNotNull(\"mappings not found\", mappings);\n "},{"sha":"b39a2b2b1ed5529303eec7977e4d5a874e099d2e","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/PropagationManagerTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -36,11 +36,11 @@\n public class PropagationManagerTest extends AbstractTest {\n \n     @Autowired\n-    ResourceDAO resourceDAO;\n+    private ResourceDAO resourceDAO;\n     @Autowired\n-    SyncopeUserDAO syncopeUserDAO;\n+    private SyncopeUserDAO syncopeUserDAO;\n     @Autowired\n-    PropagationManager propagationManager;\n+    private PropagationManager propagationManager;\n \n     @Test\n     public final void create() {"},{"sha":"87de7fc7c463444f3e72e3afddea5354d5d12aec","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/ResourceTest.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -15,6 +15,7 @@\n package org.syncope.core.test.persistence.relationships;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n@@ -119,7 +120,7 @@ public final void save() throws ClassNotFoundException {\n \n         assertNotNull(connector);\n \n-        Set<Resource> resources = connector.getResources();\n+        List<Resource> resources = connector.getResources();\n \n         assertNotNull(resources);\n \n@@ -130,7 +131,7 @@ public final void save() throws ClassNotFoundException {\n         assertTrue(resource.getConnector().equals(connector));\n \n         // check mappings\n-        Set<SchemaMapping> schemaMappings = resource.getMappings();\n+        List<SchemaMapping> schemaMappings = resource.getMappings();\n \n         assertNotNull(schemaMappings);\n \n@@ -147,7 +148,7 @@ public final void delete() {\n         // -------------------------------------\n         // Get originally associated mappings\n         // -------------------------------------\n-        Set<SchemaMapping> mappings = resource.getMappings();\n+        List<SchemaMapping> mappings = resource.getMappings();\n \n         assertNotNull(mappings);\n \n@@ -198,7 +199,7 @@ public final void delete() {\n \n         // resource must be not referenced any more from users\n         SyncopeUser actualUser = null;\n-        Set<Resource> resources = null;\n+        Collection<Resource> resources = null;\n         for (Long id : userIds) {\n             actualUser = syncopeUserDAO.find(id);\n             assertNotNull(actualUser);"},{"sha":"a2ef61941d3e0019d38fbfd92648b7f11fb76afd","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/SchemaMappingTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -14,7 +14,7 @@\n  */\n package org.syncope.core.test.persistence.relationships;\n \n-import java.util.Set;\n+import java.util.List;\n import org.syncope.core.test.persistence.*;\n import static org.junit.Assert.*;\n \n@@ -32,11 +32,11 @@\n public class SchemaMappingTest extends AbstractTest {\n \n     @Autowired\n-    SchemaMappingDAO schemaMappingDAO;\n+    private SchemaMappingDAO schemaMappingDAO;\n     @Autowired\n-    SchemaDAO schemaDAO;\n+    private SchemaDAO schemaDAO;\n     @Autowired\n-    ResourceDAO resourceDAO;\n+    private ResourceDAO resourceDAO;\n \n     @Test\n     public final void save() throws ClassNotFoundException {\n@@ -111,7 +111,7 @@ public final void delete() {\n \n         assertNotNull(actualResource);\n \n-        Set<SchemaMapping> mappings = actualResource.getMappings();\n+        List<SchemaMapping> mappings = actualResource.getMappings();\n         if (mappings != null) {\n             for (SchemaMapping mapping : mappings) {\n                 assertFalse(mapping.getId().equals(id));"},{"sha":"f5d1e1ad118af2a50a3e645f273fd41fe8c00616","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":23,"deletions":14,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3a3c0faf6b776a3de66dd90834f152347741ddf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=a3a3c0faf6b776a3de66dd90834f152347741ddf","patch":"@@ -234,36 +234,45 @@ public void update() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n                 userTO, UserTO.class);\n \n+        assertTrue(userTO.getDerivedAttributes().isEmpty());\n+        assertTrue(userTO.getMemberships().isEmpty());\n+\n         AttributeMod attributeMod = new AttributeMod();\n-        attributeMod.setSchema(\"userId\");\n-        attributeMod.addValueToBeRemoved(\"g.h@t.com\");\n-        attributeMod.addValueToBeAdded(\"new@t.com\");\n+        attributeMod.setSchema(\"subscriptionDate\");\n+        attributeMod.addValueToBeAdded(\"2010-08-18T16:33:12.203+0200\");\n \n         MembershipMod membershipMod = new MembershipMod();\n         membershipMod.setRole(8L);\n         membershipMod.addAttributeToBeUpdated(attributeMod);\n \n-        assertTrue(userTO.getDerivedAttributes().isEmpty());\n-        assertTrue(userTO.getMemberships().isEmpty());\n+        attributeMod = new AttributeMod();\n+        attributeMod.setSchema(\"userId\");\n+        attributeMod.addValueToBeAdded(\"t.w@spre.net\");\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"newPassword\");\n-        userMod.addDerivedAttributeToBeAdded(\"cn\");\n+        userMod.addAttributeToBeRemoved(\"userId\");\n         userMod.addAttributeToBeUpdated(attributeMod);\n+        userMod.addDerivedAttributeToBeAdded(\"cn\");\n         userMod.addMembershipMod(membershipMod);\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n                 userMod, UserTO.class);\n \n         assertEquals(\"newPassword\", userTO.getPassword());\n-\n-        AttributeTO attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"userId\");\n-        attributeTO.addValue(\"new@t.com\");\n-\n-        assertTrue(userTO.getAttributes().contains(attributeTO));\n-        assertFalse(userTO.getDerivedAttributes().isEmpty());\n-        assertFalse(userTO.getMemberships().isEmpty());\n+        assertTrue(userTO.getMemberships().size() == 1);\n+        assertTrue(userTO.getMemberships().iterator().next().getAttributes().size() == 1);\n+        assertTrue(userTO.getDerivedAttributes().size() == 1);\n+        boolean attributeFound = false;\n+        for (AttributeTO attributeTO : userTO.getAttributes()) {\n+            if (\"userId\".equals(attributeTO.getSchema())) {\n+                attributeFound = true;\n+\n+                assertEquals(Collections.singleton(\"t.w@spre.net\"),\n+                        attributeTO.getValues());\n+            }\n+        }\n+        assertTrue(attributeFound);\n     }\n }"}]}