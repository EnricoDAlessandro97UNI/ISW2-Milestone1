{"sha":"fffdd3a048b29d98e80c0f0bbb468c35801153f1","node_id":"C_kwDOJfYA1toAKGZmZmRkM2EwNDhiMjlkOThlODBjMGYwYmJiNDY4YzM1ODAxMTUzZjE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-10-26T14:36:46Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-10-26T14:36:46Z"},"message":"[SYNCOPE-1704] Evicting JPAExternalResource instances from JPA cache when policies get updated","tree":{"sha":"f70ad1d0d5618524577ccaf0e4a66ab5b48a03e4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f70ad1d0d5618524577ccaf0e4a66ab5b48a03e4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fffdd3a048b29d98e80c0f0bbb468c35801153f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fffdd3a048b29d98e80c0f0bbb468c35801153f1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fffdd3a048b29d98e80c0f0bbb468c35801153f1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fffdd3a048b29d98e80c0f0bbb468c35801153f1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6e749c35513ce12f72a5953dc84f6be65acfab35","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6e749c35513ce12f72a5953dc84f6be65acfab35","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6e749c35513ce12f72a5953dc84f6be65acfab35"}],"stats":{"total":153,"additions":106,"deletions":47},"files":[{"sha":"3afafc6537ec74a6df00d5bb5de91e7bb2bd894b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -145,7 +145,7 @@ protected List<String> load() {\n \n             switch (type) {\n                 case ACCOUNT:\n-                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(1).build(\n                             \"field\",\n                             \"maxAuthenticationAttempts\",\n                             Integer.class,\n@@ -164,7 +164,7 @@ protected List<String> load() {\n                     break;\n \n                 case PASSWORD:\n-                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(1).build(\n                             \"field\",\n                             \"historyLength\",\n                             Integer.class,\n@@ -190,7 +190,7 @@ protected List<String> load() {\n                             new PropertyModel<>(policyTO, \"updateDelta\"),\n                             false));\n \n-                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(1).build(\n                             \"field\",\n                             \"maxAttempts\",\n                             Integer.class,\n@@ -286,6 +286,8 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                             \"unauthorizedRedirectUrl\",\n                             new IModel<>() {\n \n+                        private static final long serialVersionUID = 1015030402166681242L;\n+\n                         @Override\n                         public String getObject() {\n                             return Optional.ofNullable("},{"sha":"70c86bfb3c61a6c2b158f134470bc850018f5874","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -209,6 +209,10 @@ public void delete(final String type, final String key) {\n                 inUse = !realmDAO.findByLogicActions(implementation).isEmpty();\n                 break;\n \n+            case IdMImplementationType.PROVISION_SORTER:\n+                inUse = !resourceDAO.findByProvisionSorter(implementation).isEmpty();\n+                break;\n+\n             case IdMImplementationType.PROPAGATION_ACTIONS:\n                 inUse = !resourceDAO.findByPropagationActions(implementation).isEmpty();\n                 break;"},{"sha":"8fc338e8c3dd1408dd6aac12d4c7b9bf203b6fc6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -37,7 +37,9 @@ public interface ExternalResourceDAO extends DAO<ExternalResource> {\n \n     boolean anyItemHaving(Implementation transformer);\n \n-    List<ExternalResource> findByPropagationActions(Implementation propagationActions);\n+    List<ExternalResource> findByProvisionSorter(Implementation propagationActions);\n+\n+    List<ExternalResource> findByPropagationActions(Implementation provisionSorter);\n \n     List<ExternalResource> findByPolicy(Policy policy);\n "},{"sha":"89bb5beb24127d5915db9cba4a71aa29adf14e9a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -517,8 +517,11 @@ public GroupDAO groupDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ImplementationDAO implementationDAO() {\n-        return new JPAImplementationDAO();\n+    public ImplementationDAO implementationDAO(\n+            final @Lazy ExternalResourceDAO resourceDAO,\n+            final @Lazy EntityCacheDAO entityCacheDAO) {\n+\n+        return new JPAImplementationDAO(resourceDAO, entityCacheDAO);\n     }\n \n     @ConditionalOnMissingBean\n@@ -574,9 +577,16 @@ public PolicyDAO policyDAO(\n             final @Lazy ExternalResourceDAO resourceDAO,\n             final @Lazy CASSPClientAppDAO casSPClientAppDAO,\n             final @Lazy OIDCRPClientAppDAO oidcRPClientAppDAO,\n-            final @Lazy SAML2SPClientAppDAO saml2SPClientAppDAO) {\n+            final @Lazy SAML2SPClientAppDAO saml2SPClientAppDAO,\n+            final @Lazy EntityCacheDAO entityCacheDAO) {\n \n-        return new JPAPolicyDAO(realmDAO, resourceDAO, casSPClientAppDAO, oidcRPClientAppDAO, saml2SPClientAppDAO);\n+        return new JPAPolicyDAO(\n+                realmDAO,\n+                resourceDAO,\n+                casSPClientAppDAO,\n+                oidcRPClientAppDAO,\n+                saml2SPClientAppDAO,\n+                entityCacheDAO);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"8b3e955fc7a03de806f65e280fc3a1fcaa8fb2a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -145,6 +145,16 @@ public List<ExternalResource> findByPropagationActions(final Implementation prop\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<ExternalResource> findByProvisionSorter(final Implementation provisionSorter) {\n+        TypedQuery<ExternalResource> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAExternalResource.class.getSimpleName() + \" e \"\n+                + \"WHERE e.provisionSorter=:provisionSorter\", ExternalResource.class);\n+        query.setParameter(\"provisionSorter\", provisionSorter);\n+\n+        return query.getResultList();\n+    }\n+\n     protected StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {\n         StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAExternalResource.class.getSimpleName())."},{"sha":"1b1a69e01a81d65c707d790cd8afee6acc71cf38","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -21,14 +21,26 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.dao.EntityCacheDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n import org.apache.syncope.core.spring.implementation.ImplementationManager;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPAImplementationDAO extends AbstractDAO<Implementation> implements ImplementationDAO {\n \n+    protected final ExternalResourceDAO resourceDAO;\n+\n+    protected final EntityCacheDAO entityCacheDAO;\n+\n+    public JPAImplementationDAO(final ExternalResourceDAO resourceDAO, final EntityCacheDAO entityCacheDAO) {\n+        this.resourceDAO = resourceDAO;\n+        this.entityCacheDAO = entityCacheDAO;\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public Implementation find(final String key) {\n@@ -74,6 +86,9 @@ public Implementation save(final Implementation implementation) {\n \n         ImplementationManager.purge(merged.getKey());\n \n+        resourceDAO.findByProvisionSorter(merged).\n+                forEach(resource -> entityCacheDAO.evict(JPAExternalResource.class, resource.getKey()));\n+\n         return merged;\n     }\n "},{"sha":"63c1bc475dae11e142d9d8cb90b03a5aeb47558a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.dao.EntityCacheDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n@@ -37,6 +38,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccessPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n@@ -81,18 +83,22 @@ protected static <T extends Policy> Class<? extends AbstractPolicy> getEntityRef\n \n     protected final SAML2SPClientAppDAO saml2SPClientAppDAO;\n \n+    protected final EntityCacheDAO entityCacheDAO;\n+\n     public JPAPolicyDAO(\n             final RealmDAO realmDAO,\n             final ExternalResourceDAO resourceDAO,\n             final CASSPClientAppDAO casSPClientAppDAO,\n             final OIDCRPClientAppDAO oidcRPClientAppDAO,\n-            final SAML2SPClientAppDAO saml2SPClientAppDAO) {\n+            final SAML2SPClientAppDAO saml2SPClientAppDAO,\n+            final EntityCacheDAO entityCacheDAO) {\n \n         this.realmDAO = realmDAO;\n         this.resourceDAO = resourceDAO;\n         this.casSPClientAppDAO = casSPClientAppDAO;\n         this.oidcRPClientAppDAO = oidcRPClientAppDAO;\n         this.saml2SPClientAppDAO = saml2SPClientAppDAO;\n+        this.entityCacheDAO = entityCacheDAO;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -168,7 +174,19 @@ public List<Policy> findAll() {\n \n     @Override\n     public <T extends Policy> T save(final T policy) {\n-        return entityManager().merge(policy);\n+        T merged = entityManager().merge(policy);\n+\n+        if (policy instanceof AccountPolicy\n+                || policy instanceof PasswordPolicy\n+                || policy instanceof PropagationPolicy\n+                || policy instanceof PullPolicy\n+                || policy instanceof PushPolicy) {\n+\n+            resourceDAO.findByPolicy(policy).\n+                    forEach(resource -> entityCacheDAO.evict(JPAExternalResource.class, resource.getKey()));\n+        }\n+\n+        return merged;\n     }\n \n     @Override"},{"sha":"2fd04c28803bf1283f5e2501921ab2d9567eee04","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAExternalResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -142,7 +142,7 @@ public class JPAExternalResource extends AbstractProvidedKeyEntity implements Ex\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAPushPolicy pushPolicy;\n \n-    @ManyToOne\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPAImplementation provisionSorter;\n \n     /**"},{"sha":"cade540bc5ce107657af6cb655d005601236b481","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPropagationPolicy.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPropagationPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPropagationPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPropagationPolicy.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -23,6 +23,7 @@\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.Table;\n+import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.BackOffStrategy;\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n@@ -47,6 +48,7 @@ public class JPAPropagationPolicy extends AbstractPolicy implements PropagationP\n \n     private String backOffParams;\n \n+    @Min(1)\n     @NotNull\n     private Integer maxAttempts = 3;\n "},{"sha":"952e4c973422f3537dc88691952b1aab6dd22845","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":25,"deletions":29,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -22,14 +22,14 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.UUID;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n@@ -42,13 +42,13 @@\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n@@ -80,6 +80,9 @@ public class TaskTest extends AbstractTest {\n     @Autowired\n     private UserDAO userDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private ImplementationDAO implementationDAO;\n \n@@ -112,7 +115,7 @@ public void readMultipleOrderBy() {\n     }\n \n     @Test\n-    public void save() {\n+    public void savePropagationTask() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n \n@@ -139,7 +142,6 @@ public void save() {\n \n         entityManager().flush();\n \n-        resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertTrue(taskDAO.<PropagationTask>findAll(\n                 TaskType.PROPAGATION, resource, null, null, null, -1, -1, List.of()).\n                 contains(task));\n@@ -244,51 +246,45 @@ public void deleteTaskExecution() {\n \n     @Test\n     public void savePullTask() {\n-        ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n-        assertNotNull(resource);\n-\n-        AnyTemplatePullTask template = entityFactory.newEntity(AnyTemplatePullTask.class);\n-        template.set(new UserTO());\n-\n         PullTask task = entityFactory.newEntity(PullTask.class);\n         task.setName(\"savePullTask\");\n         task.setDescription(\"PullTask description\");\n         task.setActive(true);\n         task.setPullMode(PullMode.FULL_RECONCILIATION);\n-        task.add(template);\n+        task.setJobDelegate(implementationDAO.find(\"PullJobDelegate\"));\n+        task.setDestinationRealm(realmDAO.getRoot());\n         task.setCronExpression(\"BLA BLA\");\n         task.setMatchingRule(MatchingRule.UPDATE);\n         task.setUnmatchingRule(UnmatchingRule.PROVISION);\n \n+        // now adding PullActions\n+        Implementation pullActions = entityFactory.newEntity(Implementation.class);\n+        pullActions.setKey(\"PullActions\" + UUID.randomUUID().toString());\n+        pullActions.setEngine(ImplementationEngine.JAVA);\n+        pullActions.setType(IdMImplementationType.PULL_ACTIONS);\n+        pullActions.setBody(PullActions.class.getName());\n+        pullActions = implementationDAO.save(pullActions);\n+        entityManager().flush();\n+\n+        task.add(pullActions);\n+\n         // this save() fails because of an invalid Cron Expression\n-        InvalidEntityException exception = null;\n         try {\n             taskDAO.save(task);\n+            fail();\n         } catch (InvalidEntityException e) {\n-            exception = e;\n+            assertNotNull(e);\n         }\n-        assertNotNull(exception);\n-\n         task.setCronExpression(null);\n+\n         // this save() fails because a PullTask requires a target resource\n-        exception = null;\n         try {\n             taskDAO.save(task);\n+            fail();\n         } catch (InvalidEntityException e) {\n-            exception = e;\n+            assertNotNull(e);\n         }\n-        assertNotNull(exception);\n-\n-        task.setResource(resource);\n-\n-        Implementation pullActions = entityFactory.newEntity(Implementation.class);\n-        pullActions.setKey(\"PullActions\" + UUID.randomUUID().toString());\n-        pullActions.setEngine(ImplementationEngine.JAVA);\n-        pullActions.setType(IdMImplementationType.PULL_ACTIONS);\n-        pullActions.setBody(PullActions.class.getName());\n-        pullActions = implementationDAO.save(pullActions);\n-\n-        task.add(pullActions);\n+        task.setResource(resourceDAO.find(\"ws-target-resource-1\"));\n \n         // this save() finally works\n         task = (PullTask) taskDAO.save(task);"},{"sha":"b09251f4b30ec136c5ac7947ab0adea3e64f1933","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -384,21 +384,21 @@ protected Optional<RetryTemplate> retryTemplate(final ExternalResource resource)\n                         ExponentialBackOffPolicy eBackOffPolicy = new ExponentialBackOffPolicy();\n                         if (params.length > 0) {\n                             try {\n-                                eBackOffPolicy.setInitialInterval(Long.valueOf(params[0]));\n+                                eBackOffPolicy.setInitialInterval(Long.parseLong(params[0]));\n                             } catch (NumberFormatException e) {\n                                 LOG.error(\"Could not convert to long: {}\", params[0], e);\n                             }\n                         }\n                         if (params.length > 1) {\n                             try {\n-                                eBackOffPolicy.setMaxInterval(Long.valueOf(params[1]));\n+                                eBackOffPolicy.setMaxInterval(Long.parseLong(params[1]));\n                             } catch (NumberFormatException e) {\n                                 LOG.error(\"Could not convert to long: {}\", params[1], e);\n                             }\n                         }\n                         if (params.length > 2) {\n                             try {\n-                                eBackOffPolicy.setMultiplier(Double.valueOf(params[2]));\n+                                eBackOffPolicy.setMultiplier(Double.parseDouble(params[2]));\n                             } catch (NumberFormatException e) {\n                                 LOG.error(\"Could not convert to double: {}\", params[2], e);\n                             }\n@@ -410,21 +410,21 @@ protected Optional<RetryTemplate> retryTemplate(final ExternalResource resource)\n                         ExponentialRandomBackOffPolicy erBackOffPolicy = new ExponentialRandomBackOffPolicy();\n                         if (params.length > 0) {\n                             try {\n-                                erBackOffPolicy.setInitialInterval(Long.valueOf(params[0]));\n+                                erBackOffPolicy.setInitialInterval(Long.parseLong(params[0]));\n                             } catch (NumberFormatException e) {\n                                 LOG.error(\"Could not convert to long: {}\", params[0], e);\n                             }\n                         }\n                         if (params.length > 1) {\n                             try {\n-                                erBackOffPolicy.setMaxInterval(Long.valueOf(params[1]));\n+                                erBackOffPolicy.setMaxInterval(Long.parseLong(params[1]));\n                             } catch (NumberFormatException e) {\n                                 LOG.error(\"Could not convert to long: {}\", params[1], e);\n                             }\n                         }\n                         if (params.length > 2) {\n                             try {\n-                                erBackOffPolicy.setMultiplier(Double.valueOf(params[2]));\n+                                erBackOffPolicy.setMultiplier(Double.parseDouble(params[2]));\n                             } catch (NumberFormatException e) {\n                                 LOG.error(\"Could not convert to double: {}\", params[2], e);\n                             }\n@@ -437,7 +437,7 @@ protected Optional<RetryTemplate> retryTemplate(final ExternalResource resource)\n                         FixedBackOffPolicy fBackOffPolicy = new FixedBackOffPolicy();\n                         if (params.length > 0) {\n                             try {\n-                                fBackOffPolicy.setBackOffPeriod(Long.valueOf(params[0]));\n+                                fBackOffPolicy.setBackOffPeriod(Long.parseLong(params[0]));\n                             } catch (NumberFormatException e) {\n                                 LOG.error(\"Could not convert to long: {}\", params[0], e);\n                             }"}]}