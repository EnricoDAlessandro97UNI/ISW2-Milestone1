{"sha":"4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRlZjUwNDQ0YThlZGZkMWMwMTc3YTdmYThiMDE2NjYzMmEyYmM0M2I=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-10T11:16:13Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-10T11:16:13Z"},"message":"Fixes issue 197\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247186 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8d2b5b88073c7f507c709e35429698e0aede65ef","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8d2b5b88073c7f507c709e35429698e0aede65ef"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/comments","author":null,"committer":null,"parents":[{"sha":"97ba49cf00131c6e9748bc2673ea2c977b5a83e5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/97ba49cf00131c6e9748bc2673ea2c977b5a83e5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/97ba49cf00131c6e9748bc2673ea2c977b5a83e5"}],"stats":{"total":1626,"additions":1156,"deletions":470},"files":[{"sha":"e6baac75396b511e09b97dbbac585e26e89bfdd4","filename":"client/src/main/java/org/syncope/client/search/NodeCond.java","status":"modified","additions":37,"deletions":4,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -25,6 +25,8 @@ public enum Type {\n \n     private Type type;\n \n+    private SyncopeUserCond syncopeUserCond;\n+\n     private AttributeCond attributeCond;\n \n     private MembershipCond membershipCond;\n@@ -35,6 +37,15 @@ public enum Type {\n \n     private NodeCond rightNodeCond;\n \n+    public static NodeCond getLeafCond(final SyncopeUserCond syncopeUserCond) {\n+        NodeCond nodeCond = new NodeCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.syncopeUserCond = syncopeUserCond;\n+\n+        return nodeCond;\n+    }\n+\n     public static NodeCond getLeafCond(final AttributeCond attributeCond) {\n         NodeCond nodeCond = new NodeCond();\n \n@@ -62,6 +73,12 @@ public static NodeCond getLeafCond(final ResourceCond resourceCond) {\n         return nodeCond;\n     }\n \n+    public static NodeCond getNotLeafCond(final SyncopeUserCond syncopeUserCond) {\n+        NodeCond nodeCond = getLeafCond(syncopeUserCond);\n+        nodeCond.type = Type.NOT_LEAF;\n+        return nodeCond;\n+    }\n+\n     public static NodeCond getNotLeafCond(final AttributeCond attributeCond) {\n         NodeCond nodeCond = getLeafCond(attributeCond);\n         nodeCond.type = Type.NOT_LEAF;\n@@ -124,10 +141,18 @@ public final void setMembershipCond(final MembershipCond membershipCond) {\n         this.membershipCond = membershipCond;\n     }\n \n-    public void setResourceCond(ResourceCond resourceCond) {\n+    public void setResourceCond(final ResourceCond resourceCond) {\n         this.resourceCond = resourceCond;\n     }\n \n+    public SyncopeUserCond getSyncopeUserCond() {\n+        return syncopeUserCond;\n+    }\n+\n+    public void setSyncopeUserCond(final SyncopeUserCond syncopeUserCond) {\n+        this.syncopeUserCond = syncopeUserCond;\n+    }\n+\n     public final NodeCond getLeftNodeCond() {\n         return leftNodeCond;\n     }\n@@ -160,15 +185,23 @@ public final boolean checkValidity() {\n         switch (type) {\n             case LEAF:\n             case NOT_LEAF:\n-                return (attributeCond != null\n+                return (syncopeUserCond != null\n+                        && attributeCond == null\n+                        && membershipCond == null\n+                        && resourceCond == null\n+                        && syncopeUserCond.checkValidity())\n+                        || (syncopeUserCond == null\n+                        && attributeCond != null\n                         && membershipCond == null\n                         && resourceCond == null\n                         && attributeCond.checkValidity())\n-                        || (attributeCond == null\n+                        || (syncopeUserCond == null\n+                        && attributeCond == null\n                         && membershipCond != null\n                         && resourceCond == null\n                         && membershipCond.checkValidity())\n-                        || (attributeCond == null\n+                        || (syncopeUserCond == null\n+                        && attributeCond == null\n                         && membershipCond == null\n                         && resourceCond != null\n                         && resourceCond.checkValidity());"},{"sha":"13359062be5c29d6c4ca9ee8f757269e15bef88c","filename":"client/src/main/java/org/syncope/client/search/SyncopeUserCond.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FSyncopeUserCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FSyncopeUserCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FSyncopeUserCond.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -0,0 +1,28 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.search;\n+\n+/**\n+ * Search condition to be applied when comparing bean attribute values.\n+ */\n+public class SyncopeUserCond extends AttributeCond {\n+\n+    public SyncopeUserCond() {\n+    }\n+\n+    public SyncopeUserCond(Type conditionType) {\n+        super(conditionType);\n+    }\n+}"},{"sha":"cd98dee314e85627825a968c5be956cac1b85a75","filename":"console/src/main/java/org/syncope/console/commons/Constants.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -16,9 +16,18 @@\n \n public final class Constants {\n \n+    public static final String PREF_USERS_DETAILS_VIEW =\n+            \"users.details.view\";\n+\n     public static final String PREF_USERS_ATTRIBUTES_VIEW =\n             \"users.attributes.view\";\n-\n+    \n+    public static final String PREF_USERS_DERIVED_ATTRIBUTES_VIEW =\n+            \"users.derived.attributes.view\";\n+    \n+    public static final String PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW =\n+            \"users.virtual.attributes.view\";\n+    \n     public static final String PREFS_COOKIE_NAME = \"syncopeConsolePrefs\";\n \n     public static final String PREF_USER_SCHEMA_PAGINATOR_ROWS ="},{"sha":"4f985eea6f18b1d4e0d40be43cdec4b329a3cf06","filename":"console/src/main/java/org/syncope/console/commons/PreferenceManager.java","status":"modified","additions":81,"deletions":39,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -21,8 +21,8 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import javax.servlet.http.Cookie;\n-import org.apache.commons.lang.StringUtils;\n import org.apache.wicket.request.Request;\n import org.apache.wicket.request.Response;\n import org.apache.wicket.request.http.WebRequest;\n@@ -33,6 +33,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.util.StringUtils;\n \n public class PreferenceManager {\n \n@@ -58,10 +59,24 @@ public List<Integer> getPaginatorChoices() {\n         return PAGINATOR_CHOICES;\n     }\n \n-    private Map<String, String> getPrefs(final String value)\n-            throws IOException {\n+    private Map<String, String> getPrefs(final String value) {\n+\n+        HashMap<String, String> prefs;\n+\n+        try {\n \n-        return mapper.readValue(value, MAP_TYPE_REF);\n+            if (StringUtils.hasText(value)) {\n+                prefs = mapper.readValue(value, MAP_TYPE_REF);\n+            } else {\n+                throw new Exception(\"Invalid cookie value '\" + value + \"'\");\n+            }\n+\n+        } catch (Exception e) {\n+            LOG.debug(\"No preferences found\", e);\n+            prefs = new HashMap<String, String>();\n+        }\n+\n+        return prefs;\n     }\n \n     private String setPrefs(final Map<String, String> prefs)\n@@ -78,18 +93,14 @@ public String get(final Request request, final String key) {\n \n         Cookie prefCookie = ((WebRequest) request).getCookie(\n                 Constants.PREFS_COOKIE_NAME);\n+\n         if (prefCookie != null) {\n-            Map<String, String> prefs;\n-            try {\n-                prefs = getPrefs(new String(Base64.decodeBase64(\n-                        prefCookie.getValue().getBytes())));\n-            } catch (IOException e) {\n-                LOG.error(\"Could not get preferences from {}\",\n-                        prefCookie.getValue(), e);\n \n-                prefs = new HashMap<String, String>();\n-            }\n+            final Map<String, String> prefs = getPrefs(new String(\n+                    Base64.decodeBase64(prefCookie.getValue().getBytes())));\n+\n             result = prefs.get(key);\n+\n         } else {\n             LOG.debug(\"Could not find cookie []\", Constants.PREFS_COOKIE_NAME);\n         }\n@@ -114,50 +125,75 @@ public Integer getPaginatorRows(final Request request,\n         return result;\n     }\n \n-    public List<String> getList(final Request request,\n-            final String key) {\n+    public List<String> getList(final Request request, final String key) {\n+\n+        final List<String> result = new ArrayList<String>();\n \n-        List<String> result = new ArrayList<String>();\n+        final String compound = get(request, key);\n \n-        String compound = get(request, key);\n-        if (compound != null) {\n+        if (StringUtils.hasText(compound)) {\n             String[] items = compound.split(\";\");\n-            if (items != null) {\n-                result.addAll(Arrays.asList(items));\n-            } else {\n-                LOG.error(\"While exploding compund \" + compound);\n-            }\n+            result.addAll(Arrays.asList(items));\n         }\n \n         return result;\n     }\n \n     public void set(final Request request, final Response response,\n-            final String key, final String value) {\n+            final Map<String, List<String>> prefs) {\n \n-        Cookie prefCookie = ((WebRequest) request).getCookie(\n-                Constants.PREFS_COOKIE_NAME);\n-        if (prefCookie == null) {\n-            prefCookie = new Cookie(Constants.PREFS_COOKIE_NAME, \"\");\n+        Cookie prefCookie =\n+                ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n+\n+        final Map<String, String> current = new HashMap<String, String>();\n+\n+        if (prefCookie == null || !StringUtils.hasText(prefCookie.getValue())) {\n+            prefCookie = new Cookie(Constants.PREFS_COOKIE_NAME, null);\n+        } else {\n+            current.putAll(getPrefs(new String(Base64.decodeBase64(\n+                    prefCookie.getValue().getBytes()))));\n+        }\n+\n+        // after retrieved previous setting in order to overwrite the key ...\n+        for (Entry<String, List<String>> entry : prefs.entrySet()) {\n+            current.put(entry.getKey(), StringUtils.collectionToDelimitedString(\n+                    entry.getValue(), \";\"));\n         }\n \n-        Map<String, String> prefs;\n         try {\n-            prefs = getPrefs(new String(Base64.decodeBase64(\n-                    prefCookie.getValue().getBytes())));\n+            prefCookie.setValue(new String(\n+                    Base64.encodeBase64(setPrefs(current).getBytes())));\n         } catch (IOException e) {\n-            LOG.error(\"Could not get preferences from \"\n-                    + prefCookie.getValue(), e);\n+            LOG.error(\"Could not set preferences \" + current, e);\n+        }\n \n-            prefs = new HashMap<String, String>();\n+        prefCookie.setMaxAge(ONE_YEAR_TIME);\n+        ((WebResponse) response).addCookie(prefCookie);\n+    }\n+\n+    public void set(final Request request, final Response response,\n+            final String key, final String value) {\n+\n+        Cookie prefCookie =\n+                ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n+\n+        final Map<String, String> prefs = new HashMap<String, String>();\n+\n+        if (prefCookie == null || !StringUtils.hasText(prefCookie.getValue())) {\n+            prefCookie = new Cookie(Constants.PREFS_COOKIE_NAME, null);\n+        } else {\n+            prefs.putAll(getPrefs(new String(Base64.decodeBase64(\n+                    prefCookie.getValue().getBytes()))));\n         }\n+\n+        // after retrieved previous setting in order to overwrite the key ...\n         prefs.put(key, value);\n \n         try {\n-            prefCookie.setValue(new String(Base64.encodeBase64(\n-                    setPrefs(prefs).getBytes())));\n+            prefCookie.setValue(new String(\n+                    Base64.encodeBase64(setPrefs(prefs).getBytes())));\n         } catch (IOException e) {\n-            LOG.error(\"Could not set preferences from \" + prefs);\n+            LOG.error(\"Could not set preferences \" + prefs, e);\n         }\n \n         prefCookie.setMaxAge(ONE_YEAR_TIME);\n@@ -167,7 +203,13 @@ public void set(final Request request, final Response response,\n     public void setList(final Request request, final Response response,\n             final String key, final List<String> values) {\n \n-        set(request, response, key,\n-                StringUtils.join(values.toArray(new String[]{}), \";\"));\n+        set(request, response,\n+                key, StringUtils.collectionToDelimitedString(values, \";\"));\n+    }\n+\n+    public void setList(final Request request, final Response response,\n+            final Map<String, List<String>> prefs) {\n+\n+        set(request, response, prefs);\n     }\n }"},{"sha":"f837c60eb8c7bb859eaf9d7c482bea51c194e252","filename":"console/src/main/java/org/syncope/console/pages/DisplayAttributesModalPage.java","status":"modified","additions":251,"deletions":28,"changes":279,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -16,7 +16,13 @@\n  */\n package org.syncope.console.pages;\n \n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n@@ -27,15 +33,17 @@\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.wicket.validation.IValidatable;\n-import org.apache.wicket.validation.validator.AbstractValidator;\n+import org.syncope.client.to.UserTO;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n+import org.syncope.console.rest.SchemaRestClient;\n \n /**\n  * Modal window with Display attributes form.\n@@ -44,66 +52,281 @@ public class DisplayAttributesModalPage extends BaseModalPage {\n \n     private static final long serialVersionUID = -4274117450918385110L;\n \n-    private final int MAX_SELECTIONS = 10;\n+    /**\n+     * Max permitted selections.\n+     */\n+    private final int MAX_SELECTIONS = 9;\n+\n+    private List<String> ATTRIBUTES_NOTINCLUDED = Arrays.asList(new String[]{\n+                \"attributes\", \"derivedAttributes\", \"virtualAttributes\",\n+                \"serialVersionUID\", \"memberships\", \"resources\", \"password\"});\n \n     @SpringBean\n     private PreferenceManager prefMan;\n \n+    /**\n+     * Schema rest client.\n+     */\n+    @SpringBean\n+    private SchemaRestClient schemaRestClient;\n+\n+    final private IModel<List<String>> dnames =\n+            new LoadableDetachableModel<List<String>>() {\n+\n+                @Override\n+                protected List<String> load() {\n+\n+                    final List<String> details = new ArrayList<String>();\n+\n+                    Class<?> clazz = UserTO.class;\n+\n+                    // loop on class and all superclasses searching for field\n+                    while (clazz != null && clazz != Object.class) {\n+                        for (Field field : clazz.getDeclaredFields()) {\n+                            if (!ATTRIBUTES_NOTINCLUDED.contains(field.getName())) {\n+                                details.add(field.getName());\n+                            }\n+                        }\n+                        clazz = clazz.getSuperclass();\n+                    }\n+\n+                    Collections.reverse(details);\n+                    return details;\n+                }\n+            };\n+\n+    final private IModel<List<String>> names =\n+            new LoadableDetachableModel<List<String>>() {\n+\n+                private static final long serialVersionUID =\n+                        5275935387613157437L;\n+\n+                @Override\n+                protected List<String> load() {\n+\n+                    List<String> schemas =\n+                            schemaRestClient.getSchemaNames(\"user\");\n+\n+                    if (schemas == null) {\n+                        schemas = new ArrayList<String>();\n+                    }\n+\n+                    return schemas;\n+                }\n+            };\n+\n+    final private IModel<List<String>> dsnames =\n+            new LoadableDetachableModel<List<String>>() {\n+\n+                private static final long serialVersionUID =\n+                        5275935387613157437L;\n+\n+                @Override\n+                protected List<String> load() {\n+\n+                    List<String> schemas =\n+                            schemaRestClient.getDerivedSchemaNames(\"user\");\n+\n+                    if (schemas == null) {\n+                        schemas = new ArrayList<String>();\n+                    }\n+\n+                    return schemas;\n+                }\n+            };\n+\n+    final private IModel<List<String>> vsnames =\n+            new LoadableDetachableModel<List<String>>() {\n+\n+                private static final long serialVersionUID =\n+                        5275935387613157437L;\n+\n+                @Override\n+                protected List<String> load() {\n+\n+                    List<String> schemas =\n+                            schemaRestClient.getVirtualSchemaNames(\"user\");\n+\n+                    if (schemas == null) {\n+                        schemas = new ArrayList<String>();\n+                    }\n+\n+                    return schemas;\n+                }\n+            };\n+\n+    private final List<String> userDetails;\n+\n     private final List<String> selectedSchemas;\n \n+    private final List<String> selectedVirSchemas;\n+\n+    private final List<String> selectedDerSchemas;\n+\n     public DisplayAttributesModalPage(\n             final PageReference callerPageRef,\n-            final IModel<List<String>> names,\n             final ModalWindow window) {\n \n         super();\n \n-        final Form form = new Form(\"UserAttributesForm\");\n+        final Form form = new Form(\"form\");\n         form.setModel(new CompoundPropertyModel(this));\n+\n+        userDetails = prefMan.getList(\n+                getRequest(), Constants.PREF_USERS_DETAILS_VIEW);\n+\n         selectedSchemas = prefMan.getList(\n                 getRequest(), Constants.PREF_USERS_ATTRIBUTES_VIEW);\n \n-        final CheckGroup group = new CheckGroup(\n-                \"checkgroup\", new PropertyModel(this, \"selectedSchemas\"));\n-        form.add(group);\n+        selectedVirSchemas = prefMan.getList(\n+                getRequest(), Constants.PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW);\n+\n+        selectedDerSchemas = prefMan.getList(\n+                getRequest(), Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW);\n \n-        final ListView<String> schemas =\n-                new ListView<String>(\"schemas\", names) {\n+        final CheckGroup dgroup = new CheckGroup(\n+                \"dCheckGroup\", new PropertyModel(this, \"userDetails\"));\n+        form.add(dgroup);\n+\n+        final ListView<String> details =\n+                new ListView<String>(\"details\", dnames) {\n \n                     @Override\n                     protected void populateItem(ListItem<String> item) {\n-                        item.add(new Check(\"check\", item.getModel()));\n-                        item.add(new Label(\"name\", item.getModelObject()));\n+                        item.add(new Check(\"dcheck\", item.getModel()));\n+                        item.add(new Label(\"dname\", new ResourceModel(\n+                                item.getModelObject(),\n+                                item.getModelObject())));\n                     }\n                 };\n-        group.add(schemas);\n+        dgroup.add(details);\n \n-        group.add(new AbstractValidator() {\n+        if (names.getObject() != null && !names.getObject().isEmpty()) {\n+            final Fragment fragment =\n+                    new Fragment(\"schemas\", \"sfragment\", form);\n+            form.add(fragment);\n \n-            @Override\n-            protected void onValidate(IValidatable iv) {\n-                if (((List) iv.getValue()).size() > MAX_SELECTIONS) {\n-                    error(iv, \"tooMuchSelections\");\n-                }\n-            }\n-        });\n+            final CheckGroup sgroup = new CheckGroup(\n+                    \"sCheckGroup\", new PropertyModel(this, \"selectedSchemas\"));\n+            fragment.add(sgroup);\n+\n+            final ListView<String> schemas =\n+                    new ListView<String>(\"schemas\", names) {\n+\n+                        @Override\n+                        protected void populateItem(ListItem<String> item) {\n+                            item.add(new Check(\"scheck\", item.getModel()));\n+                            item.add(new Label(\"sname\", new ResourceModel(\n+                                    item.getModelObject(),\n+                                    item.getModelObject())));\n+                        }\n+                    };\n+            sgroup.add(schemas);\n+        } else {\n+            final Fragment fragment =\n+                    new Fragment(\"schemas\", \"emptyFragment\", form);\n+            form.add(fragment);\n+\n+            selectedSchemas.clear();\n+        }\n+\n+        if (vsnames.getObject() != null && !vsnames.getObject().isEmpty()) {\n+            final Fragment fragment =\n+                    new Fragment(\"vschemas\", \"vsfragment\", form);\n+            form.add(fragment);\n+\n+            final CheckGroup vsgroup = new CheckGroup(\n+                    \"vsCheckGroup\",\n+                    new PropertyModel(this, \"selectedVirSchemas\"));\n+            fragment.add(vsgroup);\n+\n+            final ListView<String> virSchemas =\n+                    new ListView<String>(\"virSchemas\", vsnames) {\n+\n+                        @Override\n+                        protected void populateItem(ListItem<String> item) {\n+                            item.add(new Check(\"vscheck\", item.getModel()));\n+                            item.add(new Label(\"vsname\", new ResourceModel(\n+                                    item.getModelObject(),\n+                                    item.getModelObject())));\n+                        }\n+                    };\n+            vsgroup.add(virSchemas);\n+        } else {\n+            final Fragment fragment =\n+                    new Fragment(\"vschemas\", \"emptyFragment\", form);\n+            form.add(fragment);\n+\n+            selectedVirSchemas.clear();\n+        }\n+\n+        if (dsnames.getObject() != null && !dsnames.getObject().isEmpty()) {\n+            final Fragment fragment =\n+                    new Fragment(\"dschemas\", \"dsfragment\", form);\n+            form.add(fragment);\n+\n+            final CheckGroup dsgroup = new CheckGroup(\n+                    \"dsCheckGroup\",\n+                    new PropertyModel(this, \"selectedDerSchemas\"));\n+            fragment.add(dsgroup);\n+\n+            final ListView<String> derSchemas =\n+                    new ListView<String>(\"derSchemas\", dsnames) {\n+\n+                        @Override\n+                        protected void populateItem(ListItem<String> item) {\n+                            item.add(new Check(\"dscheck\", item.getModel()));\n+                            item.add(new Label(\"dsname\", new ResourceModel(\n+                                    item.getModelObject(),\n+                                    item.getModelObject())));\n+                        }\n+                    };\n+            dsgroup.add(derSchemas);\n+        } else {\n+            final Fragment fragment =\n+                    new Fragment(\"dschemas\", \"emptyFragment\", form);\n+            form.add(fragment);\n+\n+            selectedDerSchemas.clear();\n+        }\n \n         final IndicatingAjaxButton submit = new IndicatingAjaxButton(\n-                \"submit\",\n-                new ResourceModel(\"submit\")) {\n+                \"submit\", new ResourceModel(\"submit\")) {\n \n             private static final long serialVersionUID = -4804368561204623354L;\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target,\n                     final Form<?> form) {\n \n-                prefMan.setList(getRequest(), getResponse(),\n-                        Constants.PREF_USERS_ATTRIBUTES_VIEW,\n-                        selectedSchemas);\n-                ((Users) callerPageRef.getPage()).setModalResult(true);\n+                if (userDetails.size()\n+                        + selectedSchemas.size()\n+                        + selectedVirSchemas.size()\n+                        + selectedDerSchemas.size() > MAX_SELECTIONS) {\n+                    error(getString(\"tooMuchSelections\"));\n+                    onError(target, form);\n+                } else {\n+                    final Map<String, List<String>> prefs =\n+                            new HashMap<String, List<String>>();\n+\n+                    prefs.put(Constants.PREF_USERS_DETAILS_VIEW,\n+                            userDetails);\n+\n+                    prefs.put(Constants.PREF_USERS_ATTRIBUTES_VIEW,\n+                            selectedSchemas);\n+\n+                    prefs.put(Constants.PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW,\n+                            selectedVirSchemas);\n \n-                window.close(target);\n+                    prefs.put(Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW,\n+                            selectedDerSchemas);\n+\n+                    prefMan.setList(getRequest(), getResponse(), prefs);\n+\n+                    ((Users) callerPageRef.getPage()).setModalResult(true);\n+\n+                    window.close(target);\n+                }\n             }\n \n             @Override"},{"sha":"9abbee01e71308e1f1ce3e86f301c854cbd07ae2","filename":"console/src/main/java/org/syncope/console/pages/Users.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -93,8 +93,7 @@ public Page createPage() {\n         final Form searchForm = new Form(\"searchForm\");\n         add(searchForm);\n \n-        final UserSearchPanel searchPanel =\n-                new UserSearchPanel(\"searchPanel\");\n+        final UserSearchPanel searchPanel = new UserSearchPanel(\"searchPanel\");\n         searchForm.add(searchPanel);\n \n         searchForm.add(new IndicatingAjaxButton(\n@@ -106,7 +105,7 @@ public Page createPage() {\n             protected void onSubmit(final AjaxRequestTarget target,\n                     final Form<?> form) {\n \n-                final NodeCond searchCond = searchPanel.buildSearchCond();\n+                    final NodeCond searchCond = searchPanel.buildSearchCond();\n                 LOG.debug(\"Node condition \" + searchCond);\n \n                 doSearch(target, searchCond, searchResult);"},{"sha":"8a28f894e7f81bdc91cfccd55e71de43b6e1e7a7","filename":"console/src/main/java/org/syncope/console/pages/panels/ResultSetPanel.java","status":"modified","additions":76,"deletions":158,"changes":234,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -14,7 +14,9 @@\n  */\n package org.syncope.console.pages.panels;\n \n+import java.lang.reflect.Field;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.List;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n@@ -36,15 +38,12 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.panel.FeedbackPanel;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.markup.repeater.Item;\n import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.LoadableDetachableModel;\n-import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n@@ -61,9 +60,11 @@\n import org.syncope.console.pages.DisplayAttributesModalPage;\n import org.syncope.console.pages.UserModalPage;\n import org.syncope.console.pages.Users;\n-import org.syncope.console.rest.SchemaRestClient;\n import org.syncope.console.rest.UserRestClient;\n import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n+import org.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n+import org.syncope.console.wicket.extensions.markup.html.repeater.data.table.TokenColumn;\n+import org.syncope.console.wicket.extensions.markup.html.repeater.data.table.UserAttrColumn;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n \n@@ -88,35 +89,19 @@ public class ResultSetPanel extends Panel implements IEventSource {\n     /**\n      * Schemas to be shown modal window height.\n      */\n-    private final static int DISPLAYATTRS_MODAL_WIN_HEIGHT = 350;\n+    private final static int DISPLAYATTRS_MODAL_WIN_HEIGHT = 550;\n \n     /**\n      * Schemas to be shown modal window width.\n      */\n     private final static int DISPLAYATTRS_MODAL_WIN_WIDTH = 550;\n \n-    /**\n-     * Prefix used to dintinguish between derived and not derived schemas.\n-     */\n-    private final static String DERIVED_ATTRIBUTE_PREFIX = \"[D] \";\n-\n-    /**\n-     * Prefix used to dintinguish between virtual and not virtual schemas.\n-     */\n-    private final static String VIRTUAL_ATTRIBUTE_PREFIX = \"[V] \";\n-\n     /**\n      * User rest client.\n      */\n     @SpringBean\n     private UserRestClient userRestClient;\n \n-    /**\n-     * Schema rest client.\n-     */\n-    @SpringBean\n-    private SchemaRestClient schemaRestClient;\n-\n     /**\n      * Application preferences.\n      */\n@@ -177,45 +162,6 @@ public class ResultSetPanel extends Panel implements IEventSource {\n      */\n     private final Users page;\n \n-    final private IModel<List<String>> choosableSchemaNames =\n-            new LoadableDetachableModel<List<String>>() {\n-\n-                private static final long serialVersionUID =\n-                        5275935387613157437L;\n-\n-                @Override\n-                protected List<String> load() {\n-\n-                    List<String> schemas =\n-                            schemaRestClient.getSchemaNames(\"user\");\n-\n-                    if (schemas == null) {\n-                        schemas = new ArrayList<String>();\n-                    }\n-\n-                    List<String> derivedSchemas =\n-                            schemaRestClient.getDerivedSchemaNames(\"user\");\n-\n-                    if (derivedSchemas != null) {\n-                        for (String schema : derivedSchemas) {\n-                            schemas.add(\n-                                    DERIVED_ATTRIBUTE_PREFIX + schema);\n-                        }\n-                    }\n-\n-                    List<String> virtualSchemas =\n-                            schemaRestClient.getVirtualSchemaNames(\"user\");\n-\n-                    if (virtualSchemas != null) {\n-                        for (String schema : virtualSchemas) {\n-                            schemas.add(VIRTUAL_ATTRIBUTE_PREFIX + schema);\n-                        }\n-                    }\n-\n-                    return schemas;\n-                }\n-            };\n-\n     public <T extends AbstractAttributableTO> ResultSetPanel(\n             final String id,\n             final boolean filtered,\n@@ -277,7 +223,6 @@ public void onClick(final AjaxRequestTarget target) {\n                             public Page createPage() {\n                                 return new DisplayAttributesModalPage(\n                                         page.getPageReference(),\n-                                        choosableSchemaNames,\n                                         displaymodal);\n                             }\n                         });\n@@ -327,14 +272,11 @@ public void onComponentTag(\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                preferences.set(\n-                        getRequest(),\n-                        getResponse(),\n+                preferences.set(getRequest(), getResponse(),\n                         Constants.PREF_USERS_PAGINATOR_ROWS,\n                         String.valueOf(rows));\n \n                 final EventDataWrapper data = new EventDataWrapper();\n-//                data.setTable(resultTable);\n                 data.setTarget(target);\n \n                 send(getParent(), Broadcast.BREADTH, data);\n@@ -356,7 +298,6 @@ public void search(\n \n     private void updateResultTable(final boolean create) {\n         // Requires preferences/container attributes not null ...\n-\n         rows = preferences.getPaginatorRows(\n                 getRequest(), Constants.PREF_USERS_PAGINATOR_ROWS);\n \n@@ -380,26 +321,74 @@ private void updateResultTable(final boolean create) {\n     }\n \n     private List<IColumn<UserTO>> getColumns() {\n-        List<IColumn<UserTO>> columns = new ArrayList<IColumn<UserTO>>();\n-        columns.add(new PropertyColumn(\n-                new ResourceModel(\"id\"), \"id\", \"id\"));\n-        columns.add(new PropertyColumn(\n-                new ResourceModel(\"username\"), \"username\", \"username\"));\n-        columns.add(new PropertyColumn(\n-                new ResourceModel(\"status\"), \"status\", \"status\"));\n-        columns.add(new TokenColumn(new ResourceModel(\"token\"), \"token\"));\n-\n-        for (String schemaName : preferences.getList(getRequest(),\n+        final List<IColumn<UserTO>> columns = new ArrayList<IColumn<UserTO>>();\n+\n+        for (String name : preferences.getList(getRequest(),\n+                Constants.PREF_USERS_DETAILS_VIEW)) {\n+\n+            Field field = null;\n+\n+            try {\n+                field = UserTO.class.getDeclaredField(name);\n+            } catch (Exception ue) {\n+                LOG.debug(\"Error retrieving UserTO field {}\", name, ue);\n+                try {\n+                    field = AbstractAttributableTO.class.getDeclaredField(name);\n+                } catch (Exception aae) {\n+                    LOG.error(\"Error retrieving AbstractAttributableTO field {}\",\n+                            name, aae);\n+                }\n+            }\n+\n+            if (\"token\".equalsIgnoreCase(name)) {\n+                columns.add(new TokenColumn(\"token\"));\n+            } else if (field != null && field.getType().equals(Date.class)) {\n+                columns.add(new DatePropertyColumn<UserTO>(\n+                        new ResourceModel(name, name), name, name));\n+            } else {\n+                columns.add(new PropertyColumn(\n+                        new ResourceModel(name, name), name, name));\n+            }\n+        }\n+\n+        for (String name : preferences.getList(getRequest(),\n                 Constants.PREF_USERS_ATTRIBUTES_VIEW)) {\n+            columns.add(new UserAttrColumn(\n+                    name, UserAttrColumn.SchemaType.schema));\n+        }\n \n+        for (String name : preferences.getList(getRequest(),\n+                Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW)) {\n             columns.add(new UserAttrColumn(\n-                    new Model<String>(schemaName), schemaName));\n+                    name, UserAttrColumn.SchemaType.derivedSchema));\n+        }\n+\n+        for (String name : preferences.getList(getRequest(),\n+                Constants.PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW)) {\n+            columns.add(new UserAttrColumn(\n+                    name, UserAttrColumn.SchemaType.virtualSchema));\n+        }\n+\n+        // Add defaults in case of empty selections\n+        if (columns.isEmpty()) {\n+            columns.add(new PropertyColumn(\n+                    new ResourceModel(\"id\", \"id\"), \"id\", \"id\"));\n+            columns.add(new PropertyColumn(\n+                    new ResourceModel(\"username\", \"username\"),\n+                    \"username\", \"username\"));\n+            columns.add(new PropertyColumn(\n+                    new ResourceModel(\"status\", \"status\"), \"status\", \"status\"));\n         }\n \n         columns.add(new AbstractColumn<UserTO>(new ResourceModel(\"edit\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n             @Override\n             public void populateItem(\n                     final Item<ICellPopulator<UserTO>> cellItem,\n@@ -442,6 +431,11 @@ public Page createPage() {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n             @Override\n             public void populateItem(\n                     final Item<ICellPopulator<UserTO>> cellItem,\n@@ -466,7 +460,11 @@ public void onClick(final AjaxRequestTarget target) {\n                             error(scce.getMessage());\n                         }\n                         target.add(feedbackPanel);\n-                        target.add(container);\n+\n+                        final EventDataWrapper data = new EventDataWrapper();\n+                        data.setTarget(target);\n+\n+                        send(getParent(), Broadcast.BREADTH, data);\n                     }\n                 });\n                 cellItem.add(panel);\n@@ -476,86 +474,6 @@ public void onClick(final AjaxRequestTarget target) {\n         return columns;\n     }\n \n-    private class TokenColumn extends AbstractColumn<UserTO> {\n-\n-        private static final long serialVersionUID = 8077865338230121496L;\n-\n-        public TokenColumn(final IModel<String> displayModel,\n-                final String sortProperty) {\n-\n-            super(displayModel, sortProperty);\n-        }\n-\n-        @Override\n-        public void populateItem(final Item<ICellPopulator<UserTO>> cellItem,\n-                final String componentId,\n-                final IModel<UserTO> rowModel) {\n-\n-            if (rowModel.getObject().getToken() != null\n-                    && !rowModel.getObject().getToken().isEmpty()) {\n-                cellItem.add(\n-                        new Label(componentId, getString(\"tokenValued\")));\n-            } else {\n-                cellItem.add(\n-                        new Label(componentId, getString(\"tokenNotValued\")));\n-            }\n-        }\n-    }\n-\n-    private static class UserAttrColumn extends AbstractColumn<UserTO> {\n-\n-        private static final long serialVersionUID = 2624734332447371372L;\n-\n-        private final String schemaName;\n-\n-        public UserAttrColumn(\n-                final IModel<String> displayModel, final String schemaName) {\n-\n-            super(displayModel,\n-                    schemaName.startsWith(DERIVED_ATTRIBUTE_PREFIX)\n-                    ? schemaName.substring(\n-                    DERIVED_ATTRIBUTE_PREFIX.length(), schemaName.length())\n-                    : schemaName.startsWith(VIRTUAL_ATTRIBUTE_PREFIX)\n-                    ? schemaName.substring(\n-                    VIRTUAL_ATTRIBUTE_PREFIX.length(), schemaName.length())\n-                    : schemaName);\n-\n-            this.schemaName = schemaName;\n-        }\n-\n-        @Override\n-        public void populateItem(\n-                final Item<ICellPopulator<UserTO>> cellItem,\n-                final String componentId,\n-                final IModel<UserTO> rowModel) {\n-\n-            Label label;\n-\n-            List<String> values =\n-                    schemaName.startsWith(DERIVED_ATTRIBUTE_PREFIX)\n-                    ? rowModel.getObject().getDerivedAttributeMap().get(\n-                    schemaName.substring(\n-                    DERIVED_ATTRIBUTE_PREFIX.length(), schemaName.length()))\n-                    : schemaName.startsWith(VIRTUAL_ATTRIBUTE_PREFIX)\n-                    ? rowModel.getObject().getVirtualAttributeMap().get(\n-                    schemaName.substring(\n-                    VIRTUAL_ATTRIBUTE_PREFIX.length(), schemaName.length()))\n-                    : rowModel.getObject().getAttributeMap().get(schemaName);\n-\n-            if (values == null || values.isEmpty()) {\n-                label = new Label(componentId, \"\");\n-            } else {\n-                if (values.size() == 1) {\n-                    label = new Label(componentId, values.iterator().next());\n-                } else {\n-                    label = new Label(componentId, values.toString());\n-                }\n-            }\n-\n-            cellItem.add(label);\n-        }\n-    }\n-\n     @Override\n     public void onEvent(IEvent<?> event) {\n         if (event.getPayload() instanceof EventDataWrapper) {"},{"sha":"d5981bd8ac2eea68e87887df9d680d91f93949f3","filename":"console/src/main/java/org/syncope/console/pages/panels/UserSearchPanel.java","status":"modified","additions":127,"deletions":70,"changes":197,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -13,6 +13,7 @@\n  */\n package org.syncope.console.pages.panels;\n \n+import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -44,8 +45,10 @@\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.ResourceCond;\n+import org.syncope.client.search.SyncopeUserCond;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.RoleTO;\n+import org.syncope.client.to.UserTO;\n import org.syncope.console.commons.SearchCondWrapper;\n import org.syncope.console.commons.SearchCondWrapper.FilterType;\n import org.syncope.console.commons.SearchCondWrapper.OperationType;\n@@ -63,6 +66,10 @@ public class UserSearchPanel extends Panel {\n     private static final Logger LOG =\n             LoggerFactory.getLogger(UserSearchPanel.class);\n \n+    private List<String> ATTRIBUTES_NOTINCLUDED = Arrays.asList(new String[]{\n+                \"attributes\", \"derivedAttributes\", \"virtualAttributes\",\n+                \"serialVersionUID\", \"memberships\", \"resources\", \"password\"});\n+\n     @SpringBean\n     private SchemaRestClient schemaRestClient;\n \n@@ -72,7 +79,32 @@ public class UserSearchPanel extends Panel {\n     @SpringBean\n     private ResourceRestClient resourceRestClient;\n \n-    final private IModel<List<String>> schemaNames =\n+    final private IModel<List<String>> dnames =\n+            new LoadableDetachableModel<List<String>>() {\n+\n+                @Override\n+                protected List<String> load() {\n+\n+                    final List<String> details = new ArrayList<String>();\n+\n+                    Class<?> clazz = UserTO.class;\n+\n+                    // loop on class and all superclasses searching for field\n+                    while (clazz != null && clazz != Object.class) {\n+                        for (Field field : clazz.getDeclaredFields()) {\n+                            if (!ATTRIBUTES_NOTINCLUDED.contains(field.getName())) {\n+                                details.add(field.getName());\n+                            }\n+                        }\n+                        clazz = clazz.getSuperclass();\n+                    }\n+\n+                    Collections.reverse(details);\n+                    return details;\n+                }\n+            };\n+\n+    final private IModel<List<String>> unames =\n             new LoadableDetachableModel<List<String>>() {\n \n                 private static final long serialVersionUID =\n@@ -84,7 +116,7 @@ protected List<String> load() {\n                 }\n             };\n \n-    final private IModel<List<String>> roleNames =\n+    final private IModel<List<String>> ronames =\n             new LoadableDetachableModel<List<String>>() {\n \n                 private static final long serialVersionUID =\n@@ -104,7 +136,7 @@ protected List<String> load() {\n                 }\n             };\n \n-    final private IModel<List<String>> resourceNames =\n+    final private IModel<List<String>> renames =\n             new LoadableDetachableModel<List<String>>() {\n \n                 private static final long serialVersionUID =\n@@ -260,7 +292,7 @@ public FeedbackPanel getSearchFeedback() {\n         return searchFeedback;\n     }\n \n-    private final List<SearchCondWrapper> getSearchCondWrappers(\n+    private List<SearchCondWrapper> getSearchCondWrappers(\n             final NodeCond searchCond) {\n \n         LOG.debug(\"Search condition: {}\", searchCond);\n@@ -294,10 +326,20 @@ private final List<SearchCondWrapper> getSearchCondWrappers(\n         return wrappers;\n     }\n \n-    private final SearchCondWrapper getSearchCondWrapper(\n+    private SearchCondWrapper getSearchCondWrapper(\n             final NodeCond searchCond) {\n \n         SearchCondWrapper wrapper = new SearchCondWrapper();\n+\n+        if (searchCond.getSyncopeUserCond() != null) {\n+            wrapper.setFilterType(FilterType.ATTRIBUTE);\n+            wrapper.setFilterName(\n+                    searchCond.getSyncopeUserCond().getSchema());\n+            wrapper.setType(\n+                    searchCond.getSyncopeUserCond().getType());\n+            wrapper.setFilterValue(\n+                    searchCond.getSyncopeUserCond().getExpression());\n+        }\n         if (searchCond.getAttributeCond() != null) {\n             wrapper.setFilterType(FilterType.ATTRIBUTE);\n             wrapper.setFilterName(\n@@ -352,18 +394,29 @@ private NodeCond buildSearchCond(\n \n         switch (searchConditionWrapper.getFilterType()) {\n             case ATTRIBUTE:\n-                final AttributeCond attributeCond = new AttributeCond();\n-                attributeCond.setSchema(searchConditionWrapper.getFilterName());\n+                // AttributeCond or SyncopeUserCond\n+                final String schema = searchConditionWrapper.getFilterName();\n+\n+                final AttributeCond attributeCond;\n+                if (dnames.getObject().contains(schema)) {\n+                    attributeCond = new SyncopeUserCond();\n+                    nodeCond = searchConditionWrapper.isNotOperator()\n+                            ? NodeCond.getNotLeafCond(\n+                            (SyncopeUserCond) attributeCond)\n+                            : NodeCond.getLeafCond(\n+                            (SyncopeUserCond) attributeCond);\n+                } else {\n+                    attributeCond = new AttributeCond();\n+                    nodeCond = searchConditionWrapper.isNotOperator()\n+                            ? NodeCond.getNotLeafCond(attributeCond)\n+                            : NodeCond.getLeafCond(attributeCond);\n+                }\n+                \n+                attributeCond.setSchema(schema);\n                 attributeCond.setType(searchConditionWrapper.getType());\n                 attributeCond.setExpression(\n                         searchConditionWrapper.getFilterValue());\n \n-                if (searchConditionWrapper.isNotOperator()) {\n-                    nodeCond = NodeCond.getNotLeafCond(attributeCond);\n-                } else {\n-                    nodeCond = NodeCond.getLeafCond(attributeCond);\n-                }\n-\n                 break;\n             case MEMBERSHIP:\n                 final MembershipCond membershipCond = new MembershipCond();\n@@ -430,19 +483,19 @@ public SearchView(final String id,\n         protected void populateItem(\n                 final ListItem<SearchCondWrapper> item) {\n \n-            final SearchCondWrapper searchCondition =\n-                    item.getModelObject();\n+            final SearchCondWrapper searchCondition = item.getModelObject();\n \n             if (item.getIndex() == 0) {\n                 item.add(new Label(\"operationType\", \"\"));\n             } else {\n                 item.add(new Label(\"operationType\",\n-                        searchCondition.getOperationType().\n-                        toString()));\n+                        searchCondition.getOperationType().toString()));\n             }\n \n-            final CheckBox notOperator = new CheckBox(\"notOperator\",\n+            final CheckBox notOperator = new CheckBox(\n+                    \"notOperator\",\n                     new PropertyModel(searchCondition, \"notOperator\"));\n+\n             notOperator.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n                 private static final long serialVersionUID =\n@@ -456,9 +509,10 @@ protected void onUpdate(final AjaxRequestTarget art) {\n             item.add(notOperator);\n \n             final DropDownChoice<String> filterNameChooser =\n-                    new DropDownChoice<String>(\"filterName\",\n-                    new PropertyModel<String>(\n+                    new DropDownChoice<String>(\n+                    \"filterName\", new PropertyModel<String>(\n                     searchCondition, \"filterName\"), (IModel) null);\n+\n             filterNameChooser.setOutputMarkupId(true);\n             filterNameChooser.setRequired(true);\n             item.add(filterNameChooser);\n@@ -477,8 +531,8 @@ protected void onUpdate(final AjaxRequestTarget art) {\n             final DropDownChoice<AttributeCond.Type> type =\n                     new DropDownChoice<AttributeCond.Type>(\n                     \"type\", new PropertyModel<AttributeCond.Type>(\n-                    searchCondition, \"type\"),\n-                    attributeTypes);\n+                    searchCondition, \"type\"), attributeTypes);\n+\n             type.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n                 private static final long serialVersionUID =\n@@ -493,9 +547,9 @@ protected void onUpdate(final AjaxRequestTarget art) {\n \n             final TextField<String> filterValue =\n                     new TextField<String>(\"filterValue\",\n-                    new PropertyModel<String>(searchCondition,\n-                    \"filterValue\"));\n+                    new PropertyModel<String>(searchCondition, \"filterValue\"));\n             item.add(filterValue);\n+\n             filterValue.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n                 private static final long serialVersionUID =\n@@ -506,46 +560,6 @@ protected void onUpdate(final AjaxRequestTarget art) {\n                 }\n             });\n \n-            try {\n-                switch (searchCondition.getFilterType()) {\n-                    case ATTRIBUTE:\n-                        filterNameChooser.setChoices(schemaNames);\n-                        if (!type.isEnabled()) {\n-                            type.setEnabled(true);\n-                            type.setRequired(true);\n-                        }\n-                        if (!filterValue.isEnabled()) {\n-                            filterValue.setEnabled(true);\n-                        }\n-                        break;\n-                    case MEMBERSHIP:\n-                        filterNameChooser.setChoices(roleNames);\n-                        type.setEnabled(false);\n-                        type.setRequired(false);\n-                        type.setModelObject(null);\n-\n-                        filterValue.setEnabled(false);\n-                        filterValue.setModelObject(\"\");\n-\n-                        break;\n-                    case RESOURCE:\n-                        filterNameChooser.setChoices(resourceNames);\n-                        type.setEnabled(false);\n-                        type.setRequired(false);\n-                        type.setModelObject(null);\n-\n-                        filterValue.setEnabled(false);\n-                        filterValue.setModelObject(\"\");\n-\n-                        break;\n-                    default:\n-                        filterNameChooser.setChoices(Collections.EMPTY_LIST);\n-                }\n-            } catch (NullPointerException npe) {\n-                // searchCondition null\n-                filterNameChooser.setChoices(Collections.EMPTY_LIST);\n-            }\n-\n             final DropDownChoice<FilterType> filterTypeChooser =\n                     new DropDownChoice<FilterType>(\"filterType\",\n                     new PropertyModel<FilterType>(searchCondition,\n@@ -562,12 +576,6 @@ protected void onUpdate(final AjaxRequestTarget art) {\n                         @Override\n                         protected void onUpdate(\n                                 final AjaxRequestTarget target) {\n-\n-                            filterNameChooser.setChoices(\n-                                    searchCondition.getFilterType()\n-                                    == FilterType.ATTRIBUTE\n-                                    ? schemaNames : roleNames);\n-                            target.add(filterNameChooser);\n                             target.add(searchFormContainer);\n                         }\n                     });\n@@ -606,6 +614,55 @@ protected void onError(final AjaxRequestTarget target,\n             }\n \n             item.add(dropButton);\n+\n+            try {\n+                switch (searchCondition.getFilterType()) {\n+                    case ATTRIBUTE:\n+                        final List<String> names =\n+                                new ArrayList<String>(dnames.getObject());\n+\n+                        if (unames.getObject() != null\n+                                && !unames.getObject().isEmpty()) {\n+                            names.addAll(unames.getObject());\n+                        }\n+\n+                        filterNameChooser.setChoices(names);\n+                        if (!type.isEnabled()) {\n+                            type.setEnabled(true);\n+                            type.setRequired(true);\n+                        }\n+                        if (!filterValue.isEnabled()) {\n+                            filterValue.setEnabled(true);\n+                        }\n+\n+                        break;\n+                    case MEMBERSHIP:\n+                        filterNameChooser.setChoices(ronames);\n+                        type.setEnabled(false);\n+                        type.setRequired(false);\n+                        type.setModelObject(null);\n+\n+                        filterValue.setEnabled(false);\n+                        filterValue.setModelObject(\"\");\n+\n+                        break;\n+                    case RESOURCE:\n+                        filterNameChooser.setChoices(renames);\n+                        type.setEnabled(false);\n+                        type.setRequired(false);\n+                        type.setModelObject(null);\n+\n+                        filterValue.setEnabled(false);\n+                        filterValue.setModelObject(\"\");\n+\n+                        break;\n+                    default:\n+                        filterNameChooser.setChoices(Collections.EMPTY_LIST);\n+                }\n+            } catch (NullPointerException npe) {\n+                // searchCondition null\n+                filterNameChooser.setChoices(Collections.EMPTY_LIST);\n+            }\n         }\n     }\n }"},{"sha":"c2e8eab7840ba66cdc2d06ec4c4b471c93aa13c6","filename":"console/src/main/java/org/syncope/console/wicket/extensions/markup/html/repeater/data/table/TokenColumn.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FTokenColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FTokenColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FTokenColumn.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.console.wicket.extensions.markup.html.repeater.data.table;\n+\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.springframework.util.StringUtils;\n+import org.syncope.client.to.UserTO;\n+\n+public class TokenColumn extends AbstractColumn<UserTO> {\n+\n+    private static final long serialVersionUID = 8077865338230121496L;\n+\n+    public TokenColumn(final String name) {\n+        super(new ResourceModel(name, name), name);\n+    }\n+\n+    @Override\n+    public void populateItem(final Item<ICellPopulator<UserTO>> cellItem,\n+            final String componentId,\n+            final IModel<UserTO> rowModel) {\n+\n+        if (StringUtils.hasText(rowModel.getObject().getToken())) {\n+            cellItem.add(new Label(\n+                    componentId,\n+                    new ResourceModel(\"tokenValued\", \"tokenValued\")));\n+        } else {\n+            cellItem.add(new Label(\n+                    componentId,\n+                    new ResourceModel(\"tokenNotValued\", \"tokenNotValued\")));\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"30d870b2c2d9a08ee71d1938ba549e81d3d27aec","filename":"console/src/main/java/org/syncope/console/wicket/extensions/markup/html/repeater/data/table/UserAttrColumn.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FUserAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FUserAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FUserAttrColumn.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.console.wicket.extensions.markup.html.repeater.data.table;\n+\n+import java.util.List;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.syncope.client.to.UserTO;\n+\n+public class UserAttrColumn extends AbstractColumn<UserTO> {\n+\n+    private static final long serialVersionUID = 2624734332447371372L;\n+\n+    public enum SchemaType {\n+\n+        schema,\n+        virtualSchema,\n+        derivedSchema;\n+    };\n+\n+    private final String name;\n+\n+    private final SchemaType schemaType;\n+\n+    public UserAttrColumn(\n+            final String name,\n+            final SchemaType schemaType) {\n+\n+        super(new ResourceModel(name, name), name);\n+        this.name = name;\n+        this.schemaType = schemaType;\n+    }\n+\n+    @Override\n+    public void populateItem(\n+            final Item<ICellPopulator<UserTO>> cellItem,\n+            final String componentId,\n+            final IModel<UserTO> rowModel) {\n+\n+        final List<String> values;\n+\n+        switch (schemaType) {\n+            case schema:\n+                values = rowModel.getObject().getAttributeMap().\n+                        get(name);\n+                break;\n+            case virtualSchema:\n+                values = rowModel.getObject().getVirtualAttributeMap().\n+                        get(name);\n+                break;\n+            case derivedSchema:\n+                values = rowModel.getObject().getDerivedAttributeMap().\n+                        get(name);\n+                break;\n+            default:\n+                values = null;\n+        }\n+\n+        if (values == null || values.isEmpty()) {\n+            cellItem.add(new Label(componentId, \"\"));\n+        } else {\n+            if (values.size() == 1) {\n+                cellItem.add(\n+                        new Label(componentId, values.iterator().next()));\n+            } else {\n+                cellItem.add(\n+                        new Label(componentId, values.toString()));\n+            }\n+        }\n+    }\n+}"},{"sha":"5e2b801ad26c73285068c3dac149c3c849a4e188","filename":"console/src/main/resources/org/syncope/console/pages/DisplayAttributesModalPage.html","status":"modified","additions":58,"deletions":5,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.html?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -45,26 +45,79 @@\n             float: none;\n             margin-left: 10px;\n         }\n+\n+        span.grouplabel{\n+            display:block;\n+            clear: both;\n+            margin-left: 10px;\n+            margin-bottom: 10px;\n+            font-weight: bold;\n+        }\n     </style>\n </wicket:head>\n <wicket:extend>\n-    <form wicket:id=\"UserAttributesForm\">\n+    <form wicket:id=\"form\">\n         <div id=\"attributes-view\">\n             <p class=\"ui-widget ui-corner-all ui-widget-header\">\n             <wicket:message key=\"title\"/>\n             </p>\n \n-            <span class=\"group\" wicket:id=\"checkgroup\">\n+            <span class=\"grouplabel\"><wicket:message key=\"schemas\"/></span>\n+            <span wicket:id=\"dCheckGroup\">\n                 <div class=\"group\">\n-                    <div wicket:id=\"schemas\">\n-                        <input type=\"checkbox\" wicket:id=\"check\"/>\n-                        <span wicket:id=\"name\">[schema name]</span>\n+                    <div wicket:id=\"details\">\n+                        <input type=\"checkbox\" wicket:id=\"dcheck\"/>\n+                        <span wicket:id=\"dname\">[schema name]</span>\n                     </div>\n                 </div>\n             </span>\n \n+            <span wicket:id=\"schemas\">[schemas]</span>\n+\n+            <span wicket:id=\"dschemas\">[derived schemas]</span>\n+\n+            <span wicket:id=\"vschemas\">[virtual schemas]</span>\n+\n         </div>\n \n+        <wicket:fragment wicket:id=\"sfragment\">\n+            <span wicket:id=\"sCheckGroup\">\n+                <div class=\"group\">\n+                    <div wicket:id=\"schemas\">\n+                        <input type=\"checkbox\" wicket:id=\"scheck\"/>\n+                        <span wicket:id=\"sname\">[schema name]</span>\n+                    </div>\n+                </div>\n+            </span>\n+        </wicket:fragment>\n+\n+        <wicket:fragment wicket:id=\"dsfragment\">\n+            <span class=\"grouplabel\"><wicket:message key=\"derSchemas\"/></span>\n+            <span wicket:id=\"dsCheckGroup\">\n+                <div class=\"group\">\n+                    <div wicket:id=\"derSchemas\">\n+                        <input type=\"checkbox\" wicket:id=\"dscheck\"/>\n+                        <span wicket:id=\"dsname\">[schema name]</span>\n+                    </div>\n+                </div>\n+            </span>\n+        </wicket:fragment>\n+\n+        <wicket:fragment wicket:id=\"vsfragment\">\n+            <span class=\"grouplabel\"><wicket:message key=\"virSchemas\"/></span>\n+            <span wicket:id=\"vsCheckGroup\">\n+                <div class=\"group\">\n+                    <div wicket:id=\"virSchemas\">\n+                        <input type=\"checkbox\" wicket:id=\"vscheck\"/>\n+                        <span wicket:id=\"vsname\">[schema name]</span>\n+                    </div>\n+                </div>\n+            </span>\n+        </wicket:fragment>\n+\n+        <wicket:fragment wicket:id=\"emptyFragment\">\n+        </wicket:fragment>\n+\n         <div class=\"submit\">\n             <input type=\"submit\" class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\" wicket:id=\"submit\"/>\n         </div>"},{"sha":"d6310619554710cf6678cb86af8dc2ed13644407","filename":"console/src/main/resources/org/syncope/console/pages/DisplayAttributesModalPage.properties","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.properties?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -1,2 +1,18 @@\n title=Change display attributes\n tooMuchSelections=Too many columns to be shown\n+schemas=User attributes\n+derSchemas=User derived attributes\n+virSchemas=User virtual attributes\n+\n+firstname=Firstname\n+surname=Surname\n+userId=User Id\n+edit=Edit\n+delete=Delete\n+id=Id\n+status=Status\n+token=Token\n+username=Username\n+creationDate=Creation Date\n+tokenValued=Valued\n+tokenNotValued=Not valued"},{"sha":"368920277dbbdb0db828067397e07de910b45cd9","filename":"console/src/main/resources/org/syncope/console/pages/DisplayAttributesModalPage_it.properties","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage_it.properties?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -1,2 +1,18 @@\n title=Scegli attributi da visualizzare\n-tooMuchSelections=Troppe colonne da visualizzare\n\\ No newline at end of file\n+tooMuchSelections=Troppe colonne da visualizzare\n+schemas=Attributi utente\n+derSchemas=Attributi derivati utente\n+virSchemas=Attributi virtuali utente\n+\n+firstname=Firstname\n+surname=Surname\n+userId=User Id\n+edit=Edit\n+delete=Delete\n+id=Id\n+status=Stato\n+token=Token\n+username=Username\n+creationDate=Data Creazione\n+tokenValued=Valued\n+tokenNotValued=Not valuedF\n\\ No newline at end of file"},{"sha":"e28a6a33e40dda69128ac51b8efbe00e880ab42c","filename":"console/src/main/resources/org/syncope/console/pages/Users.properties","status":"modified","additions":1,"deletions":14,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -1,21 +1,8 @@\n-#Tabs\n tab1=List\n tab2=Search\n search=Search\n-firstname=Name\n-surname=Surname\n-userId=User id:\n create_user=Create new user\n-edit=Edit\n-delete=Delete\n-id=Id\n-status=Status\n-token=Token\n-username=Username\n-change_attributes=Change display attributes\n-tokenValued=Valued\n-tokenNotValued=Not valued\n-#tab2 - USERS SEARCH\n+\n search_title=Set criteria for user search\n search_error=Error:search's format is invalid\n search_results_title=Search results:"},{"sha":"02e847eae0932b6f16eeddbd435f5c139be5a7b2","filename":"console/src/main/resources/org/syncope/console/pages/Users_it.properties","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -1,20 +1,8 @@\n-#Tabs\n tab1=Elenco\n tab2=Ricerca\n search=Cerca\n-firstname=Nome\n-surname=Cognome\n create_user=Crea nuovo utente\n-userId=User id\n-edit=Modifica\n-delete=Elimina\n-id=Id\n-change_attributes=Gestisci attributi da visualizzare\n-status=Stato\n-token=Token\n-username=Username\n-tokenValued=Impostato\n-tokenNotValued=Non impostato\n+\n search_title=Impostare i criteri di ricerca\n search_error=Errore:il formato di ricerca non \\u00e8 valido\n search_results_title=Risultati ricerca:"},{"sha":"2ca38f214bff64e2bad68a6842d5a7effd4511b0","filename":"console/src/main/resources/org/syncope/console/pages/panels/ResultSetPanel.html","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.html?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -27,6 +27,10 @@\n             left:97%;\n             width:10px;\n         }\n+\n+        .action{\n+            width: 100px;\n+        }\n     </style>\n </wicket:head>\n <html>\n@@ -37,14 +41,12 @@\n                 <img src=\"img/settings-icon.png\" alt=\"settings icon\" class=\"drop_button\" />\n             </a>\n \n-            <table class=\"ui-widget ui-widget-content table-hover\"\n-                   wicket:id=\"resultTable\"/>\n+            <table class=\"ui-widget ui-widget-content table-hover\" wicket:id=\"resultTable\"/>\n \n             <span style=\"float:right\">\n                 <form wicket:id=\"paginator\" style=\"display:inline\">\n                     <label><wicket:message key=\"displayRows\"/></label>\n-                    <select class=\"text ui-widget-content ui-corner-all\"\n-                            wicket:id=\"rowsChooser\"/>\n+                    <select class=\"text ui-widget-content ui-corner-all\" wicket:id=\"rowsChooser\"/>\n                 </form>\n             </span>\n         </div>"},{"sha":"2333e970c083d98909120bd4b7f7ebf56df880a8","filename":"console/src/main/resources/org/syncope/console/pages/panels/ResultSetPanel.properties","status":"modified","additions":4,"deletions":27,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.properties?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -10,40 +10,17 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n-search_results_title=search result\n-displayRows=display rows\n+displayRows=Display rows\n \n-#Tabs\n-tab1=List\n-tab2=Search\n-search=Search\n-firstname=Name\n+firstname=Firstname\n surname=Surname\n-userId=User id:\n-create_user=Create new user\n+userId=User Id\n edit=Edit\n delete=Delete\n id=Id\n status=Status\n token=Token\n username=Username\n-change_attributes=Change display attributes\n+creationDate=Creation Date\n tokenValued=Valued\n tokenNotValued=Not valued\n-#tab2 - USERS SEARCH\n-search_title=Set criteria for user search\n-addAndButton=+ And\n-addOrButton=+ Or\n-dropButton=-\n-search_error=Error:search's format is invalid\n-search_results_title=Search results:\n-search_noResults=No matches found.\n-reset=Reset\n-search_not_value=Not value\n-search_filter_type=Filter type\n-search_filter_name=Filter name\n-search_filter_value=Filter value\n-search_type_cond=Condition\n-showingFrom=Showing\n-showingTo=to\n-showingOf=of"},{"sha":"84674bf32982893ffbd501bde4df42ff8483a778","filename":"console/src/main/resources/org/syncope/console/pages/panels/ResultSetPanel_it.properties","status":"modified","additions":4,"deletions":29,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel_it.properties?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -10,42 +10,17 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n-search_results_title=search result\n displayRows=display rows\n \n-\n-\n-#Tabs\n-tab1=List\n-tab2=Search\n-search=Search\n-firstname=Name\n+firstname=Firstname\n surname=Surname\n-userId=User id:\n-create_user=Create new user\n+userId=User Id\n edit=Edit\n delete=Delete\n id=Id\n-status=Status\n+status=Stato\n token=Token\n username=Username\n-change_attributes=Change display attributes\n+creationDate=Data Creazione\n tokenValued=Valued\n tokenNotValued=Not valued\n-#tab2 - USERS SEARCH\n-search_title=Set criteria for user search\n-addAndButton=+ And\n-addOrButton=+ Or\n-dropButton=-\n-search_error=Error:search's format is invalid\n-search_results_title=Search results:\n-search_noResults=No matches found.\n-reset=Reset\n-search_not_value=Not value\n-search_filter_type=Filter type\n-search_filter_name=Filter name\n-search_filter_value=Filter value\n-search_type_cond=Condition\n-showingFrom=Showing\n-showingTo=to\n-showingOf=of\n\\ No newline at end of file"},{"sha":"e5a57da5414042346b77efe6b41984fc7593a615","filename":"console/src/test/java/org/syncope/console/UserTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FUserTestITCase.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -57,7 +57,7 @@ public void browseEditModal() {\n \n         selenium.click(\"css=img[alt=\\\"Users\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n-        selenium.click(\"//tr[3]/td[5]/span/a\");\n+        selenium.click(\"//tr[3]/td[4]/span/a\");\n \n         for (int second = 0;; second++) {\n             if (second >= 60) {\n@@ -107,7 +107,7 @@ public void search() {\n     public void delete() {\n         selenium.click(\"css=img[alt=\\\"Users\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n-        selenium.click(\"//tr[4]/td[6]/span/a\");\n+        selenium.click(\"//tr[4]/td[5]/span/a\");\n         assertTrue(selenium.getConfirmation().matches(\n                 \"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n         try {"},{"sha":"0c4a78f13d81c87a31d279a1cb7634a486d2f68c","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.text.SimpleDateFormat;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -24,7 +25,6 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.MappedSuperclass;\n-import org.syncope.core.persistence.validation.entity.SyncopeUserCheck;\n \n @MappedSuperclass\n public abstract class AbstractAttributable extends AbstractBaseBean {\n@@ -208,4 +208,10 @@ public abstract <T extends AbstractVirAttr> boolean removeVirtualAttribute(\n \n     public abstract void setVirtualAttributes(\n             List<? extends AbstractVirAttr> virtualAttributes);\n+\n+    public final SimpleDateFormat getDateFormatter() {\n+        final SimpleDateFormat dateFormatter = DATE_FORMAT.get();\n+        dateFormatter.setLenient(false);\n+        return dateFormatter;\n+    }\n }"},{"sha":"dcdb1d095b51832d675e3442d47a543bc85b0b94","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -17,6 +17,8 @@\n import java.beans.PropertyDescriptor;\n import java.io.Serializable;\n import java.lang.reflect.Method;\n+import java.text.DecimalFormat;\n+import java.text.SimpleDateFormat;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n@@ -34,6 +36,26 @@ public abstract class AbstractBaseBean implements Serializable {\n     protected static final Logger LOG = LoggerFactory.getLogger(\n             AbstractBaseBean.class);\n \n+    protected static final ThreadLocal<SimpleDateFormat> DATE_FORMAT =\n+            new ThreadLocal<SimpleDateFormat>() {\n+\n+                private final static String PATTER = \"yyyy-MM-dd'T'HH:mm:ssZ\";\n+\n+                @Override\n+                protected SimpleDateFormat initialValue() {\n+                    return new SimpleDateFormat(PATTER);\n+                }\n+            };\n+\n+    protected static final ThreadLocal<DecimalFormat> DECIMAL_FORMAT =\n+            new ThreadLocal<DecimalFormat>() {\n+\n+                @Override\n+                protected DecimalFormat initialValue() {\n+                    return new DecimalFormat();\n+                }\n+            };\n+\n     private static final long serialVersionUID = -9017214159540857901L;\n \n     /**"},{"sha":"44489fe1710896fd0728adcb364fb4ab6b3b4110","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -37,24 +37,6 @@\n @SchemaCheck\n public abstract class AbstractSchema extends AbstractBaseBean {\n \n-    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT =\n-            new ThreadLocal<SimpleDateFormat>() {\n-\n-                @Override\n-                protected SimpleDateFormat initialValue() {\n-                    return new SimpleDateFormat();\n-                }\n-            };\n-\n-    private static final ThreadLocal<DecimalFormat> DECIMAL_FORMAT =\n-            new ThreadLocal<DecimalFormat>() {\n-\n-                @Override\n-                protected DecimalFormat initialValue() {\n-                    return new DecimalFormat();\n-                }\n-            };\n-\n     public static String enumValuesSeparator = \";\";\n \n     private static final long serialVersionUID = -8621028596062054739L;"},{"sha":"cde943373b7e31c346f7ded2d7cff9032f16e096","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -21,16 +21,13 @@\n import javax.crypto.IllegalBlockSizeException;\n import javax.crypto.NoSuchPaddingException;\n import java.security.MessageDigest;\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n-import java.util.TimeZone;\n import javax.crypto.Cipher;\n import javax.crypto.spec.SecretKeySpec;\n import javax.persistence.Basic;\n@@ -73,9 +70,6 @@ public class SyncopeUser extends AbstractAttributable {\n \n     private static SecretKeySpec keySpec;\n \n-    @Transient\n-    public static String FORMAT_DATE_ISO = \"yyyy-MM-dd'T'HH:mm:ssZ\";\n-\n     static {\n         try {\n             keySpec = new SecretKeySpec(\n@@ -541,10 +535,4 @@ public boolean verifyPasswordHistory(final String password, final int size) {\n             return false;\n         }\n     }\n-\n-    public DateFormat getDateFormatter() {\n-        final DateFormat format = new SimpleDateFormat(FORMAT_DATE_ISO);\n-        format.setTimeZone(TimeZone.getDefault());\n-        return format;\n-    }\n }"},{"sha":"b00f1039b91494e26a3c3383d9ff440f41df2b8f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":154,"deletions":41,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collections;\n@@ -31,6 +32,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.SyncopeUserCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.ResourceCond;\n@@ -307,6 +309,11 @@ private StringBuilder getQuery(final NodeCond nodeCond,\n                             nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n                             parameters));\n                 }\n+                if (nodeCond.getSyncopeUserCond() != null) {\n+                    query.append(getQuery(nodeCond.getSyncopeUserCond(),\n+                            nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n+                            parameters));\n+                }\n                 break;\n \n             case AND:\n@@ -438,37 +445,6 @@ private String getQuery(final AttributeCond cond,\n             return EMPTY_ATTR_QUERY;\n         }\n \n-        if (not) {\n-            switch (cond.getType()) {\n-\n-                case ISNULL:\n-                    cond.setType(AttributeCond.Type.ISNOTNULL);\n-                    break;\n-\n-                case ISNOTNULL:\n-                    cond.setType(AttributeCond.Type.ISNULL);\n-                    break;\n-\n-                case GE:\n-                    cond.setType(AttributeCond.Type.LT);\n-                    break;\n-\n-                case GT:\n-                    cond.setType(AttributeCond.Type.LE);\n-                    break;\n-\n-                case LE:\n-                    cond.setType(AttributeCond.Type.GT);\n-                    break;\n-\n-                case LT:\n-                    cond.setType(AttributeCond.Type.GE);\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n         StringBuilder query = new StringBuilder(\n                 \"SELECT DISTINCT user_id FROM user_search_attr WHERE \").append(\n                 \"schema_name='\").append(schema.getName());\n@@ -478,12 +454,12 @@ private String getQuery(final AttributeCond cond,\n \n             case ISNULL:\n                 query.append(\"' AND \").append(getFieldName(schema.getType())).\n-                        append(\" IS NULL\");\n+                        append(not ? \" IS NOT NULL\" : \" IS NULL\");\n                 break;\n \n             case ISNOTNULL:\n                 query.append(\"' AND \").append(getFieldName(schema.getType())).\n-                        append(\" IS NOT NULL\");\n+                        append(not ? \" IS NULL\" : \" IS NOT NULL\");\n                 break;\n \n             case LIKE:\n@@ -515,26 +491,163 @@ private String getQuery(final AttributeCond cond,\n \n             case GE:\n                 paramKey = setParameter(parameters, attrValue.getValue());\n-                query.append(\"' AND \").append(getFieldName(schema.getType())).\n-                        append(\">=:param\").append(paramKey);\n+                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                if (not) {\n+                    query.append(\"<\");\n+                } else {\n+                    query.append(\">=\");\n+                }\n+                query.append(\":param\").append(paramKey);\n                 break;\n \n             case GT:\n                 paramKey = setParameter(parameters, attrValue.getValue());\n-                query.append(\"' AND \").append(getFieldName(schema.getType())).\n-                        append(\">:param\").append(paramKey);\n+                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                if (not) {\n+                    query.append(\"<=\");\n+                } else {\n+                    query.append(\">\");\n+                }\n+                query.append(\":param\").append(paramKey);\n                 break;\n \n             case LE:\n                 paramKey = setParameter(parameters, attrValue.getValue());\n-                query.append(\"' AND \").append(getFieldName(schema.getType())).\n-                        append(\"<=:param\").append(paramKey);\n+                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                if (not) {\n+                    query.append(\">\");\n+                } else {\n+                    query.append(\"<=\");\n+                }\n+                query.append(\":param\").append(paramKey);\n                 break;\n \n             case LT:\n                 paramKey = setParameter(parameters, attrValue.getValue());\n-                query.append(\"' AND \").append(getFieldName(schema.getType())).\n-                        append(\"<:param\").append(paramKey);\n+                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                if (not) {\n+                    query.append(\">=\");\n+                } else {\n+                    query.append(\"<\");\n+                }\n+                query.append(\":param\").append(paramKey);\n+                break;\n+\n+            default:\n+        }\n+\n+        return query.toString();\n+    }\n+\n+    private String getQuery(final SyncopeUserCond cond,\n+            final boolean not, final Map<Integer, Object> parameters) {\n+\n+        final String schema = cond.getSchema();\n+\n+        Field field = null;\n+\n+        Class<?> i = SyncopeUser.class;\n+\n+        // loop on class and all superclasses searching for field\n+        while (field == null && i != Object.class) {\n+            try {\n+                field = i.getDeclaredField(schema);\n+            } catch (Exception ignore) {\n+                // ignore exception\n+                LOG.debug(\"Field '{}' not found on class '{}'\",\n+                        new String[]{schema, i.getSimpleName()}, ignore);\n+            } finally {\n+                i = i.getSuperclass();\n+            }\n+        }\n+\n+        if (field == null) {\n+            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n+            return EMPTY_ATTR_QUERY;\n+        }\n+\n+        final StringBuilder query = new StringBuilder(\n+                \"SELECT DISTINCT user_id FROM user_search WHERE \");\n+\n+        Integer paramKey;\n+        switch (cond.getType()) {\n+\n+            case ISNULL:\n+                query.append(schema).append(not ? \" IS NOT NULL\" : \" IS NULL\");\n+                break;\n+\n+            case ISNOTNULL:\n+                query.append(schema).append(not ? \" IS NULL\" : \" IS NOT NULL\");\n+                break;\n+\n+            case LIKE:\n+                if (field.getType() == String.class\n+                        || field.getType() == Enum.class) {\n+                    query.append(schema);\n+                    if (not) {\n+                        query.append(\" NOT \");\n+                    }\n+                    query.append(\" LIKE '\").append(cond.getExpression()).\n+                            append(\"'\");\n+                } else {\n+                    query.append(\"' 1=1\");\n+                    LOG.error(\"LIKE is only compatible with string schemas\");\n+                }\n+                break;\n+\n+            case EQ:\n+                paramKey = setParameter(parameters, cond.getExpression());\n+                query.append(schema);\n+                if (not) {\n+                    query.append(\"<>\");\n+                } else {\n+                    query.append(\"=\");\n+                }\n+                query.append(\":param\").append(paramKey);\n+                break;\n+\n+            case GE:\n+                paramKey = setParameter(parameters, cond.getExpression());\n+                query.append(schema);\n+                if (not) {\n+                    query.append(\"<\");\n+                } else {\n+                    query.append(\">=\");\n+                }\n+                query.append(\":param\").append(paramKey);\n+                break;\n+\n+            case GT:\n+                paramKey = setParameter(parameters, cond.getExpression());\n+                query.append(schema);\n+                if (not) {\n+                    query.append(\"<=\");\n+                } else {\n+                    query.append(\">\");\n+                }\n+                query.append(\":param\").append(paramKey);\n+                break;\n+\n+            case LE:\n+                paramKey = setParameter(parameters, cond.getExpression());\n+                query.append(schema);\n+                if (not) {\n+                    query.append(\">\");\n+                } else {\n+                    query.append(\"<=\");\n+                }\n+                query.append(\":param\").append(paramKey);\n+                break;\n+\n+            case LT:\n+                paramKey = setParameter(parameters, cond.getExpression());\n+                query.append(schema);\n+                if (not) {\n+                    query.append(\">=\");\n+                } else {\n+                    query.append(\"<\");\n+                }\n+                query.append(\":param\").append(paramKey);\n                 break;\n \n             default:"},{"sha":"9837796b5f8f1e8caf0312f70b6dab1d61ea130b","filename":"core/src/main/resources/views.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -15,6 +15,11 @@\n <!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n <properties>\n     <comment>Views</comment>\n+    <entry key=\"user_search\">\n+ CREATE VIEW user_search AS\n+ \n+ SELECT u.id as user_id, u.* FROM SyncopeUser u\n+    </entry>\n     <entry key=\"user_search_attr\">\n CREATE VIEW user_search_attr AS\n "},{"sha":"0db8b4c4a815acba0481b753c7708311cabd6279","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -29,6 +29,7 @@\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.ResourceCond;\n+import org.syncope.client.search.SyncopeUserCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.util.EntitlementUtil;\n \n@@ -243,4 +244,86 @@ public void searchByResource() {\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n+\n+    @Test\n+    public void searchByUsernameAndId() {\n+        final SyncopeUserCond usernameLeafCond =\n+                new SyncopeUserCond(SyncopeUserCond.Type.EQ);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"user1\");\n+\n+        final SyncopeUserCond idRightCond =\n+                new SyncopeUserCond(SyncopeUserCond.Type.LT);\n+        idRightCond.setSchema(\"id\");\n+        idRightCond.setExpression(\"2\");\n+\n+        final NodeCond searchCondition = NodeCond.getOrCond(\n+                NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(idRightCond));\n+\n+        final List<SyncopeUser> matchingUsers = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCondition);\n+\n+        assertNotNull(matchingUsers);\n+        assertEquals(1, matchingUsers.size());\n+        assertEquals(\"user1\", matchingUsers.iterator().next().getUsername());\n+        assertEquals(1L, matchingUsers.iterator().next().getId().longValue());\n+    }\n+\n+    @Test\n+    public void searchByUsernameAndFullname() {\n+        final SyncopeUserCond usernameLeafCond =\n+                new SyncopeUserCond(SyncopeUserCond.Type.EQ);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"user1\");\n+\n+        final AttributeCond idRightCond =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        idRightCond.setSchema(\"fullname\");\n+        idRightCond.setExpression(\"fabio.mart%\");\n+\n+        final NodeCond searchCondition = NodeCond.getOrCond(\n+                NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(idRightCond));\n+\n+        final List<SyncopeUser> matchingUsers = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCondition);\n+\n+        assertNotNull(matchingUsers);\n+        assertEquals(2, matchingUsers.size());\n+    }\n+\n+    @Test\n+    public void searchById() {\n+        SyncopeUserCond idLeafCond =\n+                new SyncopeUserCond(SyncopeUserCond.Type.LT);\n+        idLeafCond.setSchema(\"id\");\n+        idLeafCond.setExpression(\"2\");\n+\n+        NodeCond searchCondition = NodeCond.getLeafCond(idLeafCond);\n+\n+        List<SyncopeUser> matchingUsers = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCondition);\n+\n+        assertNotNull(matchingUsers);\n+        assertEquals(1, matchingUsers.size());\n+        assertEquals(1L, matchingUsers.iterator().next().getId().longValue());\n+\n+        idLeafCond = new SyncopeUserCond(SyncopeUserCond.Type.LT);\n+        idLeafCond.setSchema(\"id\");\n+        idLeafCond.setExpression(\"4\");\n+\n+        searchCondition = NodeCond.getNotLeafCond(idLeafCond);\n+\n+        matchingUsers = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCondition);\n+\n+        assertNotNull(matchingUsers);\n+        assertEquals(1, matchingUsers.size());\n+        assertEquals(4L, matchingUsers.iterator().next().getId().longValue());\n+    }\n }"},{"sha":"fb8c0d8285a888ae3891f30d33c18832887757e4","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","patch":"@@ -37,6 +37,7 @@\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.SyncopeUserCond;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.ResourceCond;\n@@ -845,6 +846,35 @@ public final void search() {\n         assertTrue(userIds.contains(3L));\n     }\n \n+    @Test\n+    public final void searchByUsernameAndId() {\n+        final SyncopeUserCond usernameLeafCond =\n+                new SyncopeUserCond(SyncopeUserCond.Type.EQ);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"user1\");\n+\n+        final SyncopeUserCond idRightCond =\n+                new SyncopeUserCond(SyncopeUserCond.Type.LT);\n+        idRightCond.setSchema(\"id\");\n+        idRightCond.setExpression(\"2\");\n+\n+        final NodeCond searchCondition = NodeCond.getAndCond(\n+                NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(idRightCond));\n+\n+        assertTrue(searchCondition.checkValidity());\n+\n+        final List<UserTO> matchedUsers = Arrays.asList(\n+                restTemplate.postForObject(\n+                BASE_URL + \"user/search\",\n+                searchCondition, UserTO[].class));\n+\n+        assertNotNull(matchedUsers);\n+        assertEquals(1, matchedUsers.size());\n+        assertEquals(\"user1\", matchedUsers.iterator().next().getUsername());\n+        assertEquals(1L, matchedUsers.iterator().next().getId());\n+    }\n+\n     @Test\n     public final void searchUserByResourceName() {\n         ResourceCond ws2 = new ResourceCond();"}]}