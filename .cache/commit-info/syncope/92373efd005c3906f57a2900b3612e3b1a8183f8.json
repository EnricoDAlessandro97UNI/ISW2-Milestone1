{"sha":"92373efd005c3906f57a2900b3612e3b1a8183f8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkyMzczZWZkMDA1YzM5MDZmNTdhMjkwMGIzNjEyZTNiMWE4MTgzZjg=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-11-20T11:37:34Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-11-20T11:37:34Z"},"message":"SYNCOPE-422 and SYNCOPE-423 merged from 1.1.X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1543782 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a9aae6fa4541b3f0f1eaa77ed696c1fb6b1901a3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a9aae6fa4541b3f0f1eaa77ed696c1fb6b1901a3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/92373efd005c3906f57a2900b3612e3b1a8183f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/92373efd005c3906f57a2900b3612e3b1a8183f8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/92373efd005c3906f57a2900b3612e3b1a8183f8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/92373efd005c3906f57a2900b3612e3b1a8183f8/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"fc78cdcc2bf6169b307ff2a208f42612fe11446d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc78cdcc2bf6169b307ff2a208f42612fe11446d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fc78cdcc2bf6169b307ff2a208f42612fe11446d"},{"sha":"95b6bb4da47a31a89ca35998d648896da5ff8cf0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/95b6bb4da47a31a89ca35998d648896da5ff8cf0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/95b6bb4da47a31a89ca35998d648896da5ff8cf0"}],"stats":{"total":4865,"additions":3382,"deletions":1483},"files":[{"sha":"1b4ae8db25e8b7b21ac2d1afda53567b1b024aea","filename":"common/src/main/java/org/apache/syncope/common/services/LoggerService.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -28,28 +28,30 @@\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.Produces;\r\n import javax.ws.rs.core.MediaType;\r\n+import org.apache.syncope.common.to.EventCategoryTO;\r\n \r\n import org.apache.syncope.common.to.LoggerTO;\r\n import org.apache.syncope.common.types.LoggerType;\r\n \r\n-@Path(\"logger/{type}\")\r\n-@Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-@Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n+@Path(\"logger\")\r\n+@Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\r\n+@Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\r\n public interface LoggerService {\r\n \r\n     /**\r\n      * @param type LoggerType to be selected.\r\n      * @param name Logger name to be deleted.\r\n      */\r\n     @DELETE\r\n-    @Path(\"{name}\")\r\n+    @Path(\"{type}/{name}\")\r\n     void delete(@PathParam(\"type\") LoggerType type, @PathParam(\"name\") String name);\r\n \r\n     /**\r\n      * @param type LoggerType to be selected.\r\n      * @return List of logger with matching type.\r\n      */\r\n     @GET\r\n+    @Path(\"{type}\")\r\n     List<LoggerTO> list(@PathParam(\"type\") LoggerType type);\r\n \r\n     /**\r\n@@ -58,7 +60,7 @@ public interface LoggerService {\n      * @return Returns logger with matching type and name.\r\n      */\r\n     @GET\r\n-    @Path(\"{name}\")\r\n+    @Path(\"{type}/{name}\")\r\n     LoggerTO read(@PathParam(\"type\") LoggerType type, @PathParam(\"name\") final String name);\r\n \r\n     /**\r\n@@ -67,7 +69,10 @@ public interface LoggerService {\n      * @param logger Logger to be created or updated.\r\n      */\r\n     @PUT\r\n-    @Path(\"{name}/level\")\r\n+    @Path(\"{type}/{name}/level\")\r\n     void update(@PathParam(\"type\") LoggerType type, @PathParam(\"name\") String name, LoggerTO logger);\r\n \r\n+    @GET\r\n+    @Path(\"events\")\r\n+    List<EventCategoryTO> events();\r\n }\r"},{"sha":"603233ac0be5d106a639ce228fc01f1bcdc531e8","filename":"common/src/main/java/org/apache/syncope/common/services/WorkflowService.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -29,7 +29,6 @@\n \r\n import org.apache.syncope.common.types.AttributableType;\r\n import org.apache.syncope.common.types.RESTHeaders;\r\n-import org.apache.syncope.common.types.WorkflowTasks;\r\n \r\n @Path(\"workflows/{kind}\")\r\n public interface WorkflowService {\r\n@@ -54,13 +53,4 @@ public interface WorkflowService {\n     @PUT\r\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n     void importDefinition(@PathParam(\"kind\") AttributableType kind, String definition);\r\n-\r\n-    /**\r\n-     * @param kind Kind can be USER or ROLE only!\r\n-     * @return Returns existing tasks for matching kind.\r\n-     */\r\n-    @GET\r\n-    @Path(\"tasks\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    WorkflowTasks getDefinedTasks(@PathParam(\"kind\") AttributableType kind);\r\n }\r"},{"sha":"9e7a11a8c38750f7cff1f65c87f3e1ad84726503","filename":"common/src/main/java/org/apache/syncope/common/to/EventCategoryTO.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.AuditElements;\n+\n+@XmlRootElement(name = \"user\")\n+@XmlType\n+public class EventCategoryTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -4340060002701633401L;\n+\n+    private AuditElements.EventCategoryType type;\n+\n+    private String category;\n+\n+    private String subcategory;\n+\n+    private List<String> events;\n+\n+    /**\n+     * Constructor for Type.REST event category.\n+     */\n+    public EventCategoryTO() {\n+        this.type = AuditElements.EventCategoryType.REST;\n+    }\n+\n+    /**\n+     * Constructor for the given Type event category.\n+     */\n+    public EventCategoryTO(final AuditElements.EventCategoryType type) {\n+        this.type = type;\n+    }\n+\n+    public AuditElements.EventCategoryType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final AuditElements.EventCategoryType type) {\n+        this.type = type == null ? AuditElements.EventCategoryType.CUSTOM : type;\n+    }\n+\n+    public String getCategory() {\n+        return category;\n+    }\n+\n+    public void setCategory(final String category) {\n+        this.category = category;\n+    }\n+\n+    public String getSubcategory() {\n+        return subcategory;\n+    }\n+\n+    public void setSubcategory(final String subcategory) {\n+        this.subcategory = subcategory;\n+    }\n+\n+    public List<String> getEvents() {\n+        if (events == null) {\n+            events = new ArrayList<String>();\n+        }\n+        return events;\n+    }\n+\n+    public void setEvents(final List<String> events) {\n+        this.events = events;\n+    }\n+}"},{"sha":"3361e861b59df544dffb16dc876d945909015550","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":19,"deletions":204,"changes":223,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,228 +18,43 @@\n  */\r\n package org.apache.syncope.common.types;\r\n \r\n-import java.util.EnumSet;\r\n+import java.io.Serializable;\r\n import javax.xml.bind.annotation.XmlEnum;\r\n+import org.apache.commons.lang3.StringUtils;\r\n \r\n-public final class AuditElements {\r\n+public final class AuditElements implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = -4385059255522273254L;\r\n \r\n     private AuditElements() {\r\n     }\r\n \r\n     @XmlEnum\r\n-    public enum Category {\r\n-\r\n-        authentication(AuthenticationSubCategory.class),\r\n-        configuration(ConfigurationSubCategory.class),\r\n-        connector(ConnectorSubCategory.class),\r\n-        logger(LoggerSubCategory.class),\r\n-        notification(NotificationSubCategory.class),\r\n-        policy(PolicySubCategory.class),\r\n-        report(ReportSubCategory.class),\r\n-        resource(ResourceSubCategory.class),\r\n-        role(RoleSubCategory.class),\r\n-        schema(SchemaSubCategory.class),\r\n-        task(TaskSubCategory.class),\r\n-        user(UserSubCategory.class),\r\n-        workflow(WorkflowSubCategory.class);\r\n+    public enum EventCategoryType {\r\n \r\n-        private Class<? extends Enum<?>> subCategory;\r\n+        REST(StringUtils.EMPTY),\r\n+        TASK(StringUtils.EMPTY),\r\n+        PROPAGATION(\"PropagationTask\"),\r\n+        SYNCHRONIZATION(\"SyncTask\"),\r\n+        CUSTOM(StringUtils.EMPTY);\r\n \r\n-        Category(final Class<? extends Enum<?>> subCategory) {\r\n-            this.subCategory = subCategory;\r\n-        }\r\n+        private final String value;\r\n \r\n-        public Class<? extends Enum> getSubCategory() {\r\n-            return subCategory;\r\n+        EventCategoryType(final String value) {\r\n+            this.value = value;\r\n         }\r\n \r\n-        @SuppressWarnings(\"unchecked\")\r\n-        public EnumSet<? extends Enum<?>> getSubCategoryElements() {\r\n-            return EnumSet.allOf(getSubCategory());\r\n+        @Override\r\n+        public String toString() {\r\n+            return value;\r\n         }\r\n     }\r\n \r\n     @XmlEnum\r\n     public enum Result {\r\n \r\n-        success,\r\n-        failure\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum AuthenticationSubCategory {\r\n-\r\n-        login,\r\n-        getEntitlements\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum ConfigurationSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        getMailTemplates,\r\n-        getValidators,\r\n-        dbExport\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum ConnectorSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        getBundles,\r\n-        getSchemaNames,\r\n-        getSupportedObjectClasses,\r\n-        getConfigurationProperties,\r\n-        check,\r\n-        readConnectorBean,\r\n-        reload\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum LoggerSubCategory {\r\n-\r\n-        list,\r\n-        setLevel,\r\n-        delete\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum NotificationSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        send,\r\n-        retry\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum PolicySubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        getCorrelationRuleClasses\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum ReportSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        readExecution,\r\n-        update,\r\n-        delete,\r\n-        deleteExecution,\r\n-        getReportletConfClasses,\r\n-        execute,\r\n-        exportExecutionResult\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum ResourceSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        getObject,\r\n-        getRoleResourcesMapping,\r\n-        getPropagationActionsClasses\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum RoleSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        selfRead,\r\n-        update,\r\n-        delete,\r\n-        parent,\r\n-        children\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum SchemaSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum TaskSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        getJobClasses,\r\n-        getSyncActionsClasses,\r\n-        readExecution,\r\n-        execute,\r\n-        report,\r\n-        deleteExecution\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum UserSubCategory {\r\n-\r\n-        selfRegistrationAllowed,\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        verifyPassword,\r\n-        search,\r\n-        setStatus,\r\n-        executeWorkflow,\r\n-        getForms,\r\n-        getFormForUser,\r\n-        claimForm,\r\n-        submitForm\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum WorkflowSubCategory {\r\n-\r\n-        exportDefinition,\r\n-        exportDiagram,\r\n-        importDefinition,\r\n-        getDefinedTasks\r\n+        SUCCESS,\r\n+        FAILURE\r\n \r\n     }\r\n }\r"},{"sha":"c23fe3ed95d026b45cfd32a5c60f32638f5c6d30","filename":"common/src/main/java/org/apache/syncope/common/types/AuditLoggerName.java","status":"modified","additions":45,"deletions":29,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,56 +18,72 @@\n  */\r\n package org.apache.syncope.common.types;\r\n \r\n+import com.fasterxml.jackson.annotation.JsonCreator;\r\n+import com.fasterxml.jackson.annotation.JsonProperty;\r\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n import java.text.ParseException;\r\n-\r\n+import java.util.Map;\r\n import org.apache.commons.lang3.StringUtils;\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.types.AuditElements.Category;\r\n+import org.apache.syncope.common.to.EventCategoryTO;\r\n import org.apache.syncope.common.types.AuditElements.Result;\r\n+import org.apache.syncope.common.util.LoggerEventUtils;\r\n \r\n public class AuditLoggerName extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = -647989486671786839L;\r\n \r\n-    private final Category category;\r\n+    private final AuditElements.EventCategoryType type;\r\n \r\n-    private final Enum<?> subcategory;\r\n+    private final String category;\r\n \r\n-    private final Result result;\r\n+    private final String subcategory;\r\n \r\n-    public AuditLoggerName(final Category category, final Enum<?> subcategory, final Result result)\r\n-            throws IllegalArgumentException {\r\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n+    private final String event;\r\n \r\n-        if (category == null || subcategory == null || result == null) {\r\n-            throw new IllegalArgumentException(\"Null values not permitted\");\r\n-        }\r\n+    private final Result result;\r\n \r\n-        if (!category.getSubCategoryElements().contains(subcategory)) {\r\n-            throw new IllegalArgumentException(category.name() + \" does not contain \" + subcategory.name());\r\n-        }\r\n+    @JsonCreator\r\n+    public AuditLoggerName(\r\n+            @JsonProperty(\"type\") final AuditElements.EventCategoryType type,\r\n+            @JsonProperty(\"category\") final String category,\r\n+            @JsonProperty(\"subcategory\") final String subcategory,\r\n+            @JsonProperty(\"event\") final String event,\r\n+            @JsonProperty(\"result\") final Result result)\r\n+            throws IllegalArgumentException {\r\n \r\n+        this.type = type == null ? AuditElements.EventCategoryType.CUSTOM : type;\r\n         this.category = category;\r\n         this.subcategory = subcategory;\r\n-        this.result = result;\r\n+        this.event = event;\r\n+        this.result = result == null ? Result.SUCCESS : result;\r\n     }\r\n \r\n-    public Category getCategory() {\r\n+    public AuditElements.EventCategoryType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public String getEvent() {\r\n+        return event;\r\n+    }\r\n+\r\n+    public String getCategory() {\r\n         return category;\r\n     }\r\n \r\n     public Result getResult() {\r\n         return result;\r\n     }\r\n \r\n-    public Enum<?> getSubcategory() {\r\n+    public String getSubcategory() {\r\n         return subcategory;\r\n     }\r\n \r\n     public String toLoggerName() {\r\n-        return new StringBuilder().append(LoggerType.AUDIT.getPrefix()).append('.').\r\n-                append(category.name()).append('.').\r\n-                append(subcategory.name()).append('.').\r\n-                append(result.name()).toString();\r\n+        return new StringBuilder().append(\r\n+                LoggerType.AUDIT.getPrefix()).append('.').append(\r\n+                LoggerEventUtils.buildEvent(type, category, subcategory, event, result)).toString();\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n@@ -82,15 +98,15 @@ public static AuditLoggerName fromLoggerName(final String loggerName)\n             throw new ParseException(\"Audit logger name must start with \" + LoggerType.AUDIT.getPrefix(), 0);\r\n         }\r\n \r\n-        String[] splitted = loggerName.split(\"\\\\.\");\r\n-        if (splitted == null || splitted.length < 5) {\r\n-            throw new ParseException(\"Unparsable logger name\", 0);\r\n-        }\r\n-\r\n-        Category category = Category.valueOf(splitted[2]);\r\n-        Enum<?> subcategory = Enum.valueOf(category.getSubCategory(), splitted[3]);\r\n-        Result result = Result.valueOf(splitted[4]);\r\n+        final Map.Entry<EventCategoryTO, Result> eventCategory = LoggerEventUtils.parseEventCategory(\r\n+                loggerName.replaceAll(LoggerType.AUDIT.getPrefix() + \".\", \"\"));\r\n \r\n-        return new AuditLoggerName(category, subcategory, result);\r\n+        return new AuditLoggerName(\r\n+                eventCategory.getKey().getType(),\r\n+                eventCategory.getKey().getCategory(),\r\n+                eventCategory.getKey().getSubcategory(),\r\n+                eventCategory.getKey().getEvents().isEmpty()\r\n+                ? StringUtils.EMPTY : eventCategory.getKey().getEvents().iterator().next(),\r\n+                eventCategory.getValue());\r\n     }\r\n }\r"},{"sha":"2cb0f5e132cb9367c1af129ae7cbe38a7475d09e","filename":"common/src/main/java/org/apache/syncope/common/util/CollectionWrapper.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -62,8 +62,8 @@ public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger\n         for (LoggerTO l : logger) {\r\n             try {\r\n                 respons.add(AuditLoggerName.fromLoggerName(l.getName()));\r\n-            } catch (Exception e) {\r\n-                //TODO log event\r\n+            } catch (Exception ignore) {\r\n+                // ignore\r\n             }\r\n         }\r\n         return respons;\r"},{"sha":"94437fd812fdbfeb28a0a3ce650f7a7813367f21","filename":"common/src/main/java/org/apache/syncope/common/util/LoggerEventUtils.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.common.util;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.to.EventCategoryTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.EventCategoryType;\n+import org.apache.syncope.common.types.AuditElements.Result;\n+\n+public class LoggerEventUtils {\n+\n+    public static Map.Entry<EventCategoryTO, Result> parseEventCategory(final String event) {\n+        final EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+\n+        Result condition = null;\n+\n+        if (StringUtils.isNotEmpty(event)) {\n+            final String[] elements = event.substring(1, event.length() - 1).split(\"\\\\]:\\\\[\");\n+\n+            if (elements.length == 1) {\n+                eventCategoryTO.setType(EventCategoryType.CUSTOM);\n+                condition = Result.SUCCESS;\n+                eventCategoryTO.getEvents().add(event);\n+            } else {\n+                EventCategoryType type;\n+\n+                if (EventCategoryType.PROPAGATION.toString().equals(elements[0])) {\n+                    type = EventCategoryType.PROPAGATION;\n+                } else if (EventCategoryType.SYNCHRONIZATION.toString().equals(elements[0])) {\n+                    type = EventCategoryType.SYNCHRONIZATION;\n+                } else {\n+                    try {\n+                        type = EventCategoryType.valueOf(elements[0]);\n+                    } catch (Exception e) {\n+                        type = EventCategoryType.CUSTOM;\n+                    }\n+                }\n+\n+                eventCategoryTO.setType(type);\n+\n+                eventCategoryTO.setCategory(StringUtils.isNotEmpty(elements[1]) ? elements[1] : null);\n+\n+                eventCategoryTO.setSubcategory(StringUtils.isNotEmpty(elements[2]) ? elements[2] : null);\n+\n+                if (elements.length > 3 && StringUtils.isNotEmpty(elements[3])) {\n+                    eventCategoryTO.getEvents().add(elements[3]);\n+                }\n+\n+                if (elements.length > 4) {\n+                    condition = Result.valueOf(elements[4].toUpperCase());\n+                }\n+            }\n+        }\n+\n+        return new AbstractMap.SimpleEntry< EventCategoryTO, Result>(eventCategoryTO, condition);\n+    }\n+\n+    /**\n+     * Build event string with the following syntax [type]:[category]:[subcategory]:[event]:[maybe result value cond].\n+     *\n+     * @param type event type.\n+     * @param category event category.\n+     * @param subcategory event subcategory.\n+     * @param event event.\n+     * @param resultValueCondition result value condition.\n+     * @return event string.\n+     */\n+    public static String buildEvent(\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final String event,\n+            final AuditElements.Result resultValueCondition) {\n+\n+        final StringBuilder eventBuilder = new StringBuilder();\n+\n+        eventBuilder.append('[');\n+        if (type != null) {\n+            if (StringUtils.isNotBlank(type.toString())) {\n+                eventBuilder.append(type.toString());\n+            } else {\n+                eventBuilder.append(type.name());\n+            }\n+        }\n+        eventBuilder.append(']');\n+\n+        eventBuilder.append(\":\");\n+\n+        eventBuilder.append('[');\n+        if (StringUtils.isNotBlank(category)) {\n+            eventBuilder.append(category);\n+        }\n+        eventBuilder.append(']');\n+\n+        eventBuilder.append(\":\");\n+\n+        eventBuilder.append('[');\n+        if (StringUtils.isNotBlank(subcategory)) {\n+            eventBuilder.append(subcategory);\n+        }\n+        eventBuilder.append(']');\n+\n+        eventBuilder.append(\":\");\n+\n+        eventBuilder.append('[');\n+        if (StringUtils.isNotBlank(event)) {\n+            eventBuilder.append(event);\n+        }\n+        eventBuilder.append(']');\n+\n+        if (resultValueCondition != null) {\n+            eventBuilder.append(\":\");\n+\n+            eventBuilder.append('[');\n+            eventBuilder.append(resultValueCondition);\n+            eventBuilder.append(']');\n+        }\n+\n+        return eventBuilder.toString();\n+    }\n+}"},{"sha":"da212a68e04c4a5f9febd0b0d7c001db2daf7c66","filename":"console/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fpom.xml?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -319,7 +319,7 @@ under the License.\n                   javax.servlet,\n                   javax.xml*,\n                   org.w3c.dom,\n-                  org.apache.commons.lang*;version=\"[2.6,3)\",\n+                  org.apache.commons.lang3;version=\"[3,4)\",\n                   org.apache.http*;version=\"[4,5)\",\n                   org.apache.syncope.client*;version=${project.version},\n                   org.apache.syncope.common*;version=${project.version},"},{"sha":"9f0cb245d7883184d8ad9771b4f08f3091f62fd1","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":26,"deletions":19,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.console.rest.NotificationRestClient;\n import org.apache.syncope.console.rest.WorkflowRestClient;\n import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.CollectionPropertyColumn;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.wicket.Page;\n@@ -116,7 +117,7 @@ public class Configuration extends BasePage {\n \n     private static final int NOTIFICATION_WIN_HEIGHT = 500;\n \n-    private static final int NOTIFICATION_WIN_WIDTH = 900;\n+    private static final int NOTIFICATION_WIN_WIDTH = 1100;\n \n     private WebMarkupContainer confContainer;\n \n@@ -184,7 +185,8 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n         add(workflowDefContainer);\n \n         // Logger stuff\n-        PropertyListView coreLoggerList = new LoggerPropertyList(null, \"corelogger\", loggerRestClient.listLogs());\n+        PropertyListView<LoggerTO> coreLoggerList =\n+                new LoggerPropertyList(null, \"corelogger\", loggerRestClient.listLogs());\n         WebMarkupContainer coreLoggerContainer = new WebMarkupContainer(\"coreLoggerContainer\");\n         coreLoggerContainer.add(coreLoggerList);\n         coreLoggerContainer.setOutputMarkupId(true);\n@@ -194,8 +196,8 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n         add(coreLoggerContainer);\n \n         ConsoleLoggerController consoleLoggerController = new ConsoleLoggerController();\n-        PropertyListView consoleLoggerList = new LoggerPropertyList(consoleLoggerController, \"consolelogger\",\n-                consoleLoggerController.getLoggers());\n+        PropertyListView<LoggerTO> consoleLoggerList =\n+                new LoggerPropertyList(consoleLoggerController, \"consolelogger\", consoleLoggerController.getLoggers());\n         WebMarkupContainer consoleLoggerContainer = new WebMarkupContainer(\"consoleLoggerContainer\");\n         consoleLoggerContainer.add(consoleLoggerList);\n         consoleLoggerContainer.setOutputMarkupId(true);\n@@ -208,11 +210,9 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n     private void setupSyncopeConf() {\n         confPaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);\n \n-        List<IColumn> confColumns = new ArrayList<IColumn>();\n-\n-        confColumns.add(new PropertyColumn(new ResourceModel(\"key\"), \"key\", \"key\"));\n-\n-        confColumns.add(new PropertyColumn(new ResourceModel(\"value\"), \"value\", \"value\"));\n+        final List<IColumn<ConfigurationTO, String>> confColumns = new ArrayList<IColumn<ConfigurationTO, String>>();\n+        confColumns.add(new PropertyColumn<ConfigurationTO, String>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        confColumns.add(new PropertyColumn<ConfigurationTO, String>(new ResourceModel(\"value\"), \"value\", \"value\"));\n \n         confColumns.add(new AbstractColumn<ConfigurationTO, String>(new ResourceModel(\"actions\", \"\")) {\n \n@@ -278,8 +278,9 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable confTable = new AjaxFallbackDefaultDataTable(\"syncopeconf\", confColumns,\n-                new SyncopeConfProvider(), confPaginatorRows);\n+        final AjaxFallbackDefaultDataTable<ConfigurationTO, String> confTable =\n+                new AjaxFallbackDefaultDataTable<ConfigurationTO, String>(\n+                \"syncopeconf\", confColumns, new SyncopeConfProvider(), confPaginatorRows);\n \n         confContainer = new WebMarkupContainer(\"confContainer\");\n         confContainer.add(confTable);\n@@ -376,12 +377,17 @@ protected void onUpdate(final AjaxRequestTarget target) {\n     private void setupNotification() {\n         notificationPaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_NOTIFICATION_PAGINATOR_ROWS);\n \n-        List<IColumn> notificationCols = new ArrayList<IColumn>();\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"events\"), \"events\", \"events\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"subject\"), \"subject\", \"subject\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"template\"), \"template\", \"template\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"traceLevel\"), \"traceLevel\", \"traceLevel\"));\n+        final List<IColumn<NotificationTO, String>> notificationCols = new ArrayList<IColumn<NotificationTO, String>>();\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"id\"), \"id\", \"id\"));\n+        notificationCols.add(new CollectionPropertyColumn<NotificationTO>(\n+                new ResourceModel(\"events\"), \"events\", \"events\"));\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"subject\"), \"subject\", \"subject\"));\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"template\"), \"template\", \"template\"));\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"traceLevel\"), \"traceLevel\", \"traceLevel\"));\n \n         notificationCols.add(new AbstractColumn<NotificationTO, String>(new ResourceModel(\"actions\", \"\")) {\n \n@@ -447,8 +453,9 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable notificationTable = new AjaxFallbackDefaultDataTable(\"notificationTable\",\n-                notificationCols, new NotificationProvider(), notificationPaginatorRows);\n+        final AjaxFallbackDefaultDataTable<NotificationTO, String> notificationTable =\n+                new AjaxFallbackDefaultDataTable<NotificationTO, String>(\n+                \"notificationTable\", notificationCols, new NotificationProvider(), notificationPaginatorRows);\n \n         notificationContainer = new WebMarkupContainer(\"notificationContainer\");\n         notificationContainer.add(notificationTable);"},{"sha":"ae01337f6fdeaaf7ac8e691c3e11feda06503c44","filename":"console/src/main/java/org/apache/syncope/console/pages/EditUserModalPage.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import static org.apache.wicket.Component.RENDER;\n import java.util.ArrayList;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.UserTO;"},{"sha":"8749a470866df87c5e334f8ef7a4948e5e5c0034","filename":"console/src/main/java/org/apache/syncope/console/pages/NotificationModalPage.java","status":"modified","additions":37,"deletions":11,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -23,17 +23,19 @@\n import java.util.Collections;\n import java.util.EnumSet;\n import java.util.List;\n+import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.pages.panels.LoggerCategoryPanel;\n import org.apache.syncope.console.pages.panels.UserSearchPanel;\n+import org.apache.syncope.console.rest.LoggerRestClient;\n import org.apache.syncope.console.rest.NotificationRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -48,7 +50,6 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.apache.wicket.validation.validator.EmailAddressValidator;\n \n@@ -59,11 +60,14 @@ class NotificationModalPage extends BaseModalPage {\n     @SpringBean\n     private NotificationRestClient restClient;\n \n+    @SpringBean\n+    private LoggerRestClient loggerRestClient;\n+\n     public NotificationModalPage(final PageReference pageRef, final ModalWindow window,\n             final NotificationTO notificationTO, final boolean createFlag) {\n \n-        Form form = new Form(FORM, new CompoundPropertyModel(notificationTO));\n-        form.setModel(new CompoundPropertyModel(notificationTO));\n+        final Form<NotificationTO> form =\n+                new Form<NotificationTO>(FORM, new CompoundPropertyModel<NotificationTO>(notificationTO));\n \n         final AjaxTextFieldPanel sender = new AjaxTextFieldPanel(\"sender\", getString(\"sender\"),\n                 new PropertyModel<String>(notificationTO, \"sender\"));\n@@ -94,16 +98,16 @@ public NotificationModalPage(final PageReference pageRef, final ModalWindow wind\n         aboutContainer.setOutputMarkupId(true);\n \n         form.add(aboutContainer);\n-        \n+\n         final AjaxCheckBoxPanel checkAbout =\n                 new AjaxCheckBoxPanel(\"checkAbout\", \"checkAbout\",\n                 new Model<Boolean>(notificationTO.getAbout() == null));\n         aboutContainer.add(checkAbout);\n-        \n+\n         final UserSearchPanel about = new UserSearchPanel.Builder(\"about\").nodeCond(notificationTO.getAbout()).build();\n         aboutContainer.add(about);\n         about.setEnabled(!checkAbout.getModelObject());\n-        \n+\n         checkAbout.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n@@ -143,17 +147,33 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxPalettePanel events = new AjaxPalettePanel(\"events\", new PropertyModel(notificationTO, \"events\"),\n-                new ListModel<String>(restClient.getEvents()));\n-        form.add(events);\n+        form.add(new LoggerCategoryPanel(\n+                \"eventSelection\",\n+                loggerRestClient.listEvents(),\n+                new PropertyModel<List<String>>(notificationTO, \"events\"),\n+                getPageReference(),\n+                \"Notification\") {\n+\n+            private static final long serialVersionUID = 6429053774964787735L;\n+\n+            @Override\n+            protected String[] getListRoles() {\n+                return new String[] {};\n+            }\n+\n+            @Override\n+            protected String[] getChangeRoles() {\n+                return new String[] {};\n+            }\n+        });\n \n         final WebMarkupContainer recipientsContainer = new WebMarkupContainer(\"recipientsContainer\");\n         recipientsContainer.setOutputMarkupId(true);\n \n         form.add(recipientsContainer);\n \n         final AjaxCheckBoxPanel selfAsRecipient = new AjaxCheckBoxPanel(\"selfAsRecipient\",\n-                getString(\"selfAsRecipient\"), new PropertyModel(notificationTO, \"selfAsRecipient\"));\n+                getString(\"selfAsRecipient\"), new PropertyModel<Boolean>(notificationTO, \"selfAsRecipient\"));\n         form.add(selfAsRecipient);\n \n         if (createFlag) {\n@@ -292,4 +312,10 @@ private List<String> getSchemaNames(final IntMappingType type) {\n \n         return result;\n     }\n+\n+    private EventCategoryTO getEventCategoryTO(final List<String> events) {\n+        final EventCategoryTO res = new EventCategoryTO();\n+\n+        return res;\n+    }\n }"},{"sha":"790fd6accc1188312b3ce9cc60c32e5129cfabc3","filename":"console/src/main/java/org/apache/syncope/console/pages/Reports.java","status":"modified","additions":88,"deletions":184,"changes":272,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,23 +18,22 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import static org.apache.wicket.Component.RENDER;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n+import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.ReportTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditLoggerName;\n+import org.apache.syncope.common.util.LoggerEventUtils;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.console.markup.html.list.AltListView;\n-import org.apache.syncope.console.pages.panels.JQueryUITabbedPanel;\n+import org.apache.syncope.console.pages.panels.LoggerCategoryPanel;\n+import org.apache.syncope.console.pages.panels.SelectedEventsPanel;\n import org.apache.syncope.console.rest.LoggerRestClient;\n import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n@@ -44,36 +43,28 @@\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n-import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n-import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.form.Check;\n-import org.apache.wicket.markup.html.form.CheckGroup;\n-import org.apache.wicket.markup.html.form.CheckGroupSelector;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.markup.html.list.ListItem;\n-import org.apache.wicket.markup.html.list.ListView;\n-import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.AbstractReadOnlyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.springframework.util.StringUtils;\n+import org.springframework.util.CollectionUtils;\n \n /**\n  * Auditing and Reporting.\n@@ -222,8 +213,8 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable reportTable = new AjaxFallbackDefaultDataTable(\"reportTable\", columns,\n-                new ReportProvider(), paginatorRows);\n+        final AjaxFallbackDefaultDataTable reportTable =\n+                new AjaxFallbackDefaultDataTable(\"reportTable\", columns, new ReportProvider(), paginatorRows);\n \n         reportContainer.add(reportTable);\n         reportContainer.setOutputMarkupId(true);\n@@ -286,27 +277,91 @@ private void setupAudit() {\n         auditContainer.setOutputMarkupId(true);\n         add(auditContainer);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(auditContainer, RENDER, xmlRolesReader.getAllAllowedRoles(\"Audit\",\n-                \"list\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                auditContainer, RENDER, xmlRolesReader.getAllAllowedRoles(\"Audit\", \"list\"));\n \n-        Form form = new Form(\"auditForm\");\n+        final Form form = new Form(\"auditForm\");\n         auditContainer.add(form);\n \n-        List<ITab> tabs = new ArrayList<ITab>();\n+        final List<String> events = new ArrayList<String>();\n \n-        for (final Category category : Category.values()) {\n-            tabs.add(new AbstractTab(new Model<String>(StringUtils.capitalize(category.name()))) {\n+        final List<AuditLoggerName> audits = loggerRestClient.listAudits();\n+        for (AuditLoggerName audit : audits) {\n+            events.add(LoggerEventUtils.buildEvent(\n+                    audit.getType(),\n+                    audit.getCategory(),\n+                    audit.getSubcategory(),\n+                    audit.getEvent(),\n+                    audit.getResult()));\n+        }\n \n-                private static final long serialVersionUID = -5861786415855103549L;\n+        final ListModel<String> model = new ListModel<String>(new ArrayList<String>(events));\n \n-                @Override\n-                public WebMarkupContainer getPanel(final String panelId) {\n-                    return new AuditCategoryPanel(panelId, category);\n-                }\n-            });\n-        }\n+        form.add(new LoggerCategoryPanel(\n+                \"events\", loggerRestClient.listEvents(), model, getPageReference(), \"Reports\") {\n+\n+            private static final long serialVersionUID = 6113164334533550277L;\n+\n+            @Override\n+            protected String[] getListRoles() {\n+                return new String[] {\n+                    xmlRolesReader.getAllAllowedRoles(\"Audit\", \"list\")\n+                };\n+            }\n+\n+            @Override\n+            protected String[] getChangeRoles() {\n+                return new String[] {\n+                    xmlRolesReader.getAllAllowedRoles(\"Audit\", \"enable\"),\n+                    xmlRolesReader.getAllAllowedRoles(\"Audit\", \"disable\")\n+                };\n+            }\n+\n+            @Override\n+            public void onEventAction(final IEvent<?> event) {\n+                if (event.getPayload() instanceof SelectedEventsPanel.EventSelectionChanged) {\n+\n+                    final SelectedEventsPanel.EventSelectionChanged eventSelectionChanged =\n+                            (SelectedEventsPanel.EventSelectionChanged) event.getPayload();\n+\n+                    for (String toBeRemoved : eventSelectionChanged.getToBeRemoved()) {\n+                        if (events.contains(toBeRemoved)) {\n+                            final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                                    LoggerEventUtils.parseEventCategory(toBeRemoved);\n+\n+                            final AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                                    eventCategory.getKey().getType(),\n+                                    eventCategory.getKey().getCategory(),\n+                                    eventCategory.getKey().getSubcategory(),\n+                                    CollectionUtils.isEmpty(eventCategory.getKey().getEvents())\n+                                    ? null : eventCategory.getKey().getEvents().iterator().next(),\n+                                    eventCategory.getValue());\n+\n+                            loggerRestClient.disableAudit(auditLoggerName);\n+                            events.remove(toBeRemoved);\n+                        }\n+                    }\n \n-        form.add(new JQueryUITabbedPanel(\"categoriesTabs\", tabs));\n+                    for (String toBeAdded : eventSelectionChanged.getToBeAdded()) {\n+                        if (!events.contains(toBeAdded)) {\n+                            final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                                    LoggerEventUtils.parseEventCategory(toBeAdded);\n+\n+                            final AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                                    eventCategory.getKey().getType(),\n+                                    eventCategory.getKey().getCategory(),\n+                                    eventCategory.getKey().getSubcategory(),\n+                                    CollectionUtils.isEmpty(eventCategory.getKey().getEvents())\n+                                    ? null : eventCategory.getKey().getEvents().iterator().next(),\n+                                    eventCategory.getValue());\n+\n+                            loggerRestClient.enableAudit(auditLoggerName);\n+                            events.add(toBeAdded);\n+                        }\n+                    }\n+                }\n+            }\n+        });\n     }\n \n     private class ReportProvider extends SortableDataProvider<ReportTO, String> {\n@@ -323,11 +378,8 @@ public ReportProvider() {\n \n         @Override\n         public Iterator<ReportTO> iterator(final long first, final long count) {\n-\n-            List<ReportTO> list = reportRestClient.list(((int) first / paginatorRows) + 1, paginatorRows);\n-\n+            final List<ReportTO> list = reportRestClient.list(((int) first / paginatorRows) + 1, paginatorRows);\n             Collections.sort(list, comparator);\n-\n             return list.iterator();\n         }\n \n@@ -350,152 +402,4 @@ public ReportTO getObject() {\n             };\n         }\n     }\n-\n-    private class AuditsByCategoryModel implements IModel<List<AuditLoggerName>> {\n-\n-        private static final long serialVersionUID = 605983084097505724L;\n-\n-        private final Category category;\n-\n-        private final Result result;\n-\n-        public AuditsByCategoryModel(final Category category, final Result result) {\n-            this.category = category;\n-            this.result = result;\n-        }\n-\n-        @Override\n-        public List<AuditLoggerName> getObject() {\n-            Map<Category, Set<AuditLoggerName>> audits = loggerRestClient.listAuditsByCategory();\n-\n-            List<AuditLoggerName> object = new ArrayList<AuditLoggerName>();\n-            for (Enum<?> subcategory : category.getSubCategoryElements()) {\n-                AuditLoggerName auditLoggerName = new AuditLoggerName(category, subcategory, result);\n-                if (audits.containsKey(category) && audits.get(category).contains(auditLoggerName)) {\n-                    object.add(auditLoggerName);\n-                }\n-            }\n-\n-            return object;\n-        }\n-\n-        @Override\n-        public void setObject(final List<AuditLoggerName> object) {\n-            for (Enum<?> subcategory : category.getSubCategoryElements()) {\n-                AuditLoggerName auditLoggerName = new AuditLoggerName(category, subcategory, result);\n-\n-                if (object.contains(auditLoggerName)) {\n-                    loggerRestClient.enableAudit(auditLoggerName);\n-                } else {\n-                    loggerRestClient.disableAudit(auditLoggerName);\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public void detach() {\n-            // Not needed.\n-        }\n-    }\n-\n-    private class AuditCategoryPanel extends Panel {\n-\n-        private static final long serialVersionUID = 1076251735476895253L;\n-\n-        public AuditCategoryPanel(final String id, final Category category) {\n-            super(id);\n-            setOutputMarkupId(true);\n-\n-            final CheckGroup<AuditLoggerName> successGroup = new CheckGroup<AuditLoggerName>(\"successGroup\",\n-                    new AuditsByCategoryModel(category, Result.success));\n-            successGroup.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n-\n-                private static final long serialVersionUID = -151291731388673682L;\n-\n-                @Override\n-                protected void onUpdate(final AjaxRequestTarget target) {\n-                    // Empty method: here only to let Model.setObject() be invoked.\n-                }\n-            });\n-            add(successGroup);\n-            authorizeComponent(successGroup);\n-\n-            final CheckGroupSelector successSelector = new CheckGroupSelector(\"successSelector\", successGroup);\n-            add(successSelector);\n-            authorizeComponent(successSelector);\n-\n-            final CheckGroup<AuditLoggerName> failureGroup = new CheckGroup<AuditLoggerName>(\"failureGroup\",\n-                    new AuditsByCategoryModel(category, Result.failure));\n-            failureGroup.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n-\n-                private static final long serialVersionUID = -151291731388673682L;\n-\n-                @Override\n-                protected void onUpdate(final AjaxRequestTarget target) {\n-                    // Empty method: here only to let Model.setObject() be invoked.\n-                }\n-            });\n-            add(failureGroup);\n-            authorizeComponent(failureGroup);\n-\n-            final CheckGroupSelector failureSelector = new CheckGroupSelector(\"failureSelector\", failureGroup);\n-            add(failureSelector);\n-            authorizeComponent(failureSelector);\n-\n-            ListView<Enum<?>> categoryView =\n-                    new AltListView<Enum<?>>(\"categoryView\", new ArrayList(category.getSubCategoryElements())) {\n-\n-                private static final long serialVersionUID = 4949588177564901031L;\n-\n-                @Override\n-                protected void populateItem(final ListItem<Enum<?>> item) {\n-                    final Enum<?> subcategory = item.getModelObject();\n-\n-                    item.add(new Label(\"subcategory\", subcategory.name()));\n-                }\n-            };\n-            add(categoryView);\n-\n-            ListView<Enum<?>> successView =\n-                    new AltListView<Enum<?>>(\"successView\", new ArrayList(category.getSubCategoryElements())) {\n-\n-                private static final long serialVersionUID = 4949588177564901031L;\n-\n-                @Override\n-                protected void populateItem(final ListItem<Enum<?>> item) {\n-                    final Enum<?> subcategory = item.getModelObject();\n-\n-                    final Check<AuditLoggerName> successCheck = new Check<AuditLoggerName>(\"successCheck\",\n-                            new Model<AuditLoggerName>(\n-                            new AuditLoggerName(category, subcategory, Result.success)), successGroup);\n-                    item.add(successCheck);\n-                }\n-            };\n-            successGroup.add(successView);\n-\n-            ListView<Enum<?>> failureView =\n-                    new AltListView<Enum<?>>(\"failureView\", new ArrayList(category.getSubCategoryElements())) {\n-\n-                private static final long serialVersionUID = 4949588177564901031L;\n-\n-                @Override\n-                protected void populateItem(final ListItem<Enum<?>> item) {\n-                    final Enum<?> subcategory = item.getModelObject();\n-\n-                    final Check<AuditLoggerName> failureCheck = new Check<AuditLoggerName>(\"failureCheck\",\n-                            new Model<AuditLoggerName>(\n-                            new AuditLoggerName(category, subcategory, Result.failure)), failureGroup);\n-                    item.add(failureCheck);\n-                }\n-            };\n-            failureGroup.add(failureView);\n-        }\n-    }\n-\n-    private void authorizeComponent(final Component component) {\n-        MetaDataRoleAuthorizationStrategy.authorize(component, RENDER,\n-                xmlRolesReader.getAllAllowedRoles(\"Audit\", \"enable\"));\n-        MetaDataRoleAuthorizationStrategy.authorize(component, RENDER,\n-                xmlRolesReader.getAllAllowedRoles(\"Audit\", \"disable\"));\n-    }\n }"},{"sha":"ec4295f3624d14fc5f4515c663b6cbcf3a8dfbd5","filename":"console/src/main/java/org/apache/syncope/console/pages/Roles.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -101,7 +101,7 @@ public void onClose(final AjaxRequestTarget target) {\n         final Form searchForm = new Form(\"searchForm\");\n         add(searchForm);\n \n-        final RoleSearchPanel searchPanel = new RoleSearchPanel(\"searchPanel\");\n+        final RoleSearchPanel searchPanel = new RoleSearchPanel.Builder(\"searchPanel\").build();\n         searchForm.add(searchPanel);\n \n         searchForm.add(new ClearIndicatingAjaxButton(\"search\", new ResourceModel(\"search\"), getPageReference()) {"},{"sha":"87e789792155d8fe4f58384d6af2067248d92499","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/EventSelectionPanel.java","status":"added","additions":242,"deletions":0,"changes":242,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.pages.panels;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.to.EventCategoryTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.util.LoggerEventUtils;\n+import org.apache.syncope.console.markup.html.list.AltListView;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Check;\n+import org.apache.wicket.markup.html.form.CheckGroup;\n+import org.apache.wicket.markup.html.form.CheckGroupSelector;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class EventSelectionPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(EventSelectionPanel.class);\n+\n+    private static final long serialVersionUID = 752233163798301002L;\n+\n+    private Set<String> selected = new HashSet<String>();\n+\n+    public EventSelectionPanel(\n+            final String id, final EventCategoryTO eventCategoryTO, final IModel<List<String>> model) {\n+        super(id);\n+        setOutputMarkupId(true);\n+\n+        final List<String> events = getEvents(eventCategoryTO);\n+\n+        // needed to avoid model reset: model have to be managed into SelectedEventsPanel\n+        selected.addAll(model.getObject());\n+\n+        final CheckGroup<String> successGroup = new CheckGroup<String>(\n+                \"successGroup\",\n+                selected);\n+\n+        successGroup.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n+\n+            private static final long serialVersionUID = -151291731388673682L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+\n+                final Set<String> toBeRemoved = new HashSet<String>();\n+                final Set<String> toBeAdded = new HashSet<String>();\n+\n+                for (String event : getEvents(eventCategoryTO)) {\n+                    final String eventString = LoggerEventUtils.buildEvent(\n+                            eventCategoryTO.getType(),\n+                            eventCategoryTO.getCategory(),\n+                            eventCategoryTO.getSubcategory(),\n+                            event,\n+                            AuditElements.Result.SUCCESS);\n+\n+                    if (successGroup.getModelObject().contains(eventString)) {\n+                        toBeAdded.add(eventString);\n+                    } else {\n+                        toBeRemoved.add(eventString);\n+                    }\n+                }\n+\n+                send(EventSelectionPanel.this.getPage(), Broadcast.BREADTH,\n+                        new SelectedEventsPanel.EventSelectionChanged(target, toBeAdded, toBeRemoved));\n+            }\n+        });\n+\n+        successGroup.setVisible(!events.isEmpty());\n+        add(successGroup);\n+\n+        add(new Label(\"successLabel\", new ResourceModel(\"Success\", \"Success\"))).setVisible(!events.isEmpty());\n+\n+        final CheckGroupSelector successSelector = new CheckGroupSelector(\"successSelector\", successGroup);\n+        successSelector.setVisible(!events.isEmpty());\n+        add(successSelector);\n+\n+        final ListView<String> categoryView = new AltListView<String>(\"categoryView\", events) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String subcategory = item.getModelObject();\n+\n+                item.add(new Label(\"subcategory\", new ResourceModel(subcategory, subcategory)));\n+            }\n+        };\n+        add(categoryView);\n+\n+        final ListView<String> successView = new AltListView<String>(\"successView\", events) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String event = item.getModelObject();\n+\n+                final Check<String> successCheck = new Check<String>(\"successCheck\",\n+                        new Model<String>(LoggerEventUtils.buildEvent(\n+                        eventCategoryTO.getType(),\n+                        eventCategoryTO.getCategory(),\n+                        eventCategoryTO.getSubcategory(),\n+                        event,\n+                        AuditElements.Result.SUCCESS)),\n+                        successGroup);\n+                item.add(successCheck);\n+            }\n+        };\n+        successGroup.add(successView);\n+\n+        final CheckGroup<String> failureGroup = new CheckGroup<String>(\n+                \"failureGroup\",\n+                selected);\n+\n+        failureGroup.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n+\n+            private static final long serialVersionUID = -151291731388673682L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+\n+                final Set<String> toBeRemoved = new HashSet<String>();\n+                final Set<String> toBeAdded = new HashSet<String>();\n+\n+                for (String event : getEvents(eventCategoryTO)) {\n+                    final String eventString = LoggerEventUtils.buildEvent(\n+                            eventCategoryTO.getType(),\n+                            eventCategoryTO.getCategory(),\n+                            eventCategoryTO.getSubcategory(),\n+                            event,\n+                            AuditElements.Result.FAILURE);\n+\n+                    if (failureGroup.getModelObject().contains(eventString)) {\n+                        toBeAdded.add(eventString);\n+                    } else {\n+                        toBeRemoved.add(eventString);\n+                    }\n+                }\n+\n+                send(EventSelectionPanel.this.getPage(), Broadcast.BREADTH,\n+                        new SelectedEventsPanel.EventSelectionChanged(target, toBeAdded, toBeRemoved));\n+            }\n+        });\n+\n+        failureGroup.setVisible(!events.isEmpty());\n+        add(failureGroup);\n+\n+        add(new Label(\"failureLabel\", new ResourceModel(\"Failure\", \"Failure\"))).setVisible(!events.isEmpty());\n+\n+        final CheckGroupSelector failureSelector = new CheckGroupSelector(\"failureSelector\", failureGroup);\n+        failureSelector.setVisible(!events.isEmpty());\n+        add(failureSelector);\n+\n+        final ListView<String> failureView = new AltListView<String>(\"failureView\", events) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String event = item.getModelObject();\n+\n+                final Check<String> failureCheck = new Check<String>(\"failureCheck\",\n+                        new Model<String>(LoggerEventUtils.buildEvent(\n+                        eventCategoryTO.getType(),\n+                        eventCategoryTO.getCategory(),\n+                        eventCategoryTO.getSubcategory(),\n+                        event,\n+                        AuditElements.Result.FAILURE)),\n+                        failureGroup);\n+                item.add(failureCheck);\n+            }\n+        };\n+        failureGroup.add(failureView);\n+    }\n+\n+    private List<String> getEvents(final EventCategoryTO eventCategoryTO) {\n+        final List<String> res;\n+\n+        res = eventCategoryTO.getEvents();\n+\n+        if (res.isEmpty()) {\n+            if ((AuditElements.EventCategoryType.PROPAGATION == eventCategoryTO.getType()\n+                    || AuditElements.EventCategoryType.SYNCHRONIZATION == eventCategoryTO.getType())\n+                    && StringUtils.isEmpty(eventCategoryTO.getCategory())) {\n+                res.add(eventCategoryTO.getType().toString());\n+            } else if (AuditElements.EventCategoryType.TASK == eventCategoryTO.getType()\n+                    && StringUtils.isNotEmpty(eventCategoryTO.getCategory())) {\n+                res.add(eventCategoryTO.getCategory());\n+            }\n+        } else {\n+            Collections.sort(res);\n+        }\n+\n+        return res;\n+    }\n+\n+    /**\n+     * To be extended in order to add actions on events.\n+     *\n+     * @param event event.\n+     */\n+    protected abstract void onEventAction(final IEvent<?> event);\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        onEventAction(event);\n+    }\n+}"},{"sha":"502b38ef89fc42f665111072fe8852e07d3f244c","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/LoggerCategoryPanel.java","status":"added","additions":468,"deletions":0,"changes":468,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,468 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.pages.panels;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.to.EventCategoryTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.EventCategoryType;\n+import org.apache.syncope.common.util.LoggerEventUtils;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.pages.panels.SelectedEventsPanel.EventSelectionChanged;\n+import org.apache.syncope.console.pages.panels.SelectedEventsPanel.InspectSelectedEvent;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class LoggerCategoryPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(LoggerCategoryPanel.class);\n+\n+    private static final long serialVersionUID = 6429053774964787734L;\n+\n+    private final List<EventCategoryTO> eventCategoryTOs;\n+\n+    private final EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+\n+    private final WebMarkupContainer categoryContainer;\n+\n+    private final WebMarkupContainer eventsContainer;\n+\n+    private final SelectedEventsPanel selectedEventsPanel;\n+\n+    private final AjaxDropDownChoicePanel<EventCategoryType> type;\n+\n+    private final AjaxDropDownChoicePanel<String> category;\n+\n+    private final AjaxDropDownChoicePanel<String> subcategory;\n+\n+    private final AjaxTextFieldPanel custom;\n+\n+    private final ActionLinksPanel actionPanel;\n+\n+    private final IModel<List<String>> model;\n+\n+    public LoggerCategoryPanel(\n+            final String id,\n+            final List<EventCategoryTO> eventCategoryTOs,\n+            final IModel<List<String>> model,\n+            final PageReference pageReference,\n+            final String pageId) {\n+        super(id);\n+\n+        this.model = model;\n+        selectedEventsPanel = new SelectedEventsPanel(\"selectedEventsPanel\", model);\n+        add(selectedEventsPanel);\n+\n+        this.eventCategoryTOs = eventCategoryTOs;\n+\n+        categoryContainer = new WebMarkupContainer(\"categoryContainer\");\n+        categoryContainer.setOutputMarkupId(true);\n+        add(categoryContainer);\n+\n+        eventsContainer = new WebMarkupContainer(\"eventsContainer\");\n+        eventsContainer.setOutputMarkupId(true);\n+        add(eventsContainer);\n+\n+        authorizeList();\n+        authorizeChanges();\n+\n+        categoryContainer.add(new Label(\"typeLabel\", new ResourceModel(\"type\", \"type\")));\n+\n+        type = new AjaxDropDownChoicePanel<EventCategoryType>(\n+                \"type\",\n+                \"type\",\n+                new PropertyModel<EventCategoryType>(eventCategoryTO, \"type\"),\n+                false);\n+        type.setChoices(Arrays.asList(EventCategoryType.values()));\n+        type.setStyleSheet(\"ui-widget-content ui-corner-all\");\n+        type.setChoiceRenderer(new IChoiceRenderer<EventCategoryType>() {\n+\n+            private static final long serialVersionUID = 2317134950949778735L;\n+\n+            @Override\n+            public String getDisplayValue(final EventCategoryType eventCategoryType) {\n+                return eventCategoryType.name();\n+            }\n+\n+            @Override\n+            public String getIdValue(final EventCategoryType eventCategoryType, final int i) {\n+                return eventCategoryType.name();\n+            }\n+        });\n+        categoryContainer.add(type);\n+\n+        type.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                send(LoggerCategoryPanel.this, Broadcast.EXACT, new ChangeCategoryEvent(target, type));\n+            }\n+        });\n+\n+        categoryContainer.add(new Label(\"categoryLabel\", new ResourceModel(\"category\", \"category\")));\n+\n+        category = new AjaxDropDownChoicePanel<String>(\n+                \"category\",\n+                \"category\",\n+                new PropertyModel<String>(eventCategoryTO, \"category\"),\n+                false);\n+        category.setChoices(filter(eventCategoryTOs, type.getModelObject()));\n+        category.setStyleSheet(\"ui-widget-content ui-corner-all\");\n+        categoryContainer.add(category);\n+\n+        category.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306811L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                send(LoggerCategoryPanel.this, Broadcast.EXACT, new ChangeCategoryEvent(target, category));\n+            }\n+        });\n+\n+        categoryContainer.add(new Label(\"subcategoryLabel\", new ResourceModel(\"subcategory\", \"subcategory\")));\n+\n+        subcategory = new AjaxDropDownChoicePanel<String>(\n+                \"subcategory\",\n+                \"subcategory\",\n+                new PropertyModel<String>(eventCategoryTO, \"subcategory\"),\n+                false);\n+        subcategory.setChoices(filter(eventCategoryTOs, type.getModelObject(), category.getModelObject()));\n+        subcategory.setStyleSheet(\"ui-widget-content ui-corner-all\");\n+        categoryContainer.add(subcategory);\n+\n+        subcategory.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306812L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                send(LoggerCategoryPanel.this, Broadcast.EXACT, new ChangeCategoryEvent(target, subcategory));\n+            }\n+        });\n+\n+        categoryContainer.add(new Label(\"customLabel\", new ResourceModel(\"custom\", \"custom\")).setVisible(false));\n+\n+        custom = new AjaxTextFieldPanel(\"custom\", \"custom\", new Model<String>(null));\n+        custom.setStyleSheet(\"ui-widget-content ui-corner-all short_fixedsize\");\n+        custom.setVisible(false);\n+        custom.setEnabled(false);\n+\n+        categoryContainer.add(custom);\n+\n+        actionPanel = new ActionLinksPanel(\"customActions\", new Model(), pageReference);\n+        categoryContainer.add(actionPanel);\n+\n+        actionPanel.add(new ActionLink() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(AjaxRequestTarget target) {\n+                if (StringUtils.isNotBlank(custom.getModelObject())) {\n+                    final Map.Entry<EventCategoryTO, AuditElements.Result> parsed =\n+                            LoggerEventUtils.parseEventCategory(custom.getModelObject());\n+\n+                    final String eventString = LoggerEventUtils.buildEvent(\n+                            parsed.getKey().getType(),\n+                            null,\n+                            null,\n+                            parsed.getKey().getEvents().isEmpty()\n+                            ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n+                            parsed.getValue());\n+\n+                    custom.setModelObject(StringUtils.EMPTY);\n+                    send(LoggerCategoryPanel.this.getPage(), Broadcast.BREADTH, new EventSelectionChanged(\n+                            target,\n+                            Collections.<String>singleton(eventString),\n+                            Collections.<String>emptySet()));\n+                    target.add(categoryContainer);\n+                }\n+            }\n+        }, ActionLink.ActionType.CREATE, pageId, true);\n+\n+        actionPanel.add(new ActionLink() {\n+\n+            private static final long serialVersionUID = -3722207913631435502L;\n+\n+            @Override\n+            public void onClick(AjaxRequestTarget target) {\n+                if (StringUtils.isNotBlank(custom.getModelObject())) {\n+                    final Map.Entry<EventCategoryTO, AuditElements.Result> parsed =\n+                            LoggerEventUtils.parseEventCategory(custom.getModelObject());\n+\n+                    final String eventString = LoggerEventUtils.buildEvent(\n+                            parsed.getKey().getType(),\n+                            null,\n+                            null,\n+                            parsed.getKey().getEvents().isEmpty()\n+                            ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n+                            parsed.getValue());\n+\n+                    custom.setModelObject(StringUtils.EMPTY);\n+                    send(LoggerCategoryPanel.this.getPage(), Broadcast.BREADTH, new EventSelectionChanged(\n+                            target,\n+                            Collections.<String>emptySet(),\n+                            Collections.<String>singleton(eventString)));\n+                    target.add(categoryContainer);\n+                }\n+            }\n+        }, ActionLink.ActionType.DELETE, pageId, true);\n+\n+        actionPanel.setVisible(false);\n+        actionPanel.setEnabled(false);\n+\n+        eventsContainer.add(new EventSelectionPanel(\"eventsPanel\", eventCategoryTO, model) {\n+\n+            private static final long serialVersionUID = 3513194801190026082L;\n+\n+            @Override\n+            protected void onEventAction(final IEvent<?> event) {\n+                LoggerCategoryPanel.this.onEventAction(event);\n+            }\n+        });\n+    }\n+\n+    private List<String> filter(\n+            final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type) {\n+        final Set<String> res = new HashSet<String>();\n+\n+        for (EventCategoryTO eventCategory : eventCategoryTOs) {\n+            if (type == eventCategory.getType() && StringUtils.isNotEmpty(eventCategory.getCategory())) {\n+                res.add(eventCategory.getCategory());\n+            }\n+        }\n+\n+        final List<String> filtered = new ArrayList<String>(res);\n+        Collections.sort(filtered);\n+        return filtered;\n+    }\n+\n+    private List<String> filter(\n+            final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type, final String category) {\n+        final Set<String> res = new HashSet<String>();\n+\n+        for (EventCategoryTO eventCategory : eventCategoryTOs) {\n+            if (type == eventCategory.getType() && StringUtils.equals(category, eventCategory.getCategory())\n+                    && StringUtils.isNotEmpty(eventCategory.getSubcategory())) {\n+                res.add(eventCategory.getSubcategory());\n+            }\n+        }\n+\n+        final List<String> filtered = new ArrayList<String>(res);\n+        Collections.sort(filtered);\n+        return filtered;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof ChangeCategoryEvent) {\n+            // update objects ....\n+            eventCategoryTO.getEvents().clear();\n+\n+            final ChangeCategoryEvent change = (ChangeCategoryEvent) event.getPayload();\n+\n+            final Panel changedPanel = change.getChangedPanel();\n+            if (\"type\".equals(changedPanel.getId())) {\n+                eventCategoryTO.setType(type.getModelObject());\n+                eventCategoryTO.setCategory(null);\n+                eventCategoryTO.setSubcategory(null);\n+\n+                if (type.getModelObject() == EventCategoryType.CUSTOM) {\n+                    category.setChoices(Collections.<String>emptyList());\n+                    subcategory.setChoices(Collections.<String>emptyList());\n+                    category.setEnabled(false);\n+                    subcategory.setEnabled(false);\n+                    custom.setVisible(true);\n+                    custom.setEnabled(true);\n+                    actionPanel.setVisible(true);\n+                    actionPanel.setEnabled(true);\n+\n+                } else {\n+                    category.setChoices(filter(eventCategoryTOs, type.getModelObject()));\n+                    subcategory.setChoices(Collections.<String>emptyList());\n+                    category.setEnabled(true);\n+                    subcategory.setEnabled(true);\n+                    custom.setVisible(false);\n+                    custom.setEnabled(false);\n+                    actionPanel.setVisible(false);\n+                    actionPanel.setEnabled(false);\n+                }\n+                change.getTarget().add(categoryContainer);\n+            } else if (\"category\".equals(changedPanel.getId())) {\n+                subcategory.setChoices(filter(eventCategoryTOs, type.getModelObject(), category.getModelObject()));\n+                eventCategoryTO.setCategory(category.getModelObject());\n+                eventCategoryTO.setSubcategory(null);\n+                change.getTarget().add(categoryContainer);\n+            } else {\n+                eventCategoryTO.setSubcategory(subcategory.getModelObject());\n+            }\n+\n+            updateEventsContainer(change.getTarget());\n+        } else if (event.getPayload() instanceof InspectSelectedEvent) {\n+            // update objects ....\n+            eventCategoryTO.getEvents().clear();\n+\n+            final InspectSelectedEvent inspectSelectedEvent = (InspectSelectedEvent) event.getPayload();\n+\n+            final Map.Entry<EventCategoryTO, AuditElements.Result> categoryEvent =\n+                    LoggerEventUtils.parseEventCategory(inspectSelectedEvent.getEvent());\n+\n+            eventCategoryTO.setType(categoryEvent.getKey().getType());\n+            category.setChoices(filter(eventCategoryTOs, type.getModelObject()));\n+\n+            eventCategoryTO.setCategory(categoryEvent.getKey().getCategory());\n+            subcategory.setChoices(filter(eventCategoryTOs, type.getModelObject(), category.getModelObject()));\n+\n+            eventCategoryTO.setSubcategory(categoryEvent.getKey().getSubcategory());\n+\n+            if (categoryEvent.getKey().getType() == EventCategoryType.CUSTOM) {\n+                custom.setModelObject(LoggerEventUtils.buildEvent(\n+                        categoryEvent.getKey().getType(),\n+                        categoryEvent.getKey().getCategory(),\n+                        categoryEvent.getKey().getSubcategory(),\n+                        categoryEvent.getKey().getEvents().isEmpty()\n+                        ? StringUtils.EMPTY : categoryEvent.getKey().getEvents().iterator().next(),\n+                        categoryEvent.getValue()));\n+                \n+                category.setEnabled(false);\n+                subcategory.setEnabled(false);\n+                custom.setVisible(true);\n+                custom.setEnabled(true);\n+                actionPanel.setVisible(true);\n+                actionPanel.setEnabled(true);\n+            } else {\n+                category.setEnabled(true);\n+                subcategory.setEnabled(true);\n+                custom.setVisible(false);\n+                custom.setEnabled(false);\n+                actionPanel.setVisible(false);\n+                actionPanel.setEnabled(false);\n+            }\n+\n+            inspectSelectedEvent.getTarget().add(categoryContainer);\n+            updateEventsContainer(inspectSelectedEvent.getTarget());\n+        }\n+    }\n+\n+    private void setEvents() {\n+        final Iterator<EventCategoryTO> itor = eventCategoryTOs.iterator();\n+        while (itor.hasNext() && eventCategoryTO.getEvents().isEmpty()) {\n+            final EventCategoryTO eventCategory = itor.next();\n+            if (eventCategory.getType() == eventCategoryTO.getType()\n+                    && StringUtils.equals(eventCategory.getCategory(), eventCategoryTO.getCategory())\n+                    && StringUtils.equals(eventCategory.getSubcategory(), eventCategoryTO.getSubcategory())) {\n+                eventCategoryTO.getEvents().addAll(eventCategory.getEvents());\n+            }\n+        }\n+    }\n+\n+    private class ChangeCategoryEvent {\n+\n+        private final AjaxRequestTarget target;\n+\n+        private final Panel changedPanel;\n+\n+        public ChangeCategoryEvent(final AjaxRequestTarget target, final Panel changedPanel) {\n+            this.target = target;\n+            this.changedPanel = changedPanel;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public Panel getChangedPanel() {\n+            return changedPanel;\n+        }\n+    }\n+\n+    /**\n+     * To be extended in order to add actions on events.\n+     *\n+     * @param event event.\n+     */\n+    protected void onEventAction(final IEvent<?> event) {\n+        // nothing by default\n+    }\n+\n+    private void authorizeList() {\n+        for (String role : getListRoles()) {\n+            MetaDataRoleAuthorizationStrategy.authorize(selectedEventsPanel, RENDER, role);\n+        }\n+    }\n+\n+    private void authorizeChanges() {\n+        for (String role : getChangeRoles()) {\n+            MetaDataRoleAuthorizationStrategy.authorize(categoryContainer, RENDER, role);\n+            MetaDataRoleAuthorizationStrategy.authorize(eventsContainer, RENDER, role);\n+        }\n+    }\n+\n+    private void updateEventsContainer(final AjaxRequestTarget target) {\n+        setEvents();\n+\n+        eventsContainer.addOrReplace(new EventSelectionPanel(\"eventsPanel\", eventCategoryTO, model) {\n+\n+            private static final long serialVersionUID = 3513194801190026082L;\n+\n+            @Override\n+            public void onEventAction(final IEvent<?> event) {\n+                LoggerCategoryPanel.this.onEventAction(event);\n+            }\n+        });\n+        target.add(eventsContainer);\n+    }\n+\n+    protected abstract String[] getListRoles();\n+\n+    protected abstract String[] getChangeRoles();\n+}"},{"sha":"9295574f924ac60b57975d8e8e4ddffd337dfd77","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RolePanel.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRolePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRolePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRolePanel.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n-import static org.apache.wicket.Component.RENDER;\n-\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;"},{"sha":"29bf1e7de6e2f78d62cf0038ec808f4f133893bb","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSearchPanel.java","status":"modified","additions":26,"deletions":2,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.commons.SearchCondWrapper;\n import org.apache.wicket.model.LoadableDetachableModel;\n@@ -29,8 +31,30 @@ public class RoleSearchPanel extends AbstractSearchPanel {\n \n     private static final long serialVersionUID = 5757183539269316263L;\n \n-    public RoleSearchPanel(final String id) {\n-        super(id, AttributableType.ROLE, null, true);\n+    public static class Builder implements Serializable {\n+\n+        private static final long serialVersionUID = 6308997285778809579L;\n+\n+        private String id;\n+\n+        private NodeCond initCond = null;\n+\n+        public Builder(final String id) {\n+            this.id = id;\n+        }\n+\n+        public RoleSearchPanel.Builder nodeCond(final NodeCond initCond) {\n+            this.initCond = initCond;\n+            return this;\n+        }\n+\n+        public RoleSearchPanel build() {\n+            return new RoleSearchPanel(this);\n+        }\n+    }\n+\n+    private RoleSearchPanel(final Builder builder) {\n+        super(builder.id, AttributableType.ROLE, builder.initCond, true);\n     }\n \n     @Override"},{"sha":"ded15c2f56b26ff766cbebba4fe9d928bc3b3e8c","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SelectedEventsPanel.java","status":"added","additions":164,"deletions":0,"changes":164,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.console.pages.panels;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.markup.html.form.ListMultipleChoice;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.util.ListModel;\n+\n+public class SelectedEventsPanel extends Panel {\n+\n+    private static final long serialVersionUID = -4832450230348213500L;\n+\n+    private final WebMarkupContainer selectionContainer;\n+\n+    private ListMultipleChoice<String> selectedEvents;\n+\n+    private final IModel<List<String>> model;\n+\n+    public SelectedEventsPanel(final String id, final IModel<List<String>> model) {\n+        super(id);\n+\n+        this.model = model;\n+\n+        selectionContainer = new WebMarkupContainer(\"selectionContainer\");\n+        selectionContainer.setOutputMarkupId(true);\n+        add(selectionContainer);\n+\n+        selectedEvents = new ListMultipleChoice<String>(\"selectedEvents\", new ListModel<String>(), model) {\n+\n+            private static final long serialVersionUID = 1226677544225737338L;\n+\n+            @Override\n+            protected void onComponentTag(final ComponentTag tag) {\n+                super.onComponentTag(tag);\n+                tag.remove(\"size\");\n+                tag.remove(\"multiple\");\n+                tag.put(\"size\", 5);\n+            }\n+        };\n+\n+        selectedEvents.setMaxRows(5);\n+        selectedEvents.setChoiceRenderer(new IChoiceRenderer<String>() {\n+\n+            private static final long serialVersionUID = -4288397951948436434L;\n+\n+            @Override\n+            public Object getDisplayValue(final String object) {\n+                return object;\n+            }\n+\n+            @Override\n+            public String getIdValue(final String object, final int index) {\n+                return object;\n+            }\n+        });\n+\n+        selectedEvents.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -151291731388673682L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                send(SelectedEventsPanel.this.getPage(),\n+                        Broadcast.BREADTH,\n+                        new InspectSelectedEvent(target, selectedEvents.getModelValue()));\n+            }\n+        });\n+\n+        selectionContainer.add(selectedEvents);\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof EventSelectionChanged) {\n+            final EventSelectionChanged eventSelectionChanged = (EventSelectionChanged) event.getPayload();\n+\n+            for (String toBeRemoved : eventSelectionChanged.getToBeRemoved()) {\n+                model.getObject().remove(toBeRemoved);\n+            }\n+\n+            for (String toBeAdded : eventSelectionChanged.getToBeAdded()) {\n+                if (!model.getObject().contains(toBeAdded)) {\n+                    model.getObject().add(toBeAdded);\n+                }\n+            }\n+\n+            eventSelectionChanged.getTarget().add(selectionContainer);\n+        }\n+    }\n+\n+    public static class InspectSelectedEvent {\n+\n+        private final AjaxRequestTarget target;\n+\n+        private final String event;\n+\n+        public InspectSelectedEvent(final AjaxRequestTarget target, final String event) {\n+            this.target = target;\n+            this.event = event;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public String getEvent() {\n+            return event;\n+        }\n+    }\n+\n+    public static class EventSelectionChanged {\n+\n+        private final AjaxRequestTarget target;\n+\n+        private final Set<String> toBeRemoved;\n+\n+        private final Set<String> toBeAdded;\n+\n+        public EventSelectionChanged(\n+                final AjaxRequestTarget target,\n+                final Set<String> toBeAdded,\n+                final Set<String> toBeRemoved) {\n+            this.target = target;\n+            this.toBeAdded = toBeAdded;\n+            this.toBeRemoved = toBeRemoved;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public Set<String> getToBeRemoved() {\n+            return toBeRemoved;\n+        }\n+\n+        public Set<String> getToBeAdded() {\n+            return toBeAdded;\n+        }\n+    }\n+}"},{"sha":"e9223cef0c9ce4cd2fc994d31d8b5ae6ce4e90ac","filename":"console/src/main/java/org/apache/syncope/console/rest/LoggerRestClient.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,16 +18,16 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.EnumMap;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n import org.apache.syncope.common.services.LoggerService;\n+import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.LoggerTO;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditLoggerName;\n import org.apache.syncope.common.types.LoggerType;\n import org.apache.syncope.common.types.LoggerLevel;\n@@ -44,13 +44,11 @@ public List<LoggerTO> listLogs() {\n     }\n \n     public List<AuditLoggerName> listAudits() {\n-        List<LoggerTO> logger = getService(LoggerService.class).list(LoggerType.AUDIT);\n-\n-        return CollectionWrapper.wrapLogger(logger);\n+        return CollectionWrapper.wrapLogger(getService(LoggerService.class).list(LoggerType.AUDIT));\n     }\n \n-    public Map<AuditElements.Category, Set<AuditLoggerName>> listAuditsByCategory() {\n-        Map<Category, Set<AuditLoggerName>> result = new EnumMap<Category, Set<AuditLoggerName>>(Category.class);\n+    public Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n+        Map<String, Set<AuditLoggerName>> result = new HashMap<String, Set<AuditLoggerName>>();\n         for (AuditLoggerName auditLoggerName : listAudits()) {\n             if (!result.containsKey(auditLoggerName.getCategory())) {\n                 result.put(auditLoggerName.getCategory(), new HashSet<AuditLoggerName>());\n@@ -84,4 +82,12 @@ public void deleteLog(final String name) {\n     public void disableAudit(final AuditLoggerName auditLoggerName) {\n         getService(LoggerService.class).delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n     }\n+\n+    public List<EventCategoryTO> listEvents() {\n+        try {\n+            return getService(LoggerService.class).events();\n+        } catch (Exception e) {\n+            return Collections.<EventCategoryTO>emptyList();\n+        }\n+    }\n }"},{"sha":"da10701fc00ddfcaf5f752956d1ea63db14ce67a","filename":"console/src/main/java/org/apache/syncope/console/rest/NotificationRestClient.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -23,10 +23,8 @@\n \n import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.services.NotificationService;\n-import org.apache.syncope.common.services.WorkflowService;\n import org.apache.syncope.common.to.MailTemplateTO;\n import org.apache.syncope.common.to.NotificationTO;\n-import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.springframework.stereotype.Component;\n \n@@ -59,8 +57,4 @@ public List<String> getMailTemplates() {\n         return CollectionWrapper.unwrap(\n                 new ArrayList<MailTemplateTO>(getService(ConfigurationService.class).getMailTemplates()));\n     }\n-\n-    public List<String> getEvents() {\n-        return getService(WorkflowService.class).getDefinedTasks(AttributableType.USER).getTasks();\n-    }\n }"},{"sha":"5e9d58f79b1a4a554587eaeeafe379fbf09def10","filename":"console/src/main/java/org/apache/syncope/console/wicket/extensions/markup/html/repeater/data/table/CollectionPanel.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table;\n+\n+import java.util.List;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class CollectionPanel extends Panel {\n+\n+    private static final long serialVersionUID = -4042497356836230377L;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public CollectionPanel(final String id, final List values) {\n+        super(id);\n+\n+        add(new ListView(\"collection\", values) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem item) {\n+                final String value = item.getModelObject() == null ? null : item.getModelObject().toString();\n+                item.add(new Label(\"item\", new ResourceModel(value, value)));\n+            }\n+        });\n+    }\n+}"},{"sha":"7b088810e9cd70236ae3b77da04695eed654d75a","filename":"console/src/main/java/org/apache/syncope/console/wicket/extensions/markup/html/repeater/data/table/CollectionPropertyColumn.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPropertyColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPropertyColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPropertyColumn.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+\n+public class CollectionPropertyColumn<T> extends PropertyColumn<T, String> {\n+\n+    private static final long serialVersionUID = 8077865338230121496L;\n+\n+    public CollectionPropertyColumn(\n+            final IModel<String> displayModel,\n+            final String sortProperty,\n+            final String propertyExpression) {\n+        super(displayModel, sortProperty, propertyExpression);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void populateItem(\n+            final Item<ICellPopulator<T>> cellItem, final String componentId, final IModel<T> rowModel) {\n+\n+        final Object value = getDataModel(rowModel).getObject();\n+\n+        if (value instanceof Collection) {\n+            final List values = new ArrayList((Collection) value);\n+            Collections.sort(values);\n+            cellItem.add(new CollectionPanel(componentId, values));\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"9e5304196ec6f6022e8c518da5daa1604147cc6c","filename":"console/src/main/resources/org/apache/syncope/console/pages/BasePage.html","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -48,8 +48,8 @@\n         $(\"#membership\").tabs();\n       });\n \n-      /** Add rollover effect to tables supporting Ajax events (live)*/\n-      $('table.ui-widget.ui-widget-content.table-hover tbody tr').live('mouseover mouseout',\n+      /** Add rollover effect to tables supporting Ajax events */\n+      $(document).on('mouseover mouseout', 'table.ui-widget.ui-widget-content.table-hover tbody tr',\n               function(event) {\n                 if (event.type == 'mouseover') {\n                   $(this).addClass('selectedRow');"},{"sha":"6dce63ad1bc731353dd262be9fcf05f3a11b68a3","filename":"console/src/main/resources/org/apache/syncope/console/pages/NotificationModalPage.html","status":"modified","additions":57,"deletions":18,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.html?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -17,15 +17,44 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style>\n+      div#tabs div#events{\n+        min-width: 970px;\n+        overflow: hidden;\n+      }\n+\n+      div#userFilter {\n+        border: 1px solid #DDDDDD;\n+      }\n+\n+      div#userFilter div#title {\n+        margin: 10px 0px 0px 8px;\n+      }\n+\n+      div#userFilter div#warning {\n+        margin: 1px 0px 5px 8px;\n+      }\n+\n+      div#userFilter div#title label {\n+        font-weight: bold;\n+      }\n+\n+      div#userFilter div#warning label {\n+        color: #E00000;\n+        font-size: 8px;\n+      }\n+    </style>\n+  </wicket:head>\n   <wicket:extend>\n     <div style=\"margin:10px\">\n       <p class=\"ui-widget ui-corner-all ui-widget-header\"><wicket:message key=\"title\"/></p>\n       <form wicket:id=\"form\">\n         <div id=\"tabs\">\n           <ul>\n             <li  class=\"tabs-selected\"><a href=\"#notification\"><span><wicket:message key=\"notification\"/></span></a></li>\n-            <li><a href=\"#about\"><span><wicket:message key=\"about\"/></span></a></li>\n             <li><a href=\"#events\"><span><wicket:message key=\"events\"/></span></a></li>\n+            <li><a href=\"#about\"><span><wicket:message key=\"about\"/></span></a></li>\n             <li><a href=\"#recipients\"><span><wicket:message key=\"recipients\"/></span></a></li>\n           </ul>\n \n@@ -87,22 +116,32 @@\n             </div>\n           </div>\n \n+          <div id=\"events\">\n+            <span wicket:id=\"eventSelection\"/>\n+          </div>\n+\n           <div id=\"about\">\n             <span wicket:id=\"aboutContainer\">\n-           \t<div class=\"tablerow\" style=\"width: auto;\">\n-           \t  <div class=\"tablecolumn_field\" style=\"width: auto; padding-right: 5px;\">\n-           \t    <span wicket:id=\"checkAbout\">[checkAbout]</span>\n-           \t  </div>\n-           \t  <div class=\"tablecolumn_label\" style=\"width: auto;\">\n-           \t    <label for=\"checkAbout\"><wicket:message key=\"checkAbout\"/></label>\n-           \t  </div>\n-           \t</div>\n-               <span wicket:id=\"about\"/>\n-             </span>\n-          </div>  \n-\n-          <div id=\"events\">\n-            <span wicket:id=\"events\"/>\n+              <div class=\"tablerow\" style=\"width: auto;\">\n+                <div class=\"tablecolumn_field\" style=\"width: auto; padding-right: 5px;\">\n+                  <span wicket:id=\"checkAbout\">[checkAbout]</span>\n+                </div>\n+                <div class=\"tablecolumn_label\" style=\"width: auto;\">\n+                  <label for=\"checkAbout\"><wicket:message key=\"checkAbout\"/></label>\n+                </div>\n+              </div>\n+              <div id=\"userFilter\">\n+                <div id=\"title\">\n+                  <label for=\"userFilter\"><wicket:message key=\"userFilter\"/></label>\n+                </div>\n+                <div id=\"warning\">\n+                  <label for=\"userFilter\"><wicket:message key=\"userFilterWarning\"/></label>\n+                </div>\n+                <div id=\"condition\">\n+                  <span wicket:id=\"about\"/>\n+                </div>\n+              </div>\n+            </span>\n           </div>\n \n           <div id=\"recipients\">\n@@ -115,11 +154,11 @@\n               </div>\n             </div>\n             <span wicket:id=\"recipientsContainer\">\n-           \t<div class=\"tablerow\" style=\"width: auto;\">\n-           \t  <div class=\"tablecolumn_field\" style=\"width: auto; padding-right: 5px;\">\n+              <div class=\"tablerow\" style=\"width: auto;\">\n+                <div class=\"tablecolumn_field\" style=\"width: auto; padding-right: 5px;\">\n                   <span wicket:id=\"checkRecipients\">[checkRecipients]</span>\n                 </div>\n-           \t  <div class=\"tablecolumn_label\" style=\"width: auto;\">\n+                <div class=\"tablecolumn_label\" style=\"width: auto;\">\n                   <label for=\"checkRecipients\"><wicket:message key=\"checkRecipients\"/></label>\n                 </div>\n               </div>"},{"sha":"61e9a0dd5840b702425ec06a5ad8e5e6f193edc6","filename":"console/src/main/resources/org/apache/syncope/console/pages/NotificationModalPage.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.properties?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -28,4 +28,6 @@ selfAsRecipient=Include users matching About\n recipientAttrType=Recipients e-mail attribute type\n recipientAttrName=Recipients e-mail attribute schema\n checkRecipients=Search recipients\n-checkAbout=All users\n+checkAbout=All\n+userFilter=User filter\n+userFilterWarning=Do not use this filter unless events are not targeted at users"},{"sha":"cc158d41ea50b83895c529667b74a8d29177ca63","filename":"console/src/main/resources/org/apache/syncope/console/pages/NotificationModalPage_it.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage_it.properties?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -28,4 +28,6 @@ selfAsRecipient=Includi i soggetti\n recipientAttrType=Tipo attributo e-mail destinatari\n recipientAttrName=Shcema attributo e-mail destinatari\n checkRecipients=Cerca i destinatari\n-checkAbout=Tutti gli utenti\n\\ No newline at end of file\n+checkAbout=Tutto\n+userFilter=Filtro utenti\n+userFilterWarning=Non usare questo filtro se gli eventi catturati non riguardano espressamente utenti\n\\ No newline at end of file"},{"sha":"bac46ab54a8fe26498ed5cb9151c02e768280529","filename":"console/src/main/resources/org/apache/syncope/console/pages/NotificationModalPage_pt_BR.properties","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage_pt_BR.properties?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -14,18 +14,20 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-title=Alterar Notifica\\u00E7\\u00E3o\n+title=Alterar Notifica\\u00e7\\u00e3o\n submit=Salvar\n subject=Assunto\n sender=Remetente\n template=Template\n-traceLevel=N\\u00EDvel de Trace\n-notification=Notifica\\u00E7\\u00E3o\n+traceLevel=N\\u00edvel de Trace\n+notification=Notifica\\u00e7\\u00e3o\n about=Sobre\n events=Eventos\n-recipients=Destinat\\u00E1rios\n-selfAsRecipient=Incluir usu\\u00E1rios relacionados Sobre\n-recipientAttrType=Tipo de atributo de destinat\\u00E1rio de email.\n-recipientAttrName=Destinat\\u00E1rios de e-mail para atributos de esquema\n-checkRecipients=Buscar Destinat\\u00E1rios\n-checkAbout=Todos os usu\\u00E1rios\n\\ No newline at end of file\n+recipients=Destinat\\u00e1rios\n+selfAsRecipient=Incluir usu\\u00e1rios relacionados Sobre\n+recipientAttrType=Tipo de atributo de destinat\\u00e1rio de email.\n+recipientAttrName=Destinat\\u00e1rios de e-mail para atributos de esquema\n+checkRecipients=Buscar Destinat\\u00e1rios\n+checkAbout=Todos\n+userFilter=User filter\n+userFilterWarning=Do not use this filter unless events are not targeted at users\n\\ No newline at end of file"},{"sha":"64e2b2e3c6b5e5e94fb3e90d79df073cd95f27ad","filename":"console/src/main/resources/org/apache/syncope/console/pages/Reports.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.html?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -48,7 +48,7 @@\n       <div id=\"tabs-2\">\n         <span wicket:id=\"auditContainer\">\n           <form wicket:id=\"auditForm\">\n-            <div wicket:id=\"categoriesTabs\"/>\n+            <span wicket:id=\"events\">[event builder]</span>\n           </form>\n         </span>\n       </div>"},{"sha":"c86473af87de0060109c53deb7acaac1da2c76aa","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/AuditEventsPanel.html","status":"renamed","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAuditEventsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAuditEventsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAuditEventsPanel.html?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -70,15 +70,19 @@\n         </div>\n         <div style=\"display: table-cell\">\n           <div class=\"divtableheadercell\">\n-            <div class=\"divtableheaderlabel\">Success</div>\n+            <div class=\"divtableheaderlabel\">\n+              <label wicket:id=\"successLabel\"/>\n+            </div>\n             <div style=\"display: table-cell\">\n               <input type=\"checkbox\" wicket:id=\"successSelector\" style=\"margin-top: 0px;margin-bottom: 0px;\"/>\n             </div>\n           </div>\n         </div>\n         <div style=\"display: table-cell\">\n           <div class=\"divtableheadercell\">\n-            <div class=\"divtableheaderlabel\">Failure</div>\n+            <div class=\"divtableheaderlabel\">\n+              <label wicket:id=\"failureLabel\"/>\n+            </div>\n             <div style=\"display: table-cell\">\n               <input type=\"checkbox\" wicket:id=\"failureSelector\" style=\"margin-top: 0px;margin-bottom: 0px;\"/>\n             </div>","previous_filename":"console/src/main/resources/org/apache/syncope/console/pages/Reports$AuditCategoryPanel.html"},{"sha":"ac7c9fc72ffaec12d5a0254e9c46fe65f2625d49","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/EventSelectionPanel.html","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.html?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,125 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style>\n+      .container {\n+        display: block;\n+        width: 100%;\n+      }\n+\n+      .label {\n+        font-size: 12px;\n+        vertical-align: middle;\n+        font-family: Verdana,Tahoma,sans-serif;\n+        display: table-cell;\n+        width: 300px;\n+        height: 20px;\n+      }\n+\n+      .divtableheaderlabel {\n+        font-weight: bold;\n+        float: left;\n+        margin-left: 5px;\n+        display: table-cell;\n+        width: 70px;\n+      }\n+\n+      .divtableheadercell {\n+        display: inline-table;\n+        vertical-align: top;\n+        text-align: right;\n+        width: 105px;\n+        height: 20px;\n+      }\n+\n+      .divtablecheckcolumn {\n+        display: table-cell;\n+        vertical-align: top;\n+        text-align: right;\n+        width: 105px;\n+      }\n+\n+      .divtablecheck {\n+        width: 105px;\n+        height: 20px;\n+      }\n+\n+    </style>\n+  </wicket:head>\n+  <wicket:panel>\n+    <div class=\"eventSelectionWidzard\">\n+      <div class=\"container\">\n+        <div style=\"display:inline-table;\">\n+          <div class=\"label\">\n+            &nbsp;\n+          </div>\n+          <div style=\"display: table-cell\">\n+            <div class=\"divtableheadercell\">\n+              <div class=\"divtableheaderlabel\">\n+                <label wicket:id=\"successLabel\"/>\n+              </div>\n+              <div style=\"display: table-cell\">\n+                <input type=\"checkbox\" wicket:id=\"successSelector\" style=\"margin-top: 0px;margin-bottom: 0px;\"/>\n+              </div>\n+            </div>\n+          </div>\n+          <div style=\"display: table-cell\">\n+            <div class=\"divtableheadercell\">\n+              <div class=\"divtableheaderlabel\">\n+                <label wicket:id=\"failureLabel\"/>\n+              </div>\n+              <div style=\"display: table-cell\">\n+                <input type=\"checkbox\" wicket:id=\"failureSelector\" style=\"margin-top: 0px;margin-bottom: 0px;\"/>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+\n+      <div class=\"container\">\n+        <div class=\"label\">\n+          <div id=\"divtablerow-label\" wicket:id=\"categoryView\">\n+            <div class=\"label\">\n+              <span wicket:id=\"subcategory\">[subcategory]</span>\n+            </div>\n+          </div>\n+        </div>\n+\n+        <div id=\"divtablerow-success\" class=\"divtablecheckcolumn\">\n+          <span wicket:id=\"successGroup\">\n+            <div wicket:id=\"successView\" class=\"divtablecheck\">\n+              <div class=\"divtableheaderlabel\">&nbsp;</div>\n+              <input type=\"checkbox\" wicket:id=\"successCheck\"/>\n+            </div>\n+          </span>\n+        </div>\n+\n+        <div id=\"divtablerow-failure\" class=\"divtablecheckcolumn\">\n+          <span wicket:id=\"failureGroup\">\n+            <div wicket:id=\"failureView\" class=\"divtablecheck\">\n+              <div class=\"divtableheaderlabel\">&nbsp;</div>\n+              <input type=\"checkbox\" wicket:id=\"failureCheck\"/>\n+            </div>\n+          </span>\n+        </div>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"c98dcb5c289ad9cf9680eadc0a013c3a64caaa77","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/LoggerCategoryPanel.html","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.html?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,106 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style>\n+\n+      .events{\n+        display: table-row;\n+        width: 990px;\n+      }\n+\n+      .selectedEvents{\n+        display: inline-block;\n+        height: 100px;\n+        margin: 10px 10px 0 10px;\n+        overflow-y: auto;\n+      }\n+\n+      .eventSelection{\n+        display: inline-table;\n+        float: right;\n+        width: 380px;\n+        min-width: 380px;\n+      }\n+\n+      .eventSelection div#eventElement{\n+        display: table-row;\n+        width:100%;\n+      }\n+      .eventSelection div#eventElement div#label{\n+        display: table-cell;\n+      }\n+\n+      .eventSelection div#eventElement div#value{\n+        display: table-cell;\n+        padding: 0 0 0 10px;\n+      }\n+    </style>\n+  </wicket:head>\n+  <wicket:panel>\n+\n+    <div class=\"events\">\n+      <div class=\"selectedEvents\">\n+        <span wicket:id=\"selectedEventsPanel\">[selected events panel]</span>\n+      </div>\n+\n+      <div class=\"eventSelection\">\n+        <div wicket:id=\"categoryContainer\" style=\"display: block; margin: 10px 0px 20px 0px\">\n+          <div id=\"eventElement\">\n+            <div id=\"label\">\n+              <label wicket:id=\"typeLabel\"/>\n+            </div>\n+            <div id=\"value\">\n+              <span wicket:id=\"type\">[type]</span>\n+            </div>\n+          </div>\n+          <div id=\"eventElement\">\n+            <div id=\"label\">\n+              <label wicket:id=\"categoryLabel\"/>\n+            </div>\n+            <div id=\"value\">\n+              <span wicket:id=\"category\">[category]</span>\n+            </div>\n+          </div>\n+          <div id=\"eventElement\">\n+            <div id=\"label\">\n+              <label wicket:id=\"subcategoryLabel\"/>\n+            </div>\n+            <div id=\"value\">\n+              <span wicket:id=\"subcategory\">[sub-category]</span>\n+            </div>\n+          </div>\n+          <div id=\"eventElement\">\n+            <div id=\"label\">\n+              <label wicket:id=\"customLabel\"/>\n+            </div>\n+            <div id=\"value\">\n+              <span wicket:id=\"custom\">[custom]</span>\n+              <span wicket:id=\"customActions\">[actions]</span>\n+            </div>\n+          </div>\n+        </div>\n+        <div wicket:id=\"eventsContainer\" style=\"display: block\">\n+          <span wicket:id=\"eventsPanel\">[events panel]</span>\n+        </div>\n+      </div>\n+    </div>\n+\n+  </wicket:panel>\n+</html>"},{"sha":"3ef03546cdb564dedcef56dda4842c5a96bf8b60","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/SelectedEventsPanel.html","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.html?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,33 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style>\n+      div#selectionContainer select{\n+        width: 585px;\n+        min-width: 585px;\n+      }\n+    </style>\n+  </wicket:head>\n+  <wicket:panel>\n+    <div id=\"selectionContainer\" wicket:id=\"selectionContainer\">\n+      <select wicket:id=\"selectedEvents\" ></select>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"56220a9dfed5f255f23d86c4ebd6ad0d01e6fd8c","filename":"console/src/main/resources/org/apache/syncope/console/wicket/extensions/markup/html/repeater/data/table/CollectionPanel.html","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.html?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,25 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div id=\"collection\" wicket:id=\"collection\">\n+      <span id=\"item\" wicket:id=\"item\"/>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"014a21c97cb7325e8e909ff05bcc292115d86a18","filename":"console/src/test/java/org/apache/syncope/console/ConfigurationTestITCase.java","status":"modified","additions":33,"deletions":5,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.console;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n \n public class ConfigurationTestITCase extends AbstractTest {\n@@ -156,10 +155,39 @@ public void createNotification() {\n \n         selenium.click(\"//div[2]/form/div[3]/ul/li[3]/a/span\");\n \n-        selenium.click(\"//div[2]/form/div[3]/div[3]/span/span/div/div[2]/div/select/option\");\n-\n-        selenium.click(\"//div[2]/form/div[3]/div[3]/span/span/div/div[2]/div[2]/div/a\");\n-\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"\"\n+                + \"//select[@name='eventSelection:categoryContainer:type:dropDownChoiceField']\"\n+                + \"/option[text()='PROPAGATION']\\\");\",\n+                \"30000\");\n+        \n+        selenium.select(\n+                \"//select[@name='eventSelection:categoryContainer:type:dropDownChoiceField']\",\n+                \"label=PROPAGATION\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"\"\n+                + \"//select[@name='eventSelection:categoryContainer:category:dropDownChoiceField']\"\n+                + \"/option[text()='role']\\\");\",\n+                \"30000\");\n+\n+        selenium.select(\n+                \"//select[@name='eventSelection:categoryContainer:category:dropDownChoiceField']\",\n+                \"label=role\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"\"\n+                + \"//select[@name='eventSelection:categoryContainer:subcategory:dropDownChoiceField']\"\n+                + \"/option[text()='resource-db-sync']\\\");\",\n+                \"30000\");\n+\n+        selenium.select(\n+                \"//select[@name='eventSelection:categoryContainer:subcategory:dropDownChoiceField']\",\n+                \"label=resource-db-sync\");\n+\n+        selenium.waitForCondition(\n+                \"selenium.isElementPresent(\\\"//input[@name='eventSelection:eventsContainer:eventsPanel:failureGroup']\\\");\",\n+                \"30000\");\n+        \n+        selenium.click(\"//div[@class='eventSelectionWidzard']/div[2]/div[3]/span/div/input\");\n+        \n         selenium.click(\"//div[2]/form/div[3]/ul/li[4]/a/span\");\n \n         selenium.waitForCondition(\"selenium.isElementPresent(\""},{"sha":"07cbdba03074f6dabc9282419a4793ac45e77a61","filename":"console/src/test/java/org/apache/syncope/console/ReportTestITCase.java","status":"modified","additions":28,"deletions":12,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FReportTestITCase.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -65,17 +65,33 @@ public void navigateAudit() {\n         selenium.waitForCondition(\"selenium.isElementPresent(\\\"//div[@id='tabs']\\\");\", \"30000\");\n \n         selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[2]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[3]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[4]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[5]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[6]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[7]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[8]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[9]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[10]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[11]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[12]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[13]/a\");\n+\n+        selenium.waitForCondition(\n+                \"selenium.isTextPresent(\\\"[REST]:[EntitlementController]:[]:[getOwn]:[SUCCESS]\\\");\",\n+                \"30000\");\n+\n+        selenium.select(\n+                \"//select[@name='events:categoryContainer:type:dropDownChoiceField']\",\n+                \"label=PROPAGATION\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"\"\n+                + \"//select[@name='events:categoryContainer:category:dropDownChoiceField']/option[text()='user']\\\");\",\n+                \"30000\");\n+\n+        selenium.select(\n+                \"//select[@name='events:categoryContainer:category:dropDownChoiceField']\",\n+                \"label=user\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"\"\n+                + \"//select[@name='events:categoryContainer:subcategory:dropDownChoiceField']/option[text()='resource-csv']\\\");\",\n+                \"30000\");\n+\n+        selenium.select(\n+                \"//select[@name='events:categoryContainer:subcategory:dropDownChoiceField']\",\n+                \"label=resource-csv\");\n+\n+        selenium.waitForCondition(\n+                \"selenium.isElementPresent(\\\"//input[@name='events:eventsContainer:eventsPanel:successGroup']\\\");\",\n+                \"30000\");\n     }\n }"},{"sha":"5411c17ab53f199f811bd1dafede5262ad28d2b0","filename":"core/pom.xml","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -165,6 +165,11 @@ under the License.\n       <artifactId>spring-security-config</artifactId>\n     </dependency>\n \t\n+    <dependency>\n+      <groupId>org.aspectj</groupId>\n+      <artifactId>aspectjweaver</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>com.fasterxml.jackson.jaxrs</groupId>\n       <artifactId>jackson-jaxrs-json-provider</artifactId>\n@@ -568,7 +573,6 @@ under the License.\n                   org.apache.commons.collections.keyvalue;version=\"[3.2,4)\",\n                   org.apache.commons.io;version=\"[1.3,2)\",\n                   org.apache.commons.jexl2*;version=\"[2.1,3)\",\n-                  org.apache.commons.lang;version=\"[2.6,3)\",\n                   org.apache.commons.lang3;version=\"[3,4)\",\n                   org.apache.openjpa*;version=\"[2,3)\",\n                   org.apache.syncope.common*;version=${project.version},"},{"sha":"644d1c34d7d0cf55d12fce2c36e10a9d39d29277","filename":"core/src/main/java/org/apache/syncope/core/audit/AuditManager.java","status":"modified","additions":38,"deletions":11,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.core.audit;\n \n-import org.apache.syncope.common.types.AuditElements.Category;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditLoggerName;\n import org.apache.syncope.common.types.LoggerLevel;\n@@ -29,7 +30,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.transaction.annotation.Transactional;\n \n public class AuditManager {\n \n@@ -41,18 +41,45 @@ public class AuditManager {\n     @Autowired\n     private LoggerDAO loggerDAO;\n \n-    @Transactional\n-    public void audit(final Category category, final Enum<?> subcategory, final Result result, final String message) {\n-        audit(category, subcategory, result, message, null);\n-    }\n+    public void audit(\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final String event,\n+            final Result result,\n+            final Object before,\n+            final Object output,\n+            final Object... input) {\n+\n+        final Throwable throwable;\n+        final StringBuilder message = new StringBuilder();\n+\n+        message.append(\"BEFORE:\\n\");\n+        message.append(\"\\t\").append(before == null ? \"unknown\" : before).append(\"\\n\");\n \n-    @Transactional\n-    public void audit(final Category category, final Enum<?> subcategory, final Result result, final String message,\n-            final Throwable throwable) {\n+        message.append(\"INPUT:\\n\");\n+\n+        if (ArrayUtils.isNotEmpty(input)) {\n+            for (Object obj : input) {\n+                message.append(\"\\t\").append(obj == null ? null : obj.toString()).append(\"\\n\");\n+            }\n+        } else {\n+            message.append(\"\\t\").append(\"none\").append(\"\\n\");\n+        }\n+\n+        message.append(\"OUTPUT:\\n\");\n+\n+        if (output instanceof Throwable) {\n+            throwable = (Throwable) output;\n+            message.append(\"\\t\").append(throwable.getMessage());\n+        } else {\n+            throwable = null;\n+            message.append(\"\\t\").append(output == null ? \"none\" : output.toString());\n+        }\n \n         AuditLoggerName auditLoggerName = null;\n         try {\n-            auditLoggerName = new AuditLoggerName(category, subcategory, result);\n+            auditLoggerName = new AuditLoggerName(type, category, subcategory, event, result);\n         } catch (IllegalArgumentException e) {\n             LOG.error(\"Invalid audit parameters, aborting...\", e);\n         }\n@@ -68,7 +95,7 @@ public void audit(final Category category, final Enum<?> subcategory, final Resu\n                 }\n                 auditMessage.append(message);\n \n-                Logger logger = LoggerFactory.getLogger(auditLoggerName.toLoggerName());\n+                final Logger logger = LoggerFactory.getLogger(auditLoggerName.toLoggerName());\n                 if (throwable == null) {\n                     logger.debug(auditMessage.toString());\n                 } else {"},{"sha":"358ca1a04e3e5e873b7f699b5fec050e19c88d2f","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationJob.java","status":"modified","additions":37,"deletions":6,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -22,8 +22,7 @@\n import javax.mail.internet.MimeMessage;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.SyncopeConstants;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.NotificationSubCategory;\n+import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.core.audit.AuditManager;\n@@ -198,7 +197,15 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         execution.setMessage(report.toString());\n                     }\n \n-                    auditManager.audit(Category.notification, NotificationSubCategory.send, Result.success,\n+                    auditManager.audit(\n+                            AuditElements.EventCategoryType.TASK,\n+                            \"notification\",\n+                            null,\n+                            \"send\",\n+                            Result.SUCCESS,\n+                            null,\n+                            null,\n+                            task,\n                             \"Successfully sent notification to \" + to);\n                 } catch (Exception e) {\n                     LOG.error(\"Could not send e-mail\", e);\n@@ -208,7 +215,15 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         execution.setMessage(ExceptionUtil.getFullStackTrace(e));\n                     }\n \n-                    auditManager.audit(Category.notification, NotificationSubCategory.send, Result.failure,\n+                    auditManager.audit(\n+                            AuditElements.EventCategoryType.TASK,\n+                            \"notification\",\n+                            null,\n+                            \"send\",\n+                            Result.FAILURE,\n+                            null,\n+                            null,\n+                            task,\n                             \"Could not send notification to \" + to, e);\n                 }\n \n@@ -266,12 +281,28 @@ private void handleRetries(final TaskExec execution) {\n                     execution.getTask(), failedExecutionsCount, maxRetries);\n             notificationManager.setTaskExecuted(execution.getTask().getId(), false);\n \n-            auditManager.audit(Category.notification, NotificationSubCategory.retry, Result.success,\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.TASK,\n+                    \"notification\",\n+                    null,\n+                    \"retry\",\n+                    Result.SUCCESS,\n+                    null,\n+                    null,\n+                    execution,\n                     \"Notification task \" + execution.getTask().getId() + \" will be retried\");\n         } else {\n             LOG.error(\"Maximum number of retries reached for task {} - giving up\", execution.getTask());\n \n-            auditManager.audit(Category.notification, NotificationSubCategory.retry, Result.failure,\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.TASK,\n+                    \"notification\",\n+                    null,\n+                    \"retry\",\n+                    Result.FAILURE,\n+                    null,\n+                    null,\n+                    execution,\n                     \"Giving up retries on notification task \" + execution.getTask().getId());\n         }\n     }"},{"sha":"39c21c4a9aa3b894e04bf07faf5f14e5d86e6f4d","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":84,"deletions":34,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -19,16 +19,22 @@\n package org.apache.syncope.core.notification;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.util.LoggerEventUtils;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.Notification;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n@@ -40,8 +46,8 @@\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n@@ -86,6 +92,12 @@ public class NotificationManager {\n     @Autowired\n     private UserDAO userDAO;\n \n+    /**\n+     * Role DAO.\n+     */\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n     /**\n      * User data binder.\n      */\n@@ -120,11 +132,18 @@ public class NotificationManager {\n      * Create a notification task.\n      *\n      * @param notification notification to take as model\n-     * @param user the user this task is about\n+     * @param attributable the user this task is about\n+     * @param model Velocity model\n      * @return notification task, fully populated\n      */\n-    private NotificationTask getNotificationTask(final Notification notification, final SyncopeUser user) {\n-        connObjectUtil.retrieveVirAttrValues(user, AttributableUtil.getInstance(AttributableType.USER));\n+    private NotificationTask getNotificationTask(\n+            final Notification notification,\n+            final AbstractAttributable attributable,\n+            final Map<String, Object> model) {\n+\n+        if (attributable != null) {\n+            connObjectUtil.retrieveVirAttrValues(attributable, AttributableUtil.getInstance(AttributableType.USER));\n+        }\n \n         final List<SyncopeUser> recipients = new ArrayList<SyncopeUser>();\n \n@@ -133,8 +152,8 @@ private NotificationTask getNotificationTask(final Notification notification, fi\n                     notification.getRecipients(), AttributableUtil.getInstance(AttributableType.USER)));\n         }\n \n-        if (notification.isSelfAsRecipient()) {\n-            recipients.add(user);\n+        if (notification.isSelfAsRecipient() && attributable instanceof SyncopeUser) {\n+            recipients.add((SyncopeUser) attributable);\n         }\n \n         final Set<String> recipientEmails = new HashSet<String>();\n@@ -152,18 +171,16 @@ private NotificationTask getNotificationTask(final Notification notification, fi\n             }\n         }\n \n+        model.put(\"recipients\", recipientTOs);\n+        model.put(\"syncopeConf\", this.findAllSyncopeConfs());\n+        model.put(\"events\", notification.getEvents());\n+\n         NotificationTask task = new NotificationTask();\n         task.setTraceLevel(notification.getTraceLevel());\n         task.setRecipients(recipientEmails);\n         task.setSender(notification.getSender());\n         task.setSubject(notification.getSubject());\n \n-        final Map<String, Object> model = new HashMap<String, Object>();\n-        model.put(\"user\", userDataBinder.getUserTO(user));\n-        model.put(\"syncopeConf\", this.findAllSyncopeConfs());\n-        model.put(\"recipients\", recipientTOs);\n-        model.put(\"events\", notification.getEvents());\n-\n         String htmlBody;\n         String textBody;\n         try {\n@@ -185,33 +202,66 @@ private NotificationTask getNotificationTask(final Notification notification, fi\n \n     /**\n      * Create notification tasks for each notification matching the given user id and (some of) tasks performed.\n-     *\n-     * @param userId user id\n-     * @param performedTasks set of actions performed on given user id\n-     * @throws NotFoundException if user contained in the workflow result cannot be found\n      */\n-    public void createTasks(final Long userId, final Set<String> performedTasks)\n-            throws NotFoundException {\n-\n-        SyncopeUser user = userDAO.find(userId);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + userId);\n+    public void createTasks(\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final String event,\n+            final Result condition,\n+            final Object before,\n+            final Object output,\n+            final Object... input) {\n+\n+        AttributableType attributableType = null;\n+        AbstractAttributable attributable = null;\n+\n+        if (before instanceof UserTO) {\n+            attributableType = AttributableType.USER;\n+            attributable = userDAO.find(((UserTO) before).getId());\n+        } else if (output instanceof UserTO) {\n+            attributableType = AttributableType.USER;\n+            attributable = userDAO.find(((UserTO) output).getId());\n+        } else if (before instanceof RoleTO) {\n+            attributableType = AttributableType.ROLE;\n+            attributable = roleDAO.find(((RoleTO) before).getId());\n+        } else if (output instanceof RoleTO) {\n+            attributableType = AttributableType.ROLE;\n+            attributable = roleDAO.find(((RoleTO) output).getId());\n         }\n \n+        LOG.debug(\"Search notification for [{}]{}\", attributableType, attributable);\n+\n         for (Notification notification : notificationDAO.findAll()) {\n-            if (notification.getAbout() == null\n-                    || searchDAO.matches(user, notification.getAbout(),\n-                    AttributableUtil.getInstance(AttributableType.USER))) {\n-\n-                Set<String> events = new HashSet<String>(notification.getEvents());\n-                events.retainAll(performedTasks);\n-\n-                if (events.isEmpty()) {\n-                    LOG.debug(\"No events found about {}\", user);\n-                } else {\n-                    LOG.debug(\"Creating notification task for events {} about {}\", events, user);\n-                    taskDAO.save(getNotificationTask(notification, user));\n+            LOG.debug(\"Notification available about {}\", notification.getAbout());\n+\n+            final Set<String> events = new HashSet<String>(notification.getEvents());\n+            events.retainAll(Collections.<String>singleton(LoggerEventUtils.buildEvent(\n+                    type, category, subcategory, event, condition)));\n+\n+            if (events.isEmpty()) {\n+                LOG.debug(\"No events found about {}\", attributable);\n+            } else if (attributableType == null || attributable == null || notification.getAbout() == null\n+                    || searchDAO.matches(attributable, notification.getAbout(),\n+                    AttributableUtil.getInstance(attributableType))) {\n+\n+                LOG.debug(\"Creating notification task for events {} about {}\", events, attributable);\n+\n+                final Map<String, Object> model = new HashMap<String, Object>();\n+                model.put(\"type\", type);\n+                model.put(\"category\", category);\n+                model.put(\"subcategory\", subcategory);\n+                model.put(\"event\", event);\n+                model.put(\"condition\", condition);\n+                model.put(\"before\", before);\n+                model.put(\"output\", output);\n+                model.put(\"input\", input);\n+\n+                if (attributable instanceof SyncopeUser) {\n+                    model.put(\"user\", userDataBinder.getUserTO((SyncopeUser) attributable));\n                 }\n+\n+                taskDAO.save(getNotificationTask(notification, attributable, model));\n             }\n         }\n     }"},{"sha":"88367df396ce5af7d0a55eee56bcb01dbdf272f4","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PropagationTask.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -25,7 +25,6 @@\n import javax.persistence.Enumerated;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n-\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.PropagationMode;\n import org.apache.syncope.common.types.ResourceOperation;"},{"sha":"ed6f27fc043f0c630cd868db58dd7df7a8dc2936","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -62,8 +62,7 @@\n import org.apache.syncope.core.persistence.validation.entity.SyncopeRoleCheck;\n \n @Entity\n-@Table(uniqueConstraints =\n-        @UniqueConstraint(columnNames = { \"name\", \"parent_id\" }))\n+@Table(uniqueConstraints = @UniqueConstraint(columnNames = {\"name\", \"parent_id\"}))\n @Cacheable\n @SyncopeRoleCheck\n public class SyncopeRole extends AbstractAttributable {\n@@ -284,7 +283,7 @@ public void setInheritTemplates(final boolean inheritAttrTemplates) {\n         this.inheritTemplates = getBooleanAsInteger(inheritAttrTemplates);\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     public <T extends AbstractAttrTemplate> List<T> getAttrTemplates(final Class<T> reference) {\n         List<T> result = null;\n \n@@ -322,7 +321,7 @@ public <T extends AbstractAttrTemplate<K>, K extends AbstractSchema> T getAttrTe\n     public <T extends AbstractAttrTemplate<K>, K extends AbstractSchema> List<K> getAttrTemplateSchemas(\n             final Class<T> reference) {\n \n-        List<K> result = new ArrayList<K>();\n+        final List<K> result = new ArrayList<K>();\n \n         for (T template : findInheritedTemplates(reference)) {\n             result.add(template.getSchema());\n@@ -335,7 +334,7 @@ public <T extends AbstractAttrTemplate<K>, K extends AbstractSchema> List<K> get\n     public <T extends AbstractAttrTemplate<K>, K extends AbstractSchema> List<T> findInheritedTemplates(\n             final Class<T> reference) {\n \n-        List<T> result = new ArrayList<T>(getAttrTemplates(reference));\n+        final List<T> result = new ArrayList<T>(getAttrTemplates(reference));\n \n         if (isInheritTemplates() && getParent() != null) {\n             result.addAll(getParent().findInheritedTemplates(reference));"},{"sha":"ead0bcde3e915e27b02b27440c91af67087e0a71","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -197,7 +197,6 @@ public Membership getMembership(final Long syncopeRoleId) {\n                 result = membership;\n             }\n         }\n-\n         return result;\n     }\n \n@@ -242,7 +241,6 @@ public Set<ExternalResource> getResources() {\n         for (SyncopeRole role : getRoles()) {\n             result.addAll(role.getResources());\n         }\n-\n         return result;\n     }\n \n@@ -491,8 +489,8 @@ public boolean verifyPasswordHistory(final String password, final int size) {\n                 res = passwordHistory.subList(size >= passwordHistory.size()\n                         ? 0\n                         : passwordHistory.size() - size, passwordHistory.size()).contains(cipherAlgorithm == null\n-                                ? password\n-                                : PasswordEncoder.encode(password, cipherAlgorithm));\n+                        ? password\n+                        : PasswordEncoder.encode(password, cipherAlgorithm));\n             } catch (Exception e) {\n                 LOG.error(\"Error evaluating password history\", e);\n             }"},{"sha":"535ab1d9bab5e9fa509e6640172af05d3f931971","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/NotFoundException.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotFoundException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotFoundException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotFoundException.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -23,7 +23,7 @@\n  */\n public class NotFoundException extends RuntimeException {\n \n-    private static final long serialVersionUID = 4810651769126663580L;\n+    private static final long serialVersionUID = 4810651769126663581L;\n \n     public NotFoundException(final String msg) {\n         super(msg);"},{"sha":"bb159598e62adc0d2b2f16d84d464c483fc9cd8d","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.propagation.impl;\n \n+import java.util.ArrayList;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -27,11 +28,15 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.PropagationMode;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.TraceLevel;\n+import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n+import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n@@ -95,6 +100,18 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected RoleDataBinder roleDataBinder;\n \n+    /**\n+     * Notification Manager.\n+     */\n+    @Autowired\n+    protected NotificationManager notificationManager;\n+\n+    /**\n+     * Audit Manager.\n+     */\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n     @Override\n     public TaskExec execute(final PropagationTask task) {\n         return execute(task, null);\n@@ -306,6 +323,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n         ConnectorObject afterObj = null;\n \n         Connector connector = null;\n+        Result result;\n         try {\n             connector = connLoader.getConnector(task.getResource());\n \n@@ -332,7 +350,9 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                     : PropagationTaskExecStatus.SUBMITTED.name());\n \n             LOG.debug(\"Successfully propagated to {}\", task.getResource());\n+            result = Result.SUCCESS;\n         } catch (Exception e) {\n+            result = Result.FAILURE;\n             LOG.error(\"Exception during provision on resource \" + task.getResource().getName(), e);\n \n             if (e instanceof ConnectorException && e.getCause() != null) {\n@@ -401,6 +421,26 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n \n         actions.after(task, execution, afterObj);\n \n+        notificationManager.createTasks(\n+                AuditElements.EventCategoryType.PROPAGATION,\n+                task.getSubjectType().name().toLowerCase(),\n+                task.getResource().getName(),\n+                task.getPropagationOperation().name().toLowerCase(),\n+                result,\n+                beforeObj, // searching for before object is too much expensive ... \n+                new Object[] { execution, afterObj },\n+                task);\n+\n+        auditManager.audit(\n+                AuditElements.EventCategoryType.PROPAGATION,\n+                task.getSubjectType().name().toLowerCase(),\n+                task.getResource().getName(),\n+                task.getPropagationOperation().name().toLowerCase(),\n+                result,\n+                beforeObj, // searching for before object is too much expensive ... \n+                new Object[] { execution, afterObj },\n+                task);\n+\n         return execution;\n     }\n "},{"sha":"e347a2c1f3ecda3a695dbc393d01f50d4aef27e0","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/LDAPMembershipPropagationActions.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -83,6 +83,7 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                         JexlUtil.addFieldsToContext(role, jexlContext);\n                         JexlUtil.addAttrsToContext(role.getAttrs(), jexlContext);\n                         JexlUtil.addDerAttrsToContext(role.getDerAttrs(), role.getAttrs(), jexlContext);\n+\n                         final String roleAccountLink =\n                                 JexlUtil.evaluate(task.getResource().getRmapping().getAccountLink(), jexlContext);\n                         LOG.debug(\"AccountLink for {} is '{}'\", role, roleAccountLink);"},{"sha":"f5049ebbed31c2ce1585cf87ad1b0d351f5063dc","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PriorityPropagationTaskExecutor.java","status":"modified","additions":42,"deletions":15,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -24,6 +24,8 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n@@ -41,25 +43,50 @@ public void execute(final Collection<PropagationTask> tasks, final PropagationRe\n         final List<PropagationTask> prioritizedTasks = new ArrayList<PropagationTask>(tasks);\n         Collections.sort(prioritizedTasks, new PriorityComparator());\n \n-        for (PropagationTask task : prioritizedTasks) {\n-            LOG.debug(\"Execution started for {}\", task);\n+        Result result = Result.SUCCESS;\n \n-            TaskExec execution = execute(task, reporter);\n+        try {\n+            for (PropagationTask task : prioritizedTasks) {\n+                LOG.debug(\"Execution started for {}\", task);\n \n-            LOG.debug(\"Execution finished for {}, {}\", task, execution);\n+                TaskExec execution = execute(task, reporter);\n \n-            // Propagation is interrupted as soon as the result of the\n-            // communication with a primary resource is in error\n-            PropagationTaskExecStatus execStatus;\n-            try {\n-                execStatus = PropagationTaskExecStatus.valueOf(execution.getStatus());\n-            } catch (IllegalArgumentException e) {\n-                LOG.error(\"Unexpected execution status found {}\", execution.getStatus());\n-                execStatus = PropagationTaskExecStatus.FAILURE;\n-            }\n-            if (task.getResource().isPropagationPrimary() && !execStatus.isSuccessful()) {\n-                throw new PropagationException(task.getResource().getName(), execution.getMessage());\n+                LOG.debug(\"Execution finished for {}, {}\", task, execution);\n+\n+                // Propagation is interrupted as soon as the result of the\n+                // communication with a primary resource is in error\n+                PropagationTaskExecStatus execStatus;\n+                try {\n+                    execStatus = PropagationTaskExecStatus.valueOf(execution.getStatus());\n+                } catch (IllegalArgumentException e) {\n+                    LOG.error(\"Unexpected execution status found {}\", execution.getStatus());\n+                    execStatus = PropagationTaskExecStatus.FAILURE;\n+                }\n+                if (task.getResource().isPropagationPrimary() && !execStatus.isSuccessful()) {\n+                    result = Result.FAILURE;\n+                    throw new PropagationException(task.getResource().getName(), execution.getMessage());\n+                }\n             }\n+        } finally {\n+            notificationManager.createTasks(\n+                    AuditElements.EventCategoryType.PROPAGATION,\n+                    null,\n+                    null,\n+                    null,\n+                    result,\n+                    reporter instanceof DefaultPropagationReporter\n+                    ? ((DefaultPropagationReporter) reporter).getStatuses() : null,\n+                    tasks);\n+\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.PROPAGATION,\n+                    null,\n+                    null,\n+                    null,\n+                    result,\n+                    reporter instanceof DefaultPropagationReporter\n+                    ? ((DefaultPropagationReporter) reporter).getStatuses() : null,\n+                    tasks);\n         }\n     }\n "},{"sha":"93cb4500ab91f980b707aa036efa521fbadf70b3","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -67,7 +67,7 @@\n /**\n  * Manage the data propagation to external resources.\n  */\n-@Transactional(rollbackFor = { Throwable.class })\n+@Transactional(rollbackFor = {Throwable.class})\n public class PropagationManager {\n \n     /**\n@@ -182,6 +182,7 @@ public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfR\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n             roleDataBinder.fillVirtual(role, vAttrs, AttributableUtil.getInstance(AttributableType.ROLE));\n         }\n+        \n         return getCreateTaskIds(role, null, vAttrs, null, wfResult.getPropByRes(), noPropResourceNames);\n     }\n \n@@ -653,7 +654,6 @@ protected <T extends AbstractAttributable> List<PropagationTask> createTasks(fin\n                     }\n \n                     task.setAttributes(preparedAttrs.getValue());\n-\n                     tasks.add(task);\n \n                     LOG.debug(\"PropagationTask created: {}\", task);"},{"sha":"7717bd83c614acb7e623c85acfdbe1be43dce2b8","filename":"core/src/main/java/org/apache/syncope/core/quartz/AbstractTaskJob.java","status":"modified","additions":38,"deletions":1,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -19,6 +19,10 @@\n package org.apache.syncope.core.quartz;\n \n import java.util.Date;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n+import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.notification.NotificationManager;\n \n import org.apache.syncope.core.persistence.beans.Task;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n@@ -72,6 +76,18 @@ public enum Status {\n     @Autowired\n     private TaskExecDAO taskExecDAO;\n \n+    /**\n+     * Notification manager.\n+     */\n+    @Autowired\n+    private NotificationManager notificationManager;\n+\n+    /**\n+     * Audit manager.\n+     */\n+    @Autowired\n+    private AuditManager auditManager;\n+\n     /**\n      * Id, set by the caller, for identifying the task to be executed.\n      */\n@@ -103,12 +119,15 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         execution.setStartDate(new Date());\n         execution.setTask(task);\n \n+        Result result;\n+\n         try {\n             execution.setMessage(doExecute(context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY)));\n-\n             execution.setStatus(Status.SUCCESS.name());\n+            result = Result.SUCCESS;\n         } catch (JobExecutionException e) {\n             LOG.error(\"While executing task \" + taskId, e);\n+            result = Result.FAILURE;\n \n             execution.setMessage(ExceptionUtil.getFullStackTrace(e));\n             execution.setStatus(Status.FAILURE.name());\n@@ -120,6 +139,24 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         }\n \n         task = taskDAO.save(task);\n+\n+        notificationManager.createTasks(\n+                AuditElements.EventCategoryType.TASK,\n+                task.getClass().getSimpleName(),\n+                null,\n+                null, // searching for before object is too much expensive ...\n+                result,\n+                task,\n+                (Object[]) null);\n+\n+        auditManager.audit(\n+                AuditElements.EventCategoryType.TASK,\n+                task.getClass().getSimpleName(),\n+                null,\n+                null, // searching for before object is too much expensive ...\n+                result,\n+                task,\n+                (Object[]) null);\n     }\n \n     /**"},{"sha":"67071cc79fdc62c853f1f74376df37f0dae3f919","filename":"core/src/main/java/org/apache/syncope/core/report/RoleReportlet.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FRoleReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FRoleReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FRoleReportlet.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -229,7 +229,6 @@ private void doExtract(final ContentHandler handler, final List<SyncopeRole> rol\n \n             // Using RoleTO for attribute values, since the conversion logic of\n             // values to String is already encapsulated there\n-\n             RoleTO roleTO = roleDataBinder.getRoleTO(role);\n \n             doExtractAttributes(handler, roleTO, conf.getAttrs(), conf.getDerAttrs(), conf.getVirAttrs());"},{"sha":"650404cbf785fab51c1c7c0b0aff6f4305bac5e7","filename":"core/src/main/java/org/apache/syncope/core/report/UserReportlet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -85,7 +85,7 @@ private int count() {\n         return conf.getMatchingCond() == null\n                 ? userDAO.count(adminRoleIds)\n                 : searchDAO.count(adminRoleIds, conf.getMatchingCond(),\n-                AttributableUtil.getInstance(AttributableType.USER));\n+                        AttributableUtil.getInstance(AttributableType.USER));\n     }\n \n     private void doExtractResources(final ContentHandler handler, final AbstractAttributableTO attributableTO)"},{"sha":"69e12014cb23396745980c011dd072eff1a9e358","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,16 +18,36 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n+import org.apache.syncope.common.AbstractBaseBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = {Throwable.class})\n-abstract class AbstractController {\n+public abstract class AbstractController<T extends AbstractBaseBean> {\n \n     /**\n      * Logger.\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractController.class);\n \n+    /**\n+     * Resolves stored bean (if existing) referred by the given CUD method.\n+     * <br />\n+     * Read-only methods will be unresolved for performance reasons.\n+     *\n+     * @param method method.\n+     * @param args method arguments.\n+     * @return referred stored bean.\n+     * @throws UnresolvedReferenceException in case of failures, read-only methods and unresolved bean.\n+     */\n+    public T resolveBeanReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n+        final Transactional transactional = method.getAnnotation(Transactional.class);\n+        if (transactional != null && transactional.readOnly()) {\n+            throw new UnresolvedReferenceException();\n+        }\n+        return resolveReference(method, args);\n+    }\n+\n+    protected abstract T resolveReference(Method method, Object... args) throws UnresolvedReferenceException;\n }"},{"sha":"896696d85f56db790a4bcf114d8bee9573c7b5d2","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractResourceAssociator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractResourceAssociator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractResourceAssociator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractResourceAssociator.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -21,7 +21,7 @@\n import java.util.Collection;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n \n-public abstract class AbstractResourceAssociator<T extends AbstractAttributableTO> {\n+public abstract class AbstractResourceAssociator<T extends AbstractAttributableTO> extends AbstractController<T> {\n \n     public abstract T unlink(Long id, Collection<String> resources);\n "},{"sha":"895926a45457d051f3b4c9c59451aa3a0b3d0a2f","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractTransactionalController.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.controller;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(rollbackFor = {Throwable.class})\n+public abstract class AbstractTransactionalController<T extends AbstractBaseBean> extends AbstractController<T> {\n+}"},{"sha":"6d994acd7a5b1cefd530b71059a42a1c14aef4a0","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":35,"deletions":42,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -20,15 +20,13 @@\n \n import java.io.IOException;\n import java.io.OutputStream;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.ConfigurationTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.ConfigurationSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.init.WorkflowAdapterLoader;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n@@ -45,10 +43,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class ConfigurationController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class ConfigurationController extends AbstractTransactionalController<ConfigurationTO> {\n \n     @Autowired\n     private ConfDAO confDAO;\n@@ -75,9 +70,6 @@ public ConfigurationTO create(final ConfigurationTO configurationTO) {\n         SyncopeConf conf = binder.create(configurationTO);\n         conf = confDAO.save(conf);\n \n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.create, Result.success,\n-                \"Successfully created conf: \" + conf.getKey());\n-\n         return binder.getConfigurationTO(conf);\n     }\n \n@@ -86,9 +78,6 @@ public ConfigurationTO delete(final String key) {\n         SyncopeConf conf = confDAO.find(key);\n         ConfigurationTO confToDelete = binder.getConfigurationTO(conf);\n         confDAO.delete(key);\n-\n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.delete, Result.success,\n-                \"Successfully deleted conf: \" + key);\n         return confToDelete;\n     }\n \n@@ -101,9 +90,6 @@ public List<ConfigurationTO> list() {\n             configurationTOs.add(binder.getConfigurationTO(configuration));\n         }\n \n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.list, Result.success,\n-                \"Successfully listed all confs: \" + configurationTOs.size());\n-\n         return configurationTOs;\n     }\n \n@@ -113,17 +99,11 @@ public ConfigurationTO read(final String key) {\n         try {\n             SyncopeConf conf = confDAO.find(key);\n             result = binder.getConfigurationTO(conf);\n-\n-            auditManager.audit(Category.configuration, ConfigurationSubCategory.read, Result.success,\n-                    \"Successfully read conf: \" + key);\n         } catch (MissingConfKeyException e) {\n             LOG.error(\"Could not find configuration key '\" + key + \"', returning null\");\n \n             result = new ConfigurationTO();\n             result.setKey(key);\n-\n-            auditManager.audit(Category.configuration, ConfigurationSubCategory.read, Result.failure,\n-                    \"Could not find conf: \" + key);\n         }\n \n         return result;\n@@ -133,21 +113,12 @@ public ConfigurationTO read(final String key) {\n     public ConfigurationTO update(final ConfigurationTO configurationTO) {\n         SyncopeConf conf = confDAO.find(configurationTO.getKey());\n         conf.setValue(configurationTO.getValue());\n-\n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.update, Result.success,\n-                \"Successfully updated conf: \" + conf.getKey());\n-\n         return binder.getConfigurationTO(conf);\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n     public Set<String> getValidators() {\n-        Set<String> validators = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.VALIDATOR);\n-\n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.getValidators, Result.success,\n-                \"Successfully listed all validators: \" + validators.size());\n-\n-        return validators;\n+        return classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.VALIDATOR);\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n@@ -175,9 +146,6 @@ public Set<String> getMailTemplates() {\n         // Only templates available both as HTML and TEXT are considered\n         htmlTemplates.retainAll(textTemplates);\n \n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.getMailTemplates, Result.success,\n-                \"Successfully listed all mail templates: \" + htmlTemplates.size());\n-\n         return htmlTemplates;\n     }\n \n@@ -186,14 +154,39 @@ public Set<String> getMailTemplates() {\n     public void export(final OutputStream os) {\n         try {\n             exporter.export(os, wfAdapterLoader.getTablePrefix());\n-\n-            auditManager.audit(Category.configuration, ConfigurationSubCategory.dbExport, Result.success,\n-                    \"Successfully exported database content\");\n             LOG.debug(\"Database content successfully exported\");\n         } catch (Exception e) {\n-            auditManager.audit(Category.configuration, ConfigurationSubCategory.dbExport, Result.failure,\n-                    \"Could not export database content\", e);\n             LOG.error(\"While exporting database content\", e);\n         }\n     }\n-}\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected ConfigurationTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof ConfigurationTO) {\n+                    key = ((ConfigurationTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getConfigurationTO(confDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}\n\\ No newline at end of file"},{"sha":"62eba5a20a1ed654c9a1c95e3776a43d400fcbe1","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnectorController.java","status":"modified","additions":35,"deletions":62,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,26 +18,22 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.ConnBundleTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.ConnectorSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n@@ -60,10 +56,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class ConnectorController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class ConnectorController extends AbstractTransactionalController<ConnInstanceTO> {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -84,12 +77,7 @@ public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = binder.getConnInstance(connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n-            auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.success,\n-                    \"Successfully created connector instance: \" + connInstance.getDisplayName());\n         } catch (InvalidEntityException e) {\n-            auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n-                    \"Could not create connector instance: \" + connInstanceTO.getDisplayName(), e);\n-\n             SyncopeClientException invalidConnInstance = SyncopeClientException.build(\n                     ClientExceptionType.InvalidConnInstance);\n             invalidConnInstance.getElements().add(e.getMessage());\n@@ -106,12 +94,7 @@ public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = binder.updateConnInstance(connInstanceTO.getId(), connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n-            auditManager.audit(Category.connector, ConnectorSubCategory.update, Result.success,\n-                    \"Successfully update connector instance: \" + connInstance.getDisplayName());\n         } catch (InvalidEntityException e) {\n-            auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n-                    \"Could not update connector instance: \" + connInstanceTO.getDisplayName(), e);\n-\n             SyncopeClientException invalidConnInstance = SyncopeClientException.build(\n                     ClientExceptionType.InvalidConnInstance);\n             invalidConnInstance.getElements().add(e.getMessage());\n@@ -140,8 +123,6 @@ public ConnInstanceTO delete(final Long connInstanceId) {\n         ConnInstanceTO connToDelete = binder.getConnInstanceTO(connInstance);\n \n         connInstanceDAO.delete(connInstanceId);\n-        auditManager.audit(Category.connector, ConnectorSubCategory.delete, Result.success,\n-                \"Successfully deleted connector instance: \" + connInstanceId);\n \n         return connToDelete;\n     }\n@@ -167,9 +148,6 @@ public List<ConnInstanceTO> list(final String lang) {\n             }\n         }\n \n-        auditManager.audit(Category.connector, ConnectorSubCategory.list, Result.success,\n-                \"Successfully listed all connectors: \" + connInstanceTOs.size());\n-\n         return connInstanceTOs;\n     }\n \n@@ -181,9 +159,6 @@ public ConnInstanceTO read(final Long connInstanceId) {\n             throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n         }\n \n-        auditManager.audit(Category.connector, ConnectorSubCategory.read, Result.success,\n-                \"Successfully read connector: \" + connInstance.getDisplayName());\n-\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n@@ -234,9 +209,6 @@ public List<ConnBundleTO> getBundles(final String lang) {\n             }\n         }\n \n-        auditManager.audit(Category.connector, ConnectorSubCategory.getBundles, Result.success,\n-                \"Successfully listed all bundles: \" + connectorBundleTOs.size());\n-\n         return connectorBundleTOs;\n     }\n \n@@ -258,10 +230,6 @@ public List<String> getSchemaNames(final ConnInstanceTO connInstanceTO, final bo\n         final List<String> result = new ArrayList<String>(connFactory.createConnector(connInstance, conf).\n                 getSchemaNames(includeSpecial));\n \n-        auditManager.audit(Category.connector, ConnectorSubCategory.getSchemaNames, Result.success,\n-                \"Successfully listed \" + (includeSpecial ? \"all \" : \"\") + \"schema names (\" + result.size() + \") \"\n-                + \"for connector \" + connInstance.getDisplayName());\n-\n         return result;\n     }\n \n@@ -287,10 +255,6 @@ public List<String> getSupportedObjectClasses(final ConnInstanceTO connInstanceT\n             result.add(objectClass.getObjectClassValue());\n         }\n \n-        auditManager.audit(Category.connector, ConnectorSubCategory.getSupportedObjectClasses, Result.success,\n-                \"Successfully listed supported object classes (\" + result.size() + \") \"\n-                + \"for connector \" + connInstance.getDisplayName());\n-\n         return result;\n     }\n \n@@ -303,13 +267,7 @@ public List<ConnConfProperty> getConfigurationProperties(final Long connInstance\n             throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n         }\n \n-        List<ConnConfProperty> result = new ArrayList<ConnConfProperty>(connInstance.getConfiguration());\n-\n-        auditManager.audit(Category.connector, ConnectorSubCategory.getConfigurationProperties, Result.success,\n-                \"Successfully listed all conf properties (\" + result.size() + \") for connector \"\n-                + connInstance.getDisplayName());\n-\n-        return result;\n+        return new ArrayList<ConnConfProperty>(connInstance.getConfiguration());\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n@@ -322,13 +280,7 @@ public boolean check(final ConnInstanceTO connInstanceTO) {\n         try {\n             connector.test();\n             result = true;\n-\n-            auditManager.audit(Category.connector, ConnectorSubCategory.check, Result.success,\n-                    \"Successfully checked connector: \" + connInstanceTO);\n         } catch (Exception ex) {\n-            auditManager.audit(Category.connector, ConnectorSubCategory.check, Result.failure,\n-                    \"Unsuccessful check for connector: \" + connInstanceTO, ex);\n-\n             LOG.error(\"Test connection failure {}\", ex);\n             result = false;\n         }\n@@ -343,23 +295,14 @@ public ConnInstanceTO readByResource(final String resourceName) {\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n-\n-        final Connector connector = connFactory.getConnector(resource);\n-\n-        auditManager.audit(Category.connector, ConnectorSubCategory.readConnectorBean, Result.success,\n-                \"Successfully read connector for resource: \" + resourceName);\n-\n-        return binder.getConnInstanceTO(connector.getActiveConnInstance());\n+        return binder.getConnInstanceTO(connFactory.getConnector(resource).getActiveConnInstance());\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_RELOAD')\")\n     @Transactional(readOnly = true)\n     public void reload() {\n         connFactory.unload();\n         connFactory.load();\n-\n-        auditManager.audit(Category.connector, ConnectorSubCategory.reload, Result.success,\n-                \"Successfully reloaded all connector bundles and instances\");\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n@@ -381,4 +324,34 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n \n         return res;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected ConnInstanceTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof ConnInstanceTO) {\n+                    id = ((ConnInstanceTO) args[i]).getId();\n+                }\n+            }\n+        }\n+\n+        if (id != null) {\n+            try {\n+                return binder.getConnInstanceTO(connInstanceDAO.find(id));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"800d9948332da415c02dd37fa8b2e6ab80ccf01e","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/EntitlementController.java","status":"modified","additions":8,"deletions":14,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FEntitlementController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FEntitlementController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FEntitlementController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,25 +18,19 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n-\n-import org.apache.syncope.common.types.AuditElements.AuthenticationSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.common.to.EntitlementTO;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class EntitlementController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class EntitlementController extends AbstractTransactionalController<EntitlementTO> {\n \n     @Autowired\n     private EntitlementDAO entitlementDAO;\n@@ -52,11 +46,11 @@ public List<String> getAll() {\n     }\n \n     public Set<String> getOwn() {\n-        Set<String> result = EntitlementUtil.getOwnedEntitlementNames();\n-\n-        auditManager.audit(Category.authentication, AuthenticationSubCategory.getEntitlements, Result.success,\n-                \"Owned entitlements: \" + result.toString());\n+        return EntitlementUtil.getOwnedEntitlementNames();\n+    }\n \n-        return result;\n+    @Override\n+    protected EntitlementTO resolveReference(Method method, Object... args) throws UnresolvedReferenceException {\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"536a54c8b34d7d62214f320e9bb48c94fea53758","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":117,"deletions":21,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,43 +18,61 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n-import javax.ws.rs.core.Response;\n+import java.util.Set;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.Logger;\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.LoggerTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.LoggerSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.types.AuditLoggerName;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.types.LoggerLevel;\n import org.apache.syncope.common.types.LoggerType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n+import org.apache.syncope.common.types.ResourceOperation;\n+import org.apache.syncope.common.util.BeanUtils;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.SchedTask;\n+import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.SyncopeLogger;\n import org.apache.syncope.core.persistence.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n+import org.springframework.core.type.classreading.MetadataReader;\n+import org.springframework.core.type.classreading.MetadataReaderFactory;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.common.util.BeanUtils;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.SystemPropertyUtils;\n \n @Component\n-public class LoggerController extends AbstractController {\n+public class LoggerController extends AbstractTransactionalController<LoggerTO> {\n \n     @Autowired\n-    private AuditManager auditManager;\n+    private LoggerDAO loggerDAO;\n \n     @Autowired\n-    private LoggerDAO loggerDAO;\n+    private ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n \n     private List<LoggerTO> list(final LoggerType type) {\n         List<LoggerTO> result = new ArrayList<LoggerTO>();\n@@ -64,9 +82,6 @@ private List<LoggerTO> list(final LoggerType type) {\n             result.add(loggerTO);\n         }\n \n-        auditManager.audit(Category.logger, LoggerSubCategory.list, Result.success,\n-                \"Successfully listed all loggers (\" + type + \"): \" + result.size());\n-\n         return result;\n     }\n \n@@ -85,7 +100,7 @@ public List<AuditLoggerName> listAudits() {\n             try {\n                 result.add(AuditLoggerName.fromLoggerName(logger.getName()));\n             } catch (Exception e) {\n-                LOG.error(\"Unexpected audit logger name: {}\", logger.getName(), e);\n+                LOG.warn(\"Unexpected audit logger name: {}\", logger.getName(), e);\n             }\n         }\n \n@@ -128,9 +143,6 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n         LoggerTO result = new LoggerTO();\n         BeanUtils.copyProperties(syncopeLogger, result);\n \n-        auditManager.audit(Category.logger, LoggerSubCategory.setLevel, Result.success,\n-                String.format(\"Successfully set level %s to logger %s (%s)\", level, name, expectedType));\n-\n         return result;\n     }\n \n@@ -171,9 +183,6 @@ private LoggerTO delete(final String name, final LoggerType expectedType) throws\n         logger.setLevel(Level.OFF);\n         ctx.updateLoggers();\n \n-        auditManager.audit(Category.logger, LoggerSubCategory.setLevel, Result.success, String.format(\n-                \"Successfully deleted logger %s (%s)\", name, expectedType));\n-\n         return loggerToDelete;\n     }\n \n@@ -194,4 +203,91 @@ public void disableAudit(final AuditLoggerName auditLoggerName) {\n             throw sce;\n         }\n     }\n+\n+    @PreAuthorize(\"hasRole('AUDIT_LIST') or hasRole('NOTIFICATION_LIST')\")\n+    public List<EventCategoryTO> listAuditEvents() {\n+        // use set to avoi duplications or null elements\n+        final Set<EventCategoryTO> events = new HashSet<EventCategoryTO>();\n+\n+        try {\n+            final ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n+            final MetadataReaderFactory metadataReaderFactory =\n+                    new CachingMetadataReaderFactory(resourcePatternResolver);\n+\n+            final String packageSearchPath =\n+                    ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX\n+                    + ClassUtils.convertClassNameToResourcePath(\n+                    SystemPropertyUtils.resolvePlaceholders(this.getClass().getPackage().getName()))\n+                    + \"/\" + \"**/*.class\";\n+\n+            final Resource[] resources = resourcePatternResolver.getResources(packageSearchPath);\n+            for (Resource resource : resources) {\n+                if (resource.isReadable()) {\n+                    final MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource);\n+                    final Class<?> clazz = Class.forName(metadataReader.getClassMetadata().getClassName());\n+\n+                    if (clazz.isAnnotationPresent(Component.class)\n+                            && AbstractController.class.isAssignableFrom(clazz)) {\n+                        final EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+                        eventCategoryTO.setCategory(clazz.getSimpleName());\n+                        for (Method method : clazz.getDeclaredMethods()) {\n+                            if (Modifier.isPublic(method.getModifiers())) {\n+                                eventCategoryTO.getEvents().add(method.getName());\n+                            }\n+                        }\n+                        events.add(eventCategoryTO);\n+                    }\n+                }\n+            }\n+\n+            events.add(new EventCategoryTO(EventCategoryType.PROPAGATION));\n+            events.add(new EventCategoryTO(EventCategoryType.SYNCHRONIZATION));\n+\n+            for (AttributableType attributableType : AttributableType.values()) {\n+                for (ExternalResource resource : resourceDAO.findAll()) {\n+                    final EventCategoryTO propEventCategoryTO = new EventCategoryTO(EventCategoryType.PROPAGATION);\n+                    final EventCategoryTO syncEventCategoryTO = new EventCategoryTO(EventCategoryType.SYNCHRONIZATION);\n+\n+                    propEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n+                    propEventCategoryTO.setSubcategory(resource.getName());\n+\n+                    syncEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n+                    syncEventCategoryTO.setSubcategory(resource.getName());\n+\n+                    for (ResourceOperation resourceOperation : ResourceOperation.values()) {\n+                        propEventCategoryTO.getEvents().add(resourceOperation.name().toLowerCase());\n+                        syncEventCategoryTO.getEvents().add(resourceOperation.name().toLowerCase());\n+                    }\n+\n+                    events.add(propEventCategoryTO);\n+                    events.add(syncEventCategoryTO);\n+                }\n+            }\n+\n+            for (SchedTask task : taskDAO.findAll(SchedTask.class)) {\n+                final EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n+                eventCategoryTO.setCategory(Class.forName(task.getJobClassName()).getSimpleName());\n+                events.add(eventCategoryTO);\n+            }\n+\n+            for (SyncTask task : taskDAO.findAll(SyncTask.class)) {\n+                final EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n+                eventCategoryTO.setCategory(Class.forName(task.getJobClassName()).getSimpleName());\n+                events.add(eventCategoryTO);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Failure retrieving audit/notification events\", e);\n+        }\n+\n+        return new ArrayList<EventCategoryTO>(events);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected LoggerTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"a8680c40cd94f1213919f478868ce34e286b5f6d","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/NotificationController.java","status":"modified","additions":33,"deletions":28,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,15 +18,11 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n-\n-\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.NotificationTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.NotificationSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.Notification;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.NotificationDAO;\n@@ -36,10 +32,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class NotificationController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class NotificationController extends AbstractTransactionalController<NotificationTO> {\n \n     @Autowired\n     private NotificationDAO notificationDAO;\n@@ -68,22 +61,13 @@ public List<NotificationTO> list() {\n             notificationTOs.add(binder.getNotificationTO(notification));\n         }\n \n-        auditManager.audit(Category.notification, NotificationSubCategory.list, Result.success,\n-                \"Successfully listed all notifications: \" + notificationTOs.size());\n-\n         return notificationTOs;\n     }\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n     public NotificationTO create(final NotificationTO notificationTO) {\n         LOG.debug(\"Notification create called with parameter {}\", notificationTO);\n-\n-        Notification notification = notificationDAO.save(binder.createNotification(notificationTO));\n-\n-        auditManager.audit(Category.notification, NotificationSubCategory.create, Result.success,\n-                \"Successfully created notification: \" + notification.getId());\n-\n-        return binder.getNotificationTO(notification);\n+        return binder.getNotificationTO(notificationDAO.save(binder.createNotification(notificationTO)));\n     }\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_UPDATE')\")\n@@ -93,16 +77,12 @@ public NotificationTO update(final NotificationTO notificationTO) {\n         Notification notification = notificationDAO.find(notificationTO.getId());\n         if (notification == null) {\n             LOG.error(\"Could not find notification '\" + notificationTO.getId() + \"'\");\n-\n             throw new NotFoundException(String.valueOf(notificationTO.getId()));\n         }\n \n         binder.updateNotification(notification, notificationTO);\n         notification = notificationDAO.save(notification);\n \n-        auditManager.audit(Category.notification, NotificationSubCategory.update, Result.success,\n-                \"Successfully updated notification: \" + notification.getId());\n-\n         return binder.getNotificationTO(notification);\n     }\n \n@@ -116,12 +96,37 @@ public NotificationTO delete(final Long notificationId) {\n         }\n \n         NotificationTO notificationToDelete = binder.getNotificationTO(notification);\n+        notificationDAO.delete(notificationId);\n+        return notificationToDelete;\n+    }\n \n-        auditManager.audit(Category.notification, NotificationSubCategory.delete, Result.success,\n-                \"Successfully deleted notification: \" + notification.getId());\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected NotificationTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof NotificationTO) {\n+                    id = ((NotificationTO) args[i]).getId();\n+                }\n+            }\n+        }\n \n-        notificationDAO.delete(notificationId);\n+        if (id != null) {\n+            try {\n+                return binder.getNotificationTO(notificationDAO.find(id));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n \n-        return notificationToDelete;\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"7a0efdf2e0922ec198b72bca2756c703c879d609","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":33,"deletions":44,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,19 +18,16 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.PolicySubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.PolicyType;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n@@ -44,14 +41,11 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class PolicyController extends AbstractController {\n+public class PolicyController extends AbstractTransactionalController<AbstractPolicyTO> {\n \n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n \n-    @Autowired\n-    private AuditManager auditManager;\n-\n     @Autowired\n     private PolicyDAO policyDAO;\n \n@@ -61,24 +55,13 @@ public class PolicyController extends AbstractController {\n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     public <T extends AbstractPolicyTO> T create(final T policyTO) {\n         LOG.debug(\"Creating policy \" + policyTO);\n-\n-        final Policy policy = binder.getPolicy(null, policyTO);\n-\n-        auditManager.audit(Category.policy, PolicySubCategory.create, Result.success,\n-                \"Successfully created \" + policy.getType().toString() + \" policy: \" + policy.getId());\n-\n-        return binder.getPolicyTO(policyDAO.save(policy));\n+        return binder.getPolicyTO(policyDAO.save(binder.getPolicy(null, policyTO)));\n     }\n \n     private <T extends AbstractPolicyTO, K extends Policy> T update(final T policyTO, final K policy) {\n         LOG.debug(\"Updating policy \" + policyTO);\n-\n         binder.getPolicy(policy, policyTO);\n         K savedPolicy = policyDAO.save(policy);\n-\n-        auditManager.audit(Category.policy, PolicySubCategory.update, Result.success,\n-                \"Successfully updated policy (\" + savedPolicy.getType() + \"): \" + savedPolicy.getId());\n-\n         return binder.getPolicyTO(savedPolicy);\n     }\n \n@@ -124,9 +107,6 @@ public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n             policyTOs.add((T) binder.getPolicyTO(policy));\n         }\n \n-        auditManager.audit(Category.policy, PolicySubCategory.list, Result.success,\n-                \"Successfully listed all policies (\" + type + \"): \" + policyTOs.size());\n-\n         return policyTOs;\n     }\n \n@@ -139,9 +119,6 @@ public PasswordPolicyTO getGlobalPasswordPolicy() {\n             throw new NotFoundException(\"No password policy found\");\n         }\n \n-        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n-                \"Successfully read global password policy: \" + policy.getId());\n-\n         return (PasswordPolicyTO) binder.getPolicyTO(policy);\n     }\n \n@@ -154,9 +131,6 @@ public AccountPolicyTO getGlobalAccountPolicy() {\n             throw new NotFoundException(\"No account policy found\");\n         }\n \n-        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n-                \"Successfully read global account policy: \" + policy.getId());\n-\n         return (AccountPolicyTO) binder.getPolicyTO(policy);\n     }\n \n@@ -169,9 +143,6 @@ public SyncPolicyTO getGlobalSyncPolicy() {\n             throw new NotFoundException(\"No sync policy found\");\n         }\n \n-        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n-                \"Successfully read global sync policy: \" + policy.getId());\n-\n         return (SyncPolicyTO) binder.getPolicyTO(policy);\n     }\n \n@@ -184,9 +155,6 @@ public <T extends AbstractPolicyTO> T read(final Long id) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n         }\n \n-        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n-                \"Successfully read policy (\" + policy.getType() + \"): \" + policy.getId());\n-\n         return binder.getPolicyTO(policy);\n     }\n \n@@ -200,20 +168,41 @@ public <T extends AbstractPolicyTO> T delete(final Long id) {\n         T policyToDelete = binder.getPolicyTO(policy);\n         policyDAO.delete(policy);\n \n-        auditManager.audit(Category.policy, PolicySubCategory.delete, Result.success,\n-                \"Successfully deleted policy: \" + id);\n-\n         return policyToDelete;\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n     public Set<String> getSyncCorrelationRuleClasses() {\n-        final Set<String> correlationRules =\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_CORRELATION_RULES);\n+        return classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_CORRELATION_RULES);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected AbstractPolicyTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof AbstractPolicyTO) {\n+                    id = ((AbstractPolicyTO) args[i]).getId();\n+                }\n+            }\n+        }\n \n-        auditManager.audit(Category.policy, AuditElements.PolicySubCategory.getCorrelationRuleClasses,\n-                Result.success, \"Successfully listed all correlation rule classes: \" + correlationRules.size());\n+        if (id != null) {\n+            try {\n+                return binder.getPolicyTO(policyDAO.find(id));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n \n-        return correlationRules;\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"3e06c9a7f3ce77f07b40cfe63e3bbd181f0b13e5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":35,"deletions":56,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -20,6 +20,7 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.OutputStream;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n@@ -28,7 +29,6 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.zip.ZipInputStream;\n-import javax.ws.rs.core.Response;\n import org.apache.cocoon.optional.pipeline.components.sax.fop.FopSerializer;\n import org.apache.cocoon.pipeline.NonCachingPipeline;\n import org.apache.cocoon.pipeline.Pipeline;\n@@ -37,19 +37,14 @@\n import org.apache.cocoon.sax.component.XMLSerializer;\n import org.apache.cocoon.sax.component.XSLTTransformer;\n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.report.ReportletConf;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.ReportSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n-import static org.apache.syncope.common.types.ReportExecExportFormat.RTF;\n import org.apache.syncope.common.types.ReportExecStatus;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.beans.ReportExec;\n@@ -69,10 +64,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class ReportController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class ReportController extends AbstractTransactionalController<ReportTO> {\n \n     @Autowired\n     private ReportDAO reportDAO;\n@@ -107,9 +99,6 @@ public ReportTO create(final ReportTO reportTO) {\n             throw sce;\n         }\n \n-        auditManager.audit(Category.report, ReportSubCategory.create, Result.success,\n-                \"Successfully created report: \" + report.getId());\n-\n         return binder.getReportTO(report);\n     }\n \n@@ -135,9 +124,6 @@ public ReportTO update(final ReportTO reportTO) {\n             throw sce;\n         }\n \n-        auditManager.audit(Category.report, ReportSubCategory.update, Result.success,\n-                \"Successfully updated report: \" + report.getId());\n-\n         return binder.getReportTO(report);\n     }\n \n@@ -153,10 +139,6 @@ public List<ReportTO> list() {\n         for (Report report : reports) {\n             result.add(binder.getReportTO(report));\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.list, Result.success,\n-                \"Successfully listed all reports: \" + result.size());\n-\n         return result;\n     }\n \n@@ -167,10 +149,6 @@ public List<ReportTO> list(final int page, final int size) {\n         for (Report report : reports) {\n             result.add(binder.getReportTO(report));\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.list, Result.success,\n-                \"Successfully listed reports (page=\" + page + \", size=\" + size + \"): \" + result.size());\n-\n         return result;\n     }\n \n@@ -186,9 +164,6 @@ public Set<String> getReportletConfClasses() {\n             }\n         }\n \n-        auditManager.audit(Category.report, ReportSubCategory.getReportletConfClasses, Result.success,\n-                \"Successfully listed all ReportletConf classes: \" + reportletConfClasses.size());\n-\n         return reportletConfClasses;\n     }\n \n@@ -198,10 +173,6 @@ public ReportTO read(final Long reportId) {\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.read, Result.success,\n-                \"Successfully read report: \" + report.getId());\n-\n         return binder.getReportTO(report);\n     }\n \n@@ -212,10 +183,6 @@ public ReportExecTO readExecution(final Long executionId) {\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.readExecution, Result.success,\n-                \"Successfully read report execution: \" + reportExec.getId());\n-\n         return binder.getReportExecTO(reportExec);\n     }\n \n@@ -234,7 +201,7 @@ public void exportExecutionResult(final OutputStream os, final ReportExec report\n \n             Pipeline<SAXPipelineComponent> pipeline = new NonCachingPipeline<SAXPipelineComponent>();\n             pipeline.addComponent(new XMLGenerator(zis));\n-            \n+\n             Map<String, Object> parameters = new HashMap<String, Object>();\n             parameters.put(\"status\", reportExec.getStatus());\n             parameters.put(\"message\", reportExec.getMessage());\n@@ -285,9 +252,6 @@ public void exportExecutionResult(final OutputStream os, final ReportExec report\n             IOUtils.closeQuietly(zis);\n             IOUtils.closeQuietly(bais);\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.exportExecutionResult, Result.success,\n-                \"Successfully exported report execution: \" + reportExec.getId());\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n@@ -322,15 +286,9 @@ public ReportExecTO execute(final Long reportId) {\n \n             scheduler.getScheduler().triggerJob(\n                     new JobKey(JobInstanceLoader.getJobName(report), Scheduler.DEFAULT_GROUP));\n-\n-            auditManager.audit(Category.report, ReportSubCategory.execute, Result.success,\n-                    \"Successfully started execution for report: \" + report.getId());\n         } catch (Exception e) {\n             LOG.error(\"While executing report {}\", report, e);\n \n-            auditManager.audit(Category.report, ReportSubCategory.execute, Result.failure,\n-                    \"Could not start execution for report: \" + report.getId(), e);\n-\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Scheduling);\n             sce.getElements().add(e.getMessage());\n             throw sce;\n@@ -353,14 +311,8 @@ public ReportTO delete(final Long reportId) {\n         }\n \n         ReportTO deletedReport = binder.getReportTO(report);\n-\n         jobInstanceLoader.unregisterJob(report);\n-\n         reportDAO.delete(report);\n-\n-        auditManager.audit(Category.report, ReportSubCategory.delete, Result.success,\n-                \"Successfully deleted report: \" + report.getId());\n-\n         return deletedReport;\n     }\n \n@@ -372,12 +324,39 @@ public ReportExecTO deleteExecution(final Long executionId) {\n         }\n \n         ReportExecTO reportExecToDelete = binder.getReportExecTO(reportExec);\n-\n         reportExecDAO.delete(reportExec);\n+        return reportExecToDelete;\n+    }\n \n-        auditManager.audit(Category.report, ReportSubCategory.deleteExecution, Result.success,\n-                \"Successfully deleted report execution: \" + reportExec.getId());\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected ReportTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args) && (\"create\".equals(method.getName())\n+                || \"update\".equals(method.getName())\n+                || \"delete\".equals(method.getName()))) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof ReportTO) {\n+                    id = ((ReportTO) args[i]).getId();\n+                }\n+            }\n+        }\n \n-        return reportExecToDelete;\n+        if (id != null) {\n+            try {\n+                return binder.getReportTO(reportDAO.find(id));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"454b6a9a963823fbf8f631e626c52fc022d4bc64","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":33,"deletions":39,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,23 +18,20 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.EntityExistsException;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.ResourceSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n@@ -63,10 +60,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class ResourceController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class ResourceController extends AbstractTransactionalController<ResourceTO> {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -111,9 +105,6 @@ public ResourceTO create(final ResourceTO resourceTO) {\n \n         ExternalResource resource = resourceDAO.save(binder.create(resourceTO));\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.create, Result.success,\n-                \"Successfully created resource: \" + resource.getName());\n-\n         return binder.getResourceTO(resource);\n     }\n \n@@ -129,9 +120,6 @@ public ResourceTO update(final ResourceTO resourceTO) {\n         resource = binder.update(resource, resourceTO);\n         resource = resourceDAO.save(resource);\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.update, Result.success,\n-                \"Successfully updated resource: \" + resource.getName());\n-\n         return binder.getResourceTO(resource);\n     }\n \n@@ -144,9 +132,6 @@ public ResourceTO delete(final String resourceName) {\n \n         ResourceTO resourceToDelete = binder.getResourceTO(resource);\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.delete, Result.success,\n-                \"Successfully deleted resource: \" + resource.getName());\n-\n         resourceDAO.delete(resourceName);\n \n         return resourceToDelete;\n@@ -160,9 +145,6 @@ public ResourceTO read(final String resourceName) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.read, Result.success,\n-                \"Successfully read resource: \" + resource.getName());\n-\n         return binder.getResourceTO(resource);\n     }\n \n@@ -171,9 +153,6 @@ public Set<String> getPropagationActionsClasses() {\n         Set<String> actionsClasses = classNamesLoader.getClassNames(\n                 ImplementationClassNamesLoader.Type.PROPAGATION_ACTIONS);\n \n-        auditManager.audit(Category.resource, AuditElements.ResourceSubCategory.getPropagationActionsClasses,\n-                Result.success, \"Successfully listed all PropagationActions classes: \" + actionsClasses.size());\n-\n         return actionsClasses;\n     }\n \n@@ -191,11 +170,6 @@ public List<ResourceTO> list(final Long connInstanceId) {\n \n         List<ResourceTO> result = binder.getResourceTOs(resources);\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.list, Result.success,\n-                connInstanceId == null\n-                ? \"Successfully listed all resources: \" + result.size()\n-                : \"Successfully listed resources for connector \" + connInstanceId + \": \" + result.size());\n-\n         return result;\n     }\n \n@@ -253,10 +227,6 @@ public ConnObjectTO getConnectorObject(final String resourceName, final Attribut\n             attributes.add(connectorObject.getName());\n         }\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.getObject, Result.success,\n-                \"Successfully read object \" + accountIdValue + \" with class \" + objectClass\n-                + \" from resource \" + resourceName);\n-\n         return connObjectUtil.getConnObjectTO(connectorObject);\n     }\n \n@@ -271,13 +241,7 @@ public boolean check(final ResourceTO resourceTO) {\n         try {\n             connector.test();\n             result = true;\n-\n-            auditManager.audit(Category.connector, AuditElements.ConnectorSubCategory.check, Result.success,\n-                    \"Successfully checked connector: \" + resourceTO);\n         } catch (Exception e) {\n-            auditManager.audit(Category.connector, AuditElements.ConnectorSubCategory.check, Result.failure,\n-                    \"Unsuccessful check for connector: \" + resourceTO, e);\n-\n             LOG.error(\"Test connection failure {}\", e);\n             result = false;\n         }\n@@ -304,4 +268,34 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n \n         return res;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected ResourceTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        String name = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; name == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    name = (String) args[i];\n+                } else if (args[i] instanceof ResourceTO) {\n+                    name = ((ResourceTO) args[i]).getName();\n+                }\n+            }\n+        }\n+\n+        if (name != null) {\n+            try {\n+                return binder.getResourceTO(resourceDAO.find(name));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"64fa53c8d539d7b3553b8a0165ab853e6549b239","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":39,"deletions":52,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,24 +18,21 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import javax.annotation.Resource;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.RoleSubCategory;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -70,9 +67,6 @@ public class RoleController extends AbstractResourceAssociator<RoleTO> {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(RoleController.class);\n \n-    @Autowired\n-    protected AuditManager auditManager;\n-\n     @Autowired\n     protected RoleDAO roleDAO;\n \n@@ -115,9 +109,6 @@ public RoleTO read(final Long roleId) {\n             throw new NotFoundException(\"Role \" + roleId);\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.read, Result.success,\n-                \"Successfully read role: \" + role.getId());\n-\n         return binder.getRoleTO(role);\n     }\n \n@@ -145,9 +136,6 @@ public RoleTO readSelf(final Long roleId) {\n             throw new UnauthorizedRoleException(role.getId());\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.selfRead, Result.success,\n-                \"Successfully read own role: \" + role.getId());\n-\n         return binder.getRoleTO(role);\n     }\n \n@@ -165,11 +153,6 @@ public RoleTO parent(final Long roleId) {\n                 ? null\n                 : binder.getRoleTO(role.getParent());\n \n-        auditManager.audit(Category.role, RoleSubCategory.parent, Result.success,\n-                result == null\n-                ? \"Role \" + role.getId() + \" is a root role\"\n-                : \"Found parent for role \" + role.getId() + \": \" + result.getId());\n-\n         return result;\n     }\n \n@@ -188,22 +171,19 @@ public List<RoleTO> children(final Long roleId) {\n             }\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.children, Result.success,\n-                \"Found \" + childrenTOs.size() + \" children of role \" + roleId);\n-\n         return childrenTOs;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<RoleTO> search(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         return search(searchCondition, -1, -1);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size)\n             throws InvalidSearchConditionException {\n \n@@ -223,14 +203,11 @@ public List<RoleTO> search(final NodeCond searchCondition, final int page, final\n             result.add(binder.getRoleTO(role));\n         }\n \n-        auditManager.audit(Category.role, AuditElements.RoleSubCategory.read, Result.success,\n-                \"Successfully searched for roles (page=\" + page + \", size=\" + size + \"): \" + result.size());\n-\n         return result;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public int searchCount(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n@@ -253,9 +230,6 @@ public List<RoleTO> list() {\n             roleTOs.add(binder.getRoleTO(role));\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.list, Result.success,\n-                \"Successfully listed all roles: \" + roleTOs.size());\n-\n         return roleTOs;\n     }\n \n@@ -295,9 +269,6 @@ public RoleTO create(final RoleTO roleTO) {\n \n         LOG.debug(\"About to return created role\\n{}\", savedTO);\n \n-        auditManager.audit(Category.role, RoleSubCategory.create, Result.success,\n-                \"Successfully created role: \" + savedTO.getId());\n-\n         return savedTO;\n     }\n \n@@ -330,9 +301,6 @@ public RoleTO update(final RoleMod roleMod) {\n         final RoleTO updatedTO = binder.getRoleTO(updated.getResult());\n         updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n-        auditManager.audit(Category.role, RoleSubCategory.update, Result.success,\n-                \"Successfully updated role: \" + role.getId());\n-\n         LOG.debug(\"About to return updated role\\n{}\", updatedTO);\n \n         return updatedTO;\n@@ -349,9 +317,6 @@ public RoleTO delete(final Long roleId) {\n                 owned.add(role.getId() + \" \" + role.getName());\n             }\n \n-            auditManager.audit(Category.role, AuditElements.UserSubCategory.delete, Result.failure,\n-                    \"Could not delete role: \" + roleId + \" because of role(s) ownership \" + owned);\n-\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RoleOwnership);\n             sce.getElements().addAll(owned);\n             throw sce;\n@@ -382,16 +347,13 @@ public RoleTO delete(final Long roleId) {\n \n         rwfAdapter.delete(roleId);\n \n-        auditManager.audit(Category.role, RoleSubCategory.delete, Result.success,\n-                \"Successfully deleted role: \" + roleId);\n-\n         LOG.debug(\"Role successfully deleted: {}\", roleId);\n \n         return roleTO;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     @Override\n     public RoleTO unlink(final Long roleId, final Collection<String> resources) {\n         LOG.debug(\"About to unlink role({}) and resources {}\", roleId, resources);\n@@ -405,16 +367,13 @@ public RoleTO unlink(final Long roleId, final Collection<String> resources) {\n \n         final RoleTO updatedTO = binder.getRoleTO(updated.getResult());\n \n-        auditManager.audit(Category.user, AuditElements.RoleSubCategory.update, Result.success,\n-                \"Successfully updated role: \" + updatedTO.getName());\n-\n         LOG.debug(\"About to return updated role\\n{}\", updatedTO);\n \n         return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     @Override\n     public RoleTO unassign(final Long roleId, final Collection<String> resources) {\n         LOG.debug(\"About to unassign role({}) and resources {}\", roleId, resources);\n@@ -427,7 +386,7 @@ public RoleTO unassign(final Long roleId, final Collection<String> resources) {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     @Override\n     public RoleTO deprovision(final Long roleId, final Collection<String> resources) {\n         LOG.debug(\"About to deprovision role({}) from resources {}\", roleId, resources);\n@@ -450,11 +409,39 @@ public RoleTO deprovision(final Long roleId, final Collection<String> resources)\n         final RoleTO updatedTO = binder.getRoleTO(role);\n         updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n-        auditManager.audit(Category.user, AuditElements.RoleSubCategory.update, Result.success,\n-                \"Successfully deprovisioned role: \" + updatedTO.getName());\n-\n         LOG.debug(\"About to return updated role\\n{}\", updatedTO);\n \n         return updatedTO;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected RoleTO resolveReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof RoleTO) {\n+                    id = ((RoleTO) args[i]).getId();\n+                } else if (args[i] instanceof RoleMod) {\n+                    id = ((RoleMod) args[i]).getId();\n+                }\n+            }\n+        }\n+\n+        if (id != null) {\n+            try {\n+                return binder.getRoleTO(id);\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"c84a551ab6a62979c9558c681aafb92f36a7d928","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":40,"deletions":31,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,20 +18,20 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.EntityExistsException;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.AbstractSchemaTO;\n import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.ClientExceptionType;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.persistence.beans.AbstractNormalSchema;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n@@ -46,10 +46,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class SchemaController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class SchemaController extends AbstractTransactionalController<SchemaTO> {\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n@@ -109,10 +106,8 @@ public <T extends AbstractSchemaTO> T create(final AttributableType attrType, fi\n                 AbstractVirSchema virSchema = attrUtil.newVirSchema();\n                 binder.create((VirSchemaTO) schemaTO, virSchema);\n                 virSchema = virSchemaDAO.save(virSchema);\n-\n                 created = (T) binder.getVirSchemaTO(virSchema);\n                 break;\n-\n             case DERIVED:\n                 AbstractDerSchema derSchema = attrUtil.newDerSchema();\n                 binder.create((DerSchemaTO) schemaTO, derSchema);\n@@ -129,11 +124,6 @@ public <T extends AbstractSchemaTO> T create(final AttributableType attrType, fi\n \n                 created = (T) binder.getSchemaTO(normalSchema, attrUtil);\n         }\n-\n-        auditManager.audit(AuditElements.Category.schema, AuditElements.SchemaSubCategory.create,\n-                AuditElements.Result.success,\n-                \"Successfully created schema: \" + schemaType + \"/\" + attrType + \"/\" + created.getName());\n-\n         return created;\n     }\n \n@@ -158,10 +148,6 @@ public void delete(final AttributableType attrType, final SchemaType schemaType,\n             default:\n                 schemaDAO.delete(schemaName, attrUtil);\n         }\n-\n-        auditManager.audit(AuditElements.Category.schema, AuditElements.SchemaSubCategory.delete,\n-                AuditElements.Result.success,\n-                \"Successfully deleted schema: \" + schemaType + \"/\" + attrType + \"/\" + schemaName);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -196,17 +182,13 @@ public <T extends AbstractSchemaTO> List<T> list(final AttributableType attrType\n                 }\n         }\n \n-        auditManager.audit(AuditElements.Category.schema, AuditElements.SchemaSubCategory.list,\n-                AuditElements.Result.success,\n-                \"Successfully listed schemas: \" + schemaType + \"/\" + attrType + \" \" + result.size());\n-\n         return result;\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_READ')\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractSchemaTO> T read(final AttributableType attrType, final SchemaType schemaType,\n-            final String schemaName) {\n+    public <T extends AbstractSchemaTO> T read(\n+            final AttributableType attrType, final SchemaType schemaType, final String schemaName) {\n \n         final AttributableUtil attrUtil = AttributableUtil.getInstance(attrType);\n \n@@ -240,10 +222,6 @@ public <T extends AbstractSchemaTO> T read(final AttributableType attrType, fina\n                 read = (T) binder.getSchemaTO(schema, attrUtil);\n         }\n \n-        auditManager.audit(AuditElements.Category.schema, AuditElements.SchemaSubCategory.read,\n-                AuditElements.Result.success,\n-                \"Successfully read schema: \" + schemaType + \"/\" + attrType + \"/\" + schemaName);\n-\n         return read;\n     }\n \n@@ -288,9 +266,40 @@ public <T extends AbstractSchemaTO> void update(final AttributableType attrType,\n                 binder.update((SchemaTO) schemaTO, schema, attrUtil);\n                 schemaDAO.save(schema);\n         }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected SchemaTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        String kind = null;\n+        String name = null;\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; (name == null || kind == null) && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    if (kind == null) {\n+                        kind = (String) args[i];\n+                    } else {\n+                        name = (String) args[i];\n+                    }\n+                } else if (args[i] instanceof SchemaTO) {\n+                    name = ((SchemaTO) args[i]).getName();\n+                }\n+            }\n+        }\n+\n+        if (name != null) {\n+            try {\n+                final AttributableUtil attrUtil = AttributableUtil.valueOf(kind);\n+                return binder.getSchemaTO(schemaDAO.find(name, attrUtil.schemaClass()), attrUtil);\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n \n-        auditManager.audit(AuditElements.Category.schema, AuditElements.SchemaSubCategory.update,\n-                AuditElements.Result.success,\n-                \"Successfully updated schema: \" + schemaType + \"/\" + attrType + \"/\" + schemaName);\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"e640244bd24f6eeba79d0e2284d3215baf20a6d4","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":41,"deletions":69,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,26 +18,23 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.TaskSubCategory;\n import org.apache.syncope.common.types.PropagationMode;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.types.TaskType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.notification.NotificationJob;\n@@ -62,10 +59,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class TaskController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class TaskController extends AbstractTransactionalController<AbstractTaskTO> {\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -110,9 +104,6 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n             throw sce;\n         }\n \n-        auditManager.audit(Category.task, TaskSubCategory.create, Result.success,\n-                \"Successfully created task: \" + task.getId() + \"/\" + taskUtil);\n-\n         return binder.getTaskTO(task, taskUtil);\n     }\n \n@@ -145,9 +136,6 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n             throw sce;\n         }\n \n-        auditManager.audit(Category.task, TaskSubCategory.update, Result.success,\n-                \"Successfully udpated task: \" + task.getId() + \"/\" + taskUtil);\n-\n         return binder.getTaskTO(task, taskUtil);\n     }\n \n@@ -167,9 +155,6 @@ public <T extends AbstractTaskTO> List<T> list(final TaskType taskType) {\n             taskTOs.add((T) binder.getTaskTO(task, taskUtil));\n         }\n \n-        auditManager.audit(Category.task, TaskSubCategory.list, Result.success,\n-                \"Successfully listed all tasks: \" + taskTOs.size() + \"/\" + taskUtil);\n-\n         return taskTOs;\n     }\n \n@@ -184,31 +169,17 @@ public <T extends AbstractTaskTO> List<T> list(final TaskType taskType, final in\n             taskTOs.add((T) binder.getTaskTO(task, taskUtil));\n         }\n \n-        auditManager.audit(Category.task, TaskSubCategory.list, Result.success,\n-                \"Successfully listed all tasks (page=\" + page + \", size=\" + size + \"): \"\n-                + taskTOs.size() + \"/\" + taskUtil);\n-\n         return taskTOs;\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     public Set<String> getJobClasses() {\n-        Set<String> jobClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.TASKJOB);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.getJobClasses, Result.success,\n-                \"Successfully listed all Job classes: \" + jobClasses.size());\n-\n-        return jobClasses;\n-    }\n+        return classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.TASKJOB);\n+        }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     public Set<String> getSyncActionsClasses() {\n-        Set<String> actionsClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_ACTIONS);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.getSyncActionsClasses, Result.success,\n-                \"Successfully listed all SyncActions classes: \" + actionsClasses.size());\n-\n-        return actionsClasses;\n+        return classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_ACTIONS);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n@@ -217,24 +188,15 @@ public <T extends AbstractTaskTO> T read(final Long taskId) {\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n-        TaskUtil taskUtil = TaskUtil.getInstance(task);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.read, Result.success,\n-                \"Successfully read task: \" + task.getId() + \"/\" + taskUtil);\n-\n-        return binder.getTaskTO(task, taskUtil);\n-    }\n+        return binder.getTaskTO(task, TaskUtil.getInstance(task));\n+}\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     public TaskExecTO readExecution(final Long executionId) {\n         TaskExec taskExec = taskExecDAO.find(executionId);\n         if (taskExec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n-\n-        auditManager.audit(Category.task, TaskSubCategory.readExecution, Result.success,\n-                \"Successfully read task execution: \" + taskExec.getId());\n-\n         return binder.getTaskExecTO(taskExec);\n     }\n \n@@ -274,9 +236,6 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n                 } catch (Exception e) {\n                     LOG.error(\"While executing task {}\", task, e);\n \n-                    auditManager.audit(Category.task, TaskSubCategory.execute, Result.failure,\n-                            \"Could not start execution for task: \" + task.getId() + \"/\" + taskUtil, e);\n-\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Scheduling);\n                     sce.getElements().add(e.getMessage());\n                     throw sce;\n@@ -292,10 +251,6 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n             default:\n         }\n         LOG.debug(\"Execution finished for {}, {}\", task, result);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.execute, Result.success,\n-                \"Successfully started execution for task: \" + task.getId() + \"/\" + taskUtil);\n-\n         return result;\n     }\n \n@@ -334,19 +289,12 @@ public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus\n         }\n \n         if (!sce.isEmpty()) {\n-            auditManager.audit(Category.task, TaskSubCategory.report, Result.failure,\n-                    \"Could not reported execution status: \" + exec.getId() + \"/\" + taskUtil, sce);\n             throw sce;\n         }\n \n         exec.setStatus(status.toString());\n         exec.setMessage(message);\n-        exec = taskExecDAO.save(exec);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.report, Result.success,\n-                \"Successfully reported execution status: \" + exec.getId() + \"/\" + taskUtil);\n-\n-        return binder.getTaskExecTO(exec);\n+        return binder.getTaskExecTO(taskExecDAO.save(exec));\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n@@ -364,10 +312,6 @@ public <T extends AbstractTaskTO> T delete(final Long taskId) {\n         }\n \n         taskDAO.delete(task);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.delete, Result.success,\n-                \"Successfully deleted task: \" + task.getId() + \"/\" + taskUtil);\n-\n         return taskToDelete;\n     }\n \n@@ -379,11 +323,7 @@ public TaskExecTO deleteExecution(final Long executionId) {\n         }\n \n         TaskExecTO taskExecutionToDelete = binder.getTaskExecTO(taskExec);\n-\n         taskExecDAO.delete(taskExec);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.deleteExecution, Result.success,\n-                \"Successfully deleted task execution: \" + taskExec.getId());\n         return taskExecutionToDelete;\n     }\n \n@@ -437,4 +377,36 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n \n         return res;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected AbstractTaskTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)\n+                && !\"deleteExecution\".equals(method.getName()) && !\"readExecution\".equals(method.getName())) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof AbstractTaskTO) {\n+                    id = ((AbstractTaskTO) args[i]).getId();\n+                }\n+            }\n+        }\n+\n+        if (id != null) {\n+            try {\n+                final Task task = taskDAO.find(id);\n+                return binder.getTaskTO(task, TaskUtil.getInstance(task));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"7cd08e4921939af5cbbf92eae6df10ce6ee59ba6","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UnresolvedReferenceException.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.rest.controller;\n+\n+/**\n+ * Indicates unresolved bean reference.\n+ */\n+public class UnresolvedReferenceException extends Exception {\n+\n+    private static final long serialVersionUID = -675489116009955632L;\n+\n+    public UnresolvedReferenceException() {\n+    }\n+\n+    public UnresolvedReferenceException(Throwable cause) {\n+        super(cause);\n+    }\n+}"},{"sha":"91452c52cf23633ec94fb9f63bd31e0cd5fd1efb","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":58,"deletions":81,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,15 +18,16 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.security.AccessControlException;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n@@ -36,16 +37,9 @@\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.UserSubCategory;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n-import org.apache.syncope.core.persistence.beans.SyncopeConf;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n@@ -84,9 +78,6 @@ public class UserController extends AbstractResourceAssociator<UserTO> {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(UserController.class);\n \n-    @Autowired\n-    protected AuditManager auditManager;\n-\n     @Autowired\n     protected UserDAO userDAO;\n \n@@ -114,16 +105,8 @@ public class UserController extends AbstractResourceAssociator<UserTO> {\n     @Autowired\n     protected AttributableTransformer attrTransformer;\n \n-    @Autowired\n-    protected NotificationManager notificationManager;\n-\n     public boolean isSelfRegistrationAllowed() {\n-        final SyncopeConf selfRegistrationAllowed = confDAO.find(\"selfRegistration.allowed\", \"false\");\n-\n-        auditManager.audit(Category.user, AuditElements.UserSubCategory.selfRegistrationAllowed, Result.success,\n-                \"Successfully checked whether self registration is allowed\");\n-\n-        return Boolean.valueOf(selfRegistrationAllowed.getValue());\n+        return Boolean.valueOf(confDAO.find(\"selfRegistration.allowed\", \"false\").getValue());\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n@@ -137,13 +120,13 @@ public Long getUserId(final String username) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public int count() {\n         return userDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public int searchCount(final NodeCond searchCondition) throws InvalidSearchConditionException {\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n@@ -155,7 +138,7 @@ public int searchCount(final NodeCond searchCondition) throws InvalidSearchCondi\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> list() {\n         List<SyncopeUser> users = userDAO.findAll(\n                 EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n@@ -165,14 +148,11 @@ public List<UserTO> list() {\n             userTOs.add(binder.getUserTO(user));\n         }\n \n-        auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n-                \"Successfully listed all users: \" + userTOs.size());\n-\n         return userTOs;\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> list(final int page, final int size) {\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n@@ -182,45 +162,32 @@ public List<UserTO> list(final int page, final int size) {\n             userTOs.add(binder.getUserTO(user));\n         }\n \n-        auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n-                \"Successfully listed all users (page=\" + page + \", size=\" + size + \"): \" + userTOs.size());\n-\n         return userTOs;\n     }\n \n     @PreAuthorize(\"isAuthenticated() \"\n             + \"and not(hasRole(T(org.apache.syncope.common.SyncopeConstants).ANONYMOUS_ENTITLEMENT))\")\n     @Transactional(readOnly = true)\n     public UserTO readSelf() {\n-        UserTO userTO = binder.getAuthenticatedUserTO();\n-\n-        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n-                \"Successfully read own data: \" + userTO.getUsername());\n-\n-        return userTO;\n+        return binder.getAuthenticatedUserTO();\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public UserTO read(final Long userId) {\n-        UserTO result = binder.getUserTO(userId);\n-\n-        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n-                \"Successfully read user: \" + userId);\n-\n-        return result;\n+        return binder.getUserTO(userId);\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> search(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         return search(searchCondition, -1, -1);\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> search(final NodeCond searchCondition, final int page, final int size)\n             throws InvalidSearchConditionException {\n \n@@ -240,9 +207,6 @@ public List<UserTO> search(final NodeCond searchCondition, final int page, final\n             result.add(binder.getUserTO(user));\n         }\n \n-        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n-                \"Successfully searched for users (page=\" + page + \", size=\" + size + \"): \" + result.size());\n-\n         return result;\n     }\n \n@@ -294,16 +258,11 @@ protected UserTO doCreate(final UserTO userTO) {\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n-\n         final UserTO savedTO = binder.getUserTO(created.getResult().getKey());\n         savedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n         LOG.debug(\"About to return created user\\n{}\", savedTO);\n \n-        auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n-                \"Successfully created user: \" + savedTO.getUsername());\n-\n         return savedTO;\n     }\n \n@@ -342,14 +301,9 @@ public UserTO update(final UserMod userMod) {\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        notificationManager.createTasks(updated.getResult().getKey().getId(), updated.getPerformedTasks());\n-\n         final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey().getId());\n         updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n-        auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n-                \"Successfully updated user: \" + updatedTO.getUsername());\n-\n         LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n \n         return updatedTO;\n@@ -378,7 +332,7 @@ protected WorkflowResult<Long> setStatusOnWfAdapter(final SyncopeUser user, fina\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO status(final StatusMod statusMod) {\n         LOG.debug(\"About to mod status {}\", statusMod);\n \n@@ -397,14 +351,17 @@ public UserTO status(final StatusMod statusMod) {\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                 user, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n-        taskExecutor.execute(tasks);\n-\n-        notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n+        PropagationReporter propReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propReporter.onPrimaryResourceFailure(tasks);\n+        }\n \n         final UserTO savedTO = binder.getUserTO(updated.getResult());\n-\n-        auditManager.audit(Category.user, UserSubCategory.setStatus, Result.success,\n-                \"Successfully changed status to \" + savedTO.getStatus() + \" for user: \" + savedTO.getUsername());\n+        savedTO.getPropagationStatusTOs().addAll(propReporter.getStatuses());\n \n         LOG.debug(\"About to return updated user\\n{}\", savedTO);\n \n@@ -430,9 +387,6 @@ public UserTO delete(final Long userId) {\n                 owned.add(role.getId() + \" \" + role.getName());\n             }\n \n-            auditManager.audit(Category.user, UserSubCategory.delete, Result.failure,\n-                    \"Could not delete user: \" + userId + \" because of role(s) ownership \" + owned);\n-\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RoleOwnership);\n             sce.getElements().addAll(owned);\n             throw sce;\n@@ -443,7 +397,6 @@ public UserTO delete(final Long userId) {\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        notificationManager.createTasks(userId, Collections.singleton(\"delete\"));\n \n         List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId);\n \n@@ -468,9 +421,6 @@ public UserTO delete(final Long userId) {\n         }\n         deletedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n-        auditManager.audit(Category.user, UserSubCategory.delete, Result.success,\n-                \"Successfully deleted user: \" + userId);\n-\n         LOG.debug(\"User successfully deleted: {}\", userId);\n \n         return deletedTO;\n@@ -532,7 +482,7 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     @Override\n     public UserTO unlink(final Long userId, final Collection<String> resources) {\n         LOG.debug(\"About to unlink user({}) and resources {}\", userId, resources);\n@@ -546,16 +496,13 @@ public UserTO unlink(final Long userId, final Collection<String> resources) {\n \n         final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey().getId());\n \n-        auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n-                \"Successfully updated user: \" + updatedTO.getUsername());\n-\n         LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n \n         return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     @Override\n     public UserTO unassign(final Long userId, final Collection<String> resources) {\n         LOG.debug(\"About to unassign user({}) and resources {}\", userId, resources);\n@@ -568,7 +515,7 @@ public UserTO unassign(final Long userId, final Collection<String> resources) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     @Override\n     public UserTO deprovision(final Long userId, final Collection<String> resources) {\n         LOG.debug(\"About to deprovision user({}) from resources {}\", userId, resources);\n@@ -591,11 +538,41 @@ public UserTO deprovision(final Long userId, final Collection<String> resources)\n         final UserTO updatedUserTO = binder.getUserTO(user);\n         updatedUserTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n-        auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n-                \"Successfully deprovisioned user: \" + updatedUserTO.getUsername());\n-\n         LOG.debug(\"About to return updated user\\n{}\", updatedUserTO);\n \n         return updatedUserTO;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected UserTO resolveReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n+        Object id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof String) {\n+                    id = (String) args[i];\n+                } else if (args[i] instanceof UserTO) {\n+                    id = ((UserTO) args[i]).getId();\n+                } else if (args[i] instanceof UserMod) {\n+                    id = ((UserMod) args[i]).getId();\n+                }\n+            }\n+        }\n+\n+        if (id != null) {\n+            try {\n+                return id instanceof Long ? binder.getUserTO((Long) id) : binder.getUserTO((String) id);\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"9136702126e594c360945d8ae8d3b987263fbc72","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserWorkflowController.java","status":"modified","additions":23,"deletions":59,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,16 +18,14 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.AbstractMap;\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.common.mod.AbstractAttributableMod;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n@@ -42,10 +40,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class UserWorkflowController extends AbstractController {\n-\n-    @Autowired\n-    protected AuditManager auditManager;\n+public class UserWorkflowController extends AbstractTransactionalController<WorkflowFormTO> {\n \n     @Autowired\n     protected UserWorkflowAdapter uwfAdapter;\n@@ -56,23 +51,14 @@ public class UserWorkflowController extends AbstractController {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected NotificationManager notificationManager;\n-\n     @Autowired\n     protected UserDataBinder binder;\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public WorkflowFormTO claimForm(final String taskId) {\n-        WorkflowFormTO result = uwfAdapter.claimForm(taskId,\n+        return uwfAdapter.claimForm(taskId,\n                 SecurityContextHolder.getContext().getAuthentication().getName());\n-\n-        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.claimForm,\n-                AuditElements.Result.success,\n-                \"Successfully claimed workflow form: \" + taskId);\n-\n-        return result;\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n@@ -86,64 +72,40 @@ public UserTO executeWorkflow(final UserTO userTO, final String taskId) {\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                 new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                        new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, null),\n-                        updated.getPropByRes(), updated.getPerformedTasks()));\n+                new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, null),\n+                updated.getPropByRes(), updated.getPerformedTasks()));\n \n         taskExecutor.execute(tasks);\n \n-        notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n-\n         final UserTO savedTO = binder.getUserTO(updated.getResult());\n \n         LOG.debug(\"About to return updated user\\n{}\", savedTO);\n \n-        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.executeWorkflow,\n-                AuditElements.Result.success,\n-                \"Successfully executed workflow action \" + taskId + \" on user: \" + userTO.getUsername());\n-\n         return savedTO;\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public WorkflowFormTO getFormForUser(final Long userId) {\n         SyncopeUser user = binder.getUserFromId(userId);\n-        WorkflowFormTO result = uwfAdapter.getForm(user.getWorkflowId());\n-\n-        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.getFormForUser,\n-                AuditElements.Result.success,\n-                \"Successfully read workflow form for user: \" + user.getUsername());\n-\n-        return result;\n+        return uwfAdapter.getForm(user.getWorkflowId());\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public List<WorkflowFormTO> getForms() {\n-        List<WorkflowFormTO> forms = uwfAdapter.getForms();\n-\n-        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.getForms,\n-                AuditElements.Result.success,\n-                \"Successfully list workflow forms: \" + forms.size());\n-\n-        return forms;\n+        return uwfAdapter.getForms();\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public List<WorkflowFormTO> getForms(final Long userId, final String formName) {\n         SyncopeUser user = binder.getUserFromId(userId);\n-        final List<WorkflowFormTO> result = uwfAdapter.getForms(user.getWorkflowId(), formName);\n-\n-        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.getFormForUser,\n-                AuditElements.Result.success,\n-                \"Successfully read workflow form for user: \" + user.getUsername());\n-\n-        return result;\n+        return uwfAdapter.getForms(user.getWorkflowId(), formName);\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO submitForm(final WorkflowFormTO form) {\n         LOG.debug(\"About to process form {}\", form);\n \n@@ -157,21 +119,23 @@ public UserTO submitForm(final WorkflowFormTO form) {\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                     new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                            new AbstractMap.SimpleEntry<UserMod, Boolean>((UserMod) updated.getResult(), Boolean.TRUE),\n-                            updated.getPropByRes(),\n-                            updated.getPerformedTasks()));\n+                    new AbstractMap.SimpleEntry<UserMod, Boolean>((UserMod) updated.getResult(), Boolean.TRUE),\n+                    updated.getPropByRes(),\n+                    updated.getPerformedTasks()));\n \n             taskExecutor.execute(tasks);\n         }\n \n-        UserTO savedTO = binder.getUserTO(updated.getResult().getId());\n-\n-        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.submitForm,\n-                AuditElements.Result.success,\n-                \"Successfully submitted workflow form for : \" + savedTO.getUsername());\n+        final UserTO savedTO = binder.getUserTO(updated.getResult().getId());\n \n         LOG.debug(\"About to return user after form processing\\n{}\", savedTO);\n \n         return savedTO;\n     }\n+\n+    @Override\n+    protected WorkflowFormTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"2cd45162e87b853a0ab8c8a744a291e77eb63f6d","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/WorkflowController.java","status":"modified","additions":10,"deletions":38,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -19,13 +19,9 @@\n package org.apache.syncope.core.rest.controller;\n \n import java.io.OutputStream;\n-import java.util.List;\n+import java.lang.reflect.Method;\n import javax.ws.rs.core.MediaType;\n-\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.WorkflowSubCategory;\n-import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.common.AbstractBaseBean;\n import org.apache.syncope.core.workflow.WorkflowAdapter;\n import org.apache.syncope.core.workflow.WorkflowDefinitionFormat;\n import org.apache.syncope.core.workflow.WorkflowException;\n@@ -37,10 +33,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class WorkflowController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class WorkflowController extends AbstractTransactionalController<AbstractBaseBean> {\n \n     @Autowired\n     private UserWorkflowAdapter uwfAdapter;\n@@ -53,9 +46,6 @@ private void exportDefinition(\n             throws WorkflowException {\n \n         adapter.exportDefinition(format, os);\n-\n-        auditManager.audit(Category.workflow, WorkflowSubCategory.exportDefinition, Result.success,\n-                \"Successfully exported workflow definition\");\n     }\n \n     private WorkflowDefinitionFormat getFormat(final MediaType format) {\n@@ -82,11 +72,7 @@ public void exportRoleDefinition(final MediaType format, final OutputStream os)\n \n     private void exportDiagram(final WorkflowAdapter adapter, final OutputStream os)\n             throws WorkflowException {\n-\n         adapter.exportDiagram(os);\n-\n-        auditManager.audit(Category.workflow, WorkflowSubCategory.exportDiagram, Result.success,\n-                \"Successfully export workflow diagram\");\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n@@ -107,11 +93,7 @@ public void exportRoleDiagram(final OutputStream os)\n \n     private void importDefinition(\n             final WorkflowAdapter adapter, final WorkflowDefinitionFormat format, final String definition) {\n-\n         adapter.importDefinition(format, definition);\n-\n-        auditManager.audit(Category.workflow, WorkflowSubCategory.importDefinition, Result.success,\n-                \"Successfully imported workflow definition\");\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n@@ -124,22 +106,12 @@ public void importRoleDefinition(final MediaType format, final String definition\n         importDefinition(rwfAdapter, getFormat(format), definition);\n     }\n \n-    private List<String> getDefinedTasks(final WorkflowAdapter adapter) {\n-        List<String> definedTasks = adapter.getDefinedTasks();\n-\n-        auditManager.audit(Category.workflow, WorkflowSubCategory.getDefinedTasks, Result.success,\n-                \"Successfully got the list of defined workflow tasks: \" + definedTasks.size());\n-\n-        return definedTasks;\n-    }\n-\n-    @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n-    public List<String> getDefinedUserTasks() {\n-        return getDefinedTasks(uwfAdapter);\n-    }\n-\n-    @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n-    public List<String> getDefinedRoleTasks() {\n-        return getDefinedTasks(rwfAdapter);\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected AbstractBaseBean resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"fa25b4e17c3e9ebb65133e8f6f85831c18414206","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -191,7 +191,7 @@ private <T extends AbstractVirSchema> T getVirSchema(final String virSchemaName,\n                 LOG.debug(\"Ignoring invalid virtual schema {}\", virSchemaName);\n             }\n         }\n-\n+        \n         return virtualSchema;\n     }\n "},{"sha":"6f086cc91da0c159d2150d8c5ef9d567886d6998","filename":"core/src/main/java/org/apache/syncope/core/rest/data/NotificationDataBinder.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -42,15 +42,12 @@ public NotificationTO getNotificationTO(final Notification notification) {\n \n     public Notification createNotification(final NotificationTO notificationTO) {\n         Notification result = new Notification();\n-\n         updateNotification(result, notificationTO);\n-\n         return result;\n     }\n \n     public void updateNotification(final Notification notification, final NotificationTO notificationTO) {\n         BeanUtils.copyProperties(notificationTO, notification, IGNORE_PROPERTIES);\n-\n         notification.setAbout(notificationTO.getAbout());\n         notification.setRecipients(notificationTO.getRecipients());\n     }"},{"sha":"c765ce8e9ef7f96007f472c57cc6a3fb3ff68bff","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -88,7 +88,8 @@ public <T extends AbstractNormalSchema> void update(final SchemaTO schemaTO, fin\n         fill(schema, schemaTO);\n     }\n \n-    public <T extends AbstractNormalSchema> SchemaTO getSchemaTO(final T schema, final AttributableUtil attributableUtil) {\n+    public <T extends AbstractNormalSchema> SchemaTO getSchemaTO(\n+            final T schema, final AttributableUtil attributableUtil) {\n         SchemaTO schemaTO = new SchemaTO();\n         BeanUtils.copyProperties(schema, schemaTO);\n "},{"sha":"a62ef8a32126d172cd676fed926ef4cee140a422","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -64,9 +64,9 @@ public class TaskDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n-    private static final String[] IGNORE_TASK_PROPERTIES = { \"executions\", \"resource\", };\n+    private static final String[] IGNORE_TASK_PROPERTIES = {\"executions\", \"resource\",};\n \n-    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"id\", \"task\" };\n+    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\"id\", \"task\"};\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -83,6 +83,7 @@ private void checkJexl(final AbstractAttributableTO attributableTO, final Syncop\n                 sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n             }\n         }\n+\n         for (AttributeTO attrTO : attributableTO.getVirAttrs()) {\n             if (!attrTO.getValues().isEmpty() && !JexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n                 sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));"},{"sha":"6ac262d32b5f26874bd7698b6d072fde8544ef98","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -61,7 +61,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-@Transactional(rollbackFor = { Throwable.class })\n+@Transactional(rollbackFor = {Throwable.class})\n public class UserDataBinder extends AbstractAttributableDataBinder {\n \n     private static final String[] IGNORE_USER_PROPERTIES = {"},{"sha":"08da5d2259a8f299227bf121803486aee6a75096","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -21,8 +21,7 @@\n import java.util.Date;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.types.AuditElements.AuthenticationSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Category;\n+import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.core.audit.AuditManager;\n@@ -148,7 +147,15 @@ public Authentication authenticate(final Authentication authentication)\n \n             token.setDetails(authentication.getDetails());\n \n-            auditManager.audit(Category.authentication, AuthenticationSubCategory.login, Result.success,\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.REST,\n+                    \"AuthenticationController\",\n+                    null,\n+                    \"login\",\n+                    Result.SUCCESS,\n+                    null,\n+                    authenticated,\n+                    authentication,\n                     \"Successfully authenticated, with roles: \" + token.getAuthorities());\n \n             LOG.debug(\"User {} successfully authenticated, with roles {}\",\n@@ -165,7 +172,15 @@ public Authentication authenticate(final Authentication authentication)\n                 userDAO.save(user);\n             }\n \n-            auditManager.audit(Category.authentication, AuthenticationSubCategory.login, Result.failure,\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.REST,\n+                    \"AuthenticationController\",\n+                    null,\n+                    \"login\",\n+                    Result.FAILURE,\n+                    null,\n+                    authenticated,\n+                    authentication,\n                     \"User \" + authentication.getPrincipal() + \" not authenticated\");\n \n             LOG.debug(\"User {} not authenticated\", authentication.getPrincipal());"},{"sha":"8dc2cbd5252a1985d48ed0fbdf6327753f907be3","filename":"core/src/main/java/org/apache/syncope/core/services/ControllerHandler.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FControllerHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FControllerHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FControllerHandler.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.services;\n+\n+import java.lang.reflect.Method;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.notification.NotificationManager;\n+import org.apache.syncope.core.rest.controller.AbstractController;\n+import org.apache.syncope.core.rest.controller.UnresolvedReferenceException;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+@Aspect\n+public class ControllerHandler {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(ControllerHandler.class);\n+\n+    @Autowired\n+    private NotificationManager notificationManager;\n+\n+    @Autowired\n+    private AuditManager auditManager;\n+\n+    @Around(\"execution(* org.apache.syncope.core.rest.controller.AbstractController+.*(..))\")\n+    public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n+        final Class<?> clazz = joinPoint.getTarget().getClass();\n+\n+        final Object[] input = joinPoint.getArgs();\n+\n+        final String category = clazz.getSimpleName();\n+\n+        final MethodSignature ms = (MethodSignature) joinPoint.getSignature();\n+        Method method = ms.getMethod();\n+\n+        final String event = joinPoint.getSignature().getName();\n+\n+        AuditElements.Result result = null;\n+        Object output = null;\n+        Object before = null;\n+\n+        try {\n+            LOG.debug(\"Before {}.{}({})\",\n+                    new Object[] {clazz.getSimpleName(), event, input == null || input.length == 0 ? \"\" : \"...\"});\n+\n+            try {\n+                before = ((AbstractController) joinPoint.getTarget()).resolveBeanReference(method, input);\n+            } catch (UnresolvedReferenceException ignore) {\n+                LOG.debug(\"Unresolved bean reference ...\");\n+            }\n+\n+            output = joinPoint.proceed();\n+            result = AuditElements.Result.SUCCESS;\n+\n+            LOG.debug(\"After returning {}.{}\", clazz.getSimpleName(), event);\n+            return output;\n+        } catch (Throwable t) {\n+            output = t;\n+            result = AuditElements.Result.FAILURE;\n+\n+            LOG.debug(\"After throwing {}.{}\", clazz.getSimpleName(), event);\n+            throw t;\n+        } finally {\n+            notificationManager.createTasks(\n+                    AuditElements.EventCategoryType.REST,\n+                    category,\n+                    null,\n+                    event,\n+                    result,\n+                    before,\n+                    output,\n+                    input);\n+\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.REST,\n+                    category,\n+                    null,\n+                    event,\n+                    result,\n+                    before,\n+                    output,\n+                    input);\n+        }\n+    }\n+}"},{"sha":"41e564931ec9e39c45ec6203a5646382c8f7e381","filename":"core/src/main/java/org/apache/syncope/core/services/LoggerServiceImpl.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -25,6 +25,7 @@\n import javax.ws.rs.NotFoundException;\r\n \r\n import org.apache.syncope.common.services.LoggerService;\r\n+import org.apache.syncope.common.to.EventCategoryTO;\r\n import org.apache.syncope.common.to.LoggerTO;\r\n import org.apache.syncope.common.types.AuditLoggerName;\r\n import org.apache.syncope.common.types.LoggerType;\r\n@@ -109,4 +110,9 @@ public void update(final LoggerType type, final String name, final LoggerTO logg\n                 throw new BadRequestException();\r\n         }\r\n     }\r\n+\r\n+    @Override\r\n+    public List<EventCategoryTO> events() {\r\n+        return controller.listAuditEvents();\r\n+    }\r\n }\r"},{"sha":"a4b3e30f80e901f5c41ef0066bb4daafacedacef","filename":"core/src/main/java/org/apache/syncope/core/services/WorkflowServiceImpl.java","status":"modified","additions":3,"deletions":19,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -21,18 +21,17 @@\n import java.io.IOException;\r\n import java.io.OutputStream;\r\n import javax.ws.rs.BadRequestException;\r\n+import org.apache.syncope.common.types.RESTHeaders;\r\n+import org.apache.syncope.core.rest.controller.WorkflowController;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n import javax.ws.rs.core.Context;\r\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.StreamingOutput;\r\n \r\n import org.apache.cxf.jaxrs.ext.MessageContext;\r\n import org.apache.syncope.common.services.WorkflowService;\r\n-import org.apache.syncope.common.types.WorkflowTasks;\r\n import org.apache.syncope.common.types.AttributableType;\r\n-import org.apache.syncope.common.types.RESTHeaders;\r\n-import org.apache.syncope.core.rest.controller.WorkflowController;\r\n-import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n@@ -121,19 +120,4 @@ public void importDefinition(final AttributableType kind, final String definitio\n                 throw new BadRequestException();\r\n         }\r\n     }\r\n-\r\n-    @Override\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public WorkflowTasks getDefinedTasks(final AttributableType kind) {\r\n-        switch (kind) {\r\n-            case USER:\r\n-                return new WorkflowTasks(controller.getDefinedUserTasks());\r\n-\r\n-            case ROLE:\r\n-                return new WorkflowTasks(controller.getDefinedRoleTasks());\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n-    }\r\n }\r"},{"sha":"1aad45c888707ff166995c9eb3ee5047345de32a","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/LDAPMembershipSyncActions.java","status":"modified","additions":36,"deletions":3,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -29,7 +29,10 @@\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n@@ -82,6 +85,9 @@ public class LDAPMembershipSyncActions extends DefaultSyncActions {\n     @Autowired\n     private NotificationManager notificationManager;\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     protected Map<Long, Long> membersBeforeRoleUpdate = Collections.<Long, Long>emptyMap();\n \n     /**\n@@ -197,20 +203,47 @@ protected void userUpdate(final UserMod userMod, final String resourceName) {\n             return;\n         }\n \n+        Result result;\n+\n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = null;\n+\n         try {\n-            WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n+            updated = uwfAdapter.update(userMod);\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                     updated, Collections.singleton(resourceName));\n \n             taskExecutor.execute(tasks);\n-\n-            notificationManager.createTasks(updated.getResult().getKey().getId(), updated.getPerformedTasks());\n+            result = Result.SUCCESS;\n         } catch (PropagationException e) {\n+            result = Result.FAILURE;\n             LOG.error(\"Could not propagate {}\", userMod, e);\n         } catch (Exception e) {\n+            result = Result.FAILURE;\n             LOG.error(\"Could not perform update {}\", userMod, e);\n         }\n+\n+        notificationManager.createTasks(\n+                AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                this.getClass().getSimpleName(),\n+                null,\n+                \"update\",\n+                result,\n+                null, // searching for before object is too much expensive ... \n+                updated == null ? null : updated.getResult().getKey(),\n+                userMod,\n+                resourceName);\n+\n+        auditManager.audit(\n+                AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                this.getClass().getSimpleName(),\n+                null,\n+                \"update\",\n+                result,\n+                null, // searching for before object is too much expensive ... \n+                updated == null ? null : updated.getResult().getKey(),\n+                userMod,\n+                resourceName);\n     }\n \n     /**"},{"sha":"9bf45dc51a0c89623598a1bcd267ffccf7b16bca","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":135,"deletions":40,"changes":175,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -39,10 +39,13 @@\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ConflictResolutionAction;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.SyncPolicySpec;\n+import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n@@ -185,6 +188,12 @@ public class SyncopeSyncResultHandler implements SyncResultsHandler {\n     @Autowired\n     protected NotificationManager notificationManager;\n \n+    /**\n+     * Audit Manager.\n+     */\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n     @Autowired\n     protected AttributableTransformer attrTransformer;\n \n@@ -466,7 +475,7 @@ public Long findMatchingAttributableId(final ObjectClass objectClass, final Stri\n \n         final List<ConnectorObject> found = connector.search(objectClass,\n                 new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                        attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n+                attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", objectClass, syncTask.getResource(), name);\n@@ -534,6 +543,9 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                 result.setName(((RoleTO) actual).getName());\n             }\n         } else {\n+            Object output = null;\n+            Result resultStatus;\n+\n             try {\n                 if (AttributableType.USER == attrUtil.getType()) {\n                     Boolean enabled = readEnabled(delta.getObject());\n@@ -546,14 +558,11 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n \n                     taskExecutor.execute(tasks);\n \n-                    notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n-\n                     actual = userDataBinder.getUserTO(created.getResult().getKey());\n \n                     result.setId(created.getResult().getKey());\n                     result.setName(((UserTO) actual).getUsername());\n-                }\n-                if (AttributableType.ROLE == attrUtil.getType()) {\n+                } else if (AttributableType.ROLE == attrUtil.getType()) {\n                     WorkflowResult<Long> created = rwfAdapter.create((RoleTO) actual);\n                     AttributeTO roleOwner = actual.getAttrMap().get(StringUtils.EMPTY);\n                     if (roleOwner != null) {\n@@ -572,32 +581,60 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                     result.setId(created.getResult());\n                     result.setName(((RoleTO) actual).getName());\n                 }\n+                output = actual;\n+                resultStatus = Result.SUCCESS;\n+\n             } catch (PropagationException e) {\n                 // A propagation failure doesn't imply a synchronization failure.\n                 // The propagation exception status will be reported into the propagation task execution.\n                 LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n             } catch (Exception e) {\n                 result.setStatus(SyncResult.Status.FAILURE);\n                 result.setMessage(e.getMessage());\n                 LOG.error(\"Could not create {} {} \", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n             }\n+\n+            notificationManager.createTasks(\n+                    AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                    AttributableType.USER.name().toLowerCase(),\n+                    syncTask.getResource().getName(),\n+                    \"create\",\n+                    resultStatus,\n+                    null, // searching for before object is too much expensive ... \n+                    output,\n+                    delta);\n+\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                    AttributableType.USER.name().toLowerCase(),\n+                    syncTask.getResource().getName(),\n+                    \"create\",\n+                    resultStatus,\n+                    null, // searching for before object is too much expensive ... \n+                    output,\n+                    delta);\n         }\n \n         actions.after(this, delta, actual, result);\n         return Collections.singletonList(result);\n     }\n \n-    protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun, final SyncResult result)\n+    protected Map.Entry<UserTO, UserTO> updateUser(final Long id, SyncDelta delta, final boolean dryRun,\n+            final SyncResult result)\n             throws Exception {\n \n-        UserTO userTO = userDataBinder.getUserTO(id);\n+        final UserTO before = userDataBinder.getUserTO(id);\n         UserMod userMod = connObjectUtil.getAttributableMod(\n-                id, delta.getObject(), userTO, syncTask, AttributableUtil.getInstance(AttributableType.USER));\n+                id, delta.getObject(), before, syncTask, AttributableUtil.getInstance(AttributableType.USER));\n \n-        delta = actions.beforeUpdate(this, delta, userTO, userMod);\n+        delta = actions.beforeUpdate(this, delta, before, userMod);\n \n         if (dryRun) {\n-            return userTO;\n+            return new AbstractMap.SimpleEntry<UserTO, UserTO>(before, before);\n         }\n \n         // Attribute value transformation (if configured)\n@@ -645,26 +682,24 @@ protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun\n \n         taskExecutor.execute(tasks);\n \n-        notificationManager.createTasks(updated.getResult().getKey().getId(), updated.getPerformedTasks());\n-\n-        userTO = userDataBinder.getUserTO(updated.getResult().getKey().getId());\n+        final UserTO after = userDataBinder.getUserTO(updated.getResult().getKey().getId());\n+        actions.after(this, delta, after, result);\n \n-        actions.after(this, delta, userTO, result);\n-\n-        return userTO;\n+        return new AbstractMap.SimpleEntry<UserTO, UserTO>(before, after);\n     }\n \n-    protected RoleTO updateRole(final Long id, SyncDelta delta, final boolean dryRun, final SyncResult result)\n+    protected Map.Entry<RoleTO, RoleTO> updateRole(\n+            final Long id, SyncDelta delta, final boolean dryRun, final SyncResult result)\n             throws Exception {\n \n-        RoleTO roleTO = roleDataBinder.getRoleTO(id);\n+        final RoleTO before = roleDataBinder.getRoleTO(id);\n         RoleMod roleMod = connObjectUtil.getAttributableMod(\n-                id, delta.getObject(), roleTO, syncTask, AttributableUtil.getInstance(AttributableType.ROLE));\n+                id, delta.getObject(), before, syncTask, AttributableUtil.getInstance(AttributableType.ROLE));\n \n-        delta = actions.beforeUpdate(this, delta, roleTO, roleMod);\n+        delta = actions.beforeUpdate(this, delta, before, roleMod);\n \n         if (dryRun) {\n-            return roleTO;\n+            return new AbstractMap.SimpleEntry<RoleTO, RoleTO>(before, before);\n         }\n \n         // Attribute value transformation (if configured)\n@@ -689,11 +724,11 @@ protected RoleTO updateRole(final Long id, SyncDelta delta, final boolean dryRun\n \n         taskExecutor.execute(tasks);\n \n-        roleTO = roleDataBinder.getRoleTO(updated.getResult());\n+        final RoleTO after = roleDataBinder.getRoleTO(updated.getResult());\n \n-        actions.after(this, delta, roleTO, result);\n+        actions.after(this, delta, after, result);\n \n-        return roleTO;\n+        return new AbstractMap.SimpleEntry<RoleTO, RoleTO>(before, after);\n     }\n \n     protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, final AttributableUtil attrUtil,\n@@ -712,34 +747,70 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n         for (Long id : subjects) {\n             LOG.debug(\"About to update {}\", id);\n \n+            Object output = null;\n+            AbstractAttributableTO before = null;\n+            Result resultStatus;\n+\n             final SyncResult result = new SyncResult();\n             result.setOperation(ResourceOperation.UPDATE);\n             result.setSubjectType(attrUtil.getType());\n             result.setStatus(SyncResult.Status.SUCCESS);\n             result.setId(id);\n \n             try {\n+                final AbstractAttributableTO updated;\n                 if (AttributableType.USER == attrUtil.getType()) {\n-                    UserTO updated = updateUser(id, delta, dryRun, result);\n-                    result.setName(updated.getUsername());\n-                }\n-\n-                if (AttributableType.ROLE == attrUtil.getType()) {\n-                    RoleTO updated = updateRole(id, delta, dryRun, result);\n-                    result.setName(updated.getName());\n+                    final Map.Entry<UserTO, UserTO> res = updateUser(id, delta, dryRun, result);\n+                    before = res.getKey();\n+                    updated = res.getValue();\n+                    result.setName(((UserTO) updated).getUsername());\n+                } else if (AttributableType.ROLE == attrUtil.getType()) {\n+                    final Map.Entry<RoleTO, RoleTO> res = updateRole(id, delta, dryRun, result);\n+                    before = res.getKey();\n+                    updated = res.getValue();\n+                    result.setName(((RoleTO) updated).getName());\n+                } else {\n+                    updated = null;\n                 }\n+                output = updated;\n+                resultStatus = Result.SUCCESS;\n             } catch (PropagationException e) {\n                 // A propagation failure doesn't imply a synchronization failure.\n                 // The propagation exception status will be reported into the propagation task execution.\n                 LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n             } catch (Exception e) {\n                 result.setStatus(SyncResult.Status.FAILURE);\n                 result.setMessage(e.getMessage());\n-\n                 LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n             }\n             updResults.add(result);\n \n+            if (!dryRun) {\n+                notificationManager.createTasks(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        \"update\",\n+                        resultStatus,\n+                        before,\n+                        output,\n+                        delta);\n+\n+                auditManager.audit(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        \"update\",\n+                        resultStatus,\n+                        before,\n+                        output,\n+                        delta);\n+            }\n+\n             LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n         }\n \n@@ -760,6 +831,9 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n         List<SyncResult> delResults = new ArrayList<SyncResult>();\n \n         for (Long id : subjects) {\n+            Object output = null;\n+            Result resultStatus = Result.FAILURE;\n+\n             try {\n                 AbstractAttributableTO subjectTO = AttributableType.USER == attrUtil.getType()\n                         ? userDataBinder.getUserTO(id)\n@@ -783,9 +857,7 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                         List<PropagationTask> tasks = Collections.<PropagationTask>emptyList();\n                         if (AttributableType.USER == attrUtil.getType()) {\n                             tasks = propagationManager.getUserDeleteTaskIds(id, syncTask.getResource().getName());\n-                            notificationManager.createTasks(id, Collections.<String>singleton(\"delete\"));\n-                        }\n-                        if (AttributableType.ROLE == attrUtil.getType()) {\n+                        } else if (AttributableType.ROLE == attrUtil.getType()) {\n                             tasks = propagationManager.getRoleDeleteTaskIds(id, syncTask.getResource().getName());\n                         }\n                         taskExecutor.execute(tasks);\n@@ -798,24 +870,49 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                     try {\n                         if (AttributableType.USER == attrUtil.getType()) {\n                             uwfAdapter.delete(id);\n-                        }\n-                        if (AttributableType.ROLE == attrUtil.getType()) {\n+                        } else if (AttributableType.ROLE == attrUtil.getType()) {\n                             rwfAdapter.delete(id);\n                         }\n+                        output = null;\n+                        resultStatus = Result.SUCCESS;\n                     } catch (Exception e) {\n                         result.setStatus(SyncResult.Status.FAILURE);\n                         result.setMessage(e.getMessage());\n                         LOG.error(\"Could not delete {} {}\", attrUtil.getType(), id, e);\n+                        output = e;\n                     }\n                 }\n \n                 actions.after(this, delta, subjectTO, result);\n                 delResults.add(result);\n+\n             } catch (NotFoundException e) {\n                 LOG.error(\"Could not find {} {}\", attrUtil.getType(), id, e);\n             } catch (UnauthorizedRoleException e) {\n                 LOG.error(\"Not allowed to read {} {}\", attrUtil.getType(), id, e);\n             }\n+\n+            if (!dryRun) {\n+                notificationManager.createTasks(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        \"delete\",\n+                        resultStatus,\n+                        null, // searching for before object is too much expensive ... \n+                        output,\n+                        delta);\n+\n+                auditManager.audit(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        \"delete\",\n+                        resultStatus,\n+                        null, // searching for before object is too much expensive ... \n+                        output,\n+                        delta);\n+            }\n         }\n \n         return delResults;\n@@ -871,9 +968,7 @@ protected final void doHandle(final SyncDelta delta)\n                     default:\n                 }\n             }\n-        }\n-\n-        if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n+        } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n             if (subjectIds.isEmpty()) {\n                 LOG.debug(\"No match found for deletion\");\n             } else if (subjectIds.size() == 1) {"},{"sha":"0b181d1b49a8edcc252f454e3d501c1b2f8008a9","filename":"core/src/main/java/org/apache/syncope/core/util/JexlUtil.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -54,7 +54,7 @@ public final class JexlUtil {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(JexlUtil.class);\n \n-    private static final String[] IGNORE_FIELDS = { \"password\", \"clearPassword\", \"serialVersionUID\", \"class\" };\n+    private static final String[] IGNORE_FIELDS = {\"password\", \"clearPassword\", \"serialVersionUID\", \"class\"};\n \n     private static JexlEngine jexlEngine;\n \n@@ -82,7 +82,7 @@ public static boolean isExpressionValid(final String expression) {\n     }\n \n     public static String evaluate(final String expression, final JexlContext jexlContext) {\n-        String result = \"\";\n+        String result = StringUtils.EMPTY;\n \n         if (StringUtils.isNotBlank(expression) && jexlContext != null) {\n             try {\n@@ -271,5 +271,4 @@ public static boolean evaluateMandatoryCondition(final String mandatoryCondition\n      */\n     private JexlUtil() {\n     }\n-\n }"},{"sha":"31266aa35e33a0ce37304ded91f045219851ecc0","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":48,"deletions":43,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -162,12 +162,13 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n             default:\n         }\n \n-        final List<AbstractAttrValue> values = MappingUtil.getIntValues(resource, mapItem, attributables,\n+        List<AbstractAttrValue> values = MappingUtil.getIntValues(resource, mapItem, attributables,\n                 vAttrsToBeRemoved, vAttrsToBeUpdated);\n \n         AbstractNormalSchema schema = null;\n+        boolean readOnlyVirSchema = false;\n         AttributeSchemaType schemaType;\n-        Map.Entry<String, Attribute> result = null;\n+        final Map.Entry<String, Attribute> result;\n         final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n         switch (mapItem.getIntMappingType()) {\n             case UserSchema:\n@@ -178,14 +179,14 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n                         MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));\n                 schemaType = schema == null ? AttributeSchemaType.String : schema.getType();\n                 break;\n+\n             case UserVirtualSchema:\n             case RoleVirtualSchema:\n-                final VirSchemaDAO virSchemaDAO = context.getBean(VirSchemaDAO.class);\n-                final AbstractVirSchema virSchema = virSchemaDAO.find(mapItem.getIntAttrName(),\n+            case MembershipVirtualSchema:\n+                VirSchemaDAO virSchemaDAO = context.getBean(VirSchemaDAO.class);\n+                AbstractVirSchema virSchema = virSchemaDAO.find(mapItem.getIntAttrName(),\n                         MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));\n-                if (virSchema.isReadonly()) {\n-                    return result;\n-                }\n+                readOnlyVirSchema = (virSchema != null && virSchema.isReadonly());\n                 schemaType = AttributeSchemaType.String;\n                 break;\n \n@@ -205,50 +206,54 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n                 + \"\\n* ClassType \" + schemaType.getType().getName()\n                 + \"\\n* Values \" + values);\n \n-        List<Object> objValues = new ArrayList<Object>();\n+        if (readOnlyVirSchema) {\n+            result = null;\n+        } else {\n+            final List<Object> objValues = new ArrayList<Object>();\n \n-        for (AbstractAttrValue value : values) {\n-            if (FrameworkUtil.isSupportedAttributeType(schemaType.getType())) {\n-                objValues.add(value.getValue());\n-            } else {\n-                objValues.add(value.getValueAsString());\n+            for (AbstractAttrValue value : values) {\n+                if (FrameworkUtil.isSupportedAttributeType(schemaType.getType())) {\n+                    objValues.add(value.getValue());\n+                } else {\n+                    objValues.add(value.getValueAsString());\n+                }\n             }\n-        }\n \n-        if (mapItem.isAccountid()) {\n-            result = new AbstractMap.SimpleEntry<String, Attribute>(objValues.iterator().next().toString(), null);\n-        } else if (mapItem.isPassword() && subject instanceof SyncopeUser) {\n-            String passwordAttrValue = password;\n-            if (StringUtils.isBlank(passwordAttrValue)) {\n-                SyncopeUser user = (SyncopeUser) subject;\n-                if (user.canDecodePassword()) {\n-                    try {\n-                        passwordAttrValue = PasswordEncoder.decode(user.getPassword(), user.getCipherAlgorithm());\n-                    } catch (Exception e) {\n-                        LOG.error(\"Could not decode password for {}\", user, e);\n-                    }\n-                } else if (resource.isRandomPwdIfNotProvided()) {\n-                    try {\n-                        passwordAttrValue = passwordGenerator.generate(user);\n-                    } catch (InvalidPasswordPolicySpecException e) {\n-                        LOG.error(\"Could not generate policy-compliant random password for {}\", user, e);\n+            if (mapItem.isAccountid()) {\n+                result = new AbstractMap.SimpleEntry<String, Attribute>(objValues.iterator().next().toString(), null);\n+            } else if (mapItem.isPassword() && subject instanceof SyncopeUser) {\n+                String passwordAttrValue = password;\n+                if (StringUtils.isBlank(passwordAttrValue)) {\n+                    SyncopeUser user = (SyncopeUser) subject;\n+                    if (user.canDecodePassword()) {\n+                        try {\n+                            passwordAttrValue = PasswordEncoder.decode(user.getPassword(), user.getCipherAlgorithm());\n+                        } catch (Exception e) {\n+                            LOG.error(\"Could not decode password for {}\", user, e);\n+                        }\n+                    } else if (resource.isRandomPwdIfNotProvided()) {\n+                        try {\n+                            passwordAttrValue = passwordGenerator.generate(user);\n+                        } catch (InvalidPasswordPolicySpecException e) {\n+                            LOG.error(\"Could not generate policy-compliant random password for {}\", user, e);\n \n-                        passwordAttrValue = SecureRandomUtil.generateRandomPassword(16);\n+                            passwordAttrValue = SecureRandomUtil.generateRandomPassword(16);\n+                        }\n                     }\n                 }\n-            }\n \n-            result = new AbstractMap.SimpleEntry<String, Attribute>(null,\n-                    AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n-        } else {\n-            if ((schema != null && schema.isMultivalue()) || AttributableUtil.getInstance(subject).getType()\n-                    != mapItem.getIntMappingType().getAttributableType()) {\n-                result = new AbstractMap.SimpleEntry<String, Attribute>(null, AttributeBuilder.build(extAttrName,\n-                        objValues));\n+                result = new AbstractMap.SimpleEntry<String, Attribute>(null,\n+                        AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n             } else {\n-                result = new AbstractMap.SimpleEntry<String, Attribute>(null, objValues.isEmpty()\n-                        ? AttributeBuilder.build(extAttrName)\n-                        : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n+                if ((schema != null && schema.isMultivalue()) || AttributableUtil.getInstance(subject).getType()\n+                        != mapItem.getIntMappingType().getAttributableType()) {\n+                    result = new AbstractMap.SimpleEntry<String, Attribute>(null, AttributeBuilder.build(extAttrName,\n+                            objValues));\n+                } else {\n+                    result = new AbstractMap.SimpleEntry<String, Attribute>(null, objValues.isEmpty()\n+                            ? AttributeBuilder.build(extAttrName)\n+                            : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n+                }\n             }\n         }\n "},{"sha":"f7da9c0b3838bbb2ca09d417dd75993635f4bd47","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowAdapter.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -61,14 +61,6 @@ public interface WorkflowAdapter {\n      */\n     void importDefinition(WorkflowDefinitionFormat format, String definition) throws WorkflowException;\n \n-    /**\n-     * Get list of defined tasks in workflow.\n-     *\n-     * @return list of defined tasks in workflow\n-     * @throws WorkflowException workflow exception\n-     */\n-    List<String> getDefinedTasks() throws WorkflowException;\n-\n     /**\n      * Get all defined forms for current workflow process instances.\n      *"},{"sha":"df956c2681f9f9bd6a0b7ebff721d48e1c3e931e","filename":"core/src/main/java/org/apache/syncope/core/workflow/role/NoOpRoleWorkflowAdapter.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -102,13 +102,6 @@ public void importDefinition(final WorkflowDefinitionFormat format, final String\n         throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n     }\n \n-    @Override\n-    public List<String> getDefinedTasks()\n-            throws WorkflowException {\n-\n-        return TASKS;\n-    }\n-\n     @Override\n     public List<WorkflowFormTO> getForms() {\n         return Collections.emptyList();"},{"sha":"a7dc24215bd946180b25f0a8b26dcb2af55dd128","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/NoOpUserWorkflowAdapter.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -173,13 +173,6 @@ public void importDefinition(final WorkflowDefinitionFormat format, final String\n         throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n     }\n \n-    @Override\n-    public List<String> getDefinedTasks()\n-            throws WorkflowException {\n-\n-        return TASKS;\n-    }\n-\n     @Override\n     public List<WorkflowFormTO> getForms() {\n         return Collections.emptyList();"},{"sha":"a2e68ab64738f1f555c2000e1fde41d002c42d68","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -532,38 +532,6 @@ public void importDefinition(final WorkflowDefinitionFormat format, final String\n         }\n     }\n \n-    @Override\n-    public List<String> getDefinedTasks()\n-            throws WorkflowException {\n-\n-        List<String> result = new ArrayList<String>();\n-\n-        ProcessDefinition procDef = getProcessDefinition();\n-\n-        InputStream procDefIS = repositoryService.\n-                getResourceAsStream(procDef.getDeploymentId(), WF_PROCESS_RESOURCE);\n-\n-        DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();\n-        try {\n-            DocumentBuilder builder = domFactory.newDocumentBuilder();\n-            Document doc = builder.parse(procDefIS);\n-\n-            XPath xpath = XPathFactory.newInstance().newXPath();\n-\n-            NodeList nodeList = (NodeList) xpath.evaluate(\"//userTask | //serviceTask | //scriptTask\", doc,\n-                    XPathConstants.NODESET);\n-            for (int i = 0; i < nodeList.getLength(); i++) {\n-                result.add(nodeList.item(i).getAttributes().getNamedItem(\"id\").getNodeValue());\n-            }\n-        } catch (Exception e) {\n-            throw new WorkflowException(\"While reading defined tasks\", e);\n-        } finally {\n-            IOUtils.closeQuietly(procDefIS);\n-        }\n-\n-        return result;\n-    }\n-\n     private WorkflowFormPropertyType fromActivitiFormType(final FormType activitiFormType) {\n         WorkflowFormPropertyType result = WorkflowFormPropertyType.String;\n "},{"sha":"13c628223d06f7283b459ae959853a436ef8bc2d","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -21,20 +21,29 @@ under the License.\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://cxf.apache.org/jaxrs\n                            http://cxf.apache.org/schemas/jaxrs.xsd\n                            http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\">\n+                           http://www.springframework.org/schema/context/spring-context.xsd\n+                           http://www.springframework.org/schema/oxm\n+                           http://www.springframework.org/schema/oxm/spring-oxm.xsd\n+                           http://www.springframework.org/schema/aop \n+                           http://www.springframework.org/schema/aop/spring-aop.xsd\">\n \n   <import resource=\"classpath:META-INF/cxf/cxf.xml\"/>\n   <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>\n \n+  <aop:aspectj-autoproxy/>\n+  \n   <context:component-scan base-package=\"org.apache.syncope.core.rest.controller\"/>\n \n   <!-- CXF Configuration - BEGIN -->\n   <context:component-scan base-package=\"org.apache.syncope.core.services\"/>\n+  \n+  <bean id=\"controllerHandler\" name=\"controllerHandler\" class=\"org.apache.syncope.core.services.ControllerHandler\" />\n \n   <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n     <property name=\"namespacePrefixes\">"},{"sha":"436fde4be133cce9e3d3a92dfb2753803f0ddb99","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.notification;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n \n import com.icegreen.greenmail.util.GreenMail;\n import com.icegreen.greenmail.util.ServerSetup;\n@@ -192,6 +192,7 @@ private boolean verifyMail(final String sender, final String subject) throws Exc\n                 messages[i].setFlag(Flag.DELETED, true);\n             }\n         }\n+\n         inbox.close(true);\n         store.close();\n         return found;\n@@ -201,7 +202,7 @@ private boolean verifyMail(final String sender, final String subject) throws Exc\n     public void notifyByMail() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n-        notification.addEvent(\"create\");\n+        notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n         MembershipCond membCond = new MembershipCond();\n         membCond.setRoleId(7L);\n@@ -257,7 +258,7 @@ public void notifyByMail() throws Exception {\n     public void issueSYNCOPE192() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n-        notification.addEvent(\"create\");\n+        notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n         MembershipCond membCond = new MembershipCond();\n         membCond.setRoleId(7L);\n@@ -315,7 +316,7 @@ public void issueSYNCOPE192() throws Exception {\n     public void notifyByMailEmptyAbout() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n-        notification.addEvent(\"create\");\n+        notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n         notification.setAbout(null);\n \n@@ -369,7 +370,7 @@ public void notifyByMailEmptyAbout() throws Exception {\n     public void notifyByMailWithRetry() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n-        notification.addEvent(\"create\");\n+        notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n         notification.setAbout(null);\n "},{"sha":"4a1c21abfd99d3d17805718f92a66942a22d2c47","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -325,7 +325,6 @@ public void issueSYNCOPE48() {\n         parentRole.getEntitlements().add(\"USER_CREATE\");\n         parentRole.getEntitlements().add(\"ROLE_1\");\n         parentRole.setParent(1L);\n-\n         parentRole = createRole(parentRole);\n         assertNotNull(parentRole);\n "},{"sha":"64e27b40a84b11c4f71bd6098cb70b8bb47a4809","filename":"core/src/test/java/org/apache/syncope/core/rest/LoggerTestITCase.java","status":"modified","additions":107,"deletions":4,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -19,18 +19,26 @@\n package org.apache.syncope.core.rest;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n \n import java.text.ParseException;\n import java.util.List;\n+import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.LoggerTO;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.types.AuditLoggerName;\n-import org.apache.syncope.common.types.LoggerType;\n import org.apache.syncope.common.types.LoggerLevel;\n+import org.apache.syncope.common.types.LoggerType;\n+import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.util.CollectionWrapper;\n+import org.apache.syncope.core.rest.controller.ReportController;\n+import org.apache.syncope.core.rest.controller.ResourceController;\n+import org.apache.syncope.core.rest.controller.RoleController;\n+import org.apache.syncope.core.rest.controller.UserController;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -86,8 +94,12 @@ public void setLevel() {\n \n     @Test\n     public void enableDisableAudit() {\n-        AuditLoggerName auditLoggerName = new AuditLoggerName(AuditElements.Category.report,\n-                AuditElements.ReportSubCategory.deleteExecution, AuditElements.Result.failure);\n+        AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                EventCategoryType.REST,\n+                ReportController.class.getSimpleName(),\n+                null,\n+                \"deleteExecution\",\n+                AuditElements.Result.FAILURE);\n \n         List<AuditLoggerName> audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n         assertNotNull(audits);\n@@ -109,4 +121,95 @@ public void enableDisableAudit() {\n         assertNotNull(audits);\n         assertFalse(audits.contains(auditLoggerName));\n     }\n+\n+    @Test\n+    public void listAuditEvents() {\n+        final List<EventCategoryTO> events = loggerService.events();\n+\n+        boolean found = false;\n+\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (UserController.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(EventCategoryType.REST, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"list\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"doCreate\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"setStatusOnWfAdapter\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (RoleController.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(EventCategoryType.REST, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"list\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (ResourceController.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(EventCategoryType.REST, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"read\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"delete\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (AttributableType.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n+                if (\"resource-ldap\".equals(eventCategoryTO.getSubcategory())\n+                        && EventCategoryType.SYNCHRONIZATION == eventCategoryTO.getType()) {\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.CREATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.UPDATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));\n+                    found = true;\n+                }\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (AttributableType.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n+                if (\"resource-csv\".equals(eventCategoryTO.getSubcategory())\n+                        && EventCategoryType.PROPAGATION == eventCategoryTO.getType()) {\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.CREATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.UPDATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));\n+                    found = true;\n+                }\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (EventCategoryType.TASK == eventCategoryTO.getType()\n+                    && \"SampleJob\".equals(eventCategoryTO.getCategory())) {\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (EventCategoryType.TASK == eventCategoryTO.getType()\n+                    && \"SyncJob\".equals(eventCategoryTO.getCategory())) {\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+    }\n }"},{"sha":"ae3bbf079f7818faaa79f987951ffc3535c7cbf3","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -26,7 +26,6 @@\n import static org.junit.Assert.fail;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.mod.UserMod;\n@@ -58,7 +57,6 @@\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import static org.apache.syncope.core.rest.AbstractTest.attributeTO;\n import org.apache.syncope.core.sync.TestSyncActions;\n import org.apache.syncope.core.sync.TestSyncRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n@@ -393,15 +391,15 @@ public void reconcileFromLDAP()\n         // Update sync task\n         SyncTaskTO task = taskService.read(11L);\n         assertNotNull(task);\n-        \n+\n         //  add user template\n         final UserTO userTemplate = task.getUserTemplate();\n         userTemplate.getResources().add(\"resource-ldap\");\n         userTemplate.getVirAttrs().add(attributeTO(\"virtualReadOnly\", \"\"));\n \n         task.setUserTemplate(userTemplate);\n \n-        //  add user template\n+        //  add role template\n         RoleTO roleTemplate = new RoleTO();\n         roleTemplate.setParent(8L);\n         roleTemplate.getRAttrTemplates().add(\"show\");\n@@ -437,6 +435,7 @@ public void reconcileFromLDAP()\n         final List<UserTO> matchingUsers = userService.search(NodeCond.getLeafCond(usernameLeafCond));\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.size());\n+\n         // Check for SYNCOPE-436\n         assertEquals(\"syncFromLDAP\", matchingUsers.get(0).getVirAttrMap().get(\"virtualReadOnly\").getValues().get(0));\n \n@@ -538,7 +537,6 @@ private NotificationTaskTO findNotificationTaskBySender(final String sender) {\n         List<NotificationTaskTO> tasks = taskService.list(TaskType.NOTIFICATION);\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n-\n         NotificationTaskTO taskTO = null;\n         for (NotificationTaskTO task : tasks) {\n             if (sender.equals(task.getSender())) {\n@@ -552,7 +550,7 @@ private String createNotificationTask() {\n         // 1. Create notification\n         NotificationTO notification = new NotificationTO();\n         notification.setTraceLevel(TraceLevel.FAILURES);\n-        notification.getEvents().add(\"create\");\n+        notification.getEvents().add(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n         MembershipCond membCond = new MembershipCond();\n         membCond.setRoleId(7L);"},{"sha":"3dbcaca6516a4b3cb7058b3a779b901f4370a8af","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -23,7 +23,6 @@\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.security.AccessControlException;\n@@ -2090,7 +2089,6 @@ public void issueSYNCOPE397() {\n         assertEquals(\"test@testoneone.com\", toBeUpdated.getVirAttrs().get(0).getValues().get(0));\n         // check if propagates correctly with assertEquals on size of tasks list\n         assertEquals(2, toBeUpdated.getPropagationStatusTOs().size());\n-\n         // restore mapping of resource-csv\n         csv.setUmapping(origMapping);\n         resourceService.update(csv.getName(), csv);\n@@ -2287,7 +2285,7 @@ public void issueSYNCOPE435() {\n         assertTrue(userTO.getPropagationStatusTOs().get(0).getFailureReason().\n                 startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));\n     }\n-    \n+\n     @Test\n     public void issueSYNCOPE436() {\n         UserTO userTO = getUniqueSampleTO(\"syncope436@syncope.apache.org\");\n@@ -2299,5 +2297,4 @@ public void issueSYNCOPE436() {\n         //Finding no values because the virtual attribute is readonly \n         assertTrue(userTO.getVirAttrMap().get(\"virtualReadOnly\").getValues().isEmpty());\n     }\n-\n }"},{"sha":"4547550d815c716df05460c45d38fb51f5ed964d","filename":"core/src/test/java/org/apache/syncope/core/rest/WorkflowTestITCase.java","status":"modified","additions":1,"deletions":16,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -18,15 +18,14 @@\n  */\r\n package org.apache.syncope.core.rest;\r\n \r\n-import static org.junit.Assert.assertFalse;\r\n import static org.junit.Assert.assertNotNull;\r\n import static org.junit.Assert.assertTrue;\r\n+import static org.junit.Assert.assertFalse;\r\n \r\n import java.io.IOException;\r\n import java.io.InputStream;\r\n import javax.ws.rs.core.Response;\r\n import org.apache.commons.io.IOUtils;\r\n-import org.apache.syncope.common.types.WorkflowTasks;\r\n import org.apache.syncope.common.types.AttributableType;\r\n import org.apache.syncope.core.workflow.ActivitiDetector;\r\n import org.junit.Assume;\r\n@@ -76,18 +75,4 @@ public void updateRoleDefinition() throws IOException {\n \r\n         importDefinition(AttributableType.ROLE);\r\n     }\r\n-\r\n-    @Test\r\n-    public void getUserTasks() {\r\n-        WorkflowTasks tasks = workflowService.getDefinedTasks(AttributableType.USER);\r\n-        assertNotNull(tasks.getTasks());\r\n-        assertFalse(tasks.getTasks().isEmpty());\r\n-    }\r\n-\r\n-    @Test\r\n-    public void getRoleTasks() {\r\n-        WorkflowTasks tasks = workflowService.getDefinedTasks(AttributableType.ROLE);\r\n-        assertNotNull(tasks.getTasks());\r\n-        assertFalse(tasks.getTasks().isEmpty());\r\n-    }\r\n }\r"},{"sha":"68dbc18885106569db837a8e3625ddc0e45d0947","filename":"core/src/test/resources/content.xml","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -750,8 +750,9 @@ under the License.\n                 extAttrName=\"mail\" intAttrName=\"userId\" intMappingType=\"UserSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"319\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                  extAttrName=\"givenname\" intAttrName=\"virtualReadOnly\" intMappingType=\"UserVirtualSchema\"\n-                  mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n+                extAttrName=\"givenname\" intAttrName=\"virtualReadOnly\" intMappingType=\"UserVirtualSchema\"\n+                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n+  \n   <RMapping id=\"1\" resource_name=\"resource-ldap\"\n             accountlink=\"&apos;cn=&apos; + name + &apos;,ou=groups,o=isp&apos;\"/>\n   <RMappingItem id=\"1\" accountid=\"1\" password=\"0\" mapping_id=\"1\"\n@@ -846,16 +847,16 @@ under the License.\n                 xmlAbout=\"%3Corg.apache.syncope.common.search.NodeCond%3E%0A++%3Ctype%3EAND%3C%2Ftype%3E%0A++%3CleftNodeCond%3E%0A++++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++++%3CattributeCond%3E%0A++++++%3Ctype%3ELIKE%3C%2Ftype%3E%0A++++++%3Cschema%3Efullname%3C%2Fschema%3E%0A++++++%3Cexpression%3E%25o%25%3C%2Fexpression%3E%0A++++%3C%2FattributeCond%3E%0A++%3C%2FleftNodeCond%3E%0A++%3CrightNodeCond%3E%0A++++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++++%3CattributeCond%3E%0A++++++%3Ctype%3ELIKE%3C%2Ftype%3E%0A++++++%3Cschema%3Efullname%3C%2Fschema%3E%0A++++++%3Cexpression%3E%25i%25%3C%2Fexpression%3E%0A++++%3C%2FattributeCond%3E%0A++%3C%2FrightNodeCond%3E%0A%3C%2Forg.apache.syncope.common.search.NodeCond%3E\"\n                 xmlRecipients=\"%3Corg.apache.syncope.common.search.NodeCond%3E%0A++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++%3CmembershipCond%3E%0A++++%3CroleId%3E7%3C%2FroleId%3E%0A++%3C%2FmembershipCond%3E%0A%3C%2Forg.apache.syncope.common.search.NodeCond%3E\"\n                 recipientAttrType=\"UserSchema\" recipientAttrName=\"email\"/>\n-  <Notification_events Notification_id=\"1\" events=\"unexisting1\"/>\n-  <Notification_events Notification_id=\"1\" events=\"unexisting2\"/>\n+  <Notification_events Notification_id=\"1\" events=\"[CUSTOM]:[]:[]:[unexisting1]:[FAILURE]\"/>\n+  <Notification_events Notification_id=\"1\" events=\"[CUSTOM]:[]:[]:[unexisting2]:[SUCCESS]\"/>\n     \n   <NotificationTask_recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>\n \n   <Report id=\"1\" name=\"test\"/>\n   <ReportletConfInstance id=\"1\" Report_id=\"1\" serializedInstance=\"%3Corg.apache.syncope.common.report.UserReportletConf%3E%0A++%3Cname%3EtestUserReportlet%3C%2Fname%3E%0A++%3Cattrs%3E%0A++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++%3Cstring%3Egender%3C%2Fstring%3E%0A++%3C%2Fattrs%3E%0A++%3CderAttrs+class%3D%22singleton-list%22%3E%0A++++%3Cstring%3Ecn%3C%2Fstring%3E%0A++%3C%2FderAttrs%3E%0A++%3CvirAttrs+class%3D%22singleton-list%22%3E%0A++++%3Cstring%3Evirtualdata%3C%2Fstring%3E%0A++%3C%2FvirAttrs%3E%0A++%3Cfeatures+class%3D%22java.util.Arrays%24ArrayList%22%3E%0A++++%3Ca+class%3D%22org.apache.syncope.common.report.UserReportletConf%24Feature-array%22%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3Eid%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3Eusername%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3EworkflowId%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3Estatus%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3EcreationDate%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3ElastLoginDate%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3EchangePwdDate%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3EpasswordHistorySize%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3EfailedLoginCount%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3Ememberships%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3Eresources%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++%3C%2Fa%3E%0A++%3C%2Ffeatures%3E%0A%3C%2Forg.apache.syncope.common.report.UserReportletConf%3E\"/>\n   <ReportExec Report_id=\"1\" id=\"1\" status=\"SUCCESS\" startDate=\"2012-02-26 15:40:04\" endDate=\"2012-02-26 15:41:04\"/>\n   \n-  <SyncopeLogger logName=\"syncope.audit.authentication.getEntitlements.success\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n+  <SyncopeLogger logName=\"syncope.audit.[REST]:[EntitlementController]:[]:[getOwn]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n \n   <ACT_RU_EXECUTION ID_=\"4\" REV_=\"2\" PROC_INST_ID_=\"4\" PROC_DEF_ID_=\"userWorkflow:1:4\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n   <ACT_RU_TASK ID_=\"5\" REV_=\"2\" EXECUTION_ID_=\"4\" PROC_INST_ID_=\"4\" PROC_DEF_ID_=\"userWorkflow:1:4\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n@@ -974,5 +975,4 @@ under the License.\n   <SyncopeRole_Entitlement entitlement_name=\"SCHEMA_READ\" role_id=\"8\"/>\n   <SyncopeRole_Entitlement entitlement_name=\"ROLE_READ\" role_id=\"8\"/>\n   <SyncopeRole_Entitlement entitlement_name=\"WORKFLOW_FORM_CLAIM\" role_id=\"8\"/>\n-  \n </dataset>"},{"sha":"117cef90926d5829d02a26f4b06f097323d7b5b0","filename":"legal_ext/LICENSE","status":"modified","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/legal_ext%2FLICENSE","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/legal_ext%2FLICENSE","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/legal_ext%2FLICENSE?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -241,6 +241,59 @@ This is licensed under the AL 2.0, see above.\n \n ==\n \n+For AspectJ (http://www.eclipse.org/aspectj/):\n+\n+This program and the accompanying materials are licensed under\n+the terms of the Eclipse Public License v 1.0.\n+\n+Eclipse Public License - v 1.0\n+\n+THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n+1. DEFINITIONS\n+\"Contribution\" means:\n+a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and\n+b) in the case of each subsequent Contributor:\n+i) changes to the Program, and\n+ii) additions to the Program;\n+where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.\n+\"Contributor\" means any person or entity that distributes the Program.\n+\"Licensed Patents\" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.\n+\"Program\" means the Contributions distributed in accordance with this Agreement.\n+\"Recipient\" means anyone who receives the Program under this Agreement, including all Contributors.\n+2. GRANT OF RIGHTS\n+a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.\n+b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.\n+c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.\n+d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.\n+3. REQUIREMENTS\n+A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:\n+a) it complies with the terms and conditions of this Agreement; and\n+b) its license agreement:\n+i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;\n+ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;\n+iii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and\n+iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.\n+When the Program is made available in source code form:\n+a) it must be made available under this Agreement; and\n+b) a copy of this Agreement must be included with each copy of the Program.\n+Contributors may not remove or alter any copyright notices contained within the Program.\n+Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.\n+4. COMMERCIAL DISTRIBUTION\n+Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify every other Contributor (\"Indemnified Contributor\") against any losses, damages and costs (collectively \"Losses\") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.\n+For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.\n+5. NO WARRANTY\n+EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.\n+6. DISCLAIMER OF LIABILITY\n+EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n+7. GENERAL\n+If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.\n+If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.\n+All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.\n+Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.\n+This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.\n+\n+==\n+\n For Groovy (http://groovy.codehaus.org/):\n This is licensed under the AL 2.0, see above.\n "},{"sha":"a4d8a097d9f9087efd6da17281ed2952f46d56a8","filename":"legal_ext/NOTICE","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/legal_ext%2FNOTICE","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/legal_ext%2FNOTICE","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/legal_ext%2FNOTICE?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -29,6 +29,12 @@ This product includes software developed by the Activiti BPM Platform project.\n \n ==\n \n+This product includes AspectJ (>= 1.52) software developed by the Eclipse\n+Software Foundation.\n+This software is included in binary form only.\n+\n+==\n+\n This product includes software developed by the Groovy project.\n \n =="},{"sha":"fd15df5cf1bdc41ea3e2c4817fc7e3560275c911","filename":"pom.xml","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92373efd005c3906f57a2900b3612e3b1a8183f8/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92373efd005c3906f57a2900b3612e3b1a8183f8/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=92373efd005c3906f57a2900b3612e3b1a8183f8","patch":"@@ -308,6 +308,8 @@ under the License.\n     <commons-lang.version>3.1</commons-lang.version>\n \n     <activiti.version>5.14</activiti.version>\n+    \n+    <aspectj.version>1.7.4</aspectj.version>\n \n     <cxf.version>2.7.8-SNAPSHOT</cxf.version>\t\n     <spring.version>3.2.5.RELEASE</spring.version>\n@@ -576,6 +578,12 @@ under the License.\n       </dependency>\n       <!-- /Spring -->\n \n+      <dependency>\n+        <groupId>org.aspectj</groupId>\n+        <artifactId>aspectjweaver</artifactId>\n+        <version>${aspectj.version}</version>\n+      </dependency>\n+\n       <dependency>\n         <groupId>javax.ws.rs</groupId>\n         <artifactId>javax.ws.rs-api</artifactId>\n@@ -602,12 +610,6 @@ under the License.\n         <groupId>org.apache.cxf</groupId>\n         <artifactId>cxf-rt-frontend-jaxws</artifactId>\n         <version>${cxf.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>asm</groupId>\n-            <artifactId>asm</artifactId>\n-          </exclusion>\n-        </exclusions>\n       </dependency>\n       <!-- /CXF -->\n "}]}