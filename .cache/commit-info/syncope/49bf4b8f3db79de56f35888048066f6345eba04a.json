{"sha":"49bf4b8f3db79de56f35888048066f6345eba04a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ5YmY0YjhmM2RiNzlkZTU2ZjM1ODg4MDQ4MDY2ZjYzNDVlYmEwNGE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-07-30T11:30:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-07-30T11:30:31Z"},"message":"[SYNCOPE-117] Moving PreferenceManager from 'raw' cookie management to Wicket's CookieUtils\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1367061 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4ec996a6b2aa6735ac6f7fcfa37ffb3e9964c5e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c4ec996a6b2aa6735ac6f7fcfa37ffb3e9964c5e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/49bf4b8f3db79de56f35888048066f6345eba04a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/49bf4b8f3db79de56f35888048066f6345eba04a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/49bf4b8f3db79de56f35888048066f6345eba04a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/49bf4b8f3db79de56f35888048066f6345eba04a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"08b92d5d83f387f31db37b48d622b29d71dfa84c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/08b92d5d83f387f31db37b48d622b29d71dfa84c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/08b92d5d83f387f31db37b48d622b29d71dfa84c"}],"stats":{"total":156,"additions":64,"deletions":92},"files":[{"sha":"9a655d88bc38b846c1b7f5d6020f43e5c0c76bfd","filename":"console/src/main/java/org/apache/syncope/console/commons/Constants.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49bf4b8f3db79de56f35888048066f6345eba04a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49bf4b8f3db79de56f35888048066f6345eba04a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java?ref=49bf4b8f3db79de56f35888048066f6345eba04a","patch":"@@ -28,8 +28,6 @@ public final class Constants {\n \n     public static final String PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW = \"users.virtual.attributes.view\";\n \n-    public static final String PREFS_COOKIE_NAME = \"syncopeConsolePrefs\";\n-\n     public static final String PREF_USER_SCHEMA_PAGINATOR_ROWS = \"user.schema.paginator.rows\";\n \n     public static final String PREF_USER_DER_SCHEMA_PAGINATOR_ROWS = \"user.derived.schema.paginator.rows\";"},{"sha":"035a474d7bddb4242ff3d97c86ede2c30eb0687c","filename":"console/src/main/java/org/apache/syncope/console/commons/PreferenceManager.java","status":"modified","additions":32,"deletions":68,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49bf4b8f3db79de56f35888048066f6345eba04a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49bf4b8f3db79de56f35888048066f6345eba04a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java?ref=49bf4b8f3db79de56f35888048066f6345eba04a","patch":"@@ -26,11 +26,10 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n-import javax.servlet.http.Cookie;\n import org.apache.wicket.request.Request;\n import org.apache.wicket.request.Response;\n-import org.apache.wicket.request.http.WebRequest;\n-import org.apache.wicket.request.http.WebResponse;\n+import org.apache.wicket.util.cookies.CookieDefaults;\n+import org.apache.wicket.util.cookies.CookieUtils;\n import org.apache.wicket.util.crypt.Base64;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.codehaus.jackson.type.TypeReference;\n@@ -45,29 +44,39 @@ public class PreferenceManager {\n      * Logger.\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(PreferenceManager.class);\n+\n+    private static final String PREFMAN_KEY = \"prefMan\";\n+\n     private static final int ONE_YEAR_TIME = 60 * 60 * 24 * 365;\n+\n     private static final TypeReference MAP_TYPE_REF = new TypeReference<Map<String, String>>() {\n     };\n+\n     private static final List<Integer> PAGINATOR_CHOICES = Arrays.asList(new Integer[]{10, 25, 50});\n+\n     @Autowired\n     private ObjectMapper mapper;\n \n+    private final CookieUtils cookieUtils;\n+\n+    public PreferenceManager() {\n+        CookieDefaults cookieDefaults = new CookieDefaults();\n+        cookieDefaults.setMaxAge(ONE_YEAR_TIME);\n+        cookieUtils = new CookieUtils(cookieDefaults);\n+    }\n+\n     public List<Integer> getPaginatorChoices() {\n         return PAGINATOR_CHOICES;\n     }\n \n     private Map<String, String> getPrefs(final String value) {\n-\n-        HashMap<String, String> prefs;\n-\n+        Map<String, String> prefs;\n         try {\n-\n             if (StringUtils.hasText(value)) {\n                 prefs = mapper.readValue(value, MAP_TYPE_REF);\n             } else {\n                 throw new Exception(\"Invalid cookie value '\" + value + \"'\");\n             }\n-\n         } catch (Exception e) {\n             LOG.debug(\"No preferences found\", e);\n             prefs = new HashMap<String, String>();\n@@ -77,7 +86,6 @@ private Map<String, String> getPrefs(final String value) {\n     }\n \n     private String setPrefs(final Map<String, String> prefs) throws IOException {\n-\n         StringWriter writer = new StringWriter();\n         mapper.writeValue(writer, prefs);\n \n@@ -87,25 +95,16 @@ private String setPrefs(final Map<String, String> prefs) throws IOException {\n     public String get(final Request request, final String key) {\n         String result = null;\n \n-        Cookie prefCookie = null;\n-        if (request instanceof WebRequest) {\n-            prefCookie = ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n-        }\n-        if (prefCookie != null) {\n-\n-            final Map<String, String> prefs = getPrefs(new String(Base64.decodeBase64(prefCookie.getValue().getBytes())));\n-\n+        String prefString = cookieUtils.load(PREFMAN_KEY);\n+        if (prefString != null) {\n+            final Map<String, String> prefs = getPrefs(new String(Base64.decodeBase64(prefString.getBytes())));\n             result = prefs.get(key);\n-\n-        } else {\n-            LOG.debug(\"Could not find cookie []\", Constants.PREFS_COOKIE_NAME);\n         }\n \n         return result;\n     }\n \n     public Integer getPaginatorRows(final Request request, final String key) {\n-\n         Integer result = getPaginatorChoices().get(0);\n \n         String value = get(request, key);\n@@ -121,7 +120,6 @@ public Integer getPaginatorRows(final Request request, final String key) {\n     }\n \n     public List<String> getList(final Request request, final String key) {\n-\n         final List<String> result = new ArrayList<String>();\n \n         final String compound = get(request, key);\n@@ -134,27 +132,12 @@ public List<String> getList(final Request request, final String key) {\n         return result;\n     }\n \n-    /**\n-     * Get the existing preference from the cookie (if present).\n-     * Write the preferences to a cookie.\n-     * \n-     * @param request\n-     * @param response\n-     * @param prefs \n-     */\n     public void set(final Request request, final Response response, final Map<String, List<String>> prefs) {\n-\n-        Cookie prefCookie = null;\n-        if (request instanceof WebRequest) {\n-            prefCookie = ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n-        }\n+        String prefString = cookieUtils.load(PREFMAN_KEY);\n \n         final Map<String, String> current = new HashMap<String, String>();\n-\n-        if (prefCookie == null || !StringUtils.hasText(prefCookie.getValue())) {\n-            prefCookie = new Cookie(Constants.PREFS_COOKIE_NAME, null);\n-        } else {\n-            current.putAll(getPrefs(new String(Base64.decodeBase64(prefCookie.getValue().getBytes()))));\n+        if (prefString != null) {\n+            current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n         }\n \n         // after retrieved previous setting in order to overwrite the key ...\n@@ -163,54 +146,35 @@ public void set(final Request request, final Response response, final Map<String\n         }\n \n         try {\n-            prefCookie.setValue(new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n+            cookieUtils.save(PREFMAN_KEY, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n         } catch (IOException e) {\n-            LOG.error(\"Could not set preferences \" + current, e);\n-        }\n-\n-        prefCookie.setMaxAge(ONE_YEAR_TIME);\n-        if (response instanceof WebResponse) {\n-            ((WebResponse) response).addCookie(prefCookie);\n+            LOG.error(\"Could not save {} info: {}\", new Object[]{getClass().getSimpleName(), current, e});\n         }\n     }\n \n     public void set(final Request request, final Response response, final String key, final String value) {\n+        String prefString = cookieUtils.load(PREFMAN_KEY);\n \n-        Cookie prefCookie = null;\n-        if (request instanceof WebRequest) {\n-            prefCookie = ((WebRequest) request).getCookie(Constants.PREFS_COOKIE_NAME);\n-        }\n-\n-        final Map<String, String> prefs = new HashMap<String, String>();\n-\n-        if (prefCookie == null || !StringUtils.hasText(prefCookie.getValue())) {\n-            prefCookie = new Cookie(Constants.PREFS_COOKIE_NAME, null);\n-        } else {\n-            prefs.putAll(getPrefs(new String(Base64.decodeBase64(prefCookie.getValue().getBytes()))));\n+        final Map<String, String> current = new HashMap<String, String>();\n+        if (prefString != null) {\n+            current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n         }\n \n         // after retrieved previous setting in order to overwrite the key ...\n-        prefs.put(key, value);\n+        current.put(key, value);\n \n         try {\n-            prefCookie.setValue(new String(Base64.encodeBase64(setPrefs(prefs).getBytes())));\n+            cookieUtils.save(PREFMAN_KEY, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n         } catch (IOException e) {\n-            LOG.error(\"Could not set preferences \" + prefs, e);\n-        }\n-\n-        prefCookie.setMaxAge(ONE_YEAR_TIME);\n-        if (response instanceof WebResponse) {\n-            ((WebResponse) response).addCookie(prefCookie);\n+            LOG.error(\"Could not save {} info: {}\", new Object[]{getClass().getSimpleName(), current, e});\n         }\n     }\n \n     public void setList(final Request request, final Response response, final String key, final List<String> values) {\n-\n         set(request, response, key, StringUtils.collectionToDelimitedString(values, \";\"));\n     }\n \n     public void setList(final Request request, final Response response, final Map<String, List<String>> prefs) {\n-\n         set(request, response, prefs);\n     }\n }"},{"sha":"0e21f79a7f9a50e6952fb9b801d623d2ceb5747d","filename":"console/src/main/java/org/apache/syncope/console/pages/DisplayAttributesModalPage.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49bf4b8f3db79de56f35888048066f6345eba04a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49bf4b8f3db79de56f35888048066f6345eba04a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java?ref=49bf4b8f3db79de56f35888048066f6345eba04a","patch":"@@ -25,6 +25,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.lang.ArrayUtils;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n@@ -56,12 +57,15 @@ public class DisplayAttributesModalPage extends BaseModalPage {\n     private static final long serialVersionUID = -4274117450918385110L;\n \n     /**\n-     * Max permitted selections.\n+     * Max allowed selections.\n      */\n     private static final int MAX_SELECTIONS = 9;\n \n-    private List<String> ATTRIBUTES_NOTINCLUDED = Arrays.asList(new String[] { \"attributes\", \"derivedAttributes\",\n-            \"virtualAttributes\", \"serialVersionUID\", \"memberships\", \"resources\", \"password\", \"propagationTOs\" });\n+    private static final String[] ATTRIBUTES_TO_HIDE = new String[]{\n+        \"attributes\", \"derivedAttributes\", \"virtualAttributes\", \"memberships\", \"resources\",\n+        \"serialVersionUID\", \"password\", \"propagationTOs\"};\n+\n+    public static final List<String> DEFAULT_SELECTION = Arrays.asList(new String[]{\"id\", \"username\", \"status\"});\n \n     @SpringBean\n     private PreferenceManager prefMan;\n@@ -86,7 +90,7 @@ protected List<String> load() {\n             // loop on class and all superclasses searching for field\n             while (clazz != null && clazz != Object.class) {\n                 for (Field field : clazz.getDeclaredFields()) {\n-                    if (!ATTRIBUTES_NOTINCLUDED.contains(field.getName())) {\n+                    if (!ArrayUtils.contains(ATTRIBUTES_TO_HIDE, field.getName())) {\n                         details.add(field.getName());\n                     }\n                 }\n@@ -149,7 +153,7 @@ protected List<String> load() {\n         }\n     };\n \n-    private final List<String> userDetails;\n+    private final List<String> selectedDetails;\n \n     private final List<String> selectedSchemas;\n \n@@ -164,15 +168,15 @@ public DisplayAttributesModalPage(final PageReference callerPageRef, final Modal\n         final Form form = new Form(\"form\");\n         form.setModel(new CompoundPropertyModel(this));\n \n-        userDetails = prefMan.getList(getRequest(), Constants.PREF_USERS_DETAILS_VIEW);\n+        selectedDetails = prefMan.getList(getRequest(), Constants.PREF_USERS_DETAILS_VIEW);\n \n         selectedSchemas = prefMan.getList(getRequest(), Constants.PREF_USERS_ATTRIBUTES_VIEW);\n \n         selectedVirSchemas = prefMan.getList(getRequest(), Constants.PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW);\n \n         selectedDerSchemas = prefMan.getList(getRequest(), Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW);\n \n-        final CheckGroup dgroup = new CheckGroup(\"dCheckGroup\", new PropertyModel(this, \"userDetails\"));\n+        final CheckGroup dgroup = new CheckGroup(\"dCheckGroup\", new PropertyModel(this, \"selectedDetails\"));\n         form.add(dgroup);\n \n         final ListView<String> details = new ListView<String>(\"details\", dnames) {\n@@ -269,13 +273,16 @@ protected void populateItem(ListItem<String> item) {\n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n \n-                if (userDetails.size() + selectedSchemas.size() + selectedVirSchemas.size() + selectedDerSchemas.size() > MAX_SELECTIONS) {\n+                if (selectedDetails.size() + selectedSchemas.size() + selectedVirSchemas.size() + selectedDerSchemas.\n+                        size()\n+                        > MAX_SELECTIONS) {\n+\n                     error(getString(\"tooMuchSelections\"));\n                     onError(target, form);\n                 } else {\n                     final Map<String, List<String>> prefs = new HashMap<String, List<String>>();\n \n-                    prefs.put(Constants.PREF_USERS_DETAILS_VIEW, userDetails);\n+                    prefs.put(Constants.PREF_USERS_DETAILS_VIEW, selectedDetails);\n \n                     prefs.put(Constants.PREF_USERS_ATTRIBUTES_VIEW, selectedSchemas);\n "},{"sha":"bc8910e30b3e37b3e1a7c39ae25dde143218879e","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResultSetPanel.java","status":"modified","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49bf4b8f3db79de56f35888048066f6345eba04a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49bf4b8f3db79de56f35888048066f6345eba04a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.java?ref=49bf4b8f3db79de56f35888048066f6345eba04a","patch":"@@ -121,7 +121,7 @@ public class ResultSetPanel extends Panel implements IEventSource {\n      * Application preferences.\n      */\n     @SpringBean\n-    private PreferenceManager preferences;\n+    private PreferenceManager prefMan;\n \n     /**\n      * Role reader for authorizations management.\n@@ -224,7 +224,7 @@ public <T extends AbstractAttributableTO> ResultSetPanel(final String id, final\n         // Result table initialization\n         // ---------------------------\n         // preferences and container must be not null to use it ...\n-        rows = preferences.getPaginatorRows(getRequest(), Constants.PREF_USERS_PAGINATOR_ROWS);\n+        rows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_USERS_PAGINATOR_ROWS);\n         updateResultTable(false);\n         // ---------------------------\n \n@@ -284,15 +284,15 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n         container.add(paginatorForm);\n \n         final DropDownChoice<Integer> rowsChooser = new DropDownChoice<Integer>(\n-                \"rowsChooser\", new PropertyModel(this, \"rows\"), preferences.getPaginatorChoices());\n+                \"rowsChooser\", new PropertyModel(this, \"rows\"), prefMan.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                preferences.set(getRequest(), getResponse(), Constants.PREF_USERS_PAGINATOR_ROWS, String.valueOf(rows));\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_USERS_PAGINATOR_ROWS, String.valueOf(rows));\n \n                 final EventDataWrapper data = new EventDataWrapper();\n                 data.setTarget(target);\n@@ -342,7 +342,7 @@ private void updateResultTable(final boolean create, final int rows) {\n     private List<IColumn<UserTO>> getColumns() {\n         final List<IColumn<UserTO>> columns = new ArrayList<IColumn<UserTO>>();\n \n-        for (String name : preferences.getList(getRequest(), Constants.PREF_USERS_DETAILS_VIEW)) {\n+        for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_DETAILS_VIEW)) {\n \n             Field field = null;\n \n@@ -366,23 +366,26 @@ private List<IColumn<UserTO>> getColumns() {\n             }\n         }\n \n-        for (String name : preferences.getList(getRequest(), Constants.PREF_USERS_ATTRIBUTES_VIEW)) {\n+        for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_ATTRIBUTES_VIEW)) {\n             columns.add(new UserAttrColumn(name, UserAttrColumn.SchemaType.schema));\n         }\n \n-        for (String name : preferences.getList(getRequest(), Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW)) {\n+        for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW)) {\n             columns.add(new UserAttrColumn(name, UserAttrColumn.SchemaType.derivedSchema));\n         }\n \n-        for (String name : preferences.getList(getRequest(), Constants.PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW)) {\n+        for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW)) {\n             columns.add(new UserAttrColumn(name, UserAttrColumn.SchemaType.virtualSchema));\n         }\n \n-        // Add defaults in case of empty selections\n+        // Add defaults in case of no selection\n         if (columns.isEmpty()) {\n-            columns.add(new PropertyColumn(new ResourceModel(\"id\", \"id\"), \"id\", \"id\"));\n-            columns.add(new PropertyColumn(new ResourceModel(\"username\", \"username\"), \"username\", \"username\"));\n-            columns.add(new PropertyColumn(new ResourceModel(\"status\", \"status\"), \"status\", \"status\"));\n+            for (String name : DisplayAttributesModalPage.DEFAULT_SELECTION) {\n+                columns.add(new PropertyColumn(new ResourceModel(name, name), name, name));\n+            }\n+\n+            prefMan.setList(getRequest(), getResponse(), Constants.PREF_USERS_DETAILS_VIEW,\n+                    DisplayAttributesModalPage.DEFAULT_SELECTION);\n         }\n \n         columns.add(new AbstractColumn<UserTO>(new ResourceModel(\"actions\", \"\")) {\n@@ -487,7 +490,7 @@ public void onEvent(final IEvent<?> event) {\n             } else {\n                 updateResultTable(data.isCreate(), data.getRows());\n             }\n-            \n+\n             data.getTarget().add(container);\n         }\n     }"}]}