{"sha":"0b115915cca3a3df9d1f4faf90fa3aa1c504c979","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBiMTE1OTE1Y2NhM2EzZGY5ZDFmNGZhZjkwZmEzYWExYzUwNGM5Nzk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-19T16:35:38Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-19T16:35:38Z"},"message":"REST interface for Tasks completed\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246597 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da16cdd8d3a6e5cbe6a35c357a07521659ba4fe7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/da16cdd8d3a6e5cbe6a35c357a07521659ba4fe7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0b115915cca3a3df9d1f4faf90fa3aa1c504c979","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b115915cca3a3df9d1f4faf90fa3aa1c504c979","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0b115915cca3a3df9d1f4faf90fa3aa1c504c979","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/comments","author":null,"committer":null,"parents":[{"sha":"d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d"}],"stats":{"total":413,"additions":394,"deletions":19},"files":[{"sha":"165fcd56e36f09224eb6943044516c50bce167af","filename":"client/src/main/java/org/syncope/client/to/TaskTO.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java?ref=0b115915cca3a3df9d1f4faf90fa3aa1c504c979","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.client.to;\n \n+import java.util.ArrayList;\n import java.util.List;\n import org.syncope.client.AbstractBaseBean;\n import org.syncope.types.PropagationMode;\n@@ -28,7 +29,11 @@ public class TaskTO extends AbstractBaseBean {\n     private String oldAccountId;\n     private String xmlAttributes;\n     private String resource;\n-    private List<Long> executions;\n+    private List<TaskExecutionTO> executions;\n+\n+    public TaskTO() {\n+        executions = new ArrayList<TaskExecutionTO>();\n+    }\n \n     public String getAccountId() {\n         return accountId;\n@@ -38,19 +43,19 @@ public void setAccountId(String accountId) {\n         this.accountId = accountId;\n     }\n \n-    public boolean addExecution(Long execution) {\n+    public boolean addExecution(TaskExecutionTO execution) {\n         return executions.add(execution);\n     }\n \n-    public boolean removeExecution(Long execution) {\n+    public boolean removeExecution(TaskExecutionTO execution) {\n         return executions.add(execution);\n     }\n \n-    public List<Long> getExecutions() {\n+    public List<TaskExecutionTO> getExecutions() {\n         return executions;\n     }\n \n-    public void setExecutions(List<Long> executions) {\n+    public void setExecutions(List<TaskExecutionTO> executions) {\n         this.executions = executions;\n     }\n "},{"sha":"6b823bf2c67671785448ca248ffab0025afeb545","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=0b115915cca3a3df9d1f4faf90fa3aa1c504c979","patch":"@@ -22,6 +22,9 @@ public enum SyncopeClientExceptionType {\n     InvalidPassword(\n     \"Syncope.InvalidPassword\",\n     \"Syncope.InvalidPassword.reason\"),\n+    IncompleteTaskExecution(\n+    \"Syncope.IncompleteTaskExecution\",\n+    \"Syncope.IncompleteTaskExecution.id\"),\n     InvalidRoles(\n     \"Syncope.InvalidRoles\",\n     \"Syncope.InvalidRoles.name\"),\n@@ -31,6 +34,9 @@ public enum SyncopeClientExceptionType {\n     InvalidSearchCondition(\n     \"Syncope.InvalidSearchCondition\",\n     \"\"),\n+    InvalidTaskExecutionReport(\n+    \"Syncope.InvalidTaskExecutionReport\",\n+    \"Syncope.InvalidTaskExecutionReport.element\"),\n     InvalidUniques(\n     \"Syncope.InvalidUniques\",\n     \"Syncope.InvalidUniques.attributeName\"),"},{"sha":"48936f6d9b93916974ed526a3e5d94bdade256ab","filename":"core/src/main/java/org/syncope/core/persistence/beans/Task.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=0b115915cca3a3df9d1f4faf90fa3aa1c504c979","patch":"@@ -15,6 +15,8 @@\n package org.syncope.core.persistence.beans;\n \n import com.thoughtworks.xstream.XStream;\n+import java.net.URLDecoder;\n+import java.net.URLEncoder;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -125,7 +127,8 @@ public Set<Attribute> getAttributes() {\n                 ApplicationContextManager.getApplicationContext();\n         XStream xStream = (XStream) context.getBean(\"xStream\");\n         try {\n-            result = (Set<Attribute>) xStream.fromXML(xmlAttributes);\n+            result = (Set<Attribute>) xStream.fromXML(\n+                    URLDecoder.decode(xmlAttributes, \"UTF-8\"));\n         } catch (Throwable t) {\n             LOG.error(\"During attribute deserialization\", t);\n         }\n@@ -138,7 +141,8 @@ public void setAttributes(final Set<Attribute> attributes) {\n                 ApplicationContextManager.getApplicationContext();\n         XStream xStream = (XStream) context.getBean(\"xStream\");\n         try {\n-            xmlAttributes = xStream.toXML(attributes);\n+            xmlAttributes = URLEncoder.encode(\n+                    xStream.toXML(attributes), \"UTF-8\");\n         } catch (Throwable t) {\n             LOG.error(\"During attribute serialization\", t);\n         }"},{"sha":"ef4390384edda6f55f40b1b6a8dab20ab0769347","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"added","additions":228,"deletions":0,"changes":228,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=0b115915cca3a3df9d1f4faf90fa3aa1c504c979","patch":"@@ -0,0 +1,228 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javassist.NotFoundException;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.syncope.client.to.TaskExecutionTO;\n+import org.syncope.client.to.TaskTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.beans.TaskExecution;\n+import org.syncope.core.persistence.dao.TaskDAO;\n+import org.syncope.core.persistence.dao.TaskExecutionDAO;\n+import org.syncope.core.persistence.propagation.PropagationManager;\n+import org.syncope.core.rest.data.TaskDataBinder;\n+import org.syncope.types.PropagationMode;\n+import org.syncope.types.SyncopeClientExceptionType;\n+import org.syncope.types.TaskExecutionStatus;\n+\n+@Controller\n+@RequestMapping(\"/task\")\n+public class TaskController extends AbstractController {\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+    @Autowired\n+    private TaskExecutionDAO taskExecutionDAO;\n+    @Autowired\n+    private TaskDataBinder taskDataBinder;\n+    @Autowired\n+    private PropagationManager propagationManager;\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list\")\n+    public List<TaskTO> list() {\n+        List<Task> tasks = taskDAO.findAll();\n+        List<TaskTO> taskTOs = new ArrayList<TaskTO>(tasks.size());\n+        for (Task task : tasks) {\n+            taskTOs.add(taskDataBinder.getTaskTO(task));\n+        }\n+\n+        return taskTOs;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/execution/list\")\n+    public List<TaskExecutionTO> listExecutions() {\n+        List<TaskExecution> executions = taskExecutionDAO.findAll();\n+        List<TaskExecutionTO> executionTOs =\n+                new ArrayList<TaskExecutionTO>(executions.size());\n+        for (TaskExecution execution : executions) {\n+            executionTOs.add(taskDataBinder.getTaskExecutionTO(execution));\n+        }\n+\n+        return executionTOs;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/read/{taskId}\")\n+    public TaskTO read(@PathVariable(\"taskId\") final Long taskId)\n+            throws NotFoundException {\n+\n+        Task task = taskDAO.find(taskId);\n+        if (task == null) {\n+            throw new NotFoundException(\"Task \" + taskId);\n+        }\n+\n+        return taskDataBinder.getTaskTO(task);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/execution/read/{executionId}\")\n+    public TaskExecutionTO readExecution(\n+            @PathVariable(\"executionId\") final Long executionId)\n+            throws NotFoundException {\n+\n+        TaskExecution execution = taskExecutionDAO.find(executionId);\n+        if (execution == null) {\n+            throw new NotFoundException(\"Task execution \" + executionId);\n+        }\n+\n+        return taskDataBinder.getTaskExecutionTO(execution);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/execute/{taskId}\")\n+    public TaskExecutionTO execute(@PathVariable(\"taskId\") final Long taskId)\n+            throws NotFoundException {\n+\n+        Task task = taskDAO.find(taskId);\n+        if (task == null) {\n+            throw new NotFoundException(\"Task \" + taskId);\n+        }\n+\n+        TaskExecution execution = new TaskExecution();\n+        execution.setTask(task);\n+        task.addExecution(execution);\n+\n+        propagationManager.propagate(execution);\n+        execution = taskExecutionDAO.save(execution);\n+\n+        return taskDataBinder.getTaskExecutionTO(execution);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/execution/report/{executionId}\")\n+    public TaskExecutionTO report(\n+            @PathVariable(\"executionId\") final Long executionId,\n+            @RequestParam(\"executionStatus\") final TaskExecutionStatus status,\n+            @RequestParam(\"message\") final String message)\n+            throws NotFoundException, SyncopeClientCompositeErrorException {\n+\n+        TaskExecution execution = taskExecutionDAO.find(executionId);\n+        if (execution == null) {\n+            throw new NotFoundException(\"Task execution \" + executionId);\n+        }\n+\n+        SyncopeClientException invalidReportException =\n+                new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidTaskExecutionReport);\n+        if (execution.getTask().getPropagationMode() != PropagationMode.ASYNC) {\n+            invalidReportException.addElement(\"Propagation mode: \"\n+                    + execution.getTask().getPropagationMode().toString());\n+        }\n+        if (execution.getStatus() != TaskExecutionStatus.SUBMITTED) {\n+            invalidReportException.addElement(\"Current execution status: \"\n+                    + execution.getStatus().toString());\n+        }\n+        if (status != TaskExecutionStatus.SUCCESS\n+                && status != TaskExecutionStatus.FAILURE) {\n+\n+            invalidReportException.addElement(\"Execution status to be set: \"\n+                    + status.toString());\n+        }\n+        if (!invalidReportException.getElements().isEmpty()) {\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+            scce.addException(invalidReportException);\n+            throw scce;\n+        }\n+\n+        execution.setStatus(status);\n+        execution.setMessage(message);\n+        execution = taskExecutionDAO.save(execution);\n+\n+        return taskDataBinder.getTaskExecutionTO(execution);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{taskId}\")\n+    public void delete(@PathVariable(\"taskId\") Long taskId)\n+            throws NotFoundException, SyncopeClientCompositeErrorException {\n+\n+        Task task = taskDAO.find(taskId);\n+        if (task == null) {\n+            throw new NotFoundException(\"Task \" + taskId);\n+        }\n+\n+        SyncopeClientException incompleteTaskExecution =\n+                new SyncopeClientException(\n+                SyncopeClientExceptionType.IncompleteTaskExecution);\n+\n+        for (TaskExecution execution : task.getExecutions()) {\n+            if (execution.getStatus() == TaskExecutionStatus.SUBMITTED) {\n+                incompleteTaskExecution.addElement(\n+                        execution.getId().toString());\n+            }\n+        }\n+        if (!incompleteTaskExecution.getElements().isEmpty()) {\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+            scce.addException(incompleteTaskExecution);\n+            throw scce;\n+        }\n+\n+        taskDAO.delete(task);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/execution/delete/{executionId}\")\n+    public void deleteExecution(@PathVariable(\"executionId\") Long executionId)\n+            throws NotFoundException, SyncopeClientCompositeErrorException {\n+\n+        TaskExecution execution = taskExecutionDAO.find(executionId);\n+        if (execution == null) {\n+            throw new NotFoundException(\"Task execution \" + executionId);\n+        }\n+\n+        if (execution.getStatus() == TaskExecutionStatus.SUBMITTED) {\n+            SyncopeClientException incompleteTaskExecution =\n+                    new SyncopeClientException(\n+                    SyncopeClientExceptionType.IncompleteTaskExecution);\n+            incompleteTaskExecution.addElement(\n+                    execution.getId().toString());\n+\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+            scce.addException(incompleteTaskExecution);\n+            throw scce;\n+        }\n+\n+        taskExecutionDAO.delete(execution);\n+    }\n+}"},{"sha":"9d590d485c44e7dffe743e1b359b9c91a8d96092","filename":"core/src/main/java/org/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=0b115915cca3a3df9d1f4faf90fa3aa1c504c979","patch":"@@ -46,8 +46,6 @@ public class DerivedSchemaDataBinder {\n     @Autowired\n     private SchemaDAO schemaDAO;\n     @Autowired\n-    private DerivedSchemaDAO derivedSchemaDAO;\n-    @Autowired\n     private JexlEngine jexlEngine;\n \n     private <T extends AbstractSchema> AbstractDerivedSchema populate("},{"sha":"efa2c2fccc8bc8e9660d8061988c14b398597547","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=0b115915cca3a3df9d1f4faf90fa3aa1c504c979","patch":"@@ -49,8 +49,6 @@ public class SchemaDataBinder {\n     private static final String[] ignoreSchemaProperties = {\n         \"derivedSchemas\", \"attributes\"};\n     @Autowired\n-    private SchemaDAO schemaDAO;\n-    @Autowired\n     private DerivedSchemaDAO derivedSchemaDAO;\n     @Autowired\n     private JexlEngine jexlEngine;"},{"sha":"7f053c430e5c5582c1ceb42df56036ca2a040a0a","filename":"core/src/main/java/org/syncope/core/rest/data/TaskDataBinder.java","status":"renamed","additions":27,"deletions":7,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=0b115915cca3a3df9d1f4faf90fa3aa1c504c979","patch":"@@ -14,31 +14,51 @@\n  */\n package org.syncope.core.rest.data;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.TaskExecutionTO;\n+import org.syncope.client.to.TaskTO;\n+import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TaskExecution;\n \n @Component\n @Transactional(rollbackFor = {\n     Throwable.class\n })\n-public class TaskExecutionDataBinder {\n+public class TaskDataBinder {\n \n     /**\n-     * Properties to be ignored during bean copy.\n-     * @see BeanUtils\n+     * Logger.\n      */\n-    private static final String[] IGNORE_PROPERTIES = {\"id\", \"task\"};\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            TaskDataBinder.class);\n+    private static final String[] IGNORE_TASK_PROPERTIES = {\n+        \"executions\", \"resource\"};\n+    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\n+        \"task\"};\n \n     public TaskExecutionTO getTaskExecutionTO(final TaskExecution execution) {\n         TaskExecutionTO executionTO = new TaskExecutionTO();\n-\n-        BeanUtils.copyProperties(execution, executionTO, IGNORE_PROPERTIES);\n-        executionTO.setId(execution.getId());\n+        BeanUtils.copyProperties(execution, executionTO,\n+                                 IGNORE_TASK_EXECUTION_PROPERTIES);\n         executionTO.setTask(execution.getTask().getId());\n \n         return executionTO;\n     }\n+\n+    public TaskTO getTaskTO(final Task task) {\n+        TaskTO taskTO = new TaskTO();\n+        BeanUtils.copyProperties(task, taskTO, IGNORE_TASK_PROPERTIES);\n+\n+        for (TaskExecution execution : task.getExecutions()) {\n+            taskTO.addExecution(getTaskExecutionTO(execution));\n+        }\n+\n+        taskTO.setResource(task.getResource().getName());\n+\n+        return taskTO;\n+    }\n }","previous_filename":"core/src/main/java/org/syncope/core/rest/data/TaskExecutionDataBinder.java"},{"sha":"8a3b41792ec948387b348cc9ee7cd88f8edb2e57","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=0b115915cca3a3df9d1f4faf90fa3aa1c504c979","patch":"@@ -0,0 +1,114 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest;\n+\n+import java.util.Arrays;\n+import static org.junit.Assert.*;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.to.TaskExecutionTO;\n+import org.syncope.client.to.TaskTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.types.SyncopeClientExceptionType;\n+import org.syncope.types.TaskExecutionStatus;\n+\n+public class TaskTestITCase extends AbstractTest {\n+\n+    @Test\n+    public final void list() {\n+        List<TaskTO> tasks = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"task/list\", TaskTO[].class));\n+        assertNotNull(tasks);\n+        assertFalse(tasks.isEmpty());\n+        for (TaskTO task : tasks) {\n+            assertNotNull(task);\n+        }\n+    }\n+\n+    @Test\n+    public final void listExecutions() {\n+        List<TaskExecutionTO> executions = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"task/execution/list\", TaskExecutionTO[].class));\n+        assertNotNull(executions);\n+        assertFalse(executions.isEmpty());\n+        for (TaskExecutionTO execution : executions) {\n+            assertNotNull(execution);\n+        }\n+    }\n+\n+    @Test\n+    public final void read() {\n+        TaskTO taskTO = restTemplate.getForObject(\n+                BASE_URL + \"task/read/{taskId}\", TaskTO.class, 1);\n+\n+        assertNotNull(taskTO);\n+        assertNotNull(taskTO.getExecutions());\n+        assertFalse(taskTO.getExecutions().isEmpty());\n+    }\n+\n+    @Test\n+    public final void readExecution() {\n+        TaskExecutionTO taskTO = restTemplate.getForObject(\n+                BASE_URL + \"task/execution/read/{taskId}\",\n+                TaskExecutionTO.class, 1);\n+        assertNotNull(taskTO);\n+    }\n+\n+        @Test\n+    public final void deal() {\n+        try {\n+            restTemplate.delete(BASE_URL + \"task/delete/{taskId}\", 0);\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+\n+        TaskExecutionTO execution = restTemplate.getForObject(\n+                BASE_URL + \"task/execute/{taskId}\",\n+                TaskExecutionTO.class, 1);\n+        assertEquals(execution.getStatus(), TaskExecutionStatus.SUBMITTED);\n+\n+        Exception exception = null;\n+        try {\n+            restTemplate.delete(BASE_URL + \"task/delete/{taskId}\", 1);\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            assertTrue(scce.hasException(\n+                    SyncopeClientExceptionType.IncompleteTaskExecution));\n+            exception = scce;\n+        }\n+        assertNotNull(exception);\n+\n+        execution = restTemplate.getForObject(\n+                BASE_URL + \"task/execution/report/{executionId}\"\n+                + \"?executionStatus=SUCCESS&message=OK\",\n+                TaskExecutionTO.class, execution.getId());\n+        assertEquals(execution.getStatus(), TaskExecutionStatus.SUCCESS);\n+        assertEquals(execution.getMessage(), \"OK\");\n+\n+        restTemplate.delete(BASE_URL + \"task/delete/{taskId}\", 1);\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"task/execution/read/{executionId}\",\n+                    TaskExecutionTO.class, execution.getId());\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+    }\n+\n+}"},{"sha":"0086ae74769c1763149d9d01d8c142938ec63d8b","filename":"core/src/test/resources/content.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b115915cca3a3df9d1f4faf90fa3aa1c504c979/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=0b115915cca3a3df9d1f4faf90fa3aa1c504c979","patch":"@@ -258,7 +258,9 @@\n                    schemaName=\"firstname\" schemaType=\"UserSchema\" mandatoryCondition=\"type == 'F'\"\n                    accountid=\"F\" password=\"F\"/>\n \n-    <Task id=\"1\" xmlAttributes=\"\" propagationMode=\"ASYNC\" resourceOperationType=\"UPDATE\" resource_name=\"ws-target-resource-2\"/>\n+    <Task id=\"1\" propagationMode=\"ASYNC\" resourceOperationType=\"UPDATE\"\n+                 resource_name=\"ws-target-resource-2\"\n+                 xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n     <TaskExecution id=\"1\" task_id=\"1\"/>\n \n     <Entitlement name=\"base\"/>"}]}