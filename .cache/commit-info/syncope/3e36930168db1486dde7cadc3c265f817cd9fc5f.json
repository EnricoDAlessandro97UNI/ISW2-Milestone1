{"sha":"3e36930168db1486dde7cadc3c265f817cd9fc5f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNlMzY5MzAxNjhkYjE0ODZkZGU3Y2FkYzNjMjY1ZjgxN2NkOWZjNWY=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-03-05T16:02:45Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-03-05T16:50:23Z"},"message":"[SYNCOPE-1225] Now providing search engine for Schemas","tree":{"sha":"9a9846732e00e409c55d8cfd062dd04810d43795","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9a9846732e00e409c55d8cfd062dd04810d43795"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3e36930168db1486dde7cadc3c265f817cd9fc5f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e36930168db1486dde7cadc3c265f817cd9fc5f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3e36930168db1486dde7cadc3c265f817cd9fc5f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e36930168db1486dde7cadc3c265f817cd9fc5f/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"161472d5546f5470ab3e84cf1819d477ad7316bf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/161472d5546f5470ab3e84cf1819d477ad7316bf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/161472d5546f5470ab3e84cf1819d477ad7316bf"}],"stats":{"total":426,"additions":361,"deletions":65},"files":[{"sha":"b696840338e436096ed208b581af98444a4ee185","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":33,"deletions":7,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -50,6 +50,7 @@\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n@@ -79,6 +80,8 @@ public class SchemaTypePanel extends TypesDirectoryPanel<SchemaTO, SchemaProvide\n \n     private final SchemaType schemaType;\n \n+    private String keyword;\n+\n     public SchemaTypePanel(final String id, final SchemaType schemaType, final PageReference pageRef) {\n         super(id, pageRef);\n         this.restClient = new SchemaRestClient();\n@@ -249,30 +252,37 @@ private SchemaProvider(final int paginatorRows, final SchemaType schemaType) {\n \n         @Override\n         public Iterator<SchemaTO> iterator(final long first, final long count) {\n-            final List<SchemaTO> list = restClient.getSchemas(this.schemaType);\n-            Collections.sort(list, comparator);\n+            List<SchemaTO> schemaList = StringUtils.isBlank(keyword)\n+                    ? restClient.getSchemas(this.schemaType)\n+                    : restClient.getSchemas(this.schemaType, keyword, new String[0]);\n+            Collections.sort(schemaList, comparator);\n \n             if (SchemaType.PLAIN == this.schemaType) {\n                 final List<String> configurations = confRestClient.list().stream().\n                         map(AttrTO::getSchema).collect(Collectors.toList());\n \n                 final List<SchemaTO> res = new ArrayList<>();\n-                list.stream().\n+                schemaList.stream().\n                         filter(item -> !configurations.contains(item.getKey())).\n                         forEachOrdered(item -> {\n                             res.add(item);\n                         });\n+\n                 return res.subList((int) first, (int) first + (int) count).iterator();\n             } else {\n-                return list.subList((int) first, (int) first + (int) count).iterator();\n+                return schemaList.subList((int) first, (int) first + (int) count).iterator();\n             }\n         }\n \n         @Override\n         public long size() {\n-            int size = restClient.getSchemas(this.schemaType).size();\n-            return SchemaType.PLAIN == this.schemaType\n-                    ? size - confRestClient.list().size()\n+            int size = StringUtils.isBlank(keyword)\n+                    ? restClient.getSchemas(this.schemaType).size()\n+                    : restClient.getSchemas(this.schemaType, keyword, new String[0]).size();\n+            return size > confRestClient.list().size()\n+                    ? (SchemaType.PLAIN == this.schemaType\n+                            ? size - confRestClient.list().size()\n+                            : size)\n                     : size;\n         }\n \n@@ -281,4 +291,20 @@ public IModel<SchemaTO> model(final SchemaTO object) {\n             return new CompoundPropertyModel<>(object);\n         }\n     }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof SchemaTypePanelWithSearch.SchemaSearchEvent) {\n+            SchemaTypePanelWithSearch.SchemaSearchEvent payload =\n+                    SchemaTypePanelWithSearch.SchemaSearchEvent.class.cast(event.getPayload());\n+            final AjaxRequestTarget target = payload.getTarget();\n+            keyword = payload.getKeyword();\n+\n+            updateResultTable(target);\n+            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+        } else {\n+            super.onEvent(event);\n+        }\n+    }\n+\n }"},{"sha":"c822630a61fd7ac2c2bd7ac5e9728f7ef21025f0","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanelWithSearch.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.Model;\n+\n+public class SchemaTypePanelWithSearch extends Panel {\n+\n+    private static final long serialVersionUID = 433565065115855671L;\n+\n+    private final SchemaTypePanel schemaTypePanel;\n+\n+    public SchemaTypePanelWithSearch(final String id,\n+            final SchemaType schemaType,\n+            final PageReference pageReference) {\n+        super(id);\n+\n+        schemaTypePanel = new SchemaTypePanel(id, schemaType, pageReference);\n+\n+        addSearchBox();\n+        add(schemaTypePanel);\n+    }\n+\n+    private void addSearchBox() {\n+        final Model<String> queryFilter = new Model<>(StringUtils.EMPTY);\n+\n+        final WebMarkupContainer searchBoxContainer = new WebMarkupContainer(\"searchBox\");\n+        final Form<?> form = new Form<>(\"form\");\n+        final AjaxTextFieldPanel filter = new AjaxTextFieldPanel(\n+                \"filter\",\n+                \"filter\",\n+                queryFilter,\n+                false);\n+        filter.hideLabel().setOutputMarkupId(true);\n+        form.add(filter);\n+\n+        form.add(new AjaxSubmitLink(\"search\") {\n+\n+            private static final long serialVersionUID = -1765773642975892072L;\n+\n+            @Override\n+            protected void onAfterSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                super.onAfterSubmit(target, form);\n+\n+                send(SchemaTypePanelWithSearch.this,\n+                        Broadcast.DEPTH,\n+                        new SchemaSearchEvent(target, queryFilter.getObject()));\n+            }\n+        });\n+        searchBoxContainer.add(form);\n+\n+        add(searchBoxContainer);\n+    }\n+\n+    public static class SchemaSearchEvent implements Serializable {\n+\n+        private static final long serialVersionUID = -282052400565266028L;\n+\n+        private final AjaxRequestTarget target;\n+\n+        private final String keyword;\n+\n+        public SchemaSearchEvent(final AjaxRequestTarget target, final String keyword) {\n+            this.target = target;\n+            this.keyword = keyword;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public String getKeyword() {\n+            return keyword;\n+        }\n+\n+    }\n+\n+}"},{"sha":"7ad295b29a6e52f60aa1a8d1763d055873e20963","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemasPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -55,7 +55,7 @@ private List<ITab> buildTabList() {\n \n                 @Override\n                 public Panel getPanel(final String panelId) {\n-                    return new SchemaTypePanel(panelId, schemaType, pageReference);\n+                    return new SchemaTypePanelWithSearch(panelId, schemaType, pageReference);\n                 }\n             });\n         }"},{"sha":"34e91feb9c50425b0bf6ce521caf003c6e10c24a","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -83,19 +83,36 @@ public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, fina\n     }\n \n     public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, final String... kind) {\n+        return doGetSchemas(schemaType, null, kind);\n+    }\n+\n+    public <T extends SchemaTO> List<T> getSchemas(\n+            final SchemaType schemaType, final String keyword, final String... kind) {\n+        return doGetSchemas(schemaType, keyword, kind);\n+    }\n+\n+    private <T extends SchemaTO> List<T> doGetSchemas(\n+            final SchemaType schemaType, final String keyword, final String... kind) {\n         List<T> schemas = new ArrayList<>();\n \n         try {\n+            SchemaQuery.Builder schemaQuery =\n+                    new SchemaQuery.Builder().type(schemaType);\n+            if (keyword != null) {\n+                schemaQuery.keyword(keyword);\n+            }\n+\n             if (kind == null || kind.length == 0) {\n                 schemas.addAll(getService(SchemaService.class).\n-                        <T>list(new SchemaQuery.Builder().type(schemaType).build()));\n+                        <T>list(schemaQuery.build()));\n             } else {\n                 schemas.addAll(getService(SchemaService.class).\n-                        <T>list(new SchemaQuery.Builder().type(schemaType).anyTypeClasses(kind).build()));\n+                        <T>list(schemaQuery.anyTypeClasses(kind).build()));\n             }\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all {} schemas for {}\", schemaType, kind, e);\n         }\n+\n         return schemas;\n     }\n "},{"sha":"6caa8b63dc598539c15c476ef7769cda406d20c1","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/SchemaTypePanelWithSearch.html","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.html?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -0,0 +1,33 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"searchBox\">\n+      <form wicket:id=\"form\">\n+        <div class=\"form-group input-group\">\n+          <span wicket:id=\"filter\">[FILTER]</span>\n+          <span class=\"input-group-addon\">\n+            <a href=\"#\" wicket:id=\"search\"><i class=\"glyphicon glyphicon-search\"></i></a>\n+          </span>\n+        </div>\n+      </form>\n+    </div>\n+    <div wicket:id=\"content\"></div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"1184853bd771285e63451f12b07789d8141f93b0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SchemaQuery.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -61,6 +61,12 @@ public Builder anyTypeClasses(final String... anyTypeClasses) {\n             return anyTypeClasses(Arrays.asList(anyTypeClasses));\n         }\n \n+        public Builder keyword(final String keyword) {\n+            instance.setKeyword(keyword);\n+\n+            return this;\n+        }\n+\n         public SchemaQuery build() {\n             if (instance.type == null) {\n                 throw new IllegalArgumentException(\"type is required\");\n@@ -73,6 +79,8 @@ public SchemaQuery build() {\n \n     private List<String> anyTypeClasses;\n \n+    private String keyword;\n+\n     public SchemaType getType() {\n         return type;\n     }\n@@ -92,4 +100,13 @@ public void setAnyTypeClasses(final List<String> anyTypeClasses) {\n         this.anyTypeClasses = anyTypeClasses;\n     }\n \n+    public String getKeyword() {\n+        return keyword;\n+    }\n+\n+    @QueryParam(\"keyword\")\n+    public void setKeyword(final String keyword) {\n+        this.keyword = keyword;\n+    }\n+\n }"},{"sha":"07682800c9bff6eeb01e9272718e61374daed2ed","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -59,7 +59,8 @@ public interface SchemaService extends JAXRSService {\n      *\n      * @param <T> actual SchemaTO\n      * @param query query conditions\n-     * @return list of schemas with matching type, for the given anyTypeClass if provided\n+     * @return list of schemas with matching type, for the given anyTypeClass if provided,\n+     * with names containing keyword if provided\n      */\n     @GET\n     @Path(\"{type}\")"},{"sha":"8f7dbc32900d826a53f234458da3e127245bb048","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":23,"deletions":3,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -148,7 +148,21 @@ public void delete(final SchemaType schemaType, final String schemaKey) {\n     @SuppressWarnings({ \"unchecked\", \"Convert2Lambda\" })\n     public <T extends SchemaTO> List<T> list(\n             final SchemaType schemaType, final List<String> anyTypeClasses) {\n+        return doSearch(schemaType, anyTypeClasses, null);\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends SchemaTO> List<T> search(\n+            final SchemaType schemaType, final List<String> anyTypeClasses, final String keyword) {\n+        return doSearch(schemaType, anyTypeClasses,\n+                keyword != null\n+                        ? StringUtils.replaceChars(keyword, \"*\", \"%\")\n+                        : null);\n+    }\n \n+    private <T extends SchemaTO> List<T> doSearch(\n+            final SchemaType schemaType, final List<String> anyTypeClasses, final String keyword) {\n         List<AnyTypeClass> classes = new ArrayList<>(anyTypeClasses == null ? 0 : anyTypeClasses.size());\n         if (anyTypeClasses != null) {\n             anyTypeClasses.remove(AnyTypeKind.USER.name());\n@@ -166,7 +180,9 @@ public <T extends SchemaTO> List<T> list(\n         List<T> result;\n         switch (schemaType) {\n             case VIRTUAL:\n-                result = (classes.isEmpty() ? virSchemaDAO.findAll() : virSchemaDAO.findByAnyTypeClasses(classes)).\n+                result = (classes.isEmpty()\n+                        ? (keyword == null ? virSchemaDAO.findAll() : virSchemaDAO.search(keyword))\n+                        : virSchemaDAO.findByAnyTypeClasses(classes)).\n                         stream().map(new Function<VirSchema, T>() {\n \n                             @Override\n@@ -177,7 +193,9 @@ public T apply(final VirSchema schema) {\n                 break;\n \n             case DERIVED:\n-                result = (classes.isEmpty() ? derSchemaDAO.findAll() : derSchemaDAO.findByAnyTypeClasses(classes)).\n+                result = (classes.isEmpty()\n+                        ? (keyword == null ? derSchemaDAO.findAll() : derSchemaDAO.search(keyword))\n+                        : derSchemaDAO.findByAnyTypeClasses(classes)).\n                         stream().map(new Function<DerSchema, T>() {\n \n                             @Override\n@@ -189,7 +207,9 @@ public T apply(final DerSchema schema) {\n \n             case PLAIN:\n             default:\n-                result = (classes.isEmpty() ? plainSchemaDAO.findAll() : plainSchemaDAO.findByAnyTypeClasses(classes)).\n+                result = (classes.isEmpty()\n+                        ? (keyword == null ? plainSchemaDAO.findAll() : plainSchemaDAO.search(keyword))\n+                        : plainSchemaDAO.findByAnyTypeClasses(classes)).\n                         stream().map(new Function<PlainSchema, T>() {\n \n                             @Override"},{"sha":"de2df906f2b9f6106e3cfc28305c1af02c4503f6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SchemaDAO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -30,7 +30,9 @@\n     List<S> findByAnyTypeClasses(Collection<AnyTypeClass> anyTypeClasses);\n \n     List<S> findAll();\n-\n+    \n+    List<S> search(String keyword);\n+    \n     S save(S derSchema);\n \n     void delete(String key);"},{"sha":"98e1beaf9bfc57015e7f25089a1eb226ad37785d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -62,6 +62,15 @@ public List<DerSchema> findAll() {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<DerSchema> search(final String keyword) {\n+        TypedQuery<DerSchema> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPADerSchema.class.getSimpleName() + \" e\"\n+                + \" WHERE e.id LIKE :keyword\", DerSchema.class);\n+        query.setParameter(\"keyword\", keyword);\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public DerSchema save(final DerSchema derSchema) {\n         return entityManager().merge(derSchema);"},{"sha":"8edc69619de908308c2a42c2248640b121df6020","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -91,6 +91,15 @@ public List<PlainSchema> findAll() {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<PlainSchema> search(final String keyword) {\n+        TypedQuery<PlainSchema> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName() + \" e\"\n+                + \" WHERE e.id LIKE :keyword\", PlainSchema.class);\n+        query.setParameter(\"keyword\", keyword);\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n         TypedQuery<T> query = entityManager().createQuery("},{"sha":"b42b40a65b0647d31fe4918f8ac9faebc61a2546","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -114,6 +114,15 @@ public List<VirSchema> findAll() {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<VirSchema> search(final String keyword) {\n+        TypedQuery<VirSchema> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAVirSchema.class.getSimpleName() + \" e\"\n+                + \" WHERE e.id LIKE :keyword\", VirSchema.class);\n+        query.setParameter(\"keyword\", keyword);\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public VirSchema save(final VirSchema virSchema) {\n         return entityManager().merge(virSchema);"},{"sha":"5c047c575f594321e8de5acdf92be6c0515ebae3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerSchemaTest.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -46,6 +46,12 @@ public void findAll() {\n         assertEquals(10, list.size());\n     }\n \n+    @Test\n+    public void search() {\n+        List<DerSchema> schemas = derSchemaDAO.search(\"mderivedd%\");\n+        assertEquals(1, schemas.size());\n+    }\n+\n     @Test\n     public void findByName() {\n         DerSchema attributeSchema = derSchemaDAO.find(\"cn\");"},{"sha":"77de66fd534f30e1ef53ca60742c6b2f2a4de301","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -55,6 +55,12 @@ public void findAll() {\n         assertEquals(43, schemas.size());\n     }\n \n+    @Test\n+    public void search() {\n+        List<PlainSchema> schemas = plainSchemaDAO.search(\"fullna%\");\n+        assertEquals(1, schemas.size());\n+    }\n+\n     @Test\n     public void findByName() {\n         PlainSchema schema = plainSchemaDAO.find(\"fullname\");"},{"sha":"19965755ab0f1adb629ba6d8310f0f189b377a00","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -53,6 +53,12 @@ public void findAll() {\n         assertEquals(3, list.size());\n     }\n \n+    @Test\n+    public void search() {\n+        List<VirSchema> schemas = virSchemaDAO.search(\"rvirtuald%\");\n+        assertEquals(1, schemas.size());\n+    }\n+\n     @Test\n     public void findByName() {\n         VirSchema attributeSchema = virSchemaDAO.find(\"virtualdata\");"},{"sha":"10db5b5dd94dee42fc3b4b0c6f67e17eef6b97a7","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -53,7 +53,7 @@ public void delete(final SchemaType schemaType, final String key) {\n \n     @Override\n     public <T extends SchemaTO> List<T> list(final SchemaQuery query) {\n-        return logic.list(query.getType(), query.getAnyTypeClasses());\n+        return logic.search(query.getType(), query.getAnyTypeClasses(), query.getKeyword());\n     }\n \n     @Override"},{"sha":"1edadab4aad0904e2d2758795ec894c79ce1614c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractTypesITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractTypesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractTypesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractTypesITCase.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -27,10 +27,10 @@\n public abstract class AbstractTypesITCase extends AbstractConsoleITCase {\n \n     protected static final String PLAIN_DATATABLE_PATH = \"body:content:tabbedPanel:panel:\"\n-            + \"accordionPanel:tabs:0:body:content:container:content:searchContainer:resultTable\";\n+            + \"accordionPanel:tabs:0:body:content:content:container:content:searchContainer:resultTable\";\n \n     protected static final String VIRTUAL_DATATABLE_PATH = \"body:content:tabbedPanel:panel:\"\n-            + \"accordionPanel:tabs:2:body:content:container:content:searchContainer:resultTable\";\n+            + \"accordionPanel:tabs:2:body:content:content:container:content:searchContainer:resultTable\";\n \n     protected static final String DATATABLE_PATH =\n             \"body:content:tabbedPanel:panel:container:content:searchContainer:resultTable\";\n@@ -88,19 +88,19 @@ protected void browsingToVirtualSchemas() {\n     protected void createPlainSchema(final String key) {\n         browsingToPlainSchemas();\n         TESTER.clickLink(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:container:content:add\");\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:content:container:content:add\");\n \n         TESTER.assertComponent(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer\",\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:0:outer\",\n                 Modal.class);\n \n         final FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:form\");\n+                + \"accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:0:outer:form\");\n         formTester.setValue(\"content:details:form:key:textField\", key);\n         formTester.setValue(\"content:details:form:type:dropDownChoiceField\", \"3\");\n \n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n \n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n "},{"sha":"695011f6fcbb3c5e51e3966c18b51314cd506c6a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/SchemasITCase.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSchemasITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSchemasITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSchemasITCase.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -45,32 +45,32 @@ public void readPlainSchema() {\n                 Constants.ON_CLICK);\n \n         TESTER.clickLink(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:1:outer:\"\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n \n         TESTER.assertComponent(\n                 \"body:content:tabbedPanel:\"\n-                + \"panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:\"\n+                + \"panel:accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:0:outer:\"\n                 + \"form:content:kindForm:kind:dropDownChoiceField\", DropDownChoice.class);\n     }\n \n     @Test\n     public void createPlainSchema() {\n         browsingToPlainSchemas();\n-        TESTER.clickLink(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:container:content:add\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:container:content:add\");\n \n-        TESTER.assertComponent(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer\",\n+        TESTER.assertComponent(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer\",\n                 Modal.class);\n \n         final FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:form\");\n+                + \"accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:0:outer:form\");\n         formTester.setValue(\"content:details:form:key:textField\", \"zBoolean\");\n         formTester.setValue(\"content:details:form:type:dropDownChoiceField\", \"3\");\n \n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:\"\n-                + \"outer:dialog:footer:inputs:0:submit\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n \n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n \n@@ -88,21 +88,20 @@ public void updatePlainSchema() {\n         assertNotNull(result);\n \n         TESTER.executeAjaxEvent(result.getPageRelativePath(), Constants.ON_CLICK);\n-        TESTER.clickLink(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:1:outer:\"\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n \n-        TESTER.assertComponent(\n-                \"body:content:tabbedPanel:\"\n-                + \"panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:\"\n+        TESTER.assertComponent(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:\"\n                 + \"form:content:kindForm:kind:dropDownChoiceField\", DropDownChoice.class);\n \n-        FormTester formTester = TESTER.newFormTester(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:form\");\n+        FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:form\");\n         formTester.setValue(\"content:details:form:multivalue:checkboxField\", \"true\");\n \n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\",\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\",\n                 true);\n \n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n@@ -113,20 +112,20 @@ public void deletePlainSchema() {\n         browsingToPlainSchemas();\n         //create new Plain Schema\n         final String schemaName = \"zStringDelete\";\n-        TESTER.clickLink(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:container:content:add\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:container:content:add\");\n \n-        TESTER.assertComponent(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer\",\n+        TESTER.assertComponent(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer\",\n                 Modal.class);\n \n         final FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:form\");\n+                + \"accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:0:outer:form\");\n         formTester.setValue(\"content:details:form:key:textField\", schemaName);\n         formTester.setValue(\"content:details:form:type:dropDownChoiceField\", \"0\");\n \n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n \n         TESTER.assertInfoMessages(\"Operation executed successfully\");;\n \n@@ -145,12 +144,12 @@ public void deletePlainSchema() {\n         TESTER.executeAjaxEvent(result.getPageRelativePath(), Constants.ON_CLICK);\n \n         TESTER.getRequest().addParameter(\"confirm\", \"true\");\n-        TESTER.clickLink(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:1:outer:\"\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\");\n \n-        TESTER.executeAjaxEvent(TESTER.getComponentFromLastRenderedPage(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:1:outer:\"\n+        TESTER.executeAjaxEvent(TESTER.getComponentFromLastRenderedPage(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:0:body:content:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\"),\n                 Constants.ON_CLICK);\n \n@@ -163,28 +162,29 @@ public void deletePlainSchema() {\n     @Test\n     public void createVirtualSchema() {\n         browsingToVirtualSchemas();\n-        TESTER.clickLink(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:2:body:content:container:content:add\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:2:body:content:content:container:content:add\");\n \n-        TESTER.assertComponent(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:2:body:content:outerObjectsRepeater:0:outer\",\n+        TESTER.assertComponent(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:2:body:content:content:outerObjectsRepeater:0:outer\",\n                 Modal.class);\n \n-        final FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:2:body:content:outerObjectsRepeater:0:outer:form\");\n+        final FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:2:body:content:content:outerObjectsRepeater:0:outer:form\");\n \n         formTester.setValue(\"content:details:form:resource:dropDownChoiceField\", \"0\");\n         TESTER.executeAjaxEvent(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:2:body:content:outerObjectsRepeater:0:outer:form:\"\n+                + \"accordionPanel:tabs:2:body:content:content:outerObjectsRepeater:0:outer:form:\"\n                 + \"content:details:form:resource:dropDownChoiceField\", Constants.ON_CHANGE);\n \n         formTester.setValue(\"content:details:form:key:textField\", \"mynewvir\");\n         formTester.setValue(\"content:details:form:resource:dropDownChoiceField\", \"0\");\n         formTester.setValue(\"content:details:form:anyType:dropDownChoiceField\", \"0\");\n         formTester.setValue(\"content:details:form:extAttrName:textField\", \"virattr\");\n \n-        TESTER.executeAjaxEvent(\"body:content:tabbedPanel:panel:accordionPanel:tabs:2:body:content:\"\n-                + \"outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\", Constants.ON_CLICK);\n+        TESTER.executeAjaxEvent(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:2:body:content:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\",\n+                Constants.ON_CLICK);\n \n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n         TESTER.cleanupFeedbackMessages();\n@@ -194,12 +194,12 @@ public void createVirtualSchema() {\n         TESTER.executeAjaxEvent(result.getPageRelativePath(), Constants.ON_CLICK);\n \n         TESTER.getRequest().addParameter(\"confirm\", \"true\");\n-        TESTER.clickLink(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:2:body:content:outerObjectsRepeater:1:outer:\"\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:2:body:content:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\");\n \n-        TESTER.executeAjaxEvent(TESTER.getComponentFromLastRenderedPage(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:2:body:content:outerObjectsRepeater:1:outer:\"\n+        TESTER.executeAjaxEvent(TESTER.getComponentFromLastRenderedPage(\"body:content:tabbedPanel:panel:accordionPanel:\"\n+                + \"tabs:2:body:content:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\"),\n                 Constants.ON_CLICK);\n "},{"sha":"daa9024332c27b2ea4555671a43ffeef940239e9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DerSchemaITCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -46,6 +46,16 @@ public void list() {\n         }\n     }\n \n+    @Test\n+    public void search() {\n+        List<DerSchemaTO> derSchemas =\n+                schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).keyword(\"mderivedd*\").build());\n+        assertFalse(derSchemas.isEmpty());\n+        for (DerSchemaTO derivedSchemaTO : derSchemas) {\n+            assertNotNull(derivedSchemaTO);\n+        }\n+    }\n+\n     @Test\n     public void read() {\n         DerSchemaTO derivedSchemaTO = schemaService.read(SchemaType.DERIVED, \"cn\");"},{"sha":"48ed9b43fcc88e38ac3d818d1774612bad72f18e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -261,6 +261,16 @@ public void list() {\n         });\n     }\n \n+    @Test\n+    public void search() {\n+        List<PlainSchemaTO> schemas =\n+                schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).keyword(\"fullna*\").build());\n+        assertFalse(schemas.isEmpty());\n+        for (PlainSchemaTO schemaTO : schemas) {\n+            assertNotNull(schemaTO);\n+        }\n+    }\n+\n     @Test\n     public void listByAnyTypeClass() {\n         List<PlainSchemaTO> userSchemas = schemaService.list("},{"sha":"af9d1719174202947ae77f31e5923571db4a2189","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirSchemaITCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -50,6 +50,16 @@ public void list() {\n         }\n     }\n \n+    @Test\n+    public void search() {\n+        List<VirSchemaTO> vSchemas =\n+                schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).keyword(\"rvirtuald*\").build());\n+        assertFalse(vSchemas.isEmpty());\n+        for (VirSchemaTO vSchemaTO : vSchemas) {\n+            assertNotNull(vSchemaTO);\n+        }\n+    }\n+\n     @Test\n     public void crud() {\n         ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);"}]}