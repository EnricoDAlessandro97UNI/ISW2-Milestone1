{"sha":"92fbcc952720d900cfada1410fb3c9028931843a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkyZmJjYzk1MjcyMGQ5MDBjZmFkYTE0MTBmYjNjOTAyODkzMTg0M2E=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-04-16T13:02:57Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-04-16T13:04:41Z"},"message":"[SYNCOPE-1441] Adjusting jpa-json","tree":{"sha":"0b39fc52ff12a74466a946debe43d72b5b7ca669","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0b39fc52ff12a74466a946debe43d72b5b7ca669"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/92fbcc952720d900cfada1410fb3c9028931843a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/92fbcc952720d900cfada1410fb3c9028931843a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/92fbcc952720d900cfada1410fb3c9028931843a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/92fbcc952720d900cfada1410fb3c9028931843a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"03993064cbdbb3e005f8c3715e518d4f61038b28","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/03993064cbdbb3e005f8c3715e518d4f61038b28","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/03993064cbdbb3e005f8c3715e518d4f61038b28"}],"stats":{"total":128,"additions":90,"deletions":38},"files":[{"sha":"473d6f151c0e1b0fabb761c70857c0cf97408ca2","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONAnyObjectDAO.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java?ref=92fbcc952720d900cfada1410fb3c9028931843a","patch":"@@ -19,13 +19,17 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n \n public class JPAJSONAnyObjectDAO extends JPAAnyObjectDAO {\n \n@@ -67,6 +71,21 @@ public List<AnyObject> findByDerAttrValue(\n         return anyDAO().findByDerAttrValue(JPAJSONAnyObject.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n     }\n \n+    @Override\n+    protected Pair<AnyObject, Pair<Set<String>, Set<String>>> doSave(final AnyObject anyObject) {\n+        AnyObject merged = entityManager().merge(anyObject);\n+\n+        // ensure that entity listeners are invoked at this point\n+        entityManager().flush();\n+\n+        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n+\n+        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);\n+        dynRealmDAO.refreshDynMemberships(merged);\n+\n+        return Pair.of(merged, dynGroupMembs);\n+    }\n+\n     @Override\n     public AnyObject save(final AnyObject anyObject) {\n         anyDAO().checkBeforeSave(JPAJSONAnyObject.TABLE, anyUtils(), anyObject);"},{"sha":"a995a384b1b50433120a34944e3c141dc48f5a74","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONUserDAO.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java?ref=92fbcc952720d900cfada1410fb3c9028931843a","patch":"@@ -21,13 +21,17 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n \n public class JPAJSONUserDAO extends JPAUserDAO {\n \n@@ -69,6 +73,37 @@ public List<User> findByDerAttrValue(\n         return anyDAO().findByDerAttrValue(JPAJSONUser.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n     }\n \n+    @Override\n+    protected Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n+        // 1. save clear password value before save\n+        String clearPwd = user.getClearPassword();\n+\n+        // 2. save\n+        User merged = entityManager().merge(user);\n+\n+        // 3. set back the sole clear password value\n+        JPAUser.class.cast(merged).setClearPassword(clearPwd);\n+\n+        // 4. enforce password and account policies\n+        try {\n+            enforcePolicies(merged);\n+        } catch (InvalidEntityException e) {\n+            entityManager().remove(merged);\n+            throw e;\n+        }\n+\n+        // ensure that entity listeners are invoked at this point\n+        entityManager().flush();\n+\n+        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n+\n+        roleDAO.refreshDynMemberships(merged);\n+        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);\n+        dynRealmDAO.refreshDynMemberships(merged);\n+\n+        return Pair.of(merged, dynGroupMembs);\n+    }\n+\n     @Override\n     public User save(final User user) {\n         anyDAO().checkBeforeSave(JPAJSONUser.TABLE, anyUtils(), user);"},{"sha":"0c7c3711aae659e3b509d8b01cb4c791a20c7671","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAJSONAnyObject.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObject.java?ref=92fbcc952720d900cfada1410fb3c9028931843a","patch":"@@ -76,9 +76,8 @@ public boolean add(final APlainAttr attr) {\n \n     @Override\n     public boolean remove(final APlainAttr attr) {\n-        return plainAttrList.removeIf(pgattr\n-                -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())\n-                && Objects.equals(pgattr.getMembershipKey(), ((JPAJSONAPlainAttr) attr).getMembershipKey()));\n+        return plainAttrList.removeIf(jsonAttr -> jsonAttr.getSchemaKey().equals(attr.getSchema().getKey())\n+                && Objects.equals(jsonAttr.getMembershipKey(), ((JPAJSONAPlainAttr) attr).getMembershipKey()));\n     }\n \n     @Override\n@@ -89,30 +88,30 @@ protected List<? extends APlainAttr> internalGetPlainAttrs() {\n     @Override\n     public List<? extends APlainAttr> getPlainAttrs() {\n         return plainAttrList.stream().\n-                filter(pgattr -> pgattr.getMembershipKey() == null).\n+                filter(attr -> attr.getMembershipKey() == null).\n                 collect(Collectors.toList());\n     }\n \n     @Override\n     public Optional<? extends APlainAttr> getPlainAttr(final String plainSchema) {\n         return plainAttrList.stream().\n-                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)\n-                && pgattr.getMembershipKey() == null).\n+                filter(attr -> attr.getSchemaKey() != null && attr.getSchemaKey().equals(plainSchema)\n+                && attr.getMembershipKey() == null).\n                 findFirst();\n     }\n \n     @Override\n     public Optional<? extends APlainAttr> getPlainAttr(final String plainSchema, final Membership<?> membership) {\n         return plainAttrList.stream().\n-                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)\n-                && pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey())).\n+                filter(attr -> attr.getSchemaKey() != null && attr.getSchemaKey().equals(plainSchema)\n+                && attr.getMembershipKey() != null && attr.getMembershipKey().equals(membership.getKey())).\n                 findFirst();\n     }\n \n     @Override\n     public boolean remove(final AMembership membership) {\n-        plainAttrList.removeIf(pgattr\n-                -> pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey()));\n+        plainAttrList.removeIf(attr -> attr.getMembershipKey() != null\n+                && attr.getMembershipKey().equals(membership.getKey()));\n         return super.remove(membership);\n     }\n }"},{"sha":"e29c21074112f1ee7408181d678123e8532ed988","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAJSONConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAJSONConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAJSONConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAJSONConf.java?ref=92fbcc952720d900cfada1410fb3c9028931843a","patch":"@@ -75,7 +75,7 @@ public boolean add(final CPlainAttr attr) {\n \n     @Override\n     public boolean remove(final CPlainAttr attr) {\n-        return plainAttrList.removeIf(pgattr -> pgattr.getSchemaKey().equals(attr.getSchema().getKey()));\n+        return plainAttrList.removeIf(jsonAttr -> jsonAttr.getSchemaKey().equals(attr.getSchema().getKey()));\n     }\n \n     @Override"},{"sha":"3fca4afe7739e0c6cfd4a3952827d88f908e5f64","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAJSONGroup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroup.java?ref=92fbcc952720d900cfada1410fb3c9028931843a","patch":"@@ -75,7 +75,7 @@ public boolean add(final GPlainAttr attr) {\n \n     @Override\n     public boolean remove(final GPlainAttr attr) {\n-        return plainAttrList.removeIf(pgattr -> pgattr.getSchemaKey().equals(attr.getSchema().getKey()));\n+        return plainAttrList.removeIf(jsonAttr -> jsonAttr.getSchemaKey().equals(attr.getSchema().getKey()));\n     }\n \n     @Override"},{"sha":"dc18c17d6ebacdbc4405b1777039c984aa0be77e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONUser.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java?ref=92fbcc952720d900cfada1410fb3c9028931843a","patch":"@@ -80,9 +80,8 @@ public boolean add(final UPlainAttr attr) {\n \n     @Override\n     public boolean remove(final UPlainAttr attr) {\n-        return plainAttrList.removeIf(pgattr\n-                -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())\n-                && Objects.equals(pgattr.getMembershipKey(), ((JPAJSONUPlainAttr) attr).getMembershipKey()));\n+        return plainAttrList.removeIf(jsonAttr -> jsonAttr.getSchemaKey().equals(attr.getSchema().getKey())\n+                && Objects.equals(jsonAttr.getMembershipKey(), ((JPAJSONUPlainAttr) attr).getMembershipKey()));\n     }\n \n     @Override\n@@ -93,30 +92,30 @@ protected List<? extends UPlainAttr> internalGetPlainAttrs() {\n     @Override\n     public List<? extends UPlainAttr> getPlainAttrs() {\n         return plainAttrList.stream().\n-                filter(pgattr -> pgattr.getMembershipKey() == null).\n+                filter(attr -> attr.getMembershipKey() == null).\n                 collect(Collectors.toList());\n     }\n \n     @Override\n     public Optional<? extends UPlainAttr> getPlainAttr(final String plainSchema) {\n         return plainAttrList.stream().\n-                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)\n-                && pgattr.getMembershipKey() == null).\n+                filter(attr -> attr.getSchemaKey() != null && attr.getSchemaKey().equals(plainSchema)\n+                && attr.getMembershipKey() == null).\n                 findFirst();\n     }\n \n     @Override\n     public Optional<? extends UPlainAttr> getPlainAttr(final String plainSchema, final Membership<?> membership) {\n         return plainAttrList.stream().\n-                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)\n-                && pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey())).\n+                filter(attr -> attr.getSchemaKey() != null && attr.getSchemaKey().equals(plainSchema)\n+                && attr.getMembershipKey() != null && attr.getMembershipKey().equals(membership.getKey())).\n                 findFirst();\n     }\n \n     @Override\n     public boolean remove(final UMembership membership) {\n-        plainAttrList.removeIf(pgattr\n-                -> pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey()));\n+        plainAttrList.removeIf(attr -> attr.getMembershipKey() != null\n+                && attr.getMembershipKey().equals(membership.getKey()));\n         return super.remove(membership);\n     }\n }"},{"sha":"18eab7a07de47d4bfd79a8815dbc37d2ad9e5ba3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=92fbcc952720d900cfada1410fb3c9028931843a","patch":"@@ -63,10 +63,10 @@\n public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObjectDAO {\n \n     @Autowired\n-    private UserDAO userDAO;\n+    protected UserDAO userDAO;\n \n     @Autowired\n-    private GroupDAO groupDAO;\n+    protected GroupDAO groupDAO;\n \n     @Override\n     protected AnyUtils init() {\n@@ -195,7 +195,7 @@ public List<AnyObject> findAll(final int page, final int itemsPerPage) {\n         return query.getResultList();\n     }\n \n-    private Pair<AnyObject, Pair<Set<String>, Set<String>>> doSave(final AnyObject anyObject) {\n+    protected Pair<AnyObject, Pair<Set<String>, Set<String>>> doSave(final AnyObject anyObject) {\n         AnyObject merged = super.save(anyObject);\n         publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n \n@@ -215,7 +215,7 @@ public Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(final AnyObject an\n         return doSave(anyObject).getRight();\n     }\n \n-    private List<ARelationship> findARelationships(final AnyObject anyObject) {\n+    protected List<ARelationship> findARelationships(final AnyObject anyObject) {\n         TypedQuery<ARelationship> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAARelationship.class.getSimpleName()\n                 + \" e WHERE e.rightEnd=:anyObject\", ARelationship.class);\n@@ -224,7 +224,7 @@ private List<ARelationship> findARelationships(final AnyObject anyObject) {\n         return query.getResultList();\n     }\n \n-    private List<URelationship> findURelationships(final AnyObject anyObject) {\n+    protected List<URelationship> findURelationships(final AnyObject anyObject) {\n         TypedQuery<URelationship> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAURelationship.class.getSimpleName()\n                 + \" e WHERE e.rightEnd=:anyObject\", URelationship.class);"},{"sha":"0e8d474d639c3d2adff2a1b94039322e128d8ed6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92fbcc952720d900cfada1410fb3c9028931843a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=92fbcc952720d900cfada1410fb3c9028931843a","patch":"@@ -76,28 +76,28 @@\n \n public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n-    private static final Pattern USERNAME_PATTERN =\n+    protected static final Pattern USERNAME_PATTERN =\n             Pattern.compile(\"^\" + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+    protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n     @Autowired\n-    private RoleDAO roleDAO;\n+    protected RoleDAO roleDAO;\n \n     @Autowired\n-    private AccessTokenDAO accessTokenDAO;\n+    protected AccessTokenDAO accessTokenDAO;\n \n     @Autowired\n-    private RealmDAO realmDAO;\n+    protected RealmDAO realmDAO;\n \n     @Autowired\n-    private GroupDAO groupDAO;\n+    protected GroupDAO groupDAO;\n \n     @Resource(name = \"adminUser\")\n-    private String adminUser;\n+    protected String adminUser;\n \n     @Resource(name = \"anonymousUser\")\n-    private String anonymousUser;\n+    protected String anonymousUser;\n \n     @Override\n     protected AnyUtils init() {\n@@ -221,7 +221,7 @@ public UMembership findMembership(final String key) {\n         return entityManager().find(JPAUMembership.class, key);\n     }\n \n-    private List<PasswordPolicy> getPasswordPolicies(final User user) {\n+    protected List<PasswordPolicy> getPasswordPolicies(final User user) {\n         List<PasswordPolicy> policies = new ArrayList<>();\n \n         PasswordPolicy policy;\n@@ -255,7 +255,7 @@ public List<User> findAll(final int page, final int itemsPerPage) {\n         return query.getResultList();\n     }\n \n-    private List<AccountPolicy> getAccountPolicies(final User user) {\n+    protected List<AccountPolicy> getAccountPolicies(final User user) {\n         List<AccountPolicy> policies = new ArrayList<>();\n \n         // add resource policies\n@@ -374,7 +374,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n         return ImmutablePair.of(suspend, propagateSuspension);\n     }\n \n-    private Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n+    protected Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n         // 1. save clear password value before save\n         String clearPwd = user.getClearPassword();\n "}]}