{"sha":"3b29a11d186cc30e95d7a13fc4926838e2230420","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNiMjlhMTFkMTg2Y2MzMGU5NWQ3YTEzZmM0OTI2ODM4ZTIyMzA0MjA=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-02T13:11:30Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-02T13:11:30Z"},"message":"Fixes issue 199\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247389 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd4f79abd21c82ccf4f54ee9e935ab49b5a545aa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fd4f79abd21c82ccf4f54ee9e935ab49b5a545aa"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3b29a11d186cc30e95d7a13fc4926838e2230420","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3b29a11d186cc30e95d7a13fc4926838e2230420","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3b29a11d186cc30e95d7a13fc4926838e2230420","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3b29a11d186cc30e95d7a13fc4926838e2230420/comments","author":null,"committer":null,"parents":[{"sha":"d7346264809fcbc96a0394850bea44c28353175d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d7346264809fcbc96a0394850bea44c28353175d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d7346264809fcbc96a0394850bea44c28353175d"}],"stats":{"total":503,"additions":373,"deletions":130},"files":[{"sha":"5cf4d24d7f2ea9430e32d6580b289c9987da3fc6","filename":"client/src/main/java/org/syncope/client/to/LoggerTO.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLoggerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLoggerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLoggerTO.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -15,26 +15,29 @@\n package org.syncope.client.to;\n \n import org.syncope.client.AbstractBaseBean;\n+import org.syncope.types.LoggerLevel;\n \n public class LoggerTO extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -7794833835668648505L;\n+\n     private String name;\n \n-    private String level;\n+    private LoggerLevel level;\n \n-    public String getLevel() {\n+    public LoggerLevel getLevel() {\n         return level;\n     }\n \n-    public void setLevel(String level) {\n+    public void setLevel(final LoggerLevel level) {\n         this.level = level;\n     }\n \n     public String getName() {\n         return name;\n     }\n \n-    public void setName(String name) {\n+    public void setName(final String name) {\n         this.name = name;\n     }\n }"},{"sha":"4dfc9ddca7fed70441634ab7c5be54279f9133d8","filename":"client/src/main/java/org/syncope/types/LoggerLevel.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FLoggerLevel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FLoggerLevel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FLoggerLevel.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.types;\n+\n+import ch.qos.logback.classic.Level;\n+\n+public enum LoggerLevel {\n+\n+    OFF(Level.OFF),\n+    ERROR(Level.ERROR),\n+    WARN(Level.WARN),\n+    INFO(Level.INFO),\n+    DEBUG(Level.DEBUG),\n+    TRACE(Level.TRACE),\n+    ALL(Level.ALL);\n+\n+    private Level level;\n+\n+    LoggerLevel(final Level level) {\n+        this.level = level;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public static LoggerLevel fromLevel(final Level level) {\n+        LoggerLevel result;\n+        if (level.equals(Level.OFF)) {\n+            result = OFF;\n+        } else if (level.equals(Level.ERROR)) {\n+            result = ERROR;\n+        } else if (level.equals(Level.WARN)) {\n+            result = WARN;\n+        } else if (level.equals(Level.INFO)) {\n+            result = INFO;\n+        } else if (level.equals(Level.DEBUG)) {\n+            result = DEBUG;\n+        } else if (level.equals(Level.TRACE)) {\n+            result = TRACE;\n+        } else if (level.equals(Level.ALL)) {\n+            result = ALL;\n+        } else {\n+            throw new IllegalArgumentException(\"Undefined Level \" + level);\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"affbe2cc185860eb7269e492753994aa9a49171c","filename":"console/src/main/java/org/syncope/console/pages/Configuration.java","status":"modified","additions":16,"deletions":23,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -53,7 +53,6 @@\n import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.rest.ConfigurationRestClient;\n-import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.Logger;\n import ch.qos.logback.classic.LoggerContext;\n import org.syncope.console.pages.panels.PoliciesPanel;\n@@ -73,6 +72,7 @@\n import org.syncope.console.rest.WorkflowRestClient;\n import org.syncope.console.wicket.markup.html.form.ActionLink;\n import org.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.syncope.types.LoggerLevel;\n \n /**\n  * Configurations WebPage.\n@@ -245,7 +245,8 @@ public void populateItem(\n \n                 panel.add(new ActionLink() {\n \n-                    private static final long serialVersionUID = -3722207913631435501L;\n+                    private static final long serialVersionUID =\n+                            -3722207913631435501L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n@@ -272,7 +273,8 @@ public Page createPage() {\n \n                 panel.add(new ActionLink() {\n \n-                    private static final long serialVersionUID = -3722207913631435501L;\n+                    private static final long serialVersionUID =\n+                            -3722207913631435501L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n@@ -435,7 +437,8 @@ public void populateItem(\n \n                 panel.add(new ActionLink() {\n \n-                    private static final long serialVersionUID = -3722207913631435501L;\n+                    private static final long serialVersionUID =\n+                            -3722207913631435501L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n@@ -462,7 +465,8 @@ public Page createPage() {\n \n                 panel.add(new ActionLink() {\n \n-                    private static final long serialVersionUID = -3722207913631435501L;\n+                    private static final long serialVersionUID =\n+                            -3722207913631435501L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n@@ -513,7 +517,8 @@ public void onClick(final AjaxRequestTarget target) {\n         AjaxLink createNotificationLink =\n                 new AjaxLink(\"createNotificationLink\") {\n \n-                    private static final long serialVersionUID = -7978723352517770644L;\n+                    private static final long serialVersionUID =\n+                            -7978723352517770644L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n@@ -664,17 +669,6 @@ public NotificationTO getObject() {\n         }\n     }\n \n-    enum LoggerLevel {\n-\n-        OFF,\n-        ERROR,\n-        WARN,\n-        INFO,\n-        DEBUG,\n-        TRACE,\n-        ALL\n-    }\n-\n     private class LoggerPropertyList extends PropertyListView<LoggerTO> {\n \n         private static final long serialVersionUID = 5911412425994616111L;\n@@ -703,13 +697,12 @@ protected void populateItem(final ListItem<LoggerTO> item) {\n \n                 @Override\n                 public LoggerLevel getObject() {\n-                    return LoggerLevel.valueOf(\n-                            item.getModelObject().getLevel());\n+                    return item.getModelObject().getLevel();\n                 }\n \n                 @Override\n                 public void setObject(final LoggerLevel object) {\n-                    item.getModelObject().setLevel(object.toString());\n+                    item.getModelObject().setLevel(object);\n                 }\n \n                 @Override\n@@ -765,7 +758,7 @@ public List<LoggerTO> getLoggers() {\n                 if (logger.getLevel() != null) {\n                     loggerTO = new LoggerTO();\n                     loggerTO.setName(logger.getName());\n-                    loggerTO.setLevel(logger.getLevel().toString());\n+                    loggerTO.setLevel(LoggerLevel.fromLevel(logger.getLevel()));\n                     result.add(loggerTO);\n                 }\n             }\n@@ -774,13 +767,13 @@ public List<LoggerTO> getLoggers() {\n         }\n \n         public boolean setLoggerLevel(final String name,\n-                final String level) {\n+                final LoggerLevel level) {\n \n             LoggerContext lc =\n                     (LoggerContext) LoggerFactory.getILoggerFactory();\n             Logger logger = lc.getLogger(name);\n             if (logger != null) {\n-                logger.setLevel(Level.valueOf(level));\n+                logger.setLevel(level.getLevel());\n             }\n \n             return logger != null;"},{"sha":"d32845d71fe81d4151850b7d264b6fc8d4c345f0","filename":"console/src/main/java/org/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":19,"deletions":38,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -20,6 +20,7 @@\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.client.to.LoggerTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.types.LoggerLevel;\n \n @Component\n public class ConfigurationRestClient extends AbstractBaseRestClient {\n@@ -33,39 +34,25 @@ public String dbContentAsXml()\n \n     /**\n      * Get all stored configurations.\n+     *\n      * @return ConfigurationTOs\n      */\n-    public List<ConfigurationTO> getAllConfigurations()\n-            throws SyncopeClientCompositeErrorException {\n-\n-        List<ConfigurationTO> configurations = null;\n-\n-        configurations = Arrays.asList(\n+    public List<ConfigurationTO> getAllConfigurations() {\n+        return Arrays.asList(\n                 restTemplate.getForObject(baseURL\n                 + \"configuration/list.json\", ConfigurationTO[].class));\n-\n-        return configurations;\n     }\n \n-    /**\n-     * Load an existent configuration.\n-     * @return ConfigurationTO object if the configuration exists,\n-     * null otherwise\n-     */\n-    public ConfigurationTO readConfiguration(String key)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        ConfigurationTO configurationTO =\n-                restTemplate.getForObject(baseURL\n-                + \"configuration/read/{key}.json\", ConfigurationTO.class,\n-                key);\n-\n+    public ConfigurationTO readConfiguration(String key) {\n \n-        return configurationTO;\n+        return restTemplate.getForObject(\n+                baseURL + \"configuration/read/{key}.json\",\n+                ConfigurationTO.class, key);\n     }\n \n     /**\n      * Create a new configuration.\n+     *\n      * @param configurationTO\n      * @return true if the operation ends succesfully, false otherwise\n      */\n@@ -81,6 +68,7 @@ public boolean createConfiguration(ConfigurationTO configurationTO) {\n \n     /**\n      * Update an existent configuration.\n+     *\n      * @param configurationTO\n      * @return true if the operation ends succesfully, false otherwise\n      */\n@@ -95,39 +83,32 @@ public boolean updateConfiguration(ConfigurationTO configurationTO) {\n             LOG.error(\"While updating a configuration\", e);\n             return false;\n         }\n-        return (configurationTO.equals(newConfigurationTO)) ? true : false;\n+        return configurationTO.equals(newConfigurationTO);\n     }\n \n     /**\n      * Deelete a configuration by key.\n      */\n-    public void deleteConfiguration(String key)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public void deleteConfiguration(final String key) {\n         restTemplate.delete(baseURL\n-                + \"configuration/delete/{key}.json\",\n-                key);\n+                + \"configuration/delete/{key}.json\", key);\n     }\n \n     /**\n      * Get all loggers.\n+     *\n      * @return LoggerTOs\n      */\n-    public List<LoggerTO> getLoggers()\n-            throws SyncopeClientCompositeErrorException {\n-\n-        List<LoggerTO> loggers = Arrays.asList(\n-                restTemplate.getForObject(\n-                baseURL + \"log/controller/list\", LoggerTO[].class));\n-\n-        return loggers;\n+    public List<LoggerTO> getLoggers() {\n+        return Arrays.asList(restTemplate.getForObject(\n+                baseURL + \"logger/list\", LoggerTO[].class));\n     }\n \n-    public boolean setLoggerLevel(final String name, final String level) {\n+    public boolean setLoggerLevel(final String name, final LoggerLevel level) {\n         boolean result;\n         try {\n             restTemplate.postForObject(\n-                    baseURL + \"log/controller/{name}/{level}\",\n+                    baseURL + \"logger/set/{name}/{level}\",\n                     null, LoggerTO.class, name, level);\n             result = true;\n         } catch (SyncopeClientCompositeErrorException e) {"},{"sha":"e8b7bd3160e23c6498c656feec3a9ec81a9cd393","filename":"core/src/main/java/org/syncope/core/init/LoggerLoader.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.init;\n+\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.LoggerContext;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.SyncopeLogger;\n+import org.syncope.core.persistence.dao.LoggerDAO;\n+import org.syncope.types.LoggerLevel;\n+\n+@Component\n+public class LoggerLoader {\n+\n+    @Autowired\n+    private LoggerDAO loggerDAO;\n+\n+    @Transactional\n+    public void load() {\n+        Map<String, SyncopeLogger> syncopeLoggers =\n+                new HashMap<String, SyncopeLogger>();\n+        for (SyncopeLogger syncopeLogger : loggerDAO.findAll()) {\n+            syncopeLoggers.put(syncopeLogger.getName(), syncopeLogger);\n+        }\n+\n+        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n+\n+        /*\n+         * Traverse all defined Logback loggers: if there is a matching\n+         * SyncopeLogger, set Logback level accordingly, otherwise create a\n+         * SyncopeLogger instance with given name and level.\n+         */\n+        for (Logger logger : lc.getLoggerList()) {\n+            if (logger.getLevel() != null) {\n+                if (syncopeLoggers.containsKey(logger.getName())) {\n+                    logger.setLevel(syncopeLoggers.get(logger.getName()).\n+                            getLevel().getLevel());\n+                    syncopeLoggers.remove(logger.getName());\n+                } else {\n+                    SyncopeLogger syncopeLogger = new SyncopeLogger();\n+                    syncopeLogger.setName(logger.getName());\n+                    syncopeLogger.setLevel(\n+                            LoggerLevel.fromLevel(logger.getLevel()));\n+                    loggerDAO.save(syncopeLogger);\n+                }\n+            }\n+        }\n+\n+        /*\n+         * Foreach SyncopeLogger not found in Logback, create a new Logback\n+         * logger with given name and level.\n+         */\n+        for (SyncopeLogger syncopeLogger : syncopeLoggers.values()) {\n+            Logger logger = lc.getLogger(syncopeLogger.getName());\n+            logger.setLevel(syncopeLogger.getLevel().getLevel());\n+        }\n+    }\n+}"},{"sha":"227c896a28ac887b15bc8a556f6917d781242390","filename":"core/src/main/java/org/syncope/core/init/SpringContextInitializer.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -41,6 +41,9 @@ public class SpringContextInitializer implements ServletContextAware,\n     @Autowired\n     private ActivitiWorkflowLoader activitiWorkflowLoader;\n \n+    @Autowired\n+    private LoggerLoader loggerLoader;\n+\n     @Override\n     public void setServletContext(final ServletContext servletContext) {\n     }\n@@ -58,5 +61,6 @@ public void afterPropertiesSet()\n         connInstanceLoader.load();\n         jobInstanceLoader.load();\n         activitiWorkflowLoader.load();\n+        loggerLoader.load();\n     }\n }"},{"sha":"533b3aa4d097f9702ff8bcd6183f84990fc36290","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncopeLogger.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeLogger.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -0,0 +1,52 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import org.syncope.types.LoggerLevel;\n+\n+@Entity\n+public class SyncopeLogger extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 943012777014416027L;\n+\n+    @Id\n+    @Column(name = \"logName\")\n+    private String name;\n+\n+    @Column(name = \"logLevel\")\n+    @Enumerated(EnumType.STRING)\n+    private LoggerLevel level;\n+\n+    public LoggerLevel getLevel() {\n+        return level;\n+    }\n+\n+    public void setLevel(final LoggerLevel level) {\n+        this.level = level;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"baebe36825d4fee816c850c9d7afcf7dba941a6f","filename":"core/src/main/java/org/syncope/core/persistence/dao/LoggerDAO.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FLoggerDAO.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -0,0 +1,31 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.SyncopeLogger;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+\n+public interface LoggerDAO extends DAO {\n+\n+    SyncopeLogger find(String name);\n+\n+    List<SyncopeLogger> findAll();\n+\n+    SyncopeLogger save(SyncopeLogger logger)\n+            throws InvalidEntityException;\n+\n+    void delete(String name);\n+}"},{"sha":"5ba8c7d0d9e5c62a970a534621b2ed153451d4e3","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/LoggerDAOImpl.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FLoggerDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FLoggerDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FLoggerDAOImpl.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -0,0 +1,52 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.SyncopeLogger;\n+import org.syncope.core.persistence.dao.LoggerDAO;\n+\n+@Repository\n+public class LoggerDAOImpl extends AbstractDAOImpl implements LoggerDAO {\n+\n+    @Override\n+    public SyncopeLogger find(final String name) {\n+        return entityManager.find(SyncopeLogger.class, name);\n+    }\n+\n+    @Override\n+    public List<SyncopeLogger> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + SyncopeLogger.class.getSimpleName() + \" e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public SyncopeLogger save(final SyncopeLogger logger) {\n+        return entityManager.merge(logger);\n+    }\n+\n+    @Override\n+    public void delete(final String name) {\n+        SyncopeLogger logger = find(name);\n+        if (logger == null) {\n+            return;\n+        }\n+\n+        entityManager.remove(logger);\n+    }\n+}"},{"sha":"5b913f40d8751d4b01f0d13e2dc9498f6fba1aed","filename":"core/src/main/java/org/syncope/core/rest/controller/LoggerController.java","status":"renamed","additions":33,"deletions":28,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -19,57 +19,62 @@\n import ch.qos.logback.classic.LoggerContext;\n import java.util.ArrayList;\n import java.util.List;\n-import javassist.NotFoundException;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.LoggerTO;\n+import org.syncope.core.persistence.beans.SyncopeLogger;\n+import org.syncope.core.persistence.dao.LoggerDAO;\n+import org.syncope.types.LoggerLevel;\n \n @Controller\n-@RequestMapping(\"/log\")\n-public class LogController extends AbstractController {\n+@RequestMapping(\"/logger\")\n+public class LoggerController extends AbstractController {\n \n-    @PreAuthorize(\"hasRole('LOG_LIST')\")\n+    @Autowired\n+    private LoggerDAO loggerDAO;\n+\n+    @PreAuthorize(\"hasRole('LOGGER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n-    value = \"/controller/list\")\n-    public List<LoggerTO> getLoggers() {\n-        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n-        List<LoggerTO> result =\n-                new ArrayList<LoggerTO>(lc.getLoggerList().size());\n-        LoggerTO loggerTO;\n-        for (Logger logger : lc.getLoggerList()) {\n-            if (logger.getLevel() != null) {\n-                loggerTO = new LoggerTO();\n-                loggerTO.setName(logger.getName());\n-                loggerTO.setLevel(logger.getLevel().toString());\n-                result.add(loggerTO);\n-            }\n+    value = \"/list\")\n+    @Transactional(readOnly = true)\n+    public List<LoggerTO> list() {\n+        List<LoggerTO> result = new ArrayList<LoggerTO>();\n+        for (SyncopeLogger syncopeLogger : loggerDAO.findAll()) {\n+            LoggerTO loggerTO = new LoggerTO();\n+            BeanUtils.copyProperties(syncopeLogger, loggerTO);\n+            result.add(loggerTO);\n         }\n \n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('LOG_SET_LEVEL')\")\n+    @PreAuthorize(\"hasRole('LOGGER_SET_LEVEL')\")\n     @RequestMapping(method = RequestMethod.POST,\n-    value = \"/controller/{name}/{level}\")\n-    public LoggerTO setLoggerLevel(@PathVariable(\"name\") final String name,\n-            @PathVariable(\"level\") final Level level)\n-            throws NotFoundException {\n+    value = \"/set/{name}/{level}\")\n+    public LoggerTO setLevel(@PathVariable(\"name\") final String name,\n+            @PathVariable(\"level\") final Level level) {\n \n-        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n-        Logger logger = lc.getLogger(name);\n-        if (logger == null) {\n-            throw new NotFoundException(\"Logger '\" + name + \"'\");\n+        SyncopeLogger syncopeLogger = loggerDAO.find(name);\n+        if (syncopeLogger == null) {\n+            syncopeLogger = new SyncopeLogger();\n+            syncopeLogger.setName(name);\n         }\n+        syncopeLogger.setLevel(LoggerLevel.fromLevel(level));\n+        syncopeLogger = loggerDAO.save(syncopeLogger);\n \n+        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n+        Logger logger = lc.getLogger(name);\n         logger.setLevel(level);\n \n         LoggerTO result = new LoggerTO();\n-        result.setName(logger.getName());\n-        result.setLevel(logger.getLevel().toString());\n+        BeanUtils.copyProperties(syncopeLogger, result);\n         return result;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/rest/controller/LogController.java"},{"sha":"d58ba8de271b6dd4688d9f3e56a89b48462ea3e6","filename":"core/src/main/resources/content.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -80,8 +80,8 @@\n     <Entitlement name=\"TASK_READ\"/>\n     <Entitlement name=\"TASK_UPDATE\"/>\n     <Entitlement name=\"TASK_DELETE\"/>\n-    <Entitlement name=\"LOG_LIST\"/>\n-    <Entitlement name=\"LOG_SET_LEVEL\"/>\n+    <Entitlement name=\"LOGGER_LIST\"/>\n+    <Entitlement name=\"LOGGER_SET_LEVEL\"/>\n     <Entitlement name=\"POLICY_CREATE\"/>\n     <Entitlement name=\"POLICY_LIST\"/>\n     <Entitlement name=\"POLICY_READ\"/>"},{"sha":"586f238e6fcf08799f0a1b33f56b2b3b6f807092","filename":"core/src/main/resources/logback.xml","status":"modified","additions":3,"deletions":24,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -136,34 +136,13 @@\n         <appender-ref ref=\"rest\"/>\n     </logger>\n \n-    <logger name=\"org.hibernate\" additivity=\"false\">\n-        <level value=\"INFO\"/>\n-        <appender-ref ref=\"persistence\"/>\n-    </logger>\n-    <logger name=\"org.hibernate.stat\" additivity=\"false\">\n-        <level value=\"OFF\"/>\n-        <appender-ref ref=\"persistence\"/>\n-    </logger>\n-    <logger name=\"org.hibernate.SQL\" additivity=\"false\">\n-        <level value=\"OFF\"/>\n-        <appender-ref ref=\"persistence\"/>\n-    </logger>\n-    <logger name=\"org.hibernate.type\" additivity=\"false\">\n-        <level value=\"OFF\"/>\n-        <appender-ref ref=\"persistence\"/>\n-    </logger>\n-\n-    <logger name=\"org.apache.commons.httpclient\" additivity=\"false\">\n-        <level value=\"INFO\"/>\n-        <appender-ref ref=\"test\"/>\n-    </logger>\n-    <logger name=\"httpclient\" additivity=\"false\">\n+    <logger name=\"org.apache.http\" additivity=\"false\">\n         <level value=\"INFO\"/>\n         <appender-ref ref=\"test\"/>\n     </logger>\n \n     <!-- Log4JDBC -->\n-    <logger name=\"jdbc.sqlonly\" additivity=\"false\">\n+<!--    <logger name=\"jdbc.sqlonly\" additivity=\"false\">\n         <level value=\"INFO\"/>\n         <appender-ref ref=\"test\"/>\n     </logger>\n@@ -186,7 +165,7 @@\n     <logger name=\"jdbc.connection\" additivity=\"false\">\n         <level value=\"OFF\"/>\n         <appender-ref ref=\"test\"/>\n-    </logger>\n+    </logger>-->\n     <!-- /Log4JDBC -->\n     \n     <root>"},{"sha":"a2e5ac5ffb837632358382650c2a089d500983df","filename":"core/src/test/java/org/syncope/core/rest/LoggerTestITCase.java","status":"renamed","additions":18,"deletions":9,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -16,32 +16,41 @@\n \n import static org.junit.Assert.*;\n \n-import ch.qos.logback.classic.Level;\n import java.util.Arrays;\n import java.util.List;\n import org.junit.Test;\n import org.syncope.client.to.LoggerTO;\n+import org.syncope.types.LoggerLevel;\n \n-public class LogTestITCase extends AbstractTest {\n+public class LoggerTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n-        List<LoggerTO> loggers = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"log/controller/list\", LoggerTO[].class));\n+        List<LoggerTO> loggers = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"logger/list\", LoggerTO[].class));\n         assertNotNull(loggers);\n         assertFalse(loggers.isEmpty());\n         for (LoggerTO logger : loggers) {\n             assertNotNull(logger);\n         }\n     }\n \n-    public void setLoggerLevel() {\n+    @Test\n+    public void setLevel() {\n+        List<LoggerTO> loggers = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"logger/list\", LoggerTO[].class));\n+        assertNotNull(loggers);\n+        int startSize = loggers.size();\n+\n         LoggerTO logger = restTemplate.postForObject(\n-                BASE_URL + \"log/controller/{name}/{level}\",\n-                null, LoggerTO.class, \"org.syncope.core.monitor\", \"INFO\");\n+                BASE_URL + \"logger/set/{name}/{level}\",\n+                null, LoggerTO.class, \"TEST\", \"INFO\");\n         assertNotNull(logger);\n+        assertEquals(LoggerLevel.INFO, logger.getLevel());\n \n-        assertEquals(Level.INFO, logger.getLevel());\n+        loggers = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"logger/list\", LoggerTO[].class));\n+        assertNotNull(loggers);\n+        assertEquals(startSize + 1, loggers.size());\n     }\n }","previous_filename":"core/src/test/java/org/syncope/core/rest/LogTestITCase.java"},{"sha":"111444a2ea94f576a7550d404be9e546cb6bf7db","filename":"core/src/test/resources/content.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b29a11d186cc30e95d7a13fc4926838e2230420/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=3b29a11d186cc30e95d7a13fc4926838e2230420","patch":"@@ -511,8 +511,8 @@\n     <Entitlement name=\"TASK_READ\"/>\n     <Entitlement name=\"TASK_UPDATE\"/>\n     <Entitlement name=\"TASK_DELETE\"/>\n-    <Entitlement name=\"LOG_LIST\"/>\n-    <Entitlement name=\"LOG_SET_LEVEL\"/>\n+    <Entitlement name=\"LOGGER_LIST\"/>\n+    <Entitlement name=\"LOGGER_SET_LEVEL\"/>\n     <Entitlement name=\"POLICY_CREATE\"/>\n     <Entitlement name=\"POLICY_LIST\"/>\n     <Entitlement name=\"POLICY_READ\"/>"}]}