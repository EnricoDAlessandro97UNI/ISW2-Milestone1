{"sha":"55bfc7d91fd21c806765eb51345da4f827363c97","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU1YmZjN2Q5MWZkMjFjODA2NzY1ZWI1MTM0NWRhNGY4MjczNjNjOTc=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-23T07:58:26Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-23T07:58:26Z"},"message":"[SYNCOPE-231]\n* Added PolicyService implementation\n* Adding JAX-B Annotations for related TOs\n* Code cleanup (according to checkstyle and PMD)\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1437286 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"96a0586b79b39f97d961a169adef871eac516c8d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/96a0586b79b39f97d961a169adef871eac516c8d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/55bfc7d91fd21c806765eb51345da4f827363c97","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/55bfc7d91fd21c806765eb51345da4f827363c97","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/55bfc7d91fd21c806765eb51345da4f827363c97","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/55bfc7d91fd21c806765eb51345da4f827363c97/comments","author":null,"committer":null,"parents":[{"sha":"214ba87c1e49b23491b5301734927f5fd302a0f2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/214ba87c1e49b23491b5301734927f5fd302a0f2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/214ba87c1e49b23491b5301734927f5fd302a0f2"}],"stats":{"total":547,"additions":399,"deletions":148},"files":[{"sha":"d9c3d1cb13b9916a4c62d47ea1e7a1083b64ca73","filename":"client/src/main/java/org/apache/syncope/client/rest/utils/RestClientExceptionMapper.java","status":"modified","additions":51,"deletions":50,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -38,63 +38,64 @@\n import org.slf4j.LoggerFactory;\r\n \r\n @Provider\r\n-public class RestClientExceptionMapper implements ExceptionMapper<Exception>,\r\n-\t\tResponseExceptionMapper<Exception> {\r\n+public class RestClientExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\r\n \r\n     private static final Logger LOG = LoggerFactory.getLogger(RestClientExceptionMapper.class);\r\n \r\n     @Override\r\n-\tpublic Response toResponse(Exception e) {\r\n-\t\tthrow new UnsupportedOperationException(\"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic Exception fromResponse(Response response) {\r\n-\t\tException ex = null;\r\n-\t\tint statusCode = response.getStatus();\r\n-\t\t\r\n-\t\t// 1. Check for composite exception in HTTP header \r\n-\t\tSyncopeClientCompositeErrorException scce = checkCompositeException(response);\r\n-\t\tif (scce != null) {\r\n-\t\t\tex = scce;\r\n-\t\t\t\r\n-\t\t\t// 2. TODO Map  SC_FORBIDDEN\r\n-//\t\t} else if (statusCode == HttpStatus.SC_FORBIDDEN) {\r\n-//\t\t\tex = new UnauthorizedRoleException(-1L);\r\n-\t\t\t\r\n-\t\t\t// 3. Map  SC_UNAUTHORIZED\r\n-\t\t} else if (statusCode == HttpStatus.SC_UNAUTHORIZED) {\r\n-\t\t\tex = new AccessControlException(\"Remote unauthorized exception\");\r\n-\t\t\t\r\n-\t\t} else {\r\n-\t\t\t// 3. All other codes are mapped to runtime exception with HTTP code information \r\n-\t\t\tex = new RuntimeException(String.format(\r\n-\t\t\t\t\t\"Remote exception with status code: %s\",\r\n-\t\t\t\t\tResponse.Status.fromStatusCode(statusCode).name()));\r\n-\t\t}\r\n+    public Response toResponse(final Exception e) {\r\n+        throw new UnsupportedOperationException(\r\n+                \"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\r\n+    }\r\n+\r\n+    @Override\r\n+    public Exception fromResponse(final Response response) {\r\n+        Exception ex = null;\r\n+        int statusCode = response.getStatus();\r\n+\r\n+        // 1. Check for composite exception in HTTP header\r\n+        SyncopeClientCompositeErrorException scce = checkCompositeException(response);\r\n+        if (scce != null) {\r\n+            ex = scce;\r\n+\r\n+            // 2. TODO Map SC_FORBIDDEN\r\n+            // } else if (statusCode == HttpStatus.SC_FORBIDDEN) {\r\n+            // ex = new UnauthorizedRoleException(-1L);\r\n+\r\n+            // 3. Map SC_UNAUTHORIZED\r\n+        } else if (statusCode == HttpStatus.SC_UNAUTHORIZED) {\r\n+            ex = new AccessControlException(\"Remote unauthorized exception\");\r\n+\r\n+        } else {\r\n+            // 3. All other codes are mapped to runtime exception with HTTP code information\r\n+            ex = new RuntimeException(String.format(\"Remote exception with status code: %s\", Response.Status\r\n+                    .fromStatusCode(statusCode).name()));\r\n+        }\r\n         LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\r\n-\t\treturn ex;\r\n-\t}\r\n-\t\r\n-\tprivate SyncopeClientCompositeErrorException checkCompositeException(Response response) {\r\n-\t\tint statusCode = response.getStatus();\r\n-        List<Object> exceptionTypesInHeaders = response.getHeaders().get(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n+        return ex;\r\n+    }\r\n+\r\n+    private SyncopeClientCompositeErrorException checkCompositeException(final Response response) {\r\n+        int statusCode = response.getStatus();\r\n+        List<Object> exceptionTypesInHeaders = response.getHeaders().get(\r\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n         if (exceptionTypesInHeaders == null) {\r\n             LOG.debug(\"No \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \" provided\");\r\n             return null;\r\n         }\r\n \r\n-\t\tSyncopeClientCompositeErrorException compositeException = new SyncopeClientCompositeErrorException(\r\n-\t\t\t\torg.springframework.http.HttpStatus.valueOf(statusCode));\r\n+        SyncopeClientCompositeErrorException compositeException = new SyncopeClientCompositeErrorException(\r\n+                org.springframework.http.HttpStatus.valueOf(statusCode));\r\n \r\n         Set<String> handledExceptions = new HashSet<String>();\r\n         for (Object exceptionTypeValue : exceptionTypesInHeaders) {\r\n-        \tString exceptionTypeAsString = (String) exceptionTypeValue; \r\n+            String exceptionTypeAsString = (String) exceptionTypeValue;\r\n             SyncopeClientExceptionType exceptionType = null;\r\n             try {\r\n                 exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);\r\n             } catch (IllegalArgumentException e) {\r\n-                LOG.error(\"Unexpected value of \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \": \" + exceptionTypeAsString, e);\r\n+                LOG.error(\"Unexpected value of \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \": \"\r\n+                        + exceptionTypeAsString, e);\r\n             }\r\n             if (exceptionType != null) {\r\n                 handledExceptions.add(exceptionTypeAsString);\r\n@@ -103,14 +104,14 @@ private SyncopeClientCompositeErrorException checkCompositeException(Response re\n                 clientException.setType(exceptionType);\r\n                 if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\r\n                         && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\r\n-                \t// TODO: update clientException to support list of objects\r\n-                \tList<Object> elementsObjectList = response.getHeaders().get(exceptionType.getElementHeaderName());\r\n-                \tList<String> elementsStringList = new ArrayList<String>();\r\n-                \tfor (Object elementObject : elementsObjectList) {\r\n-                \t\tif (elementObject instanceof String) {\r\n-                \t\t\telementsStringList.add((String) elementObject);\r\n-                \t\t}\r\n-                \t}\r\n+                    // TODO update clientException to support list of objects\r\n+                    List<Object> elementsObjectList = response.getHeaders().get(exceptionType.getElementHeaderName());\r\n+                    List<String> elementsStringList = new ArrayList<String>();\r\n+                    for (Object elementObject : elementsObjectList) {\r\n+                        if (elementObject instanceof String) {\r\n+                            elementsStringList.add((String) elementObject);\r\n+                        }\r\n+                    }\r\n                     clientException.setElements(elementsStringList);\r\n                 }\r\n                 compositeException.addException(clientException);\r\n@@ -125,7 +126,7 @@ private SyncopeClientCompositeErrorException checkCompositeException(Response re\n         if (compositeException.hasExceptions()) {\r\n             return compositeException;\r\n         }\r\n-        \r\n+\r\n         return null;\r\n-\t}\r\n+    }\r\n }\r"},{"sha":"f4d240ffe3ac287df09c8de78bd582530f9f32ec","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConfigurationServiceProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -65,8 +65,8 @@ public ConfigurationTO read(final String key) {\n     }\r\n \r\n     @Override\r\n-    public ConfigurationTO update(final String key, final ConfigurationTO configurationTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"configuration/update\", configurationTO,\r\n+    public void update(final String key, final ConfigurationTO configurationTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"configuration/update\", configurationTO,\r\n                 ConfigurationTO.class);\r\n     }\r\n \r"},{"sha":"df019fb686dfea36bc313717343619fc077d5411","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/PolicyServiceProxy.java","status":"modified","additions":22,"deletions":21,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -18,8 +18,12 @@\n  */\r\n package org.apache.syncope.client.services.proxy;\r\n \r\n+import java.net.URI;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n+\r\n+import javax.ws.rs.core.Response;\r\n+\r\n import org.apache.syncope.common.services.PolicyService;\r\n import org.apache.syncope.common.to.AccountPolicyTO;\r\n import org.apache.syncope.common.to.PasswordPolicyTO;\r\n@@ -36,36 +40,35 @@ public PolicyServiceProxy(final String baseUrl, final RestTemplate restTemplate)\n     }\r\n \r\n     @Override\r\n-    public <T extends PolicyTO> T create(final PolicyType type, final T policyTO) {\r\n-        return (T) getRestTemplate().postForObject(baseUrl + \"policy/{kind}/create\", policyTO, policyTO.getClass(),\r\n-                typeToUrl(policyTO.getType()));\r\n+    public <T extends PolicyTO> Response create(final PolicyType type, final T policyTO) {\r\n+        PolicyTO policy = getRestTemplate().postForObject(baseUrl + \"policy/{kind}/create\", policyTO,\r\n+                policyTO.getClass(), typeToUrl(policyTO.getType()));\r\n+\r\n+        return Response.created(URI.create(baseUrl + \"policy/read/\" + policy.getId() + \".json\")).build();\r\n     }\r\n \r\n     @Override\r\n-    public <T extends PolicyTO> T delete(final PolicyType type, final Long policyId) {\r\n-        return (T) getRestTemplate().getForObject(baseUrl + \"policy/delete/{id}\", getTOClass(type), policyId);\r\n+    public <T extends PolicyTO> void delete(final PolicyType type, final Long policyId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"policy/delete/{id}\", getTOClass(type), policyId);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends PolicyTO> List<T> listByType(final PolicyType type) {\r\n+    public <T extends PolicyTO> List<T> list(final PolicyType type) {\r\n         switch (type) {\r\n             case ACCOUNT:\r\n             case GLOBAL_ACCOUNT:\r\n-                return (List<T>) Arrays.asList(getRestTemplate().getForObject(\r\n-                        baseUrl + \"policy/{kind}/list\", AccountPolicyTO[].class,\r\n-                        type));\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n+                        AccountPolicyTO[].class, type));\r\n \r\n             case PASSWORD:\r\n             case GLOBAL_PASSWORD:\r\n-                return (List<T>) Arrays.asList(getRestTemplate().getForObject(\r\n-                        baseUrl + \"policy/{kind}/list\", PasswordPolicyTO[].class,\r\n-                        type));\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n+                        PasswordPolicyTO[].class, type));\r\n \r\n             case SYNC:\r\n             case GLOBAL_SYNC:\r\n-                return (List<T>) Arrays.asList(getRestTemplate().getForObject(\r\n-                        baseUrl + \"policy/{kind}/list\", SyncPolicyTO[].class,\r\n-                        type));\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n+                        SyncPolicyTO[].class, type));\r\n \r\n             default:\r\n                 throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n@@ -74,21 +77,19 @@ public <T extends PolicyTO> List<T> listByType(final PolicyType type) {\n \r\n     @Override\r\n     public <T extends PolicyTO> T read(final PolicyType type, final Long policyId) {\r\n-        return (T) getRestTemplate().getForObject(baseUrl + \"policy/read/{id}\", getTOClass(type), policyId);\r\n+        return (T) getRestTemplate().getForObject(baseUrl + \"policy/read/{id}.json\", getTOClass(type), policyId);\r\n     }\r\n \r\n     @Override\r\n     public <T extends PolicyTO> T readGlobal(final PolicyType type) {\r\n-        return (T) getRestTemplate().getForObject(baseUrl + \"policy/{kind}/global/read\", getTOClass(type),\r\n+        return (T) getRestTemplate().getForObject(baseUrl + \"policy/{kind}/global/read.json\", getTOClass(type),\r\n                 typeToUrl(type));\r\n     }\r\n \r\n     @Override\r\n-    public <T extends PolicyTO> T update(final PolicyType type, final Long policyId, final T policyTO) {\r\n-        @SuppressWarnings(\"unchecked\")\r\n-        T result = (T) getRestTemplate().postForObject(baseUrl + \"policy/{kind}/update\", policyTO, policyTO.getClass(),\r\n+    public <T extends PolicyTO> void update(final PolicyType type, final Long policyId, final T policyTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"policy/{kind}/update\", policyTO, policyTO.getClass(),\r\n                 typeToUrl(policyTO.getType()));\r\n-        return result;\r\n     }\r\n \r\n     private Class<? extends PolicyTO> getTOClass(final PolicyType type) {\r"},{"sha":"198638a9ea46e0ca3fca306c12b63c8202951393","filename":"common/src/main/java/org/apache/syncope/common/services/ConfigurationService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -64,5 +64,5 @@ public interface ConfigurationService {\n \r\n     @PUT\r\n     @Path(\"{key}\")\r\n-    ConfigurationTO update(@PathParam(\"key\") String key, ConfigurationTO configurationTO);\r\n+    void update(@PathParam(\"key\") String key, ConfigurationTO configurationTO);\r\n }\r"},{"sha":"b1d73c18856492ae470806262e550ca3bfcca02e","filename":"common/src/main/java/org/apache/syncope/common/services/PolicyService.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -25,6 +25,7 @@\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.core.Response;\r\n \r\n import org.apache.syncope.common.to.PolicyTO;\r\n import org.apache.syncope.common.types.PolicyType;\r\n@@ -33,25 +34,25 @@\n public interface PolicyService {\r\n \r\n     @POST\r\n-    <T extends PolicyTO> T create(@PathParam(\"kind\") PolicyType type, T policyTO);\r\n+    <T extends PolicyTO> Response create(@PathParam(\"kind\") PolicyType type, T policyTO);\r\n \r\n-    // TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n     @DELETE\r\n     @Path(\"{policyId}\")\r\n-    <T extends PolicyTO> T delete(@PathParam(\"kind\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n+    <T extends PolicyTO> void delete(@PathParam(\"kind\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n \r\n     @GET\r\n-    <T extends PolicyTO> List<T> listByType(@PathParam(\"kind\") PolicyType type);\r\n+    <T extends PolicyTO> List<T> list(@PathParam(\"kind\") PolicyType type);\r\n \r\n     @GET\r\n     @Path(\"{policyId}\")\r\n     <T extends PolicyTO> T read(@PathParam(\"kind\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n \r\n     @GET\r\n-    @Path(\"global\")\r\n+    @Path(\"0\")\r\n     <T extends PolicyTO> T readGlobal(@PathParam(\"kind\") PolicyType type);\r\n \r\n     @PUT\r\n     @Path(\"{policyId}\")\r\n-    <T extends PolicyTO> T update(@PathParam(\"kind\") PolicyType type,@PathParam(\"policyId\") Long policyId, T policyTO);\r\n+    <T extends PolicyTO> void update(@PathParam(\"kind\") PolicyType type,@PathParam(\"policyId\") Long policyId,\r\n+            T policyTO);\r\n }\r"},{"sha":"37c28f40936f0186f8b145595a3e30568249beaa","filename":"common/src/main/java/org/apache/syncope/common/to/AccountPolicyTO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -18,9 +18,14 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.common.types.AccountPolicySpec;\r\n import org.apache.syncope.common.types.PolicyType;\r\n \r\n+@XmlRootElement(name = \"accountPolicy\")\r\n+@XmlType\r\n public class AccountPolicyTO extends PolicyTO {\r\n \r\n     private static final long serialVersionUID = -1557150042828800134L;\r"},{"sha":"3b05d3e58253e975797ab2686d0f37eae8588d77","filename":"common/src/main/java/org/apache/syncope/common/to/PasswordPolicyTO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -18,9 +18,14 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.common.types.PasswordPolicySpec;\r\n import org.apache.syncope.common.types.PolicyType;\r\n \r\n+@XmlRootElement(name = \"passwordPolicy\")\r\n+@XmlType\r\n public class PasswordPolicyTO extends PolicyTO {\r\n \r\n     private static final long serialVersionUID = -5606086441294799690L;\r"},{"sha":"5a193b756fb2ac8f1acff5a3bcce906d8db13cd1","filename":"common/src/main/java/org/apache/syncope/common/to/PolicyTO.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPolicyTO.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -18,9 +18,17 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlSeeAlso;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n import org.apache.syncope.common.types.PolicyType;\r\n \r\n+@XmlRootElement(name = \"policy\")\r\n+@XmlType\r\n+@XmlSeeAlso({AccountPolicyTO.class, PasswordPolicyTO.class, SyncPolicyTO.class})\r\n+//@JsonTypeInfo(use=Id.CLASS, include=As.PROPERTY, property=\"class\")\r\n public abstract class PolicyTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = -2903888572649721035L;\r"},{"sha":"99868b1b0a1c1c3041c7d4458d409bd8d46cb9bf","filename":"common/src/main/java/org/apache/syncope/common/to/SyncPolicyTO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -18,9 +18,14 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.common.types.PolicyType;\r\n import org.apache.syncope.common.types.SyncPolicySpec;\r\n \r\n+@XmlRootElement(name = \"syncPolicy\")\r\n+@XmlType\r\n public class SyncPolicyTO extends PolicyTO {\r\n \r\n     private static final long serialVersionUID = 993024634238024242L;\r"},{"sha":"52c86862227c084567c38412c18b034afb79cc3d","filename":"common/src/main/java/org/apache/syncope/common/types/AbstractPolicySpec.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -24,6 +24,4 @@ public class AbstractPolicySpec extends AbstractBaseBean {\n \r\n     private static final long serialVersionUID = 2740439904103716653L;\r\n \r\n-    public AbstractPolicySpec() {\r\n-    }\r\n }\r"},{"sha":"9782a71566cbf0c82dc4c00803609f2bbeabf066","filename":"common/src/main/java/org/apache/syncope/common/types/AccountPolicySpec.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -21,8 +21,13 @@\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.common.annotation.SchemaList;\r\n \r\n+@XmlType\r\n public class AccountPolicySpec extends AbstractPolicySpec {\r\n \r\n     private static final long serialVersionUID = 3259256974414758406L;\r\n@@ -114,6 +119,8 @@ public void setMinLength(int minLength) {\n         this.minLength = minLength;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"prefixesNotPermitted\")\r\n+    @XmlElement(name = \"prefix\")\r\n     public List<String> getPrefixesNotPermitted() {\r\n         if (prefixesNotPermitted == null) {\r\n             prefixesNotPermitted = new ArrayList<String>();\r\n@@ -125,6 +132,8 @@ public void setPrefixesNotPermitted(List<String> prefixesNotPermitted) {\n         this.prefixesNotPermitted = prefixesNotPermitted;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"schemasNotPermitted\")\r\n+    @XmlElement(name = \"schema\")\r\n     public List<String> getSchemasNotPermitted() {\r\n         if (schemasNotPermitted == null) {\r\n             schemasNotPermitted = new ArrayList<String>();\r\n@@ -136,6 +145,8 @@ public void setSchemasNotPermitted(List<String> schemasNotPermitted) {\n         this.schemasNotPermitted = schemasNotPermitted;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"suffixesNotPermitted\")\r\n+    @XmlElement(name = \"suffix\")\r\n     public List<String> getSuffixesNotPermitted() {\r\n         if (suffixesNotPermitted == null) {\r\n             suffixesNotPermitted = new ArrayList<String>();\r\n@@ -147,6 +158,8 @@ public void setSuffixesNotPermitted(List<String> suffixesNotPermitted) {\n         this.suffixesNotPermitted = suffixesNotPermitted;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"wordsNotPermitted\")\r\n+    @XmlElement(name = \"word\")\r\n     public List<String> getWordsNotPermitted() {\r\n         if (wordsNotPermitted == null) {\r\n             wordsNotPermitted = new ArrayList<String>();\r"},{"sha":"02a4c0c4b71a1d2424dcb470d3bc6604553d7c73","filename":"common/src/main/java/org/apache/syncope/common/types/PasswordPolicySpec.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -21,8 +21,13 @@\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.common.annotation.SchemaList;\r\n \r\n+@XmlType\r\n public class PasswordPolicySpec extends AbstractPolicySpec {\r\n \r\n     private static final long serialVersionUID = -7988778083915548547L;\r\n@@ -252,6 +257,8 @@ public void setNonAlphanumericRequired(boolean nonAlphanumericRequired) {\n         this.nonAlphanumericRequired = nonAlphanumericRequired;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"prefixesNotPermitted\")\r\n+    @XmlElement(name = \"prefix\")\r\n     public List<String> getPrefixesNotPermitted() {\r\n         if (prefixesNotPermitted == null) {\r\n             prefixesNotPermitted = new ArrayList<String>();\r\n@@ -263,6 +270,8 @@ public void setPrefixesNotPermitted(List<String> prefixesNotPermitted) {\n         this.prefixesNotPermitted = prefixesNotPermitted;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"schemasNotPermitted\")\r\n+    @XmlElement(name = \"schema\")\r\n     public List<String> getSchemasNotPermitted() {\r\n         if (schemasNotPermitted == null) {\r\n             schemasNotPermitted = new ArrayList<String>();\r\n@@ -274,6 +283,8 @@ public void setSchemasNotPermitted(List<String> schemasNotPermitted) {\n         this.schemasNotPermitted = schemasNotPermitted;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"suffixesNotPermitted\")\r\n+    @XmlElement(name = \"suffix\")\r\n     public List<String> getSuffixesNotPermitted() {\r\n         if (suffixesNotPermitted == null) {\r\n             suffixesNotPermitted = new ArrayList<String>();\r\n@@ -293,6 +304,8 @@ public void setUppercaseRequired(boolean uppercaseRequired) {\n         this.uppercaseRequired = uppercaseRequired;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"wordsNotPermitted\")\r\n+    @XmlElement(name = \"word\")\r\n     public List<String> getWordsNotPermitted() {\r\n         if (wordsNotPermitted == null) {\r\n             wordsNotPermitted = new ArrayList<String>();\r"},{"sha":"b67a35248589b3450bce410be3f621075361f7e7","filename":"common/src/main/java/org/apache/syncope/common/types/PolicyType.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -18,6 +18,9 @@\n  */\r\n package org.apache.syncope.common.types;\r\n \r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n public enum PolicyType {\r\n \r\n     /**\r\n@@ -26,11 +29,13 @@ public enum PolicyType {\n      */\r\n     ACCOUNT(\"Account Policy\"),\r\n     GLOBAL_ACCOUNT(\"Account Global Policy\"),\r\n+\r\n     /**\r\n      * Password policy regarding password syntax.\r\n      */\r\n     PASSWORD(\"Password Policy\"),\r\n     GLOBAL_PASSWORD(\"Password Global Policy\"),\r\n+\r\n     /**\r\n      * SYNC policy regarding account conflicts resolution.\r\n      */\r\n@@ -46,4 +51,8 @@ public enum PolicyType {\n     public String getDescription() {\r\n         return description;\r\n     }\r\n+\r\n+    public static PolicyType fromString(String value) {\r\n+        return PolicyType.valueOf(value.toUpperCase());\r\n+    }\r\n }\r"},{"sha":"2720b8e28092b094bf62b13b75d4789a1ed9d362","filename":"common/src/main/java/org/apache/syncope/common/types/SyncPolicySpec.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -21,8 +21,13 @@\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.common.annotation.SchemaList;\r\n \r\n+@XmlType\r\n public class SyncPolicySpec extends AbstractPolicySpec {\r\n \r\n     private static final long serialVersionUID = -3144027171719498127L;\r\n@@ -61,6 +66,8 @@ public void setConflictResolutionAction(final ConflictResolutionAction conflictR\n         this.conflictResolutionAction = conflictResolutionAction;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"userAltSearchSchemas\")\r\n+    @XmlElement(name = \"userAltSearchSchema\")\r\n     public List<String> getuAltSearchSchemas() {\r\n         return uAltSearchSchemas;\r\n     }\r\n@@ -69,6 +76,8 @@ public void setuAltSearchSchemas(List<String> uAltSearchSchemas) {\n         this.uAltSearchSchemas = uAltSearchSchemas;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"roleAltSearchSchemas\")\r\n+    @XmlElement(name = \"roleAltSearchSchema\")\r\n     public List<String> getrAltSearchSchemas() {\r\n         return rAltSearchSchemas;\r\n     }\r"},{"sha":"a516a33629e7a94d75e890e060ff93816bcdd633","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -69,7 +69,7 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type, final boo\n         List<T> policies = new ArrayList<T>();\n \n         try {\n-            policies = (List<T>) getService(PolicyService.class).listByType(type);\n+            policies = (List<T>) getService(PolicyService.class).list(type);\n             res.addAll(policies);\n         } catch (Exception ignore) {\n             LOG.debug(\"No policy found\", ignore);\n@@ -87,26 +87,27 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type, final boo\n         return res;\n     }\n \n-    public <T extends PolicyTO> T createPolicy(final T policy) throws InvalidPolicyType {\n-        return getService(PolicyService.class).create(policy.getType(), policy);\n+    public <T extends PolicyTO> void createPolicy(final T policy) {\n+        getService(PolicyService.class).create(policy.getType(), policy);\n     }\n \n-    public <T extends PolicyTO> T updatePolicy(final T policy) throws InvalidPolicyType {\n-        return getService(PolicyService.class).update(policy.getType(), policy.getId(), policy);\n+    public <T extends PolicyTO> void updatePolicy(final T policy) {\n+        getService(PolicyService.class).update(policy.getType(), policy.getId(), policy);\n     }\n \n-    public PolicyTO delete(final Long id, Class<? extends PolicyTO> policyClass) {\n-        return getService(PolicyService.class).delete(getPolicyType(policyClass), id);\n+    public void delete(final Long id, final Class<? extends PolicyTO> policyClass) {\n+        getService(PolicyService.class).delete(getPolicyType(policyClass), id);\n     }\n \n-    private PolicyType getPolicyType(Class<? extends PolicyTO> clazz) {\n-        if (AccountPolicyTO.class.equals(clazz))\n+    private PolicyType getPolicyType(final Class<? extends PolicyTO> clazz) {\n+        if (AccountPolicyTO.class.equals(clazz)) {\n             return PolicyType.ACCOUNT;\n-        else if (PasswordPolicyTO.class.equals(clazz))\n+        } else if (PasswordPolicyTO.class.equals(clazz)) {\n             return PolicyType.PASSWORD;\n-        else if (SyncPolicyTO.class.equals(clazz))\n+        } else if (SyncPolicyTO.class.equals(clazz)) {\n             return PolicyType.SYNC;\n-        else\n+        } else {\n             throw new IllegalArgumentException(\"Policy Type not supported\");\n+        }\n     }\n }"},{"sha":"032cbc6b64ce42643af90a35840545eb25a44825","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -18,12 +18,15 @@\n  */\r\n package org.apache.syncope.core.services;\r\n \r\n+import java.io.IOException;\r\n+import java.io.OutputStream;\r\n import java.net.URI;\r\n import java.util.List;\r\n import java.util.Set;\r\n \r\n import javax.ws.rs.NotFoundException;\r\n import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.StreamingOutput;\r\n import javax.ws.rs.core.UriInfo;\r\n \r\n import org.apache.syncope.common.services.ConfigurationService;\r\n@@ -55,7 +58,17 @@ public Response create(final ConfigurationTO configurationTO) {\n     public Response dbExport() {\r\n         configurationController.dbExport(new DummyHTTPServletResponse());\r\n         // TODO catch output-stream and forward it to response\r\n-        return null;\r\n+        return Response.ok(new StreamingOutput() {\r\n+\r\n+            @Override\r\n+            public void write(final OutputStream output) throws IOException {\r\n+//                FileInputStream is = new FileInputStream(\"/etc/hosts\");\r\n+//                while (is.available() > 0) {\r\n+//                    output.write(is.read());\r\n+//                }\r\n+//                is.close();\r\n+            }\r\n+        }).build();\r\n     }\r\n \r\n     @Override\r\n@@ -92,9 +105,9 @@ public ConfigurationTO read(final String key) {\n     }\r\n \r\n     @Override\r\n-    public ConfigurationTO update(final String key, final ConfigurationTO configurationTO) {\r\n+    public void update(final String key, final ConfigurationTO configurationTO) {\r\n         try {\r\n-            return configurationController.update(null, configurationTO);\r\n+            configurationController.update(null, configurationTO);\r\n         } catch (MissingConfKeyException e) {\r\n             throw new NotFoundException(e);\r\n         }\r"},{"sha":"9f50bd406af582a247d737c17a506d384541641a","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -0,0 +1,152 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.services;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.BadRequestException;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.UriInfo;\r\n+\r\n+import org.apache.syncope.common.services.PolicyService;\r\n+import org.apache.syncope.common.to.AccountPolicyTO;\r\n+import org.apache.syncope.common.to.PasswordPolicyTO;\r\n+import org.apache.syncope.common.to.PolicyTO;\r\n+import org.apache.syncope.common.to.SyncPolicyTO;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+import org.apache.syncope.core.rest.controller.PolicyController;\r\n+import org.apache.syncope.core.util.NotFoundException;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service\r\n+public class PolicyServiceImpl implements PolicyService, ContextAware {\r\n+\r\n+    @Autowired\r\n+    private PolicyController policyController;\r\n+\r\n+    private UriInfo uriInfo;\r\n+\r\n+    @Override\r\n+    public <T extends PolicyTO> Response create(final PolicyType type, final T policyTO) {\r\n+        PolicyTO policy;\r\n+        switch (type) {\r\n+            case ACCOUNT:\r\n+                policy = policyController.create(new DummyHTTPServletResponse(), (AccountPolicyTO) policyTO);\r\n+                break;\r\n+\r\n+            case PASSWORD:\r\n+                policy = policyController.create(new DummyHTTPServletResponse(), (PasswordPolicyTO) policyTO);\r\n+                break;\r\n+\r\n+            case SYNC:\r\n+                policy = policyController.create(new DummyHTTPServletResponse(), (SyncPolicyTO) policyTO);\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(policy.getId() + \"\").build();\r\n+        return Response.created(location).build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final PolicyType type, final Long policyId) {\r\n+        try {\r\n+            policyController.delete(policyId);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends PolicyTO> List<T> list(final PolicyType type) {\r\n+        return (List<T>) policyController.listByType(type.toString());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends PolicyTO> T read(final PolicyType type, final Long policyId) {\r\n+        try {\r\n+            return (T) policyController.read(policyId);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends PolicyTO> T readGlobal(final PolicyType type) {\r\n+        try {\r\n+            switch (type) {\r\n+                case ACCOUNT:\r\n+                case GLOBAL_ACCOUNT:\r\n+                    return (T) policyController.getGlobalAccountPolicy();\r\n+\r\n+                case PASSWORD:\r\n+                case GLOBAL_PASSWORD:\r\n+                    return (T) policyController.getGlobalPasswordPolicy();\r\n+\r\n+                case SYNC:\r\n+                case GLOBAL_SYNC:\r\n+                    return (T) policyController.getGlobalSyncPolicy();\r\n+\r\n+                default:\r\n+                    throw new BadRequestException();\r\n+            }\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends PolicyTO> void update(final PolicyType type, final Long policyId, final T policyTO) {\r\n+        try {\r\n+            switch (type) {\r\n+                case ACCOUNT:\r\n+                case GLOBAL_ACCOUNT:\r\n+                    policyController.update((AccountPolicyTO) policyTO);\r\n+                    break;\r\n+\r\n+                case PASSWORD:\r\n+                case GLOBAL_PASSWORD:\r\n+                    policyController.update((PasswordPolicyTO) policyTO);\r\n+                    break;\r\n+\r\n+                case SYNC:\r\n+                case GLOBAL_SYNC:\r\n+                    policyController.update((SyncPolicyTO) policyTO);\r\n+                    break;\r\n+\r\n+                default:\r\n+                    break;\r\n+            }\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setUriInfo(final UriInfo ui) {\r\n+        this.uriInfo = ui;\r\n+    }\r\n+\r\n+}\r"},{"sha":"c76bad0fc65f4163e46866104d023ac59bba8d91","filename":"core/src/main/java/org/apache/syncope/core/util/NotFoundException.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FNotFoundException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FNotFoundException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FNotFoundException.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -25,11 +25,11 @@ public class NotFoundException extends Exception {\n \n     private static final long serialVersionUID = 4810651769126663580L;\n \n-    public NotFoundException(String msg) {\n+    public NotFoundException(final String msg) {\n         super(msg);\n     }\n \n-    public NotFoundException(String msg, Exception e) {\n+    public NotFoundException(final String msg, final Exception e) {\n         super(msg, e);\n     }\n }"},{"sha":"3edf4cfb4cf7873bad48311870230a66ed4b4128","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -69,6 +69,7 @@ under the License.\n       <ref bean=\"configurationServiceImpl\"/>\n       <ref bean=\"connectorServiceImpl\"/>\n       <ref bean=\"entitlementServiceImpl\"/>\n+      <ref bean=\"policyServiceImpl\"/>\n       <ref bean=\"schemaServiceImpl\"/>\n     </jaxrs:serviceBeans>\n     <jaxrs:resourceComparator>"},{"sha":"9ee04fa7d90390e5abefc0c1c9bff706503968bb","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -99,7 +99,8 @@ public void update() {\n         value++;\n         configurationTO.setValue(value + \"\");\n \n-        ConfigurationTO newConfigurationTO = configurationService.update(configurationTO.getKey(), configurationTO);\n+        configurationService.update(configurationTO.getKey(), configurationTO);\n+        ConfigurationTO newConfigurationTO = configurationService.read(configurationTO.getKey());\n         assertEquals(configurationTO, newConfigurationTO);\n \n         newConfigurationTO = configurationService.read(\"token.expireTime\");"},{"sha":"28e596b58acaf64da54d10916661c5214d1d342f","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":20,"deletions":13,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -25,6 +25,8 @@\n \n import java.util.List;\n \n+import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n@@ -43,7 +45,7 @@ public class PolicyTestITCase extends AbstractTest {\n \n     @Test\n     public void listByType() {\n-        List<SyncPolicyTO> policyTOs = policyService.listByType(PolicyType.SYNC);\n+        List<SyncPolicyTO> policyTOs = policyService.list(PolicyType.SYNC);\n \n         assertNotNull(policyTOs);\n         assertFalse(policyTOs.isEmpty());\n@@ -109,7 +111,9 @@ public void createMissingDescription() {\n     public void create() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n \n-        SyncPolicyTO policyTO = policyService.create(PolicyType.SYNC, policy);\n+        Response response = policyService.create(PolicyType.SYNC, policy);\n+        assertNotNull(response);\n+        SyncPolicyTO policyTO = getObject(response.getLocation(), SyncPolicyTO.class);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.SYNC, policyTO.getType());\n@@ -125,7 +129,9 @@ public void update() {\n         policy.setSpecification(globalPolicy.getSpecification());\n \n         // create a new password policy using global password as a template\n-        policy = policyService.create(PolicyType.PASSWORD, policy);\n+        Response response = policyService.create(PolicyType.PASSWORD, policy);\n+        assertNotNull(response);\n+        policy = getObject(response.getLocation(), PasswordPolicyTO.class);\n \n         // read new password policy\n         policy = policyService.read(PolicyType.PASSWORD, policy.getId());\n@@ -137,7 +143,8 @@ public void update() {\n         policy.setSpecification(policySpec);\n \n         // update new password policy\n-        policy = policyService.update(PolicyType.PASSWORD, policy.getId(), policy);\n+        policyService.update(PolicyType.PASSWORD, policy.getId(), policy);\n+        policy = policyService.read(PolicyType.PASSWORD, policy.getId());\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n@@ -148,27 +155,27 @@ public void update() {\n     @Test\n     public void delete() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n-        SyncPolicyTO policyTO = policyService.create(PolicyType.SYNC, policy);\n+        Response response = policyService.create(PolicyType.SYNC, policy);\n+        assertNotNull(response);\n+        SyncPolicyTO policyTO = getObject(response.getLocation(), SyncPolicyTO.class);\n         assertNotNull(policyTO);\n \n-        PolicyTO policyToDelete =\n-                policyService.delete(PolicyType.SYNC, policyTO.getId());\n-        assertNotNull(policyToDelete);\n+        policyService.delete(PolicyType.SYNC, policyTO.getId());\n \n         Throwable t = null;\n         try {\n-        \tpolicyService.read(PolicyType.SYNC, policyTO.getId());\n+            policyService.read(PolicyType.SYNC, policyTO.getId());\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n         }\n \n         assertNotNull(t);\n     }\n \n-\tprivate SyncPolicyTO buildSyncPolicyTO() {\n-\t\tSyncPolicyTO policy = new SyncPolicyTO();\n+    private SyncPolicyTO buildSyncPolicyTO() {\n+        SyncPolicyTO policy = new SyncPolicyTO();\n         policy.setSpecification(new SyncPolicySpec());\n         policy.setDescription(\"Sync policy\");\n-\t\treturn policy;\n-\t}\n+        return policy;\n+    }\n }"},{"sha":"7185320601177b3e25cde0e4d44578fbcf43bb3e","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":43,"deletions":35,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55bfc7d91fd21c806765eb51345da4f827363c97/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=55bfc7d91fd21c806765eb51345da4f827363c97","patch":"@@ -32,6 +32,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.UserMod;\n@@ -73,7 +75,7 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class UserTestITCase extends AbstractTest {\n \n-    private ConnObjectTO readUserConnObj(String resourceName, String userId) {\n+    private ConnObjectTO readUserConnObj(final String resourceName, final String userId) {\n         return resourceService.getConnector(resourceName, AttributableType.USER, userId);\n     }\n \n@@ -105,7 +107,7 @@ public void selfRead() {\n         super.setupRestTemplate(\"user1\", ADMIN_PWD);\n \n         try {\n-            userService.read(1l);\n+            userService.read(1L);\n             fail();\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n@@ -169,7 +171,7 @@ public void createUserWithNoPropagation() {\n      * introducing a simple control.\n      */\n     public void issue172() {\n-        List<PasswordPolicyTO> policies = policyService.listByType(PolicyType.GLOBAL_PASSWORD);\n+        List<PasswordPolicyTO> policies = policyService.list(PolicyType.GLOBAL_PASSWORD);\n         for (PasswordPolicyTO policyTO : policies) {\n             policyService.delete(PolicyType.PASSWORD, policyTO.getId());\n         }\n@@ -179,7 +181,9 @@ public void issue172() {\n             userService.create(userTO);\n         } finally {\n             for (PasswordPolicyTO policyTO : policies) {\n-                PolicyTO cPolicyTO = policyService.create(PolicyType.GLOBAL_PASSWORD, policyTO);\n+                Response response = policyService.create(PolicyType.GLOBAL_PASSWORD, policyTO);\n+                assertNotNull(response);\n+                PolicyTO cPolicyTO = getObject(response.getLocation(), PasswordPolicyTO.class);\n                 assertNotNull(cPolicyTO);\n             }\n         }\n@@ -399,8 +403,7 @@ public void createWithException() {\n     @Test\n     public void create() {\n         // get task list\n-        List<PropagationTaskTO> tasks =\n-                taskService.list(TaskType.PROPAGATION);\n+        List<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -467,7 +470,7 @@ public void create() {\n         }\n \n         // default configuration for ws-target-resource2:\n-        //             only failed executions have to be registered\n+        // only failed executions have to be registered\n         // --> no more tasks/executions should be added\n         assertEquals(newMaxId, maxId);\n \n@@ -667,8 +670,8 @@ public void createWithApproval() {\n \n         exception = null;\n         try {\n-            final String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.\n-                    getUsername());\n+            final String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class,\n+                    userTO.getUsername());\n             assertEquals(userTO.getUsername(), username);\n         } catch (EmptyResultDataAccessException e) {\n             exception = e;\n@@ -687,7 +690,7 @@ public void createWithApproval() {\n     @Test\n     public void delete() {\n         try {\n-            userService.delete(0l);\n+            userService.delete(0L);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -789,7 +792,7 @@ public void paginatedList() {\n \n     @Test\n     public void read() {\n-        UserTO userTO = userService.read(1l);\n+        UserTO userTO = userService.read(1L);\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getAttributes());\n@@ -985,7 +988,7 @@ public void verifyTaskRegistration() {\n         }\n \n         // default configuration for ws-target-resource2:\n-        //             only failed executions have to be registered\n+        // only failed executions have to be registered\n         // --> no more tasks/executions should be added\n         assertEquals(newMaxId, maxId);\n \n@@ -1014,7 +1017,7 @@ public void verifyTaskRegistration() {\n         }\n \n         // default configuration for ws-target-resource2:\n-        //             all update executions have to be registered\n+        // all update executions have to be registered\n         assertTrue(newMaxId > maxId);\n \n         final PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, newMaxId);\n@@ -1091,7 +1094,6 @@ public void createActivateByUsername() {\n \n         userTO = userService.activateByUsername(userTO.getUsername(), userTO.getToken());\n \n-\n         assertNotNull(userTO);\n         assertNull(userTO.getToken());\n         assertNull(userTO.getTokenExpireTime());\n@@ -1110,7 +1112,9 @@ public void suspendReactivate() {\n         userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n-        assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers()\n+                ? \"active\"\n+                : \"created\", userTO.getStatus());\n \n         userTO = userService.suspend(userTO.getId());\n \n@@ -1134,7 +1138,9 @@ public void suspendReactivateByUsername() {\n         userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n-        assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers()\n+                ? \"active\"\n+                : \"created\", userTO.getStatus());\n \n         userTO = userService.suspendByUsername(userTO.getUsername());\n \n@@ -1167,7 +1173,9 @@ public void suspendReactivateOnResource() {\n         userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n-        assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers()\n+                ? \"active\"\n+                : \"created\", userTO.getStatus());\n \n         String query = \"?resourceNames=\" + dbTable.getName() + \"&resourceNames=\" + ldap.getName()\n                 + \"&performLocally=true\"; // check also performLocally\n@@ -1181,9 +1189,8 @@ public void suspendReactivateOnResource() {\n         assertNotNull(dbTableUID);\n \n         ConnObjectTO connObjectTO = readUserConnObj(dbTable.getName(), dbTableUID);\n-        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).\n-                getValues().\n-                get(0)));\n+        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME)\n+                .getValues().get(0)));\n \n         String ldapUID = userTO.getUsername();\n         assertNotNull(ldapUID);\n@@ -1198,9 +1205,8 @@ public void suspendReactivateOnResource() {\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         connObjectTO = readUserConnObj(dbTable.getName(), dbTableUID);\n-        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).\n-                getValues().\n-                get(0)));\n+        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME)\n+                .getValues().get(0)));\n \n         query = \"?resourceNames=\" + dbTable.getName() + \"&performLocally=true\"; // check also performLocally\n \n@@ -1209,9 +1215,8 @@ public void suspendReactivateOnResource() {\n         assertEquals(\"active\", userTO.getStatus());\n \n         connObjectTO = readUserConnObj(dbTable.getName(), dbTableUID);\n-        assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).\n-                getValues().\n-                get(0)));\n+        assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME)\n+                .getValues().get(0)));\n     }\n \n     public void updateMultivalueAttribute() {\n@@ -1254,8 +1259,8 @@ public void issue213() {\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n-        String username =\n-                jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n+        String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class,\n+                userTO.getUsername());\n \n         assertEquals(userTO.getUsername(), username);\n \n@@ -1615,7 +1620,8 @@ public void issueSYNCOPE111() {\n         userMod.setId(actual.getId());\n \n         MembershipTO membershipTO = actual.getMemberships().get(0).getRoleId() == 12L\n-                ? actual.getMemberships().get(0) : actual.getMemberships().get(1);\n+                ? actual.getMemberships().get(0)\n+                : actual.getMemberships().get(1);\n \n         userMod.addMembershipToBeRemoved(membershipTO.getId());\n \n@@ -1627,8 +1633,8 @@ public void issueSYNCOPE111() {\n         assertNotNull(connObjectTO);\n \n         postalAddress = connObjectTO.getAttributeMap().get(\"postalAddress\");\n-        assertTrue(postalAddress == null\n-                || postalAddress.getValues().isEmpty() || StringUtils.hasText(postalAddress.getValues().get(0)));\n+        assertTrue(postalAddress == null || postalAddress.getValues().isEmpty()\n+                || StringUtils.hasText(postalAddress.getValues().get(0)));\n \n         title = connObjectTO.getAttributeMap().get(\"title\");\n         assertNotNull(title);\n@@ -1672,7 +1678,8 @@ public void issueSYNCOPE51() {\n         configurationTO.setKey(\"password.cipher.algorithm\");\n         configurationTO.setValue(\"MD5\");\n \n-        ConfigurationTO newConfTO = configurationService.update(configurationTO.getKey(), configurationTO);\n+        configurationService.update(configurationTO.getKey(), configurationTO);\n+        ConfigurationTO newConfTO = configurationService.read(configurationTO.getKey());\n \n         assertEquals(configurationTO, newConfTO);\n \n@@ -1683,11 +1690,12 @@ public void issueSYNCOPE51() {\n             userService.create(userTO);\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n-            assertTrue(\n-                    e.getException(SyncopeClientExceptionType.NotFound).getElements().iterator().next().contains(\"MD5\"));\n+            assertTrue(e.getException(SyncopeClientExceptionType.NotFound).getElements().iterator().next()\n+                    .contains(\"MD5\"));\n         }\n \n-        ConfigurationTO oldConfTO = configurationService.update(defaultConfigurationTO.getKey(), defaultConfigurationTO);\n+        configurationService.update(defaultConfigurationTO.getKey(), defaultConfigurationTO);\n+        ConfigurationTO oldConfTO = configurationService.read(defaultConfigurationTO.getKey());\n \n         assertEquals(defaultConfigurationTO, oldConfTO);\n     }"}]}