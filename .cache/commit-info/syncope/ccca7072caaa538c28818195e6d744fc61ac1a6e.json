{"sha":"ccca7072caaa538c28818195e6d744fc61ac1a6e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNjY2E3MDcyY2FhYTUzOGMyODgxODE5NWU2ZDc0NGZjNjFhYzFhNmU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-22T16:24:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-22T16:50:23Z"},"message":"[SYNCOPE-1269] Aligning conf param create with PlainSchema create","tree":{"sha":"cacf9c08986dd2be220e503bbae390d55ab12c8a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cacf9c08986dd2be220e503bbae390d55ab12c8a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ccca7072caaa538c28818195e6d744fc61ac1a6e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ccca7072caaa538c28818195e6d744fc61ac1a6e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ccca7072caaa538c28818195e6d744fc61ac1a6e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ccca7072caaa538c28818195e6d744fc61ac1a6e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"691693cb553e68eabdac7369d24a914b8b8cf181","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/691693cb553e68eabdac7369d24a914b8b8cf181","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/691693cb553e68eabdac7369d24a914b8b8cf181"}],"stats":{"total":425,"additions":341,"deletions":84},"files":[{"sha":"4eed5ad804e8c84de8751ea385e258e4cad3ffbb","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersCreateWizardSchemaStep.java","status":"modified","additions":269,"deletions":47,"changes":316,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.java?ref=ccca7072caaa538c28818195e6d744fc61ac1a6e","patch":"@@ -20,22 +20,30 @@\n \n import java.util.Arrays;\n import java.util.List;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n+import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.PropertyList;\n import org.apache.syncope.client.console.init.ConsoleInitializer;\n import org.apache.syncope.client.console.init.MIMETypesLoader;\n+import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n \n@@ -46,22 +54,49 @@ public class ParametersCreateWizardSchemaStep extends WizardStep {\n     private static final MIMETypesLoader MIME_TYPES_LOADER = (MIMETypesLoader) SyncopeConsoleApplication.get().\n             getServletContext().getAttribute(ConsoleInitializer.MIMETYPES_LOADER);\n \n+    private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n+\n+    private final MultiFieldPanel<String> enumerationValues;\n+\n+    private final MultiFieldPanel<String> enumerationKeys;\n+\n+    private final AjaxDropDownChoicePanel<String> validator;\n+\n     public ParametersCreateWizardSchemaStep(final ParametersCreateWizardPanel.ParametersForm modelObject) {\n         modelObject.getPlainSchemaTO().setMandatoryCondition(\"false\");\n \n         final WebMarkupContainer content = new WebMarkupContainer(\"content\");\n         this.setOutputMarkupId(true);\n         content.setOutputMarkupId(true);\n         add(content);\n+\n         final AjaxDropDownChoicePanel<AttrSchemaType> type = new AjaxDropDownChoicePanel<>(\n                 \"type\", getString(\"type\"), new PropertyModel<>(modelObject.getPlainSchemaTO(), \"type\"));\n         type.setChoices(Arrays.asList(AttrSchemaType.values()));\n         content.add(type);\n \n-        final MultiFieldPanel<String> panel = new MultiFieldPanel.Builder<String>(\n+        // long, double, date\n+        final AjaxTextFieldPanel conversionPattern = new AjaxTextFieldPanel(\"conversionPattern\",\n+                getString(\"conversionPattern\"), new PropertyModel<String>(\n+                modelObject.getPlainSchemaTO(), \"conversionPattern\"));\n+        content.add(conversionPattern);\n+\n+        final WebMarkupContainer conversionParams = new WebMarkupContainer(\"conversionParams\");\n+        conversionParams.setOutputMarkupPlaceholderTag(true);\n+        conversionParams.add(conversionPattern);\n+        content.add(conversionParams);\n+\n+        final WebMarkupContainer typeParams = new WebMarkupContainer(\"typeParams\");\n+        typeParams.setOutputMarkupPlaceholderTag(true);\n+\n+        // enum\n+        final AjaxTextFieldPanel enumerationValuesPanel = new AjaxTextFieldPanel(\"panel\", \"enumerationValues\",\n+                new Model<>(null));\n+\n+        enumerationValues = new MultiFieldPanel.Builder<String>(\n                 new PropertyModel<List<String>>(modelObject.getPlainSchemaTO(), \"enumerationValues\") {\n \n-            private static final long serialVersionUID = 3985215199105092649L;\n+            private static final long serialVersionUID = -4953564762272833993L;\n \n             @Override\n             public PropertyList<PlainSchemaTO> getObject() {\n@@ -92,76 +127,263 @@ protected String newModelObject() {\n                 return StringUtils.EMPTY;\n             }\n \n-        }.build(\"values\", getString(\"values\"), new AjaxTextFieldPanel(\n-                \"panel\", getString(\"values\"), new Model<String>(), false));\n+        }.build(\n+                \"enumerationValues\",\n+                \"enumerationValues\",\n+                enumerationValuesPanel);\n \n-        panel.setVisible(false);\n-        content.add(panel);\n+        enumerationKeys = new MultiFieldPanel.Builder<String>(\n+                new PropertyModel<List<String>>(modelObject.getPlainSchemaTO(), \"enumerationKeys\") {\n \n-        //binary\n-        final AjaxTextFieldPanel mimeType = new AjaxTextFieldPanel(\"mimeType\",\n-                \"MIME-Type\", new PropertyModel<>(modelObject.getPlainSchemaTO(), \"mimeType\"));\n-        mimeType.setVisible(false);\n-        content.add(mimeType);\n+            private static final long serialVersionUID = -4953564762272833993L;\n \n-        //encrypted\n+            @Override\n+            public PropertyList<PlainSchemaTO> getObject() {\n+                return new PropertyList<PlainSchemaTO>() {\n+\n+                    @Override\n+                    public String getValues() {\n+                        return modelObject.getPlainSchemaTO().getEnumerationKeys();\n+                    }\n+\n+                    @Override\n+                    public void setValues(final List<String> list) {\n+                        modelObject.getPlainSchemaTO().setEnumerationKeys(PropertyList.getEnumValuesAsString(list));\n+                    }\n+                };\n+            }\n+\n+            @Override\n+            public void setObject(final List<String> object) {\n+                modelObject.getPlainSchemaTO().setEnumerationKeys(PropertyList.getEnumValuesAsString(object));\n+            }\n+        }) {\n+\n+            private static final long serialVersionUID = -8752965211744734798L;\n+\n+            @Override\n+            protected String newModelObject() {\n+                return StringUtils.EMPTY;\n+            }\n+\n+        }.build(\n+                \"enumerationKeys\",\n+                \"enumerationKeys\",\n+                new AjaxTextFieldPanel(\"panel\", \"enumerationKeys\", new Model<String>()));\n+\n+        final WebMarkupContainer enumParams = new WebMarkupContainer(\"enumParams\");\n+        enumParams.setOutputMarkupPlaceholderTag(true);\n+        enumParams.add(enumerationValues);\n+        enumParams.add(enumerationKeys);\n+        typeParams.add(enumParams);\n+\n+        // encrypted\n         final AjaxTextFieldPanel secretKey = new AjaxTextFieldPanel(\"secretKey\",\n-                \"Secret-key\", new PropertyModel<>(modelObject.getPlainSchemaTO(), \"secretKey\"));\n+                getString(\"secretKey\"), new PropertyModel<>(modelObject.getPlainSchemaTO(), \"secretKey\"));\n \n         final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm = new AjaxDropDownChoicePanel<>(\n-                \"cipherAlgorithm\", \"Cipher-algorithm\",\n+                \"cipherAlgorithm\", getString(\"cipherAlgorithm\"),\n                 new PropertyModel<>(modelObject.getPlainSchemaTO(), \"cipherAlgorithm\"));\n \n         cipherAlgorithm.setChoices(Arrays.asList(CipherAlgorithm.values()));\n-        secretKey.setVisible(false);\n-        cipherAlgorithm.setVisible(false);\n-        content.add(secretKey);\n-        content.add(cipherAlgorithm);\n \n-        showHide(type, secretKey, cipherAlgorithm, mimeType);\n+        final WebMarkupContainer encryptedParams = new WebMarkupContainer(\"encryptedParams\");\n+        encryptedParams.setOutputMarkupPlaceholderTag(true);\n+        encryptedParams.add(secretKey);\n+        encryptedParams.add(cipherAlgorithm);\n+\n+        typeParams.add(encryptedParams);\n+\n+        // binary\n+        final AjaxTextFieldPanel mimeType = new AjaxTextFieldPanel(\"mimeType\",\n+                getString(\"mimeType\"), new PropertyModel<>(modelObject.getPlainSchemaTO(), \"mimeType\"));\n \n-        type.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(\"onchange\") {\n+        final WebMarkupContainer binaryParams = new WebMarkupContainer(\"binaryParams\");\n+        binaryParams.setOutputMarkupPlaceholderTag(true);\n+        binaryParams.add(mimeType);\n+        typeParams.add(binaryParams);\n+        content.add(typeParams);\n+\n+        // show or hide\n+        showHide(modelObject.getPlainSchemaTO(), type,\n+                conversionParams, conversionPattern,\n+                enumParams, enumerationValuesPanel, enumerationValues, enumerationKeys,\n+                encryptedParams, secretKey, cipherAlgorithm,\n+                binaryParams, mimeType);\n+\n+        type.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                if (\"enum\".equalsIgnoreCase(type.getField().getModelObject().name())) {\n-                    panel.setVisible(true);\n-                    content.add(panel);\n-                    target.add(content);\n-                } else {\n-                    panel.setVisible(false);\n-                    content.add(panel);\n-                    target.add(content);\n-                }\n-                ParametersCreateWizardSchemaStep.this.showHide(type, secretKey, cipherAlgorithm, mimeType);\n+                ParametersCreateWizardSchemaStep.this.showHide(modelObject.getPlainSchemaTO(), type,\n+                        conversionParams, conversionPattern,\n+                        enumParams, enumerationValuesPanel, enumerationValues, enumerationKeys,\n+                        encryptedParams, secretKey, cipherAlgorithm,\n+                        binaryParams, mimeType);\n+                target.add(conversionParams);\n+                target.add(typeParams);\n+                target.add(validator);\n             }\n         });\n \n-        final AjaxCheckBoxPanel multiValue = new AjaxCheckBoxPanel(\"panel\", getString(\"multivalue\"),\n-                new PropertyModel<>(modelObject.getPlainSchemaTO(), \"multivalue\"), false);\n-        content.add(multiValue);\n+        IModel<List<String>> validators = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return implRestClient.list(ImplementationType.VALIDATOR).stream().\n+                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+            }\n+        };\n+        validator = new AjaxDropDownChoicePanel<>(\"validator\",\n+                getString(\"validator\"), new PropertyModel<>(modelObject.getPlainSchemaTO(), \"validator\"));\n+        validator.setOutputMarkupId(true);\n+        ((DropDownChoice) validator.getField()).setNullValid(true);\n+        validator.setChoices(validators.getObject());\n+        content.add(validator);\n+\n+        content.add(new AjaxCheckBoxPanel(\"multivalue\", getString(\"multivalue\"),\n+                new PropertyModel<>(modelObject.getPlainSchemaTO(), \"multivalue\")));\n     }\n \n-    private void showHide(\n-            final AjaxDropDownChoicePanel<AttrSchemaType> type,\n-            final AjaxTextFieldPanel secretKey,\n-            final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm,\n-            final AjaxTextFieldPanel mimeType) {\n+    private void showHide(final PlainSchemaTO schema, final AjaxDropDownChoicePanel<AttrSchemaType> type,\n+            final WebMarkupContainer conversionParams, final AjaxTextFieldPanel conversionPattern,\n+            final WebMarkupContainer enumParams, final AjaxTextFieldPanel enumerationValuesPanel,\n+            final MultiFieldPanel<String> enumerationValues, final MultiFieldPanel<String> enumerationKeys,\n+            final WebMarkupContainer encryptedParams,\n+            final AjaxTextFieldPanel secretKey, final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm,\n+            final WebMarkupContainer binaryParams, final AjaxTextFieldPanel mimeType) {\n \n         final int typeOrdinal = Integer.parseInt(type.getField().getValue());\n-        if (AttrSchemaType.Encrypted.ordinal() == typeOrdinal) {\n-            mimeType.setVisible(false);\n-            secretKey.setVisible(true);\n-            secretKey.addRequiredLabel();\n-            cipherAlgorithm.setVisible(true);\n-            cipherAlgorithm.addRequiredLabel();\n+        if (AttrSchemaType.Long.ordinal() == typeOrdinal\n+                || AttrSchemaType.Double.ordinal() == typeOrdinal\n+                || AttrSchemaType.Date.ordinal() == typeOrdinal) {\n+\n+            conversionParams.setVisible(true);\n+\n+            enumParams.setVisible(false);\n+            if (enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.removeRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(PropertyList.getEnumValuesAsList(null));\n+            enumerationKeys.setModelObject(PropertyList.getEnumValuesAsList(null));\n+\n+            encryptedParams.setVisible(false);\n+            if (secretKey.isRequired()) {\n+                secretKey.removeRequiredLabel();\n+            }\n+            secretKey.setModelObject(null);\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.removeRequiredLabel();\n+            }\n+            cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n+            mimeType.setChoices(null);\n+\n+            schema.setValidator(null);\n+        } else if (AttrSchemaType.Enum.ordinal() == typeOrdinal) {\n+            conversionParams.setVisible(false);\n+            conversionPattern.setModelObject(null);\n+\n+            enumParams.setVisible(true);\n+            if (!enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.addRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(PropertyList.getEnumValuesAsList(schema.getEnumerationValues()));\n+            enumerationKeys.setModelObject(PropertyList.getEnumValuesAsList(schema.getEnumerationKeys()));\n+\n+            encryptedParams.setVisible(false);\n+            if (secretKey.isRequired()) {\n+                secretKey.removeRequiredLabel();\n+            }\n+            secretKey.setModelObject(null);\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.removeRequiredLabel();\n+            }\n+            cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n+            mimeType.setChoices(null);\n+\n+            schema.setValidator(null);\n+        } else if (AttrSchemaType.Encrypted.ordinal() == typeOrdinal) {\n+            conversionParams.setVisible(false);\n+            conversionPattern.setModelObject(null);\n+\n+            enumParams.setVisible(false);\n+            if (enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.removeRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(PropertyList.getEnumValuesAsList(null));\n+            enumerationKeys.setModelObject(PropertyList.getEnumValuesAsList(null));\n+\n+            encryptedParams.setVisible(true);\n+            if (!secretKey.isRequired()) {\n+                secretKey.addRequiredLabel();\n+            }\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.addRequiredLabel();\n+            }\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n+            mimeType.setChoices(null);\n+            schema.setValidator(null);\n         } else if (AttrSchemaType.Binary.ordinal() == typeOrdinal) {\n-            secretKey.setVisible(false);\n-            cipherAlgorithm.setVisible(false);\n-            mimeType.setVisible(true);\n+            conversionParams.setVisible(false);\n+            conversionPattern.setModelObject(null);\n+\n+            enumParams.setVisible(false);\n+            if (enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.removeRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(PropertyList.getEnumValuesAsList(null));\n+            enumerationKeys.setModelObject(PropertyList.getEnumValuesAsList(null));\n+\n+            encryptedParams.setVisible(false);\n+            if (secretKey.isRequired()) {\n+                secretKey.removeRequiredLabel();\n+            }\n+            secretKey.setModelObject(null);\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.removeRequiredLabel();\n+            }\n+            cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(true);\n             mimeType.setChoices(MIME_TYPES_LOADER.getMimeTypes());\n+            schema.setValidator(\"BinaryValidator\");\n+        } else {\n+            conversionParams.setVisible(false);\n+            conversionPattern.setModelObject(null);\n+\n+            enumParams.setVisible(false);\n+            if (enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.removeRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(PropertyList.getEnumValuesAsList(null));\n+            enumerationKeys.setModelObject(PropertyList.getEnumValuesAsList(null));\n+\n+            encryptedParams.setVisible(false);\n+            if (secretKey.isRequired()) {\n+                secretKey.removeRequiredLabel();\n+            }\n+            secretKey.setModelObject(null);\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.removeRequiredLabel();\n+            }\n+            cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n+            mimeType.setChoices(null);\n+            schema.setValidator(null);\n         }\n     }\n }"},{"sha":"e62f28907df09d211db3c9d267e7d2e3e0c27f49","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":9,"deletions":17,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=ccca7072caaa538c28818195e6d744fc61ac1a6e","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -82,23 +81,19 @@ public PlainSchemaDetails(\n         type.setChoices(Arrays.asList(AttrSchemaType.values()));\n         type.setEnabled(schemaTO == null || schemaTO.getKey() == null || schemaTO.getKey().isEmpty());\n         type.addRequiredLabel();\n-\n         schemaForm.add(type);\n \n         // long, double, date\n         final AjaxTextFieldPanel conversionPattern = new AjaxTextFieldPanel(\"conversionPattern\",\n                 getString(\"conversionPattern\"), new PropertyModel<>(schemaTO, \"conversionPattern\"));\n-\n         schemaForm.add(conversionPattern);\n \n         final WebMarkupContainer conversionParams = new WebMarkupContainer(\"conversionParams\");\n         conversionParams.setOutputMarkupPlaceholderTag(true);\n         conversionParams.add(conversionPattern);\n-\n         schemaForm.add(conversionParams);\n \n         final WebMarkupContainer typeParams = new WebMarkupContainer(\"typeParams\");\n-\n         typeParams.setOutputMarkupPlaceholderTag(true);\n \n         // enum\n@@ -238,8 +233,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 target.add(typeParams);\n                 target.add(validator);\n             }\n-        }\n-        );\n+        });\n \n         IModel<List<String>> validators = new LoadableDetachableModel<List<String>>() {\n \n@@ -300,7 +294,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n     }\n \n-    private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<AttrSchemaType> type,\n+    private void showHide(final PlainSchemaTO schema, final AjaxDropDownChoicePanel<AttrSchemaType> type,\n             final WebMarkupContainer conversionParams, final AjaxTextFieldPanel conversionPattern,\n             final WebMarkupContainer enumParams, final AjaxTextFieldPanel enumerationValuesPanel,\n             final MultiFieldPanel<String> enumerationValues, final MultiFieldPanel<String> enumerationKeys,\n@@ -336,7 +330,7 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<AttrS\n             mimeType.setModelObject(null);\n             mimeType.setChoices(null);\n \n-            PlainSchemaTO.class.cast(schema).setValidator(null);\n+            schema.setValidator(null);\n         } else if (AttrSchemaType.Enum.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -345,10 +339,8 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<AttrS\n             if (!enumerationValuesPanel.isRequired()) {\n                 enumerationValuesPanel.addRequiredLabel();\n             }\n-            enumerationValues.setModelObject(PropertyList.getEnumValuesAsList(((PlainSchemaTO) schema).\n-                    getEnumerationValues()));\n-            enumerationKeys.setModelObject(PropertyList.getEnumValuesAsList(((PlainSchemaTO) schema).\n-                    getEnumerationKeys()));\n+            enumerationValues.setModelObject(PropertyList.getEnumValuesAsList(schema.getEnumerationValues()));\n+            enumerationKeys.setModelObject(PropertyList.getEnumValuesAsList(schema.getEnumerationKeys()));\n \n             encryptedParams.setVisible(false);\n             if (secretKey.isRequired()) {\n@@ -364,7 +356,7 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<AttrS\n             mimeType.setModelObject(null);\n             mimeType.setChoices(null);\n \n-            PlainSchemaTO.class.cast(schema).setValidator(null);\n+            schema.setValidator(null);\n         } else if (AttrSchemaType.Encrypted.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -388,7 +380,7 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<AttrS\n             mimeType.setModelObject(null);\n             mimeType.setChoices(null);\n \n-            PlainSchemaTO.class.cast(schema).setValidator(null);\n+            schema.setValidator(null);\n         } else if (AttrSchemaType.Binary.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -413,7 +405,7 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<AttrS\n             binaryParams.setVisible(true);\n             mimeType.setChoices(MIME_TYPES_LOADER.getMimeTypes());\n \n-            PlainSchemaTO.class.cast(schema).setValidator(\"BinaryValidator\");\n+            schema.setValidator(\"BinaryValidator\");\n         } else {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -439,7 +431,7 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<AttrS\n             mimeType.setModelObject(null);\n             mimeType.setChoices(null);\n \n-            PlainSchemaTO.class.cast(schema).setValidator(null);\n+            schema.setValidator(null);\n         }\n     }\n }"},{"sha":"a18efd1502d68626729446837ad116acd2176cf4","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ParametersCreateWizardSchemaStep.html","status":"modified","additions":22,"deletions":5,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.html?ref=ccca7072caaa538c28818195e6d744fc61ac1a6e","patch":"@@ -20,11 +20,28 @@\n   <wicket:panel>\n     <div wicket:id=\"content\">\n       <span wicket:id=\"type\">[type]</span>\n-      <span wicket:id=\"values\">[values]</span>\n-      <span wicket:id=\"panel\">[panel]</span>\n-      <span wicket:id=\"mimeType\">[mimeType]</span>\n-      <span wicket:id=\"secretKey\">[secretKey]</span>\n-      <span wicket:id=\"cipherAlgorithm\">[cipherAlgorithm]</span>\n+\n+      <div wicket:id=\"conversionParams\">\n+        <span wicket:id=\"conversionPattern\">[conversionPattern]</span>\n+      </div>\n+\n+      <div wicket:id=\"typeParams\">\n+        <div wicket:id=\"enumParams\">\n+          <span wicket:id=\"enumerationValues\">[enumerationValues]</span>\n+          <span wicket:id=\"enumerationKeys\">[enumerationKeys]</span>\n+        </div>\n+        <div wicket:id=\"encryptedParams\">\n+          <span wicket:id=\"secretKey\">[secretKey]</span>\n+          <span wicket:id=\"cipherAlgorithm\">[cipherAlgorithm]</span>\n+        </div>\n+        <div wicket:id=\"binaryParams\">\n+          <span wicket:id=\"mimeType\">[mimeType]</span>\n+        </div>\n+      </div>\n+\n+      <span wicket:id=\"validator\">[validator]</span>\n+\n+      <span wicket:id=\"multivalue\">[multivalue]</span>\n     </div>\n   </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"c778ac4f3fa5329b98134d9ccd6dcfeff8ad83fc","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ParametersCreateWizardSchemaStep.properties","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.properties?ref=ccca7072caaa538c28818195e6d744fc61ac1a6e","patch":"@@ -15,6 +15,12 @@\n # specific language governing permissions and limitations\n # under the License.\n type=Schema type\n-values=Values\n+required_alert=All form fields are required.\n+enumerationValues= Enumeration values\n+enumerationKeys= Enumeration labels\n multivalue=Multivalue\n-mandatoryCondition=Mandatory\n+validator=Validator\n+conversionPattern=Conversion pattern\n+secretKey=Secret key\n+cipherAlgorithm=Cipher algorithm\n+mimeType=MIME Type"},{"sha":"b76d4608525541ead3611bdcd1717703df9bd2cb","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ParametersCreateWizardSchemaStep_it.properties","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_it.properties?ref=ccca7072caaa538c28818195e6d744fc61ac1a6e","patch":"@@ -15,6 +15,12 @@\n # specific language governing permissions and limitations\n # under the License.\n type=Tipo di schema\n-values=Valori\n+required_alert=Tutti i campi sono richiesti\n+enumerationValues= Valori enumeration\n+enumerationKeys= Label enumeration\n multivalue=Multivalore\n-mandatoryCondition=Obbligatorio\n+validator=Validatore\n+conversionPattern=Conversion pattern\n+secretKey=Chiave segreta\n+cipherAlgorithm=Algoritmo di cifratura\n+mimeType=MIME Type"},{"sha":"a7467ae7639979687f9da18ed2a835198508b995","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ParametersCreateWizardSchemaStep_ja.properties","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_ja.properties?ref=ccca7072caaa538c28818195e6d744fc61ac1a6e","patch":"@@ -15,6 +15,12 @@\n # specific language governing permissions and limitations\n # under the License.\n type=\\u30b9\\u30ad\\u30fc\\u30de\\u30bf\\u30a4\\u30d7\n-values=\\u5024\n+required_alert=\\u3059\\u3079\\u3066\\u306e\\u30d5\\u30a9\\u30fc\\u30e0\\u30d5\\u30a3\\u30fc\\u30eb\\u30c9\\u304c\\u5fc5\\u9808\\u3067\\u3059\\u3002\n+enumerationValues= \\u5217\\u6319\\u5024\n+enumerationKeys= \\u5217\\u6319\\u30e9\\u30d9\\u30eb\n multivalue=\\u8907\\u6570\\u5024\n-mandatoryCondition=\\u5fc5\\u9808\n+validator=Validator\n+conversionPattern=\\u5909\\u63db\\u30d1\\u30bf\\u30fc\\u30f3\n+secretKey=\\u79d8\\u5bc6\\u9375\n+cipherAlgorithm=\\u6697\\u53f7\\u5316\\u30a2\\u30eb\\u30b4\\u30ea\\u30ba\\u30e0\n+mimeType=MIME \\u30bf\\u30a4\\u30d7"},{"sha":"cfd7c932858deedc61804d8471b074aaaf342113","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ParametersCreateWizardSchemaStep_pt_BR.properties","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_pt_BR.properties?ref=ccca7072caaa538c28818195e6d744fc61ac1a6e","patch":"@@ -15,6 +15,12 @@\n # specific language governing permissions and limitations\n # under the License.\n type=Tipo de esquema\n-values=Valores\n-multivalue=Multi-valorizados\n-mandatoryCondition=Obrigat\\u00f3rio\n+required_alert=Todos os campos s\\u00e3o obrigat\\u00f3rios\n+enumerationValues= Valores enumerados\n+enumerationKeys= R\\u00f3tulos de enumera\\u00e7\\u00e3o\n+multivalue=Multivalorado\n+validator=Valida\\u00e7\\u00e3o\n+conversionPattern=Padr\\u00e3o de Convers\\u00e3o\n+secretKey=Chave secreta\n+cipherAlgorithm=Algoritmo de criptografia\n+mimeType=MIME Type"},{"sha":"b48bb24184c599170a774601a7eb0254fed25aa8","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ParametersCreateWizardSchemaStep_ru.properties","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccca7072caaa538c28818195e6d744fc61ac1a6e/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep_ru.properties?ref=ccca7072caaa538c28818195e6d744fc61ac1a6e","patch":"@@ -14,11 +14,13 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-# type=Тип схемы\n type=\\u0422\\u0438\\u043f \\u0441\\u0445\\u0435\\u043c\\u044b\n-# values=Значения\n-values=\\u0417\\u043d\\u0430\\u0447\\u0435\\u043d\\u0438\\u044f\n-# multivalue=Множественные значения\n+required_alert=\\u0412\\u0441\\u0435 \\u043f\\u043e\\u043b\\u044f \\u043e\\u0431\\u044f\\u0437\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u044b \\u0434\\u043b\\u044f \\u0437\\u0430\\u043f\\u043e\\u043b\\u043d\\u0435\\u043d\\u0438\\u044f.\n+enumerationValues=\\u041f\\u0435\\u0440\\u0435\\u0447\\u0435\\u043d\\u044c \\u0437\\u043d\\u0430\\u0447\\u0435\\u043d\\u0438\\u0439\n+enumerationKeys=\\u041f\\u0435\\u0440\\u0435\\u0447\\u0435\\u043d\\u044c \\u043d\\u0430\\u0438\\u043c\\u0435\\u043d\\u043e\\u0432\\u0430\\u043d\\u0438\\u0439\n multivalue=\\u041c\\u043d\\u043e\\u0436\\u0435\\u0441\\u0442\\u0432\\u0435\\u043d\\u043d\\u044b\\u0435 \\u0437\\u043d\\u0430\\u0447\\u0435\\u043d\\u0438\\u044f\n-# mandatoryCondition=Обязательный\n-mandatoryCondition=\\u041e\\u0431\\u044f\\u0437\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u044b\\u0439\n+validator=\\u0432\\u0430\\u043b\\u0438\\u0434\\u0430\\u0442\\u043e\\u0440\\u0430\n+conversionPattern=\\u0428\\u0430\\u0431\\u043b\\u043e\\u043d \\u043f\\u0440\\u0435\\u043e\\u0431\\u0440\\u0430\\u0437\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f\n+secretKey=\\u041a\\u043b\\u044e\\u0447 \\u0448\\u0438\\u0444\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f\n+cipherAlgorithm=\\u0410\\u043b\\u0433\\u043e\\u0440\\u0438\\u0442\\u043c \\u0448\\u0438\\u0444\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f\n+mimeType=\\u0422\\u0438\\u043f MIME"}]}