{"sha":"e2c7754a531a1e46bcc86c02b840d8667ced30e1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUyYzc3NTRhNTMxYTFlNDZiY2M4NmMwMmI4NDBkODY2N2NlZDMwZTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-04T11:00:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-04T11:00:44Z"},"message":"Installer also works","tree":{"sha":"df63e86a45a0afe2d67a68ba780712dd861c19f2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/df63e86a45a0afe2d67a68ba780712dd861c19f2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e2c7754a531a1e46bcc86c02b840d8667ced30e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e2c7754a531a1e46bcc86c02b840d8667ced30e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e2c7754a531a1e46bcc86c02b840d8667ced30e1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e2c7754a531a1e46bcc86c02b840d8667ced30e1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7a8160953af3034426cb934b721967e1de60bb32","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7a8160953af3034426cb934b721967e1de60bb32","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7a8160953af3034426cb934b721967e1de60bb32"}],"stats":{"total":562,"additions":296,"deletions":266},"files":[{"sha":"4aed30452c5714de980b1ad2495e6a9d30a32ac1","filename":"installer/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fpom.xml?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -183,9 +183,9 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n       <resource>\n-        <directory>${basedir}/../fit/core-reference/src/main/resources/jboss</directory>\n+        <directory>${basedir}/../fit/core-reference/src/main/resources/jboss/domains</directory>\n         <includes>\n-          <include>**/persistenceContextEMFactory.xml</include>\n+          <include>**/MasterDomain.xml</include>\n         </includes>\n       </resource>\n       <resource>"},{"sha":"beaac41a91e564cea7b9329467a56ec5e91f4c33","filename":"installer/src/main/java/org/apache/syncope/installer/files/MasterDomainXml.java","status":"renamed","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterDomainXml.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterDomainXml.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterDomainXml.java?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -18,17 +18,18 @@\n  */\n package org.apache.syncope.installer.files;\n \n-public final class PersistenceContextEMFactoryXml {\n+public final class MasterDomainXml {\n \n-    public static final String PLACEHOLDER = \"<entry key=\\\"openjpa.MetaDataFactory\\\"\\n\"\n-            + \"               value=\\\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly8x/\"\n-            + \"deployments/${project.build.finalName}.war/WEB-INF/classes/, Resources=META-INF/orm.xml)\\\"/>\";\n+    public static final String PLACEHOLDER = \"\"\n+            + \"<entry key=\\\"openjpa.MetaDataFactory\\\" \\n               \"\n+            + \"value=\\\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly9x/deployments/syncope.war\"\n+            + \"/WEB-INF/classes, Resources=${Master.orm})\\\"/>\\n\";\n \n     public static final String JBOSS =\n             \"<entry key=\\\"openjpa.MetaDataFactory\\\" value=\\\"jpa(URLs=vfs:/content/${project.build.finalName}.war/\"\n-            + \"WEB-INF/classes/, Resources=META-INF/orm.xml)\\\"/>\";\n+            + \"WEB-INF/classes/, Resources=${Master.orm})\\\"/>\";\n \n-    private PersistenceContextEMFactoryXml() {\n+    private MasterDomainXml() {\n         // private constructor for static utility class\n     }\n }","previous_filename":"installer/src/main/java/org/apache/syncope/installer/files/PersistenceContextEMFactoryXml.java"},{"sha":"b1fb22367d10e5d77fcf9341c353cd68c9db470d","filename":"installer/src/main/java/org/apache/syncope/installer/files/MasterProperties.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterProperties.java?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.installer.files;\n+\n+public final class MasterProperties {\n+\n+    public static final String HEADER = \"# Licensed to the Apache Software Foundation (ASF) under one\\n\"\n+            + \"# or more contributor license agreements.  See the NOTICE file\\n\"\n+            + \"# distributed with this work for additional information\\n\"\n+            + \"# regarding copyright ownership.  The ASF licenses this file\\n\"\n+            + \"# to you under the Apache License, Version 2.0 (the\\n\"\n+            + \"# \\\"License\\\"); you may not use this file except in compliance\\n\"\n+            + \"# with the License.  You may obtain a copy of the License at\\n\" + \"#\\n\"\n+            + \"#   http://www.apache.org/licenses/LICENSE-2.0\\n\" + \"#\\n\"\n+            + \"# Unless required by applicable law or agreed to in writing,\\n\"\n+            + \"# software distributed under the License is distributed on an\\n\"\n+            + \"# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n\"\n+            + \"# KIND, either express or implied.  See the License for the\\n\"\n+            + \"# specific language governing permissions and limitations\\n\"\n+            + \"# under the License.\\n\";\n+\n+    public static final String POSTGRES = \"\"\n+            + \"Master.driverClassName=org.postgresql.Driver\\n\"\n+            + \"Master.url=%s\\n\"\n+            + \"Master.schema=\\n\"\n+            + \"Master.username=%s\\n\"\n+            + \"Master.password=%s\\n\"\n+            + \"Master.databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary\\n\"\n+            + \"Master.orm=META-INF/spring-orm.xml\\n\"\n+            + \"Master.pool.validationQuery=SELECT 1\\n\"\n+            + \"Master.audit.sql=audit.sql\\n\";\n+\n+    public static final String MYSQL = \"\"\n+            + \"Master.driverClassName=com.mysql.jdbc.Driver\\n\"\n+            + \"Master.url=%s\\n\"\n+            + \"Master.schema=\\n\"\n+            + \"Master.username=%s\\n\"\n+            + \"Master.password=%s\\n\"\n+            + \"Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary\\n\"\n+            + \"Master.orm=META-INF/spring-orm.xml\\n\"\n+            + \"Master.pool.validationQuery=SELECT 1\\n\"\n+            + \"Master.audit.sql=audit.sql\\n\";\n+\n+    public static final String MARIADB = \"\"\n+            + \"Master.driverClassName=org.mariadb.jdbc.Driver\\n\"\n+            + \"Master.url=%s\\n\"\n+            + \"Master.schema=\\n\"\n+            + \"Master.username=%s\\n\"\n+            + \"Master.password=%s\\n\"\n+            + \"Master.databasePlatform=org.apache.openjpa.jdbc.sql.MariaDBDictionary\\n\"\n+            + \"Master.orm=META-INF/spring-orm.xml\\n\"\n+            + \"Master.pool.validationQuery=SELECT 1\\n\"\n+            + \"Master.audit.sql=audit.sql\\n\";\n+\n+    public static final String ORACLE = \"\"\n+            + \"Master.driverClassName=oracle.jdbc.OracleDriver\\n\"\n+            + \"Master.url=jdbc:oracle:thin:@pioppo:1521:orcl\\n\"\n+            + \"Master.schema=%s\\n\"\n+            + \"Master.username=%s\\n\"\n+            + \"Master.password=%s\\n\"\n+            + \"Master.databasePlatform=org.apache.openjpa.jdbc.sql.OracleDictionary\\n\"\n+            + \"Master.orm=META-INF/spring-orm-oracle.xml\\n\"\n+            + \"Master.pool.validationQuery=SELECT 1 FROM DUAL\\n\"\n+            + \"Master.audit.sql=audit_oracle.sql\\n\";\n+\n+    public static final String SQLSERVER = \"\"\n+            + \"Master.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver\\n\"\n+            + \"Master.url=jdbc:sqlserver://acacia:1433;database=syncope;selectMethod=cursor;\"\n+            + \"sendStringParametersAsUnicode=false\\n\"\n+            + \"Master.schema=%s\\n\"\n+            + \"Master.username=%s\\n\"\n+            + \"Master.password=%s\\n\"\n+            + \"Master.databasePlatform=org.apache.openjpa.jdbc.sql.SQLServerDictionary\\n\"\n+            + \"Master.orm=META-INF/spring-orm-sqlserver.xml\\n\"\n+            + \"Master.pool.validationQuery=SELECT 1\\n\"\n+            + \"Master.audit.sql=audit_sqlserver.sql\\n\";\n+\n+    private MasterProperties() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"769722f6f33523f92d1749c82b2492fcef327a83","filename":"installer/src/main/java/org/apache/syncope/installer/files/PersistenceProperties.java","status":"removed","additions":0,"deletions":110,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a8160953af3034426cb934b721967e1de60bb32/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FPersistenceProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a8160953af3034426cb934b721967e1de60bb32/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FPersistenceProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FPersistenceProperties.java?ref=7a8160953af3034426cb934b721967e1de60bb32","patch":"@@ -1,110 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.installer.files;\n-\n-public final class PersistenceProperties {\n-\n-    public static final String HEADER = \"# Licensed to the Apache Software Foundation (ASF) under one\\n\"\n-            + \"# or more contributor license agreements.  See the NOTICE file\\n\"\n-            + \"# distributed with this work for additional information\\n\"\n-            + \"# regarding copyright ownership.  The ASF licenses this file\\n\"\n-            + \"# to you under the Apache License, Version 2.0 (the\\n\"\n-            + \"# \\\"License\\\"); you may not use this file except in compliance\\n\"\n-            + \"# with the License.  You may obtain a copy of the License at\\n\" + \"#\\n\"\n-            + \"#   http://www.apache.org/licenses/LICENSE-2.0\\n\" + \"#\\n\"\n-            + \"# Unless required by applicable law or agreed to in writing,\\n\"\n-            + \"# software distributed under the License is distributed on an\\n\"\n-            + \"# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n\"\n-            + \"# KIND, either express or implied.  See the License for the\\n\"\n-            + \"# specific language governing permissions and limitations\\n\" + \"# under the License.\\n\";\n-\n-    public static final String POSTGRES = \"\"\n-            + \"jpa.driverClassName=org.postgresql.Driver\\n\"\n-            + \"jpa.url=%s\\n\"\n-            + \"jpa.username=%s\\n\"\n-            + \"jpa.password=%s\\n\"\n-            + \"jpa.dialect=org.apache.openjpa.jdbc.sql.PostgresDictionary\\n\"\n-            + \"jpa.pool.validationQuery=SELECT 1\\n\"\n-            + \"jpa.orm=META-INF/spring-orm.xml\\n\"\n-            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\\n\"\n-            + \"quartz.sql=tables_postgres.sql\\n\"\n-            + \"audit.sql=audit.sql\\n\"\n-            + \"database.schema=\\n\";\n-\n-    public static final String MYSQL = \"\"\n-            + \"jpa.driverClassName=com.mysql.jdbc.Driver\\n\"\n-            + \"jpa.url=%s\\n\"\n-            + \"jpa.username=%s\\n\"\n-            + \"jpa.password=%s\\n\"\n-            + \"jpa.dialect=org.apache.openjpa.jdbc.sql.MySQLDictionary\\n\"\n-            + \"jpa.pool.validationQuery=SELECT 1\\n\"\n-            + \"jpa.orm=META-INF/spring-orm.xml\\n\"\n-            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\\n\"\n-            + \"audit.sql=audit.sql\\n\"\n-            + \"database.schema=\\n\";\n-\n-    public static final String MARIADB = \"\"\n-            + \"jpa.driverClassName=org.mariadb.jdbc.Driver\\n\"\n-            + \"jpa.url=%s\\n\"\n-            + \"jpa.username=%s\\n\"\n-            + \"jpa.password=%s\\n\"\n-            + \"jpa.dialect=org.apache.openjpa.jdbc.sql.MariaDBDictionary\\n\"\n-            + \"jpa.pool.validationQuery=SELECT 1\\n\"\n-            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\\n\"\n-            + \"quartz.sql=tables_mariadb.sql\\n\"\n-            + \"audit.sql=audit.sql\\n\"\n-            + \"database.schema=\\n\";\n-\n-    public static final String ORACLE = \"\"\n-            + \"jpa.driverClassName=oracle.jdbc.OracleDriver\\n\"\n-            + \"jpa.url=%s\\n\"\n-            + \"jpa.username=%s\\n\"\n-            + \"jpa.password=%s\\n\"\n-            + \"jpa.dialect=org.apache.openjpa.jdbc.sql.OracleDictionary\\n\"\n-            + \"jpa.pool.validationQuery=SELECT 1 FROM DUAL\\n\"\n-            + \"jpa.orm=META-INF/spring-orm-oracle.xml\\n\"\n-            + \"#note: other connection pool settings can also be configured here, see persistenceContext.xml\\n\"\n-            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\\n\"\n-            + \"quartz.scheduler.idleWaitTime=5000\\n\"\n-            + \"quartz.sql=tables_oracle.sql\\n\"\n-            + \"audit.sql=audit_oracle.sql\\n\"\n-            + \"database.schema=%s\\n\";\n-\n-    public static final String SQLSERVER = \"jpa.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver\\n\"\n-            + \"jpa.url=%s\\n\"\n-            + \"jpa.username=%s\\n\"\n-            + \"jpa.password=%s\\n\"\n-            + \"jpa.dialect=org.apache.openjpa.jdbc.sql.SQLServerDictionary\\n\"\n-            + \"jpa.pool.validationQuery=SELECT 1\\n\"\n-            + \"jpa.orm=META-INF/spring-orm-sqlserver.xml\\n\"\n-            + \"#note: other connection pool settings can also be configured here, see persistenceContext.xml\\n\"\n-            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.MSSQLDelegate\\n\"\n-            + \"quartz.scheduler.idleWaitTime=5000\\n\"\n-            + \"quartz.sql=tables_sqlServer.sql\\n\"\n-            + \"audit.sql=audit_sqlserver.sql\\n\"\n-            + \"database.schema=\";\n-\n-    public static final String MYSQL_QUARTZ_INNO_DB = \"quartz.sql=tables_mysql_innodb.sql\";\n-\n-    public static final String MYSQL_QUARTZ = \"quartz.sql=tables_mysql.sql\";\n-\n-    private PersistenceProperties() {\n-        // private constructor for static utility class\n-    }\n-}"},{"sha":"020efcb1ad70416b7b447002363c09178e2f998b","filename":"installer/src/main/java/org/apache/syncope/installer/files/ProvisioningProperties.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FProvisioningProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FProvisioningProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FProvisioningProperties.java?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.installer.files;\n+\n+public final class ProvisioningProperties {\n+\n+    public static final String HEADER = \"# Licensed to the Apache Software Foundation (ASF) under one\\n\"\n+            + \"# or more contributor license agreements.  See the NOTICE file\\n\"\n+            + \"# distributed with this work for additional information\\n\"\n+            + \"# regarding copyright ownership.  The ASF licenses this file\\n\"\n+            + \"# to you under the Apache License, Version 2.0 (the\\n\"\n+            + \"# \\\"License\\\"); you may not use this file except in compliance\\n\"\n+            + \"# with the License.  You may obtain a copy of the License at\\n\" + \"#\\n\"\n+            + \"#   http://www.apache.org/licenses/LICENSE-2.0\\n\" + \"#\\n\"\n+            + \"# Unless required by applicable law or agreed to in writing,\\n\"\n+            + \"# software distributed under the License is distributed on an\\n\"\n+            + \"# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n\"\n+            + \"# KIND, either express or implied.  See the License for the\\n\"\n+            + \"# specific language governing permissions and limitations\\n\"\n+            + \"# under the License.\\n\"\n+            + \"userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\\n\"\n+            + \"groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\\n\"\n+            + \"anyObjectProvisioningManager=\"\n+            + \"org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\\n\"\n+            + \"virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\\n\";\n+\n+    public static final String POSTGRES = \"\"\n+            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\\n\"\n+            + \"quartz.sql=tables_postgres.sql\\n\";\n+\n+    public static final String MYSQL = \"\"\n+            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\\n\";\n+\n+    public static final String MYSQL_QUARTZ_INNO_DB = \"quartz.sql=tables_mysql_innodb.sql\";\n+\n+    public static final String MYSQL_QUARTZ = \"quartz.sql=tables_mysql.sql\";\n+\n+    public static final String MARIADB = \"\"\n+            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\\n\"\n+            + \"quartz.sql=tables_mariadb.sql\\n\";\n+\n+    public static final String ORACLE = \"\"\n+            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\\n\"\n+            + \"quartz.sql=tables_oracle.sql\\n\";\n+\n+    public static final String SQLSERVER = \"\"\n+            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.MSSQLDelegate\\n\"\n+            + \"quartz.sql=tables_sqlServer.sql\\n\";\n+\n+    private ProvisioningProperties() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"4f17035393199a857df6515a2368989cf142db06","filename":"installer/src/main/java/org/apache/syncope/installer/processes/ArchetypeProcess.java","status":"modified","additions":29,"deletions":35,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -32,6 +32,7 @@\n \n public class ArchetypeProcess extends BaseProcess {\n \n+    @Override\n     public void run(final AbstractUIProcessHandler handler, final String[] args) {\n         final String installPath = args[0];\n         final String mavenDir = args[1];\n@@ -54,45 +55,37 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n \n         setSyncopeInstallDir(installPath, artifactId);\n \n-        final FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n+        FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n         fileSystemUtils.createDirectory(installPath);\n         InstallLog.initialize(installPath, handler);\n-        final MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);\n+        MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);\n         File customMavenProxySettings = null;\n         try {\n             if (isProxyEnabled && mavenProxyAutoconf) {\n                 customMavenProxySettings = MavenUtils.createSettingsWithProxy(installPath, proxyHost, proxyPort,\n                         proxyUser, proxyPwd);\n             }\n-        } catch (IOException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n-                    \"I/O error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (ParserConfigurationException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+        } catch (IOException e) {\n+            StringBuilder message = new StringBuilder(\"I/O error during creation of Maven custom settings.xml\");\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (ParserConfigurationException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"Parser configuration error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (TransformerException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (TransformerException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"Transformer error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (SAXException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (SAXException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"XML parsing error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n         }\n+\n         handler.logOutput(\"########################## IMPORTANT ##########################\", true);\n         handler.logOutput(\"See \" + InstallLog.getInstance().getFileAbsolutePath() + \" for the maven logs\", true);\n         handler.logOutput(\"########################## IMPORTANT ##########################\", true);\n@@ -103,27 +96,28 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n             final File pomFile =\n                     new File(syncopeInstallDir + PROPERTIES.getProperty(\"pomFile\"));\n             String contentPomFile = fileSystemUtils.readFile(pomFile);\n-            fileSystemUtils.writeToFile(pomFile, contentPomFile.replace(ParentPom.PLACEHOLDER, ParentPom.REPOSITORY));\n+            fileSystemUtils.\n+                    writeToFile(pomFile, contentPomFile.replace(ParentPom.PLACEHOLDER, ParentPom.REPOSITORY));\n         }\n \n         fileSystemUtils.createDirectory(confDirectory);\n         fileSystemUtils.createDirectory(logsDirectory);\n         fileSystemUtils.createDirectory(bundlesDirectory);\n         fileSystemUtils.createDirectory(modelerDirectory);\n \n-        fileSystemUtils.copyFileFromResources(\"/\" + PROPERTIES.getProperty(\"modelerPomFile\"),\n-                modelerDirectory + \"/\" + PROPERTIES.getProperty(\"pomFile\"), handler);\n+        fileSystemUtils.copyFileFromResources(File.separator + PROPERTIES.getProperty(\"modelerPomFile\"),\n+                modelerDirectory + File.separator + PROPERTIES.getProperty(\"pomFile\"), handler);\n \n         fileSystemUtils.copyFile(\n                 syncopeInstallDir\n                 + PROPERTIES.getProperty(\"consoleResDirectory\")\n-                + \"/\" + PROPERTIES.getProperty(\"urlConfig\"),\n-                modelerDirectory + \"/\" + PROPERTIES.getProperty(\"urlConfig\"));\n+                + File.separator + PROPERTIES.getProperty(\"urlConfig\"),\n+                modelerDirectory + File.separator + PROPERTIES.getProperty(\"urlConfig\"));\n         fileSystemUtils.copyFile(\n                 syncopeInstallDir\n                 + PROPERTIES.getProperty(\"consoleResDirectory\")\n-                + \"/\" + PROPERTIES.getProperty(\"saveModel\"),\n-                modelerDirectory + \"/\" + PROPERTIES.getProperty(\"saveModel\"));\n+                + File.separator + PROPERTIES.getProperty(\"saveModel\"),\n+                modelerDirectory + File.separator + PROPERTIES.getProperty(\"saveModel\"));\n \n         final Properties modelerProperties = new Properties();\n         modelerProperties.setProperty(\"modeler.directory\", modelerDirectory);\n@@ -134,6 +128,6 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n         syncopeProperties.setProperty(\"log.directory\", logsDirectory);\n         syncopeProperties.setProperty(\"bundles.directory\", bundlesDirectory);\n         mavenUtils.mvnCleanPackageWithProperties(\n-                installPath + \"/\" + artifactId, syncopeProperties, customMavenProxySettings);\n+                installPath + File.separator + artifactId, syncopeProperties, customMavenProxySettings);\n     }\n }"},{"sha":"c1846cccbb4cdf06a79e85344de3cec922699230","filename":"installer/src/main/java/org/apache/syncope/installer/processes/BaseProcess.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FBaseProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FBaseProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FBaseProcess.java?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -20,12 +20,13 @@\n \n import static org.apache.syncope.installer.processes.ArchetypeProcess.PROPERTIES;\n \n+import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Properties;\n import org.apache.commons.io.IOUtils;\n \n-public class BaseProcess {\n+public abstract class BaseProcess {\n \n     protected static final Properties PROPERTIES = new Properties();\n \n@@ -51,7 +52,6 @@ protected void setSyncopeInstallDir(final String installPath, final String artif\n                 append(\"/\").toString();\n     }\n \n-    protected BaseProcess() {\n-        // protected constructor for static utility class\n-    }\n+    public abstract void run(AbstractUIProcessHandler handler, String[] args);\n+\n }"},{"sha":"e7e51481b10db1378040118851fcaf47c81a5eb5","filename":"installer/src/main/java/org/apache/syncope/installer/processes/ContainerProcess.java","status":"modified","additions":48,"deletions":71,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.installer.enums.Containers;\n import org.apache.syncope.installer.files.ConsoleProperties;\n import org.apache.syncope.installer.files.GlassfishCoreWebXml;\n-import org.apache.syncope.installer.files.PersistenceContextEMFactoryXml;\n+import org.apache.syncope.installer.files.MasterDomainXml;\n import org.apache.syncope.installer.utilities.InstallLog;\n import org.apache.syncope.installer.utilities.MavenUtils;\n import org.xml.sax.SAXException;\n@@ -104,12 +104,12 @@ public final class ContainerProcess extends BaseProcess {\n \n     private boolean mavenProxyAutoconf;\n \n+    @Override\n     public void run(final AbstractUIProcessHandler handler, final String[] args) {\n-\n         installPath = args[0];\n         mavenDir = args[1];\n         artifactId = args[2];\n-        final Containers selectedContainer = Containers.fromContainerName(args[3]);\n+        Containers selectedContainer = Containers.fromContainerName(args[3]);\n         tomcatSsl = Boolean.valueOf(args[4]);\n         tomcatHost = args[5];\n         tomcatPort = args[6];\n@@ -135,34 +135,26 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n         proxyPort = args[26];\n         proxyUser = args[27];\n         proxyPwd = args[28];\n-        mavenProxyAutoconf = Boolean.valueOf(args[28]);\n-\n-        final FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n+        mavenProxyAutoconf = Boolean.valueOf(args[29]);\n \n         handler.logOutput(\"Configure web.xml file according to \" + selectedContainer + \" properties\", true);\n         InstallLog.getInstance().info(\"Configure web.xml file according to \" + selectedContainer + \" properties\");\n \n+        FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n         setSyncopeInstallDir(installPath, artifactId);\n \n-        if (withDataSource) {\n-            switch (selectedContainer) {\n-                case GLASSFISH:\n-                    final File glassfishCoreWebXmlFile =\n-                            new File(syncopeInstallDir + PROPERTIES.getProperty(\"glassfishCoreWebXmlFile\"));\n-                    final String contentGlassfishWebXmlFile = fileSystemUtils.readFile(glassfishCoreWebXmlFile);\n-                    fileSystemUtils.writeToFile(glassfishCoreWebXmlFile,\n-                            contentGlassfishWebXmlFile.replace(GlassfishCoreWebXml.PLACEHOLDER,\n-                                    GlassfishCoreWebXml.DATA_SOURCE));\n-                    break;\n-\n-                default:\n-            }\n+        if (withDataSource && selectedContainer == Containers.GLASSFISH) {\n+            File glassfishCoreWebXmlFile =\n+                    new File(syncopeInstallDir + PROPERTIES.getProperty(\"glassfishCoreWebXmlFile\"));\n+            String contentGlassfishWebXmlFile = fileSystemUtils.readFile(glassfishCoreWebXmlFile);\n+            fileSystemUtils.writeToFile(glassfishCoreWebXmlFile,\n+                    contentGlassfishWebXmlFile.replace(GlassfishCoreWebXml.PLACEHOLDER,\n+                            GlassfishCoreWebXml.DATA_SOURCE));\n         }\n \n-        final File consolePropertiesFile = new File(syncopeInstallDir\n-                + PROPERTIES.getProperty(\"consoleResDirectory\")\n+        File consolePropertiesFile = new File(syncopeInstallDir + PROPERTIES.getProperty(\"consoleResDirectory\")\n                 + File.separator + PROPERTIES.getProperty(\"consolePropertiesFile\"));\n-        final String contentConsolePropertiesFile = fileSystemUtils.readFile(consolePropertiesFile);\n+        String contentConsolePropertiesFile = fileSystemUtils.readFile(consolePropertiesFile);\n \n         final String scheme;\n         final String host;\n@@ -194,65 +186,56 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n                 contentConsolePropertiesFile.replace(ConsoleProperties.PLACEHOLDER,\n                         String.format(ConsoleProperties.CONSOLE, scheme, host, port)));\n \n-        final MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);\n+        MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);\n         File customMavenProxySettings = null;\n         try {\n             if (isProxyEnabled && mavenProxyAutoconf) {\n-                customMavenProxySettings = MavenUtils.createSettingsWithProxy(installPath, proxyHost, proxyPort,\n-                        proxyUser, proxyPwd);\n+                customMavenProxySettings = MavenUtils.createSettingsWithProxy(\n+                        installPath, proxyHost, proxyPort, proxyUser, proxyPwd);\n             }\n-        } catch (IOException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n-                    \"I/O error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (ParserConfigurationException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+        } catch (IOException e) {\n+            StringBuilder message = new StringBuilder(\"I/O error during creation of Maven custom settings.xml\");\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (ParserConfigurationException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"Parser configuration error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (TransformerException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (TransformerException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"Transformer error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (SAXException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (SAXException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"XML parsing error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n         }\n \n-        final Properties mvnProperties = new Properties();\n+        Properties mvnProperties = new Properties();\n         mvnProperties.setProperty(\"conf.directory\", confDirectory);\n         mvnProperties.setProperty(\"log.directory\", logsDirectory);\n         mvnProperties.setProperty(\"bundles.directory\", bundlesDirectory);\n         mavenUtils.mvnCleanPackageWithProperties(\n-                installPath + \"/\" + artifactId, mvnProperties, customMavenProxySettings);\n+                installPath + File.separator + artifactId, mvnProperties, customMavenProxySettings);\n \n         if (isProxyEnabled && mavenProxyAutoconf) {\n             FileSystemUtils.delete(customMavenProxySettings);\n         }\n \n         switch (selectedContainer) {\n             case TOMCAT:\n-                final Tomcat tomcat = new Tomcat(\n+                Tomcat tomcat = new Tomcat(\n                         tomcatSsl, tomcatHost, tomcatPort, installPath, artifactId, tomcatUser, tomcatPassword,\n                         handler);\n                 boolean deployCoreResult = tomcat.deployCore();\n                 if (deployCoreResult) {\n                     handler.logOutput(\"Core successfully deployed \", true);\n                     InstallLog.getInstance().info(\"Core successfully deployed \");\n                 } else {\n-                    final String messageError = \"Deploy core on Tomcat failed\";\n+                    String messageError = \"Deploy core on Tomcat failed\";\n                     handler.emitError(messageError, messageError);\n                     InstallLog.getInstance().error(messageError);\n                 }\n@@ -269,7 +252,7 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n                 break;\n \n             case JBOSS:\n-                final JBoss jBoss = new JBoss(\n+                JBoss jBoss = new JBoss(\n                         jbossSsl, jbossHost, jbossManagementPort, jbossAdminUsername,\n                         jbossAdminPassword, installPath, artifactId, handler);\n \n@@ -295,10 +278,10 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n                 break;\n \n             case GLASSFISH:\n-                final String createJavaOptCommand = \"sh \" + glassfishDir + Glassfish.CREATE_JAVA_OPT_COMMAND;\n+                String createJavaOptCommand = \"sh \" + glassfishDir + Glassfish.CREATE_JAVA_OPT_COMMAND;\n                 fileSystemUtils.exec(createJavaOptCommand, null);\n \n-                final Glassfish glassfish = new Glassfish(installPath, artifactId);\n+                Glassfish glassfish = new Glassfish(installPath, artifactId);\n \n                 fileSystemUtils.exec(\"sh \" + glassfishDir\n                         + Glassfish.DEPLOY_COMMAND + glassfish.deployCore(), null);\n@@ -312,20 +295,14 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n \n     private void persistenceContextEMFactory(\n             final FileSystemUtils fileSystemUtils, final AbstractUIProcessHandler handler) {\n-        fileSystemUtils.copyFileFromResources(\"/jboss/persistenceContextEMFactory.xml\",\n-                syncopeInstallDir\n-                + PROPERTIES.getProperty(\"persistenceContextEMFactoryFile\"), handler);\n-        final File persistenceContextEMFactoryFile = new File(\n-                syncopeInstallDir + PROPERTIES.getProperty(\"persistenceContextEMFactoryFile\"));\n-        final String contentPersistenceContextEMFactory = fileSystemUtils.readFile(persistenceContextEMFactoryFile);\n-        fileSystemUtils.writeToFile(\n-                persistenceContextEMFactoryFile,\n-                contentPersistenceContextEMFactory.replace(PersistenceContextEMFactoryXml.PLACEHOLDER,\n-                        PersistenceContextEMFactoryXml.JBOSS));\n-    }\n \n-    private ContainerProcess() {\n-        super();\n-        // private constructor for static utility class\n+        fileSystemUtils.copyFileFromResources(\"/MasterDomain.xml\",\n+                syncopeInstallDir + PROPERTIES.getProperty(\"masterDomainFile\"), handler);\n+        File masterDomainFile = new File(\n+                syncopeInstallDir + PROPERTIES.getProperty(\"masterDomainFile\"));\n+        String contentPersistenceContextEMFactory = fileSystemUtils.readFile(masterDomainFile);\n+        fileSystemUtils.writeToFile(masterDomainFile,\n+                contentPersistenceContextEMFactory.replace(MasterDomainXml.PLACEHOLDER, MasterDomainXml.JBOSS));\n     }\n+\n }"},{"sha":"8cc528ba669d168ee7925f04353d364290b40cb6","filename":"installer/src/main/java/org/apache/syncope/installer/processes/PersistenceProcess.java","status":"modified","additions":33,"deletions":26,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FPersistenceProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FPersistenceProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FPersistenceProcess.java?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -22,7 +22,8 @@\n import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.File;\n import org.apache.syncope.installer.enums.DBs;\n-import org.apache.syncope.installer.files.PersistenceProperties;\n+import org.apache.syncope.installer.files.MasterProperties;\n+import org.apache.syncope.installer.files.ProvisioningProperties;\n import org.apache.syncope.installer.utilities.InstallLog;\n \n public class PersistenceProcess extends BaseProcess {\n@@ -41,63 +42,69 @@ public class PersistenceProcess extends BaseProcess {\n \n     private boolean mysqlInnoDB;\n \n-    private String oracleTableSpace;\n+    private String schema;\n \n+    @Override\n     public void run(final AbstractUIProcessHandler handler, final String[] args) {\n-\n         installPath = args[0];\n         artifactId = args[1];\n         dbSelected = DBs.fromDbName(args[2]);\n         persistenceUrl = args[3];\n         persistenceUser = args[4];\n         persistencePassword = args[5];\n         mysqlInnoDB = Boolean.valueOf(args[6]);\n-        oracleTableSpace = args[7];\n+        schema = args[7];\n \n-        final FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n-        final StringBuilder persistenceProperties = new StringBuilder(PersistenceProperties.HEADER);\n+        FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n+        StringBuilder provisioningProperties = new StringBuilder(ProvisioningProperties.HEADER);\n+        StringBuilder masterProperties = new StringBuilder(MasterProperties.HEADER);\n         setSyncopeInstallDir(installPath, artifactId);\n \n-        handler.logOutput(\"Configure persistence file according to \" + dbSelected + \" properties\", true);\n-        InstallLog.getInstance().info(\"Configure persistence file according to \" + dbSelected + \" properties\");\n+        handler.logOutput(\"Configure persistence for \" + dbSelected, false);\n+        InstallLog.getInstance().info(\"Configure persistence for \" + dbSelected);\n \n         switch (dbSelected) {\n             case POSTGRES:\n-                persistenceProperties.append(String.format(\n-                        PersistenceProperties.POSTGRES, persistenceUrl, persistenceUser, persistencePassword));\n+                provisioningProperties.append(ProvisioningProperties.POSTGRES);\n+                masterProperties.append(String.format(\n+                        MasterProperties.POSTGRES, persistenceUrl, persistenceUser, persistencePassword));\n                 break;\n \n             case MYSQL:\n-                persistenceProperties.append(String.format(\n-                        PersistenceProperties.MYSQL, persistenceUrl, persistenceUser, persistencePassword));\n-                if (mysqlInnoDB) {\n-                    persistenceProperties.append(PersistenceProperties.MYSQL_QUARTZ_INNO_DB);\n-                } else {\n-                    persistenceProperties.append(PersistenceProperties.MYSQL_QUARTZ);\n-                }\n+                provisioningProperties.append(ProvisioningProperties.MYSQL);\n+                provisioningProperties.append(mysqlInnoDB\n+                        ? ProvisioningProperties.MYSQL_QUARTZ_INNO_DB\n+                        : ProvisioningProperties.MYSQL_QUARTZ);\n+                masterProperties.append(String.format(\n+                        MasterProperties.MYSQL, persistenceUrl, persistenceUser, persistencePassword));\n                 break;\n \n             case MARIADB:\n-                persistenceProperties.append(String.format(\n-                        PersistenceProperties.MARIADB, persistenceUrl, persistenceUser, persistencePassword));\n+                provisioningProperties.append(ProvisioningProperties.MARIADB);\n+                masterProperties.append(String.format(\n+                        MasterProperties.MARIADB, persistenceUrl, persistenceUser, persistencePassword));\n                 break;\n \n             case ORACLE:\n-                persistenceProperties.append(String.format(\n-                        PersistenceProperties.ORACLE, persistenceUrl, persistenceUser, persistencePassword,\n-                        oracleTableSpace));\n+                provisioningProperties.append(ProvisioningProperties.ORACLE);\n+                masterProperties.append(String.format(\n+                        MasterProperties.ORACLE, schema, persistenceUrl, persistenceUser, persistencePassword));\n                 break;\n \n             case SQLSERVER:\n-                persistenceProperties.append(String.format(\n-                        PersistenceProperties.SQLSERVER, persistenceUrl, persistenceUser, persistencePassword));\n+                provisioningProperties.append(ProvisioningProperties.SQLSERVER);\n+                masterProperties.append(String.format(\n+                        MasterProperties.SQLSERVER, schema, persistenceUrl, persistenceUser, persistencePassword));\n                 break;\n \n             default:\n         }\n \n         fileSystemUtils.writeToFile(new File(\n-                syncopeInstallDir + PROPERTIES.getProperty(\"persistencePropertiesFile\")),\n-                persistenceProperties.toString());\n+                syncopeInstallDir + PROPERTIES.getProperty(\"provisioningPropertiesFile\")),\n+                provisioningProperties.toString());\n+        fileSystemUtils.writeToFile(new File(\n+                syncopeInstallDir + PROPERTIES.getProperty(\"masterPropertiesFile\")),\n+                masterProperties.toString());\n     }\n }"},{"sha":"45b43d5330d0d5d27d00294874f5a80037380427","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/FileSystemUtils.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -159,6 +159,7 @@ public static void delete(final File file) {\n \n     public void copyFileFromResources(final String filePath,\n             final String destination, final AbstractUIProcessHandler handler) {\n+\n         try {\n             final URL url = getClass().getResource(filePath);\n             final File dest = new File(destination);"},{"sha":"3a8319f7b0113177a3a560af58cd4cffcabe531a","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/MavenUtils.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -103,7 +103,7 @@ public void mvnCleanPackageWithProperties(\n         if (customSettingsFile != null && FileUtils.sizeOf(customSettingsFile) > 0) {\n             request.setUserSettingsFile(customSettingsFile);\n         }\n-        final List<String> mavenGoals = new ArrayList<String>();\n+        final List<String> mavenGoals = new ArrayList<>();\n         mavenGoals.add(\"clean\");\n         mavenGoals.add(\"package\");\n         request.setGoals(mavenGoals);\n@@ -146,11 +146,7 @@ private InvocationResult invoke(final InvocationRequest request, final String pa\n                     new PrintStream(InstallLog.getInstance().getFileAbsolutePath()), true));\n             invoker.setWorkingDirectory(new File(path));\n             result = invoker.execute(request);\n-        } catch (MavenInvocationException ex) {\n-            final String messageError = \"Maven exception: \" + ex.getMessage();\n-            handler.emitError(messageError, messageError);\n-            InstallLog.getInstance().info(messageError);\n-        } catch (FileNotFoundException ex) {\n+        } catch (MavenInvocationException | FileNotFoundException ex) {\n             final String messageError = \"Maven exception: \" + ex.getMessage();\n             handler.emitError(messageError, messageError);\n             InstallLog.getInstance().info(messageError);"},{"sha":"97d07e1c7b3ff092e04a443f0de1f9cfda5fe385","filename":"installer/src/main/resources/installer.properties","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fresources%2Finstaller.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fresources%2Finstaller.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fresources%2Finstaller.properties?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -20,9 +20,9 @@ urlConfig=url-config.js\n saveModel=save-model.html\n consoleResDirectory=console/src/main/resources\n pomFile=pom.xml\n-persistenceContextEMFactoryFile=core/src/main/resources/persistenceContextEMFactory.xml\n+masterDomainFile=core/src/main/resources/domains/MasterDomain.xml\n coreMetaInfDirectory=core/src/main/resources/META-INF\n-persistencePropertiesFile=core/src/main/resources/persistence.properties\n+provisioningPropertiesFile=core/src/main/resources/provisioning.properties\n+masterPropertiesFile=core/src/main/resources/domains/Master.properties\n consolePropertiesFile=console.properties\n modelerPomFile=modelerPom.xml\n-"},{"sha":"1f8e2720ae4f16e5b15740b8ca6a366480f4827f","filename":"installer/src/main/resources/izpack/ProcessPanel.Spec.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2FProcessPanel.Spec.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2FProcessPanel.Spec.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2FProcessPanel.Spec.xml?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -85,8 +85,6 @@ under the License.\n       <arg>$mvn.proxy.user</arg><!-- 27 -->\n       <arg>$mvn.proxy.pwd</arg><!-- 28 -->\n       <arg>$mvn.proxy.autoconf</arg><!-- 29 -->\n-      <arg>$mvn.proxy.autoconf</arg><!-- 30 -->\n-      <arg>$mvn.proxy.autoconf</arg><!-- 31 -->\n     </executeclass>\n   </job>\n   <onFail previous=\"true\" next=\"false\" />"},{"sha":"9209a9d3beb977b501ae2e2859739006be105b7f","filename":"installer/src/main/resources/modelerPom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fresources%2FmodelerPom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c7754a531a1e46bcc86c02b840d8667ced30e1/installer%2Fsrc%2Fmain%2Fresources%2FmodelerPom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fresources%2FmodelerPom.xml?ref=e2c7754a531a1e46bcc86c02b840d8667ced30e1","patch":"@@ -27,7 +27,7 @@ under the License.\n   <packaging>jar</packaging>\n    \n   <properties>\n-    <activiti.version>5.17</activiti.version>\n+    <activiti.version>5.18.0</activiti.version>\n     <activiti-modeler.directory>${modeler.directory}</activiti-modeler.directory>\n      \n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>"}]}