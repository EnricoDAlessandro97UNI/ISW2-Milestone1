{"sha":"917088ff3aaa82a77115383b2dfc419b0d65172c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkxNzA4OGZmM2FhYTgyYTc3MTE1MzgzYjJkZmM0MTliMGQ2NTE3MmM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-11T15:32:02Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-11T15:32:02Z"},"message":"Added entitlements and roles\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246082 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94395873986be0a7c281ecacee38a395959fb910","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/94395873986be0a7c281ecacee38a395959fb910"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/917088ff3aaa82a77115383b2dfc419b0d65172c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/917088ff3aaa82a77115383b2dfc419b0d65172c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/917088ff3aaa82a77115383b2dfc419b0d65172c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/917088ff3aaa82a77115383b2dfc419b0d65172c/comments","author":null,"committer":null,"parents":[{"sha":"00514c37f6da328223d8e3cd18d3fe68da0aa8fc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/00514c37f6da328223d8e3cd18d3fe68da0aa8fc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/00514c37f6da328223d8e3cd18d3fe68da0aa8fc"}],"stats":{"total":840,"additions":557,"deletions":283},"files":[{"sha":"ffb83cec9c50502aa51c6f2259aa93b5d049d2c6","filename":"core/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -58,6 +58,11 @@\n             <artifactId>commons-jexl</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>commons-lang</groupId>\n+            <artifactId>commons-lang</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>opensymphony</groupId>\n             <artifactId>osworkflow</artifactId>"},{"sha":"ca77b71fd7048ecf43da6b68c68a8d2739b09854","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributableBean.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributableBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributableBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributableBean.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -0,0 +1,84 @@\n+/*\n+ *  Copyright 2010 ilgrosso.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.FetchType;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.OneToMany;\n+\n+@MappedSuperclass\n+public abstract class AbstractAttributableBean extends AbstractBaseBean {\n+\n+    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER,\n+    orphanRemoval = true)\n+    protected Set<Attribute> attributes;\n+    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER,\n+    orphanRemoval = true)\n+    protected Set<DerivedAttribute> derivedAttributes;\n+\n+    protected AbstractAttributableBean() {\n+        attributes = new HashSet<Attribute>();\n+        derivedAttributes = new HashSet<DerivedAttribute>();\n+    }\n+\n+    public Attribute getAttribute(String schemaName)\n+            throws NoSuchElementException {\n+\n+        Attribute result = null;\n+        Attribute attribute = null;\n+        for (Iterator<Attribute> itor = attributes.iterator();\n+                result == null && itor.hasNext();) {\n+\n+            attribute = itor.next();\n+\n+            if (schemaName.equals(attribute.getSchema().getName())) {\n+                result = attribute;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public boolean addAttribute(Attribute attribute) {\n+        return attributes.add(attribute);\n+    }\n+\n+    public boolean removeAttribute(Attribute attribute) {\n+        return attributes.remove(attribute);\n+    }\n+\n+    public Set<Attribute> getAttributes() {\n+        return attributes;\n+    }\n+\n+    public void setAttributes(Set<Attribute> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    public Set<DerivedAttribute> getDerivedAttributes() {\n+        return derivedAttributes;\n+    }\n+\n+    public void setDerivedAttributes(Set<DerivedAttribute> derivedAttributes) {\n+        this.derivedAttributes = derivedAttributes;\n+    }\n+}"},{"sha":"f27b30bc6f7f040a3f0c38af33f664e839788150","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright 2010 ilgrosso.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang.builder.ToStringStyle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AbstractBaseBean implements Serializable {\n+\n+    protected static final Logger log = LoggerFactory.getLogger(\n+            AbstractBaseBean.class);\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this,\n+                ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"7967b26c2623d8fb4f8c1a3312045500083b6660","filename":"core/src/main/java/org/syncope/core/persistence/beans/Attribute.java","status":"modified","additions":2,"deletions":16,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttribute.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -14,7 +14,6 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.CascadeType;\n@@ -25,19 +24,15 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.syncope.core.persistence.validation.ValidationException;\n \n @Entity\n-public class Attribute implements Serializable {\n+public class Attribute extends AbstractBaseBean {\n \n-    private static final Logger log = LoggerFactory.getLogger(\n-            Attribute.class);\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n-    @ManyToOne(fetch = FetchType.EAGER)\n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n     private AttributeSchema schema;\n     @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n     private Set<AttributeValue> values;\n@@ -130,13 +125,4 @@ public int hashCode() {\n \n         return hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"id=\" + getId() + \",\"\n-                + \"schema=\" + schema + \",\"\n-                + \"values=\" + values\n-                + \")\";\n-    }\n }"},{"sha":"ccb521d2c0e325b48a9c15626a35354718db1f85","filename":"core/src/main/java/org/syncope/core/persistence/beans/AttributeSchema.java","status":"modified","additions":1,"deletions":18,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeSchema.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -17,7 +17,6 @@\n import java.lang.reflect.Constructor;\n import static javax.persistence.EnumType.STRING;\n \n-import java.io.Serializable;\n import java.text.DecimalFormat;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n@@ -26,18 +25,14 @@\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n import javax.persistence.Transient;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.syncope.core.persistence.AttributeType;\n import org.syncope.core.persistence.validation.AttributeBasicValidator;\n import org.syncope.core.persistence.validation.AttributeValidator;\n import org.syncope.core.persistence.validation.ValidatorInstantiationException;\n \n @Entity\n-public class AttributeSchema implements Serializable {\n+public class AttributeSchema extends AbstractBaseBean {\n \n-    private static final Logger log = LoggerFactory.getLogger(\n-            AttributeSchema.class);\n     @Id\n     private String name;\n     @Column(nullable = false)\n@@ -240,16 +235,4 @@ public int hashCode() {\n \n         return hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"name=\" + name + \",\"\n-                + \"type=\" + type + \",\"\n-                + \"mandatory=\" + mandatory + \",\"\n-                + \"multivalue=\" + multivalue + \",\"\n-                + \"conversionPattern=\" + conversionPattern + \",\"\n-                + \"validatorClass=\" + validatorClass\n-                + \")\";\n-    }\n }"},{"sha":"81a30876f234f54a3b881d4066548e0020e5c721","filename":"core/src/main/java/org/syncope/core/persistence/beans/AttributeValue.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValue.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -14,7 +14,6 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n@@ -24,7 +23,7 @@\n \n @Entity\n @Inheritance(strategy = InheritanceType.JOINED)\n-public abstract class AttributeValue implements Serializable {\n+public abstract class AttributeValue extends AbstractBaseBean {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)"},{"sha":"18ad0299321a3c663b4614713df986808156835e","filename":"core/src/main/java/org/syncope/core/persistence/beans/AttributeValueAsBoolean.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsBoolean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsBoolean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsBoolean.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -14,12 +14,10 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import javax.persistence.Entity;\n \n @Entity\n-public class AttributeValueAsBoolean\n-        extends AttributeValue implements Serializable {\n+public class AttributeValueAsBoolean extends AttributeValue {\n \n     Boolean actualValue;\n \n@@ -69,12 +67,4 @@ public int hashCode() {\n                 ? this.actualValue.hashCode() : 0);\n         return super.hashCode() + hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"id=\" + getId() + \",\"\n-                + \"actualValue=\" + actualValue\n-                + \")\";\n-    }\n }"},{"sha":"9516ad11cf5386a3a78a59511f83910dc93ed790","filename":"core/src/main/java/org/syncope/core/persistence/beans/AttributeValueAsDate.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsDate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsDate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsDate.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -14,15 +14,13 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import java.util.Date;\n import javax.persistence.Entity;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n \n @Entity\n-public class AttributeValueAsDate\n-        extends AttributeValue implements Serializable {\n+public class AttributeValueAsDate extends AttributeValue {\n \n     @Temporal(TemporalType.TIMESTAMP)\n     Date actualValue;\n@@ -72,12 +70,4 @@ public int hashCode() {\n                 ? this.actualValue.hashCode() : 0);\n         return super.hashCode() + hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"id=\" + getId() + \",\"\n-                + \"actualValue=\" + actualValue\n-                + \")\";\n-    }\n }"},{"sha":"7355d927adb9f4b8ed5cdef77fe1e96861d66128","filename":"core/src/main/java/org/syncope/core/persistence/beans/AttributeValueAsDouble.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsDouble.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsDouble.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsDouble.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -14,12 +14,10 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import javax.persistence.Entity;\n \n @Entity\n-public class AttributeValueAsDouble\n-        extends AttributeValue implements Serializable {\n+public class AttributeValueAsDouble extends AttributeValue {\n \n     Double actualValue;\n \n@@ -69,12 +67,4 @@ public int hashCode() {\n                 ? this.actualValue.hashCode() : 0);\n         return super.hashCode() + hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"id=\" + getId() + \",\"\n-                + \"actualValue=\" + actualValue\n-                + \")\";\n-    }\n }"},{"sha":"f6353aafb27217147736d840e092a26e4ce4ec53","filename":"core/src/main/java/org/syncope/core/persistence/beans/AttributeValueAsLong.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsLong.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsLong.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsLong.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -14,12 +14,10 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import javax.persistence.Entity;\n \n @Entity\n-public class AttributeValueAsLong\n-        extends AttributeValue implements Serializable {\n+public class AttributeValueAsLong extends AttributeValue {\n \n     Long actualValue;\n \n@@ -68,12 +66,4 @@ public int hashCode() {\n                 ? this.actualValue.hashCode() : 0);\n         return super.hashCode() + hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"id=\" + getId() + \",\"\n-                + \"actualValue=\" + actualValue\n-                + \")\";\n-    }\n }"},{"sha":"00cda3b6c2873f5859841e5146282f485a402526","filename":"core/src/main/java/org/syncope/core/persistence/beans/AttributeValueAsString.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsString.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsString.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeValueAsString.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -14,12 +14,10 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import javax.persistence.Entity;\n \n @Entity\n-public class AttributeValueAsString\n-        extends AttributeValue implements Serializable {\n+public class AttributeValueAsString extends AttributeValue {\n \n     String actualValue;\n \n@@ -69,12 +67,4 @@ public int hashCode() {\n                 ? this.actualValue.hashCode() : 0);\n         return super.hashCode() + hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"id=\" + getId() + \",\"\n-                + \"actualValue=\" + actualValue\n-                + \")\";\n-    }\n }"},{"sha":"ecf988aaa1ab389727d693b9e6c7272ea4323151","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnectorInstance.java","status":"modified","additions":31,"deletions":30,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -16,25 +16,18 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n \n-/**\n- *\n- * @author fabio\n- */\n @Entity\n-public class ConnectorInstance implements Serializable {\n+public class ConnectorInstance extends AbstractBaseBean {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n-\n     private String name;\n-\n     private String minorVersion;\n \n     public String getMajorVersion() {\n@@ -69,7 +62,6 @@ public void setXmlConfiguration(String xmlConfiguration) {\n         this.xmlConfiguration = xmlConfiguration;\n     }\n     private String majorVersion;\n-\n     private String xmlConfiguration;\n \n     public Long getId() {\n@@ -82,19 +74,36 @@ public void setId(Long id) {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == null) return false;\n-        if (getClass() != obj.getClass()) return false;\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n         final ConnectorInstance other = (ConnectorInstance) obj;\n-        if (this.id != other.id && (this.id == null || !this.id.equals(other.id)))\n+        if (this.id != other.id\n+                && (this.id == null || !this.id.equals(other.id))) {\n             return false;\n-        if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name))\n+        }\n+        if ((this.name == null)\n+                ? (other.name != null) : !this.name.equals(other.name)) {\n             return false;\n-        if ((this.minorVersion == null) ? (other.minorVersion != null) : !this.minorVersion.equals(other.minorVersion))\n+        }\n+        if ((this.minorVersion == null)\n+                ? (other.minorVersion != null)\n+                : !this.minorVersion.equals(other.minorVersion)) {\n             return false;\n-        if ((this.majorVersion == null) ? (other.majorVersion != null) : !this.majorVersion.equals(other.majorVersion))\n+        }\n+        if ((this.majorVersion == null)\n+                ? (other.majorVersion != null)\n+                : !this.majorVersion.equals(other.majorVersion)) {\n             return false;\n-        if ((this.xmlConfiguration == null) ? (other.xmlConfiguration != null) : !this.xmlConfiguration.equals(other.xmlConfiguration))\n+        }\n+        if ((this.xmlConfiguration == null)\n+                ? (other.xmlConfiguration != null)\n+                : !this.xmlConfiguration.equals(other.xmlConfiguration)) {\n             return false;\n+        }\n         return true;\n     }\n \n@@ -103,20 +112,12 @@ public int hashCode() {\n         int hash = 7;\n         hash = 83 * hash + (this.id != null ? this.id.hashCode() : 0);\n         hash = 83 * hash + (this.name != null ? this.name.hashCode() : 0);\n-        hash = 83 * hash + (this.minorVersion != null ? this.minorVersion.hashCode() : 0);\n-        hash = 83 * hash + (this.majorVersion != null ? this.majorVersion.hashCode() : 0);\n-        hash = 83 * hash + (this.xmlConfiguration != null ? this.xmlConfiguration.hashCode() : 0);\n+        hash = 83 * hash + (this.minorVersion != null\n+                ? this.minorVersion.hashCode() : 0);\n+        hash = 83 * hash + (this.majorVersion != null\n+                ? this.majorVersion.hashCode() : 0);\n+        hash = 83 * hash + (this.xmlConfiguration != null\n+                ? this.xmlConfiguration.hashCode() : 0);\n         return hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\" +\n-                \"id=\" + getId() + \",\" +\n-                \"name=\" + getName() + \",\" +\n-                \"major version=\" + getMajorVersion() + \",\" +\n-                \"minor version=\" + getMinorVersion() + \",\" +\n-                \"configuration=\" + getXmlConfiguration() +\n-                \")\";\n-    }\n }"},{"sha":"c6bacfa5445a432e64ce1193da466e3c45795287","filename":"core/src/main/java/org/syncope/core/persistence/beans/DerivedAttribute.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FDerivedAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FDerivedAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FDerivedAttribute.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -14,18 +14,15 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import java.text.DecimalFormat;\n import java.text.SimpleDateFormat;\n-import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n-import javax.persistence.OneToMany;\n import org.apache.commons.jexl2.Expression;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.JexlEngine;\n@@ -35,7 +32,7 @@\n  * @see http://commons.apache.org/jexl/reference/index.html\n  */\n @Entity\n-public class DerivedAttribute implements Serializable {\n+public class DerivedAttribute extends AbstractBaseBean {\n \n     private static final JexlEngine jexlEngine = new JexlEngine();\n \n@@ -150,12 +147,4 @@ public int hashCode() {\n \n         return hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"id=\" + getId() + \",\"\n-                + \"schema=\" + getSchema()\n-                + \")\";\n-    }\n }"},{"sha":"a73927db41fe51ed330e3d7edadbd0bd7e8cc325","filename":"core/src/main/java/org/syncope/core/persistence/beans/DerivedAttributeSchema.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FDerivedAttributeSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FDerivedAttributeSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FDerivedAttributeSchema.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -14,12 +14,11 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n \n @Entity\n-public class DerivedAttributeSchema implements Serializable {\n+public class DerivedAttributeSchema extends AbstractBaseBean {\n \n     @Id\n     private String name;\n@@ -51,7 +50,7 @@ public boolean equals(Object obj) {\n         }\n         final DerivedAttributeSchema other =\n                 (DerivedAttributeSchema) obj;\n-        \n+\n         if ((this.name == null)\n                 ? (other.name != null) : !this.name.equals(other.name)) {\n \n@@ -76,12 +75,4 @@ public int hashCode() {\n \n         return hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"name=\" + getName() + \",\"\n-                + \"expression=\" + getExpression()\n-                + \")\";\n-    }\n }"},{"sha":"bb849460c2a59ab378c9a2d37ec6d71a771b0d91","filename":"core/src/main/java/org/syncope/core/persistence/beans/Entitlement.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -0,0 +1,91 @@\n+/*\n+ *  Copyright 2010 ilgrosso.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+\n+@Entity\n+public class Entitlement extends AbstractBaseBean {\n+\n+    @Id\n+    private String name;\n+    @Column(nullable = true)\n+    private String description;\n+    @ManyToMany(cascade = CascadeType.ALL)\n+    private Set<SyncopeRole> roles;\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<SyncopeRole> getRoles() {\n+        return roles;\n+    }\n+\n+    public void setRoles(Set<SyncopeRole> roles) {\n+        this.roles = roles;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final Entitlement other = (Entitlement) obj;\n+        if ((this.name == null)\n+                ? (other.name != null) : !this.name.equals(other.name)) {\n+\n+            return false;\n+        }\n+        if ((this.description == null)\n+                ? (other.description != null)\n+                : !this.description.equals(other.description)) {\n+\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 79 * hash + (this.name != null ? this.name.hashCode() : 0);\n+        hash = 79 * hash + (this.description != null\n+                ? this.description.hashCode() : 0);\n+        return hash;\n+    }\n+}"},{"sha":"38e74966eb780fbb7bce2b839a07f5a15f74a543","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncopeRole.java","status":"modified","additions":28,"deletions":36,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeRole.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -16,52 +16,53 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.EmbeddedId;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n-import javax.persistence.OneToMany;\n+import javax.persistence.ManyToMany;\n \n @Entity\n-public class SyncopeRole implements Serializable {\n+public class SyncopeRole extends AbstractAttributableBean {\n \n     @EmbeddedId\n-    private SyncopeRolePK syncopeUserPK;\n-    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n-    private Set<Attribute> attributes;\n-    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n-    private Set<DerivedAttribute> derivedAttributes;\n+    private SyncopeRolePK syncopeRolePK;\n+    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER,\n+    mappedBy = \"roles\")\n+    private Set<SyncopeUser> users;\n+    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER,\n+    mappedBy = \"roles\")\n+    private Set<Entitlement> entitlements;\n \n     public SyncopeRole() {\n-        attributes = new HashSet<Attribute>();\n-        derivedAttributes = new HashSet<DerivedAttribute>();\n+        users = new HashSet<SyncopeUser>();\n+        entitlements = new HashSet<Entitlement>();\n     }\n \n-    public Set<Attribute> getAttributes() {\n-        return attributes;\n+    public SyncopeRolePK getSyncopeRolePK() {\n+        return syncopeRolePK;\n     }\n \n-    public void setAttributes(Set<Attribute> attributes) {\n-        this.attributes = attributes;\n+    public void setSyncopeRolePK(SyncopeRolePK syncopeRolePK) {\n+        this.syncopeRolePK = syncopeRolePK;\n     }\n \n-    public Set<DerivedAttribute> getDerivedAttributes() {\n-        return derivedAttributes;\n+    public Set<Entitlement> getEntitlements() {\n+        return entitlements;\n     }\n \n-    public void setDerivedAttributes(Set<DerivedAttribute> derivedAttributes) {\n-        this.derivedAttributes = derivedAttributes;\n+    public void setEntitlements(Set<Entitlement> entitlements) {\n+        this.entitlements = entitlements;\n     }\n \n-    public SyncopeRolePK getSyncopeRolePK() {\n-        return syncopeUserPK;\n+    public Set<SyncopeUser> getUsers() {\n+        return users;\n     }\n \n-    public void setSyncopeRolePK(SyncopeRolePK syncopeRolePK) {\n-        this.syncopeUserPK = syncopeRolePK;\n+    public void setUsers(Set<SyncopeUser> users) {\n+        this.users = users;\n     }\n \n     @Override\n@@ -73,9 +74,9 @@ public boolean equals(Object obj) {\n             return false;\n         }\n         final SyncopeRole other = (SyncopeRole) obj;\n-        if (this.syncopeUserPK != other.syncopeUserPK\n-                && (this.syncopeUserPK == null\n-                || !this.syncopeUserPK.equals(other.syncopeUserPK))) {\n+        if (this.syncopeRolePK != other.syncopeRolePK\n+                && (this.syncopeRolePK == null\n+                || !this.syncopeRolePK.equals(other.syncopeRolePK))) {\n \n             return false;\n         }\n@@ -85,17 +86,8 @@ public boolean equals(Object obj) {\n     @Override\n     public int hashCode() {\n         int hash = 7;\n-        hash = 41 * hash + (this.syncopeUserPK != null\n-                ? this.syncopeUserPK.hashCode() : 0);\n+        hash = 41 * hash + (this.syncopeRolePK != null\n+                ? this.syncopeRolePK.hashCode() : 0);\n         return hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"syncopeUserPK=\" + syncopeUserPK + \",\"\n-                + \"attributes=\" + attributes + \",\"\n-                + \"derivedAttributes=\" + derivedAttributes\n-                + \")\";\n-    }\n }"},{"sha":"745cc0d5466fdba015f29d5b819e208c2164f3c6","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncopeRolePK.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeRolePK.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeRolePK.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeRolePK.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -16,11 +16,10 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import javax.persistence.Embeddable;\n \n @Embeddable\n-public class SyncopeRolePK implements Serializable {\n+public class SyncopeRolePK extends AbstractBaseBean {\n \n     final public static String ROOT_ROLE = \"/\";\n     private String name;\n@@ -90,12 +89,4 @@ public int hashCode() {\n         hash = 89 * hash + (this.name != null ? this.name.hashCode() : 0);\n         return hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"name=\" + name + \",\"\n-                + \"parent=\" + parent\n-                + \")\";\n-    }\n }"},{"sha":"6300e4586175755d34a4a7047d668011c091484f","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncopeUser.java","status":"modified","additions":8,"deletions":49,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeUser.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -14,29 +14,25 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.io.Serializable;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n import java.util.Set;\n-import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n-import javax.persistence.OneToMany;\n+import javax.persistence.ManyToMany;\n \n @Entity\n-public class SyncopeUser implements Serializable {\n+public class SyncopeUser extends AbstractAttributableBean {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n-    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n-    private Set<Attribute> attributes;\n-    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n-    private Set<DerivedAttribute> derivedAttributes;\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    private Set<SyncopeRole> roles;\n \n     public SyncopeUser() {\n         attributes = new HashSet<Attribute>();\n@@ -47,40 +43,12 @@ public Long getId() {\n         return id;\n     }\n \n-    public Attribute getAttribute(String name)\n-            throws NoSuchElementException {\n-\n-        Attribute result = null;\n-        Attribute attribute = null;\n-        for (Iterator<Attribute> itor = attributes.iterator();\n-                result == null && itor.hasNext();) {\n-\n-            attribute = itor.next();\n-\n-            if (name.equals(attribute.getSchema().getName())) {\n-                result = attribute;\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    public Set<Attribute> getAttributes() {\n-        return attributes;\n+    public Set<SyncopeRole> getRoles() {\n+        return roles;\n     }\n \n-    public void setAttributes(Set<Attribute> attributes) {\n-        this.attributes = attributes;\n-    }\n-\n-    public Set<DerivedAttribute> getDerivedAttributes() {\n-        return derivedAttributes;\n-    }\n-\n-    public void setDerivedAttributes(\n-            Set<DerivedAttribute> derivedAttributes) {\n-\n-        this.derivedAttributes = derivedAttributes;\n+    public void setRoles(Set<SyncopeRole> roles) {\n+        this.roles = roles;\n     }\n \n     @Override\n@@ -109,13 +77,4 @@ public int hashCode() {\n \n         return hash;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"(\"\n-                + \"id=\" + id + \",\"\n-                + \"attributes=\" + attributes + \",\"\n-                + \"derivedAttributes=\" + derivedAttributes\n-                + \")\";\n-    }\n }"},{"sha":"37c1b4b85b0c39fa03cbbeaaaa61cbff8767471e","filename":"core/src/main/java/org/syncope/core/persistence/dao/EntitlementDAO.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -0,0 +1,31 @@\n+/*\n+ *  Copyright 2010 ilgrosso.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.Entitlement;\n+\n+public interface EntitlementDAO extends DAO {\n+\n+    Entitlement find(String name);\n+\n+    List<Entitlement> findAll();\n+\n+    Entitlement save(Entitlement entitlement);\n+\n+    void delete(String name);\n+}"},{"sha":"77cc80f0f7ed6ca74146c6a9917c33ee432905a6","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -15,6 +15,7 @@\n package org.syncope.core.persistence.dao.impl;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.EntityNotFoundException;\n import javax.persistence.PersistenceContext;\n import javax.persistence.PersistenceContextType;\n import org.springframework.beans.factory.annotation.Configurable;\n@@ -32,4 +33,17 @@ public EntityManager getEntityManager() {\n     public void setEntityManager(EntityManager entityManager) {\n         this.entityManager = entityManager;\n     }\n+\n+    protected boolean isDeletedOrNotManaged(Object entity) {\n+        boolean entityDeletedOrNotManaged = false;\n+        try {\n+            entityManager.refresh(entity);\n+        } catch (IllegalArgumentException iae) {\n+            entityDeletedOrNotManaged = true;\n+        } catch (EntityNotFoundException enf) {\n+            entityDeletedOrNotManaged = true;\n+        }\n+\n+        return entityDeletedOrNotManaged;\n+    }\n }"},{"sha":"3b61ab908f094939e3c5dfe666cdf7b113faaa9a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeDAOImpl.java","status":"modified","additions":44,"deletions":2,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -16,18 +16,33 @@\n \n import java.util.List;\n import javax.persistence.Query;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.Attribute;\n+import org.syncope.core.persistence.beans.SyncopeRole;\n+import org.syncope.core.persistence.beans.SyncopeUser;\n import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n \n @Repository\n public class AttributeDAOImpl extends AbstractDAOImpl\n         implements AttributeDAO {\n \n+    @Autowired\n+    SyncopeUserDAO syncopeUserDAO;\n+    @Autowired\n+    SyncopeRoleDAO syncopeRoleDAO;\n+\n     @Override\n     public Attribute find(long id) {\n-        return entityManager.find(Attribute.class, id);\n+        Attribute result = entityManager.find(Attribute.class, id);\n+        if (isDeletedOrNotManaged(result)) {\n+            result = null;\n+        }\n+\n+        return result;\n     }\n \n     @Override\n@@ -48,6 +63,33 @@ public Attribute save(Attribute attribute) {\n     @Override\n     @Transactional\n     public void delete(long id) {\n-        entityManager.remove(find(id));\n+        Attribute attribute = find(id);\n+        if (attribute == null) {\n+            return;\n+        }\n+\n+        Query userQuery = entityManager.createQuery(\n+                \"SELECT u FROM SyncopeUser u WHERE \"\n+                + \":attribute MEMBER OF u.attributes\");\n+        userQuery.setParameter(\"attribute\", attribute);\n+        List<SyncopeUser> users = userQuery.getResultList();\n+        for (SyncopeUser user : users) {\n+            user.removeAttribute(attribute);\n+            syncopeUserDAO.save(user);\n+        }\n+\n+        if (!isDeletedOrNotManaged(attribute)) {\n+            Query roleQuery = entityManager.createQuery(\n+                    \"SELECT r FROM SyncopeRole r WHERE \"\n+                    + \":attribute MEMBER OF r.attributes\");\n+            roleQuery.setParameter(\"attribute\", attribute);\n+            List<SyncopeRole> roles = roleQuery.getResultList();\n+            for (SyncopeRole role : roles) {\n+                role.removeAttribute(attribute);\n+                syncopeRoleDAO.save(role);\n+            }\n+        }\n+\n+        entityManager.remove(attribute);\n     }\n }"},{"sha":"b553d8e18278e45f7cc2d87b0d41857bc542d8c8","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/EntitlementDAOImpl.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -0,0 +1,51 @@\n+/*\n+ *  Copyright 2010 ilgrosso.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n+\n+@Repository\n+public class EntitlementDAOImpl extends AbstractDAOImpl implements EntitlementDAO {\n+\n+    @Override\n+    public Entitlement find(String name) {\n+        return entityManager.find(Entitlement.class, name);\n+    }\n+\n+    @Override\n+    public List<Entitlement> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM Entitlement e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Entitlement save(Entitlement entitlement) {\n+        Entitlement result = entityManager.merge(entitlement);\n+        entityManager.flush();\n+        return result;\n+    }\n+\n+    @Override\n+    public void delete(String name) {\n+        entityManager.remove(find(name));\n+    }\n+}"},{"sha":"9b70ce6c5d2e58f15e50434a98210e3862fa6bf3","filename":"core/src/main/resources/META-INF/persistence.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -1,10 +1,10 @@\n <persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n              xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n-             http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n-             version=\"1.0\">\n+             http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n+             version=\"2.0\">\n     <persistence-unit name=\"syncopePersistenceUnit\" transaction-type=\"RESOURCE_LOCAL\">\n         <properties>\n         </properties>\n     </persistence-unit>\n-</persistence>\n\\ No newline at end of file\n+</persistence>"},{"sha":"d31aecf43b80a619644174a48ccfad1e189c1365","filename":"core/src/test/java/org/syncope/core/persistence/test/EntitlementDAOTest.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FEntitlementDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FEntitlementDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FEntitlementDAOTest.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -0,0 +1,66 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.test;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n+\n+@Transactional\n+public class EntitlementDAOTest extends AbstractDAOTest {\n+\n+    @Autowired\n+    EntitlementDAO entitlementDAO;\n+\n+    @Test\n+    public final void testFindAll() {\n+        List<Entitlement> list = entitlementDAO.findAll();\n+        assertEquals(\"did not get expected number of entitlements \",\n+                2, list.size());\n+    }\n+\n+    @Test\n+    public final void testFindByName() {\n+        Entitlement entitlement = entitlementDAO.find(\"base\");\n+        assertNotNull(\"did not find expected entitlement\",\n+                entitlement);\n+        assertFalse(\"expected some role\", entitlement.getRoles().isEmpty());\n+    }\n+\n+    @Test\n+    public final void testSave() {\n+        Entitlement entitlement = new Entitlement();\n+        entitlement.setName(\"another\");\n+\n+        entitlementDAO.save(entitlement);\n+\n+        Entitlement actual = entitlementDAO.find(\"another\");\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(entitlement, actual);\n+    }\n+\n+    @Test\n+    public final void testDelete() {\n+        entitlementDAO.delete(\"advanced\");\n+\n+        Entitlement actual = entitlementDAO.find(\"advanced\");\n+        assertNull(\"delete did not work\", actual);\n+    }\n+}"},{"sha":"3fbe84ff38c2e5563075cf256690e7a2b44d423c","filename":"core/src/test/java/org/syncope/core/persistence/test/SyncopeRoleDAOTest.java","status":"modified","additions":13,"deletions":18,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FSyncopeRoleDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FSyncopeRoleDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FSyncopeRoleDAOTest.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -78,27 +78,22 @@ public final void testDelete() {\n     @Test\n     public final void testRelationships() {\n         SyncopeRole role = syncopeRoleDAO.find(\"root\", null);\n-        Set<Attribute> attributes =\n-                role.getAttributes();\n+        Set<Attribute> attributes = role.getAttributes();\n         int originalAttributesSize = attributes.size();\n-\n         Attribute attribute = attributes.iterator().next();\n-        String attributeSchemaName =\n-                attribute.getSchema().getName();\n \n+        // Remove an attribute from its table: we expect not to find it\n+        // associated with the user\n         attributeDAO.delete(attribute.getId());\n-        Attribute actualAttribute =\n-                attributeDAO.find(attribute.getId());\n-        assertNull(\"expected delete to work\", actualAttribute);\n-\n-        role = syncopeRoleDAO.find(\"root\", null);\n-        attributes = role.getAttributes();\n-        assertEquals(\"number of attributes differs\",\n-                originalAttributesSize, attributes.size());\n-\n-        AttributeSchema attributeSchema =\n-                attributeSchemaDAO.find(attributeSchemaName);\n-        assertNotNull(\"user attribute schema deleted when deleting values\",\n-                attributeSchema);\n+        assertNull(attributeDAO.find(attribute.getId()));\n+        assertEquals(\"unexpected number of attributes\",\n+                originalAttributesSize - 1, role.getAttributes().size());\n+\n+        // Remove an attribute association with a user: we expect not to\n+        // have it on the db table as well\n+        attribute = role.getAttributes().iterator().next();\n+        role.removeAttribute(attribute);\n+        syncopeRoleDAO.save(role);\n+        assertNull(attributeDAO.find(attribute.getId()));\n     }\n }"},{"sha":"8a6aab629d1b1012c7defb6072e097fae813ec2f","filename":"core/src/test/java/org/syncope/core/persistence/test/SyncopeUserDAOTest.java","status":"modified","additions":17,"deletions":20,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FSyncopeUserDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FSyncopeUserDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FSyncopeUserDAOTest.java?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -22,11 +22,11 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.SyncopeUser;\n-import org.syncope.core.persistence.beans.AttributeSchema;\n import org.syncope.core.persistence.beans.Attribute;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.dao.AttributeSchemaDAO;\n import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n @Transactional\n public class SyncopeUserDAOTest extends AbstractDAOTest {\n@@ -37,6 +37,8 @@ public class SyncopeUserDAOTest extends AbstractDAOTest {\n     AttributeDAO attributeDAO;\n     @Autowired\n     AttributeSchemaDAO attributeSchemaDAO;\n+    @Autowired\n+    SyncopeRoleDAO syncopeRoleDAO;\n \n     @Test\n     public final void testFindAll() {\n@@ -76,28 +78,23 @@ public final void testDelete() {\n \n     @Test\n     public final void testRelationships() {\n-        SyncopeUser user = syncopeUserDAO.find(2L);\n-        Set<Attribute> attributes =\n-                user.getAttributes();\n+        SyncopeUser user = syncopeUserDAO.find(1L);\n+        Set<Attribute> attributes = user.getAttributes();\n         int originalAttributesSize = attributes.size();\n-\n         Attribute attribute = attributes.iterator().next();\n-        String attributeSchemaName =\n-                attribute.getSchema().getName();\n \n+        // Remove an attribute from its table: we expect not to find it\n+        // associated with the user\n         attributeDAO.delete(attribute.getId());\n-        Attribute actualAttribute =\n-                attributeDAO.find(attribute.getId());\n-        assertNull(\"expected delete to work\", actualAttribute);\n-\n-        user = syncopeUserDAO.find(2L);\n-        attributes = user.getAttributes();\n-        assertEquals(\"number of attributes differs\",\n-                originalAttributesSize, attributes.size());\n-\n-        AttributeSchema attributeSchema =\n-                attributeSchemaDAO.find(attributeSchemaName);\n-        assertNotNull(\"user attribute schema deleted when deleting values\",\n-                attributeSchema);\n+        assertNull(attributeDAO.find(attribute.getId()));\n+        assertEquals(\"unexpected number of attributes\",\n+                originalAttributesSize - 1, user.getAttributes().size());\n+\n+        // Remove an attribute association with a user: we expect not to\n+        // have it on the db table as well\n+        attribute = user.getAttributes().iterator().next();\n+        user.removeAttribute(attribute);\n+        syncopeUserDAO.save(user);\n+        assertNull(attributeDAO.find(attribute.getId()));\n     }\n }"},{"sha":"50cfccbb1d33b4b9b822943459053dca53b315fe","filename":"core/src/test/resources/dbunitTestData.xml","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -7,6 +7,11 @@\n     <SyncopeRole name=\"root\" parent=\"/\"/>\n     <SyncopeRole name=\"child\" parent=\"root\"/>\n \n+    <SyncopeUser_SyncopeRole users_id=\"1\"\n+                             roles_name=\"root\" roles_parent=\"/\"/>\n+    <SyncopeUser_SyncopeRole users_id=\"2\"\n+                             roles_name=\"root\" roles_parent=\"/\"/>\n+\n     <AttributeSchema name=\"username\" type=\"String\"\n                      mandatory=\"true\" multivalue=\"false\"\n                      conversionPattern=\"NULL\" validatorClass=\"NULL\"/>\n@@ -102,4 +107,14 @@\n \n     <SyncopeUser_DerivedAttribute SyncopeUser_id=\"3\"\n                                   derivedAttributes_id=\"1000\"/>\n+\n+    <Entitlement name=\"base\" description=\"NULL\"/>\n+    <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n+\n+    <Entitlement_SyncopeRole entitlements_name=\"base\"\n+                             roles_name=\"root\" roles_parent=\"/\"/>\n+    <Entitlement_SyncopeRole entitlements_name=\"advanced\"\n+                             roles_name=\"root\" roles_parent=\"/\"/>\n+    <Entitlement_SyncopeRole entitlements_name=\"base\"\n+                             roles_name=\"child\" roles_parent=\"root\"/>\n </dataset>"},{"sha":"33204949046b296e795d9a455f5ed85aa00f0780","filename":"pom.xml","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/917088ff3aaa82a77115383b2dfc419b0d65172c/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/917088ff3aaa82a77115383b2dfc419b0d65172c/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=917088ff3aaa82a77115383b2dfc419b0d65172c","patch":"@@ -99,6 +99,7 @@\n         <servlet-api.version>2.5</servlet-api.version>\n \n         <commons-jexl.version>2.0.1</commons-jexl.version>\n+        <commons-lang.version>2.5</commons-lang.version>\n \n         <openam.version>snapshot9</openam.version>\n \n@@ -147,6 +148,12 @@\n                 <version>${commons-jexl.version}</version>\n             </dependency>\n \n+            <dependency>\n+                <groupId>commons-lang</groupId>\n+                <artifactId>commons-lang</artifactId>\n+                <version>${commons-lang.version}</version>\n+            </dependency>\n+\n             <dependency>\n                 <groupId>com.forgerock.openam</groupId>\n                 <artifactId>clientsdk</artifactId>\n@@ -302,7 +309,7 @@\n                 <enabled>false</enabled>\n             </snapshots>\n         </repository>\n-        \n+\n     </repositories>\n \n     <build>"}]}