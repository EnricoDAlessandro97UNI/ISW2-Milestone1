{"sha":"4f4ae61db05b5e349c70fc812224c1757ba40c9e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRmNGFlNjFkYjA1YjVlMzQ5YzcwZmM4MTIyMjRjMTc1N2JhNDBjOWU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-24T09:56:52Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-24T09:56:52Z"},"message":"[SYNCOPE-26] Added sample (but working) LDAPMembershipSyncActions\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1425615 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7080e2d924c8a910ba985bf32bc61ff875791a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e7080e2d924c8a910ba985bf32bc61ff875791a8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4f4ae61db05b5e349c70fc812224c1757ba40c9e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4f4ae61db05b5e349c70fc812224c1757ba40c9e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4f4ae61db05b5e349c70fc812224c1757ba40c9e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4f4ae61db05b5e349c70fc812224c1757ba40c9e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"831bfcaf3b5e6467d7a3118273815ebaf2560317","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/831bfcaf3b5e6467d7a3118273815ebaf2560317","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/831bfcaf3b5e6467d7a3118273815ebaf2560317"}],"stats":{"total":511,"additions":441,"deletions":70},"files":[{"sha":"3186f4b6ee12c5064ab3fa83898f47d54c652fc1","filename":"archetype/src/main/resources/archetype-resources/core/src/test/resources/content.xml","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -542,7 +542,7 @@ under the License.\n   <UMapping id=\"11\" resource_name=\"resource-ldap\"\n             accountlink=\"&apos;uid=&apos; + username + &apos;,ou=people,o=isp&apos;\"/>\n   <UMappingItem id=\"311\" accountid=\"1\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"__NAME__\" intAttrName=\"Username\" intMappingType=\"Username\"\n+                extAttrName=\"__UID__\" intAttrName=\"Username\" intMappingType=\"Username\"\n                 mandatoryCondition=\"true\"/>\n   <UMappingItem id=\"312\" accountid=\"0\" password=\"1\" mapping_id=\"11\"\n                 extAttrName=\"__PASSWORD__\" intAttrName=\"Password\" intMappingType=\"Password\"\n@@ -551,7 +551,7 @@ under the License.\n                 extAttrName=\"sn\" intAttrName=\"surname\" intMappingType=\"UserSchema\"\n                 mandatoryCondition=\"true\"/>\n   <UMappingItem id=\"314\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"cn\" intAttrName=\"firstname\" intMappingType=\"UserSchema\"\n+                extAttrName=\"cn\" intAttrName=\"fullname\" intMappingType=\"UserSchema\"\n                 mandatoryCondition=\"true\"/>\n   <UMappingItem id=\"315\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n                 extAttrName=\"mail\" intAttrName=\"email\" intMappingType=\"UserSchema\"\n@@ -562,6 +562,9 @@ under the License.\n   <UMappingItem id=\"317\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n                 extAttrName=\"postalAddress\" intAttrName=\"postalAddress\" intMappingType=\"MembershipSchema\"\n                 mandatoryCondition=\"false\"/>\n+  <UMappingItem id=\"318\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n+                extAttrName=\"mail\" intAttrName=\"userId\" intMappingType=\"UserSchema\"\n+                mandatoryCondition=\"false\"/>\n   <RMapping id=\"1\" resource_name=\"resource-ldap\"\n             accountlink=\"&apos;cn=&apos; + name + &apos;,ou=groups,o=isp&apos;\"/>\n   <RMappingItem id=\"1\" accountid=\"1\" password=\"0\" mapping_id=\"1\"\n@@ -626,8 +629,9 @@ under the License.\n         fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n         jobClassName=\"org.apache.syncope.core.sync.SyncJob\"/>\n   <Task DTYPE=\"SyncTask\" id=\"11\" name=\"LDAP Sync Task\" resource_name=\"resource-ldap\"\n-          fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n-          jobClassName=\"org.apache.syncope.core.sync.SyncJob\"/>\n+        fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n+        actionsClassName=\"org.apache.syncope.core.sync.LDAPMembershipSyncActions\"  \n+        jobClassName=\"org.apache.syncope.core.sync.SyncJob\"/>\n         \n   <NotificationTask_recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>\n "},{"sha":"6ad99af28e729ef52372cc898693a3b62058ecca","filename":"build-tools/src/main/resources/content.ldif","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -29,3 +29,16 @@ objectClass: groupOfUniqueNames\n objectClass: top\n cn: testLDAPGroup\n uniqueMember: uid=admin,ou=system\n+uniqueMember: uid=syncFromLDAP,ou=People,o=isp\n+\n+DN: uid=syncFromLDAP,ou=People,o=isp\n+objectClass: organizationalPerson\n+objectClass: person\n+objectClass: inetOrgPerson\n+objectClass: top\n+cn: Sync from LDAP\n+description: Active\n+mail: syncFromLDAP@syncope.apache.org\n+sn: Surname\n+uid: syncFromLDAP\n+userpassword:: cGFzc3dvcmQxMjM="},{"sha":"5d34c12693a37ccf55cc3e7884f27a32e7f9d51b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncActions.java","status":"modified","additions":18,"deletions":12,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncActions.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import org.apache.syncope.client.mod.AbstractAttributableMod;\n import org.apache.syncope.client.to.AbstractAttributableTO;\n+import org.apache.syncope.core.sync.SyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n@@ -32,62 +33,67 @@ public interface SyncActions {\n     /**\n      * Action to be executed before to start the synchronization task execution.\n      *\n-     * @param task synchronization task to be executed.\n+     * @param handler synchronization handler being executed.\n      * @throws JobExecutionException in case of generic failure.\n      */\n-    void beforeAll(final SyncTask task) throws JobExecutionException;\n+    void beforeAll(final SyncopeSyncResultHandler handler) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to create a synchronized user locally.\n      *\n+     * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n      * @param subject user / role to be created\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncDelta delta, final T subject)\n-            throws JobExecutionException;\n+    <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncopeSyncResultHandler handler,\n+            final SyncDelta delta, final T subject) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to update a synchronized user locally.\n      *\n+     * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n      * @param subject local user / role information\n      * @param subjectMod modification\n      * @return synchronization information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure.\n      */\n-    <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(final SyncDelta delta,\n-            final T subject, final K subjectMod) throws JobExecutionException;\n+    <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n+            final SyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            throws JobExecutionException;\n \n     /**\n      * Action to be executed before to delete a synchronized user locally.\n      *\n+     * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n      * @param subject lcao user / role to be deleted\n      * @return synchronization information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AbstractAttributableTO> SyncDelta beforeDelete(final SyncDelta delta, final T subject)\n-            throws JobExecutionException;\n+    <T extends AbstractAttributableTO> SyncDelta beforeDelete(final SyncopeSyncResultHandler handler,\n+            final SyncDelta delta, final T subject) throws JobExecutionException;\n \n     /**\n      * Action to be executed after each local user synchronization.\n      *\n+     * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information (may be modified by 'beforeCreate/beforeUpdate/beforeDelete')\n      * @param subject synchronized local user / role\n      * @param result global synchronization results at the current synchronization step\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AbstractAttributableTO> void after(final SyncDelta delta, final T subject, final SyncResult result)\n-            throws JobExecutionException;\n+    <T extends AbstractAttributableTO> void after(final SyncopeSyncResultHandler handler, final SyncDelta delta,\n+            final T subject, final SyncResult result) throws JobExecutionException;\n \n     /**\n      * Action to be executed after the synchronization task completion.\n      *\n-     * @param task executed synchronization task\n+     * @param handler synchronization handler being executed.\n      * @param results synchronization result\n      * @throws JobExecutionException in case of generic failure\n      */\n-    void afterAll(final SyncTask task, final List<SyncResult> results) throws JobExecutionException;\n+    void afterAll(final SyncopeSyncResultHandler handler, final List<SyncResult> results) throws JobExecutionException;\n }"},{"sha":"ac7c0608ef312f9044287bf42d95886d4e272c40","filename":"core/src/main/java/org/apache/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -20,6 +20,7 @@\n \n import java.io.File;\n import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n@@ -57,6 +58,7 @@\n import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.identityconnectors.framework.common.objects.Uid;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.ClassUtils;\n@@ -352,6 +354,27 @@ public ConnectorObject getObject(final PropagationMode propagationMode, final Re\n         return result;\n     }\n \n+    public List<ConnectorObject> search(final ObjectClass objectClass, final Filter filter,\n+            final OperationOptions options) {\n+\n+        final List<ConnectorObject> result = new ArrayList<ConnectorObject>();\n+\n+        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n+            connector.search(objectClass, filter, new ResultsHandler() {\n+\n+                @Override\n+                public boolean handle(final ConnectorObject obj) {\n+                    return result.add(obj);\n+                }\n+            }, options);\n+        } else {\n+            LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n+                    activeConnInstance.getCapabilities());\n+        }\n+\n+        return result;\n+    }\n+\n     /**\n      * Get remote object used by the propagation manager in order to choose for a create (object doesn't exist) or an\n      * update (object exists)."},{"sha":"1ced3a70ab2f4e81e1928b061459b5ea0d5abe8f","filename":"core/src/main/java/org/apache/syncope/core/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -43,21 +43,27 @@\n /**\n  * Simple action for propagating role memberships to LDAP groups, when the same resource is configured for both users\n  * and roles.\n+ * \n+ * @see org.apache.syncope.core.sync.LDAPMembershipSyncActions\n  */\n public class LDAPMembershipPropagationActions extends DefaultPropagationActions {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(LDAPMembershipPropagationActions.class);\n-\n-    /**\n-     * Allows easy subclassing for the ConnId AD connector bundle.\n-     */\n-    protected static final String GROUP_MEMBERSHIP_ATTR = \"ldapGroups\";\n+    protected static final Logger LOG = LoggerFactory.getLogger(LDAPMembershipPropagationActions.class);\n \n     @Autowired\n-    private UserDAO userDAO;\n+    protected UserDAO userDAO;\n \n     @Autowired\n-    private JexlUtil jexlUtil;\n+    protected JexlUtil jexlUtil;\n+\n+    /**\n+     * Allows easy subclassing for the ConnId AD connector bundle.\n+     *\n+     * @return the name of the attribute used to keep track of group memberships\n+     */\n+    protected String getGroupMembershipAttrName() {\n+        return \"ldapGroups\";\n+    }\n \n     @Transactional(readOnly = true)\n     @Override\n@@ -95,7 +101,7 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n \n             if (!roleAccountLinks.isEmpty()) {\n                 Set<Attribute> attributes = new HashSet<Attribute>(task.getAttributes());\n-                attributes.add(AttributeBuilder.build(GROUP_MEMBERSHIP_ATTR, roleAccountLinks));\n+                attributes.add(AttributeBuilder.build(getGroupMembershipAttrName(), roleAccountLinks));\n                 task.setAttributes(attributes);\n             }\n         } else {"},{"sha":"907f3a489dce8174a78c96917a8e96386ee6f0a5","filename":"core/src/main/java/org/apache/syncope/core/quartz/SampleJob.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSampleJob.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.quartz;\n \n-import org.quartz.JobExecutionException;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n+import org.quartz.JobExecutionException;\n \n /**\n  * Sample implementation for execution a scheduled task."},{"sha":"ecfe332692f681c4ba8df272e50dcac8a506807c","filename":"core/src/main/java/org/apache/syncope/core/sync/DefaultSyncActions.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.client.to.AbstractAttributableTO;\n import org.apache.syncope.core.persistence.beans.SyncActions;\n import org.apache.syncope.core.persistence.beans.SyncResult;\n-import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n@@ -33,36 +32,38 @@\n public class DefaultSyncActions implements SyncActions {\n \n     @Override\n-    public void beforeAll(final SyncTask task) throws JobExecutionException {\n+    public void beforeAll(final SyncopeSyncResultHandler handler) throws JobExecutionException {\n     }\n \n     @Override\n-    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncDelta delta, final T subject)\n-            throws JobExecutionException {\n+    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncopeSyncResultHandler handler,\n+            final SyncDelta delta, final T subject) throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final SyncDelta delta, final T subject, final K subjectMod) throws JobExecutionException {\n+            final SyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AbstractAttributableTO> SyncDelta beforeDelete(final SyncDelta delta, final T subject)\n-            throws JobExecutionException {\n+    public <T extends AbstractAttributableTO> SyncDelta beforeDelete(\n+            final SyncopeSyncResultHandler handler, final SyncDelta delta, final T subject) throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AbstractAttributableTO> void after(final SyncDelta delta, final T subject,\n-            final SyncResult result) throws JobExecutionException {\n+    public <T extends AbstractAttributableTO> void after(final SyncopeSyncResultHandler handler,\n+            final SyncDelta delta, final T subject, final SyncResult result) throws JobExecutionException {\n     }\n \n     @Override\n-    public void afterAll(final SyncTask task, final List<SyncResult> results) throws JobExecutionException {\n+    public void afterAll(final SyncopeSyncResultHandler handler, final List<SyncResult> results)\n+            throws JobExecutionException {\n     }\n }"},{"sha":"85b7cb400ecdeeabc359970c705819827fc0d965","filename":"core/src/main/java/org/apache/syncope/core/sync/LDAPMembershipSyncActions.java","status":"added","additions":282,"deletions":0,"changes":282,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FLDAPMembershipSyncActions.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -0,0 +1,282 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.client.mod.AbstractAttributableMod;\n+import org.apache.syncope.client.mod.MembershipMod;\n+import org.apache.syncope.client.mod.UserMod;\n+import org.apache.syncope.client.to.AbstractAttributableTO;\n+import org.apache.syncope.client.to.RoleTO;\n+import org.apache.syncope.core.notification.NotificationManager;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.SyncResult;\n+import org.apache.syncope.core.persistence.beans.SyncTask;\n+import org.apache.syncope.core.persistence.beans.membership.Membership;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.apache.syncope.core.propagation.ConnectorFacadeProxy;\n+import org.apache.syncope.core.propagation.ConnectorFactory;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationManager;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n+import org.apache.syncope.types.AttributableType;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.filter.EqualsFilter;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Simple action for synchronizing LDAP groups memberships to Syncope role memberships, when the same resource is\n+ * configured for both users and roles.\n+ *\n+ * @see org.apache.syncope.core.propagation.LDAPMembershipPropagationActions\n+ */\n+public class LDAPMembershipSyncActions extends DefaultSyncActions {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(LDAPMembershipSyncActions.class);\n+\n+    @Autowired\n+    protected RoleDAO roleDAO;\n+\n+    @Autowired\n+    protected ConnectorFactory connInstanceLoader;\n+\n+    @Autowired\n+    protected UserWorkflowAdapter uwfAdapter;\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    private PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    private NotificationManager notificationManager;\n+\n+    protected Map<Long, Long> membersBeforeRoleUpdate = Collections.<Long, Long>emptyMap();\n+\n+    /**\n+     * Allows easy subclassing for the ConnId AD connector bundle.\n+     *\n+     * @return the name of the attribute used to keep track of group memberships\n+     */\n+    protected String getGroupMembershipAttrName() {\n+        return \"uniquemember\";\n+    }\n+\n+    /**\n+     * Keep track of members of the role being updated <b>before</b> actual update takes place. This is not needed on\n+     * <ul> <li>beforeCreate() - because the synchronizing role does not exist yet on Syncope</li> <li>beforeDelete() -\n+     * because role delete cascades as membership removal for all users involved</li> </ul>\n+     */\n+    @Transactional(readOnly = true)\n+    @Override\n+    public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n+            final SyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            throws JobExecutionException {\n+\n+        if (subject instanceof RoleTO) {\n+            // search for all users assigned to given role\n+            SyncopeRole role = roleDAO.find(subject.getId());\n+            if (role != null) {\n+                List<Membership> membs = roleDAO.findMemberships(role);\n+                // save memberships before role update takes place\n+                membersBeforeRoleUpdate = new HashMap<Long, Long>(membs.size());\n+                for (Membership memb : membs) {\n+                    membersBeforeRoleUpdate.put(memb.getSyncopeUser().getId(), memb.getId());\n+                }\n+            }\n+        }\n+\n+        return super.beforeUpdate(handler, delta, subject, subjectMod);\n+    }\n+\n+    /**\n+     * Build UserMod for adding membership to given user, for given role.\n+     *\n+     * @param userId user to be assigned membership to given role\n+     * @param roleTO role for adding membership\n+     * @return UserMod for user update\n+     */\n+    protected UserMod getUserMod(final Long userId, final RoleTO roleTO) {\n+        UserMod userMod = new UserMod();\n+        // no actual modification takes place when user has already the role assigned\n+        if (membersBeforeRoleUpdate.containsKey(userId)) {\n+            membersBeforeRoleUpdate.remove(userId);\n+        } else {\n+            userMod.setId(userId);\n+\n+            MembershipMod membershipMod = new MembershipMod();\n+            membershipMod.setRole(roleTO.getId());\n+            userMod.addMembershipToBeAdded(membershipMod);\n+        }\n+\n+        return userMod;\n+    }\n+\n+    /**\n+     * Read values of attribute returned by getGroupMembershipAttrName(); if not present in the given delta, perform an\n+     * additioanl read on the underlying connector.\n+     *\n+     * @param delta representing the synchronizing role\n+     * @param connector associated to the current resource\n+     * @return value of attribute returned by getGroupMembershipAttrName()\n+     * @see getGroupMembershipAttrName()\n+     */\n+    protected List<Object> getMembAttrValues(final SyncDelta delta, final ConnectorFacadeProxy connector) {\n+        List<Object> result = Collections.<Object>emptyList();\n+\n+        // first, try to read the configured attribute from delta, returned by the ongoing synchronization\n+        Attribute membAttr = delta.getObject().getAttributeByName(getGroupMembershipAttrName());\n+        // if not found, perform an additional read on the underlying connector for the same connector object\n+        if (membAttr == null) {\n+            final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n+            oob.setAttributesToGet(getGroupMembershipAttrName());\n+            membAttr = connector.getObjectAttribute(\n+                    ObjectClass.GROUP, delta.getUid(), oob.build(), getGroupMembershipAttrName());\n+        }\n+        if (membAttr != null && membAttr.getValue() != null) {\n+            result = membAttr.getValue();\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Perform actual modifications (i.e. membership add / remove) for the given role on the given resource.\n+     *\n+     * @param userMod modifications to perform on the user\n+     * @param resourceName resource to be propagated for changes\n+     */\n+    protected void userUpdate(final UserMod userMod, final String resourceName) {\n+        if (userMod.getId() == 0) {\n+            return;\n+        }\n+\n+        try {\n+            WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(userMod);\n+\n+            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,\n+                    userMod.getPassword(), userMod.getVirtualAttributesToBeRemoved(),\n+                    userMod.getVirtualAttributesToBeUpdated(),\n+                    Collections.singleton(resourceName));\n+\n+            taskExecutor.execute(tasks);\n+\n+            notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n+        } catch (PropagationException e) {\n+            LOG.error(\"Could not propagate {}\", userMod, e);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not perform update {}\", userMod, e);\n+        }\n+    }\n+\n+    /**\n+     * Synchronize Syncope memberships with the situation read on the external resource's group.\n+     *\n+     * @param handler syncope sync result handler\n+     * @param delta representing the synchronizing role\n+     * @param roleTO role after modification performed by the handler\n+     * @throws JobExecutionException if anything goes wrong\n+     */\n+    protected void synchronizeMemberships(final SyncopeSyncResultHandler handler, final SyncDelta delta,\n+            final RoleTO roleTO) throws JobExecutionException {\n+\n+        final SyncTask task = handler.getSyncTask();\n+        final ExternalResource resource = task.getResource();\n+\n+        ConnectorFacadeProxy connector;\n+        try {\n+            connector = connInstanceLoader.getConnector(resource);\n+        } catch (Exception e) {\n+            final String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n+                    resource, resource.getConnector());\n+\n+            throw new JobExecutionException(msg, e);\n+        }\n+\n+        for (Object membValue : getMembAttrValues(delta, connector)) {\n+\n+            final List<ConnectorObject> found = connector.search(ObjectClass.ACCOUNT,\n+                    new EqualsFilter(new Name(membValue.toString())),\n+                    connector.getOperationOptions(resource.getUmapping().getItems()));\n+\n+            if (found.isEmpty()) {\n+                LOG.debug(\"No account found on {} with __NAME__ {}\", resource, membValue.toString());\n+            } else {\n+                if (found.size() > 1) {\n+                    LOG.warn(\"More than one account found on {} with __NAME__ {} - taking first only\",\n+                            resource, membValue.toString());\n+                }\n+\n+                ConnectorObject externalAccount = found.iterator().next();\n+                final List<Long> userIds = handler.findExisting(externalAccount.getUid().getUidValue(),\n+                        externalAccount, AttributableUtil.getInstance(AttributableType.USER));\n+                if (userIds.isEmpty()) {\n+                    LOG.debug(\"No matching user found for {}, aborting\", externalAccount);\n+                } else {\n+                    if (userIds.size() > 1) {\n+                        LOG.warn(\"More than one user found {} - taking first only\", userIds);\n+                    }\n+\n+                    UserMod userMod = getUserMod(userIds.iterator().next(), roleTO);\n+                    userUpdate(userMod, resource.getName());\n+                }\n+            }\n+        }\n+\n+        // finally remove any residual membership that was present before role update but not any more\n+        for (Map.Entry<Long, Long> member : membersBeforeRoleUpdate.entrySet()) {\n+            UserMod userMod = new UserMod();\n+            userMod.setId(member.getKey());\n+            userMod.addMembershipToBeRemoved(member.getValue());\n+            userUpdate(userMod, resource.getName());\n+        }\n+    }\n+\n+    /**\n+     * Synchronize membership at role synchronization time (because SyncJob first synchronize users then roles).\n+     */\n+    @Override\n+    public <T extends AbstractAttributableTO> void after(final SyncopeSyncResultHandler handler, final SyncDelta delta,\n+            final T subject, final SyncResult result) throws JobExecutionException {\n+\n+        if (!(subject instanceof RoleTO) || handler.getSyncTask().getResource().getUmapping() == null) {\n+            super.after(handler, delta, subject, result);\n+        } else {\n+            synchronizeMemberships(handler, delta, (RoleTO) subject);\n+        }\n+    }\n+}"},{"sha":"08a6e727399d1271444a558188492be215e0b327","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncJob.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -355,7 +355,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         handler.setResults(results);\n         handler.setSyncTask(syncTask);\n \n-        actions.beforeAll(syncTask);\n+        actions.beforeAll(handler);\n         try {\n             if (syncTask.isFullReconciliation()) {\n                 if (uMapping != null) {\n@@ -390,7 +390,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         } catch (Exception e) {\n             throw new JobExecutionException(\"While syncing on connector\", e);\n         }\n-        actions.afterAll(syncTask, results);\n+        actions.afterAll(handler, results);\n \n         final String result = createReport(results, syncTask.getResource().getSyncTraceLevel(), dryRun);\n "},{"sha":"0c4f929564aeb105d9178dc3abbf7ba050b91a18","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncopeSyncResultHandler.java","status":"modified","additions":37,"deletions":16,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHandler.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -70,6 +70,7 @@\n import org.apache.syncope.types.SyncPolicySpec;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n@@ -177,22 +178,42 @@ public class SyncopeSyncResultHandler implements SyncResultsHandler {\n \n     private boolean dryRun;\n \n+    public SyncActions getActions() {\n+        return actions;\n+    }\n+\n     public void setActions(final SyncActions actions) {\n         this.actions = actions;\n     }\n \n+    public Collection<SyncResult> getResults() {\n+        return results;\n+    }\n+\n     public void setResults(final Collection<SyncResult> results) {\n         this.results = results;\n     }\n \n+    public SyncTask getSyncTask() {\n+        return syncTask;\n+    }\n+\n     public void setSyncTask(final SyncTask syncTask) {\n         this.syncTask = syncTask;\n     }\n \n+    public ConflictResolutionAction getResAct() {\n+        return resAct;\n+    }\n+\n     public void setResAct(final ConflictResolutionAction resAct) {\n         this.resAct = resAct;\n     }\n \n+    public boolean isDryRun() {\n+        return dryRun;\n+    }\n+\n     public void setDryRun(final boolean dryRun) {\n         this.dryRun = dryRun;\n     }\n@@ -283,7 +304,7 @@ private List<Long> findByAccountIdItem(final String uid, final AttributableUtil\n         return result;\n     }\n \n-    private List<Long> findByAttributableSearch(final SyncDelta delta, final SyncPolicySpec policySpec,\n+    private List<Long> findByAttributableSearch(final ConnectorObject connObj, final SyncPolicySpec policySpec,\n             final AttributableUtil attrUtil) {\n \n         final List<Long> result = new ArrayList<Long>();\n@@ -293,7 +314,7 @@ private List<Long> findByAttributableSearch(final SyncDelta delta, final SyncPol\n         final Map<String, Attribute> extValues = new HashMap<String, Attribute>();\n \n         for (AbstractMappingItem item : attrUtil.getMappingItems(syncTask.getResource())) {\n-            extValues.put(item.getIntAttrName(), delta.getObject().getAttributeByName(item.getExtAttrName()));\n+            extValues.put(item.getIntAttrName(), connObj.getAttributeByName(item.getExtAttrName()));\n         }\n \n         // search for user/role by attribute(s) specified in the policy\n@@ -352,23 +373,20 @@ private List<Long> findByAttributableSearch(final SyncDelta delta, final SyncPol\n     /**\n      * Find users / roles based on mapped uid value (or previous uid value, if updated).\n      *\n-     * @param delta sync delta\n+     * @param uid for finding by account id\n+     * @param connObj for finding by attribute value\n      * @param attrUtil attributable util\n      * @return list of matching users / roles\n      */\n-    protected List<Long> findExisting(final SyncDelta delta, final AttributableUtil attrUtil) {\n-        final String uid = delta.getPreviousUid() == null\n-                ? delta.getUid().getUidValue()\n-                : delta.getPreviousUid().getUidValue();\n-\n+    public List<Long> findExisting(final String uid, final ConnectorObject connObj, final AttributableUtil attrUtil) {\n         SyncPolicySpec policySpec = null;\n         if (syncTask.getResource().getSyncPolicy() != null) {\n             policySpec = (SyncPolicySpec) syncTask.getResource().getSyncPolicy().getSpecification();\n         }\n \n         return policySpec == null || attrUtil.getAltSearchSchemas(policySpec).isEmpty()\n                 ? findByAccountIdItem(uid, attrUtil)\n-                : findByAttributableSearch(delta, policySpec, attrUtil);\n+                : findByAttributableSearch(connObj, policySpec, attrUtil);\n     }\n \n     protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUtil,\n@@ -385,7 +403,7 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n \n         AbstractAttributableTO subjectTO = connObjectUtil.getAttributableTO(delta.getObject(), syncTask, attrUtil);\n \n-        delta = actions.beforeCreate(delta, subjectTO);\n+        delta = actions.beforeCreate(this, delta, subjectTO);\n \n         if (dryRun) {\n             result.setId(0L);\n@@ -458,7 +476,7 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n             }\n         }\n \n-        actions.after(delta, subjectTO, result);\n+        actions.after(this, delta, subjectTO, result);\n         return Collections.singletonList(result);\n     }\n \n@@ -486,7 +504,7 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n                 try {\n                     final AbstractAttributableMod mod = connObjectUtil.getAttributableMod(\n                             id, delta.getObject(), subjectTO, syncTask, attrUtil);\n-                    delta = actions.beforeUpdate(delta, subjectTO, mod);\n+                    delta = actions.beforeUpdate(this, delta, subjectTO, mod);\n \n                     result.setStatus(SyncResult.Status.SUCCESS);\n                     result.setId(mod.getId());\n@@ -532,7 +550,7 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n                     LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n                 }\n \n-                actions.after(delta, subjectTO, result);\n+                actions.after(this, delta, subjectTO, result);\n                 updResults.add(result);\n             } catch (NotFoundException e) {\n                 LOG.error(\"Could not find {} {}\", attrUtil.getType(), id, e);\n@@ -561,7 +579,7 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                 AbstractAttributableTO subjectTO = AttributableType.USER == attrUtil.getType()\n                         ? userDataBinder.getUserTO(id)\n                         : roleDataBinder.getRoleTO(id);\n-                delta = actions.beforeDelete(delta, subjectTO);\n+                delta = actions.beforeDelete(this, delta, subjectTO);\n \n                 final SyncResult result = new SyncResult();\n                 result.setId(id);\n@@ -604,7 +622,7 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                     }\n                 }\n \n-                actions.after(delta, subjectTO, result);\n+                actions.after(this, delta, subjectTO, result);\n                 delResults.add(result);\n             } catch (NotFoundException e) {\n                 LOG.error(\"Could not find {} {}\", attrUtil.getType(), id, e);\n@@ -631,7 +649,10 @@ protected final List<SyncResult> doHandle(final SyncDelta delta) throws JobExecu\n \n         AttributableUtil attrUtil = AttributableUtil.getInstance(delta.getObject().getObjectClass());\n \n-        final List<Long> subjects = findExisting(delta, attrUtil);\n+        final String uid = delta.getPreviousUid() == null\n+                ? delta.getUid().getUidValue()\n+                : delta.getPreviousUid().getUidValue();\n+        final List<Long> subjects = findExisting(uid, delta.getObject(), attrUtil);\n \n         if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n             if (subjects.isEmpty()) {"},{"sha":"fab34c5ee1c28d38c09b1cff984f84fa6173e0b9","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/SyncopeUserQueryImpl.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FSyncopeUserQueryImpl.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -48,7 +48,6 @@ public class SyncopeUserQueryImpl implements UserQuery {\n     private List<User> result;\n \n     public SyncopeUserQueryImpl(final UserDAO userDAO, final RoleDAO roleDAO, final EntitlementDAO entitlementDAO) {\n-\n         this.userDAO = userDAO;\n         this.roleDAO = roleDAO;\n         this.entitlementDAO = entitlementDAO;\n@@ -133,20 +132,22 @@ private User fromSyncopeUser(final SyncopeUser syncopeUser) {\n         return new UserEntity(syncopeUser.getUsername());\n     }\n \n-    private void execute(int page, int itemsPerPage) {\n+    private void execute(final int page, final int itemsPerPage) {\n         if (username != null) {\n             SyncopeUser user = userDAO.find(username);\n-            if (user != null) {\n+            if (user == null) {\n+                result = Collections.<User>emptyList();\n+            } else {\n                 if (memberOf == null || user.getRoleIds().contains(memberOf)) {\n                     result = Collections.singletonList(fromSyncopeUser(user));\n                 }\n-            } else {\n-                result = Collections.emptyList();\n             }\n         }\n         if (memberOf != null) {\n             SyncopeRole role = roleDAO.find(memberOf);\n-            if (role != null) {\n+            if (role == null) {\n+                result = Collections.<User>emptyList();\n+            } else {\n                 result = new ArrayList<User>();\n                 List<Membership> memberships = roleDAO.findMemberships(role);\n                 User user;\n@@ -156,8 +157,6 @@ private void execute(int page, int itemsPerPage) {\n                         result.add(user);\n                     }\n                 }\n-            } else {\n-                result = Collections.emptyList();\n             }\n         }\n         // THIS CAN BE *VERY* DANGEROUS\n@@ -210,7 +209,7 @@ public List<User> listPage(final int firstResult, final int maxResults) {\n     }\n \n     @Override\n-    public UserQuery potentialStarter(String string) {\n+    public UserQuery potentialStarter(final String string) {\n         throw new UnsupportedOperationException();\n     }\n }"},{"sha":"d9f1bb82fac715752d75da8c1ca11c83d9bba21a","filename":"core/src/test/java/org/apache/syncope/core/quartz/TestSyncActions.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTestSyncActions.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.client.to.AbstractAttributableTO;\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.core.sync.DefaultSyncActions;\n+import org.apache.syncope.core.sync.SyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n@@ -32,8 +33,8 @@ public class TestSyncActions extends DefaultSyncActions {\n     private int counter = 0;\n \n     @Override\n-    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncDelta delta, final T subject)\n-            throws JobExecutionException {\n+    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncopeSyncResultHandler handler,\n+            final SyncDelta delta, final T subject) throws JobExecutionException {\n \n         AttributeTO attrTO = null;\n         for (int i = 0; i < subject.getAttributes().size(); i++) {\n@@ -53,7 +54,8 @@ public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncDelta\n \n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final SyncDelta delta, final T subject, final K subjectMod) throws JobExecutionException {\n+            final SyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            throws JobExecutionException {\n \n         subjectMod.addAttributeToBeRemoved(\"fullname\");\n "},{"sha":"151d5180036ab876289fc621636ac496b7090905","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -362,10 +362,12 @@ public void reconcileRoles() {\n \n         TaskExecTO execution = execTask(SyncTaskTO.class, actual.getId(), 20, false);\n \n+        // 1. verify execution status\n         final String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n+        // 2. verify that synchronized role is found, with expected attributes\n         final AttributableCond rolenameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n         rolenameLeafCond.setSchema(\"name\");\n         rolenameLeafCond.setExpression(\"testLDAPGroup\");\n@@ -379,6 +381,14 @@ public void reconcileRoles() {\n         assertEquals(\"testLDAPGroup\", roleTO.getName());\n         assertEquals(8L, roleTO.getParent());\n         assertEquals(\"true\", roleTO.getAttributeMap().get(\"show\").getValues().get(0));\n+\n+        // 3. verify that LDAP group membership is propagated as Syncope role membership\n+        final MembershipCond membershipCond = new MembershipCond();\n+        membershipCond.setRoleId(roleTO.getId());\n+        final List<UserTO> members = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\",\n+                NodeCond.getLeafCond(membershipCond), UserTO[].class));\n+        assertNotNull(members);\n+        assertEquals(1, members.size());\n     }\n \n     @Test"},{"sha":"3186f4b6ee12c5064ab3fa83898f47d54c652fc1","filename":"core/src/test/resources/content.xml","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f4ae61db05b5e349c70fc812224c1757ba40c9e/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=4f4ae61db05b5e349c70fc812224c1757ba40c9e","patch":"@@ -542,7 +542,7 @@ under the License.\n   <UMapping id=\"11\" resource_name=\"resource-ldap\"\n             accountlink=\"&apos;uid=&apos; + username + &apos;,ou=people,o=isp&apos;\"/>\n   <UMappingItem id=\"311\" accountid=\"1\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"__NAME__\" intAttrName=\"Username\" intMappingType=\"Username\"\n+                extAttrName=\"__UID__\" intAttrName=\"Username\" intMappingType=\"Username\"\n                 mandatoryCondition=\"true\"/>\n   <UMappingItem id=\"312\" accountid=\"0\" password=\"1\" mapping_id=\"11\"\n                 extAttrName=\"__PASSWORD__\" intAttrName=\"Password\" intMappingType=\"Password\"\n@@ -551,7 +551,7 @@ under the License.\n                 extAttrName=\"sn\" intAttrName=\"surname\" intMappingType=\"UserSchema\"\n                 mandatoryCondition=\"true\"/>\n   <UMappingItem id=\"314\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"cn\" intAttrName=\"firstname\" intMappingType=\"UserSchema\"\n+                extAttrName=\"cn\" intAttrName=\"fullname\" intMappingType=\"UserSchema\"\n                 mandatoryCondition=\"true\"/>\n   <UMappingItem id=\"315\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n                 extAttrName=\"mail\" intAttrName=\"email\" intMappingType=\"UserSchema\"\n@@ -562,6 +562,9 @@ under the License.\n   <UMappingItem id=\"317\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n                 extAttrName=\"postalAddress\" intAttrName=\"postalAddress\" intMappingType=\"MembershipSchema\"\n                 mandatoryCondition=\"false\"/>\n+  <UMappingItem id=\"318\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n+                extAttrName=\"mail\" intAttrName=\"userId\" intMappingType=\"UserSchema\"\n+                mandatoryCondition=\"false\"/>\n   <RMapping id=\"1\" resource_name=\"resource-ldap\"\n             accountlink=\"&apos;cn=&apos; + name + &apos;,ou=groups,o=isp&apos;\"/>\n   <RMappingItem id=\"1\" accountid=\"1\" password=\"0\" mapping_id=\"1\"\n@@ -626,8 +629,9 @@ under the License.\n         fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n         jobClassName=\"org.apache.syncope.core.sync.SyncJob\"/>\n   <Task DTYPE=\"SyncTask\" id=\"11\" name=\"LDAP Sync Task\" resource_name=\"resource-ldap\"\n-          fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n-          jobClassName=\"org.apache.syncope.core.sync.SyncJob\"/>\n+        fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n+        actionsClassName=\"org.apache.syncope.core.sync.LDAPMembershipSyncActions\"  \n+        jobClassName=\"org.apache.syncope.core.sync.SyncJob\"/>\n         \n   <NotificationTask_recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>\n "}]}