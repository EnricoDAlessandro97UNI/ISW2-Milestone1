{"sha":"cf3799771d538832dc04612b1b31c2699cb1b894","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNmMzc5OTc3MWQ1Mzg4MzJkYzA0NjEyYjFiMzFjMjY5OWNiMWI4OTQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-03-03T17:00:37Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-03-03T17:04:39Z"},"message":"Reflow","tree":{"sha":"35d6bb736f29abc8c7f9efe25af7e0220b4827c3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/35d6bb736f29abc8c7f9efe25af7e0220b4827c3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cf3799771d538832dc04612b1b31c2699cb1b894","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cf3799771d538832dc04612b1b31c2699cb1b894","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cf3799771d538832dc04612b1b31c2699cb1b894","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cf3799771d538832dc04612b1b31c2699cb1b894/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a210af22cd6a2147514c939d5491867680b3f813","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a210af22cd6a2147514c939d5491867680b3f813","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a210af22cd6a2147514c939d5491867680b3f813"}],"stats":{"total":41,"additions":17,"deletions":24},"files":[{"sha":"bb2ad8a766a9c47f5c7d41b8488897d50183a4c4","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":17,"deletions":24,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf3799771d538832dc04612b1b31c2699cb1b894/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf3799771d538832dc04612b1b31c2699cb1b894/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=cf3799771d538832dc04612b1b31c2699cb1b894","patch":"@@ -24,13 +24,11 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n-import org.apache.commons.lang3.ArrayUtils;\n import javax.security.auth.login.AccountNotFoundException;\n-\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n@@ -42,18 +40,18 @@\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n@@ -237,16 +235,12 @@ protected boolean authenticate(final User user, final String password) {\n             String connObjectKey = null;\n             try {\n                 AnyType userType = anyTypeDAO.findUser();\n-                Optional<? extends Provision> provision = resource.getProvision(userType);\n-                if (provision.isEmpty()) {\n-                    throw new AccountNotFoundException(\"Unable to locate provision for user type \" + userType.getKey());\n-                }\n-                Optional<String> connObjectKeyValue = mappingManager.getConnObjectKeyValue(user, provision.get());\n-                if (connObjectKeyValue.isEmpty()) {\n-                    throw new AccountNotFoundException(\n-                            \"Unable to locate conn object key value for \" + userType.getKey());\n-                }\n-                connObjectKey = connObjectKeyValue.get();\n+                Provision provision = resource.getProvision(userType).\n+                        orElseThrow(() -> new AccountNotFoundException(\n+                        \"Unable to locate provision for user type \" + userType.getKey()));\n+                connObjectKey = mappingManager.getConnObjectKeyValue(user, provision).\n+                        orElseThrow(() -> new AccountNotFoundException(\n+                        \"Unable to locate conn object key value for \" + userType.getKey()));\n                 Uid uid = connFactory.getConnector(resource).authenticate(connObjectKey, password, null);\n                 if (uid != null) {\n                     authenticated = true;\n@@ -311,10 +305,9 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n                     realms = new HashSet<>();\n                     entForRealms.put(entitlement, realms);\n                 }\n-                realms.addAll(role.getRealms().stream().\n-                        map(Realm::getFullPath).collect(Collectors.toSet()));\n+                realms.addAll(role.getRealms().stream().map(Realm::getFullPath).collect(Collectors.toSet()));\n                 if (!entitlement.endsWith(\"_CREATE\") && !entitlement.endsWith(\"_DELETE\")) {\n-                    realms.addAll(role.getDynRealms().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                    realms.addAll(role.getDynRealms().stream().map(DynRealm::getKey).collect(Collectors.toList()));\n                 }\n             }));\n \n@@ -332,11 +325,11 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n             });\n \n             // Finally normalize realms for each given entitlement and generate authorities\n-            entForRealms.entrySet().stream().map(entry -> {\n-                SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entry.getKey());\n-                authority.addRealms(RealmUtils.normalize(entry.getValue()));\n-                return authority;\n-            }).forEachOrdered(authorities::add);\n+            entForRealms.forEach((key, value) -> {\n+                SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(key);\n+                authority.addRealms(RealmUtils.normalize(value));\n+                authorities.add(authority);\n+            });\n         }\n \n         return authorities;"}]}