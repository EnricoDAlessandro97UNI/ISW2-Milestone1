{"sha":"5a85f3ec47a8d639d0cc4c9f80b72813049a313b","node_id":"C_kwDOJfYA1toAKDVhODVmM2VjNDdhOGQ2MzlkMGNjNGM5ZjgwYjcyODEzMDQ5YTMxM2I","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-11-15T08:12:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-11-15T08:12:07Z"},"message":"[SYNCOPE-1692] Support password change with updateDelta, update ConnId LDAP connector","tree":{"sha":"3d985303d939c0e79aa5e0be80dcbefb63d7b1a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3d985303d939c0e79aa5e0be80dcbefb63d7b1a8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5a85f3ec47a8d639d0cc4c9f80b72813049a313b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5a85f3ec47a8d639d0cc4c9f80b72813049a313b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5a85f3ec47a8d639d0cc4c9f80b72813049a313b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f1cd7ccec1382a696d9e09b3454a227de9f55558","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1cd7ccec1382a696d9e09b3454a227de9f55558","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1cd7ccec1382a696d9e09b3454a227de9f55558"}],"stats":{"total":212,"additions":109,"deletions":103},"files":[{"sha":"60546ae1ae92dbf2677e244a6034def74fc4b168","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=5a85f3ec47a8d639d0cc4c9f80b72813049a313b","patch":"@@ -376,13 +376,12 @@ public Triple<Map<String, Set<String>>, List<String>, UserTO> self() {\n         }\n \n         try {\n-            return Triple.of(MAPPER.readValue(\n-                    response.getHeaderString(RESTHeaders.OWNED_ENTITLEMENTS),\n-                    new TypeReference<>() {\n-            }),\n+            return Triple.of(\n                     MAPPER.readValue(\n-                            response.getHeaderString(RESTHeaders.DELEGATIONS),\n-                            new TypeReference<>() {\n+                            response.getHeaderString(RESTHeaders.OWNED_ENTITLEMENTS), new TypeReference<>() {\n+                    }),\n+                    MAPPER.readValue(\n+                            response.getHeaderString(RESTHeaders.DELEGATIONS), new TypeReference<>() {\n                     }),\n                     response.readEntity(UserTO.class));\n         } catch (IOException e) {"},{"sha":"cf71c0bb40709e427a411649d452f17cc0169a9b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/RealmUtils.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java?ref=5a85f3ec47a8d639d0cc4c9f80b72813049a313b","patch":"@@ -88,13 +88,7 @@ public boolean test(final String realm) {\n         }\n     }\n \n-    private static final Predicate<String> DYN_REALMS_PREDICATE = new Predicate<String>() {\n-\n-        @Override\n-        public boolean test(final String realm) {\n-            return !realm.startsWith(SyncopeConstants.ROOT_REALM);\n-        }\n-    };\n+    private static final Predicate<String> DYN_REALMS_PREDICATE = r -> !r.startsWith(SyncopeConstants.ROOT_REALM);\n \n     public static Set<String> getEffective(final Set<String> allowedRealms, final String requestedRealm) {\n         Pair<Set<String>, Set<String>> normalized = normalize(allowedRealms);"},{"sha":"4b158faf6a898dfa1fdac7d3b875d96cbbcebc41","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationManager.java","status":"modified","additions":44,"deletions":29,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java?ref=5a85f3ec47a8d639d0cc4c9f80b72813049a313b","patch":"@@ -679,6 +679,17 @@ public Map<Pair<String, String>, Set<Attribute>> prepareAttrs(final Realm realm)\n         return attrs;\n     }\n \n+    /**\n+     * Checks whether the given attribute shall be treated as an ordinary attribute or not, for purpose of building\n+     * AttributeDelta instances.\n+     *\n+     * @param attr ConnId attibute\n+     * @return whether the condition is matched or not\n+     */\n+    protected boolean isOrdinaryForAttrForDelta(final Attribute attr) {\n+        return !attr.is(Name.NAME) && !OperationalAttributes.isOperationalAttribute(attr);\n+    }\n+\n     @Override\n     public List<PropagationTaskInfo> setAttributeDeltas(\n             final List<PropagationTaskInfo> tasks,\n@@ -703,18 +714,10 @@ public List<PropagationTaskInfo> setAttributeDeltas(\n             Set<Attribute> attrs = new HashSet<>(beforeAttrs.get(key));\n \n             // purge unwanted attributes, even though prepared\n-            attrs.removeIf(attr -> attr instanceof Name\n-                    || OperationalAttributes.ENABLE_NAME.equals(attr.getName())\n-                    || MANDATORY_MISSING_ATTR_NAME.equals(attr.getName())\n+            attrs.removeIf(\n+                    attr -> MANDATORY_MISSING_ATTR_NAME.equals(attr.getName())\n                     || MANDATORY_NULL_OR_EMPTY_ATTR_NAME.equals(attr.getName()));\n \n-            // see org.identityconnectors.framework.impl.api.local.operations.UpdateDeltaImpl\n-            if (attrs.stream().anyMatch(attr -> Name.NAME.equals(attr.getName())\n-                    || OperationalAttributes.getOperationalAttributeNames().contains(attr.getName()))) {\n-\n-                continue;\n-            }\n-\n             PropagationData propagationData = task.getPropagationData();\n \n             Set<AttributeDelta> attributeDeltas = new HashSet<>();\n@@ -725,44 +728,56 @@ public List<PropagationTaskInfo> setAttributeDeltas(\n                 Set<Object> valuesToRemove = new HashSet<>();\n \n                 Optional.ofNullable(AttributeUtil.find(next.getName(), attrs)).ifPresent(prev -> {\n-                    if (next.getValue() == null && prev.getValue() != null) {\n-                        valuesToRemove.addAll(prev.getValue());\n-                    } else if (next.getValue() != null && prev.getValue() == null) {\n+                    // password is unchanged from beforeAttrs but needs to be taken into account anyway\n+                    if (next.is(OperationalAttributes.PASSWORD_NAME)) {\n                         valuesToAdd.addAll(next.getValue());\n-                    } else if (next.getValue() != null && prev.getValue() != null) {\n-                        next.getValue().stream().\n-                                filter(value -> !prev.getValue().contains(value)).\n-                                forEach(valuesToAdd::add);\n-\n-                        prev.getValue().stream().\n-                                filter(value -> !next.getValue().contains(value)).\n-                                forEach(valuesToRemove::add);\n+                    } else {\n+                        if (next.getValue() == null && prev.getValue() != null) {\n+                            valuesToRemove.addAll(prev.getValue());\n+                        } else if (next.getValue() != null && prev.getValue() == null) {\n+                            valuesToAdd.addAll(next.getValue());\n+                        } else if (next.getValue() != null && prev.getValue() != null) {\n+                            next.getValue().stream().\n+                                    filter(value -> !prev.getValue().contains(value)).\n+                                    forEach(valuesToAdd::add);\n+\n+                            prev.getValue().stream().\n+                                    filter(value -> !next.getValue().contains(value)).\n+                                    forEach(valuesToRemove::add);\n+                        }\n                     }\n                 });\n \n-                if (!valuesToAdd.isEmpty() || !valuesToRemove.isEmpty()) {\n-                    attributeDeltas.add(AttributeDeltaBuilder.build(next.getName(), valuesToAdd, valuesToRemove));\n+                // Following org.identityconnectors.framework.impl.api.local.operations.UpdateDeltaImpl#updateDelta\n+                // we create AttributeDelta instances with (valuesToAdd, valuesToRemove) or (valuesToReplace)\n+                // depending on the attribute name\n+                if (isOrdinaryForAttrForDelta(next)) {\n+                    if (!valuesToAdd.isEmpty() || !valuesToRemove.isEmpty()) {\n+                        attributeDeltas.add(AttributeDeltaBuilder.build(next.getName(), valuesToAdd, valuesToRemove));\n+                    }\n+                } else {\n+                    if (!valuesToAdd.isEmpty()) {\n+                        attributeDeltas.add(AttributeDeltaBuilder.build(next.getName(), valuesToAdd));\n+                    }\n                 }\n             });\n \n             // build delta for new or removed attributes\n             Set<String> nextNames = propagationData.getAttributes().stream().\n-                    filter(attr -> !(attr instanceof Name) && !OperationalAttributes.isOperationalAttribute(attr)).\n+                    filter(this::isOrdinaryForAttrForDelta).\n                     map(Attribute::getName).\n                     collect(Collectors.toSet());\n             Set<String> prevNames = attrs.stream().\n-                    filter(attr -> !(attr instanceof Name) && !OperationalAttributes.isOperationalAttribute(attr)).\n+                    filter(this::isOrdinaryForAttrForDelta).\n                     map(Attribute::getName).\n                     collect(Collectors.toSet());\n \n             nextNames.stream().filter(name -> !prevNames.contains(name)).\n-                    forEach(toAdd -> Optional.ofNullable(\n-                    AttributeUtil.find(toAdd, propagationData.getAttributes())).\n+                    forEach(toAdd -> Optional.ofNullable(AttributeUtil.find(toAdd, propagationData.getAttributes())).\n                     ifPresent(attr -> attributeDeltas.add(\n                     AttributeDeltaBuilder.build(attr.getName(), attr.getValue(), Set.of()))));\n             prevNames.stream().filter(name -> !nextNames.contains(name)).\n-                    forEach(toRemove -> Optional.ofNullable(\n-                    AttributeUtil.find(toRemove, attrs)).\n+                    forEach(toRemove -> Optional.ofNullable(AttributeUtil.find(toRemove, attrs)).\n                     ifPresent(attr -> attributeDeltas.add(\n                     AttributeDeltaBuilder.build(attr.getName(), Set.of(), attr.getValue()))));\n "},{"sha":"95a726fb9b3339c18c5b5f90f7f0d405e18d744d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=5a85f3ec47a8d639d0cc4c9f80b72813049a313b","patch":"@@ -74,47 +74,46 @@ public List<ProvisioningReport> pull(\n \n         LOG.debug(\"Executing pull on {}\", resource);\n \n+        taskType = TaskType.PULL;\n         try {\n-            PullTask pullTask = entityFactory.newEntity(PullTask.class);\n-            pullTask.setResource(resource);\n-            pullTask.setMatchingRule(pullTaskTO.getMatchingRule() == null\n+            task = entityFactory.newEntity(PullTask.class);\n+            task.setResource(resource);\n+            task.setMatchingRule(pullTaskTO.getMatchingRule() == null\n                     ? MatchingRule.UPDATE : pullTaskTO.getMatchingRule());\n-            pullTask.setUnmatchingRule(pullTaskTO.getUnmatchingRule() == null\n+            task.setUnmatchingRule(pullTaskTO.getUnmatchingRule() == null\n                     ? UnmatchingRule.PROVISION : pullTaskTO.getUnmatchingRule());\n-            pullTask.setPullMode(PullMode.FILTERED_RECONCILIATION);\n-            pullTask.setPerformCreate(pullTaskTO.isPerformCreate());\n-            pullTask.setPerformUpdate(pullTaskTO.isPerformUpdate());\n-            pullTask.setPerformDelete(pullTaskTO.isPerformDelete());\n-            pullTask.setSyncStatus(pullTaskTO.isSyncStatus());\n-            pullTask.setDestinationRealm(realmDAO.findByFullPath(pullTaskTO.getDestinationRealm()));\n-            pullTask.setRemediation(pullTaskTO.isRemediation());\n+            task.setPullMode(PullMode.FILTERED_RECONCILIATION);\n+            task.setPerformCreate(pullTaskTO.isPerformCreate());\n+            task.setPerformUpdate(pullTaskTO.isPerformUpdate());\n+            task.setPerformDelete(pullTaskTO.isPerformDelete());\n+            task.setSyncStatus(pullTaskTO.isSyncStatus());\n+            task.setDestinationRealm(realmDAO.findByFullPath(pullTaskTO.getDestinationRealm()));\n+            task.setRemediation(pullTaskTO.isRemediation());\n             // validate JEXL expressions from templates and proceed if fine\n             TemplateUtils.check(pullTaskTO.getTemplates(), ClientExceptionType.InvalidPullTask);\n             pullTaskTO.getTemplates().forEach((type, template) -> {\n                 AnyType anyType = anyTypeDAO.find(type);\n                 if (anyType == null) {\n                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n                 } else {\n-                    AnyTemplatePullTask anyTemplate = pullTask.getTemplate(anyType.getKey()).orElse(null);\n+                    AnyTemplatePullTask anyTemplate = task.getTemplate(anyType.getKey()).orElse(null);\n                     if (anyTemplate == null) {\n                         anyTemplate = entityFactory.newEntity(AnyTemplatePullTask.class);\n                         anyTemplate.setAnyType(anyType);\n-                        anyTemplate.setPullTask(pullTask);\n+                        anyTemplate.setPullTask(task);\n \n-                        pullTask.add(anyTemplate);\n+                        task.add(anyTemplate);\n                     }\n                     anyTemplate.set(template);\n                 }\n             });\n \n-            profile = new ProvisioningProfile<>(connector, pullTask);\n+            profile = new ProvisioningProfile<>(connector, task);\n             profile.setDryRun(false);\n             profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n             profile.getActions().addAll(getPullActions(pullTaskTO.getActions().stream().\n                     map(implementationDAO::find).filter(Objects::nonNull).collect(Collectors.toList())));\n             profile.setExecutor(executor);\n-            this.task = profile.getTask();\n-            this.taskType = TaskType.PULL;\n \n             for (PullActions action : profile.getActions()) {\n                 action.beforeAll(profile);\n@@ -146,7 +145,7 @@ public List<ProvisioningReport> pull(\n \n             Stream<Item> mapItems = Stream.concat(\n                     MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n-                    virSchemaDAO.find(pullTask.getResource().getKey(), anyType.getKey()).stream().\n+                    virSchemaDAO.find(task.getResource().getKey(), anyType.getKey()).stream().\n                             map(VirSchema::asLinkingMappingItem));\n \n             connector.filteredReconciliation("},{"sha":"e25434f88e96f1cd55cdea3af000a7725a7fe186","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=5a85f3ec47a8d639d0cc4c9f80b72813049a313b","patch":"@@ -56,26 +56,25 @@ protected void before(\n \n         LOG.debug(\"Executing push on {}\", resource);\n \n-        PushTask pushTask = entityFactory.newEntity(PushTask.class);\n-        pushTask.setResource(resource);\n-        pushTask.setMatchingRule(pushTaskTO.getMatchingRule() == null\n+        taskType = TaskType.PUSH;\n+\n+        task = entityFactory.newEntity(PushTask.class);\n+        task.setResource(resource);\n+        task.setMatchingRule(pushTaskTO.getMatchingRule() == null\n                 ? MatchingRule.LINK : pushTaskTO.getMatchingRule());\n-        pushTask.setUnmatchingRule(pushTaskTO.getUnmatchingRule() == null\n+        task.setUnmatchingRule(pushTaskTO.getUnmatchingRule() == null\n                 ? UnmatchingRule.ASSIGN : pushTaskTO.getUnmatchingRule());\n-        pushTask.setPerformCreate(pushTaskTO.isPerformCreate());\n-        pushTask.setPerformUpdate(pushTaskTO.isPerformUpdate());\n-        pushTask.setPerformDelete(pushTaskTO.isPerformDelete());\n-        pushTask.setSyncStatus(pushTaskTO.isSyncStatus());\n+        task.setPerformCreate(pushTaskTO.isPerformCreate());\n+        task.setPerformUpdate(pushTaskTO.isPerformUpdate());\n+        task.setPerformDelete(pushTaskTO.isPerformDelete());\n+        task.setSyncStatus(pushTaskTO.isSyncStatus());\n \n-        profile = new ProvisioningProfile<>(connector, pushTask);\n+        profile = new ProvisioningProfile<>(connector, task);\n         profile.setExecutor(executor);\n         profile.getActions().addAll(getPushActions(pushTaskTO.getActions().stream().\n                 map(implementationDAO::find).filter(Objects::nonNull).collect(Collectors.toList())));\n         profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n \n-        this.task = profile.getTask();\n-        this.taskType = TaskType.PUSH;\n-\n         for (PushActions action : profile.getActions()) {\n             action.beforeAll(profile);\n         }"},{"sha":"ec9e23d2d65af889b794243ec4e3a3aa55b56660","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPullJobDelegate.java","status":"modified","additions":14,"deletions":16,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java?ref=5a85f3ec47a8d639d0cc4c9f80b72813049a313b","patch":"@@ -165,24 +165,25 @@ public List<ProvisioningReport> pull(\n \n         LOG.debug(\"Executing stream pull\");\n \n+        taskType = TaskType.PULL;\n         try {\n             ExternalResource resource =\n                     externalResource(anyType, keyColumn, columns, conflictResolutionAction, pullCorrelationRule);\n             Provision provision = resource.getProvisions().get(0);\n \n-            PullTask pullTask = entityFactory.newEntity(PullTask.class);\n-            pullTask.setResource(resource);\n-            pullTask.setMatchingRule(pullTaskTO.getMatchingRule());\n-            pullTask.setUnmatchingRule(pullTaskTO.getUnmatchingRule());\n-            pullTask.setPullMode(PullMode.FULL_RECONCILIATION);\n-            pullTask.setPerformCreate(true);\n-            pullTask.setPerformUpdate(true);\n-            pullTask.setPerformDelete(false);\n-            pullTask.setSyncStatus(false);\n-            pullTask.setDestinationRealm(realmDAO.findByFullPath(pullTaskTO.getDestinationRealm()));\n-            pullTask.setRemediation(pullTaskTO.isRemediation());\n-\n-            profile = new ProvisioningProfile<>(connector, pullTask);\n+            task = entityFactory.newEntity(PullTask.class);\n+            task.setResource(resource);\n+            task.setMatchingRule(pullTaskTO.getMatchingRule());\n+            task.setUnmatchingRule(pullTaskTO.getUnmatchingRule());\n+            task.setPullMode(PullMode.FULL_RECONCILIATION);\n+            task.setPerformCreate(true);\n+            task.setPerformUpdate(true);\n+            task.setPerformDelete(false);\n+            task.setSyncStatus(false);\n+            task.setDestinationRealm(realmDAO.findByFullPath(pullTaskTO.getDestinationRealm()));\n+            task.setRemediation(pullTaskTO.isRemediation());\n+\n+            profile = new ProvisioningProfile<>(connector, task);\n             profile.setDryRun(false);\n             profile.setConflictResolutionAction(conflictResolutionAction);\n             profile.getActions().addAll(getPullActions(pullTaskTO.getActions().stream().\n@@ -219,9 +220,6 @@ public List<ProvisioningReport> pull(\n                     virSchemaDAO.find(resource.getKey(), anyType.getKey()).stream().\n                             map(VirSchema::asLinkingMappingItem));\n \n-            this.task = profile.getTask();\n-            this.taskType = TaskType.PULL;\n-            \n             connector.fullReconciliation(\n                     new ObjectClass(provision.getObjectClass()),\n                     handler,"},{"sha":"0ba6965a598c331c18478ac5fc09103a139c9ddc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPushJobDelegate.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java?ref=5a85f3ec47a8d639d0cc4c9f80b72813049a313b","patch":"@@ -129,27 +129,25 @@ public List<ProvisioningReport> push(\n \n         LOG.debug(\"Executing stream push as {}\", executor);\n \n+        taskType = TaskType.PUSH;\n         try {\n             ExternalResource resource = externalResource(anyType, columns, propagationActions);\n \n-            PushTask pushTask = entityFactory.newEntity(PushTask.class);\n-            pushTask.setResource(resource);\n-            pushTask.setMatchingRule(pushTaskTO.getMatchingRule());\n-            pushTask.setUnmatchingRule(pushTaskTO.getUnmatchingRule());\n-            pushTask.setPerformCreate(true);\n-            pushTask.setPerformUpdate(true);\n-            pushTask.setPerformDelete(true);\n-            pushTask.setSyncStatus(false);\n+            task = entityFactory.newEntity(PushTask.class);\n+            task.setResource(resource);\n+            task.setMatchingRule(pushTaskTO.getMatchingRule());\n+            task.setUnmatchingRule(pushTaskTO.getUnmatchingRule());\n+            task.setPerformCreate(true);\n+            task.setPerformUpdate(true);\n+            task.setPerformDelete(true);\n+            task.setSyncStatus(false);\n \n-            profile = new ProvisioningProfile<>(connector, pushTask);\n+            profile = new ProvisioningProfile<>(connector, task);\n             profile.setExecutor(executor);\n             profile.getActions().addAll(getPushActions(pushTaskTO.getActions().stream().\n                     map(implementationDAO::find).filter(Objects::nonNull).collect(Collectors.toList())));\n             profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n \n-            this.task = profile.getTask();\n-            this.taskType = TaskType.PUSH;\n-\n             for (PushActions action : profile.getActions()) {\n                 action.beforeAll(profile);\n             }"},{"sha":"bddc317e1176d6d586a891c08e78c92d6ea8e538","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/job/JobStatusUpdaterTest.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdaterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdaterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdaterTest.java?ref=5a85f3ec47a8d639d0cc4c9f80b72813049a313b","patch":"@@ -32,6 +32,7 @@\n \n @Transactional(\"Master\")\n public class JobStatusUpdaterTest extends AbstractTest {\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -40,10 +41,13 @@ public class JobStatusUpdaterTest extends AbstractTest {\n \n     @Test\n     public void verifyUpdate() {\n+        String refDesc = \"JobRefDesc-\" + SecureRandomUtils.generateRandomNumber();\n+\n         JobStatusUpdater jobStatusUpdater = new JobStatusUpdater(jobStatusDAO, entityFactory);\n-        final String refDesc = \"JobRefDesc-\" + SecureRandomUtils.generateRandomNumber();\n+\n         jobStatusUpdater.update(new JobStatusEvent(this, refDesc, \"Started\"));\n         assertNotNull(jobStatusDAO.find(refDesc));\n+\n         jobStatusUpdater.update(new JobStatusEvent(this, refDesc, null));\n         assertNull(jobStatusDAO.find(refDesc));\n     }"},{"sha":"41b2b199e1bc2e95cd0d95cb8a5f79e89478c604","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5a85f3ec47a8d639d0cc4c9f80b72813049a313b/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=5a85f3ec47a8d639d0cc4c9f80b72813049a313b","patch":"@@ -402,7 +402,7 @@ under the License.\n     <connid.rest.version>1.0.7</connid.rest.version>\n     <connid.database.version>2.2.9</connid.database.version>\n     <connid.csvdir.version>0.8.9</connid.csvdir.version>\n-    <connid.ldap.version>1.5.6</connid.ldap.version>\n+    <connid.ldap.version>1.5.7</connid.ldap.version>\n     <connid.ad.version>1.3.8</connid.ad.version>\n     <connid.googleapps.version>1.4.3</connid.googleapps.version>\n     <connid.azure.version>2.0.0</connid.azure.version>\n@@ -503,7 +503,7 @@ under the License.\n     <cargo.log>${log.directory}/cargo.log</cargo.log>\n     <cargo.output>${log.directory}/cargo-output.log</cargo.output>\n \n-    <tomcat.version>9.0.68</tomcat.version>\n+    <tomcat.version>9.0.69</tomcat.version>\n     <wildfly.version>26.1.2.Final</wildfly.version>\n     <payara.version>5.2022.3</payara.version>\n     <javax.faces.version>2.3.14</javax.faces.version>"}]}