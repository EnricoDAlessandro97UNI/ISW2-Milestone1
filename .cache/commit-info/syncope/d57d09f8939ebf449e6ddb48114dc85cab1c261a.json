{"sha":"d57d09f8939ebf449e6ddb48114dc85cab1c261a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ1N2QwOWY4OTM5ZWJmNDQ5ZTZkZGI0ODExNGRjODVjYWIxYzI2MWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-06-03T11:08:49Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-06-03T11:08:49Z"},"message":"[SYNCOPE-1562] Fix test execution with YAML and XML","tree":{"sha":"7f7d9bd2a9554ae29f58f4cb659437e133c24aa2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7f7d9bd2a9554ae29f58f4cb659437e133c24aa2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d57d09f8939ebf449e6ddb48114dc85cab1c261a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d57d09f8939ebf449e6ddb48114dc85cab1c261a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d57d09f8939ebf449e6ddb48114dc85cab1c261a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d57d09f8939ebf449e6ddb48114dc85cab1c261a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7149765941242ee9f58a2067ce76f2ea9e992355","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7149765941242ee9f58a2067ce76f2ea9e992355","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7149765941242ee9f58a2067ce76f2ea9e992355"}],"stats":{"total":194,"additions":93,"deletions":101},"files":[{"sha":"a2233b226424f15449073fd59a1d7ce81e19ca9b","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuthProfileService.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57d09f8939ebf449e6ddb48114dc85cab1c261a/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57d09f8939ebf449e6ddb48114dc85cab1c261a/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java?ref=d57d09f8939ebf449e6ddb48114dc85cab1c261a","patch":"@@ -18,12 +18,6 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.to.AuthProfileTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -33,45 +27,48 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-\n import java.util.List;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for SAML 2.0 SP metadata.\n  */\n @Tag(name = \"Auth Profiles\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"authProfiles\")\n public interface AuthProfileService extends JAXRSService {\n \n     @GET\n-    @Produces({MediaType.APPLICATION_JSON})\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<AuthProfileTO> list();\n \n     @GET\n     @Path(\"owners/{owner}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     AuthProfileTO findByOwner(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n     @Path(\"{key}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     AuthProfileTO findByKey(@NotNull @PathParam(\"key\") String key);\n \n     @DELETE\n     @Path(\"{key}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response deleteByKey(@NotNull @PathParam(\"key\") String key);\n \n     @DELETE\n     @Path(\"owners/{owner}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response deleteByOwner(@NotNull @PathParam(\"owner\") String owner);\n-\n }"},{"sha":"88e8fbab570eca9368d4b7b877f9c02915710dbe","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthTokenService.java","status":"modified","additions":40,"deletions":42,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57d09f8939ebf449e6ddb48114dc85cab1c261a/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57d09f8939ebf449e6ddb48114dc85cab1c261a/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java?ref=d57d09f8939ebf449e6ddb48114dc85cab1c261a","patch":"@@ -16,20 +16,8 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.common.rest.api.service.wa;\n \n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -41,87 +29,97 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-\n import java.util.Date;\n import java.util.List;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n @Tag(name = \"Google MFA Tokens\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/gauth\")\n public interface GoogleMfaAuthTokenService extends JAXRSService {\n \n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens\")\n     Response deleteTokensByDate(@NotNull @QueryParam(\"expirationDate\") Date expirationDate);\n \n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens/${owner}/${token}\")\n     Response deleteToken(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"token\") Integer token);\n \n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens/owners/${owner}\")\n     Response deleteTokensFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens/${token}\")\n     Response deleteToken(@NotNull @PathParam(\"token\") Integer token);\n \n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens\")\n     Response deleteTokens();\n \n     @ApiResponses({\n         @ApiResponse(responseCode = \"201\",\n-            description = \"GoogleMfaAuthToken successfully created\", headers = {\n-            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-            @Schema(type = \"string\"),\n-                description = \"UUID generated for the entity created\")})})\n+                description = \"GoogleMfaAuthToken successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\") }) })\n     @POST\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens\")\n     Response save(@NotNull GoogleMfaAuthToken token);\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens/${owner}/${token}\")\n-    GoogleMfaAuthToken findTokenFor(@NotNull @PathParam(\"owner\") String owner,\n-                                    @NotNull @PathParam(\"token\") Integer token);\n+    GoogleMfaAuthToken findTokenFor(\n+            @NotNull @PathParam(\"owner\") String owner,\n+            @NotNull @PathParam(\"token\") Integer token);\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens/owners/${owner}\")\n     List<GoogleMfaAuthToken> findTokensFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n     @Path(\"tokens/{key}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     GoogleMfaAuthToken findTokenFor(@NotNull @PathParam(\"key\") String key);\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens/${owner}/count\")\n     long countTokensForOwner(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens/count\")\n     long countTokens();\n }"},{"sha":"89653b751558a69c3e16b2c7cb20a4b949a65b25","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BatchITCase.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57d09f8939ebf449e6ddb48114dc85cab1c261a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57d09f8939ebf449e6ddb48114dc85cab1c261a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java?ref=d57d09f8939ebf449e6ddb48114dc85cab1c261a","patch":"@@ -235,18 +235,21 @@ public void webClientAsync() throws IOException, JAXBException {\n         URI monitor = response.getLocation();\n         assertNotNull(monitor);\n \n-        for (int i = 0; i < 10 && response.getStatus() == Response.Status.ACCEPTED.getStatusCode(); i++) {\n-            // wait a bit...\n+        WebClient client = WebClient.create(monitor).\n+                header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT()).\n+                type(RESTHeaders.multipartMixedWith(boundary.substring(2)));\n+\n+        int i = 0;\n+        do {\n             try {\n-                Thread.sleep(2000);\n+                Thread.sleep(1000);\n             } catch (InterruptedException e) {\n             }\n \n-            // check results\n-            response = WebClient.create(monitor).\n-                    header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT()).\n-                    type(RESTHeaders.multipartMixedWith(boundary.substring(2))).get();\n-        }\n+            response = client.get();\n+\n+            i++;\n+        } while (response.getStatus() == Response.Status.ACCEPTED.getStatusCode() && i < MAX_WAIT_SECONDS);\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertTrue(response.getMediaType().toString().\n                 startsWith(RESTHeaders.multipartMixedWith(boundary.substring(2))));"},{"sha":"940acafa233fff4136b52e31766da0dea693f90a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GoogleMfaAuthTokenITCase.java","status":"modified","additions":27,"deletions":33,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57d09f8939ebf449e6ddb48114dc85cab1c261a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57d09f8939ebf449e6ddb48114dc85cab1c261a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java?ref=d57d09f8939ebf449e6ddb48114dc85cab1c261a","patch":"@@ -16,46 +16,43 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.fit.core;\n \n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AuthProfileTO;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.function.Executable;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n import javax.ws.rs.core.Response;\n-\n import java.security.SecureRandom;\n import java.time.LocalDateTime;\n import java.time.ZoneId;\n import java.util.Date;\n import java.util.List;\n import java.util.UUID;\n-\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class GoogleMfaAuthTokenITCase extends AbstractITCase {\n+\n     private static final SecureRandom SECURE_RANDOM = new SecureRandom();\n \n     private static GoogleMfaAuthToken createGoogleMfaAuthToken() {\n         Integer token = SECURE_RANDOM.ints(100_000, 999_999)\n-            .findFirst()\n-            .getAsInt();\n+                .findFirst()\n+                .getAsInt();\n         return new GoogleMfaAuthToken.Builder()\n-            .owner(UUID.randomUUID().toString())\n-            .token(token)\n-            .issueDate(new Date())\n-            .build();\n+                .owner(UUID.randomUUID().toString())\n+                .token(token)\n+                .issueDate(new Date())\n+                .build();\n     }\n \n     @BeforeEach\n@@ -66,15 +63,12 @@ public void setup() {\n     @Test\n     public void create() {\n         GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n-        assertDoesNotThrow(new Executable() {\n-            @Override\n-            public void execute() throws Throwable {\n-                Response response = googleMfaAuthTokenService.save(token);\n-                if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-                    Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-                    if (ex != null) {\n-                        throw ex;\n-                    }\n+        assertDoesNotThrow(() -> {\n+            Response response = googleMfaAuthTokenService.save(token);\n+            if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+                if (ex != null) {\n+                    throw ex;\n                 }\n             }\n         });\n@@ -92,7 +86,7 @@ public void count() {\n     public void verifyProfile() {\n         GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n         googleMfaAuthTokenService.save(token);\n-        final List<AuthProfileTO> results = authProfileService.list();\n+        List<AuthProfileTO> results = authProfileService.list();\n         assertFalse(results.isEmpty());\n         AuthProfileTO profileTO = results.get(0);\n         assertNotNull(authProfileService.findByKey(profileTO.getKey()));"}]}