{"sha":"3f0f25623ad682e19dcf86d0f5962e3f884b79e6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNmMGYyNTYyM2FkNjgyZTE5ZGNmODZkMGY1OTYyZTNmODg0Yjc5ZTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-17T12:00:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-17T12:00:06Z"},"message":"[SYNCOPE-744][SYNCOPE-750] Moving load information reporting to a Quartz Job, scheduled every minute to ensure consistency under load","tree":{"sha":"d33202ec6c2665db49a81b181404f6665701a353","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d33202ec6c2665db49a81b181404f6665701a353"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3f0f25623ad682e19dcf86d0f5962e3f884b79e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3f0f25623ad682e19dcf86d0f5962e3f884b79e6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3f0f25623ad682e19dcf86d0f5962e3f884b79e6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"79834f92aa7a00b703568232f5593b44c2f714b5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/79834f92aa7a00b703568232f5593b44c2f714b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/79834f92aa7a00b703568232f5593b44c2f714b5"}],"stats":{"total":203,"additions":154,"deletions":49},"files":[{"sha":"efc77a6eafea02d81a821b19ff7275a202246be8","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=3f0f25623ad682e19dcf86d0f5962e3f884b79e6","patch":"@@ -89,8 +89,7 @@ public class Topology extends BasePage {\n \n         @Override\n         protected List<ResourceTO> load() {\n-            final List<ResourceTO> result = resourceRestClient.getAll();\n-            return result;\n+            return resourceRestClient.getAll();\n         }\n     };\n \n@@ -170,7 +169,7 @@ public void onClose(final AjaxRequestTarget target) {\n             }\n         });\n \n-        body.add(new WebSocketBehavior());\n+        body.add(new TopologyWebSocketBehavior());\n \n         togglePanel = new TopologyTogglePanel(\"toggle\", getPageReference());\n         body.add(togglePanel);"},{"sha":"3f3798425658d0f4d606d12492d2a14bd71ba809","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java","status":"renamed","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java?ref=3f0f25623ad682e19dcf86d0f5962e3f884b79e6","patch":"@@ -34,14 +34,15 @@\n import org.apache.wicket.Application;\n import org.apache.wicket.Session;\n import org.apache.wicket.ThreadContext;\n+import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n import org.apache.wicket.protocol.ws.api.WebSocketRequestHandler;\n import org.apache.wicket.protocol.ws.api.message.TextMessage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class WebSocketBehavior extends org.apache.wicket.protocol.ws.api.WebSocketBehavior {\n+public class TopologyWebSocketBehavior extends WebSocketBehavior {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(WebSocketBehavior.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(TopologyWebSocketBehavior.class);\n \n     private static final long serialVersionUID = -1653665542635275551L;\n \n@@ -149,7 +150,7 @@ public void run() {\n                     final ConnInstanceTO connector = connectorRestClient.read(key);\n                     res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n                             connectorRestClient.check(connector)\n-                                    ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n+                            ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n                 } catch (Exception e) {\n                     LOG.warn(\"Error checking connection for {}\", key, e);\n                     res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.FAILURE, key);\n@@ -190,7 +191,7 @@ public void run() {\n                     final ResourceTO resource = resourceRestClient.read(key);\n                     res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n                             connectorRestClient.check(resource)\n-                                    ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n+                            ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n                 } catch (Exception e) {\n                     LOG.warn(\"Error checking connection for {}\", key, e);\n                     res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.FAILURE, key);","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/WebSocketBehavior.java"},{"sha":"202461dfcd853f2d5a4a8f90e657413b16bc6078","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/LoadWidget.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java?ref=3f0f25623ad682e19dcf86d0f5962e3f884b79e6","patch":"@@ -25,6 +25,7 @@\n import java.util.List;\n import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.model.Model;\n \n public class LoadWidget extends AbstractWidget {\n@@ -34,12 +35,16 @@ public class LoadWidget extends AbstractWidget {\n     public LoadWidget(final String id, final SystemInfo systeminfo) {\n         super(id);\n \n+        add(new Label(\"hostname\", systeminfo.getHostname()));\n+        add(new Label(\"os\", systeminfo.getOs()));\n+        add(new Label(\"jvm\", systeminfo.getJvm()));\n+\n         List<String> labels = new ArrayList<>();\n \n         List<Double> cpuValues = new ArrayList<>();\n         List<Long> memValues = new ArrayList<>();\n \n-        for (SystemInfo.PlatformLoad instant : systeminfo.getLoad()) {\n+        for (SystemInfo.LoadInstant instant : systeminfo.getLoad()) {\n             labels.add(DateFormatUtils.ISO_DATETIME_FORMAT.format(systeminfo.getStartTime() + instant.getUptime()));\n \n             cpuValues.add(instant.getSystemLoadAverage() * 1000);"},{"sha":"82aff57b86e99afe249b10a9d53841e2529fd15e","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/LoadWidget.html","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.html?ref=3f0f25623ad682e19dcf86d0f5962e3f884b79e6","patch":"@@ -23,6 +23,16 @@\n         <div class=\"box-header with-border\">\n           <h3 class=\"box-title\"><wicket:message key=\"systemLoad\"/></h3>\n           <div class=\"box-tools pull-right\">\n+            <div class=\"btn-group\">\n+              <button class=\"btn btn-box-tool dropdown-toggle\" data-toggle=\"dropdown\">\n+                <i class=\"fa fa-info\"></i>\n+              </button>\n+              <ul class=\"dropdown-menu\" role=\"menu\">\n+                <li><a href=\"#\"><span wicket:id=\"hostname\"/></a></li>\n+                <li><a href=\"#\"><span wicket:id=\"os\"/></a></li>\n+                <li><a href=\"#\"><span wicket:id=\"jvm\"/></a></li>\n+              </ul>\n+            </div>\n             <button class=\"btn btn-box-tool\" data-widget=\"collapse\"><i class=\"fa fa-minus\"></i></button>\n           </div>\n         </div>"},{"sha":"d6604517c1f875ebd3ce1667129e8b8157a7a208","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/SystemInfo.java","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FSystemInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FSystemInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FSystemInfo.java?ref=3f0f25623ad682e19dcf86d0f5962e3f884b79e6","patch":"@@ -32,6 +32,8 @@ public class SystemInfo extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -352727968865892499L;\n \n+    private String hostname;\n+\n     private String os;\n \n     private String jvm;\n@@ -40,7 +42,15 @@ public class SystemInfo extends AbstractBaseBean {\n \n     private long startTime;\n \n-    private final CircularFifoQueue<PlatformLoad> load = new CircularFifoQueue<>(10);\n+    private final CircularFifoQueue<LoadInstant> load = new CircularFifoQueue<>(10);\n+\n+    public String getHostname() {\n+        return hostname;\n+    }\n+\n+    public void setHostname(final String hostname) {\n+        this.hostname = hostname;\n+    }\n \n     public String getOs() {\n         return os;\n@@ -77,13 +87,13 @@ public void setStartTime(final long startTime) {\n     @XmlElementWrapper(name = \"load\")\n     @XmlElement(name = \"instant\")\n     @JsonProperty(\"load\")\n-    public CircularFifoQueue<PlatformLoad> getLoad() {\n+    public CircularFifoQueue<LoadInstant> getLoad() {\n         return load;\n     }\n \n-    @XmlRootElement(name = \"platformLoad\")\n+    @XmlRootElement(name = \"loadInstant\")\n     @XmlType\n-    public static class PlatformLoad extends AbstractBaseBean {\n+    public static class LoadInstant extends AbstractBaseBean {\n \n         private static final long serialVersionUID = 1700788373758716478L;\n "},{"sha":"f15167d85bd70bf10c797bd57c112331705390be","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":32,"deletions":26,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=3f0f25623ad682e19dcf86d0f5962e3f884b79e6","patch":"@@ -23,7 +23,9 @@\n import java.lang.management.RuntimeMXBean;\n import org.apache.syncope.core.misc.EntitlementsHolder;\n import java.lang.reflect.Method;\n+import java.net.InetAddress;\n import java.net.URI;\n+import java.net.UnknownHostException;\n import java.util.Iterator;\n import java.util.Map;\n import javax.annotation.Resource;\n@@ -59,7 +61,7 @@\n @Component\n public class SyncopeLogic extends AbstractLogic<AbstractBaseBean> {\n \n-    private static final int MB = 1024 * 1024;\n+    private static final Object MONITOR = new Object();\n \n     private static PlatformInfo PLATFORM_INFO;\n \n@@ -130,7 +132,7 @@ public boolean isPwdResetRequiringSecurityQuestions() {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     public PlatformInfo platform() {\n-        synchronized (this) {\n+        synchronized (MONITOR) {\n             if (PLATFORM_INFO == null) {\n                 PLATFORM_INFO = new PlatformInfo();\n                 PLATFORM_INFO.setVersion(version);\n@@ -180,38 +182,42 @@ public PlatformInfo platform() {\n         return PLATFORM_INFO;\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n-    public SystemInfo system() {\n-        synchronized (this) {\n+    private void initSystemInfo() {\n+        if (SYSTEM_INFO == null) {\n             OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();\n             RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n \n-            if (SYSTEM_INFO == null) {\n-                SYSTEM_INFO = new SystemInfo();\n-                SYSTEM_INFO.setOs(operatingSystemMXBean.getName()\n-                        + \" \" + operatingSystemMXBean.getVersion()\n-                        + \" \" + operatingSystemMXBean.getArch());\n-                SYSTEM_INFO.setAvailableProcessors(operatingSystemMXBean.getAvailableProcessors());\n-                SYSTEM_INFO.setJvm(\n-                        runtimeMXBean.getVmName()\n-                        + \" \" + System.getProperty(\"java.version\")\n-                        + \" \" + runtimeMXBean.getVmVendor());\n-                SYSTEM_INFO.setStartTime(runtimeMXBean.getStartTime());\n+            SYSTEM_INFO = new SystemInfo();\n+            try {\n+                SYSTEM_INFO.setHostname(InetAddress.getLocalHost().getHostName());\n+            } catch (UnknownHostException e) {\n+                LOG.error(\"Could not get host name\", e);\n             }\n \n-            SystemInfo.PlatformLoad instant = new SystemInfo.PlatformLoad();\n-\n-            instant.setSystemLoadAverage(operatingSystemMXBean.getSystemLoadAverage());\n-\n-            instant.setUptime(runtimeMXBean.getUptime());\n-\n-            Runtime runtime = Runtime.getRuntime();\n-            instant.setTotalMemory(runtime.totalMemory() / MB);\n-            instant.setMaxMemory(runtime.maxMemory() / MB);\n-            instant.setFreeMemory(runtime.freeMemory() / MB);\n+            SYSTEM_INFO.setOs(operatingSystemMXBean.getName()\n+                    + \" \" + operatingSystemMXBean.getVersion()\n+                    + \" \" + operatingSystemMXBean.getArch());\n+            SYSTEM_INFO.setAvailableProcessors(operatingSystemMXBean.getAvailableProcessors());\n+            SYSTEM_INFO.setJvm(\n+                    runtimeMXBean.getVmName()\n+                    + \" \" + System.getProperty(\"java.version\")\n+                    + \" \" + runtimeMXBean.getVmVendor());\n+            SYSTEM_INFO.setStartTime(runtimeMXBean.getStartTime());\n+        }\n+    }\n \n+    public void addLoadInstant(final SystemInfo.LoadInstant instant) {\n+        synchronized (MONITOR) {\n+            initSystemInfo();\n             SYSTEM_INFO.getLoad().add(instant);\n         }\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public SystemInfo system() {\n+        synchronized (MONITOR) {\n+            initSystemInfo();\n+        }\n \n         return SYSTEM_INFO;\n     }"},{"sha":"75e7f71b97165a7739c4fac543fbafa2f93143dc","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SystemLoadReporterJob.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSystemLoadReporterJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSystemLoadReporterJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSystemLoadReporterJob.java?ref=3f0f25623ad682e19dcf86d0f5962e3f884b79e6","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.management.ManagementFactory;\n+import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.quartz.DisallowConcurrentExecution;\n+import org.quartz.Job;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Reports about system load.\n+ */\n+@Component\n+@DisallowConcurrentExecution\n+public class SystemLoadReporterJob implements Job {\n+\n+    private static final Integer MB = 1024 * 1024;\n+\n+    @Autowired\n+    private SyncopeLogic logic;\n+\n+    @Override\n+    public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        SystemInfo.LoadInstant instant = new SystemInfo.LoadInstant();\n+\n+        instant.setSystemLoadAverage(ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage());\n+\n+        instant.setUptime(ManagementFactory.getRuntimeMXBean().getUptime());\n+\n+        Runtime runtime = Runtime.getRuntime();\n+        instant.setTotalMemory(runtime.totalMemory() / MB);\n+        instant.setMaxMemory(runtime.maxMemory() / MB);\n+        instant.setFreeMemory(runtime.freeMemory() / MB);\n+\n+        logic.addLoadInstant(instant);\n+    }\n+\n+}"},{"sha":"29bdba7b61364d37816ae5f2117a1164c5c8a8dc","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/JobInstanceLoaderImpl.java","status":"modified","additions":27,"deletions":11,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f0f25623ad682e19dcf86d0f5962e3f884b79e6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java?ref=3f0f25623ad682e19dcf86d0f5962e3f884b79e6","patch":"@@ -30,6 +30,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.logic.SystemLoadReporterJob;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n@@ -214,12 +215,6 @@ public void registerJob(final Report report, final Date startAt) throws Schedule\n         registerJob(JobNamer.getJobName(report), job, report.getCronExpression(), startAt, jobMap);\n     }\n \n-    private void registerNotificationJob(final String cronExpression) throws SchedulerException, ParseException {\n-        NotificationJob job = createSpringBean(NotificationJob.class);\n-\n-        registerJob(\"taskNotificationJob\", job, cronExpression, null, Collections.<String, Object>emptyMap());\n-    }\n-\n     private void unregisterJob(final String jobName) {\n         try {\n             scheduler.getScheduler().unscheduleJob(new TriggerKey(jobName, Scheduler.DEFAULT_GROUP));\n@@ -304,16 +299,37 @@ public Void exec() {\n \n         // 3. NotificationJob\n         if (StringUtils.isBlank(notificationConf.getLeft())) {\n-            LOG.debug(\"Empty value provided for NotificationJob's cron, not registering anything on Quartz\");\n+            LOG.debug(\"Empty value provided for {}'s cron, not registering anything on Quartz\",\n+                    NotificationJob.class.getSimpleName());\n         } else {\n-            LOG.debug(\"NotificationJob's cron expression: {} - registering Quartz job and trigger\",\n-                    notificationConf.getLeft());\n+            LOG.debug(\"{}'s cron expression: {} - registering Quartz job and trigger\",\n+                    NotificationJob.class.getSimpleName(), notificationConf.getLeft());\n \n             try {\n-                registerNotificationJob(notificationConf.getLeft());\n+                NotificationJob job = createSpringBean(NotificationJob.class);\n+                registerJob(\n+                        \"taskNotificationJob\",\n+                        job,\n+                        notificationConf.getLeft(),\n+                        null,\n+                        Collections.<String, Object>emptyMap());\n             } catch (Exception e) {\n-                LOG.error(\"While loading NotificationJob instance\", e);\n+                LOG.error(\"While loading {} instance\", NotificationJob.class.getSimpleName(), e);\n             }\n         }\n+\n+        // 4. SystemLoadReporterJob (fixed schedule, every minute)\n+        LOG.debug(\"Registering {}\", SystemLoadReporterJob.class);\n+        try {\n+            SystemLoadReporterJob job = createSpringBean(SystemLoadReporterJob.class);\n+            registerJob(\n+                    \"taskSystemLoadReporterJob\",\n+                    job,\n+                    \"0 * * * * ?\",\n+                    null,\n+                    Collections.<String, Object>emptyMap());\n+        } catch (Exception e) {\n+            LOG.error(\"While loading {} instance\", SystemLoadReporterJob.class.getSimpleName(), e);\n+        }\n     }\n }"}]}