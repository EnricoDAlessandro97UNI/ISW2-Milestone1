{"sha":"7d0c196cf6e916d4c44274d4d918bcb3aaae2e78","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdkMGMxOTZjZjZlOTE2ZDRjNDQyNzRkNGQ5MThiY2IzYWFhZTJlNzg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-06-27T09:28:35Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-06-27T09:28:35Z"},"message":"[SYNCOPE-513] Sensible configuration provided via security.properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1605998 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"39335baa4a7363323b8ed09be0d21be55f4b97a6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/39335baa4a7363323b8ed09be0d21be55f4b97a6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5e286d2702789dd27f01cc151db5bf351d488381","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5e286d2702789dd27f01cc151db5bf351d488381","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5e286d2702789dd27f01cc151db5bf351d488381"}],"stats":{"total":143,"additions":107,"deletions":36},"files":[{"sha":"5924c647da09da047ebe784c82ab2146ef4a8b7d","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=7d0c196cf6e916d4c44274d4d918bcb3aaae2e78","patch":"@@ -429,15 +429,16 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 conn.setBundleName(bundleTO.getBundleName());\n                 conn.setVersion(bundleTO.getVersion());\n                 conn.getConfiguration().clear();\n-                conn.getConfiguration().addAll(connPropView.getModelObject());                \n+                conn.getConfiguration().addAll(connPropView.getModelObject());\n \n                 // Set the model object's capabilities to capabilitiesPalette's converted Set\n                 conn.getCapabilities().addAll(selectedCapabilities.isEmpty()\n                         ? EnumSet.noneOf(ConnectorCapability.class)\n                         : EnumSet.copyOf(selectedCapabilities));\n \n                 // Reset pool configuration if all fields are null\n-                if (conn.getPoolConf().getMaxIdle() == null\n+                if (conn.getPoolConf() != null\n+                        && conn.getPoolConf().getMaxIdle() == null\n                         && conn.getPoolConf().getMaxObjects() == null\n                         && conn.getPoolConf().getMaxWait() == null\n                         && conn.getPoolConf().getMinEvictableIdleTimeMillis() == null"},{"sha":"c9fa7fa568935e2ff105bfaa1e4f8613ae38c4ad","filename":"core/src/main/java/org/apache/syncope/core/util/Encryptor.java","status":"modified","additions":95,"deletions":33,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FEncryptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FEncryptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FEncryptor.java?ref=7d0c196cf6e916d4c44274d4d918bcb3aaae2e78","patch":"@@ -42,39 +42,98 @@\n import org.springframework.security.crypto.bcrypt.BCrypt;\n import org.springframework.security.crypto.codec.Base64;\n \n-public class Encryptor {\n+public final class Encryptor {\n \n     private static final Logger LOG = LoggerFactory.getLogger(Encryptor.class);\n \n     private static final Map<String, Encryptor> INSTANCES = new ConcurrentHashMap<String, Encryptor>();\n \n     private static final String DEFAULT_SECRET_KEY = \"1abcdefghilmnopqrstuvz2!\";\n \n-    private static String PASSWORD_SECRET_KEY;\n+    /**\n+     * Default value for salted {@link StandardStringDigester#setIterations(int)}.\n+     */\n+    private static final int DEFAULT_SALT_ITERATIONS = 1;\n \n-    private SecretKeySpec keySpec;\n+    /**\n+     * Default value for {@link StandardStringDigester#setSaltSizeBytes(int)}.\n+     */\n+    private static final int DEFAULT_SALT_SIZE_BYTES = 8;\n+\n+    /**\n+     * Default value for {@link StandardStringDigester#setInvertPositionOfPlainSaltInEncryptionResults(boolean)}.\n+     */\n+    private static final boolean DEFAULT_IPOPSIER = true;\n+\n+    /**\n+     * Default value for salted {@link StandardStringDigester#setInvertPositionOfSaltInMessageBeforeDigesting(boolean)}.\n+     */\n+    private static final boolean DEFAULT_IPOSIMBD = true;\n+\n+    /**\n+     * Default value for salted {@link StandardStringDigester#setUseLenientSaltSizeCheck(boolean)}.\n+     */\n+    private static final boolean DEFAULT_ULSSC = true;\n+\n+    private static String secretKey;\n+\n+    private static Integer saltIterations;\n+\n+    private static Integer saltSizeBytes;\n+\n+    private static Boolean ipopsier;\n+\n+    private static Boolean iposimbd;\n+\n+    private static Boolean ulssc;\n \n     static {\n         InputStream propStream = null;\n         try {\n             propStream = Encryptor.class.getResourceAsStream(\"/security.properties\");\n             Properties props = new Properties();\n             props.load(propStream);\n-            PASSWORD_SECRET_KEY = props.getProperty(\"secretKey\");\n+\n+            secretKey = props.getProperty(\"secretKey\");\n+            saltIterations = Integer.valueOf(props.getProperty(\"digester.saltIterations\"));\n+            saltSizeBytes = Integer.valueOf(props.getProperty(\"digester.saltSizeBytes\"));\n+            ipopsier = Boolean.valueOf(props.getProperty(\"digester.invertPositionOfPlainSaltInEncryptionResults\"));\n+            iposimbd = Boolean.valueOf(props.getProperty(\"digester.invertPositionOfSaltInMessageBeforeDigesting\"));\n+            ulssc = Boolean.valueOf(props.getProperty(\"digester.useLenientSaltSizeCheck\"));\n         } catch (Exception e) {\n-            LOG.error(\"Could not read password secretKey\", e);\n+            LOG.error(\"Could not read security parameters\", e);\n         } finally {\n             IOUtils.closeQuietly(propStream);\n         }\n \n-        if (PASSWORD_SECRET_KEY == null) {\n-            PASSWORD_SECRET_KEY = DEFAULT_SECRET_KEY;\n-            LOG.debug(\"password secretKey not found, reverting to default\");\n+        if (secretKey == null) {\n+            secretKey = DEFAULT_SECRET_KEY;\n+            LOG.debug(\"secretKey not found, reverting to default\");\n+        }\n+        if (saltIterations == null) {\n+            saltIterations = DEFAULT_SALT_ITERATIONS;\n+            LOG.debug(\"digester.saltIterations not found, reverting to default\");\n+        }\n+        if (saltSizeBytes == null) {\n+            saltSizeBytes = DEFAULT_SALT_SIZE_BYTES;\n+            LOG.debug(\"digester.saltSizeBytes not found, reverting to default\");\n+        }\n+        if (ipopsier == null) {\n+            ipopsier = DEFAULT_IPOPSIER;\n+            LOG.debug(\"digester.invertPositionOfPlainSaltInEncryptionResults not found, reverting to default\");\n+        }\n+        if (iposimbd == null) {\n+            iposimbd = DEFAULT_IPOSIMBD;\n+            LOG.debug(\"digester.invertPositionOfSaltInMessageBeforeDigesting not found, reverting to default\");\n+        }\n+        if (ulssc == null) {\n+            ulssc = DEFAULT_ULSSC;\n+            LOG.debug(\"digester.useLenientSaltSizeCheck not found, reverting to default\");\n         }\n     }\n \n     public static Encryptor getInstance() {\n-        return getInstance(PASSWORD_SECRET_KEY);\n+        return getInstance(secretKey);\n     }\n \n     public static Encryptor getInstance(final String secretKey) {\n@@ -89,6 +148,8 @@ public static Encryptor getInstance(final String secretKey) {\n         return instance;\n     }\n \n+    private SecretKeySpec keySpec;\n+\n     private Encryptor(final String secretKey) {\n         String actualKey = secretKey;\n         if (actualKey.length() < 16) {\n@@ -109,68 +170,66 @@ private Encryptor(final String secretKey) {\n         }\n     }\n \n-    public String encode(final String password, final CipherAlgorithm cipherAlgorithm)\n+    public String encode(final String value, final CipherAlgorithm cipherAlgorithm)\n             throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n             IllegalBlockSizeException, BadPaddingException {\n \n-        String encodedPassword = null;\n+        String encodedValue = null;\n \n-        if (password != null) {\n+        if (value != null) {\n             if (cipherAlgorithm == null || cipherAlgorithm == CipherAlgorithm.AES) {\n-                final byte[] cleartext = password.getBytes(SyncopeConstants.DEFAULT_ENCODING);\n+                final byte[] cleartext = value.getBytes(SyncopeConstants.DEFAULT_ENCODING);\n \n                 final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n                 cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n \n-                encodedPassword = new String(Base64.encode(cipher.doFinal(cleartext)));\n+                encodedValue = new String(Base64.encode(cipher.doFinal(cleartext)));\n             } else if (cipherAlgorithm == CipherAlgorithm.BCRYPT) {\n-                encodedPassword = BCrypt.hashpw(password, BCrypt.gensalt());\n+                encodedValue = BCrypt.hashpw(value, BCrypt.gensalt());\n             } else {\n-                encodedPassword = getDigester(cipherAlgorithm).digest(password);\n+                encodedValue = getDigester(cipherAlgorithm).digest(value);\n             }\n         }\n \n-        return encodedPassword;\n+        return encodedValue;\n     }\n \n-    public boolean verify(final String password, final CipherAlgorithm cipherAlgorithm,\n-            final String digestedPassword) {\n-\n+    public boolean verify(final String value, final CipherAlgorithm cipherAlgorithm, final String encodedValue) {\n         boolean res = false;\n \n         try {\n-            if (password != null) {\n+            if (value != null) {\n                 if (cipherAlgorithm == null || cipherAlgorithm == CipherAlgorithm.AES) {\n-                    res = encode(password, cipherAlgorithm).equals(digestedPassword);\n+                    res = encode(value, cipherAlgorithm).equals(encodedValue);\n                 } else if (cipherAlgorithm == CipherAlgorithm.BCRYPT) {\n-                    res = BCrypt.checkpw(password, digestedPassword);\n+                    res = BCrypt.checkpw(value, encodedValue);\n                 } else {\n-                    res = getDigester(cipherAlgorithm).matches(password, digestedPassword);\n+                    res = getDigester(cipherAlgorithm).matches(value, encodedValue);\n                 }\n             }\n         } catch (Exception e) {\n-            LOG.error(\"Could not verify password\", e);\n+            LOG.error(\"Could not verify encoded value\", e);\n         }\n \n         return res;\n     }\n \n-    public String decode(final String encodedPassword, final CipherAlgorithm cipherAlgorithm)\n+    public String decode(final String encodedValue, final CipherAlgorithm cipherAlgorithm)\n             throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n             IllegalBlockSizeException, BadPaddingException {\n \n-        String password = null;\n+        String value = null;\n \n-        if (encodedPassword != null && cipherAlgorithm == CipherAlgorithm.AES) {\n-            final byte[] encoded = encodedPassword.getBytes(SyncopeConstants.DEFAULT_ENCODING);\n+        if (encodedValue != null && cipherAlgorithm == CipherAlgorithm.AES) {\n+            final byte[] encoded = encodedValue.getBytes(SyncopeConstants.DEFAULT_ENCODING);\n \n             final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n             cipher.init(Cipher.DECRYPT_MODE, keySpec);\n \n-            password = new String(cipher.doFinal(Base64.decode(encoded)));\n+            value = new String(cipher.doFinal(Base64.decode(encoded)), SyncopeConstants.DEFAULT_ENCODING);\n         }\n \n-        return password;\n+        return value;\n     }\n \n     private StandardStringDigester getDigester(final CipherAlgorithm cipherAlgorithm) {\n@@ -179,8 +238,11 @@ private StandardStringDigester getDigester(final CipherAlgorithm cipherAlgorithm\n         if (cipherAlgorithm.getAlgorithm().startsWith(\"S-\")) {\n             // Salted ...\n             digester.setAlgorithm(cipherAlgorithm.getAlgorithm().replaceFirst(\"S\\\\-\", \"\"));\n-            digester.setIterations(100000);\n-            digester.setSaltSizeBytes(16);\n+            digester.setIterations(saltIterations);\n+            digester.setSaltSizeBytes(saltSizeBytes);\n+            digester.setInvertPositionOfPlainSaltInEncryptionResults(ipopsier);\n+            digester.setInvertPositionOfSaltInMessageBeforeDigesting(iposimbd);\n+            digester.setUseLenientSaltSizeCheck(ulssc);\n         } else {\n             // Not salted ...\n             digester.setAlgorithm(cipherAlgorithm.getAlgorithm());"},{"sha":"c0fcd37e26e6ea425e65517ea2ff521d46cdedbc","filename":"core/src/main/resources/security.properties","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78/core%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78/core%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties?ref=7d0c196cf6e916d4c44274d4d918bcb3aaae2e78","patch":"@@ -17,6 +17,14 @@\n adminUser=admin\n adminPassword=5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\n adminPasswordAlgorithm=SHA1\n+\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n+\n secretKey=${secretKey}\n+# default for LDAP / RFC2307 SSHA\n+digester.saltIterations=1\n+digester.saltSizeBytes=8\n+digester.invertPositionOfPlainSaltInEncryptionResults=true\n+digester.invertPositionOfSaltInMessageBeforeDigesting=true\n+digester.useLenientSaltSizeCheck=true\n\\ No newline at end of file"},{"sha":"7d8fdb6e8123ac667c0e16c9ea5fa913bb498053","filename":"core/src/test/java/org/apache/syncope/core/security/EncryptorTest.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncryptorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d0c196cf6e916d4c44274d4d918bcb3aaae2e78/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncryptorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncryptorTest.java?ref=7d0c196cf6e916d4c44274d4d918bcb3aaae2e78","patch":"@@ -29,7 +29,7 @@\n /**\n  * Test class to test all encryption algorithms.\n  */\n-public class PasswordEncoderTest {\n+public class EncryptorTest {\n \n     private final String password = \"password\";\n ","previous_filename":"core/src/test/java/org/apache/syncope/core/security/PasswordEncoderTest.java"}]}