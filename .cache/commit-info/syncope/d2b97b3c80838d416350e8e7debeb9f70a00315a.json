{"sha":"d2b97b3c80838d416350e8e7debeb9f70a00315a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQyYjk3YjNjODA4MzhkNDE2MzUwZThlN2RlYmViOWY3MGEwMDMxNWE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-15T15:52:25Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-15T15:52:25Z"},"message":"Introduced Task and TaskExecution; still missing REST interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246594 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"77becac205ed187c2f2929b97acc742ed2e59ca6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/77becac205ed187c2f2929b97acc742ed2e59ca6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d2b97b3c80838d416350e8e7debeb9f70a00315a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d2b97b3c80838d416350e8e7debeb9f70a00315a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d2b97b3c80838d416350e8e7debeb9f70a00315a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d2b97b3c80838d416350e8e7debeb9f70a00315a/comments","author":null,"committer":null,"parents":[{"sha":"2b5cf67f456258ed38b1777c60583b0577f6e444","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b5cf67f456258ed38b1777c60583b0577f6e444","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2b5cf67f456258ed38b1777c60583b0577f6e444"}],"stats":{"total":2497,"additions":1528,"deletions":969},"files":[{"sha":"55798b7d2b70c71f9dce95cb53580933f2f8c64b","filename":"client/pom.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -40,6 +40,11 @@\n             <artifactId>spring-webmvc</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.codehaus.jackson</groupId>\n+            <artifactId>jackson-mapper-lgpl</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>log4j</groupId>\n             <artifactId>log4j</artifactId>\n@@ -54,11 +59,6 @@\n             <artifactId>junit</artifactId>\n             <scope>test</scope>\n         </dependency>\n-        <dependency>\n-            <groupId>org.codehaus.jackson</groupId>\n-            <artifactId>jackson-mapper-lgpl</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n \n     </dependencies>\n "},{"sha":"5267763bae3ff4e4f6e47bdcbe14f46532725b8d","filename":"client/src/main/java/org/syncope/client/mod/AttributeMod.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAttributeMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAttributeMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAttributeMod.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -14,19 +14,19 @@\n  */\n package org.syncope.client.mod;\n \n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n import org.syncope.client.AbstractBaseBean;\n \n public class AttributeMod extends AbstractBaseBean {\n \n     private String schema;\n-    private Set<String> valuesToBeAdded;\n-    private Set<String> valuesToBeRemoved;\n+    private List<String> valuesToBeAdded;\n+    private List<String> valuesToBeRemoved;\n \n     public AttributeMod() {\n-        valuesToBeAdded = new HashSet<String>();\n-        valuesToBeRemoved = new HashSet<String>();\n+        valuesToBeAdded = new ArrayList<String>();\n+        valuesToBeRemoved = new ArrayList<String>();\n     }\n \n     public String getSchema() {\n@@ -45,11 +45,11 @@ public boolean removeValueToBeAdded(String value) {\n         return valuesToBeAdded.remove(value);\n     }\n \n-    public Set<String> getValuesToBeAdded() {\n+    public List<String> getValuesToBeAdded() {\n         return valuesToBeAdded;\n     }\n \n-    public void setValuesToBeAdded(Set<String> valuesToBeAdded) {\n+    public void setValuesToBeAdded(List<String> valuesToBeAdded) {\n         this.valuesToBeAdded = valuesToBeAdded;\n     }\n \n@@ -61,11 +61,11 @@ public boolean removeValueToBeRemoved(String value) {\n         return valuesToBeRemoved.remove(value);\n     }\n \n-    public Set<String> getValuesToBeRemoved() {\n+    public List<String> getValuesToBeRemoved() {\n         return valuesToBeRemoved;\n     }\n \n-    public void setValuesToBeRemoved(Set<String> valuesToBeRemoved) {\n+    public void setValuesToBeRemoved(List<String> valuesToBeRemoved) {\n         this.valuesToBeRemoved = valuesToBeRemoved;\n     }\n }"},{"sha":"1cfdccfcb67c91b94bb71cff18c86cd7ac5473b6","filename":"client/src/main/java/org/syncope/client/to/AbstractAttributableTO.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -15,9 +15,12 @@\n package org.syncope.client.to;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n+import org.codehaus.jackson.annotate.JsonIgnore;\n import org.syncope.client.AbstractBaseBean;\n \n public abstract class AbstractAttributableTO extends AbstractBaseBean {\n@@ -57,6 +60,17 @@ public void setAttributes(final List<AttributeTO> attributes) {\n         this.attributes = attributes;\n     }\n \n+    @JsonIgnore\n+    public Map<String, List<String>> getAttributeMap() {\n+        Map<String, List<String>> result =\n+                new HashMap<String, List<String>>(attributes.size());\n+        for (AttributeTO attributeTO : getAttributes()) {\n+            result.put(attributeTO.getSchema(), attributeTO.getValues());\n+        }\n+\n+        return result;\n+    }\n+\n     public boolean addDerivedAttribute(final AttributeTO derivedAttribute) {\n         return derivedAttributes.add(derivedAttribute);\n     }"},{"sha":"990abd5887a6c50f1d4cea731f8b161e47d2c6eb","filename":"client/src/main/java/org/syncope/client/to/ConnectorBundleTOs.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java?ref=2b5cf67f456258ed38b1777c60583b0577f6e444","patch":"@@ -1,57 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class ConnectorBundleTOs extends AbstractBaseBean\n-        implements Iterable<ConnectorBundleTO> {\n-\n-    private List<ConnectorBundleTO> bundles;\n-\n-    public List<ConnectorBundleTO> getBundles() {\n-        if (this.bundles == null)\n-            this.bundles = new ArrayList<ConnectorBundleTO>();\n-        return this.bundles;\n-    }\n-\n-    public boolean addBundle(ConnectorBundleTO bundle) {\n-        if (this.bundles == null)\n-            this.bundles = new ArrayList<ConnectorBundleTO>();\n-\n-        return this.bundles.add(bundle);\n-    }\n-\n-    public boolean removeBundle(ConnectorBundleTO bundle) {\n-        if (this.bundles == null) return true;\n-        return this.bundles.remove(bundle);\n-    }\n-\n-    public void setBundles(List<ConnectorBundleTO> bundles) {\n-        this.bundles = bundles;\n-    }\n-\n-    @Override\n-    public Iterator<ConnectorBundleTO> iterator() {\n-        if (this.bundles == null) {\n-            this.bundles = new ArrayList<ConnectorBundleTO>();\n-        }\n-\n-        return this.bundles.iterator();\n-    }\n-}"},{"sha":"ba78c8161642d19ebce600ad570073a486770500","filename":"client/src/main/java/org/syncope/client/to/ConnectorInstanceTOs.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java?ref=2b5cf67f456258ed38b1777c60583b0577f6e444","patch":"@@ -1,61 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class ConnectorInstanceTOs extends AbstractBaseBean\n-        implements Iterable<ConnectorInstanceTO> {\n-\n-    private List<ConnectorInstanceTO> instances;\n-\n-    public ConnectorInstanceTOs() {\n-        instances = new ArrayList<ConnectorInstanceTO>();\n-    }\n-\n-    public List<ConnectorInstanceTO> getInstances() {\n-        if (this.instances == null)\n-            this.instances = new ArrayList<ConnectorInstanceTO>();\n-        return this.instances;\n-    }\n-\n-    public boolean addInstance(ConnectorInstanceTO instance) {\n-        if (this.instances == null)\n-            this.instances = new ArrayList<ConnectorInstanceTO>();\n-\n-        return this.instances.add(instance);\n-    }\n-\n-    public boolean removeInstance(ConnectorInstanceTO instance) {\n-        if (this.instances == null) return true;\n-        return this.instances.remove(instance);\n-    }\n-\n-    public void setInstances(List<ConnectorInstanceTO> instances) {\n-        this.instances = instances;\n-    }\n-\n-    @Override\n-    public Iterator<ConnectorInstanceTO> iterator() {\n-        if (this.instances == null) {\n-            this.instances = new ArrayList<ConnectorInstanceTO>();\n-        }\n-\n-        return this.instances.iterator();\n-    }\n-}"},{"sha":"3ca50e5932c64df02cc5e29fc58ab7b81563f80e","filename":"client/src/main/java/org/syncope/client/to/DerivedSchemaTOs.java","status":"removed","additions":0,"deletions":43,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTOs.java?ref=2b5cf67f456258ed38b1777c60583b0577f6e444","patch":"@@ -1,43 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class DerivedSchemaTOs extends AbstractBaseBean\n-        implements Iterable<DerivedSchemaTO> {\n-\n-    private List<DerivedSchemaTO> derivedSchemas;\n-\n-    public DerivedSchemaTOs() {\n-        derivedSchemas = new ArrayList<DerivedSchemaTO>();\n-    }\n-\n-    public List<DerivedSchemaTO> getDerivedSchemas() {\n-        return derivedSchemas;\n-    }\n-\n-    public void setDerivedSchemas(List<DerivedSchemaTO> derivedSchemas) {\n-        this.derivedSchemas = derivedSchemas;\n-    }\n-\n-    @Override\n-    public Iterator<DerivedSchemaTO> iterator() {\n-        return derivedSchemas.iterator();\n-    }\n-}"},{"sha":"b341bf4d45ea3af31f4401cc5948ff25141dedb6","filename":"client/src/main/java/org/syncope/client/to/ResourceTO.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -14,6 +14,8 @@\n  */\n package org.syncope.client.to;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import org.syncope.client.AbstractBaseBean;\n \n public class ResourceTO extends AbstractBaseBean {\n@@ -29,12 +31,16 @@ public class ResourceTO extends AbstractBaseBean {\n     /**\n      * Attribute mappings.\n      */\n-    private SchemaMappingTOs mappings;\n+    private List<SchemaMappingTO> mappings;\n     /**\n      * Force mandatory constraint.\n      */\n     private boolean forceMandatoryConstraint;\n \n+    public ResourceTO() {\n+        mappings = new ArrayList<SchemaMappingTO>();\n+    }\n+\n     public boolean isForceMandatoryConstraint() {\n         return forceMandatoryConstraint;\n     }\n@@ -51,11 +57,19 @@ public void setConnectorId(Long connectorId) {\n         this.connectorId = connectorId;\n     }\n \n-    public SchemaMappingTOs getMappings() {\n+    public boolean addMapping(SchemaMappingTO mapping) {\n+        return mappings.add(mapping);\n+    }\n+\n+    public boolean removeMapping(SchemaMappingTO mapping) {\n+        return mappings.remove(mapping);\n+    }\n+\n+    public List<SchemaMappingTO> getMappings() {\n         return mappings;\n     }\n \n-    public void setMappings(SchemaMappingTOs mappings) {\n+    public void setMappings(List<SchemaMappingTO> mappings) {\n         this.mappings = mappings;\n     }\n "},{"sha":"a73b2a953d36893be939840765c273b06ba01b2e","filename":"client/src/main/java/org/syncope/client/to/ResourceTOs.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTOs.java?ref=2b5cf67f456258ed38b1777c60583b0577f6e444","patch":"@@ -1,56 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class ResourceTOs extends AbstractBaseBean\n-        implements Iterable<ResourceTO> {\n-\n-    private List<ResourceTO> resources;\n-\n-    public List<ResourceTO> getResources() {\n-        if (this.resources == null)\n-            this.resources = new ArrayList<ResourceTO>();\n-        return this.resources;\n-    }\n-\n-    public boolean addResource(ResourceTO resource) {\n-        if (this.resources == null)\n-            this.resources = new ArrayList<ResourceTO>();\n-        return this.resources.add(resource);\n-    }\n-\n-    public boolean removeResource(ResourceTO resource) {\n-        if (this.resources == null) return true;\n-        return this.resources.remove(resource);\n-    }\n-\n-    public void setResources(List<ResourceTO> resources) {\n-        this.resources = resources;\n-    }\n-\n-    @Override\n-    public Iterator<ResourceTO> iterator() {\n-        if (this.resources == null) {\n-            this.resources = new ArrayList<ResourceTO>();\n-        }\n-\n-        return this.resources.iterator();\n-    }\n-}"},{"sha":"f60713ea5d403901f78a46a41de7b1f1786f5869","filename":"client/src/main/java/org/syncope/client/to/SchemaMappingTOs.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java?ref=2b5cf67f456258ed38b1777c60583b0577f6e444","patch":"@@ -1,56 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class SchemaMappingTOs extends AbstractBaseBean\n-        implements Iterable<SchemaMappingTO> {\n-\n-    private List<SchemaMappingTO> mappings;\n-\n-    public List<SchemaMappingTO> getMappings() {\n-        if (this.mappings == null)\n-            this.mappings = new ArrayList<SchemaMappingTO>();\n-        return this.mappings;\n-    }\n-\n-    public boolean addMapping(SchemaMappingTO mapping) {\n-        if (this.mappings == null)\n-            this.mappings = new ArrayList<SchemaMappingTO>();\n-        return this.mappings.add(mapping);\n-    }\n-    \n-    public boolean removeMapping(SchemaMappingTO mapping) {\n-        if (this.mappings == null) return true;\n-        return this.mappings.remove(mapping);\n-    }\n-\n-    public void setMappings(List<SchemaMappingTO> mappings) {\n-        this.mappings = mappings;\n-    }\n-\n-    @Override\n-    public Iterator<SchemaMappingTO> iterator() {\n-        if (this.mappings == null) {\n-            this.mappings = new ArrayList<SchemaMappingTO>();\n-        }\n-\n-        return this.mappings.iterator();\n-    }\n-}"},{"sha":"9376449b6bbc78918e57c467f177be25a71455c5","filename":"client/src/main/java/org/syncope/client/to/TaskExecutionTO.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskExecutionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskExecutionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskExecutionTO.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,77 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.Date;\n+import org.syncope.client.AbstractBaseBean;\n+import org.syncope.types.TaskExecutionStatus;\n+\n+public class TaskExecutionTO extends AbstractBaseBean {\n+\n+    private long id;\n+    private Date startDate;\n+    private Date endDate;\n+    private TaskExecutionStatus status;\n+    private String message;\n+    private long task;\n+\n+    public Date getEndDate() {\n+        return endDate;\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate;\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate;\n+    }\n+\n+    public TaskExecutionStatus getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(TaskExecutionStatus status) {\n+        this.status = status;\n+    }\n+\n+    public long getTask() {\n+        return task;\n+    }\n+\n+    public void setTask(long task) {\n+        this.task = task;\n+    }\n+}"},{"sha":"6f03fbe25fd8df98035f2b99606d9971e9c24cdb","filename":"client/src/main/java/org/syncope/client/to/TaskTO.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,106 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n+import org.syncope.types.PropagationMode;\n+import org.syncope.types.ResourceOperationType;\n+\n+public class TaskTO extends AbstractBaseBean {\n+\n+    private long id;\n+    private PropagationMode propagationMode;\n+    private ResourceOperationType resourceOperationType;\n+    private String accountId;\n+    private String oldAccountId;\n+    private String xmlAttributes;\n+    private String resource;\n+    private List<Long> executions;\n+\n+    public String getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(String accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public boolean addExecution(Long execution) {\n+        return executions.add(execution);\n+    }\n+\n+    public boolean removeExecution(Long execution) {\n+        return executions.add(execution);\n+    }\n+\n+    public List<Long> getExecutions() {\n+        return executions;\n+    }\n+\n+    public void setExecutions(List<Long> executions) {\n+        this.executions = executions;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getOldAccountId() {\n+        return oldAccountId;\n+    }\n+\n+    public void setOldAccountId(String oldAccountId) {\n+        this.oldAccountId = oldAccountId;\n+    }\n+\n+    public PropagationMode getPropagationMode() {\n+        return propagationMode;\n+    }\n+\n+    public void setPropagationMode(PropagationMode propagationMode) {\n+        this.propagationMode = propagationMode;\n+    }\n+\n+    public String getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(String resource) {\n+        this.resource = resource;\n+    }\n+\n+    public ResourceOperationType getResourceOperationType() {\n+        return resourceOperationType;\n+    }\n+\n+    public void setResourceOperationType(\n+            ResourceOperationType resourceOperationType) {\n+\n+        this.resourceOperationType = resourceOperationType;\n+    }\n+\n+    public String getXmlAttributes() {\n+        return xmlAttributes;\n+    }\n+\n+    public void setXmlAttributes(String xmlAttributes) {\n+        this.xmlAttributes = xmlAttributes;\n+    }\n+}"},{"sha":"08db2e208eae351b627027fc09cffc293874620f","filename":"client/src/main/java/org/syncope/client/to/UserTOs.java","status":"removed","additions":0,"deletions":50,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b5cf67f456258ed38b1777c60583b0577f6e444/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java?ref=2b5cf67f456258ed38b1777c60583b0577f6e444","patch":"@@ -1,50 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class UserTOs extends AbstractBaseBean implements Iterable<UserTO> {\n-\n-    private List<UserTO> users;\n-\n-    public UserTOs() {\n-        users = new ArrayList<UserTO>();\n-    }\n-\n-    public boolean addUser(UserTO userTO) {\n-        return users.add(userTO);\n-    }\n-\n-    public boolean removeUser(UserTO userTO) {\n-        return users.remove(userTO);\n-    }\n-\n-    public List<UserTO> getUsers() {\n-        return users;\n-    }\n-\n-    public void setUsers(List<UserTO> users) {\n-        this.users = users;\n-    }\n-\n-    @Override\n-    public Iterator<UserTO> iterator() {\n-        return users.iterator();\n-    }\n-}"},{"sha":"0391dd8887f732202101ca1a25947577598d5801","filename":"client/src/main/java/org/syncope/types/PropagationMode.java","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPropagationMode.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPropagationMode.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPropagationMode.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,20 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public enum PropagationMode {\n+\n+    SYNC, ASYNC\n+}"},{"sha":"ad9c0fedd10c47727a82bcef05ec9b1e8c093369","filename":"client/src/main/java/org/syncope/types/ResourceOperationType.java","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FResourceOperationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FResourceOperationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FResourceOperationType.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,20 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public enum ResourceOperationType {\n+\n+    CREATE, UPDATE, DELETE\n+}"},{"sha":"3eb14c2801af11afd9f82329f078683b81b81b9f","filename":"client/src/main/java/org/syncope/types/TaskExecutionStatus.java","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FTaskExecutionStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FTaskExecutionStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FTaskExecutionStatus.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,20 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public enum TaskExecutionStatus {\n+\n+    CREATED, SUBMITTED, UNSUBMITTED, SUCCESS, FAILURE\n+}"},{"sha":"0995b53be660c9a79159441f31d2878e079be567","filename":"core/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -274,7 +274,7 @@\n                         <configuration>\n                             <skip>false</skip>\n                             <includes>\n-                                <include>**/*Test.java</include>\n+                                <include>**/dao/*Test.java</include>\n                             </includes>\n                             <excludes>\n                                 <exclude>**/relationships/**Test.java</exclude>"},{"sha":"8075dedabe1d66917eacc96340a0d42bbb91fb84","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceLoader.java","status":"modified","additions":5,"deletions":45,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,14 +14,8 @@\n  */\n package org.syncope.core.persistence;\n \n-import java.beans.XMLDecoder;\n-import java.beans.XMLEncoder;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.net.URL;\n-import java.net.URLDecoder;\n-import java.net.URLEncoder;\n import java.util.ArrayList;\n import java.util.List;\n import javassist.NotFoundException;\n@@ -131,6 +125,9 @@ public static void registerConnector(final ConnectorInstance instance)\n             removeConnector(instance.getId().toString());\n         }\n \n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n         ConnectorFacadeProxy connector = new ConnectorFacadeProxy(instance);\n \n         if (LOG.isDebugEnabled()) {\n@@ -149,43 +146,6 @@ public static void removeConnector(final String id) {\n         getBeanFactory().destroySingleton(id);\n     }\n \n-    public static String serializeToXML(Object obj) {\n-        String result = null;\n-\n-        try {\n-            ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n-            XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n-            encoder.writeObject(obj);\n-            encoder.flush();\n-            encoder.close();\n-\n-            result = URLEncoder.encode(tokenContentOS.toString(), \"UTF-8\");\n-        } catch (Throwable t) {\n-            LOG.error(\"Exception during connector serialization\", t);\n-        }\n-\n-        return result;\n-    }\n-\n-    public static Object buildFromXML(String xml) {\n-        Object result = null;\n-\n-        try {\n-            ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(\n-                    URLDecoder.decode(xml, \"UTF-8\").getBytes());\n-\n-            XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n-            Object object = decoder.readObject();\n-            decoder.close();\n-\n-            result = object;\n-        } catch (Throwable t) {\n-            LOG.error(\"Exception during connector deserialization\", t);\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public final void contextInitialized(final ServletContextEvent sce) {\n         ConfigurableApplicationContext context ="},{"sha":"b4b41dab7267200117c317038c3995395103d8ed","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnectorInstance.java","status":"modified","additions":38,"deletions":4,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -14,7 +14,14 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.beans.XMLDecoder;\n+import java.beans.XMLEncoder;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.net.URLDecoder;\n+import java.net.URLEncoder;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.EnumSet;\n import java.util.List;\n import java.util.Set;\n@@ -30,6 +37,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.TableGenerator;\n import org.hibernate.annotations.CollectionOfElements;\n+import org.syncope.client.to.PropertyTO;\n import org.syncope.types.ConnectorCapability;\n \n @Entity\n@@ -113,12 +121,38 @@ public void setConnectorName(String connectorName) {\n         this.connectorName = connectorName;\n     }\n \n-    public String getXmlConfiguration() {\n-        return xmlConfiguration;\n+    public Set<PropertyTO> getConfiguration() {\n+        Set<PropertyTO> result = Collections.EMPTY_SET;\n+\n+        try {\n+            ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(\n+                    URLDecoder.decode(xmlConfiguration, \"UTF-8\").getBytes());\n+\n+            XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n+            Object object = decoder.readObject();\n+            decoder.close();\n+\n+            result = (Set<PropertyTO>) object;\n+        } catch (Throwable t) {\n+            LOG.error(\"During connector properties deserialization\", t);\n+        }\n+\n+        return result;\n     }\n \n-    public void setXmlConfiguration(String xmlConfiguration) {\n-        this.xmlConfiguration = xmlConfiguration;\n+    public void setConfiguration(Set<PropertyTO> configuration) {\n+        try {\n+            ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n+            XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n+            encoder.writeObject(configuration);\n+            encoder.flush();\n+            encoder.close();\n+\n+            xmlConfiguration = URLEncoder.encode(tokenContentOS.toString(),\n+                    \"UTF-8\");\n+        } catch (Throwable t) {\n+            LOG.error(\"During connector properties serialization\", t);\n+        }\n     }\n \n     public Long getId() {"},{"sha":"f99f02afb2fbb31ee10c7629163335802353eedb","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":62,"deletions":35,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -36,6 +36,9 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n+/**\n+ * A resource to which propagation occurs.\n+ */\n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n @NamedQueries({\n@@ -66,6 +69,12 @@ public class TargetResource extends AbstractBaseBean {\n      */\n     @Id\n     private String name;\n+    /**\n+     * Should this resource enforce the mandatory constraints?\n+     */\n+    @Column(nullable = false)\n+    @Basic\n+    private Character forceMandatoryConstraint;\n     /**\n      * The resource type is identified by the associated connector.\n      */\n@@ -87,13 +96,24 @@ public class TargetResource extends AbstractBaseBean {\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"resource\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<SchemaMapping> mappings;\n-    @Column(nullable = false)\n-    @Basic\n-    private Character forceMandatoryConstraint;\n+    /**\n+     * Tasks associated to this resource.\n+     */\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"resource\")\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    private List<Task> tasks;\n \n+    /**\n+     * Default constructor.\n+     */\n     public TargetResource() {\n+        super();\n+\n         forceMandatoryConstraint = getBooleanAsCharacter(false);\n+        users = new HashSet<SyncopeUser>();\n+        roles = new HashSet<SyncopeRole>();\n         mappings = new ArrayList<SchemaMapping>();\n+        tasks = new ArrayList<Task>();\n     }\n \n     public boolean isForceMandatoryConstraint() {\n@@ -113,6 +133,25 @@ public void setConnector(ConnectorInstance connector) {\n         this.connector = connector;\n     }\n \n+    public List<Task> getTasks() {\n+        return tasks;\n+    }\n+\n+    public boolean addTask(Task task) {\n+        return this.tasks.add(task);\n+    }\n+\n+    public boolean removeTask(Task task) {\n+        return this.tasks.remove(task);\n+    }\n+\n+    public void setTasks(List<Task> tasks) {\n+        this.tasks.clear();\n+        if (tasks != null && !tasks.isEmpty()) {\n+            this.tasks.addAll(tasks);\n+        }\n+    }\n+\n     public List<SchemaMapping> getMappings() {\n         return mappings;\n     }\n@@ -140,53 +179,41 @@ public void setName(String name) {\n         this.name = name;\n     }\n \n-    public Set<SyncopeRole> getRoles() {\n-        if (this.roles == null) {\n-            this.roles = new HashSet<SyncopeRole>();\n-        }\n-        return this.roles;\n-    }\n-\n     public boolean addRole(SyncopeRole role) {\n-        if (this.roles == null) {\n-            this.roles = new HashSet<SyncopeRole>();\n-        }\n-        return this.roles.add(role);\n+        return roles.add(role);\n     }\n \n     public boolean removeRole(SyncopeRole role) {\n-        if (this.roles == null) {\n-            return true;\n-        }\n-        return this.roles.remove(role);\n+        return roles.remove(role);\n     }\n \n-    public void setRoles(Set<SyncopeRole> roles) {\n-        this.roles = roles;\n+    public Set<SyncopeRole> getRoles() {\n+        return roles;\n     }\n \n-    public Set<SyncopeUser> getUsers() {\n-        if (this.users == null) {\n-            this.users = new HashSet<SyncopeUser>();\n+    public void setRoles(Set<SyncopeRole> roles) {\n+        this.roles.clear();\n+        if (roles != null && !roles.isEmpty()) {\n+            this.roles.addAll(roles);\n         }\n-        return this.users;\n     }\n \n     public boolean addUser(SyncopeUser user) {\n-        if (this.users == null) {\n-            this.users = new HashSet<SyncopeUser>();\n-        }\n-        return this.users.add(user);\n+        return users.add(user);\n     }\n \n     public boolean removeUser(SyncopeUser user) {\n-        if (this.users == null) {\n-            return true;\n-        }\n-        return this.users.remove(user);\n+        return users.remove(user);\n+    }\n+\n+    public Set<SyncopeUser> getUsers() {\n+        return users;\n     }\n \n     public void setUsers(Set<SyncopeUser> users) {\n-        this.users = users;\n+        this.users.clear();\n+        if (users != null && !users.isEmpty()) {\n+            this.users.addAll(users);\n+        }\n     }\n }"},{"sha":"aa339bfd6c57a9aa8e90756e097cb994bce2f69d","filename":"core/src/main/java/org/syncope/core/persistence/beans/Task.java","status":"added","additions":191,"deletions":0,"changes":191,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,191 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import com.thoughtworks.xstream.XStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import org.hibernate.annotations.Cascade;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.core.persistence.util.ApplicationContextManager;\n+import org.syncope.types.PropagationMode;\n+import org.syncope.types.ResourceOperationType;\n+\n+/**\n+ * Encapsulate all information about a propagation task.\n+ */\n+@Entity\n+public class Task extends AbstractBaseBean {\n+\n+    /**\n+     * Id.\n+     */\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long id;\n+    /**\n+     * @see PropagationMode\n+     */\n+    @Enumerated(EnumType.STRING)\n+    @Column(nullable = false)\n+    private PropagationMode propagationMode;\n+    /**\n+     * @see ResourceOperationType\n+     */\n+    @Enumerated(EnumType.STRING)\n+    @Column(nullable = false)\n+    private ResourceOperationType resourceOperationType;\n+    /**\n+     * The accountId on the target resource.\n+     */\n+    private String accountId;\n+    /**\n+     * The (optional) former accountId on the target resource.\n+     */\n+    private String oldAccountId;\n+    /**\n+     * Attributes to be propagated.\n+     */\n+    @Lob\n+    @Column(nullable = false)\n+    private String xmlAttributes;\n+    /**\n+     * TargetResource to which the propagation happens.\n+     */\n+    @ManyToOne\n+    private TargetResource resource;\n+    /**\n+     * When this task has been (or will be) executed, what its result was.\n+     */\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"task\",\n+    fetch = FetchType.LAZY)\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    private List<TaskExecution> executions;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public Task() {\n+        super();\n+\n+        executions = new ArrayList<TaskExecution>();\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public String getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(String accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public String getOldAccountId() {\n+        return oldAccountId;\n+    }\n+\n+    public void setOldAccountId(String oldAccountId) {\n+        this.oldAccountId = oldAccountId;\n+    }\n+\n+    public Set<Attribute> getAttributes() {\n+        Set<Attribute> result = Collections.EMPTY_SET;\n+\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+        XStream xStream = (XStream) context.getBean(\"xStream\");\n+        try {\n+            result = (Set<Attribute>) xStream.fromXML(xmlAttributes);\n+        } catch (Throwable t) {\n+            LOG.error(\"During attribute deserialization\", t);\n+        }\n+\n+        return result;\n+    }\n+\n+    public void setAttributes(final Set<Attribute> attributes) {\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+        XStream xStream = (XStream) context.getBean(\"xStream\");\n+        try {\n+            xmlAttributes = xStream.toXML(attributes);\n+        } catch (Throwable t) {\n+            LOG.error(\"During attribute serialization\", t);\n+        }\n+    }\n+\n+    public boolean addExecution(TaskExecution execution) {\n+        return executions.add(execution);\n+    }\n+\n+    public boolean removeExecution(TaskExecution execution) {\n+        return executions.remove(execution);\n+    }\n+\n+    public List<TaskExecution> getExecutions() {\n+        return executions;\n+    }\n+\n+    public void setExecutions(List<TaskExecution> executions) {\n+        this.executions.clear();\n+        if (executions != null && !executions.isEmpty()) {\n+            this.executions.addAll(executions);\n+        }\n+    }\n+\n+    public PropagationMode getPropagationMode() {\n+        return propagationMode;\n+    }\n+\n+    public void setPropagationMode(PropagationMode propagationMode) {\n+        this.propagationMode = propagationMode;\n+    }\n+\n+    public ResourceOperationType getResourceOperationType() {\n+        return resourceOperationType;\n+    }\n+\n+    public void setResourceOperationType(\n+            final ResourceOperationType resourceOperationType) {\n+\n+        this.resourceOperationType = resourceOperationType;\n+    }\n+\n+    public TargetResource getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(TargetResource resource) {\n+        this.resource = resource;\n+    }\n+}"},{"sha":"c1ac07424971cd0d6d5cba165aca8929fd71124b","filename":"core/src/main/java/org/syncope/core/persistence/beans/TaskExecution.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,133 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import org.syncope.types.TaskExecutionStatus;\n+\n+/**\n+ * An execution (with result) of a Task.\n+ * @see Task\n+ */\n+@Entity\n+public class TaskExecution extends AbstractBaseBean {\n+\n+    /**\n+     * Id.\n+     */\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long id;\n+    /**\n+     * Start instant of this execution.\n+     */\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date startDate;\n+    /**\n+     * End instant of this execution.\n+     */\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date endDate;\n+    /**\n+     * Did this execution completed with success?\n+     */\n+    @Enumerated(EnumType.STRING)\n+    private TaskExecutionStatus status;\n+    /**\n+     * Any information to be accompained to this execution's result.\n+     */\n+    @Lob\n+    private String message;\n+    /**\n+     * The referred task.\n+     */\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    private Task task;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public TaskExecution() {\n+        super();\n+\n+        status = TaskExecutionStatus.CREATED;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate;\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate;\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate;\n+    }\n+\n+    public TaskExecutionStatus getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(TaskExecutionStatus status) {\n+        this.status = status;\n+    }\n+\n+    public Task getTask() {\n+        return task;\n+    }\n+\n+    public void setTask(Task task) {\n+        this.task = task;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"TaskExecution{\"\n+                + \"id=\" + id + \", \"\n+                + \"startDate=\" + startDate + \", \"\n+                + \"endDate=\" + endDate + \", \"\n+                + \"status=\" + status + \", \"\n+                + \"task=\" + task + \", \"\n+                + \"message=\" + message + '}';\n+    }\n+}"},{"sha":"898b308c420c137b1ca3598d0da921d468b637b4","filename":"core/src/main/java/org/syncope/core/persistence/dao/TaskDAO.java","status":"renamed","additions":8,"deletions":19,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -12,31 +12,20 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.client.to;\n+package org.syncope.core.persistence.dao;\n \n-import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n-import org.syncope.client.AbstractBaseBean;\n+import org.syncope.core.persistence.beans.Task;\n \n-public class RoleTOs extends AbstractBaseBean implements Iterable<RoleTO> {\n+public interface TaskDAO extends DAO {\n \n-    private List<RoleTO> roles;\n+    Task find(Long id);\n \n-    public RoleTOs() {\n-        roles = new ArrayList<RoleTO>();\n-    }\n+    List<Task> findAll();\n \n-    public List<RoleTO> getRoles() {\n-        return roles;\n-    }\n+    Task save(Task task);\n \n-    public void setRoles(List<RoleTO> roles) {\n-        this.roles = roles;\n-    }\n+    void delete(Long id);\n \n-    @Override\n-    public Iterator<RoleTO> iterator() {\n-        return roles.iterator();\n-    }\n+    void delete(Task task);\n }","previous_filename":"client/src/main/java/org/syncope/client/to/RoleTOs.java"},{"sha":"1c09039b263960e3e6126eb20064053a94a87890","filename":"core/src/main/java/org/syncope/core/persistence/dao/TaskExecutionDAO.java","status":"renamed","additions":8,"deletions":19,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecutionDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecutionDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecutionDAO.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -12,31 +12,20 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.client.to;\n+package org.syncope.core.persistence.dao;\n \n-import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n-import org.syncope.client.AbstractBaseBean;\n+import org.syncope.core.persistence.beans.TaskExecution;\n \n-public class SchemaTOs extends AbstractBaseBean implements Iterable<SchemaTO> {\n+public interface TaskExecutionDAO extends DAO {\n \n-    private List<SchemaTO> schemas;\n+    TaskExecution find(Long id);\n \n-    public SchemaTOs() {\n-        schemas = new ArrayList<SchemaTO>();\n-    }\n+    List<TaskExecution> findAll();\n \n-    public List<SchemaTO> getSchemas() {\n-        return schemas;\n-    }\n+    TaskExecution save(TaskExecution execution);\n \n-    public void setSchemas(List<SchemaTO> schemas) {\n-        this.schemas = schemas;\n-    }\n+    void delete(Long id);\n \n-    @Override\n-    public Iterator<SchemaTO> iterator() {\n-        return schemas.iterator();\n-    }\n+    void delete(TaskExecution execution);\n }","previous_filename":"client/src/main/java/org/syncope/client/to/SchemaTOs.java"},{"sha":"a751cabfb300e3d8308a0cbead2bdbf56da188f2","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":9,"deletions":19,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,9 +14,7 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n@@ -119,31 +117,23 @@ public void deleteMappings(final String schemaName,\n     }\n \n     @Override\n-    public void delete(String name) {\n+    public void delete(final String name) {\n         TargetResource resource = find(name);\n         if (resource == null) {\n             return;\n         }\n \n-        // --------------------------------------\n-        // Remove all mappings\n-        // --------------------------------------\n         resource.getMappings().clear();\n-        // --------------------------------------\n \n-        Set<SyncopeUser> users = resource.getUsers();\n-        if (users != null && !users.isEmpty()) {\n-            for (SyncopeUser user : users) {\n-                user.removeTargetResource(resource);\n-            }\n+        resource.getTasks().clear();\n+\n+        for (SyncopeUser user : resource.getUsers()) {\n+            user.removeTargetResource(resource);\n         }\n         resource.getUsers().clear();\n \n-        Set<SyncopeRole> roles = resource.getRoles();\n-        if (roles != null && !roles.isEmpty()) {\n-            for (SyncopeRole role : roles) {\n-                role.removeTargetResource(resource);\n-            }\n+        for (SyncopeRole role : resource.getRoles()) {\n+            role.removeTargetResource(resource);\n         }\n         resource.getRoles().clear();\n "},{"sha":"22ea2a91acd638fe5dbbae19d7a283ac9236e3e6","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.dao.TaskDAO;\n+\n+@Repository\n+public class TaskDAOImpl extends AbstractDAOImpl\n+        implements TaskDAO {\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Task find(final Long id) {\n+        return entityManager.find(Task.class, id);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<Task> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM Task e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Task save(final Task task) {\n+        return entityManager.merge(task);\n+    }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        Task task = find(id);\n+        if (task == null) {\n+            return;\n+        }\n+\n+        delete(task);\n+    }\n+\n+    @Override\n+    public void delete(final Task task) {\n+        if (task.getResource() != null) {\n+            task.getResource().removeTask(task);\n+        }\n+\n+        entityManager.remove(task);\n+    }\n+}"},{"sha":"873d63a2c8c0f46050734d305885e84680234fb0","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskExecutionDAOImpl.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecutionDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecutionDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecutionDAOImpl.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.TaskExecution;\n+import org.syncope.core.persistence.dao.TaskExecutionDAO;\n+\n+@Repository\n+public class TaskExecutionDAOImpl extends AbstractDAOImpl\n+        implements TaskExecutionDAO {\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public TaskExecution find(final Long id) {\n+        return entityManager.find(TaskExecution.class, id);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<TaskExecution> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM TaskExecution e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public TaskExecution save(final TaskExecution execution) {\n+        return entityManager.merge(execution);\n+    }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        TaskExecution execution = find(id);\n+        if (execution == null) {\n+            return;\n+        }\n+\n+        delete(execution);\n+    }\n+\n+    @Override\n+    public void delete(final TaskExecution execution) {\n+        if (execution.getTask() != null) {\n+            execution.getTask().removeExecution(execution);\n+        }\n+\n+        entityManager.remove(execution);\n+    }\n+}"},{"sha":"cdd8d52e0078a0bb629ea44f3c4ab8711410f1ac","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ConnectorFacadeProxy.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -32,6 +32,7 @@\n import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.types.ConnectorCapability;\n+import org.syncope.types.PropagationMode;\n \n /**\n  * Intercept calls to ConnectorFacade's methods and check if the correspondant\n@@ -121,10 +122,7 @@ public ConnectorFacadeProxy(final ConnectorInstance connectorInstance)\n         }\n \n         // Set all of the ConfigurationProperties needed by the connector.\n-        Set<PropertyTO> configuration =\n-                (Set<PropertyTO>) ConnectorInstanceLoader.buildFromXML(\n-                connectorInstance.getXmlConfiguration());\n-        for (PropertyTO property : configuration) {\n+        for (PropertyTO property : connectorInstance.getConfiguration()) {\n             properties.setPropertyValue(\n                     property.getKey(), property.getValue());\n         }\n@@ -146,14 +144,14 @@ public ConnectorFacadeProxy(final ConnectorInstance connectorInstance)\n         this.capabitilies = connectorInstance.getCapabilities();\n     }\n \n-    public Uid create(final PropagationManager.PropagationMode propagationMode,\n+    public Uid create(final PropagationMode propagationMode,\n             final ObjectClass oclass,\n             final Set<Attribute> attrs,\n             final OperationOptions options) {\n \n         Uid result = null;\n \n-        if (propagationMode == PropagationManager.PropagationMode.SYNC\n+        if (propagationMode == PropagationMode.SYNC\n                 ? capabitilies.contains(\n                 ConnectorCapability.SYNC_CREATE)\n                 : capabitilies.contains(\n@@ -181,15 +179,15 @@ public Uid resolveUsername(final ObjectClass objectClass,\n         return result;\n     }\n \n-    public Uid update(final PropagationManager.PropagationMode propagationMode,\n+    public Uid update(final PropagationMode propagationMode,\n             final ObjectClass objclass,\n             final Uid uid,\n             final Set<Attribute> replaceAttributes,\n             final OperationOptions options) {\n \n         Uid result = uid;\n \n-        if (propagationMode == PropagationManager.PropagationMode.SYNC\n+        if (propagationMode == PropagationMode.SYNC\n                 ? capabitilies.contains(\n                 ConnectorCapability.SYNC_UPDATE)\n                 : capabitilies.contains(\n@@ -205,12 +203,12 @@ public Uid update(final PropagationManager.PropagationMode propagationMode,\n         return result;\n     }\n \n-    public void delete(final PropagationManager.PropagationMode propagationMode,\n+    public void delete(final PropagationMode propagationMode,\n             final ObjectClass objClass,\n             final Uid uid,\n             final OperationOptions options) {\n \n-        if (propagationMode == PropagationManager.PropagationMode.SYNC\n+        if (propagationMode == PropagationMode.SYNC\n                 ? capabitilies.contains(\n                 ConnectorCapability.SYNC_DELETE)\n                 : capabitilies.contains("},{"sha":"4727e7e80f40d2e57a8bb2f4703d0972b48bd6f8","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationException.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationException.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,16 +16,18 @@\n \n public class PropagationException extends Exception {\n \n-    private String resource;\n+    private final String resourceName;\n \n-    public PropagationException(String message, String resource,\n-            Throwable cause) {\n+    public PropagationException(final String resourceName,\n+            final String stackTrace) {\n \n-        super(message, cause);\n-        this.resource = resource;\n+        super(\"Exception during provision on resource \" + resourceName\n+                + \"\\n\" + stackTrace);\n+\n+        this.resourceName = resourceName;\n     }\n \n-    public String getResource() {\n-        return resource;\n+    public String getResourceName() {\n+        return resourceName;\n     }\n }"},{"sha":"fe8368322c99718249b9fcfef1a24431d524415a","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":197,"deletions":208,"changes":405,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -14,7 +14,10 @@\n  */\n package org.syncope.core.persistence.propagation;\n \n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -29,28 +32,34 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.beans.TaskExecution;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttribute;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.TaskDAO;\n+import org.syncope.types.PropagationMode;\n+import org.syncope.types.ResourceOperationType;\n import org.syncope.types.SchemaType;\n import org.syncope.types.SchemaValueType;\n+import org.syncope.types.TaskExecutionStatus;\n \n /**\n  * Manage the data propagation to target resources.\n  */\n+@Transactional(rollbackFor = {\n+    Throwable.class\n+})\n public class PropagationManager {\n \n-    public enum PropagationMode {\n-\n-        SYNC, ASYNC\n-    }\n     /**\n      * Logger.\n      */\n@@ -61,18 +70,22 @@ public enum PropagationMode {\n      */\n     @Autowired\n     private SchemaDAO schemaDAO;\n+    /**\n+     * Task DAO.\n+     */\n+    @Autowired\n+    private TaskDAO taskDAO;\n \n     /**\n      * Create the user on every associated resource.\n      * Exceptions will be ignored.\n      * @param user to be created.\n-     * @return a set of provisioned resources.\n      * @throws PropagationException\n      */\n-    public final Set<String> create(final SyncopeUser user)\n+    public void create(final SyncopeUser user)\n             throws PropagationException {\n \n-        return create(user, null);\n+        create(user, Collections.EMPTY_SET);\n     }\n \n     /**\n@@ -84,12 +97,15 @@ public final Set<String> create(final SyncopeUser user)\n      * @param user to be created.\n      * @param syncResourceNames to ask for a synchronous or\n      * asynchronous provisioning.\n-     * @return a set of provisioned resources.\n      * @throws PropagationException\n      */\n-    public Set<String> create(SyncopeUser user, Set<String> syncResourceNames)\n+    public void create(SyncopeUser user, Set<String> syncResourceNames)\n             throws PropagationException {\n \n+        if (syncResourceNames == null) {\n+            syncResourceNames = Collections.EMPTY_SET;\n+        }\n+\n         Set<TargetResource> resources = new HashSet<TargetResource>();\n         for (TargetResource resource : user.getTargetResources()) {\n             resources.add(resource);\n@@ -99,9 +115,9 @@ public Set<String> create(SyncopeUser user, Set<String> syncResourceNames)\n         }\n \n         ResourceOperations resourceOperations = new ResourceOperations();\n-        resourceOperations.set(ResourceOperations.Type.CREATE, resources);\n+        resourceOperations.set(ResourceOperationType.CREATE, resources);\n \n-        return provision(user, resourceOperations, syncResourceNames);\n+        provision(user, resourceOperations, syncResourceNames);\n     }\n \n     /**\n@@ -113,20 +129,27 @@ public Set<String> create(SyncopeUser user, Set<String> syncResourceNames)\n      * @param user to be updated.\n      * @param affectedResources resources affected by this update\n      * @param syncResourceNames to ask for a synchronous or asynchronous update.\n-     * @return a set of updated resources.\n      * @throws PropagationException\n      */\n-    public Set<String> update(SyncopeUser user,\n+    public void update(SyncopeUser user,\n             ResourceOperations resourceOperations,\n             Set<String> syncResourceNames)\n             throws PropagationException {\n \n-        return provision(user, resourceOperations, syncResourceNames);\n+        if (syncResourceNames == null) {\n+            syncResourceNames = Collections.EMPTY_SET;\n+        }\n+\n+        provision(user, resourceOperations, syncResourceNames);\n     }\n \n-    public Set<String> delete(SyncopeUser user, Set<String> syncResourceNames)\n+    public void delete(SyncopeUser user, Set<String> syncResourceNames)\n             throws PropagationException {\n \n+        if (syncResourceNames == null) {\n+            syncResourceNames = Collections.EMPTY_SET;\n+        }\n+\n         Set<TargetResource> resources = new HashSet<TargetResource>();\n         for (TargetResource resource : user.getTargetResources()) {\n             resources.add(resource);\n@@ -136,124 +159,87 @@ public Set<String> delete(SyncopeUser user, Set<String> syncResourceNames)\n         }\n \n         ResourceOperations resourceOperations = new ResourceOperations();\n-        resourceOperations.set(ResourceOperations.Type.DELETE, resources);\n+        resourceOperations.set(ResourceOperationType.DELETE, resources);\n \n-        return provision(user, resourceOperations, syncResourceNames);\n+        provision(user, resourceOperations, syncResourceNames);\n     }\n \n     /**\n      * Implementation of the provisioning feature.\n      * @param user\n      * @param syncResourceNames\n      * @param merge\n-     * @return provisioned resources\n      * @throws PropagationException\n      */\n-    private Set<String> provision(\n+    private void provision(\n             final SyncopeUser user,\n             final ResourceOperations resourceOperations,\n-            Set<String> syncResourceNames)\n+            final Set<String> syncResourceNames)\n             throws PropagationException {\n \n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Provisioning with user \" + user + \":\\n\"\n                     + resourceOperations);\n         }\n \n-        // set of provisioned resources\n-        final Set<String> provisioned = new HashSet<String>();\n-\n         // Avoid duplicates - see javadoc\n         resourceOperations.purge();\n-\n-        // Resource to be provisioned synchronously\n-        final ResourceOperations syncOperations = new ResourceOperations();\n-        syncOperations.setOldAccountId(resourceOperations.getOldAccountId());\n-\n-        // Resource to be provisioned asynchronously\n-        final ResourceOperations asyncOperations = new ResourceOperations();\n-        asyncOperations.setOldAccountId(resourceOperations.getOldAccountId());\n-\n-        for (ResourceOperations.Type type : ResourceOperations.Type.values()) {\n-            for (TargetResource resource : resourceOperations.get(type)) {\n-                if (syncResourceNames != null\n-                        && syncResourceNames.contains(resource.getName())) {\n-\n-                    syncOperations.add(type, resource);\n-                } else {\n-                    asyncOperations.add(type, resource);\n-                }\n-            }\n-        }\n-\n-        // synchronous propagation ...\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Synchronous provisioning with user \" + user + \":\\n\"\n-                    + syncOperations);\n+            LOG.debug(\"After purge: \" + resourceOperations);\n         }\n \n-        for (ResourceOperations.Type resOpeType :\n-                ResourceOperations.Type.values()) {\n-            for (TargetResource resource : syncOperations.get(resOpeType)) {\n-                try {\n-                    Map<String, Set<Attribute>> preparedAttributes =\n-                            prepareAttributes(user, resource);\n-                    String accountId =\n-                            preparedAttributes.keySet().iterator().next();\n-                    Set<Attribute> attributes =\n-                            manipulateSyncAttributes(\n-                            preparedAttributes.values().iterator().next());\n-                    propagate(resource, resOpeType, PropagationMode.SYNC,\n-                            accountId, syncOperations.getOldAccountId(),\n-                            attributes);\n-\n-                    provisioned.add(resource.getName());\n-                } catch (Throwable t) {\n-                    LOG.error(\"Exception during provision on resource \"\n-                            + resource.getName(), t);\n-\n-                    throw new PropagationException(\n-                            \"Exception during provision on resource \"\n-                            + resource.getName(), resource.getName(), t);\n+        Task task;\n+        TaskExecution taskExecution;\n+        for (ResourceOperationType type : ResourceOperationType.values()) {\n+            for (TargetResource resource : resourceOperations.get(type)) {\n+                Map<String, Set<Attribute>> preparedAttributes =\n+                        prepareAttributes(user, resource);\n+                String accountId =\n+                        preparedAttributes.keySet().iterator().next();\n+                Set<Attribute> attributes =\n+                        manipulateSyncAttributes(\n+                        preparedAttributes.values().iterator().next());\n+\n+                task = new Task();\n+                task.setResource(resource);\n+                task.setResourceOperationType(type);\n+                task.setPropagationMode(\n+                        syncResourceNames.contains(resource.getName())\n+                        ? PropagationMode.SYNC : PropagationMode.ASYNC);\n+                task.setAccountId(accountId);\n+                task.setOldAccountId(resourceOperations.getOldAccountId());\n+                task.setAttributes(attributes);\n+\n+                taskExecution = new TaskExecution();\n+                taskExecution.setTask(task);\n+                task.addExecution(taskExecution);\n+\n+                task = taskDAO.save(task);\n+                // re-read it after saving\n+                taskExecution = task.getExecutions().get(0);\n+\n+                propagate(taskExecution);\n+                if (syncResourceNames.contains(resource.getName())\n+                        && taskExecution.getStatus()\n+                        != TaskExecutionStatus.SUCCESS) {\n+\n+                    throw new PropagationException(resource.getName(),\n+                            taskExecution.getMessage());\n                 }\n             }\n         }\n+    }\n \n-        // asynchronous propagation ...\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Asynchronous provisioning with user \" + user + \":\\n\"\n-                    + asyncOperations);\n-        }\n+    protected Set<Attribute> manipulateSyncAttributes(\n+            final Set<Attribute> attributes) {\n \n-        for (ResourceOperations.Type type : ResourceOperations.Type.values()) {\n-            for (TargetResource resource : asyncOperations.get(type)) {\n-                try {\n-                    Map<String, Set<Attribute>> preparedAttributes =\n-                            prepareAttributes(user, resource);\n-                    String accountId =\n-                            preparedAttributes.keySet().iterator().next();\n-                    Set<Attribute> attributes =\n-                            manipulateAsyncAttributes(\n-                            preparedAttributes.values().iterator().next());\n-                    propagate(resource, type, PropagationMode.ASYNC,\n-                            accountId, asyncOperations.getOldAccountId(),\n-                            attributes);\n-\n-                    provisioned.add(resource.getName());\n-                } catch (Throwable t) {\n-                    LOG.error(\"Exception during provision on resource \"\n-                            + resource.getName(), t);\n-                }\n-            }\n-        }\n+        return attributes;\n+    }\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\n-                    \"Provisioned \" + provisioned\n-                    + \" with user \" + user.getId());\n-        }\n+    protected Set<Attribute> manipulateAsyncAttributes(\n+            final Set<Attribute> attributes) {\n \n-        return provisioned;\n+        return attributes;\n     }\n \n     private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n@@ -265,12 +251,6 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                     + \" with attributes: \" + user.getAttributes());\n         }\n \n-        // get password\n-        String password = user.getPassword();\n-\n-        // get mapping\n-        List<SchemaMapping> mappings = resource.getMappings();\n-\n         // set of user attributes\n         Set<Attribute> attributes = new HashSet<Attribute>();\n \n@@ -280,52 +260,37 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n         // account id\n         String accountId = null;\n \n-        // resource field\n-        String field = null;\n         // resource field values\n         Set objValues = null;\n \n-        // syncope attribute schema name\n-        String schemaName = null;\n-        // schema type\n-        SchemaType schemaType = null;\n-\n         // syncope user attribute\n         UserAttribute userAttribute = null;\n         // syncope user attribute schema type\n         SchemaValueType schemaValueType = null;\n         // syncope user attribute values\n         List<UserAttributeValue> values = null;\n \n-        for (SchemaMapping mapping : mappings) {\n-            try {\n-                // get field name on target resource\n-                field = mapping.getField();\n-\n-                // get schema name on syncope\n-                schemaName = mapping.getSchemaName();\n-                schemaType = mapping.getSchemaType();\n-\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\n-                            \"Process schema \" + schemaName\n-                            + \"(\" + schemaType.getClassName() + \").\");\n-                }\n+        for (SchemaMapping mapping : resource.getMappings()) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Process schema \" + mapping.getSchemaName()\n+                        + \"(\" + mapping.getSchemaType().getClassName()\n+                        + \")\");\n+            }\n \n+            try {\n                 AbstractSchema schema = null;\n-\n                 try {\n                     // check for schema or constants (AccountId/Password)\n-                    schemaType.getSchemaClass().asSubclass(\n+                    mapping.getSchemaType().getSchemaClass().asSubclass(\n                             AbstractSchema.class);\n \n-                    schema = schemaDAO.find(schemaName,\n-                            schemaType.getSchemaClass());\n+                    schema = schemaDAO.find(mapping.getSchemaName(),\n+                            mapping.getSchemaType().getSchemaClass());\n                 } catch (ClassCastException e) {\n                     // ignore exception ... check for AccountId or Password\n                     if (LOG.isDebugEnabled()) {\n                         LOG.debug(\"Wrong schema type \"\n-                                + schemaType.getClassName());\n+                                + mapping.getSchemaType().getClassName());\n                     }\n                 }\n \n@@ -334,42 +299,44 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                     schemaValueType = schema.getType();\n \n                     // get user attribute object\n-                    userAttribute = user.getAttribute(schemaName);\n+                    userAttribute = user.getAttribute(mapping.getSchemaName());\n \n                     values = userAttribute != null\n                             ? userAttribute.getValues()\n                             : Collections.EMPTY_LIST;\n \n                     if (LOG.isDebugEnabled()) {\n                         LOG.debug(\"Retrieved attribute \" + userAttribute\n-                                + \"\\n* Schema \" + schemaName\n-                                + \"\\n* Schema type \" + schemaType.getClassName()\n+                                + \"\\n* Schema \" + mapping.getSchemaName()\n+                                + \"\\n* Schema type \"\n+                                + mapping.getSchemaType().getClassName()\n                                 + \"\\n* Attribute values \" + values);\n                     }\n-\n                 } else {\n                     schemaValueType = SchemaValueType.String;\n \n                     UserAttributeValue userAttributeValue =\n                             new UserAttributeValue();\n \n                     userAttributeValue.setStringValue(\n-                            SchemaType.AccountId.equals(schemaType)\n-                            ? user.getId().toString() : password);\n+                            SchemaType.AccountId.equals(mapping.getSchemaType())\n+                            ? user.getId().toString() : user.getPassword());\n \n                     values = Collections.singletonList(userAttributeValue);\n                 }\n \n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Define mapping for: \"\n-                            + \"\\n* Field \" + field\n+                            + \"\\n* Field \" + mapping.getField()\n                             + \"\\n* is accountId \" + mapping.isAccountid()\n                             + \"\\n* is password \" + (mapping.isPassword()\n-                            || schemaType.equals(SchemaType.Password))\n+                            || mapping.getSchemaType().equals(\n+                            SchemaType.Password))\n                             + \"\\n* nullable condition \"\n                             + mapping.getMandatoryCondition()\n-                            + \"\\n* Schema \" + schemaName\n-                            + \"\\n* SchemaType \" + schemaType.toString()\n+                            + \"\\n* Schema \" + mapping.getSchemaName()\n+                            + \"\\n* SchemaType \"\n+                            + mapping.getSchemaType().toString()\n                             + \"\\n* ClassType \" + schemaValueType.getClassName()\n                             + \"\\n* Values \" + values);\n                 }\n@@ -405,30 +372,26 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                             toCharArray()));\n                 }\n \n-                Object objValue = null;\n-                if (!objValues.isEmpty()) {\n-                    objValue = objValues.iterator().next();\n-                }\n-\n                 if (!mapping.isPassword() && !mapping.isAccountid()) {\n                     if (schema != null && schema.isMultivalue()) {\n                         attributes.add(AttributeBuilder.build(\n-                                field,\n+                                mapping.getField(),\n                                 objValues));\n                     } else {\n-                        attributes.add(AttributeBuilder.build(\n-                                field,\n-                                castToBeApplied.cast(objValue)));\n+                        attributes.add(objValues.isEmpty()\n+                                ? AttributeBuilder.build(\n+                                mapping.getField())\n+                                : AttributeBuilder.build(\n+                                mapping.getField(),\n+                                objValues.iterator().next()));\n                     }\n                 }\n             } catch (ClassNotFoundException e) {\n-                if (LOG.isWarnEnabled()) {\n-                    LOG.warn(\"Unsupported attribute type \"\n-                            + schemaValueType.getClassName(), e);\n-                }\n+                LOG.warn(\"Unsupported attribute type \"\n+                        + schemaValueType.getClassName(), e);\n             } catch (Throwable t) {\n                 if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Attribute '\" + schemaName\n+                    LOG.debug(\"Attribute '\" + mapping.getSchemaName()\n                             + \"' processing failed\", t);\n                 }\n             }\n@@ -437,67 +400,93 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n         return Collections.singletonMap(accountId, attributes);\n     }\n \n-    protected Set<Attribute> manipulateSyncAttributes(\n-            final Set<Attribute> attributes) {\n-\n-        return attributes;\n-    }\n-\n-    protected Set<Attribute> manipulateAsyncAttributes(\n-            final Set<Attribute> attributes) {\n+    public void propagate(final TaskExecution execution) {\n+        execution.setStartDate(new Date());\n \n-        return attributes;\n-    }\n+        try {\n+            ConnectorInstance connectorInstance = execution.getTask().\n+                    getResource().\n+                    getConnector();\n \n-    private void propagate(TargetResource resource,\n-            ResourceOperations.Type resourceOperationType,\n-            PropagationMode operationMode,\n-            String accountId, String oldAccountId, Set<Attribute> attrs)\n-            throws NoSuchBeanDefinitionException, IllegalStateException {\n+            ConnectorFacadeProxy connector = ConnectorInstanceLoader.\n+                    getConnector(\n+                    connectorInstance.getId().toString());\n \n-        ConnectorInstance connectorInstance = resource.getConnector();\n+            if (connector == null) {\n+                LOG.error(\"Connector instance bean \"\n+                        + connectorInstance.getId().toString() + \" not found\");\n \n-        ConnectorFacadeProxy connector = ConnectorInstanceLoader.getConnector(\n-                connectorInstance.getId().toString());\n+                throw new NoSuchBeanDefinitionException(\n+                        \"Connector instance bean not found\");\n+            }\n \n-        if (connector == null) {\n-            LOG.error(\"Connector instance bean \"\n-                    + connectorInstance.getId().toString() + \" not found\");\n+            switch (execution.getTask().getResourceOperationType()) {\n+                case CREATE:\n+                case UPDATE:\n+                    Uid userUid = null;\n+                    try {\n+                        userUid = connector.resolveUsername(ObjectClass.ACCOUNT,\n+                                execution.getTask().getOldAccountId() == null\n+                                ? execution.getTask().getAccountId()\n+                                : execution.getTask().getOldAccountId(),\n+                                null);\n+                    } catch (RuntimeException ignore) {\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"To be ignored, \"\n+                                    + \"when resolving username on connector\",\n+                                    ignore);\n+                        }\n+                    }\n \n-            throw new NoSuchBeanDefinitionException(\n-                    \"Connector instance bean not found\");\n-        }\n+                    if (userUid != null) {\n+                        connector.update(\n+                                execution.getTask().getPropagationMode(),\n+                                ObjectClass.ACCOUNT,\n+                                userUid,\n+                                execution.getTask().getAttributes(),\n+                                null);\n+                    } else {\n+                        connector.create(\n+                                execution.getTask().getPropagationMode(),\n+                                ObjectClass.ACCOUNT,\n+                                execution.getTask().getAttributes(),\n+                                null);\n+                    }\n+                    break;\n \n-        switch (resourceOperationType) {\n-            case CREATE:\n-            case UPDATE:\n-                Uid userUid = null;\n-                try {\n-                    userUid = connector.resolveUsername(ObjectClass.ACCOUNT,\n-                            oldAccountId == null ? accountId : oldAccountId,\n+                case DELETE:\n+                    connector.delete(execution.getTask().getPropagationMode(),\n+                            ObjectClass.ACCOUNT,\n+                            new Uid(execution.getTask().getAccountId()),\n                             null);\n-                } catch (RuntimeException ignore) {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"To be ignored, \"\n-                                + \"when resolving username on connector\",\n-                                ignore);\n-                    }\n-                }\n+                    break;\n \n-                if (userUid != null) {\n-                    connector.update(operationMode,\n-                            ObjectClass.ACCOUNT, userUid, attrs, null);\n-                } else {\n-                    connector.create(operationMode,\n-                            ObjectClass.ACCOUNT, attrs, null);\n-                }\n+                default:\n+            }\n \n-                break;\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Succesfully propagated to resource \"\n+                        + execution.getTask().getResource().getName());\n+            }\n \n-            case DELETE:\n-                connector.delete(operationMode,\n-                        ObjectClass.ACCOUNT, new Uid(accountId), null);\n-                break;\n+            execution.setStatus(execution.getTask().getPropagationMode()\n+                    == PropagationMode.SYNC\n+                    ? TaskExecutionStatus.SUCCESS\n+                    : TaskExecutionStatus.SUBMITTED);\n+        } catch (Throwable t) {\n+            LOG.error(\"Exception during provision on resource \"\n+                    + execution.getTask().getResource().getName(), t);\n+\n+            StringWriter execeptionWriter = new StringWriter();\n+            t.printStackTrace(new PrintWriter(execeptionWriter));\n+            execution.setMessage(execeptionWriter.toString());\n+\n+            execution.setStatus(execution.getTask().getPropagationMode()\n+                    == PropagationMode.SYNC\n+                    ? TaskExecutionStatus.FAILURE\n+                    : TaskExecutionStatus.UNSUBMITTED);\n+        } finally {\n+            execution.setEndDate(new Date());\n         }\n     }\n }"},{"sha":"9518bfa966eaf9968ee55558fcc373162273971c","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ResourceOperations.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FResourceOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FResourceOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FResourceOperations.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -18,13 +18,10 @@\n import java.util.HashSet;\n import java.util.Set;\n import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.types.ResourceOperationType;\n \n public class ResourceOperations {\n \n-    public enum Type {\n-\n-        CREATE, UPDATE, DELETE\n-    }\n     private Set<TargetResource> toBeCreated;\n     private Set<TargetResource> toBeUpdated;\n     private Set<TargetResource> toBeDeleted;\n@@ -51,7 +48,7 @@ public final void purge() {\n         }\n     }\n \n-    public final boolean add(final Type type,\n+    public final boolean add(final ResourceOperationType type,\n             final TargetResource resource) {\n \n         boolean result = false;\n@@ -75,7 +72,9 @@ public final boolean add(final Type type,\n         return result;\n     }\n \n-    public boolean addAll(Type type, Set<TargetResource> resource) {\n+    public boolean addAll(final ResourceOperationType type,\n+            final Set<TargetResource> resource) {\n+\n         boolean result = false;\n \n         switch (type) {\n@@ -97,7 +96,7 @@ public boolean addAll(Type type, Set<TargetResource> resource) {\n         return result;\n     }\n \n-    public final boolean remove(final Type type,\n+    public final boolean remove(final ResourceOperationType type,\n             final TargetResource resource) {\n \n         boolean result = false;\n@@ -121,7 +120,7 @@ public final boolean remove(final Type type,\n         return result;\n     }\n \n-    public final Set<TargetResource> get(final Type type) {\n+    public final Set<TargetResource> get(final ResourceOperationType type) {\n         Set<TargetResource> result = Collections.EMPTY_SET;\n \n         switch (type) {\n@@ -143,7 +142,7 @@ public final Set<TargetResource> get(final Type type) {\n         return result;\n     }\n \n-    public final void set(final Type type,\n+    public final void set(final ResourceOperationType type,\n             final Set<TargetResource> resources) {\n \n         switch (type) {\n@@ -168,9 +167,12 @@ public final void set(final Type type,\n     }\n \n     public final void merge(final ResourceOperations resourceOperations) {\n-        toBeCreated.addAll(resourceOperations.get(Type.CREATE));\n-        toBeUpdated.addAll(resourceOperations.get(Type.UPDATE));\n-        toBeDeleted.addAll(resourceOperations.get(Type.DELETE));\n+        toBeCreated.addAll(\n+                resourceOperations.get(ResourceOperationType.CREATE));\n+        toBeUpdated.addAll(\n+                resourceOperations.get(ResourceOperationType.UPDATE));\n+        toBeDeleted.addAll(\n+                resourceOperations.get(ResourceOperationType.DELETE));\n     }\n \n     public final boolean isEmpty() {"},{"sha":"5aba66c7e036b165777bcce627dd92d9b6b8e3f2","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -21,7 +21,9 @@\n import org.springframework.beans.TypeMismatchException;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = {\n+    Throwable.class\n+})\n public abstract class AbstractController {\n \n     /**"},{"sha":"f5698bbe777389df12cd26d9eb147365e1000a57","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnectorInstanceController.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -15,6 +15,7 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import java.util.ArrayList;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -30,9 +31,7 @@\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConnectorBundleTO;\n-import org.syncope.client.to.ConnectorBundleTOs;\n import org.syncope.client.to.ConnectorInstanceTO;\n-import org.syncope.client.to.ConnectorInstanceTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n@@ -127,19 +126,18 @@ public void delete(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public ConnectorInstanceTOs list() {\n+    public ModelAndView list() {\n \n         List<ConnectorInstance> connectorInstances =\n                 connectorInstanceDAO.findAll();\n \n-        ConnectorInstanceTOs connectorInstanceTOs = new ConnectorInstanceTOs();\n-\n+        List<ConnectorInstanceTO> connectorInstanceTOs =\n+                new ArrayList<ConnectorInstanceTO>();\n         for (ConnectorInstance connector : connectorInstances) {\n-            connectorInstanceTOs.addInstance(\n-                    binder.getConnectorInstanceTO(connector));\n+            connectorInstanceTOs.add(binder.getConnectorInstanceTO(connector));\n         }\n \n-        return connectorInstanceTOs;\n+        return new ModelAndView().addObject(connectorInstanceTOs);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n@@ -189,7 +187,7 @@ public ModelAndView check(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/getBundles\")\n-    public ConnectorBundleTOs getBundles()\n+    public ModelAndView getBundles()\n             throws NotFoundException, MissingConfKeyException {\n \n         ConnectorInfoManager manager =\n@@ -209,7 +207,8 @@ public ConnectorBundleTOs getBundles()\n         ConnectorKey key = null;\n         ConfigurationProperties properties = null;\n \n-        ConnectorBundleTOs connectorBundleTOs = new ConnectorBundleTOs();\n+        List<ConnectorBundleTO> connectorBundleTOs =\n+                new ArrayList<ConnectorBundleTO>();\n         for (ConnectorInfo bundle : bundles) {\n             connectorBundleTO = new ConnectorBundleTO();\n             connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n@@ -236,9 +235,9 @@ public ConnectorBundleTOs getBundles()\n                         + connectorBundleTO.getProperties());\n             }\n \n-            connectorBundleTOs.addBundle(connectorBundleTO);\n+            connectorBundleTOs.add(connectorBundleTO);\n         }\n \n-        return connectorBundleTOs;\n+        return new ModelAndView().addObject(connectorBundleTOs);\n     }\n }"},{"sha":"8e611c8cbdb0c2d3be27ac4bcf43acf6904c8738","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -24,8 +24,8 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.DerivedSchemaTO;\n-import org.syncope.client.to.DerivedSchemaTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n@@ -79,8 +79,7 @@ public void delete(HttpServletResponse response,\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public DerivedSchemaTOs list(@PathVariable(\"kind\") final String kind) {\n-\n+    public ModelAndView list(@PathVariable(\"kind\") final String kind) {\n         Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         List<AbstractDerivedSchema> derivedAttributeSchemas =\n                 derivedSchemaDAO.findAll(reference);\n@@ -93,9 +92,7 @@ public DerivedSchemaTOs list(@PathVariable(\"kind\") final String kind) {\n                     derivedSchema));\n         }\n \n-        DerivedSchemaTOs result = new DerivedSchemaTOs();\n-        result.setDerivedSchemas(derivedSchemaTOs);\n-        return result;\n+        return new ModelAndView().addObject(derivedSchemaTOs);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,"},{"sha":"b17d39d3b94a325e9f42a30cda12164be703fc9d","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -15,6 +15,7 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import java.util.ArrayList;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -27,9 +28,9 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ResourceTO;\n-import org.syncope.client.to.ResourceTOs;\n-import org.syncope.client.to.SchemaMappingTOs;\n+import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.SchemaMapping;\n@@ -187,7 +188,7 @@ public ResourceTO read(final HttpServletResponse response,\n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public ResourceTOs list(HttpServletResponse response)\n+    public ModelAndView list(HttpServletResponse response)\n             throws NotFoundException {\n \n         List<TargetResource> resources = resourceDAO.findAll();\n@@ -196,12 +197,12 @@ public ResourceTOs list(HttpServletResponse response)\n             throw new NotFoundException(\"No resources found\");\n         }\n \n-        return binder.getResourceTOs(resources);\n+        return new ModelAndView().addObject(binder.getResourceTOs(resources));\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{roleName}/mappings\")\n-    public SchemaMappingTOs getRoleResourcesMapping(\n+    public ModelAndView getRoleResourcesMapping(\n             HttpServletResponse response,\n             @PathVariable(\"roleName\") Long roleId)\n             throws SyncopeClientCompositeErrorException {\n@@ -228,11 +229,11 @@ public SchemaMappingTOs getRoleResourcesMapping(\n             throw compositeErrorException;\n         }\n \n-        SchemaMappingTOs roleMappings = new SchemaMappingTOs();\n+        List<SchemaMappingTO> roleMappings = new ArrayList<SchemaMappingTO>();\n \n         Set<TargetResource> resources = role.getTargetResources();\n \n-        SchemaMappingTOs resourceMappings = null;\n+        List<SchemaMappingTO> resourceMappings = null;\n \n         for (TargetResource resource : resources) {\n             if (LOG.isDebugEnabled()) {\n@@ -250,16 +251,16 @@ public SchemaMappingTOs getRoleResourcesMapping(\n \n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"The mappings TO of '\" + resource + \"' are '\"\n-                        + resourceMappings.getMappings() + \"'\");\n+                        + resourceMappings + \"'\");\n             }\n \n-            roleMappings.getMappings().addAll(resourceMappings.getMappings());\n+            roleMappings.addAll(resourceMappings);\n         }\n \n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Mappings found: \" + roleMappings.getMappings());\n+            LOG.debug(\"Mappings found: \" + roleMappings);\n         }\n \n-        return roleMappings;\n+        return new ModelAndView().addObject(roleMappings);\n     }\n }"},{"sha":"b5511e4791916ca4c355201f64906b8135bff658","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":9,"deletions":14,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -25,9 +25,9 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.RoleTO;\n-import org.syncope.client.to.RoleTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n@@ -87,17 +87,14 @@ public void delete(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public RoleTOs list(HttpServletRequest request) {\n+    public ModelAndView list(HttpServletRequest request) {\n         List<SyncopeRole> roles = syncopeRoleDAO.findAll();\n         List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n-\n         for (SyncopeRole role : roles) {\n             roleTOs.add(roleDataBinder.getRoleTO(role));\n         }\n \n-        RoleTOs result = new RoleTOs();\n-        result.setRoles(roleTOs);\n-        return result;\n+        return new ModelAndView().addObject(roleTOs);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n@@ -120,19 +117,16 @@ public RoleTO parent(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/children/{roleId}\")\n-    public RoleTOs children(HttpServletResponse response,\n+    public ModelAndView children(HttpServletResponse response,\n             @PathVariable(\"roleId\") Long roleId) {\n \n         List<SyncopeRole> roles = syncopeRoleDAO.findChildren(roleId);\n         List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n-\n         for (SyncopeRole role : roles) {\n             roleTOs.add(roleDataBinder.getRoleTO(role));\n         }\n \n-        RoleTOs result = new RoleTOs();\n-        result.setRoles(roleTOs);\n-        return result;\n+        return new ModelAndView().addObject(roleTOs);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n@@ -155,7 +149,8 @@ public RoleTO read(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public RoleTO update(HttpServletResponse response,\n-            @RequestBody RoleMod roleMod) throws NotFoundException {\n+            @RequestBody RoleMod roleMod)\n+            throws NotFoundException {\n \n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"update called with parameter \" + roleMod);"},{"sha":"7c6592358948df33b1a29a92e80a8697d27063d9","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -24,8 +24,8 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.SchemaTO;\n-import org.syncope.client.to.SchemaTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n@@ -76,7 +76,7 @@ public void delete(@PathVariable(\"kind\") final String kind,\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public SchemaTOs list(@PathVariable(\"kind\") final String kind) {\n+    public ModelAndView list(@PathVariable(\"kind\") final String kind) {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n@@ -86,9 +86,7 @@ public SchemaTOs list(@PathVariable(\"kind\") final String kind) {\n             schemaTOs.add(schemaDataBinder.getSchemaTO(schema));\n         }\n \n-        SchemaTOs result = new SchemaTOs();\n-        result.setSchemas(schemaTOs);\n-        return result;\n+        return new ModelAndView().addObject(schemaTOs);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,"},{"sha":"614ec1acaec5a204d00446fdaec80145a76b72e6","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":13,"deletions":27,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -28,7 +28,6 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.servlet.ModelAndView;\n-import org.syncope.client.to.UserTOs;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.propagation.PropagationException;\n@@ -184,17 +183,15 @@ public UserTO verifyToken(@RequestBody UserTO userTO)\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public UserTOs list() {\n+    public ModelAndView list() {\n         List<SyncopeUser> users = syncopeUserDAO.findAll();\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n \n         for (SyncopeUser user : users) {\n             userTOs.add(userDataBinder.getUserTO(user, userWorkflow));\n         }\n \n-        UserTOs result = new UserTOs();\n-        result.setUsers(userTOs);\n-        return result;\n+        return new ModelAndView().addObject(userTOs);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n@@ -235,7 +232,7 @@ public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/search\")\n-    public UserTOs search(@RequestBody NodeCond searchCondition)\n+    public ModelAndView search(@RequestBody NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         if (LOG.isDebugEnabled()) {\n@@ -249,12 +246,12 @@ public UserTOs search(@RequestBody NodeCond searchCondition)\n \n         List<SyncopeUser> matchingUsers =\n                 syncopeUserDAO.search(searchCondition);\n-        UserTOs result = new UserTOs();\n+        List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n-            result.addUser(userDataBinder.getUserTO(user, userWorkflow));\n+            result.add(userDataBinder.getUserTO(user, userWorkflow));\n         }\n \n-        return result;\n+        return new ModelAndView().addObject(result);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n@@ -405,13 +402,11 @@ public UserTO create(HttpServletResponse response,\n                     + syncResourceNames);\n         }\n \n-        Set<String> propagatedResources = resourceOperations.isEmpty()\n-                ? propagationManager.create(user, syncResourceNames)\n-                : propagationManager.update(user, resourceOperations,\n-                syncResourceNames);\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Propagated onto resources \" + propagatedResources);\n+        if (resourceOperations.isEmpty()) {\n+            propagationManager.create(user, syncResourceNames);\n+        } else {\n+            propagationManager.update(user, resourceOperations,\n+                    syncResourceNames);\n         }\n \n         // User is created locally and propagated, let's advance on the workflow\n@@ -471,12 +466,7 @@ public UserTO update(@RequestBody UserMod userMod,\n                     + syncResourceNames);\n         }\n \n-        Set<String> propagatedResources =\n-                propagationManager.update(user,\n-                resourceOperations, syncResourceNames);\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Propagated onto resources \" + propagatedResources);\n-        }\n+        propagationManager.update(user, resourceOperations, syncResourceNames);\n \n         return userDataBinder.getUserTO(user, userWorkflow);\n     }\n@@ -505,11 +495,7 @@ public void delete(@PathVariable(\"userId\") Long userId,\n                     + syncResourceNames);\n         }\n \n-        Set<String> propagatedResources =\n-                propagationManager.delete(user, syncResourceNames);\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Propagated onto resources \" + propagatedResources);\n-        }\n+        propagationManager.delete(user, syncResourceNames);\n \n         // Now that delete has been propagated, let's remove everything\n         if (workflowStore != null && user.getWorkflowId() != null) {"},{"sha":"64700605fcf19a623d9bc43f562d052b8a5b6376","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -56,8 +56,8 @@\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n-import org.syncope.core.persistence.propagation.ResourceOperations.Type;\n import org.syncope.core.persistence.validation.ValidationException;\n+import org.syncope.types.ResourceOperationType;\n import org.syncope.types.SchemaType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -139,7 +139,7 @@ private TargetResource getResource(String resourceName) {\n         return resource;\n     }\n \n-    private void fillAttribute(Set<String> values,\n+    private void fillAttribute(List<String> values,\n             AttributableUtil attributableUtil,\n             AbstractSchema schema,\n             AbstractAttribute attribute,\n@@ -148,11 +148,11 @@ private void fillAttribute(Set<String> values,\n         // if the schema is multivalue, all values are considered for\n         // addition, otherwise only the fist one - if provided - is\n         // considered\n-        Set<String> valuesProvided = schema.isMultivalue()\n+        List<String> valuesProvided = schema.isMultivalue()\n                 ? values\n                 : (values.isEmpty()\n-                ? Collections.EMPTY_SET\n-                : Collections.singleton(\n+                ? Collections.EMPTY_LIST\n+                : Collections.singletonList(\n                 values.iterator().next()));\n \n         AbstractAttributeValue attributeValue;\n@@ -354,7 +354,7 @@ protected ResourceOperations fill(\n                     if (mapping.getResource() != null\n                             && resources.contains(mapping.getResource())) {\n \n-                        resourceOperations.add(Type.UPDATE,\n+                        resourceOperations.add(ResourceOperationType.UPDATE,\n                                 mapping.getResource());\n \n                         if (mapping.isAccountid() && attribute != null\n@@ -390,7 +390,7 @@ protected ResourceOperations fill(\n                     if (mapping.getResource() != null\n                             && resources.contains(mapping.getResource())) {\n \n-                        resourceOperations.add(Type.UPDATE,\n+                        resourceOperations.add(ResourceOperationType.UPDATE,\n                                 mapping.getResource());\n                     }\n                 }\n@@ -456,7 +456,7 @@ protected ResourceOperations fill(\n                 for (SchemaMapping mapping : derivedSchema.getMappings()) {\n                     if (mapping.getResource() != null\n                             && resources.contains(mapping.getResource())) {\n-                        resourceOperations.add(Type.UPDATE,\n+                        resourceOperations.add(ResourceOperationType.UPDATE,\n                                 mapping.getResource());\n                     }\n                 }\n@@ -489,7 +489,7 @@ protected ResourceOperations fill(\n                 for (SchemaMapping mapping : derivedSchema.getMappings()) {\n                     if (mapping.getResource() != null\n                             && resources.contains(mapping.getResource())) {\n-                        resourceOperations.add(Type.UPDATE,\n+                        resourceOperations.add(ResourceOperationType.UPDATE,\n                                 mapping.getResource());\n                     }\n                 }\n@@ -514,7 +514,7 @@ protected ResourceOperations fill(\n             resource = getResource(resourceToBeRemoved);\n \n             if (resource != null) {\n-                resourceOperations.add(Type.DELETE, resource);\n+                resourceOperations.add(ResourceOperationType.DELETE, resource);\n \n                 attributable.removeTargetResource(resource);\n \n@@ -538,7 +538,7 @@ protected ResourceOperations fill(\n             resource = getResource(resourceToBeAdded);\n \n             if (resource != null) {\n-                resourceOperations.add(Type.CREATE, resource);\n+                resourceOperations.add(ResourceOperationType.CREATE, resource);\n \n                 attributable.addTargetResource(resource);\n \n@@ -660,12 +660,11 @@ protected AbstractAttributableTO fillTO(\n             Collection<? extends AbstractDerivedAttribute> derivedAttributes,\n             Collection<TargetResource> resources) {\n \n-        AttributeTO attributeTO = null;\n+        AttributeTO attributeTO;\n         for (AbstractAttribute attribute : attributes) {\n-\n             attributeTO = new AttributeTO();\n             attributeTO.setSchema(attribute.getSchema().getName());\n-            attributeTO.setValues(new HashSet(attribute.getValuesAsStrings()));\n+            attributeTO.setValues(attribute.getValuesAsStrings());\n             attributeTO.setReadonly(attribute.getSchema().isReadonly());\n \n             abstractAttributableTO.addAttribute(attributeTO);"},{"sha":"a7513625f1acd48a96bb02145d10a1c5dad69fc9","filename":"core/src/main/java/org/syncope/core/rest/data/ConfigurationDataBinder.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -15,14 +15,18 @@\n package org.syncope.core.rest.data;\n \n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.core.persistence.beans.SyncopeConfiguration;\n \n @Component\n+@Transactional(rollbackFor = {\n+    Throwable.class\n+})\n public class ConfigurationDataBinder {\n \n     public SyncopeConfiguration createSyncopeConfiguration(\n-            ConfigurationTO configurationTO) {\n+            final ConfigurationTO configurationTO) {\n \n         SyncopeConfiguration syncopeConfiguration = new SyncopeConfiguration();\n         syncopeConfiguration.setConfKey(configurationTO.getConfKey());\n@@ -32,7 +36,7 @@ public SyncopeConfiguration createSyncopeConfiguration(\n     }\n \n     public ConfigurationTO getConfigurationTO(\n-            SyncopeConfiguration syncopeConfiguration) {\n+            final SyncopeConfiguration syncopeConfiguration) {\n \n         ConfigurationTO configurationTO = new ConfigurationTO();\n         configurationTO.setConfKey(syncopeConfiguration.getConfKey());"},{"sha":"9f506511535abc869d7b43245590a5c9a1fd21d5","filename":"core/src/main/java/org/syncope/core/rest/data/ConnectorInstanceDataBinder.java","status":"modified","additions":4,"deletions":33,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,9 +14,6 @@\n  */\n package org.syncope.core.rest.data;\n \n-import java.io.UnsupportedEncodingException;\n-import java.net.URLEncoder;\n-import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -25,10 +22,8 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.ConnectorInstanceTO;\n-import org.syncope.client.to.PropertyTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -80,12 +75,6 @@ public ConnectorInstance getConnectorInstance(\n \n         BeanUtils.copyProperties(\n                 connectorInstanceTO, connectorInstance, ignoreProperties);\n-        connectorInstance.getCapabilities().addAll(\n-                connectorInstanceTO.getCapabilities());\n-\n-        connectorInstance.setXmlConfiguration(\n-                ConnectorInstanceLoader.serializeToXML(\n-                connectorInstanceTO.getConfiguration()));\n \n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n@@ -138,20 +127,8 @@ public ConnectorInstance updateConnectorInstance(\n         if (connectorInstanceTO.getConfiguration() != null\n                 || connectorInstanceTO.getConfiguration().isEmpty()) {\n \n-            connectorInstance.setXmlConfiguration(\n-                    ConnectorInstanceLoader.serializeToXML(\n-                    connectorInstanceTO.getConfiguration()));\n-        }\n-\n-        try {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(URLEncoder.encode(\n-                        ConnectorInstanceLoader.serializeToXML(\n-                        connectorInstanceTO.getConfiguration()),\n-                        \"UTF-8\"));\n-            }\n-        } catch (UnsupportedEncodingException ex) {\n-            LOG.error(\"Unexpected exception\", ex);\n+            connectorInstance.setConfiguration(\n+                    connectorInstanceTO.getConfiguration());\n         }\n \n         connectorInstance.setCapabilities(\n@@ -178,12 +155,6 @@ public ConnectorInstanceTO getConnectorInstanceTO(\n \n         BeanUtils.copyProperties(\n                 connectorInstance, connectorInstanceTO, ignoreProperties);\n-        connectorInstanceTO.getCapabilities().addAll(\n-                connectorInstance.getCapabilities());\n-\n-        connectorInstanceTO.setConfiguration(\n-                (Set<PropertyTO>) ConnectorInstanceLoader.buildFromXML(\n-                connectorInstance.getXmlConfiguration()));\n \n         connectorInstanceTO.setId(connectorInstance.getId());\n "},{"sha":"5b9637908bdf6c595b82362057ee148a66fa1dc9","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -27,9 +27,7 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.ResourceTO;\n-import org.syncope.client.to.ResourceTOs;\n import org.syncope.client.to.SchemaMappingTO;\n-import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n@@ -39,15 +37,17 @@\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = {\n+    Throwable.class\n+})\n public class ResourceDataBinder {\n \n     /**\n      * Logger.\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(\n             ResourceDataBinder.class);\n-    private static final String[] ignoreMappingProperties = {\n+    private static final String[] MAPPING_IGNORE_PROPERTIES = {\n         \"id\", \"resource\"};\n     @Autowired\n     private ConnectorInstanceDAO connectorInstanceDAO;\n@@ -114,16 +114,16 @@ public TargetResource getResource(TargetResource resource,\n         return resource;\n     }\n \n-    public ResourceTOs getResourceTOs(Collection<TargetResource> resources) {\n+    public List<ResourceTO> getResourceTOs(\n+            Collection<TargetResource> resources) {\n \n         if (resources == null) {\n             return null;\n         }\n \n-        ResourceTOs resourceTOs = new ResourceTOs();\n-\n+        List<ResourceTO> resourceTOs = new ArrayList<ResourceTO>();\n         for (TargetResource resource : resources) {\n-            resourceTOs.addResource(getResourceTO(resource));\n+            resourceTOs.add(getResourceTO(resource));\n         }\n \n         return resourceTOs;\n@@ -157,7 +157,7 @@ public ResourceTO getResourceTO(TargetResource resource) {\n \n     private List<SchemaMapping> getSchemaMappings(\n             TargetResource resource,\n-            SchemaMappingTOs mappings) {\n+            List<SchemaMappingTO> mappings) {\n \n         if (mappings == null) {\n             return null;\n@@ -236,14 +236,14 @@ private SchemaMapping getSchemaMapping(\n         SchemaMapping schemaMapping = new SchemaMapping();\n \n         BeanUtils.copyProperties(\n-                mappingTO, schemaMapping, ignoreMappingProperties);\n+                mappingTO, schemaMapping, MAPPING_IGNORE_PROPERTIES);\n \n         schemaMapping.setResource(resource);\n \n         return schemaMapping;\n     }\n \n-    public SchemaMappingTOs getSchemaMappingTOs(\n+    public List<SchemaMappingTO> getSchemaMappingTOs(\n             Collection<SchemaMapping> mappings) {\n \n         if (mappings == null) {\n@@ -252,18 +252,18 @@ public SchemaMappingTOs getSchemaMappingTOs(\n             return null;\n         }\n \n-        SchemaMappingTOs schemaMappingTOs = new SchemaMappingTOs();\n-\n+        List<SchemaMappingTO> schemaMappingTOs =\n+                new ArrayList<SchemaMappingTO>();\n         for (SchemaMapping mapping : mappings) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Ask for \" + mapping + \" TO\");\n             }\n \n-            schemaMappingTOs.addMapping(getSchemaMappingTO(mapping));\n+            schemaMappingTOs.add(getSchemaMappingTO(mapping));\n         }\n \n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Collected TOs \" + schemaMappingTOs.getMappings());\n+            LOG.debug(\"Collected TOs \" + schemaMappingTOs);\n         }\n \n         return schemaMappingTOs;\n@@ -279,7 +279,7 @@ public SchemaMappingTO getSchemaMappingTO(SchemaMapping schemaMapping) {\n         SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n \n         BeanUtils.copyProperties(\n-                schemaMapping, schemaMappingTO, ignoreMappingProperties);\n+                schemaMapping, schemaMappingTO, MAPPING_IGNORE_PROPERTIES);\n \n         schemaMappingTO.setId(schemaMapping.getId());\n "},{"sha":"e88bbb817f902448f96e1814440e619b276612bc","filename":"core/src/main/java/org/syncope/core/rest/data/TaskExecutionDataBinder.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskExecutionDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskExecutionDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskExecutionDataBinder.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,44 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.to.TaskExecutionTO;\n+import org.syncope.core.persistence.beans.TaskExecution;\n+\n+@Component\n+@Transactional(rollbackFor = {\n+    Throwable.class\n+})\n+public class TaskExecutionDataBinder {\n+\n+    /**\n+     * Properties to be ignored during bean copy.\n+     * @see BeanUtils\n+     */\n+    private static final String[] IGNORE_PROPERTIES = {\"id\", \"task\"};\n+\n+    public TaskExecutionTO getTaskExecutionTO(final TaskExecution execution) {\n+        TaskExecutionTO executionTO = new TaskExecutionTO();\n+\n+        BeanUtils.copyProperties(execution, executionTO, IGNORE_PROPERTIES);\n+        executionTO.setId(execution.getId());\n+        executionTO.setTask(execution.getTask().getId());\n+\n+        return executionTO;\n+    }\n+}"},{"sha":"77a7f91ac6ffd9dce3011cffb188535227140f47","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -38,7 +38,7 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n-import org.syncope.core.persistence.propagation.ResourceOperations.Type;\n+import org.syncope.types.ResourceOperationType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -172,7 +172,7 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n                     if (!membershipToBeAddedRoleIds.contains(\n                             membership.getSyncopeRole().getId())) {\n \n-                        resourceOperations.add(ResourceOperations.Type.DELETE,\n+                        resourceOperations.add(ResourceOperationType.DELETE,\n                                 resource);\n                     }\n                 }\n@@ -234,8 +234,8 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n \n                     user.addMembership(membership);\n \n-                    resourceOperations.addAll(\n-                            Type.UPDATE, role.getTargetResources());\n+                    resourceOperations.addAll(ResourceOperationType.UPDATE,\n+                            role.getTargetResources());\n                 }\n \n                 resourceOperations.merge(fill(membership, membershipMod,"},{"sha":"ea014f2b842570b80620cb1913570ca2dd9d03b8","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -50,6 +50,8 @@\n \n     <bean id=\"dbUnitDataTypeFactory\" class=\"${dbUnitDataTypeFactory}\"/>\n \n+    <bean id=\"xStream\" class=\"com.thoughtworks.xstream.XStream\"/>\n+\n     <!-- Use JNDI datasource as default but, when not available, revert to\n          local datasource, using different properties for execution and testing -->\n     <bean id=\"dataSource\""},{"sha":"cbd377681c3f72112da8e9da0bca0a190e1eec88","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -47,7 +47,7 @@\n                         SyncopeClientExceptionType.Propagation.getHeaderValue());\n                 response.setHeader(\n                         SyncopeClientExceptionType.Propagation.getElementHeaderName(),\n-                        ((PropagationException) ex).getResource());\n+                        ((PropagationException) ex).getResourceName());\n \n                 statusCode = HttpServletResponse.SC_BAD_REQUEST;\n             } else if (ex instanceof SyncopeClientCompositeErrorException) {"},{"sha":"f4a1f01993e79f06273a3e86e075c21658399948","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttributeTest.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -23,8 +23,6 @@\n import org.syncope.core.persistence.beans.user.UserAttribute;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n import org.syncope.core.persistence.beans.user.UserSchema;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.validation.ValidationException;\n import org.syncope.core.persistence.AbstractTest;\n "},{"sha":"3e4ee6f4845ac2e9118229033929299796516df8","filename":"core/src/test/java/org/syncope/core/persistence/dao/ConnectorInstanceTest.java","status":"modified","additions":6,"deletions":15,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceTest.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -22,9 +22,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.PropertyTO;\n-import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n-import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector;\n \n@@ -53,7 +51,8 @@ public final void findById() {\n     }\n \n     @Test\n-    public final void save() throws ClassNotFoundException {\n+    public final void save()\n+            throws ClassNotFoundException {\n         ConnectorInstance connectorInstance = new ConnectorInstance();\n \n         // set connector version\n@@ -80,13 +79,9 @@ public final void save() throws ClassNotFoundException {\n         conf.add(endpoint);\n         conf.add(servicename);\n \n-        // serialize configuration\n-        String xmlconf = ConnectorInstanceLoader.serializeToXML(conf);\n-\n-        assertNotNull(\"xml configuration string is null\", xmlconf);\n-\n         // set connector configuration\n-        connectorInstance.setXmlConfiguration(xmlconf);\n+        connectorInstance.setConfiguration(conf);\n+        assertFalse(connectorInstance.getConfiguration().isEmpty());\n \n         // perform save operation\n         ConnectorInstance actual =\n@@ -107,12 +102,8 @@ public final void save() throws ClassNotFoundException {\n         assertEquals(\"save did not work for \\\"majorVersion\\\" attribute\",\n                 \"1.0\", connectorInstance.getVersion());\n \n-        String xmlConfiguration = connectorInstance.getXmlConfiguration();\n-\n-        assertNotNull(\"configuration not found\", xmlConfiguration);\n-\n-        conf = (Set<PropertyTO>) ConnectorInstanceLoader.buildFromXML(\n-                xmlConfiguration);\n+        conf = connectorInstance.getConfiguration();\n+        assertFalse(conf.isEmpty());\n \n         assertNotNull(\"configuration retrieving failed\", conf);\n         assertTrue(conf.size() == 2);"},{"sha":"55c54aea5cbbafb403fcd5d0b816dd9cfbae3ad0","filename":"core/src/test/java/org/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -24,7 +24,6 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector;\n \n@@ -33,6 +32,8 @@ public class ResourceTest extends AbstractTest {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n+    @Autowired\n+    private TaskDAO taskDAO;\n \n     @Test\n     public final void findById() {\n@@ -72,7 +73,8 @@ public final void findById() {\n     }\n \n     @Test\n-    public final void save() throws ClassNotFoundException {\n+    public final void save()\n+            throws ClassNotFoundException {\n         TargetResource resource = new TargetResource();\n         resource.setName(\"ws-target-resource-basic-save\");\n \n@@ -85,12 +87,11 @@ public final void save() throws ClassNotFoundException {\n     @Test\n     public final void delete() {\n         TargetResource resource = resourceDAO.find(\"ws-target-resource-2\");\n-\n-        assertNotNull(\"find to delete did not work\", resource);\n+        assertNotNull(resource);\n \n         resourceDAO.delete(resource.getName());\n \n         TargetResource actual = resourceDAO.find(\"ws-target-resource-2\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n     }\n }"},{"sha":"f283c4c0d0db0da460f1ce7da8b0c9841b157887","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskTest.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,91 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.HashSet;\n+import static org.junit.Assert.*;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.core.persistence.beans.Task;\n+import org.syncope.types.PropagationMode;\n+import org.syncope.types.ResourceOperationType;\n+\n+@Transactional\n+public class TaskTest extends AbstractTest {\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n+    @Test\n+    public final void findAll() {\n+        List<Task> list = taskDAO.findAll();\n+        assertEquals(1, list.size());\n+    }\n+\n+    @Test\n+    public final void save() {\n+        TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertNotNull(resource);\n+\n+        Task task = new Task();\n+        task.setResource(resource);\n+        task.setPropagationMode(PropagationMode.ASYNC);\n+        task.setResourceOperationType(ResourceOperationType.CREATE);\n+        task.setAccountId(\"one@two.com\");\n+\n+        Set<Attribute> attributes = new HashSet<Attribute>();\n+        attributes.add(AttributeBuilder.build(\"testAttribute\", \"testValue1\",\n+                \"testValue2\"));\n+        attributes.add(\n+                AttributeBuilder.buildPassword(\"password\".toCharArray()));\n+        task.setAttributes(attributes);\n+\n+        task = taskDAO.save(task);\n+        assertNotNull(task);\n+\n+        Task actual = taskDAO.find(task.getId());\n+        assertEquals(task, actual);\n+\n+        resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertTrue(resource.getTasks().contains(task));\n+    }\n+\n+    @Test\n+    public final void delete() {\n+        Task task = taskDAO.find(1L);\n+        assertNotNull(task);\n+\n+        TargetResource resource = task.getResource();\n+        assertNotNull(resource);\n+\n+        taskDAO.delete(task);\n+        task = taskDAO.find(1L);\n+        assertNull(task);\n+\n+        resource = resourceDAO.find(resource.getName());\n+        assertNotNull(resource);\n+        assertFalse(resource.getTasks().contains(task));\n+    }\n+}"},{"sha":"633f618c89c24fbc3c09bfee70795daf2bb827b9","filename":"core/src/test/java/org/syncope/core/persistence/relationships/PropagationManagerTest.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FPropagationManagerTest.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -17,7 +17,6 @@\n import static org.junit.Assert.*;\n \n import java.util.Collections;\n-import java.util.Set;\n import org.junit.Test;\n \n import org.springframework.beans.factory.annotation.Autowired;\n@@ -52,14 +51,14 @@ public final void create() {\n \n         user.setResources(Collections.singleton(resource));\n \n-        Set<String> provisioned = null;\n+        PropagationException pe = null;\n         try {\n-            provisioned = propagationManager.create(user);\n+            propagationManager.create(user);\n         } catch (PropagationException e) {\n-            LOG.error(\"While provisioning\", e);\n+            pe = e;\n         }\n \n-        assertNotNull(provisioned);\n+        assertNull(pe);\n     }\n \n     @Test\n@@ -75,15 +74,14 @@ public final void update() {\n         ResourceOperations resourceOperations = new ResourceOperations();\n         resourceOperations.add(ResourceOperationType.UPDATE, resource);\n \n-        Set<String> provisioned = null;\n+        PropagationException pe = null;\n         try {\n-            provisioned = propagationManager.update(\n-                    user, resourceOperations, null);\n+            propagationManager.update(user, resourceOperations, null);\n         } catch (PropagationException e) {\n-            LOG.error(\"While updating\", e);\n+            pe = e;\n         }\n \n-        assertNotNull(provisioned);\n+        assertNull(pe);\n     }\n \n     @Test"},{"sha":"85d04bc18d8845e73754768ce1cd42b47b62a3e0","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":20,"deletions":6,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.relationships;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n@@ -25,7 +26,6 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.SchemaMappingTO;\n-import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n@@ -37,6 +37,8 @@\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.types.SchemaType;\n \n @Transactional\n@@ -51,6 +53,8 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n     @Autowired\n+    private TaskDAO taskDAO;\n+    @Autowired\n     private ResourceDataBinder resourceDataBinder;\n \n     /**\n@@ -71,8 +75,9 @@ public final void issue42() {\n         schemaMappingTO.setPassword(false);\n         schemaMappingTO.setMandatoryCondition(\"false\");\n \n-        SchemaMappingTOs schemaMappingTOs = new SchemaMappingTOs();\n-        schemaMappingTOs.addMapping(schemaMappingTO);\n+        List<SchemaMappingTO> schemaMappingTOs =\n+                new ArrayList<SchemaMappingTO>();\n+        schemaMappingTOs.add(schemaMappingTO);\n \n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setName(\"resource-issue42\");\n@@ -98,7 +103,8 @@ public final void issue42() {\n     }\n \n     @Test\n-    public final void save() throws ClassNotFoundException {\n+    public final void save()\n+            throws ClassNotFoundException {\n         TargetResource resource = new TargetResource();\n         resource.setName(\"ws-target-resource-save\");\n \n@@ -198,6 +204,9 @@ public final void delete() {\n         }\n         // -------------------------------------\n \n+        // Get tasks\n+        List<Task> tasks = resource.getTasks();\n+\n         // delete resource\n         resourceDAO.delete(resource.getName());\n \n@@ -209,8 +218,8 @@ public final void delete() {\n         assertNull(\"delete did not work\", actual);\n \n         // resource must be not referenced any more from users\n-        SyncopeUser actualUser = null;\n-        Collection<TargetResource> resources = null;\n+        SyncopeUser actualUser;\n+        Collection<TargetResource> resources;\n         for (Long id : userIds) {\n             actualUser = syncopeUserDAO.find(id);\n             assertNotNull(actualUser);\n@@ -228,5 +237,10 @@ public final void delete() {\n         for (TargetResource res : resources) {\n             assertFalse(res.getName().equalsIgnoreCase(resource.getName()));\n         }\n+\n+        // there must be no tasks\n+        for (Task task : tasks) {\n+            assertNull(taskDAO.find(task.getId()));\n+        }\n     }\n }"},{"sha":"67bcd5a1f3c07775a86ea187a82aaf742c7caefe","filename":"core/src/test/java/org/syncope/core/persistence/relationships/TaskTest.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -0,0 +1,86 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.relationships;\n+\n+import java.util.Date;\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.beans.TaskExecution;\n+import org.syncope.core.persistence.dao.TaskDAO;\n+import org.syncope.core.persistence.dao.TaskExecutionDAO;\n+\n+@Transactional\n+public class TaskTest extends AbstractTest {\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+    @Autowired\n+    private TaskExecutionDAO taskExecutionDAO;\n+\n+    @Test\n+    public final void addTaskExecution() {\n+        Task task = taskDAO.find(1L);\n+        assertNotNull(task);\n+\n+        int executionNumber = task.getExecutions().size();\n+\n+        TaskExecution execution = new TaskExecution();\n+        execution.setTask(task);\n+        task.addExecution(execution);\n+        execution.setStartDate(new Date());\n+\n+        task = taskDAO.save(task);\n+\n+        taskDAO.flush();\n+\n+        task = taskDAO.find(1L);\n+        assertNotNull(task);\n+\n+        assertEquals(executionNumber + 1, task.getExecutions().size());\n+    }\n+\n+    @Test\n+    public final void deleteTask() {\n+        taskDAO.delete(1L);\n+\n+        taskDAO.flush();\n+\n+        assertNull(taskDAO.find(1L));\n+        assertNull(taskExecutionDAO.find(1L));\n+    }\n+\n+    @Test\n+    public final void deleteTaskExecution() {\n+        TaskExecution execution =\n+                taskExecutionDAO.find(1L);\n+        int executionNumber =\n+                execution.getTask().getExecutions().size();\n+\n+        taskExecutionDAO.delete(1L);\n+\n+        taskExecutionDAO.flush();\n+\n+        assertNull(taskExecutionDAO.find(1L));\n+\n+        Task task = taskDAO.find(1L);\n+        assertEquals(task.getExecutions().size(),\n+                executionNumber - 1);\n+    }\n+}"},{"sha":"1e696ec0115a4928d014b5f6d679c021998bd52e","filename":"core/src/test/java/org/syncope/core/rest/ConnectorInstanceTestITCase.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnectorInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnectorInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnectorInstanceTestITCase.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -18,16 +18,16 @@\n import static org.junit.Assert.*;\n \n import java.util.HashSet;\n+import java.util.List;\n import java.util.Properties;\n import java.util.Set;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n-import org.syncope.client.to.ConnectorBundleTOs;\n+import org.syncope.client.to.ConnectorBundleTO;\n import org.syncope.client.to.ConnectorInstanceTO;\n-import org.syncope.client.to.ConnectorInstanceTOs;\n import org.syncope.client.to.PropertyTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector;\n@@ -220,11 +220,12 @@ public void deleteWithException() {\n \n     @Test\n     public void list() {\n-        ConnectorInstanceTOs connectorInstanceTOs = restTemplate.getForObject(\n-                BASE_URL + \"connector/list.json\", ConnectorInstanceTOs.class);\n+        List<ConnectorInstanceTO> connectorInstanceTOs =\n+                restTemplate.getForObject(\n+                BASE_URL + \"connector/list.json\", List.class);\n \n         assertNotNull(connectorInstanceTOs);\n-        assertFalse(connectorInstanceTOs.getInstances().isEmpty());\n+        assertFalse(connectorInstanceTOs.isEmpty());\n     }\n \n     @Test\n@@ -247,12 +248,12 @@ public void check() {\n \n     @Test\n     public void getBundles() {\n-        ConnectorBundleTOs bundles = restTemplate.getForObject(\n+        List<ConnectorBundleTO> bundles = restTemplate.getForObject(\n                 BASE_URL + \"connector/getBundles.json\",\n-                ConnectorBundleTOs.class);\n+                List.class);\n \n         assertNotNull(bundles);\n \n-        assertFalse(bundles.getBundles().isEmpty());\n+        assertFalse(bundles.isEmpty());\n     }\n }"},{"sha":"f2782f6db03b6e3c8608a35c304479eed2e2bd4f","filename":"core/src/test/java/org/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -14,7 +14,7 @@\n  */\n package org.syncope.core.rest;\n \n-import org.syncope.client.to.DerivedSchemaTOs;\n+import java.util.List;\n import org.syncope.client.to.DerivedSchemaTO;\n import org.junit.Test;\n import static org.junit.Assert.*;\n@@ -23,10 +23,10 @@ public class DerivedSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void derivedList() {\n-        DerivedSchemaTOs derivedSchemas =\n+        List<DerivedSchemaTO> derivedSchemas =\n                 restTemplate.getForObject(BASE_URL\n-                + \"derivedSchema/user/list.json\", DerivedSchemaTOs.class);\n-        assertFalse(derivedSchemas.getDerivedSchemas().isEmpty());\n+                + \"derivedSchema/user/list.json\", List.class);\n+        assertFalse(derivedSchemas.isEmpty());\n     }\n \n     @Test"},{"sha":"ee5b3ec81f6daff777e88824cdba1c737e8fd65e","filename":"core/src/test/java/org/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":15,"deletions":22,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -14,16 +14,16 @@\n  */\n package org.syncope.core.rest;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.to.ResourceTO;\n-import org.syncope.client.to.ResourceTOs;\n import org.syncope.client.to.SchemaMappingTO;\n-import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.types.SchemaType;\n \n@@ -43,29 +43,23 @@ public void createExistingResource() {\n \n     @Test\n     public void create() {\n-        final String resourceName = \"ws-target-resource-create\";\n+        String resourceName = \"ws-target-resource-create\";\n         ResourceTO resourceTO = new ResourceTO();\n \n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n \n-        SchemaMappingTOs schemaMappingTOs = new SchemaMappingTOs();\n-\n-        SchemaMappingTO schemaMappingTO = null;\n-\n-        schemaMappingTO = new SchemaMappingTO();\n+        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setField(\"uid\");\n         schemaMappingTO.setSchemaName(\"userId\");\n         schemaMappingTO.setSchemaType(SchemaType.UserSchema);\n-        schemaMappingTOs.addMapping(schemaMappingTO);\n+        resourceTO.addMapping(schemaMappingTO);\n \n         schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setField(\"icon\");\n         schemaMappingTO.setSchemaName(\"icon\");\n         schemaMappingTO.setSchemaType(SchemaType.RoleSchema);\n-        schemaMappingTOs.addMapping(schemaMappingTO);\n-\n-        resourceTO.setMappings(schemaMappingTOs);\n+        resourceTO.addMapping(schemaMappingTO);\n \n         ResourceTO actual = restTemplate.postForObject(\n                 BASE_URL + \"resource/create.json\",\n@@ -86,14 +80,12 @@ public void create() {\n     @Test\n     public void updateWithException() {\n         try {\n-\n             ResourceTO resourceTO = new ResourceTO();\n \n             resourceTO.setName(\"resourcenotfound\");\n \n             restTemplate.postForObject(BASE_URL + \"resource/update.json\",\n                     resourceTO, ResourceTO.class);\n-\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -107,23 +99,24 @@ public void update() {\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(101L);\n \n-        SchemaMappingTOs schemaMappingTOs = new SchemaMappingTOs();\n+        List<SchemaMappingTO> schemaMappingTOs =\n+                new ArrayList<SchemaMappingTO>();\n \n         // Update with an existing and already assigned mapping\n         SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setId(112L);\n         schemaMappingTO.setField(\"test3\");\n         schemaMappingTO.setSchemaName(\"username\");\n         schemaMappingTO.setSchemaType(SchemaType.UserSchema);\n-        schemaMappingTOs.addMapping(schemaMappingTO);\n+        schemaMappingTOs.add(schemaMappingTO);\n \n         // Update defining new mapping\n         for (int i = 4; i < 6; i++) {\n             schemaMappingTO = new SchemaMappingTO();\n             schemaMappingTO.setField(\"test\" + i);\n             schemaMappingTO.setSchemaName(\"username\");\n             schemaMappingTO.setSchemaType(SchemaType.UserSchema);\n-            schemaMappingTOs.addMapping(schemaMappingTO);\n+            schemaMappingTOs.add(schemaMappingTO);\n         }\n \n         resourceTO.setMappings(schemaMappingTOs);\n@@ -136,11 +129,11 @@ public void update() {\n \n         // check the existence\n \n-        SchemaMappingTOs mappings = actual.getMappings();\n+        List<SchemaMappingTO> mappings = actual.getMappings();\n \n         assertNotNull(mappings);\n \n-        assertEquals(3, mappings.getMappings().size());\n+        assertEquals(3, mappings.size());\n     }\n \n     @Test\n@@ -174,11 +167,11 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        ResourceTOs actuals = restTemplate.getForObject(\n-                BASE_URL + \"resource/list.json\", ResourceTOs.class);\n+        List<ResourceTO> actuals = restTemplate.getForObject(\n+                BASE_URL + \"resource/list.json\", List.class);\n \n         assertNotNull(actuals);\n \n-        assertFalse(actuals.getResources().isEmpty());\n+        assertFalse(actuals.isEmpty());\n     }\n }"},{"sha":"2034d0976110ed9f162e704883c4a2fb598dfcd7","filename":"core/src/test/java/org/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.rest;\n \n+import java.util.List;\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n@@ -24,7 +25,6 @@\n import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n-import org.syncope.client.to.RoleTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n \n public class RoleTestITCase extends AbstractTest {\n@@ -79,11 +79,11 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        RoleTOs roleTOs = restTemplate.getForObject(BASE_URL\n-                + \"role/list.json\", RoleTOs.class);\n+        List<RoleTO> roleTOs = restTemplate.getForObject(BASE_URL\n+                + \"role/list.json\", List.class);\n \n         assertNotNull(roleTOs);\n-        assertEquals(8, roleTOs.getRoles().size());\n+        assertEquals(8, roleTOs.size());\n     }\n \n     @Test"},{"sha":"aadf2a9825a2f8d895a1fa39cf2cd78eb5182d23","filename":"core/src/test/java/org/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -14,13 +14,13 @@\n  */\n package org.syncope.core.rest;\n \n+import java.util.List;\n import org.junit.Test;\n import org.syncope.types.SyncopeClientExceptionType;\n import org.syncope.client.validation.SyncopeClientException;\n import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.http.HttpStatus;\n import org.syncope.client.to.SchemaTO;\n-import org.syncope.client.to.SchemaTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.types.SchemaValueType;\n import static org.junit.Assert.*;\n@@ -70,18 +70,18 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        SchemaTOs userSchemas =\n+        List<SchemaTO> userSchemas =\n                 restTemplate.getForObject(BASE_URL\n-                + \"schema/user/list.json\", SchemaTOs.class);\n-        assertFalse(userSchemas.getSchemas().isEmpty());\n+                + \"schema/user/list.json\", List.class);\n+        assertFalse(userSchemas.isEmpty());\n \n-        SchemaTOs roleSchemas = restTemplate.getForObject(BASE_URL\n-                + \"schema/role/list.json\", SchemaTOs.class);\n-        assertFalse(roleSchemas.getSchemas().isEmpty());\n+        List<SchemaTO> roleSchemas = restTemplate.getForObject(BASE_URL\n+                + \"schema/role/list.json\", List.class);\n+        assertFalse(roleSchemas.isEmpty());\n \n-        SchemaTOs membershipSchemas = restTemplate.getForObject(BASE_URL\n-                + \"schema/membership/list.json\", SchemaTOs.class);\n-        assertFalse(membershipSchemas.getSchemas().isEmpty());\n+        List<SchemaTO> membershipSchemas = restTemplate.getForObject(BASE_URL\n+                + \"schema/membership/list.json\", List.class);\n+        assertFalse(membershipSchemas.isEmpty());\n     }\n \n     @Test"},{"sha":"d57dfb3032d3bb49d03528f9f0a1538ae774a1dd","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -20,6 +20,7 @@\n import static org.junit.Assert.*;\n \n import java.util.Date;\n+import java.util.List;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.test.annotation.ExpectedException;\n@@ -32,7 +33,6 @@\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.UserTO;\n-import org.syncope.client.to.UserTOs;\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n@@ -238,11 +238,11 @@ public final void delete() {\n \n     @Test\n     public final void list() {\n-        UserTOs users = restTemplate.getForObject(\n-                BASE_URL + \"user/list.json\", UserTOs.class);\n+        List<UserTO> users = restTemplate.getForObject(\n+                BASE_URL + \"user/list.json\", List.class);\n \n         assertNotNull(users);\n-        assertEquals(4, users.getUsers().size());\n+        assertEquals(4, users.size());\n     }\n \n     @Test\n@@ -293,12 +293,12 @@ public final void search() {\n \n         assertTrue(searchCondition.checkValidity());\n \n-        UserTOs matchedUsers = restTemplate.postForObject(\n+        List<UserTO> matchedUsers = restTemplate.postForObject(\n                 BASE_URL + \"user/search\",\n-                searchCondition, UserTOs.class);\n+                searchCondition, List.class);\n \n         assertNotNull(matchedUsers);\n-        assertFalse(matchedUsers.getUsers().isEmpty());\n+        assertFalse(matchedUsers.isEmpty());\n     }\n \n     @Test\n@@ -356,7 +356,7 @@ public final void update() {\n             if (\"userId\".equals(attributeTO.getSchema())) {\n                 attributeFound = true;\n \n-                assertEquals(Collections.singleton(\"t.w@spre.net\"),\n+                assertEquals(Collections.singletonList(\"t.w@spre.net\"),\n                         attributeTO.getValues());\n             }\n         }"},{"sha":"e10c9f8746c1c9220e442e6f4275a77ae02755fa","filename":"core/src/test/resources/content.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -258,6 +258,9 @@\n                    schemaName=\"firstname\" schemaType=\"UserSchema\" mandatoryCondition=\"type == 'F'\"\n                    accountid=\"F\" password=\"F\"/>\n \n+    <Task id=\"1\" xmlAttributes=\"\" propagationMode=\"ASYNC\" resourceOperationType=\"UPDATE\" resource_name=\"ws-target-resource-2\"/>\n+    <TaskExecution id=\"1\" task_id=\"1\"/>\n+\n     <Entitlement name=\"base\"/>\n     <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n "},{"sha":"f878450d0e0e18fc864f8f07376c9e879d215b79","filename":"syncope_checks.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2b97b3c80838d416350e8e7debeb9f70a00315a/syncope_checks.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2b97b3c80838d416350e8e7debeb9f70a00315a/syncope_checks.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope_checks.xml?ref=d2b97b3c80838d416350e8e7debeb9f70a00315a","patch":"@@ -158,6 +158,7 @@\n         <module name=\"EqualsHashCode\"/>\n         <module name=\"HiddenField\">\n             <property name=\"ignoreSetter\" value=\"true\"/>\n+            <property name=\"ignoreConstructorParameter\" value=\"true\"/>\n         </module>\n         <module name=\"IllegalInstantiation\"/>\n         <module name=\"InnerAssignment\"/>\n@@ -173,7 +174,9 @@\n         <module name=\"FinalClass\"/>\n         <module name=\"HideUtilityClassConstructor\"/>\n         <module name=\"InterfaceIsType\"/>\n-        <module name=\"VisibilityModifier\"/>\n+        <module name=\"VisibilityModifier\">\n+            <property name=\"protectedAllowed\" value=\"true\"/>\n+        </module>\n \n \n         <!-- Miscellaneous other checks.                   -->"}]}