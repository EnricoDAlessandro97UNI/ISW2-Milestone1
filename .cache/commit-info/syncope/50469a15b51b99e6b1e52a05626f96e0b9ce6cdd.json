{"sha":"50469a15b51b99e6b1e52a05626f96e0b9ce6cdd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUwNDY5YTE1YjUxYjk5ZTZiMWU1MmEwNTYyNmY5NmUwYjljZTZjZGQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-03-18T07:03:40Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-03-25T13:43:27Z"},"message":"[SYNCOPE-1448] Relying on Spring's concurrency checks","tree":{"sha":"8d7ee48d4a4b34398a93739471a4b2a5795a7875","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8d7ee48d4a4b34398a93739471a4b2a5795a7875"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/50469a15b51b99e6b1e52a05626f96e0b9ce6cdd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/50469a15b51b99e6b1e52a05626f96e0b9ce6cdd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/50469a15b51b99e6b1e52a05626f96e0b9ce6cdd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/50469a15b51b99e6b1e52a05626f96e0b9ce6cdd/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0870c9eee7ab79483b3c822ac7c84aeb433d3ba5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5"}],"stats":{"total":209,"additions":144,"deletions":65},"files":[{"sha":"f1481b3220b3a880fc8ebac1d2af3cb25ccf4819","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java","status":"modified","additions":40,"deletions":65,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/50469a15b51b99e6b1e52a05626f96e0b9ce6cdd/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/50469a15b51b99e6b1e52a05626f96e0b9ce6cdd/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java?ref=50469a15b51b99e6b1e52a05626f96e0b9ce6cdd","patch":"@@ -57,24 +57,14 @@ public static Optional<Reportlet> buildReportlet(final Implementation impl)\n \n             case JAVA:\n             default:\n-                Reportlet reportlet = null;\n-\n                 ReportletConf reportletConf = POJOHelper.deserialize(impl.getBody(), ReportletConf.class);\n                 Class<? extends Reportlet> reportletClass = ApplicationContextProvider.getApplicationContext().\n                         getBean(ImplementationLookup.class).getReportletClass(reportletConf.getClass());\n-                if (reportletClass == null) {\n+\n+                Reportlet reportlet = buildJavaWithConf(reportletClass);\n+                if (reportlet == null) {\n                     LOG.warn(\"Could not find matching reportlet for {}\", reportletConf.getClass());\n                 } else {\n-                    // fetch (or create) reportlet\n-                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(reportletClass.getName())) {\n-                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n-                                getSingleton(reportletClass.getName());\n-                    } else {\n-                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n-                                createBean(reportletClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                        ApplicationContextProvider.getBeanFactory().\n-                                registerSingleton(reportletClass.getName(), reportlet);\n-                    }\n                     reportlet.setConf(reportletConf);\n                 }\n \n@@ -91,24 +81,14 @@ public static Optional<AccountRule> buildAccountRule(final Implementation impl)\n \n             case JAVA:\n             default:\n-                AccountRule rule = null;\n-\n                 AccountRuleConf ruleConf = POJOHelper.deserialize(impl.getBody(), AccountRuleConf.class);\n                 Class<? extends AccountRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n                         getBean(ImplementationLookup.class).getAccountRuleClass(ruleConf.getClass());\n-                if (ruleClass == null) {\n+\n+                AccountRule rule = buildJavaWithConf(ruleClass);\n+                if (rule == null) {\n                     LOG.warn(\"Could not find matching account rule for {}\", impl.getClass());\n                 } else {\n-                    // fetch (or create) rule\n-                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n-                        rule = (AccountRule) ApplicationContextProvider.getBeanFactory().\n-                                getSingleton(ruleClass.getName());\n-                    } else {\n-                        rule = (AccountRule) ApplicationContextProvider.getBeanFactory().\n-                                createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                        ApplicationContextProvider.getBeanFactory().\n-                                registerSingleton(ruleClass.getName(), rule);\n-                    }\n                     rule.setConf(ruleConf);\n                 }\n \n@@ -125,24 +105,14 @@ public static Optional<PasswordRule> buildPasswordRule(final Implementation impl\n \n             case JAVA:\n             default:\n-                PasswordRule rule = null;\n-\n                 PasswordRuleConf ruleConf = POJOHelper.deserialize(impl.getBody(), PasswordRuleConf.class);\n                 Class<? extends PasswordRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n                         getBean(ImplementationLookup.class).getPasswordRuleClass(ruleConf.getClass());\n-                if (ruleClass == null) {\n+\n+                PasswordRule rule = buildJavaWithConf(ruleClass);\n+                if (rule == null) {\n                     LOG.warn(\"Could not find matching password rule for {}\", impl.getClass());\n                 } else {\n-                    // fetch (or create) rule\n-                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n-                        rule = (PasswordRule) ApplicationContextProvider.getBeanFactory().\n-                                getSingleton(ruleClass.getName());\n-                    } else {\n-                        rule = (PasswordRule) ApplicationContextProvider.getBeanFactory().\n-                                createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                        ApplicationContextProvider.getBeanFactory().\n-                                registerSingleton(ruleClass.getName(), rule);\n-                    }\n                     rule.setConf(ruleConf);\n                 }\n \n@@ -159,25 +129,15 @@ public static Optional<PullCorrelationRule> buildPullCorrelationRule(final Imple\n \n             case JAVA:\n             default:\n-                PullCorrelationRule rule = null;\n-\n                 PullCorrelationRuleConf ruleConf =\n                         POJOHelper.deserialize(impl.getBody(), PullCorrelationRuleConf.class);\n                 Class<? extends PullCorrelationRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n                         getBean(ImplementationLookup.class).getPullCorrelationRuleClass(ruleConf.getClass());\n-                if (ruleClass == null) {\n+\n+                PullCorrelationRule rule = buildJavaWithConf(ruleClass);\n+                if (rule == null) {\n                     LOG.warn(\"Could not find matching pull correlation rule for {}\", impl.getClass());\n                 } else {\n-                    // fetch (or create) rule\n-                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n-                        rule = (PullCorrelationRule) ApplicationContextProvider.getBeanFactory().\n-                                getSingleton(ruleClass.getName());\n-                    } else {\n-                        rule = (PullCorrelationRule) ApplicationContextProvider.getBeanFactory().\n-                                createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                        ApplicationContextProvider.getBeanFactory().\n-                                registerSingleton(ruleClass.getName(), rule);\n-                    }\n                     rule.setConf(ruleConf);\n                 }\n \n@@ -194,25 +154,15 @@ public static Optional<PushCorrelationRule> buildPushCorrelationRule(final Imple\n \n             case JAVA:\n             default:\n-                PushCorrelationRule rule = null;\n-\n                 PushCorrelationRuleConf ruleConf =\n                         POJOHelper.deserialize(impl.getBody(), PushCorrelationRuleConf.class);\n                 Class<? extends PushCorrelationRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n                         getBean(ImplementationLookup.class).getPushCorrelationRuleClass(ruleConf.getClass());\n-                if (ruleClass == null) {\n+\n+                PushCorrelationRule rule = buildJavaWithConf(ruleClass);\n+                if (rule == null) {\n                     LOG.warn(\"Could not find matching push correlation rule for {}\", impl.getClass());\n                 } else {\n-                    // fetch (or create) rule\n-                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n-                        rule = (PushCorrelationRule) ApplicationContextProvider.getBeanFactory().\n-                                getSingleton(ruleClass.getName());\n-                    } else {\n-                        rule = (PushCorrelationRule) ApplicationContextProvider.getBeanFactory().\n-                                createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                        ApplicationContextProvider.getBeanFactory().\n-                                registerSingleton(ruleClass.getName(), rule);\n-                    }\n                     rule.setConf(ruleConf);\n                 }\n \n@@ -265,6 +215,31 @@ private static <T> T buildJava(final Implementation impl)\n                 createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T buildJavaWithConf(final Class<T> clazz) {\n+        T bean = null;\n+\n+        if (clazz != null) {\n+            if (ApplicationContextProvider.getBeanFactory().containsSingleton(clazz.getName())) {\n+                bean = (T) ApplicationContextProvider.getBeanFactory().getSingleton(clazz.getName());\n+            } else {\n+                try {\n+                    bean = (T) ApplicationContextProvider.getBeanFactory().\n+                            createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                    ApplicationContextProvider.getBeanFactory().registerSingleton(clazz.getName(), bean);\n+                } catch (IllegalStateException e) {\n+                    LOG.debug(\"While attempting to register {}\", clazz.getName(), e);\n+\n+                    // if this exception was raised, it means another bean for same name is already registered,\n+                    // revert to it\n+                    bean = (T) ApplicationContextProvider.getBeanFactory().getSingleton(clazz.getName());\n+                }\n+            }\n+        }\n+\n+        return bean;\n+    }\n+\n     public static Class<?> purge(final String implementation) {\n         return CLASS_CACHE.remove(implementation);\n     }"},{"sha":"9c6238148401cd796c5af6da87a86fb6525f6158","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/ImplementationManagerTest.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/50469a15b51b99e6b1e52a05626f96e0b9ce6cdd/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/50469a15b51b99e6b1e52a05626f96e0b9ce6cdd/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java?ref=50469a15b51b99e6b1e52a05626f96e0b9ce6cdd","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring;\n+\n+import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.TestImplementation;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+@SpringJUnitConfig(locations = { \"classpath:springTest.xml\" })\n+public class ImplementationManagerTest {\n+\n+    private DefaultPasswordRuleConf createBaseDefaultPasswordRuleConf() {\n+        DefaultPasswordRuleConf baseDefaultPasswordRuleConf = new DefaultPasswordRuleConf();\n+        baseDefaultPasswordRuleConf.setAlphanumericRequired(false);\n+        baseDefaultPasswordRuleConf.setDigitRequired(false);\n+        baseDefaultPasswordRuleConf.setLowercaseRequired(false);\n+        baseDefaultPasswordRuleConf.setMaxLength(1000);\n+        baseDefaultPasswordRuleConf.setMinLength(8);\n+        baseDefaultPasswordRuleConf.setMustEndWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustEndWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustEndWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustStartWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustStartWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustStartWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntEndWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntEndWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustntEndWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntStartWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntStartWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustntStartWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setNonAlphanumericRequired(false);\n+        baseDefaultPasswordRuleConf.setUppercaseRequired(false);\n+        return baseDefaultPasswordRuleConf;\n+    }\n+\n+    @Test\n+    public void concurrentPasswordRuleBuilding() {\n+        String body = POJOHelper.serialize(createBaseDefaultPasswordRuleConf());\n+\n+        assertTimeoutPreemptively(Duration.ofSeconds(30), () -> {\n+            TestImplementation implementation = new TestImplementation();\n+            implementation.setBody(body);\n+            ReentrantLock lock = new ReentrantLock();\n+            lock.lock();\n+            AtomicInteger runningThreads = new AtomicInteger(0);\n+            AtomicInteger errorCount = new AtomicInteger(0);\n+            List<String> errorMessages = Collections.synchronizedList(new LinkedList<>());\n+            for (int i = 0; i < 10; i++) {\n+                runningThreads.incrementAndGet();\n+                new Thread(() -> {\n+                    try {\n+                        while (lock.isLocked()) {\n+                            Thread.yield();\n+                        }\n+                        try {\n+                            ImplementationManager.buildPasswordRule(implementation).orElseThrow();\n+                        } catch (Exception e) {\n+                            errorMessages.add(e.getLocalizedMessage());\n+                            errorCount.incrementAndGet();\n+                        }\n+                    } finally {\n+                        runningThreads.decrementAndGet();\n+                    }\n+                }).start();\n+            }\n+            lock.unlock();\n+            while (runningThreads.get() > 0) {\n+                Thread.yield();\n+            }\n+\n+            assertTrue(\n+                    errorMessages.isEmpty(),\n+                    errorMessages.stream().collect(Collectors.joining(System.lineSeparator())));\n+        });\n+    }\n+}"}]}