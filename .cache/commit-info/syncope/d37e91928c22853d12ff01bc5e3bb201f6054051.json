{"sha":"d37e91928c22853d12ff01bc5e3bb201f6054051","node_id":"C_kwDOJfYA1toAKGQzN2U5MTkyOGMyMjg1M2QxMmZmMDFiYzVlM2JiMjAxZjYwNTQwNTE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-11-05T08:01:59Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-11-05T08:02:18Z"},"message":"[SYNCOPE-1648] Cleanup AnyCond conditions","tree":{"sha":"5a818ac49a2d45859bac9e2aa536a0c2569ceff0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5a818ac49a2d45859bac9e2aa536a0c2569ceff0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d37e91928c22853d12ff01bc5e3bb201f6054051","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d37e91928c22853d12ff01bc5e3bb201f6054051","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d37e91928c22853d12ff01bc5e3bb201f6054051","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d37e91928c22853d12ff01bc5e3bb201f6054051/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"30a9ab91b34ca633878357fd26402906b423356d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/30a9ab91b34ca633878357fd26402906b423356d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/30a9ab91b34ca633878357fd26402906b423356d"}],"stats":{"total":52,"additions":35,"deletions":17},"files":[{"sha":"4ca180368235350f3cd1fa56c1bde0cd18f9fab1","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":8,"deletions":16,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d37e91928c22853d12ff01bc5e3bb201f6054051/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d37e91928c22853d12ff01bc5e3bb201f6054051/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=d37e91928c22853d12ff01bc5e3bb201f6054051","patch":"@@ -126,14 +126,13 @@ protected void fillAttrQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        // This first branch is required for handling with not conditions given on multivalue fields (SYNCOPE-1419)\n-        if (not && !(cond instanceof AnyCond)) {\n+        if (not && cond.getType() == AttrCond.Type.ISNULL) {\n+            cond.setType(AttrCond.Type.ISNOTNULL);\n+            fillAttrQuery(anyUtils, query, attrValue, schema, cond, true, parameters, svs);\n+        } else if (not) {\n             query.append(\"NOT (\");\n             fillAttrQuery(anyUtils, query, attrValue, schema, cond, false, parameters, svs);\n             query.append(')');\n-        } else if (not && cond.getType() == AttrCond.Type.ISNULL) {\n-            cond.setType(AttrCond.Type.ISNOTNULL);\n-            fillAttrQuery(anyUtils, query, attrValue, schema, cond, true, parameters, svs);\n         } else {\n             String key = key(schema.getType());\n \n@@ -251,15 +250,6 @@ protected String getQuery(\n             return ALWAYS_FALSE_ASSERTION;\n         }\n \n-        // normalize NULL / NOT NULL checks\n-        if (not) {\n-            if (cond.getType() == AttrCond.Type.ISNULL) {\n-                cond.setType(AttrCond.Type.ISNOTNULL);\n-            } else if (cond.getType() == AttrCond.Type.ISNOTNULL) {\n-                cond.setType(AttrCond.Type.ISNULL);\n-            }\n-        }\n-\n         StringBuilder query = new StringBuilder();\n \n         switch (cond.getType()) {\n@@ -757,8 +747,10 @@ protected void fillAttrQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        // This first branch is required for handling with not conditions given on multivalue fields (SYNCOPE-1419)\n-        if (not && !(cond instanceof AnyCond)) {\n+        if (not && cond.getType() == AttrCond.Type.ISNULL) {\n+            cond.setType(AttrCond.Type.ISNOTNULL);\n+            fillAttrQuery(query, attrValue, schema, cond, true, parameters, svs);\n+        } else if (not) {\n             query.append(\"NOT (\");\n             fillAttrQuery(query, attrValue, schema, cond, false, parameters, svs);\n             query.append(')');"},{"sha":"ec448353060aa8c81fab4210649da29c706ef499","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d37e91928c22853d12ff01bc5e3bb201f6054051/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d37e91928c22853d12ff01bc5e3bb201f6054051/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=d37e91928c22853d12ff01bc5e3bb201f6054051","patch":"@@ -166,7 +166,7 @@ public void searchCaseInsensitiveWithLikeCondition() {\n     }\n \n     @Test\n-    public void searchWithNotCondition() {\n+    public void searchWithNotCondition_AttrCond() {\n         AttrCond fullnameLeafCond = new AttrCond(AttrCond.Type.EQ);\n         fullnameLeafCond.setSchema(\"fullname\");\n         fullnameLeafCond.setExpression(\"Giuseppe Verdi\");\n@@ -183,6 +183,22 @@ public void searchWithNotCondition() {\n         assertTrue(ids.contains(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\"));\n     }\n \n+    @Test\n+    public void searchWithNotCondition_AnyCond() {\n+        AnyCond usernameLeafCond = new AnyCond(AttrCond.Type.EQ);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"verdi\");\n+\n+        SearchCond cond = SearchCond.getNotLeaf(usernameLeafCond);\n+        assertTrue(cond.isValid());\n+\n+        List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(4, users.size());\n+\n+        assertTrue(users.stream().noneMatch(user -> \"verdi\".equals(user.getUsername())));\n+    }\n+\n     @Test\n     public void searchCaseInsensitiveWithNotCondition() {\n         AttrCond fullnameLeafCond = new AttrCond(AttrCond.Type.IEQ);"},{"sha":"073104f97c3e313ddb3e7dc0b910b8c9aedb421e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d37e91928c22853d12ff01bc5e3bb201f6054051/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d37e91928c22853d12ff01bc5e3bb201f6054051/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=d37e91928c22853d12ff01bc5e3bb201f6054051","patch":"@@ -791,4 +791,14 @@ public void issueSYNCOPE1419() {\n \n         assertEquals(total.getTotalCount(), matching.getTotalCount() + unmatching.getTotalCount());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1648() {\n+        PagedResult<UserTO> matching = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                                is(\"username\").notEqualTo(\"verdi\").query()).\n+                        build());\n+        assertTrue(matching.getResult().stream().noneMatch(user -> \"verdi\".equals(user.getUsername())));\n+    }\n }"}]}