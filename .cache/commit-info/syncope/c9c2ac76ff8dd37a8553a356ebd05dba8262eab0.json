{"sha":"c9c2ac76ff8dd37a8553a356ebd05dba8262eab0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM5YzJhYzc2ZmY4ZGQzN2E4NTUzYTM1NmViZDA1ZGJhODI2MmVhYjA=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-01-25T15:00:08Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-01-25T15:00:08Z"},"message":"bug-fix single value attribute update\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae47bb5ca86e589003d6cc901375191c50a20567","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ae47bb5ca86e589003d6cc901375191c50a20567"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/comments","author":null,"committer":null,"parents":[{"sha":"e49696e229f9bdb9e87ad68f03d39c00b08f6415","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e49696e229f9bdb9e87ad68f03d39c00b08f6415","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e49696e229f9bdb9e87ad68f03d39c00b08f6415"}],"stats":{"total":164,"additions":58,"deletions":106},"files":[{"sha":"4ce931b2e4421c695692bc57936241d0278d0a39","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=c9c2ac76ff8dd37a8553a356ebd05dba8262eab0","patch":"@@ -48,6 +48,9 @@ public <T extends AbstractAttrValue> T addValue(final String value,\n             setUniqueValue(attrValue);\n         } else {\n             if (!getSchema().isMultivalue()) {\n+                for (AbstractAttrValue v : getValues()) {\n+                    v.setAttribute(null);\n+                }\n                 getValues().clear();\n             }\n             addValue(attrValue);\n@@ -80,9 +83,6 @@ public <T extends AbstractAttrValue> List<String> getValuesAsStrings() {\n             for (AbstractAttrValue attributeValue : getValues()) {\n                 result.add(attributeValue.getValueAsString());\n             }\n-            if (getUniqueValue() != null) {\n-                result.add(getUniqueValue().getValueAsString());\n-            }\n         }\n \n         return result;"},{"sha":"6f6c4d10c82cd426cba4644a53d075f617d1278e","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttrValue.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java?ref=c9c2ac76ff8dd37a8553a356ebd05dba8262eab0","patch":"@@ -19,6 +19,7 @@\n import javax.persistence.Inheritance;\n import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n+import javax.validation.constraints.NotNull;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n@@ -29,7 +30,8 @@ public class MAttrValue extends AbstractAttrValue {\n     @Id\n     private Long id;\n \n-    @ManyToOne(optional = false)\n+    @ManyToOne\n+    @NotNull\n     private MAttr attribute;\n \n     @Override"},{"sha":"5969ec1f2d92b41d50ee6ea64a85aae0c9f9fcc2","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttrValue.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java?ref=c9c2ac76ff8dd37a8553a356ebd05dba8262eab0","patch":"@@ -19,6 +19,7 @@\n import javax.persistence.Inheritance;\n import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n+import javax.validation.constraints.NotNull;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n@@ -29,7 +30,8 @@ public class RAttrValue extends AbstractAttrValue {\n     @Id\n     private Long id;\n \n-    @ManyToOne(optional = false)\n+    @ManyToOne\n+    @NotNull\n     private RAttr attribute;\n \n     @Override"},{"sha":"5615ce330a56f3c6349bd7943ad1fab839fbb317","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttrValue.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java?ref=c9c2ac76ff8dd37a8553a356ebd05dba8262eab0","patch":"@@ -19,6 +19,7 @@\n import javax.persistence.Inheritance;\n import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n+import javax.validation.constraints.NotNull;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n@@ -29,7 +30,8 @@ public class UAttrValue extends AbstractAttrValue {\n     @Id\n     private Long id;\n \n-    @ManyToOne(optional = false)\n+    @ManyToOne\n+    @NotNull\n     private UAttr attribute;\n \n     @Override"},{"sha":"d5378c7c2b320d4e3a5afbe80d8093c86f575428","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttrValidator.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java?ref=c9c2ac76ff8dd37a8553a356ebd05dba8262eab0","patch":"@@ -16,12 +16,20 @@\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.types.EntityViolationType;\n \n public class AttrValidator\n         implements ConstraintValidator<AttrCheck, AbstractAttr> {\n \n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            AttrValidator.class);\n+\n     @Override\n     public void initialize(final AttrCheck constraintAnnotation) {\n     }\n@@ -48,6 +56,10 @@ public boolean isValid(final AbstractAttr object,\n             }\n \n             if (!isValid) {\n+                LOG.error(\"Invalid values for attribute: \"\n+                        + \"schema=\" + object.getSchema().getName() + \", \"\n+                        + \"values={}\", object.getValuesAsStrings());\n+\n                 context.disableDefaultConstraintViolation();\n                 context.buildConstraintViolationWithTemplate(\n                         EntityViolationType.InvalidValueList.toString())."},{"sha":"3ad3270d9908f6104e81eb4ba2383032af3a61a0","filename":"core/src/main/java/org/syncope/core/workflow/StoreAttrValue.java","status":"renamed","additions":34,"deletions":15,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9c2ac76ff8dd37a8553a356ebd05dba8262eab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java?ref=c9c2ac76ff8dd37a8553a356ebd05dba8262eab0","patch":"@@ -14,24 +14,27 @@\n  */\n package org.syncope.core.workflow;\n \n+import com.opensymphony.module.propertyset.PropertySet;\n import com.opensymphony.workflow.FunctionProvider;\n import com.opensymphony.workflow.WorkflowException;\n+import java.util.Date;\n import java.util.Map;\n-import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.types.SchemaType;\n \n-abstract class AbstractStoreAttributeValue extends OSWorkflowComponent\n+public class StoreAttrValue extends OSWorkflowComponent\n         implements FunctionProvider {\n \n-    protected AttributableUtil attributableUtil;\n+    private AttributableUtil attributableUtil;\n \n-    protected AbstractAttr getAttribute(Map transientVars, Map args)\n+    private AbstractAttr getAttribute(Map transientVars, Map args)\n             throws WorkflowException {\n \n         String schemaName = (String) args.get(\"schema\");\n@@ -50,17 +53,17 @@ protected AbstractAttr getAttribute(Map transientVars, Map args)\n             attributable = (SyncopeUser) transientVars.get(\n                     Constants.SYNCOPE_USER);\n         } else if (Constants.SYNCOPE_ROLE.equals(kind)) {\n-            attributableUtil = AttributableUtil.ROLE;\n-            attributable = (SyncopeRole) transientVars.get(\n-                    Constants.SYNCOPE_ROLE);\n-        } else if (Constants.MEMBERSHIP.equals(kind)) {\n-            attributableUtil = AttributableUtil.MEMBERSHIP;\n-            attributable = (Membership) transientVars.get(\n-                    Constants.MEMBERSHIP);\n-        } else {\n-            throw new WorkflowException(\n-                    \"Invalid attributable specified: \" + kind);\n-        }\n+                attributableUtil = AttributableUtil.ROLE;\n+                attributable = (SyncopeRole) transientVars.get(\n+                        Constants.SYNCOPE_ROLE);\n+            } else if (Constants.MEMBERSHIP.equals(kind)) {\n+                    attributableUtil = AttributableUtil.MEMBERSHIP;\n+                    attributable = (Membership) transientVars.get(\n+                            Constants.MEMBERSHIP);\n+                } else {\n+                    throw new WorkflowException(\n+                            \"Invalid attributable specified: \" + kind);\n+                }\n         if (attributable == null) {\n             throw new WorkflowException(\"Could not find instance \"\n                     + attributableUtil);\n@@ -83,4 +86,20 @@ protected AbstractAttr getAttribute(Map transientVars, Map args)\n \n         return attribute;\n     }\n+\n+    public void execute(Map transientVars, Map args, PropertySet ps)\n+            throws WorkflowException {\n+\n+        AbstractAttr attribute = getAttribute(transientVars, args);\n+\n+        String val = (String) transientVars.get(args.get(\"schema\"));\n+\n+        if (val != null && !val.isEmpty()) {\n+            attribute.addValue(val, attributableUtil);\n+        } else if (attribute.getSchema().getType() == SchemaType.Date) {\n+                attribute.addValue(\n+                        attribute.getSchema().getFormatter().format(\n+                        new Date()), attributableUtil);\n+            }\n+    }\n }","previous_filename":"core/src/main/java/org/syncope/core/workflow/AbstractStoreAttributeValue.java"},{"sha":"74b84bb52e3e0c20899926ffc3d0958f00593ca2","filename":"core/src/main/java/org/syncope/core/workflow/StoreDate.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e49696e229f9bdb9e87ad68f03d39c00b08f6415/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e49696e229f9bdb9e87ad68f03d39c00b08f6415/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java?ref=e49696e229f9bdb9e87ad68f03d39c00b08f6415","patch":"@@ -1,40 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.module.propertyset.PropertySet;\n-import com.opensymphony.workflow.WorkflowException;\n-import java.util.Date;\n-import java.util.Map;\n-import org.syncope.core.persistence.beans.AbstractAttr;\n-import org.syncope.core.persistence.beans.AbstractAttrValue;\n-\n-public class StoreDate extends AbstractStoreAttributeValue {\n-\n-    @Override\n-    public void execute(Map transientVars, Map args, PropertySet ps)\n-            throws WorkflowException {\n-\n-        AbstractAttr attribute = getAttribute(transientVars, args);\n-\n-        AbstractAttrValue date = attributableUtil.newAttributeValue();\n-        date.setDateValue(new Date());\n-        date.setAttribute(attribute);\n-        if (!attribute.getSchema().isMultivalue()) {\n-            attribute.getValues().clear();\n-        }\n-        attribute.addValue(date);\n-    }\n-}"},{"sha":"d4f8249b0b71b50de8db0a51efa87de96db1d6e8","filename":"core/src/main/java/org/syncope/core/workflow/StoreText.java","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e49696e229f9bdb9e87ad68f03d39c00b08f6415/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e49696e229f9bdb9e87ad68f03d39c00b08f6415/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java?ref=e49696e229f9bdb9e87ad68f03d39c00b08f6415","patch":"@@ -1,45 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.module.propertyset.PropertySet;\n-import com.opensymphony.workflow.WorkflowException;\n-import java.util.Map;\n-import org.syncope.core.persistence.beans.AbstractAttr;\n-import org.syncope.core.persistence.beans.AbstractAttrValue;\n-\n-public class StoreText extends AbstractStoreAttributeValue {\n-\n-    @Override\n-    public void execute(Map transientVars, Map args, PropertySet ps)\n-            throws WorkflowException {\n-\n-        AbstractAttr attribute = getAttribute(transientVars, args);\n-\n-        String text = (String) transientVars.get(args.get(\"schema\"));\n-        if (text == null) {\n-            throw new WorkflowException(\"Missing text\");\n-        }\n-\n-        AbstractAttrValue textAttributeValue =\n-                attributableUtil.newAttributeValue();\n-        textAttributeValue.setStringValue(text);\n-        textAttributeValue.setAttribute(attribute);\n-        if (!attribute.getSchema().isMultivalue()) {\n-            attribute.getValues().clear();\n-        }\n-        attribute.addValue(textAttributeValue);\n-    }\n-}"}]}