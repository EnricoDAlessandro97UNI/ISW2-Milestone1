{"sha":"7e66e3d5abd7709c04d1abde3af119159f3de961","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdlNjZlM2Q1YWJkNzcwOWMwNGQxYWJkZTNhZjExOTE1OWYzZGU5NjE=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2016-09-05T11:16:57Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2016-09-05T13:02:16Z"},"message":"SYNCOPE-929 - Braces are ignored for FIQL strings. Tests added.","tree":{"sha":"3b829a4c696bd19ceacf2d12327e33ef80b94790","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3b829a4c696bd19ceacf2d12327e33ef80b94790"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7e66e3d5abd7709c04d1abde3af119159f3de961","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7e66e3d5abd7709c04d1abde3af119159f3de961","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7e66e3d5abd7709c04d1abde3af119159f3de961","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7e66e3d5abd7709c04d1abde3af119159f3de961/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"f17be3cf91d484595a632d01761a62b1b1d29b34","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f17be3cf91d484595a632d01761a62b1b1d29b34","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f17be3cf91d484595a632d01761a62b1b1d29b34"}],"stats":{"total":53,"additions":49,"deletions":4},"files":[{"sha":"cc73bd408d55bb9b151c8c63301801204bbec0a9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7e66e3d5abd7709c04d1abde3af119159f3de961/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7e66e3d5abd7709c04d1abde3af119159f3de961/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=7e66e3d5abd7709c04d1abde3af119159f3de961","patch":"@@ -473,17 +473,23 @@ private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> par\n                 break;\n \n             case AND:\n-                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, svs)).\n+                String andSubQuery = getQuery(nodeCond.getLeftNodeCond(), parameters, svs).toString();\n+                // Add extra parentheses\n+                andSubQuery = andSubQuery.replaceFirst(\"WHERE \", \"WHERE (\");\n+                query.append(andSubQuery).\n                         append(\" AND any_id IN ( \").\n                         append(getQuery(nodeCond.getRightNodeCond(), parameters, svs)).\n-                        append(\")\");\n+                        append(\"))\");\n                 break;\n \n             case OR:\n-                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, svs)).\n+                String orSubQuery = getQuery(nodeCond.getLeftNodeCond(), parameters, svs).toString();\n+                // Add extra parentheses\n+                orSubQuery = orSubQuery.replaceFirst(\"WHERE \", \"WHERE (\");\n+                query.append(orSubQuery).\n                         append(\" OR any_id IN ( \").\n                         append(getQuery(nodeCond.getRightNodeCond(), parameters, svs)).\n-                        append(\")\");\n+                        append(\"))\");\n                 break;\n \n             default:"},{"sha":"e661d432dcca361b23f5ad1e97bdc17abd227eaa","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7e66e3d5abd7709c04d1abde3af119159f3de961/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7e66e3d5abd7709c04d1abde3af119159f3de961/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=7e66e3d5abd7709c04d1abde3af119159f3de961","patch":"@@ -602,4 +602,30 @@ public void issueSYNCOPE433() {\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n+    \n+    @Test\n+    public void issueSYNCOPE929() {\n+        AttributeCond rossiniCond = new AttributeCond(AttributeCond.Type.EQ);\n+        rossiniCond.setSchema(\"surname\");\n+        rossiniCond.setExpression(\"Rossini\");\n+        \n+        AttributeCond genderCond = new AttributeCond(AttributeCond.Type.EQ);\n+        genderCond.setSchema(\"gender\");\n+        genderCond.setExpression(\"M\");\n+\n+        SearchCond orCond = \n+            SearchCond.getOrCond(SearchCond.getLeafCond(rossiniCond),\n+                                 SearchCond.getLeafCond(genderCond));\n+        \n+        AttributeCond belliniCond = new AttributeCond(AttributeCond.Type.EQ);\n+        belliniCond.setSchema(\"surname\");\n+        belliniCond.setExpression(\"Bellini\");\n+        \n+        SearchCond searchCond = \n+            SearchCond.getAndCond(orCond, SearchCond.getLeafCond(belliniCond));\n+\n+        List<User> users = searchDAO.search(searchCond, AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+    }\n }"},{"sha":"c5ab231ac71a7c41995c90b7a32709bb68a74b39","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7e66e3d5abd7709c04d1abde3af119159f3de961/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7e66e3d5abd7709c04d1abde3af119159f3de961/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=7e66e3d5abd7709c04d1abde3af119159f3de961","patch":"@@ -443,4 +443,17 @@ public void issueSYNCOPE768() {\n                 getTotalCount();\n         assertEquals(nonOrdered, orderedByNullable);\n     }\n+    \n+    @Test\n+    public void issueSYNCOPE929() {\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(\"(surname==Rossini,gender==M);surname==Bellini\").build());\n+        \n+        assertNotNull(matchingUsers);\n+\n+        assertFalse(matchingUsers.getResult().isEmpty());\n+        for (UserTO user : matchingUsers.getResult()) {\n+            assertTrue(user.getUsername().startsWith(\"bellini\"));\n+        }\n+    }\n }"}]}