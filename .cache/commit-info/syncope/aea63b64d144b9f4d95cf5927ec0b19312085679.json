{"sha":"aea63b64d144b9f4d95cf5927ec0b19312085679","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFlYTYzYjY0ZDE0NGI5ZjRkOTVjZjU5MjdlYzBiMTkzMTIwODU2Nzk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-30T12:53:16Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-30T12:53:16Z"},"message":"Restoring QueryResourceInfoComparator removed by SYNCOPE-630 in order to avoid test failures with JDK 6","tree":{"sha":"3bbe8f3a0ca8443b02034f0c45140ac5e15d9d51","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3bbe8f3a0ca8443b02034f0c45140ac5e15d9d51"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/aea63b64d144b9f4d95cf5927ec0b19312085679","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aea63b64d144b9f4d95cf5927ec0b19312085679","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aea63b64d144b9f4d95cf5927ec0b19312085679","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aea63b64d144b9f4d95cf5927ec0b19312085679/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"64fa513e11e28f8f24ddacf803e6036edaf78895","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/64fa513e11e28f8f24ddacf803e6036edaf78895","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/64fa513e11e28f8f24ddacf803e6036edaf78895"}],"stats":{"total":117,"additions":117,"deletions":0},"files":[{"sha":"bcc015df44d7202cc7281dcc0502341d6d99fe47","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/QueryResourceInfoComparator.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aea63b64d144b9f4d95cf5927ec0b19312085679/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FQueryResourceInfoComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aea63b64d144b9f4d95cf5927ec0b19312085679/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FQueryResourceInfoComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FQueryResourceInfoComparator.java?ref=aea63b64d144b9f4d95cf5927ec0b19312085679","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.utils;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.cxf.jaxrs.ext.ResourceComparator;\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfoComparator;\n+import org.apache.cxf.jaxrs.model.Parameter;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.message.Message;\n+\n+public class QueryResourceInfoComparator extends OperationResourceInfoComparator implements ResourceComparator {\n+\n+    public QueryResourceInfoComparator() {\n+        super(null, null);\n+    }\n+\n+    @Override\n+    public int compare(final ClassResourceInfo cri1, final ClassResourceInfo cri2, final Message message) {\n+        // Leave Class selection to CXF\n+        return 0;\n+    }\n+\n+    @Override\n+    public int compare(final OperationResourceInfo oper1, final OperationResourceInfo oper2, final Message message) {\n+        // Check if CXF can make a decision\n+        int cxfResult = super.compare(oper1, oper2);\n+        if (cxfResult != 0) {\n+            return cxfResult;\n+        }\n+\n+        int op1Counter = getMatchingRate(oper1, message);\n+        int op2Counter = getMatchingRate(oper2, message);\n+\n+        return op1Counter == op2Counter\n+                ? 0\n+                : op1Counter < op2Counter\n+                ? 1\n+                : -1;\n+    }\n+\n+    /**\n+     * This method calculates a number indicating a good or bad match between values provided within the request and\n+     * expected method parameters. A higher number means a better match.\n+     *\n+     * @param operation The operation to be rated, based on contained parameterInfo values.\n+     * @param message A message containing query and header values from user request\n+     * @return A positive or negative number, indicating a good match between query and method\n+     */\n+    protected int getMatchingRate(final OperationResourceInfo operation, final Message message) {\n+        List<Parameter> params = operation.getParameters();\n+        if (params == null || params.isEmpty()) {\n+            return 0;\n+        }\n+\n+        // Get Request QueryParams\n+        String query = (String) message.get(Message.QUERY_STRING);\n+        String path = (String) message.get(Message.REQUEST_URI);\n+        Map<String, List<String>> qParams = JAXRSUtils.getStructuredParams(query, \"&\", true, false);\n+        Map<String, List<String>> mParams = JAXRSUtils.getMatrixParams(path, true);\n+        // Get Request Headers\n+        Map<?, ?> qHeader = (java.util.Map<?, ?>) message.get(Message.PROTOCOL_HEADERS);\n+\n+        int rate = 0;\n+        for (Parameter p : params) {\n+            switch (p.getType()) {\n+                case QUERY:\n+                    if (qParams.containsKey(p.getName())) {\n+                        rate += 2;\n+                    } else if (p.getDefaultValue() == null) {\n+                        rate -= 1;\n+                    }\n+                    break;\n+                case MATRIX:\n+                    if (mParams.containsKey(p.getName())) {\n+                        rate += 2;\n+                    } else if (p.getDefaultValue() == null) {\n+                        rate -= 1;\n+                    }\n+                    break;\n+                case HEADER:\n+                    if (qHeader.containsKey(p.getName())) {\n+                        rate += 2;\n+                    } else if (p.getDefaultValue() == null) {\n+                        rate -= 1;\n+                    }\n+                    break;\n+                default:\n+                    break;\n+            }\n+        }\n+        return rate;\n+    }\n+}"},{"sha":"1b71e31d41f4e0c1a2b34e6ada8ade705d7b0c11","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aea63b64d144b9f4d95cf5927ec0b19312085679/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aea63b64d144b9f4d95cf5927ec0b19312085679/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=aea63b64d144b9f4d95cf5927ec0b19312085679","patch":"@@ -100,6 +100,9 @@ under the License.\n   <jaxrs:server id=\"restContainer\" address=\"/\" \n                 basePackages=\"org.apache.syncope.common.services, org.apache.syncope.core.services\" \n                 staticSubresourceResolution=\"true\">\n+    <jaxrs:resourceComparator>\n+      <bean id=\"queryResourceInfoComparator\" class=\"org.apache.syncope.core.rest.utils.QueryResourceInfoComparator\"/>\n+    </jaxrs:resourceComparator>\n     <jaxrs:properties> \n       <entry key=\"search.lax.property.match\" value=\"true\"/> \n     </jaxrs:properties> "}]}