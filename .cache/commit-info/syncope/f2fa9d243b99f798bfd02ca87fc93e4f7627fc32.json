{"sha":"f2fa9d243b99f798bfd02ca87fc93e4f7627fc32","node_id":"C_kwDOJfYA1toAKGYyZmE5ZDI0M2I5OWY3OThiZmQwMmNhODdmYzkzZTRmNzYyN2ZjMzI","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-02-04T10:38:33Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-02-04T10:40:10Z"},"message":"[SYNCOPE-1727] Indexing realm values by key, not by full path (#407)","tree":{"sha":"06e9b8fa61ce44c086a45af2bd30c2004dceaeec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/06e9b8fa61ce44c086a45af2bd30c2004dceaeec"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1d482c225506ab3d348ec575c12038cfb2236df7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1d482c225506ab3d348ec575c12038cfb2236df7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1d482c225506ab3d348ec575c12038cfb2236df7"}],"stats":{"total":103,"additions":74,"deletions":29},"files":[{"sha":"19c5769485926c35634066914695d115ceb2414d","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=f2fa9d243b99f798bfd02ca87fc93e4f7627fc32","patch":"@@ -100,7 +100,7 @@ public Map<String, Object> document(final Any<?> any, final String domain) throw\n \n         Map<String, Object> builder = new HashMap<>();\n         builder.put(\"id\", any.getKey());\n-        builder.put(\"realm\", any.getRealm().getFullPath());\n+        builder.put(\"realm\", any.getRealm().getKey());\n         builder.put(\"anyType\", any.getType().getKey());\n         builder.put(\"creationDate\", any.getCreationDate());\n         builder.put(\"creationContext\", any.getCreationContext());"},{"sha":"726b8b8047180c3f4757b2e5f98be4663bf90813","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":14,"deletions":19,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=f2fa9d243b99f798bfd02ca87fc93e4f7627fc32","patch":"@@ -152,17 +152,16 @@ protected Triple<Optional<Query>, Set<String>, Set<String>> getAdminRealmsFilter\n                 if (goRealm.isPresent()) {\n                     groupOwners.add(goRealm.get().getRight());\n                 } else if (realmPath.startsWith(\"/\")) {\n-                    Realm realm = realmDAO.findByFullPath(realmPath);\n-                    if (realm == null) {\n+                    Realm realm = Optional.ofNullable(realmDAO.findByFullPath(realmPath)).orElseThrow(() -> {\n                         SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n                         noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n-                        throw noRealm;\n-                    } else {\n-                        realmDAO.findDescendants(realm).forEach(descendant -> queries.add(\n-                                new Query.Builder().term(QueryBuilders.term().\n-                                        field(\"realm\").value(FieldValue.of(descendant.getFullPath())).build()).\n-                                        build()));\n-                    }\n+                        return noRealm;\n+                    });\n+\n+                    realmDAO.findDescendants(realm).forEach(descendant -> queries.add(\n+                            new Query.Builder().term(QueryBuilders.term().\n+                                    field(\"realm\").value(FieldValue.of(descendant.getKey())).build()).\n+                                    build()));\n                 } else {\n                     DynRealm dynRealm = dynRealmDAO.find(realmPath);\n                     if (dynRealm == null) {\n@@ -178,7 +177,7 @@ protected Triple<Optional<Query>, Set<String>, Set<String>> getAdminRealmsFilter\n         } else {\n             if (adminRealms.stream().anyMatch(r -> base.getFullPath().startsWith(r))) {\n                 queries.add(new Query.Builder().term(QueryBuilders.term().\n-                        field(\"realm\").value(FieldValue.of(base.getFullPath())).build()).\n+                        field(\"realm\").value(FieldValue.of(base.getKey())).build()).\n                         build());\n             }\n         }\n@@ -206,7 +205,7 @@ protected Query getQuery(\n                 query = new Query.Builder().bool(\n                         QueryBuilders.bool().\n                                 must(new Query.Builder().term(QueryBuilders.term().\n-                                        field(\"realm\").value(FieldValue.of(base.getFullPath())).build()).\n+                                        field(\"realm\").value(FieldValue.of(base.getKey())).build()).\n                                         build()).\n                                 must(query).build()).\n                         build();\n@@ -635,14 +634,10 @@ protected Query getQuery(final AttrCond cond, final AnyTypeKind kind) {\n     }\n \n     protected Query getQuery(final AnyCond cond, final AnyTypeKind kind) {\n-        if (JAXRSService.PARAM_REALM.equals(cond.getSchema())\n-                && SyncopeConstants.UUID_PATTERN.matcher(cond.getExpression()).matches()) {\n-\n-            Realm realm = realmDAO.find(cond.getExpression());\n-            if (realm == null) {\n-                throw new IllegalArgumentException(\"Invalid Realm key: \" + cond.getExpression());\n-            }\n-            cond.setExpression(realm.getFullPath());\n+        if (JAXRSService.PARAM_REALM.equals(cond.getSchema()) && cond.getExpression().startsWith(\"/\")) {\n+            Realm realm = Optional.ofNullable(realmDAO.findByFullPath(cond.getExpression())).\n+                    orElseThrow(() -> new IllegalArgumentException(\"Invalid Realm full path: \" + cond.getExpression()));\n+            cond.setExpression(realm.getKey());\n         }\n \n         Triple<PlainSchema, PlainAttrValue, AnyCond> checked = check(cond, kind);"},{"sha":"1adbd0001b2fb750cbb8c24abd9ea9638973c388","filename":"ext/elasticsearch/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAOTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java?ref=f2fa9d243b99f798bfd02ca87fc93e4f7627fc32","patch":"@@ -113,7 +113,7 @@ protected void setupSearchDAO() {\n     public void getAdminRealmsFilter4realm() throws IOException {\n         // 1. mock\n         Realm root = mock(Realm.class);\n-        when(root.getFullPath()).thenReturn(SyncopeConstants.ROOT_REALM);\n+        when(root.getKey()).thenReturn(\"rootKey\");\n \n         when(realmDAO.findByFullPath(SyncopeConstants.ROOT_REALM)).thenReturn(root);\n         when(realmDAO.findDescendants(root)).thenReturn(List.of(root));\n@@ -126,7 +126,7 @@ public void getAdminRealmsFilter4realm() throws IOException {\n         assertThat(\n                 new Query.Builder().disMax(QueryBuilders.disMax().queries(\n                         new Query.Builder().term(QueryBuilders.term().field(\"realm\").value(\n-                                FieldValue.of(SyncopeConstants.ROOT_REALM)).build()).build()).build()).\n+                                FieldValue.of(\"rootKey\")).build()).build()).build()).\n                         build()).\n                 usingRecursiveComparison().isEqualTo(filter.getLeft().get());\n         assertEquals(Set.of(), filter.getMiddle());"},{"sha":"97010ee0b53bb22e5b881d09ef38053c8c6163b3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=f2fa9d243b99f798bfd02ca87fc93e4f7627fc32","patch":"@@ -38,6 +38,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Properties;\n import java.util.Set;\n import java.util.UUID;\n@@ -88,6 +89,7 @@\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n@@ -983,6 +985,10 @@ protected static List<AuditEntry> query(final AuditQuery query, final int maxWai\n         return results;\n     }\n \n+    protected static Optional<RealmTO> getRealm(final String fullPath) {\n+        return REALM_SERVICE.list(fullPath).stream().filter(realm -> fullPath.equals(realm.getFullPath())).findFirst();\n+    }\n+\n     @Autowired\n     protected ConfParamOps confParamOps;\n "},{"sha":"3c61f69260209e0a7376b41af3d5768ecb230eec","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=f2fa9d243b99f798bfd02ca87fc93e4f7627fc32","patch":"@@ -28,7 +28,6 @@\n import jakarta.ws.rs.core.GenericType;\n import jakarta.ws.rs.core.Response;\n import java.util.List;\n-import java.util.Optional;\n import java.util.UUID;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -60,10 +59,6 @@\n \n public class RealmITCase extends AbstractITCase {\n \n-    private static Optional<RealmTO> getRealm(final String fullPath) {\n-        return REALM_SERVICE.list(fullPath).stream().filter(realm -> fullPath.equals(realm.getFullPath())).findFirst();\n-    }\n-\n     @Test\n     public void search() {\n         PagedResult<RealmTO> match = REALM_SERVICE.search(new RealmQuery.Builder().keyword(\"*o*\").build());"},{"sha":"cd81a2050b05c573c38fcc67319c29e975e4491e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":51,"deletions":2,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2fa9d243b99f798bfd02ca87fc93e4f7627fc32/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=f2fa9d243b99f798bfd02ca87fc93e4f7627fc32","patch":"@@ -50,13 +50,15 @@\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n+import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.identityconnectors.framework.common.objects.Name;\n@@ -326,8 +328,6 @@ public void searchByBooleanAnyCond() {\n \n     @Test\n     public void searchByDate() {\n-        CLIENT_FACTORY.create(\"bellini\", \"password\").self();\n-\n         if (IS_ELASTICSEARCH_ENABLED) {\n             try {\n                 Thread.sleep(2000);\n@@ -808,4 +808,53 @@ public void issueSYNCOPE1663() {\n         assertNotNull(matching2);\n         assertFalse(matching2.getResult().isEmpty());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1727() {\n+        RealmTO realm = new RealmTO();\n+        realm.setName(\"syncope1727\");\n+\n+        // 1. create Realm\n+        Response response = REALM_SERVICE.create(\"/even/two\", realm);\n+        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n+        assertNotNull(actuals);\n+        assertTrue(actuals.length > 0);\n+        realm = actuals[0];\n+        assertNotNull(realm.getKey());\n+        assertEquals(\"syncope1727\", realm.getName());\n+        assertEquals(\"/even/two/syncope1727\", realm.getFullPath());\n+        assertEquals(realm.getParent(), getRealm(\"/even/two\").get().getKey());\n+\n+        // 2. create user\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope1727@syncope.apache.org\");\n+        userCR.setRealm(realm.getFullPath());\n+        UserTO user = createUser(userCR).getEntity();\n+\n+        // 3. search for user\n+        if (IS_ELASTICSEARCH_ENABLED) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n+\n+        PagedResult<UserTO> users = USER_SERVICE.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"realm\").\n+                        equalTo(realm.getKey()).query()).build());\n+        assertEquals(1, users.getResult().size());\n+        assertEquals(user.getKey(), users.getResult().get(0).getKey());\n+\n+        // 4. update parent Realm\n+        realm.setParent(getRealm(\"/odd\").get().getKey());\n+        REALM_SERVICE.update(realm);\n+        realm = getRealm(\"/odd/syncope1727\").get();\n+\n+        // 5. search again for user\n+        users = USER_SERVICE.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"realm\").\n+                        equalTo(realm.getKey()).query()).build());\n+        assertEquals(1, users.getResult().size());\n+        assertEquals(user.getKey(), users.getResult().get(0).getKey());\n+    }\n }"}]}