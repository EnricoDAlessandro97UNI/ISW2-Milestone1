{"sha":"20596e2e02e841f7897f39669a98a1f70e386f4e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIwNTk2ZTJlMDJlODQxZjc4OTdmMzk2NjlhOThhMWY3MGUzODZmNGU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-11T15:46:18Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-11T15:46:36Z"},"message":"[SYNCOPE-1152] Cleanup complete","tree":{"sha":"9855cfd3106ae27ca2fec3e56e4abb59127b747e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9855cfd3106ae27ca2fec3e56e4abb59127b747e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/20596e2e02e841f7897f39669a98a1f70e386f4e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/20596e2e02e841f7897f39669a98a1f70e386f4e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/20596e2e02e841f7897f39669a98a1f70e386f4e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/20596e2e02e841f7897f39669a98a1f70e386f4e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a7b54fa78606005a469f98758199f82212bb41bc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a7b54fa78606005a469f98758199f82212bb41bc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a7b54fa78606005a469f98758199f82212bb41bc"}],"stats":{"total":924,"additions":589,"deletions":335},"files":[{"sha":"06dcb13cdf1cfc80fe37a955245d29fa26ded73e","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/AnyTypeComparator.java","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7b54fa78606005a469f98758199f82212bb41bc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyTypeComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7b54fa78606005a469f98758199f82212bb41bc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyTypeComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyTypeComparator.java?ref=a7b54fa78606005a469f98758199f82212bb41bc","patch":"@@ -1,47 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.commons;\n-\n-import java.io.Serializable;\n-import java.util.Comparator;\n-import org.apache.commons.collections4.ComparatorUtils;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-\n-public class AnyTypeComparator implements Comparator<AnyTypeTO>, Serializable {\n-\n-    private static final long serialVersionUID = -8227715253094467138L;\n-\n-    @Override\n-    public int compare(final AnyTypeTO o1, final AnyTypeTO o2) {\n-        if (o1.getKind() == AnyTypeKind.USER) {\n-            return -1;\n-        }\n-        if (o2.getKind() == AnyTypeKind.USER) {\n-            return 1;\n-        }\n-        if (o1.getKind() == AnyTypeKind.GROUP) {\n-            return -1;\n-        }\n-        if (o2.getKind() == AnyTypeKind.GROUP) {\n-            return 1;\n-        }\n-        return ComparatorUtils.<String>naturalComparator().compare(o1.getKey(), o2.getKey());\n-    }\n-}"},{"sha":"2ac6f41f297d5fd970e8e8c9626e96a0bcc9a065","filename":"client/console/src/main/java/org/apache/syncope/client/console/layout/FormLayoutInfoUtils.java","status":"modified","additions":11,"deletions":15,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FFormLayoutInfoUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FFormLayoutInfoUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FFormLayoutInfoUtils.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.rest.RoleRestClient;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.PageReference;\n@@ -46,7 +45,7 @@ public final class FormLayoutInfoUtils {\n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n     public static Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObjectFormLayoutInfo>> fetch(\n-            final List<AnyTypeTO> anyTypeTOs) {\n+            final List<String> anyTypes) {\n \n         List<String> ownedRoles = SyncopeConsoleSession.get().getSelfTO().getRoles();\n         try {\n@@ -70,14 +69,13 @@ public static Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObj\n                     : new GroupFormLayoutInfo();\n \n             Map<String, AnyObjectFormLayoutInfo> anyObjectFormLayoutInfos = new HashMap<>();\n-            for (AnyTypeTO anyTypeTO : anyTypeTOs) {\n-                if (!anyTypeTO.getKey().equals(AnyTypeKind.USER.name())\n-                        && !anyTypeTO.getKey().equals(AnyTypeKind.GROUP.name())) {\n+            for (String anyType : anyTypes) {\n+                if (!anyType.equals(AnyTypeKind.USER.name()) && !anyType.equals(AnyTypeKind.GROUP.name())) {\n \n                     anyObjectFormLayoutInfos.put(\n-                            anyTypeTO.getKey(),\n-                            tree.has(anyTypeTO.getKey())\n-                            ? MAPPER.treeToValue(tree.get(anyTypeTO.getKey()), AnyObjectFormLayoutInfo.class)\n+                            anyType,\n+                            tree.has(anyType)\n+                            ? MAPPER.treeToValue(tree.get(anyType), AnyObjectFormLayoutInfo.class)\n                             : new AnyObjectFormLayoutInfo());\n                 }\n             }\n@@ -89,7 +87,7 @@ public static Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObj\n         }\n     }\n \n-    public static String defaultConsoleLayoutInfoIfEmpty(final String content, final List<AnyTypeTO> anyTypeTOs) {\n+    public static String defaultConsoleLayoutInfoIfEmpty(final String content, final List<String> anyTypes) {\n         String result;\n \n         if (StringUtils.isBlank(content)) {\n@@ -98,11 +96,9 @@ public static String defaultConsoleLayoutInfoIfEmpty(final String content, final\n \n                 tree.set(AnyTypeKind.USER.name(), MAPPER.valueToTree(new UserFormLayoutInfo()));\n                 tree.set(AnyTypeKind.GROUP.name(), MAPPER.valueToTree(new GroupFormLayoutInfo()));\n-                for (AnyTypeTO anyTypeTO : anyTypeTOs) {\n-                    if (!anyTypeTO.getKey().equals(AnyTypeKind.USER.name())\n-                            && !anyTypeTO.getKey().equals(AnyTypeKind.GROUP.name())) {\n-\n-                        tree.set(anyTypeTO.getKey(), MAPPER.valueToTree(new AnyObjectFormLayoutInfo()));\n+                for (String anyType : anyTypes) {\n+                    if (!anyType.equals(AnyTypeKind.USER.name()) && !anyType.equals(AnyTypeKind.GROUP.name())) {\n+                        tree.set(anyType, MAPPER.valueToTree(new AnyObjectFormLayoutInfo()));\n                     }\n                 }\n \n@@ -145,7 +141,7 @@ public static <A extends AnyTO, F extends AnyForm<A>, FL extends AbstractAnyForm\n                         pageRef.getClass()).\n                         newInstance(anyTO, anyTypeClasses, anyFormLayout, pageRef);\n             }\n-        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException \n+        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException\n                 | IllegalArgumentException | InvocationTargetException e) {\n             throw new IllegalArgumentException(\"Could not instantiate \" + anyFormLayout.getFormClass().getName(), e);\n         }"},{"sha":"7000c4cfd1193434a1dd1762901579ea39e48d3f","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -45,7 +45,6 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n import org.apache.syncope.common.lib.EntityTOUtils;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n@@ -217,9 +216,7 @@ public void setObject(final String object) {\n                         }\n \n                     });\n-            type.setChoices(CollectionUtils.collect(\n-                    new AnyTypeRestClient().list(),\n-                    EntityTOUtils.<AnyTypeTO>keyTransformer(), new ArrayList<String>()));\n+            type.setChoices(new AnyTypeRestClient().list());\n             type.addRequiredLabel();\n             add(type);\n "},{"sha":"8cffcc146c2392d097e4c447a6f112dda4c4882a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.client.console.panels.search.SearchUtils;\n import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -86,14 +87,14 @@ public class AnyPanel extends Panel implements ModalPanel {\n \n     public AnyPanel(\n             final String id,\n-            final AnyTypeTO anyTypeTO,\n+            final String anyType,\n             final RealmTO realmTO,\n             final Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObjectFormLayoutInfo>> formLayoutInfo,\n             final boolean enableSearch,\n             final PageReference pageRef) {\n \n         super(id);\n-        this.anyTypeTO = anyTypeTO;\n+        this.anyTypeTO = new AnyTypeRestClient().read(anyType);\n         this.realmTO = realmTO;\n         this.formLayoutInfo = formLayoutInfo;\n         this.pageRef = pageRef;\n@@ -281,9 +282,9 @@ protected Panel getDirectoryPanel(final String id) {\n             case ANY_OBJECT:\n                 fiql = dynRealm == null\n                         ? SyncopeClient.getAnyObjectSearchConditionBuilder(anyTypeTO.getKey()).is(\"key\").notNullValue()\n-                        .query()\n+                                .query()\n                         : SyncopeClient.getAnyObjectSearchConditionBuilder(anyTypeTO.getKey()).inDynRealms(dynRealm)\n-                        .query();\n+                                .query();\n \n                 final AnyObjectTO anyObjectTO = new AnyObjectTO();\n                 anyObjectTO.setRealm(realmTO.getFullPath());"},{"sha":"1d0e1d8ba401841795c00f76cc27bbb1c8b6a26b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -205,7 +205,7 @@ private AnyTypeProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<AnyTypeTO> iterator(final long first, final long count) {\n-            final List<AnyTypeTO> list = restClient.list();\n+            final List<AnyTypeTO> list = restClient.listAnyTypes();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }"},{"sha":"6ea455a4c707741b3432aa70b41a08f53da1917a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -100,9 +100,9 @@ protected Serializable onApplyInternal(\n \n                 final AnyTypeTO anyTypeTO = typeRestClient.read(type);\n \n-                ModalPanel panel = new AnyPanel(BaseModal.CONTENT_ID, anyTypeTO, null, null, false, pageRef) {\n+                ModalPanel panel = new AnyPanel(BaseModal.CONTENT_ID, type, null, null, false, pageRef) {\n \n-                    private static final long serialVersionUID = 1L;\n+                    private static final long serialVersionUID = 7980820232811890502L;\n \n                     @Override\n                     protected Panel getDirectoryPanel(final String id) {"},{"sha":"70d2dda381977f26720d0fc8b88bea6fa91d8acb","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/MembersTogglePanel.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembersTogglePanel.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.panels;\n \n import java.io.Serializable;\n-import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n@@ -29,9 +28,7 @@\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.PageReference;\n@@ -57,14 +54,15 @@ public abstract class MembersTogglePanel extends TogglePanel<Serializable> {\n \n         @Override\n         protected List<String> load() {\n-            return CollectionUtils.collect(\n-                    CollectionUtils.select(new AnyTypeRestClient().list(), new Predicate<AnyTypeTO>() {\n-\n-                        @Override\n-                        public boolean evaluate(final AnyTypeTO object) {\n-                            return object.getKind() != AnyTypeKind.GROUP;\n-                        }\n-                    }), EntityTOUtils.<AnyTypeTO>keyTransformer(), new ArrayList<String>());\n+            List<String> result = new AnyTypeRestClient().list();\n+            CollectionUtils.filter(result, new Predicate<String>() {\n+\n+                @Override\n+                public boolean evaluate(final String anyType) {\n+                    return !AnyTypeKind.GROUP.name().equals(anyType);\n+                }\n+            });\n+            return result;\n         }\n     };\n "},{"sha":"2a62ae1c18dfc33405814f91bb1bc9c53c4e30cf","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":11,"deletions":17,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -22,14 +22,12 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n-import org.apache.syncope.client.console.commons.AnyTypeComparator;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.ITabComponent;\n@@ -44,12 +42,10 @@\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.console.wizards.any.ConnObjectPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.Component;\n@@ -71,19 +67,19 @@ public abstract class Realm extends WizardMgtPanel<RealmTO> {\n \n     private final RealmTO realmTO;\n \n-    private final List<AnyTypeTO> anyTypeTOs;\n+    private final List<String> anyTypes;\n \n     protected final RealmWizardBuilder wizardBuilder;\n \n     public Realm(final String id, final RealmTO realmTO, final PageReference pageRef, final int selectedIndex) {\n         super(id, true);\n         this.realmTO = realmTO;\n-        this.anyTypeTOs = new AnyTypeRestClient().list();\n+        this.anyTypes = new AnyTypeRestClient().list();\n \n         setPageRef(pageRef);\n \n-        AjaxBootstrapTabbedPanel<ITab> tabbedPanel\n-                = new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList(pageRef));\n+        AjaxBootstrapTabbedPanel<ITab> tabbedPanel =\n+                new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList(pageRef));\n         tabbedPanel.setSelectedTab(selectedIndex);\n         addInnerObject(tabbedPanel);\n         this.wizardBuilder = new RealmWizardBuilder(pageRef);\n@@ -153,7 +149,7 @@ public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n                         }\n                     }, ActionLink.ActionType.DELETE, StandardEntitlement.REALM_DELETE, true).hideLabel();\n                 }\n-                \n+\n                 RealmDetails panel = new RealmDetails(panelId, realmTO, actionPanel, false);\n                 panel.setContentEnabled(false);\n                 actionPanel.setEnabled(true);\n@@ -167,21 +163,19 @@ public boolean isVisible() {\n             }\n         });\n \n-        final Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObjectFormLayoutInfo>> formLayoutInfo\n-                = FormLayoutInfoUtils.fetch(anyTypeTOs);\n+        final Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObjectFormLayoutInfo>> formLayoutInfo =\n+                FormLayoutInfoUtils.fetch(anyTypes);\n \n-        Collections.sort(anyTypeTOs, new AnyTypeComparator());\n-        for (final AnyTypeTO anyTypeTO : anyTypeTOs) {\n+        for (final String anyType : anyTypes) {\n             tabs.add(new ITabComponent(\n-                    new Model<>(anyTypeTO.getKey()),\n-                    AnyTypeKind.GROUP.name().equals(anyTypeTO.getKey())\n-                    ? null : new String[] { String.format(\"%s_SEARCH\", anyTypeTO.getKey()) }) {\n+                    new Model<>(anyType),\n+                    StandardEntitlement.ANYTYPE_READ, String.format(\"%s_SEARCH\", anyType)) {\n \n                 private static final long serialVersionUID = 1169585538404171118L;\n \n                 @Override\n                 public WebMarkupContainer getPanel(final String panelId) {\n-                    return new AnyPanel(panelId, anyTypeTO, realmTO, formLayoutInfo, true, pageRef);\n+                    return new AnyPanel(panelId, anyType, realmTO, formLayoutInfo, true, pageRef);\n                 }\n \n                 @Override"},{"sha":"d7d8a9d7b300fff2351c372f62f684e3a19ff911","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -166,7 +166,7 @@ public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n \n                 final AnyTypeTO anyTypeTO = typeRestClient.read(AnyTypeKind.USER.name());\n \n-                ModalPanel panel = new AnyPanel(BaseModal.CONTENT_ID, anyTypeTO, null, null, false, pageRef) {\n+                ModalPanel panel = new AnyPanel(BaseModal.CONTENT_ID, anyTypeTO.getKey(), null, null, false, pageRef) {\n \n                     private static final long serialVersionUID = -7514498203393023415L;\n "},{"sha":"fbe0c4e7afaaa9425bea0290c357d21d56e16e7b","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java","status":"modified","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -43,7 +43,6 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -84,8 +83,8 @@ public PolicySpecModalPanel(\n \n             private List<CorrelationRule> rules = CollectionUtils.collect(\n                     policyTO.getSpecification().getCorrelationRules() == null\n-                            ? Collections.<String>emptySet()\n-                            : policyTO.getSpecification().getCorrelationRules().keySet(),\n+                    ? Collections.<String>emptySet()\n+                    : policyTO.getSpecification().getCorrelationRules().keySet(),\n                     new Transformer<String, CorrelationRule>() {\n \n                 @Override\n@@ -154,15 +153,7 @@ public CorrelationRulePanel(final String id, final IModel<CorrelationRule> rule)\n             AjaxDropDownChoicePanel<String> anyType = new AjaxDropDownChoicePanel<>(\n                     \"anyType\", \"any.type\", new PropertyModel<String>(rule.getObject(), \"any\")).\n                     setNullValid(true).\n-                    setChoices(CollectionUtils.collect(\n-                            new AnyTypeRestClient().list(),\n-                            new Transformer<AnyTypeTO, String>() {\n-\n-                        @Override\n-                        public String transform(final AnyTypeTO input) {\n-                            return input.getKey();\n-                        }\n-                    }, new ArrayList<String>()));\n+                    setChoices(new AnyTypeRestClient().list());\n             add(anyType);\n \n             final AjaxDropDownChoicePanel<String> ruleType = new AjaxDropDownChoicePanel<>("},{"sha":"7382436f32602481defbff0f95c72c986f5e7370","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeClassRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -61,7 +61,7 @@ public List<AnyTypeClassTO> list() {\n     public List<AnyTypeClassTO> list(final Collection<String> anyTypeClassNames) {\n         List<AnyTypeClassTO> anyTypeClassTOs = new ArrayList<>();\n         for (String anyTypeClass : anyTypeClassNames) {\n-            anyTypeClassTOs.add(getService(AnyTypeClassService.class).read(anyTypeClass));\n+            anyTypeClassTOs.add(read(anyTypeClass));\n         }\n         return anyTypeClassTOs;\n     }"},{"sha":"f422c2b9c9267805303fc1be8ee755203cedf152","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeRestClient.java","status":"modified","additions":55,"deletions":2,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -18,11 +18,14 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import java.io.Serializable;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n-import org.apache.syncope.client.console.commons.AnyTypeComparator;\n+import org.apache.commons.collections4.ComparatorUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n \n public class AnyTypeRestClient extends BaseRestClient {\n@@ -41,7 +44,7 @@ public AnyTypeTO read(final String key) {\n         return type;\n     }\n \n-    public List<AnyTypeTO> list() {\n+    public List<AnyTypeTO> listAnyTypes() {\n         List<AnyTypeTO> types = Collections.emptyList();\n \n         try {\n@@ -54,6 +57,12 @@ public List<AnyTypeTO> list() {\n         return types;\n     }\n \n+    public List<String> list() {\n+        List<String> types = getSyncopeService().platform().getAnyTypes();\n+        Collections.sort(types, new AnyTypeKeyComparator());\n+        return types;\n+    }\n+\n     public void create(final AnyTypeTO anyTypeTO) {\n         getService(AnyTypeService.class).create(anyTypeTO);\n     }\n@@ -65,4 +74,48 @@ public void update(final AnyTypeTO anyTypeTO) {\n     public void delete(final String key) {\n         getService(AnyTypeService.class).delete(key);\n     }\n+\n+    private static class AnyTypeComparator implements Comparator<AnyTypeTO>, Serializable {\n+\n+        private static final long serialVersionUID = -8227715253094467138L;\n+\n+        @Override\n+        public int compare(final AnyTypeTO o1, final AnyTypeTO o2) {\n+            if (o1.getKind() == AnyTypeKind.USER) {\n+                return -1;\n+            }\n+            if (o2.getKind() == AnyTypeKind.USER) {\n+                return 1;\n+            }\n+            if (o1.getKind() == AnyTypeKind.GROUP) {\n+                return -1;\n+            }\n+            if (o2.getKind() == AnyTypeKind.GROUP) {\n+                return 1;\n+            }\n+            return ComparatorUtils.<String>naturalComparator().compare(o1.getKey(), o2.getKey());\n+        }\n+    }\n+\n+    private static class AnyTypeKeyComparator implements Comparator<String>, Serializable {\n+\n+        private static final long serialVersionUID = -7778622183107320760L;\n+\n+        @Override\n+        public int compare(final String o1, final String o2) {\n+            if (AnyTypeKind.USER.name().equals(o1)) {\n+                return -1;\n+            }\n+            if (AnyTypeKind.USER.name().equals(o2)) {\n+                return 1;\n+            }\n+            if (AnyTypeKind.GROUP.name().equals(o1)) {\n+                return -1;\n+            }\n+            if (AnyTypeKind.GROUP.name().equals(2)) {\n+                return 1;\n+            }\n+            return ComparatorUtils.<String>naturalComparator().compare(o1, o2);\n+        }\n+    }\n }"},{"sha":"1266386d51618f753f75f44760fd778e51118dc0","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConfRestClient.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfRestClient.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n \n@@ -32,15 +31,6 @@ public List<AttrTO> list() {\n         return getService(ConfigurationService.class).list();\n     }\n \n-    public AttrTO get(final String key) {\n-        try {\n-            return getService(ConfigurationService.class).get(key);\n-        } catch (SyncopeClientException e) {\n-            LOG.error(\"While reading a configuration schema\", e);\n-        }\n-        return null;\n-    }\n-\n     public void set(final AttrTO attrTO) {\n         getService(ConfigurationService.class).set(attrTO);\n     }"},{"sha":"600afb3f6497795334b684e6fc55ffe0dd29c1ab","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -56,7 +56,7 @@ public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaTy\n                 break;\n \n             default:\n-                for (AnyTypeTO anyTypeTO : new AnyTypeRestClient().list()) {\n+                for (AnyTypeTO anyTypeTO : new AnyTypeRestClient().listAnyTypes()) {\n                     if (anyTypeTO.getKind() != AnyTypeKind.USER && anyTypeTO.getKind() != AnyTypeKind.GROUP) {\n                         classes.addAll(anyTypeTO.getClasses());\n                     }"},{"sha":"1a379a92733a3b531975ce1a6d3809aecc7a0afc","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusModal.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.client.console.status;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n@@ -30,7 +28,6 @@\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -57,13 +54,12 @@ public ResourceStatusModal(\n \n             @Override\n             protected List<String> load() {\n-                return CollectionUtils.collect(\n-                        new AnyTypeRestClient().list(), EntityTOUtils.keyTransformer(), new ArrayList<String>());\n+                return new AnyTypeRestClient().list();\n             }\n         };\n \n-        AjaxDropDownChoicePanel<String> anyTypes\n-                = new AjaxDropDownChoicePanel<>(\"anyTypes\", \"anyTypes\", typeModel, false);\n+        AjaxDropDownChoicePanel<String> anyTypes =\n+                new AjaxDropDownChoicePanel<>(\"anyTypes\", \"anyTypes\", typeModel, false);\n         anyTypes.setChoices(types);\n         anyTypes.hideLabel();\n         add(anyTypes);"},{"sha":"c1e7e14e6504fe07c59ee708e5c11c2823c6b676","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/PushTaskFilters.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -50,7 +50,7 @@ public PushTaskFilters(final PushTaskWrapper pushTaskWrapper) {\n \n             @Override\n             protected List<AnyTypeTO> load() {\n-                return new AnyTypeRestClient().list();\n+                return new AnyTypeRestClient().listAnyTypes();\n             }\n         };\n "},{"sha":"625506c7164d173f334e0d38153b5b83bfd7275a","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/TemplatesTogglePanel.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTemplatesTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTemplatesTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTemplatesTogglePanel.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.client.console.tasks;\n \n import java.io.Serializable;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -40,11 +38,9 @@\n import org.apache.syncope.client.console.wizards.any.GroupTemplateWizardBuilder;\n import org.apache.syncope.client.console.wizards.any.TemplateWizardBuilder;\n import org.apache.syncope.client.console.wizards.any.UserTemplateWizardBuilder;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TemplatableTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -74,9 +70,7 @@ public abstract class TemplatesTogglePanel extends TogglePanel<Serializable> {\n \n         @Override\n         protected List<String> load() {\n-            final List<String> res = new ArrayList<>();\n-            CollectionUtils.collect(new AnyTypeRestClient().list(), EntityTOUtils.<AnyTypeTO>keyTransformer(), res);\n-            return res;\n+            return new AnyTypeRestClient().list();\n         }\n     };\n \n@@ -101,8 +95,8 @@ public TemplatesTogglePanel(final String targetId, final MarkupContainer contain\n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 try {\n-                    final AjaxWizard.NewItemActionEvent<AnyTO> payload\n-                            = new AjaxWizard.NewItemActionEvent<>(null, target);\n+                    final AjaxWizard.NewItemActionEvent<AnyTO> payload =\n+                            new AjaxWizard.NewItemActionEvent<>(null, target);\n \n                     payload.setResourceModel(new StringResourceModel(\"inner.template.edit\", container,\n                             Model.of(Pair.of(typeModel.getObject(), targetObject))).setDefaultValue("},{"sha":"0aa5d6047c260dc4a9e14e725f1ed126ff09f05f","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/NumberWidget.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -18,11 +18,8 @@\n  */\n package org.apache.syncope.client.console.widgets;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.commons.AnyTypeComparator;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.wicket.behavior.AttributeAppender;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -55,7 +52,7 @@ public NumberWidget(final String id, final String bg, final int number, final St\n         boolean isAuthorized = true;\n         final PageParameters pageParameters = new PageParameters();\n         final Class<? extends IRequestablePage> responsePage;\n-        List<AnyTypeTO> anyTypeTOs = new AnyTypeRestClient().list();\n+        List<String> anyTypes = new AnyTypeRestClient().list();\n         switch (id) {\n             case \"totalUsers\":\n                 pageParameters.add(\"selectedIndex\", 1);\n@@ -70,10 +67,9 @@ public NumberWidget(final String id, final String bg, final int number, final St\n \n             case \"totalAny1OrRoles\":\n                 if (icon.equals(\"ion ion-gear-a\")) {\n-                    Collections.sort(anyTypeTOs, new AnyTypeComparator());\n                     Integer selectedIndex = null;\n-                    for (int i = 0; i < anyTypeTOs.size() && selectedIndex == null; i++) {\n-                        if (anyTypeTOs.get(i).getKey().equals(label)) {\n+                    for (int i = 0; i < anyTypes.size() && selectedIndex == null; i++) {\n+                        if (anyTypes.get(i).equals(label)) {\n                             selectedIndex = i + 1;\n                             pageParameters.add(\"selectedIndex\", selectedIndex);\n                         }\n@@ -88,10 +84,9 @@ public NumberWidget(final String id, final String bg, final int number, final St\n \n             case \"totalAny2OrResources\":\n                 if (icon.equals(\"ion ion-gear-a\")) {\n-                    Collections.sort(anyTypeTOs, new AnyTypeComparator());\n                     Integer selectedIndex = null;\n-                    for (int i = 0; i < anyTypeTOs.size() && selectedIndex == null; i++) {\n-                        if (anyTypeTOs.get(i).getKey().equals(label)) {\n+                    for (int i = 0; i < anyTypes.size() && selectedIndex == null; i++) {\n+                        if (anyTypes.get(i).equals(label)) {\n                             selectedIndex = i + 1;\n                             pageParameters.add(\"selectedIndex\", selectedIndex);\n                         }"},{"sha":"6872cde5e8e049251bb62b080e6a84be38c948fa","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/AbstractMappingPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -307,7 +307,7 @@ protected void populateItem(final ListItem<MappingItemTO> item) {\n                 // Purpose\n                 // -------------------------------\n                 WebMarkupContainer purpose = new WebMarkupContainer(\"purpose\");\n-                purpose.setOutputMarkupId(Boolean.TRUE);\n+                purpose.setOutputMarkupId(true);\n \n                 final MappingPurposePanel purposeActions = new MappingPurposePanel(\n                         \"purposeActions\", new PropertyModel<MappingPurpose>(mapItem, \"purpose\"), purpose);"},{"sha":"2f73fa8bad32abdfdf4a9a9d92828b44b7cd3aa9","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/DynamicMemberships.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -59,7 +59,7 @@ public DynamicMemberships(final GroupWrapper groupWrapper) {\n \n             @Override\n             protected List<AnyTypeTO> load() {\n-                return CollectionUtils.select(anyTypeRestClient.list(), new Predicate<AnyTypeTO>() {\n+                return CollectionUtils.select(anyTypeRestClient.listAnyTypes(), new Predicate<AnyTypeTO>() {\n \n                     @Override\n                     public boolean evaluate(final AnyTypeTO t) {"},{"sha":"97e8ab66256ca8e2e662f28204a1b674baf1d5b9","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -258,7 +258,7 @@ public Specification() {\n             type.setChoices(availableRels);\n             add(type.setRenderBodyOnly(true));\n \n-            final List<AnyTypeTO> availableTypes = ListUtils.select(anyTypeRestClient.list(),\n+            final List<AnyTypeTO> availableTypes = ListUtils.select(anyTypeRestClient.listAnyTypes(),\n                     new Predicate<AnyTypeTO>() {\n \n                 @Override\n@@ -313,6 +313,8 @@ public boolean evaluate(final AnyTypeTO object) {\n                     });\n                 }\n             });\n+            // enable \"rightType\" dropdown only if \"type\" option is selected - SYNCOPE-1140\n+            rightType.setEnabled(false);\n             add(rightType);\n \n             final WebMarkupContainer container = new WebMarkupContainer(\"searchPanelContainer\");\n@@ -337,8 +339,6 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     target.add(container);\n                 }\n             });\n-            // enable \"rightType\" dropdown only if \"type\" option is selected - SYNCOPE-1140\n-            rightType.setEnabled(Boolean.FALSE);\n \n             rightType.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n "},{"sha":"35af482b792c47fcae18d7e1dc2718850742a308","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/TypeExtensionWizardBuilder.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -70,11 +70,11 @@ protected WizardModel buildModelSteps(final TypeExtensionTO modelObject, final W\n         wizardModel.add(new Details(modelObject));\n         return wizardModel;\n     }\n-    \n+\n     @Override\n     protected Serializable onApplyInternal(final TypeExtensionTO modelObject) {\n-        final List<TypeExtensionTO> typeExtensions\n-                = ListUtils.select(groupTO.getTypeExtensions(), new Predicate<TypeExtensionTO>() {\n+        final List<TypeExtensionTO> typeExtensions =\n+                ListUtils.select(groupTO.getTypeExtensions(), new Predicate<TypeExtensionTO>() {\n \n                     @Override\n                     public boolean evaluate(final TypeExtensionTO object) {\n@@ -98,8 +98,7 @@ public Details(final TypeExtensionTO typeExtensionTO) {\n             add(new Label(\"anyType.label\", anyTypeLabel));\n \n             if (typeExtensionTO.getAnyType() == null) {\n-                List<String> anyTypes = CollectionUtils.collect(new AnyTypeRestClient().list(),\n-                        EntityTOUtils.keyTransformer(), new ArrayList<String>());\n+                List<String> anyTypes = new AnyTypeRestClient().list();\n                 anyTypes.remove(AnyTypeKind.GROUP.name());\n                 CollectionUtils.filter(anyTypes, new Predicate<String>() {\n "},{"sha":"37abe22d65a86e34d7d1daf5294a31d3e588e0a5","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java","status":"modified","additions":3,"deletions":16,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -37,8 +37,6 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -78,19 +76,13 @@ public String transform(final ProvisionTO provisionTO) {\n                 }\n             }, currentlyAdded);\n \n-            final List<String> res = new ArrayList<>();\n-\n-            CollectionUtils.filter(CollectionUtils.collect(new AnyTypeRestClient().list(),\n-                    EntityTOUtils.<AnyTypeTO>keyTransformer(), res),\n-                    new Predicate<String>() {\n+            return ListUtils.select(new AnyTypeRestClient().list(), new Predicate<String>() {\n \n                 @Override\n                 public boolean evaluate(final String key) {\n                     return !currentlyAdded.contains(key);\n                 }\n             });\n-\n-            return res;\n         }\n     };\n \n@@ -210,13 +202,8 @@ private final class ConnObjectLink extends WizardStep {\n \n                 @Override\n                 protected void onUpdate(final AjaxRequestTarget target) {\n-                    if (connObjectLinkCheckbox.getModelObject()) {\n-                        connObjectLink.setEnabled(Boolean.TRUE);\n-                        connObjectLink.setModelObject(\"\");\n-                    } else {\n-                        connObjectLink.setEnabled(Boolean.FALSE);\n-                        connObjectLink.setModelObject(\"\");\n-                    }\n+                    connObjectLink.setEnabled(connObjectLinkCheckbox.getModelObject());\n+                    connObjectLink.setModelObject(\"\");\n \n                     target.add(connObjectLink);\n                 }"},{"sha":"5a757769772434967e49e94b0dd6e9efeabea8bd","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/AnyTypeClassResource.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAnyTypeClassResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAnyTypeClassResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAnyTypeClassResource.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -26,11 +26,10 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.request.resource.AbstractResource;\n \n-@Resource(key = \"auxClasses\", path = \"/api/auxiliaryClasses\")\n+@Resource(key = \"auxClasses\", path = \"/api/auxClasses\")\n public class AnyTypeClassResource extends BaseResource {\n \n     private static final long serialVersionUID = 7475706378304995200L;\n@@ -49,15 +48,15 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                 return response;\n             }\n \n-            final List<AnyTypeClassTO> anyTypeClassTOs =\n-                    SyncopeEnduserSession.get().getService(AnyTypeClassService.class).list();\n+            final List<String> anyTypeClasses = SyncopeEnduserSession.get().\n+                    getService(SyncopeService.class).platform().getAnyTypeClasses();\n \n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n             response.setWriteCallback(new AbstractResource.WriteCallback() {\n \n                 @Override\n                 public void writeData(final Attributes attributes) throws IOException {\n-                    attributes.getResponse().write(MAPPER.writeValueAsString(anyTypeClassTOs));\n+                    attributes.getResponse().write(MAPPER.writeValueAsString(anyTypeClasses));\n                 }\n             });\n             response.setStatusCode(Response.Status.OK.getStatusCode());"},{"sha":"d354f569014fd894d18bbc2353582e676482c65c","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/ExternalResourceResource.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FExternalResourceResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FExternalResourceResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FExternalResourceResource.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -26,8 +26,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n \n@@ -50,14 +49,15 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n                 return response;\n             }\n \n-            final List<ResourceTO> resourceTOs = SyncopeEnduserSession.get().getService(ResourceService.class).list();\n+            final List<String> resources = SyncopeEnduserSession.get().\n+                    getService(SyncopeService.class).platform().getResources();\n \n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n             response.setWriteCallback(new AbstractResource.WriteCallback() {\n \n                 @Override\n                 public void writeData(final IResource.Attributes attributes) throws IOException {\n-                    attributes.getResponse().write(MAPPER.writeValueAsString(resourceTOs));\n+                    attributes.getResponse().write(MAPPER.writeValueAsString(resources));\n                 }\n             });\n             response.setStatusCode(Response.Status.OK.getStatusCode());"},{"sha":"863face754591aad212ffc9478b83fd805da7825","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FGroupResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FGroupResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FGroupResource.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -27,11 +27,9 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.rest.api.beans.AnyQuery;\n-import org.apache.syncope.common.rest.api.service.GroupService;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.request.resource.AbstractResource;\n \n @Resource(key = \"groups\", path = \"/api/groups\")\n@@ -56,9 +54,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n             String realm = URLDecoder.decode(attributes.getParameters().get(\"realm\").\n                     toString(SyncopeConstants.ROOT_REALM), \"UTF-8\");\n             final List<GroupTO> groupTOs = SyncopeEnduserSession.get().\n-                    getService(GroupService.class).search(new AnyQuery.Builder().realm(realm).\n-                    fiql(SyncopeClient.getGroupSearchConditionBuilder().isAssignable().query()).\n-                    build()).getResult();\n+                    getService(SyncopeService.class).searchAssignableGroups(realm, 1, 30).getResult();\n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n             response.setWriteCallback(new AbstractResource.WriteCallback() {\n "},{"sha":"91e5bbedb176788903cef1d0387710e8d37074c4","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":19,"deletions":32,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -29,7 +29,6 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n@@ -40,16 +39,12 @@\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.client.enduser.model.SchemaResponse;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n-import org.apache.syncope.common.rest.api.service.AnyTypeService;\n-import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n \n@@ -58,7 +53,6 @@ public class SchemaResource extends BaseResource {\n \n     private static final long serialVersionUID = 6453101466981543020L;\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     protected AbstractResource.ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n         LOG.debug(\"Search all {} any type kind related schemas\", AnyTypeKind.USER.name());\n@@ -76,29 +70,22 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n \n             List<String> classes = Collections.emptyList();\n \n-            final String groupParam = attributes.getParameters().get(\"group\").toString();\n-            if (groupParam != null) {\n-                PagedResult<GroupTO> groups = SyncopeEnduserSession.get().getService(GroupService.class).search(\n-                        new AnyQuery.Builder().realm(\"/\").page(1).size(1000).build());\n-                GroupTO group = IterableUtils.find(groups.getResult(), new Predicate<GroupTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final GroupTO item) {\n-                        return groupParam.equals(item.getName());\n-                    }\n-                });\n-\n-                if (group != null && group.getTypeExtension(AnyTypeKind.USER.name()) != null) {\n-                    classes = group.getTypeExtension(AnyTypeKind.USER.name()).getAuxClasses();\n+            String group = attributes.getParameters().get(\"group\").toString();\n+            if (group != null) {\n+                try {\n+                    TypeExtensionTO typeExt = SyncopeEnduserSession.get().\n+                            getService(SyncopeService.class).readUserTypeExtension(group);\n+                    classes = typeExt.getAuxClasses();\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not read User type extension for Group {}\", group, e);\n                 }\n             } else {\n                 String anyTypeClass = attributes.getParameters().get(\"anyTypeClass\").toString();\n                 if (anyTypeClass != null) {\n                     classes = Collections.singletonList(anyTypeClass);\n                 } else {\n-                    AnyTypeTO anyTypeUserTO = SyncopeEnduserSession.get().getService(AnyTypeService.class).\n-                            read(AnyTypeKind.USER.name());\n-                    classes = anyTypeUserTO.getClasses();\n+                    classes = SyncopeEnduserSession.get().\n+                            getService(SyncopeService.class).platform().getUserClasses();\n                 }\n             }\n \n@@ -113,7 +100,7 @@ public boolean evaluate(final GroupTO item) {\n                             new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClasses(classes).build())\n                     : customForm.get(SchemaType.PLAIN.name()).isShow()\n                     ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).\n-                            anyTypeClasses(classes).build()), groupParam, customForm.get(SchemaType.PLAIN.name()).\n+                            anyTypeClasses(classes).build()), group, customForm.get(SchemaType.PLAIN.name()).\n                             getAttributes())\n                     : Collections.<AbstractSchemaTO>emptyList();\n             final List<AbstractSchemaTO> derSchemas = classes.isEmpty()\n@@ -123,7 +110,7 @@ public boolean evaluate(final GroupTO item) {\n                             new SchemaQuery.Builder().type(SchemaType.DERIVED).anyTypeClasses(classes).build())\n                     : customForm.get(SchemaType.DERIVED.name()).isShow()\n                     ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).\n-                            anyTypeClasses(classes).build()), groupParam, customForm.get(SchemaType.DERIVED.name()).\n+                            anyTypeClasses(classes).build()), group, customForm.get(SchemaType.DERIVED.name()).\n                             getAttributes())\n                     : Collections.<AbstractSchemaTO>emptyList();\n             final List<AbstractSchemaTO> virSchemas = classes.isEmpty()\n@@ -133,19 +120,19 @@ public boolean evaluate(final GroupTO item) {\n                             new SchemaQuery.Builder().type(SchemaType.VIRTUAL).anyTypeClasses(classes).build())\n                     : customForm.get(SchemaType.VIRTUAL.name()).isShow()\n                     ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).\n-                            anyTypeClasses(classes).build()), groupParam, customForm.get(SchemaType.VIRTUAL.name()).\n+                            anyTypeClasses(classes).build()), group, customForm.get(SchemaType.VIRTUAL.name()).\n                             getAttributes())\n                     : Collections.<AbstractSchemaTO>emptyList();\n \n-            if (groupParam != null) {\n+            if (group != null) {\n                 for (AbstractSchemaTO schema : plainSchemas) {\n-                    schema.setKey(compositeSchemaKey(groupParam, schema.getKey()));\n+                    schema.setKey(compositeSchemaKey(group, schema.getKey()));\n                 }\n                 for (AbstractSchemaTO schema : derSchemas) {\n-                    schema.setKey(compositeSchemaKey(groupParam, schema.getKey()));\n+                    schema.setKey(compositeSchemaKey(group, schema.getKey()));\n                 }\n                 for (AbstractSchemaTO schema : virSchemas) {\n-                    schema.setKey(compositeSchemaKey(groupParam, schema.getKey()));\n+                    schema.setKey(compositeSchemaKey(group, schema.getKey()));\n                 }\n             }\n "},{"sha":"088b35b55ae31972e73a7998c784c460a0cac7c9","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserClassesResource.java","status":"renamed","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserClassesResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserClassesResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserClassesResource.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -20,23 +20,23 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n+import java.util.List;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.rest.api.service.AnyTypeService;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.request.resource.AbstractResource;\n \n-@Resource(key = \"anyType\", path = \"/api/anyTypes\")\n-public class AnyTypeResource extends BaseResource {\n+@Resource(key = \"anyType\", path = \"/api/userClasses\")\n+public class UserClassesResource extends BaseResource {\n \n     private static final long serialVersionUID = 7475706378304995200L;\n \n     @Override\n     protected ResourceResponse newResourceResponse(final Attributes attributes) {\n-        LOG.debug(\"Get all available auxiliary classes\");\n+        LOG.debug(\"Get USER classes\");\n \n         ResourceResponse response = new ResourceResponse();\n         response.setContentType(MediaType.APPLICATION_JSON);\n@@ -49,16 +49,15 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                 return response;\n             }\n \n-            String kind = attributes.getParameters().get(0).toString();\n-            final AnyTypeTO anyTypeTO = SyncopeEnduserSession.get().getService(AnyTypeService.class).read(kind);\n+            final List<String> userClasses = SyncopeEnduserSession.get().\n+                    getService(SyncopeService.class).platform().getUserClasses();\n \n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n-\n             response.setWriteCallback(new AbstractResource.WriteCallback() {\n \n                 @Override\n                 public void writeData(final Attributes attributes) throws IOException {\n-                    attributes.getResponse().write(MAPPER.writeValueAsString(anyTypeTO));\n+                    attributes.getResponse().write(MAPPER.writeValueAsString(userClasses));\n                 }\n             });\n             response.setStatusCode(Response.Status.OK.getStatusCode());","previous_filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/AnyTypeResource.java"},{"sha":"1afc42cb3adcd708398a84aab6d8a2ce4214de4c","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FUserController.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FUserController.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FUserController.js?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -210,7 +210,7 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l\n       var initResources = function () {\n         ResourceService.getResources().then(function (response) {\n           for (var i in response) {\n-            $scope.dynamicForm.resources.push(response[i].key);\n+            $scope.dynamicForm.resources.push(response[i]);\n           }\n           $scope.dynamicForm.resources.sort();\n         });\n@@ -239,13 +239,13 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l\n \n       var initAuxClasses = function () {\n         //fetching default user classes, that should remain in any case\n-        AnyService.getAnyType(\"USER\").then(function (response) {\n-          $scope.dynamicForm.anyUserType = response.classes;\n+        AnyService.getUserClasses().then(function (response) {\n+          $scope.dynamicForm.anyUserType = response;\n           AnyService.getAuxClasses().then(function (response) {\n             for (var i = 0; i < response.length; i++) {\n-              //we should only add schemas that aren't in the anyUserType\n-              if ($scope.dynamicForm.anyUserType.indexOf(response[i].key) === -1) {\n-                $scope.dynamicForm.auxClasses.push(response[i].key);\n+              // we should only add schemas that aren't in the anyUserType\n+              if ($scope.dynamicForm.anyUserType.indexOf(response[i]) === -1) {\n+                $scope.dynamicForm.auxClasses.push(response[i]);\n               }\n             }\n           }, function (e) {"},{"sha":"09edf18c305c53661750c74c941c45eacf825d7c","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/services/anyService.js","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FanyService.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FanyService.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FanyService.js?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -26,7 +26,7 @@ angular.module('self')\n             var any = {};\n \n             any.getAuxClasses = function () {\n-              return  $http.get(\"/syncope-enduser/api/auxiliaryClasses\")\n+              return  $http.get(\"/syncope-enduser/api/auxClasses\")\n                       .then(function (response) {\n                         return response.data;\n                       }, function (response) {\n@@ -36,8 +36,8 @@ angular.module('self')\n                       });\n             };\n \n-            any.getAnyType = function (kind) {\n-              return  $http.get(\"/syncope-enduser/api/anyTypes/\" + encodeURI(kind))\n+            any.getUserClasses = function () {\n+              return  $http.get(\"/syncope-enduser/api/userClasses\")\n                       .then(function (response) {\n                         return response.data;\n                       }, function (response) {"},{"sha":"0594db428a2b728351c865cf2e2130e12adfac8b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/PlatformInfo.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.common.lib.info;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -61,6 +63,14 @@ public class PlatformInfo extends AbstractBaseBean {\n \n     private String anySearchDAO;\n \n+    private final List<String> anyTypes = new ArrayList<>();\n+\n+    private final List<String> userClasses = new ArrayList<>();\n+\n+    private final List<String> anyTypeClasses = new ArrayList<>();\n+\n+    private final List<String> resources = new ArrayList<>();\n+\n     private final Set<String> entitlements = new HashSet<>();\n \n     private final Set<String> jwtSSOProviders = new HashSet<>();\n@@ -160,6 +170,34 @@ public void setAnySearchDAO(final String anySearchDAO) {\n         this.anySearchDAO = anySearchDAO;\n     }\n \n+    @XmlElementWrapper(name = \"anyTypes\")\n+    @XmlElement(name = \"anyType\")\n+    @JsonProperty(\"anyTypes\")\n+    public List<String> getAnyTypes() {\n+        return anyTypes;\n+    }\n+\n+    @XmlElementWrapper(name = \"userClasses\")\n+    @XmlElement(name = \"userClass\")\n+    @JsonProperty(\"userClasses\")\n+    public List<String> getUserClasses() {\n+        return userClasses;\n+    }\n+\n+    @XmlElementWrapper(name = \"anyTypeClasses\")\n+    @XmlElement(name = \"anyTypeClass\")\n+    @JsonProperty(\"anyTypeClasses\")\n+    public List<String> getAnyTypeClasses() {\n+        return anyTypeClasses;\n+    }\n+\n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resources\")\n+    public List<String> getResources() {\n+        return resources;\n+    }\n+\n     @XmlElementWrapper(name = \"entitlements\")\n     @XmlElement(name = \"entitlement\")\n     @JsonProperty(\"entitlements\")"},{"sha":"9657bc38e22cc032049ab8efb958d13b1c976c51","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -46,14 +46,22 @@ public final class StandardEntitlement {\n \n     public static final String REALM_DELETE = \"REALM_DELETE\";\n \n+    public static final String ANYTYPECLASS_LIST = \"ANYTYPECLASS_LIST\";\n+\n     public static final String ANYTYPECLASS_CREATE = \"ANYTYPECLASS_CREATE\";\n \n+    public static final String ANYTYPECLASS_READ = \"ANYTYPECLASS_READ\";\n+\n     public static final String ANYTYPECLASS_UPDATE = \"ANYTYPECLASS_UPDATE\";\n \n     public static final String ANYTYPECLASS_DELETE = \"ANYTYPECLASS_DELETE\";\n \n+    public static final String ANYTYPE_LIST = \"ANYTYPE_LIST\";\n+\n     public static final String ANYTYPE_CREATE = \"ANYTYPE_CREATE\";\n \n+    public static final String ANYTYPE_READ = \"ANYTYPE_READ\";\n+\n     public static final String ANYTYPE_UPDATE = \"ANYTYPE_UPDATE\";\n \n     public static final String ANYTYPE_DELETE = \"ANYTYPE_DELETE\";\n@@ -108,6 +116,8 @@ public final class StandardEntitlement {\n \n     public static final String GROUP_CREATE = \"GROUP_CREATE\";\n \n+    public static final String GROUP_SEARCH = \"GROUP_SEARCH\";\n+\n     public static final String GROUP_READ = \"GROUP_READ\";\n \n     public static final String GROUP_UPDATE = \"GROUP_UPDATE\";\n@@ -156,6 +166,8 @@ public final class StandardEntitlement {\n \n     public static final String CONFIGURATION_LIST = \"CONFIGURATION_LIST\";\n \n+    public static final String CONFIGURATION_GET = \"CONFIGURATION_GET\";\n+\n     public static final String CONFIGURATION_SET = \"CONFIGURATION_SET\";\n \n     public static final String CONFIGURATION_DELETE = \"CONFIGURATION_DELETE\";\n@@ -262,6 +274,8 @@ public final class StandardEntitlement {\n \n     public static final String SECURITY_QUESTION_CREATE = \"SECURITY_QUESTION_CREATE\";\n \n+    public static final String SECURITY_QUESTION_READ = \"SECURITY_QUESTION_READ\";\n+\n     public static final String SECURITY_QUESTION_UPDATE = \"SECURITY_QUESTION_UPDATE\";\n \n     public static final String SECURITY_QUESTION_DELETE = \"SECURITY_QUESTION_DELETE\";"},{"sha":"549b41a993c8175b854592a38e806ddc26b4d701","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.BulkMembersActionType;\n \n /**\n@@ -49,20 +48,6 @@ public interface GroupService extends AnyService<GroupTO, GroupPatch> {\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     List<GroupTO> own();\n \n-    /**\n-     * Extracts type extension information, for the provided group and any type.\n-     *\n-     * @param key group key\n-     * @param anyTypeKey any type key\n-     * @return type extension information, for the provided group and any type\n-     */\n-    @GET\n-    @Path(\"{key}/{anyTypeKey}/typeExtension\")\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    TypeExtensionTO readTypeExtension(\n-            @NotNull @PathParam(\"key\") String key,\n-            @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey);\n-\n     /**\n      * (De)provision all members of the given group from / onto all the resources associated to it.\n      *"},{"sha":"1ec31f221370cdda08f9e07299a2ea9c3f8389cf","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -18,13 +18,22 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n \n /**\n  * General info about this Apache Syncope deployment.\n@@ -63,4 +72,34 @@ public interface SyncopeService extends JAXRSService {\n     @Path(\"/numbers\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     NumbersInfo numbers();\n+\n+    /**\n+     * Returns the list of Groups, according to provided paging instructions, assignable to Users and Any Objects of\n+     * the provided Realm.\n+     *\n+     * @param realm of the User and Any Objects assignable to the returned Groups\n+     * @param page search page\n+     * @param size search page size\n+     * @return list of Groups, according to provided paging instructions, assignable to Users and Any Objects of\n+     * the provided Realm\n+     */\n+    @POST\n+    @Path(\"/assignableGroups/{realm:.*}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    PagedResult<GroupTO> searchAssignableGroups(\n+            @NotNull @PathParam(\"realm\") String realm,\n+            @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(\"1\") int page,\n+            @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(\"25\") int size);\n+\n+    /**\n+     * Extracts User type extension information, for the provided group.\n+     *\n+     * @param groupName group name\n+     * @return User type extension information, for the provided group\n+     */\n+    @GET\n+    @Path(\"/userTypeExtension/{groupName}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    TypeExtensionTO readUserTypeExtension(\n+            @NotNull @PathParam(\"groupName\") String groupName);\n }"},{"sha":"babe255f9e7f2a3248d88b600fcaa89d98e3658e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -37,6 +37,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class AnyTypeClassLogic extends AbstractTransactionalLogic<AnyTypeClassTO> {\n@@ -47,7 +48,8 @@ public class AnyTypeClassLogic extends AbstractTransactionalLogic<AnyTypeClassTO\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n-    @PreAuthorize(\"isAuthenticated()\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public AnyTypeClassTO read(final String key) {\n         AnyTypeClass anyType = anyTypeClassDAO.find(key);\n         if (anyType == null) {\n@@ -59,7 +61,8 @@ public AnyTypeClassTO read(final String key) {\n         return binder.getAnyTypeClassTO(anyType);\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<AnyTypeClassTO> list() {\n         return CollectionUtils.collect(anyTypeClassDAO.findAll(), new Transformer<AnyTypeClass, AnyTypeClassTO>() {\n "},{"sha":"f967da89fe17b6bf79c85e906bd403d2c9f0e394","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -37,6 +37,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class AnyTypeLogic extends AbstractTransactionalLogic<AnyTypeTO> {\n@@ -47,7 +48,8 @@ public class AnyTypeLogic extends AbstractTransactionalLogic<AnyTypeTO> {\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n-    @PreAuthorize(\"isAuthenticated()\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public AnyTypeTO read(final String key) {\n         AnyType anyType = anyTypeDAO.find(key);\n         if (anyType == null) {\n@@ -59,7 +61,8 @@ public AnyTypeTO read(final String key) {\n         return binder.getAnyTypeTO(anyType);\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<AnyTypeTO> list() {\n         return CollectionUtils.collect(anyTypeDAO.findAll(), new Transformer<AnyType, AnyTypeTO>() {\n "},{"sha":"eea22adaaf836238dd9e66c3d09edcc514429d8b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConfigurationLogic.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -81,7 +81,8 @@ public List<AttrTO> list() {\n         return binder.getConfTO();\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_GET + \"')\")\n+    @Transactional(readOnly = true)\n     public AttrTO get(final String schema) {\n         AttrTO result;\n "},{"sha":"9c92e29bb556d79b48a278d9c5d2375db2bb702b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -163,8 +163,7 @@ public ConnInstanceTO transform(final ConnInstance connInstance) {\n                 try {\n                     result = binder.getConnInstanceTO(connInstance);\n                 } catch (NotFoundException e) {\n-                    LOG.error(\"Connector '{}#{}' not found\",\n-                            connInstance.getBundleName(), connInstance.getVersion());\n+                    LOG.error(\"Connector '{}#{}' not found\", connInstance.getBundleName(), connInstance.getVersion());\n                 }\n \n                 return result;"},{"sha":"52946a66bb7bd799239f13ac13b3bdcdc9d36b62","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":1,"deletions":14,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -41,7 +41,6 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n-import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -161,19 +160,7 @@ public GroupTO transform(final Group input) {\n         }, new ArrayList<GroupTO>());\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    public TypeExtensionTO readTypeExtension(final String key, final String anyTypeKey) {\n-        Group group = groupDAO.find(key);\n-        if (group == null) {\n-            throw new NotFoundException(\"Group \" + key);\n-        }\n-\n-        GroupTO groupTO = binder.getGroupTO(group, false);\n-        return groupTO.getTypeExtension(anyTypeKey);\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public Pair<Integer, List<GroupTO>> search("},{"sha":"760b812b3a1af9d354583bf9738174d249a3c1de","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -260,7 +260,7 @@ public ResourceTO read(final String key) {\n         return binder.getResourceTO(resource);\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ResourceTO> list() {\n         return CollectionUtils.collect(resourceDAO.findAll(), new Transformer<ExternalResource, ResourceTO>() {"},{"sha":"c5b3b9acd2c9e9755340e677d413072a831a0eca","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -34,6 +34,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class RoleLogic extends AbstractTransactionalLogic<RoleTO> {\n@@ -45,6 +46,7 @@ public class RoleLogic extends AbstractTransactionalLogic<RoleTO> {\n     private RoleDAO roleDAO;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public RoleTO read(final String key) {\n         Role role = roleDAO.find(key);\n         if (role == null) {\n@@ -57,6 +59,7 @@ public RoleTO read(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<RoleTO> list() {\n         return CollectionUtils.collect(roleDAO.findAll(), new Transformer<Role, RoleTO>() {\n "},{"sha":"e3dae91766a75cbd09c5de807a04d75f844f1f05","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SecurityQuestionLogic.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -35,6 +35,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class SecurityQuestionLogic extends AbstractTransactionalLogic<SecurityQuestionTO> {\n@@ -49,6 +50,7 @@ public class SecurityQuestionLogic extends AbstractTransactionalLogic<SecurityQu\n     private SecurityQuestionDataBinder binder;\n \n     @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n     public List<SecurityQuestionTO> list() {\n         return CollectionUtils.collect(securityQuestionDAO.findAll(),\n                 new Transformer<SecurityQuestion, SecurityQuestionTO>() {\n@@ -60,7 +62,8 @@ public SecurityQuestionTO transform(final SecurityQuestion input) {\n         }, new ArrayList<SecurityQuestionTO>());\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SECURITY_QUESTION_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public SecurityQuestionTO read(final String key) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(key);\n         if (securityQuestion == null) {"},{"sha":"2352813dea61e1fa4755123b367f4ee8355cedb7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":110,"deletions":1,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -21,42 +21,63 @@\n import java.lang.management.ManagementFactory;\n import java.lang.management.OperatingSystemMXBean;\n import java.lang.management.RuntimeMXBean;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import java.lang.reflect.Method;\n import java.net.InetAddress;\n import java.net.URI;\n import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import javax.annotation.Resource;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.ImplementationLookup.Type;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n+import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n@@ -78,6 +99,12 @@ public class SyncopeLogic extends AbstractLogic<AbstractBaseBean> {\n \n     private static SystemInfo SYSTEM_INFO;\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -111,6 +138,12 @@ public class SyncopeLogic extends AbstractLogic<AbstractBaseBean> {\n     @Autowired\n     private ConfDAO confDAO;\n \n+    @Autowired\n+    private AnySearchDAO searchDAO;\n+\n+    @Autowired\n+    private GroupDataBinder groupDataBinder;\n+\n     @Resource(name = \"version\")\n     private String version;\n \n@@ -208,6 +241,37 @@ public PlatformInfo platform() {\n \n             PLATFORM_INFO.getEntitlements().clear();\n             PLATFORM_INFO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n+\n+            PLATFORM_INFO.getAnyTypes().clear();\n+            PLATFORM_INFO.getUserClasses().clear();\n+            PLATFORM_INFO.getAnyTypeClasses().clear();\n+            PLATFORM_INFO.getResources().clear();\n+            AuthContextUtils.execWithAuthContext(AuthContextUtils.getDomain(), new AuthContextUtils.Executable<Void>() {\n+\n+                @Override\n+                public Void exec() {\n+                    CollectionUtils.collect(\n+                            anyTypeDAO.findAll(),\n+                            EntityUtils.keyTransformer(),\n+                            PLATFORM_INFO.getAnyTypes());\n+\n+                    CollectionUtils.collect(\n+                            anyTypeDAO.findUser().getClasses(),\n+                            EntityUtils.keyTransformer(),\n+                            PLATFORM_INFO.getUserClasses());\n+\n+                    CollectionUtils.collect(\n+                            anyTypeClassDAO.findAll(),\n+                            EntityUtils.keyTransformer(),\n+                            PLATFORM_INFO.getAnyTypeClasses());\n+\n+                    CollectionUtils.collect(\n+                            resourceDAO.findAll(),\n+                            EntityUtils.keyTransformer(),\n+                            PLATFORM_INFO.getResources());\n+                    return null;\n+                }\n+            });\n         }\n \n         return PLATFORM_INFO;\n@@ -308,10 +372,55 @@ public NumbersInfo numbers() {\n         return numbersInfo;\n     }\n \n+    @PreAuthorize(\"isAuthenticated()\")\n+    public Pair<Integer, List<GroupTO>> searchAssignableGroups(\n+            final String realm, final int page, final int size) {\n+\n+        AssignableCond assignableCond = new AssignableCond();\n+        assignableCond.setRealmFullPath(realm);\n+        SearchCond searchCond = SearchCond.getLeafCond(assignableCond);\n+\n+        int count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCond, AnyTypeKind.GROUP);\n+\n+        OrderByClause orderByClause = new OrderByClause();\n+        orderByClause.setField(\"name\");\n+        orderByClause.setDirection(OrderByClause.Direction.ASC);\n+        List<Group> matching = searchDAO.search(\n+                SyncopeConstants.FULL_ADMIN_REALMS,\n+                searchCond,\n+                page, size,\n+                Collections.singletonList(orderByClause), AnyTypeKind.GROUP);\n+        List<GroupTO> result = CollectionUtils.collect(matching, new Transformer<Group, GroupTO>() {\n+\n+            @Transactional(readOnly = true)\n+            @Override\n+            public GroupTO transform(final Group input) {\n+                return groupDataBinder.getGroupTO(input, false);\n+            }\n+        }, new ArrayList<GroupTO>());\n+\n+        return Pair.of(count, result);\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public TypeExtensionTO readTypeExtension(final String groupName) {\n+        Group group = groupDAO.findByName(groupName);\n+        if (group == null) {\n+            throw new NotFoundException(\"Group \" + groupName);\n+        }\n+        TypeExtension typeExt = group.getTypeExtension(anyTypeDAO.findUser());\n+        if (typeExt == null) {\n+            throw new NotFoundException(\"TypeExtension in \" + groupName + \" for users\");\n+        }\n+\n+        return groupDataBinder.getTypeExtensionTO(typeExt);\n+    }\n+\n     @Override\n     protected AbstractBaseBean resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n         throw new UnresolvedReferenceException();\n     }\n+\n }"},{"sha":"43b36d51331889330d42f3c2521de394b4e86a5c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -18,11 +18,14 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -232,9 +235,28 @@ public List<ExternalResource> findByPolicy(final Policy policy) {\n \n     @Override\n     public List<ExternalResource> findAll() {\n+        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_LIST);\n+        if (authRealms == null || authRealms.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n         TypedQuery<ExternalResource> query = entityManager().createQuery(\n                 \"SELECT e FROM  \" + JPAExternalResource.class.getSimpleName() + \" e\", ExternalResource.class);\n-        return query.getResultList();\n+\n+        return CollectionUtils.select(query.getResultList(), new Predicate<ExternalResource>() {\n+\n+            @Override\n+            public boolean evaluate(final ExternalResource resource) {\n+                return IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n+\n+                    @Override\n+                    public boolean evaluate(final String realm) {\n+                        return resource.getConnector() != null\n+                                && resource.getConnector().getAdminRealm().getFullPath().startsWith(realm);\n+                    }\n+                });\n+            }\n+        }, new ArrayList<ExternalResource>());\n     }\n \n     @Override"},{"sha":"9439827b84f09812822987b853a280b4eda51a9f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":32,"deletions":3,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -25,11 +25,16 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.util.ArrayList;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -40,9 +45,14 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n@@ -93,9 +103,28 @@ public void findWithOrgUnit() {\n \n     @Test\n     public void findAll() {\n-        List<ExternalResource> resources = resourceDAO.findAll();\n-        assertNotNull(resources);\n-        assertEquals(21, resources.size());\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(StandardEntitlement.values(),\n+                new Transformer<String, GrantedAuthority>() {\n+\n+            @Override\n+            public GrantedAuthority transform(final String entitlement) {\n+                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+            }\n+        }, new ArrayList<GrantedAuthority>());\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"admin\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(\"Master\"));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+\n+        try {\n+            List<ExternalResource> resources = resourceDAO.findAll();\n+            assertNotNull(resources);\n+            assertFalse(resources.isEmpty());\n+        } finally {\n+            SecurityContextHolder.getContext().setAuthentication(null);\n+        }\n     }\n \n     @Test"},{"sha":"5d8f021a0b4b3ce2d73c1b97aeac250cffd3d310","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -25,11 +25,17 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.UUID;\n import javax.persistence.EntityExistsException;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -41,8 +47,15 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n@@ -66,6 +79,29 @@ public class PlainSchemaTest extends AbstractTest {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    @BeforeClass\n+    public static void setAuthContext() {\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(StandardEntitlement.values(),\n+                new Transformer<String, GrantedAuthority>() {\n+\n+            @Override\n+            public GrantedAuthority transform(final String entitlement) {\n+                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+            }\n+        }, new ArrayList<GrantedAuthority>());\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"admin\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(\"Master\"));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+    }\n+\n+    @AfterClass\n+    public static void unsetAuthContext() {\n+        SecurityContextHolder.getContext().setAuthentication(null);\n+    }\n+\n     @Test\n     public void checkIdUniqueness() {\n         assertNotNull(derSchemaDAO.find(\"cn\"));"},{"sha":"1ada7d25e4bb5ac558eba816041724f5ef7c0f07","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/GroupDataBinder.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -21,13 +21,17 @@\n import java.util.Map;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n \n public interface GroupDataBinder {\n \n     GroupTO getGroupTO(String key);\n \n+    TypeExtensionTO getTypeExtensionTO(TypeExtension typeExt);\n+\n     GroupTO getGroupTO(Group group, boolean details);\n \n     void create(Group group, GroupTO groupTO);"},{"sha":"1d25c0897450b0f58c1af195f78d0b17dd7c4df3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":17,"deletions":11,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -311,6 +311,22 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n         return propByRes;\n     }\n \n+    @Override\n+    public TypeExtensionTO getTypeExtensionTO(final TypeExtension typeExt) {\n+        TypeExtensionTO typeExtTO = new TypeExtensionTO();\n+        typeExtTO.setAnyType(typeExt.getAnyType().getKey());\n+        typeExtTO.getAuxClasses().addAll(CollectionUtils.collect(typeExt.getAuxClasses(),\n+                new Transformer<AnyTypeClass, String>() {\n+\n+            @Override\n+            public String transform(final AnyTypeClass clazz) {\n+                return clazz.getKey();\n+            }\n+        }));\n+\n+        return typeExtTO;\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public GroupTO getGroupTO(final Group group, final boolean details) {\n@@ -358,17 +374,7 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n         }\n \n         for (TypeExtension typeExt : group.getTypeExtensions()) {\n-            TypeExtensionTO typeExtTO = new TypeExtensionTO();\n-            typeExtTO.setAnyType(typeExt.getAnyType().getKey());\n-            typeExtTO.getAuxClasses().addAll(CollectionUtils.collect(typeExt.getAuxClasses(),\n-                    new Transformer<AnyTypeClass, String>() {\n-\n-                @Override\n-                public String transform(final AnyTypeClass clazz) {\n-                    return clazz.getKey();\n-                }\n-            }));\n-            groupTO.getTypeExtensions().add(typeExtTO);\n+            groupTO.getTypeExtensions().add(getTypeExtensionTO(typeExt));\n         }\n \n         return groupTO;"},{"sha":"714dcff7522376b80e1a2a0da7ba1c1824bd8415","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ResourceDataBinderTest.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -21,24 +21,37 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n@@ -56,6 +69,29 @@ public class ResourceDataBinderTest extends AbstractTest {\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n+    @BeforeClass\n+    public static void setAuthContext() {\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(StandardEntitlement.values(),\n+                new Transformer<String, GrantedAuthority>() {\n+\n+            @Override\n+            public GrantedAuthority transform(final String entitlement) {\n+                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+            }\n+        }, new ArrayList<GrantedAuthority>());\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"admin\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(\"Master\"));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+    }\n+\n+    @AfterClass\n+    public static void unsetAuthContext() {\n+        SecurityContextHolder.getContext().setAuthentication(null);\n+    }\n+\n     @Test\n     public void issue42() {\n         PlainSchema userId = plainSchemaDAO.find(\"userId\");"},{"sha":"50ef08191ea1a1157f5b728474786bac8fefe40f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n@@ -53,11 +52,6 @@ public List<GroupTO> own() {\n         return logic.own();\n     }\n \n-    @Override\n-    public TypeExtensionTO readTypeExtension(final String key, final String anyTypeKey) {\n-        return logic.readTypeExtension(key, anyTypeKey);\n-    }\n-\n     @Override\n     public ExecTO bulkMembersAction(final String key, final BulkMembersActionType actionType) {\n         return logic.bulkMembersAction(key, actionType);"},{"sha":"4a301a3be3c76fbe6d34d15832bd1cfe568c8b51","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -18,9 +18,16 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.syncope.core.logic.SyncopeLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -47,4 +54,18 @@ public NumbersInfo numbers() {\n         return logic.numbers();\n     }\n \n+    @Override\n+    public PagedResult<GroupTO> searchAssignableGroups(\n+            final String realm, final int page, final int size) {\n+\n+        Pair<Integer, List<GroupTO>> result = logic.searchAssignableGroups(\n+                StringUtils.prependIfMissing(realm, SyncopeConstants.ROOT_REALM), page, size);\n+        return buildPagedResult(result.getRight(), page, size, result.getLeft());\n+    }\n+\n+    @Override\n+    public TypeExtensionTO readUserTypeExtension(final String groupName) {\n+        return logic.readTypeExtension(groupName);\n+    }\n+\n }"},{"sha":"25f544d27bc8fb470809a43c05fc5cf352621243","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/UsersITCase.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FUsersITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FUsersITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FUsersITCase.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -153,6 +153,13 @@ public void editRelationships() {\n         TESTER.executeAjaxEvent(TAB_PANEL + \"outerObjectsRepeater:0:outer:form:content:form:view:relationships:\"\n                 + \"specification:type:dropDownChoiceField\", Constants.ON_CHANGE);\n \n+        // The ON_CHANGE above should enable this component, but it doesn't; doing it by hand\n+        Component rightType = findComponentById(\n+                TAB_PANEL + \"outerObjectsRepeater:0:outer:form:content:form:view:relationships:specification\",\n+                \"rightType\");\n+        assertNotNull(rightType);\n+        rightType.setEnabled(true);\n+\n         formTester.setValue(\"view:relationships:specification:rightType:dropDownChoiceField\", \"PRINTER\");\n         TESTER.executeAjaxEvent(TAB_PANEL + \"outerObjectsRepeater:0:outer:form:content:form:view:relationships:\"\n                 + \"specification:rightType:dropDownChoiceField\", Constants.ON_CHANGE);"},{"sha":"6ee44841983b7d6a325194f9677d90925fd760a9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -100,7 +100,7 @@ private int getFailedLogins(final UserService userService, final String userKey)\n     }\n \n     @Test\n-    public void testReadEntitlements() {\n+    public void readEntitlements() {\n         // 1. as not authenticated (not allowed)\n         try {\n             clientFactory.create().self();\n@@ -130,7 +130,7 @@ public void testReadEntitlements() {\n     }\n \n     @Test\n-    public void testUserSchemaAuthorization() {\n+    public void userSchemaAuthorization() {\n         String schemaName = \"authTestSchema\" + getUUIDString();\n \n         // 1. create a schema (as admin)\n@@ -169,7 +169,7 @@ public void testUserSchemaAuthorization() {\n     }\n \n     @Test\n-    public void testUserRead() {\n+    public void userRead() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testuserread@test.org\");\n         userTO.getRoles().add(\"User manager\");\n \n@@ -194,7 +194,7 @@ public void testUserRead() {\n     }\n \n     @Test\n-    public void testUserSearch() {\n+    public void userSearch() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testusersearch@test.org\");\n         userTO.getRoles().add(\"User reviewer\");\n "},{"sha":"857e371e8c5315f5bc9a89585e28a95b41dccf1a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -89,6 +89,7 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.Test;\n@@ -619,17 +620,24 @@ public void createWithMandatorySchema() {\n     public void anonymous() {\n         GroupService unauthenticated = clientFactory.create().getService(GroupService.class);\n         try {\n-            unauthenticated.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n+            unauthenticated.search(new AnyQuery.Builder().realm(\"/even\").build());\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n-        GroupService anonymous = clientFactory.create(\n-                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY)).\n-                getService(GroupService.class);\n-        assertFalse(anonymous.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build()).\n-                getResult().isEmpty());\n+        SyncopeClient anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+        try {\n+            anonymous.getService(GroupService.class).\n+                    search(new AnyQuery.Builder().realm(\"/even\").build());\n+            fail();\n+        } catch (ForbiddenException e) {\n+            assertNotNull(e);\n+        }\n+\n+        assertFalse(anonymous.getService(SyncopeService.class).\n+                searchAssignableGroups(\"/even\", 1, 100).getResult().isEmpty());\n     }\n \n     @Test"},{"sha":"95109f4edf25e90beabb141b928ceff6df497450","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20596e2e02e841f7897f39669a98a1f70e386f4e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20596e2e02e841f7897f39669a98a1f70e386f4e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=20596e2e02e841f7897f39669a98a1f70e386f4e","patch":"@@ -26,7 +26,6 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.security.AccessControlException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -38,7 +37,6 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -502,22 +500,6 @@ public void read() {\n         assertFalse(provision.getMapping().getLinkingItems().isEmpty());\n     }\n \n-    @Test\n-    public void anonymous() {\n-        ResourceService unauthenticated = clientFactory.create().getService(ResourceService.class);\n-        try {\n-            unauthenticated.list();\n-            fail();\n-        } catch (AccessControlException e) {\n-            assertNotNull(e);\n-        }\n-\n-        ResourceService anonymous = clientFactory.create(\n-                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY)).\n-                getService(ResourceService.class);\n-        assertFalse(anonymous.list().isEmpty());\n-    }\n-\n     @Test\n     public void listConnObjects() {\n         List<String> groupKeys = new ArrayList<>();"}]}