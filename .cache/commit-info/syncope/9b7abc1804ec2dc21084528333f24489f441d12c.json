{"sha":"9b7abc1804ec2dc21084528333f24489f441d12c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjliN2FiYzE4MDRlYzJkYzIxMDg0NTI4MzMzZjI0NDg5ZjQ0MWQxMmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-20T12:08:11Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-20T12:08:24Z"},"message":"[SYNCOPE-1086] Providing specific method to fetch only creationDate / lastChangeDate in order to build ETag","tree":{"sha":"626eaf7f1c431f77c6bdbe0622e26751371ce4d9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/626eaf7f1c431f77c6bdbe0622e26751371ce4d9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9b7abc1804ec2dc21084528333f24489f441d12c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b7abc1804ec2dc21084528333f24489f441d12c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9b7abc1804ec2dc21084528333f24489f441d12c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b7abc1804ec2dc21084528333f24489f441d12c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f696ca3c721299e2bbbe6f7613ff205624986e3c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f696ca3c721299e2bbbe6f7613ff205624986e3c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f696ca3c721299e2bbbe6f7613ff205624986e3c"}],"stats":{"total":126,"additions":104,"deletions":22},"files":[{"sha":"003058f3eeeafae25028aa325bb968b7556d3f4a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -223,6 +224,8 @@ public boolean evaluate(final String ownedRealm) {\n         }\n     }\n \n+    public abstract Date findLastChange(String key);\n+    \n     public abstract TO read(String key);\n \n     public abstract int count(String realm);"},{"sha":"c4ee23773d9ccb3e1609aaca85aadd4266463a8d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -21,6 +21,7 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Date;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -38,7 +39,9 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -58,6 +61,9 @@\n @Component\n public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectPatch> {\n \n+    @Autowired\n+    protected AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     protected AnySearchDAO searchDAO;\n \n@@ -67,6 +73,17 @@ public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectPatch\n     @Autowired\n     protected AnyObjectProvisioningManager provisioningManager;\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public Date findLastChange(final String key) {\n+        Date etag = anyObjectDAO.findLastChange(key);\n+        if (etag == null) {\n+            throw new NotFoundException(\"AnyObject \" + key);\n+        }\n+\n+        return etag;\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public AnyObjectTO read(final String key) {"},{"sha":"c59907cba6ce53b1b80c9fc758f72c1526366efe","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -130,6 +130,17 @@ public boolean evaluate(final String ownedRealm) {\n         }\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public Date findLastChange(final String key) {\n+        Date etag = groupDAO.findLastChange(key);\n+        if (etag == null) {\n+            throw new NotFoundException(\"Group \" + key);\n+        }\n+\n+        return etag;\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override"},{"sha":"1672cfd6da83733a7569097b5c91aa7d98f30ef4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -86,6 +87,17 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {\n     @Autowired\n     protected SyncopeLogic syncopeLogic;\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public Date findLastChange(final String key) {\n+        Date etag = userDAO.findLastChange(key);\n+        if (etag == null) {\n+            throw new NotFoundException(\"User \" + key);\n+        }\n+\n+        return etag;\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override"},{"sha":"979e39b2a3df90e23c3e1d9eafec20155fefa4a0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Date;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -30,6 +31,8 @@\n \n     int DEFAULT_PAGE_SIZE = 10;\n \n+    Date findLastChange(String key);\n+\n     A authFind(String key);\n \n     A find(String key);"},{"sha":"0c4fdcbb01620d19bc819adfce351c4dd446bc4c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -23,6 +23,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -119,6 +120,24 @@ protected AnyUtils anyUtils() {\n         return anyUtils;\n     }\n \n+    protected Date findLastChange(final String key, final String table) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT creationDate, lastChangeDate FROM \" + table + \" WHERE id=?\");\n+        query.setParameter(1, key);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object[]> result = query.getResultList();\n+\n+        Date creationDate = null;\n+        Date lastChangeDate = null;\n+        if (!result.isEmpty()) {\n+            creationDate = (Date) result.get(0)[0];\n+            lastChangeDate = (Date) result.get(0)[1];\n+        }\n+\n+        return lastChangeDate == null ? creationDate : lastChangeDate;\n+    }\n+\n     protected abstract void securityChecks(A any);\n \n     @Transactional(readOnly = true)"},{"sha":"4a7e490cb4fa7a3136db8cdcbbe33d2001cc0b7b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n@@ -90,6 +91,16 @@ private GroupDAO groupDAO() {\n         return groupDAO;\n     }\n \n+    @Override\n+    protected AnyUtils init() {\n+        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.ANY_OBJECT);\n+    }\n+\n+    @Override\n+    public Date findLastChange(final String key) {\n+        return findLastChange(key, JPAAnyObject.TABLE);\n+    }\n+\n     @Override\n     public Map<AnyType, Integer> countByType() {\n         Query query = entityManager().createQuery(\n@@ -123,11 +134,6 @@ public Map<String, Integer> countByRealm(final AnyType anyType) {\n         return Collections.unmodifiableMap(countByRealm);\n     }\n \n-    @Override\n-    protected AnyUtils init() {\n-        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.ANY_OBJECT);\n-    }\n-\n     @Override\n     protected void securityChecks(final AnyObject anyObject) {\n         Set<String> authRealms = AuthContextUtils.getAuthorizations().get("},{"sha":"e727572b19d92a479d4674c731e7c6b38b387557","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -120,6 +121,11 @@ protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.GROUP);\n     }\n \n+    @Override\n+    public Date findLastChange(final String key) {\n+        return findLastChange(key, JPAGroup.TABLE);\n+    }\n+\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery("},{"sha":"292b69be8efa27cc5290b20f129c71faee169c91","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -132,6 +133,11 @@ protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);\n     }\n \n+    @Override\n+    public Date findLastChange(final String key) {\n+        return findLastChange(key, JPAUser.TABLE);\n+    }\n+\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery("},{"sha":"101e2b54d4f0039e96469431fe85a5e70506f832","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -169,6 +169,8 @@ public void save() {\n         User actual = userDAO.save(user);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(1, actual.getPasswordHistory().size());\n+        assertNotNull(userDAO.findLastChange(actual.getKey()));\n+        assertEquals(actual.getLastChangeDate(), userDAO.findLastChange(actual.getKey()));\n     }\n \n     @Test"},{"sha":"7a66c3d4b305ad1fd6fbcad1ef83ea83ca6440ee","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.util.Date;\n import java.util.Set;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n@@ -152,9 +153,8 @@ public Response create(final TO anyTO) {\n \n     @Override\n     public Response update(final P anyPatch) {\n-        TO any = getAnyLogic().read(anyPatch.getKey());\n-\n-        checkETag(any.getETagValue());\n+        Date etagDate = getAnyLogic().findLastChange(anyPatch.getKey());\n+        checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<TO> updated = getAnyLogic().update(anyPatch, isNullPriorityAsync());\n         return modificationResponse(updated);\n@@ -209,19 +209,17 @@ public void delete(final String key, final SchemaType schemaType, final String s\n \n     @Override\n     public Response delete(final String key) {\n-        TO group = getAnyLogic().read(key);\n-\n-        checkETag(group.getETagValue());\n+        Date etagDate = getAnyLogic().findLastChange(key);\n+        checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<TO> deleted = getAnyLogic().delete(key, isNullPriorityAsync());\n         return modificationResponse(deleted);\n     }\n \n     @Override\n     public Response deassociate(final DeassociationPatch patch) {\n-        TO any = getAnyLogic().read(patch.getKey());\n-\n-        checkETag(any.getETagValue());\n+        Date etagDate = getAnyLogic().findLastChange(patch.getKey());\n+        checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<TO> updated;\n         switch (patch.getAction()) {\n@@ -264,9 +262,8 @@ public Response deassociate(final DeassociationPatch patch) {\n \n     @Override\n     public Response associate(final AssociationPatch patch) {\n-        TO any = getAnyLogic().read(patch.getKey());\n-\n-        checkETag(any.getETagValue());\n+        Date etagDate = getAnyLogic().findLastChange(patch.getKey());\n+        checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<TO> updated;\n         switch (patch.getAction()) {\n@@ -371,7 +368,7 @@ public Response bulk(final BulkAction bulkAction) {\n                         try {\n                             result.getResults().put(\n                                     ((UserLogic) logic).\n-                                    status(statusPatch, isNullPriorityAsync()).getEntity().getKey(),\n+                                            status(statusPatch, isNullPriorityAsync()).getEntity().getKey(),\n                                     BulkActionResult.Status.SUCCESS);\n                         } catch (Exception e) {\n                             LOG.error(\"Error performing suspend for user {}\", key, e);\n@@ -394,7 +391,7 @@ public Response bulk(final BulkAction bulkAction) {\n                         try {\n                             result.getResults().put(\n                                     ((UserLogic) logic).\n-                                    status(statusPatch, isNullPriorityAsync()).getEntity().getKey(),\n+                                            status(statusPatch, isNullPriorityAsync()).getEntity().getKey(),\n                                     BulkActionResult.Status.SUCCESS);\n                         } catch (Exception e) {\n                             LOG.error(\"Error performing reactivate for user {}\", key, e);"},{"sha":"b8a6febe93ce813696714b73580d758ff892b95b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7abc1804ec2dc21084528333f24489f441d12c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=9b7abc1804ec2dc21084528333f24489f441d12c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.util.Date;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n@@ -55,9 +56,8 @@ public Response create(final UserTO userTO, final boolean storePassword) {\n \n     @Override\n     public Response status(final StatusPatch statusPatch) {\n-        UserTO user = logic.read(statusPatch.getKey());\n-\n-        checkETag(user.getETagValue());\n+        Date etagDate = getAnyLogic().findLastChange(statusPatch.getKey());\n+        checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<UserTO> updated = logic.status(statusPatch, isNullPriorityAsync());\n         return modificationResponse(updated);"}]}