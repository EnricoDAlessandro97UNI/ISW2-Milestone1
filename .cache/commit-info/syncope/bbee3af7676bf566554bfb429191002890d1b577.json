{"sha":"bbee3af7676bf566554bfb429191002890d1b577","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJiZWUzYWY3Njc2YmY1NjY1NTRiZmI0MjkxOTEwMDI4OTBkMWI1Nzc=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-09-07T10:55:45Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-09-07T10:55:45Z"},"message":"[SYNCOPE-935] provides fix for all attributes referring to JPA entities + hides realm, type and udynMembershipCond attributes among the available ones to be used to create search queries","tree":{"sha":"d556067f913c62e918e0735ea4d43ee298349f9e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d556067f913c62e918e0735ea4d43ee298349f9e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bbee3af7676bf566554bfb429191002890d1b577","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bbee3af7676bf566554bfb429191002890d1b577","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bbee3af7676bf566554bfb429191002890d1b577","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bbee3af7676bf566554bfb429191002890d1b577/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"ef5784b1ede2fd33de430cf2764cc669f79106d9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ef5784b1ede2fd33de430cf2764cc669f79106d9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ef5784b1ede2fd33de430cf2764cc669f79106d9"}],"stats":{"total":37,"additions":17,"deletions":20},"files":[{"sha":"b4facfea2baea317fda948d03575bfbad72a2497","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SearchableFields.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbee3af7676bf566554bfb429191002890d1b577/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbee3af7676bf566554bfb429191002890d1b577/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java?ref=bbee3af7676bf566554bfb429191002890d1b577","patch":"@@ -36,7 +36,7 @@\n public final class SearchableFields {\n \n     private static final String[] ATTRIBUTES_NOTINCLUDED = {\n-        \"serialVersionUID\", \"password\"\n+        \"serialVersionUID\", \"password\", \"type\", \"realm\", \"udynMembershipCond\"\n     };\n \n     private static final Set<String> ANY_FIELDS = new HashSet<>();"},{"sha":"745d82adc44c0048d265b4badb9b369493b342ba","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":16,"deletions":19,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbee3af7676bf566554bfb429191002890d1b577/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbee3af7676bf566554bfb429191002890d1b577/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=bbee3af7676bf566554bfb429191002890d1b577","patch":"@@ -35,6 +35,7 @@\n import javax.validation.constraints.Min;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.ClassUtils;\n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -885,16 +886,18 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n     private String getQuery(final AnyCond cond, final boolean not, final List<Object> parameters,\n             final SearchSupport svs) {\n \n+        AnyCond condClone = SerializationUtils.clone(cond);\n+        \n         AnyUtils attrUtils = anyUtilsFactory.getInstance(svs.anyTypeKind());\n \n         // Keeps track of difference between entity's getKey() and JPA @Id fields\n-        if (\"key\".equals(cond.getSchema())) {\n-            cond.setSchema(\"id\");\n+        if (\"key\".equals(condClone.getSchema())) {\n+            condClone.setSchema(\"id\");\n         }\n \n-        Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), cond.getSchema());\n+        Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), condClone.getSchema());\n         if (anyField == null) {\n-            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n+            LOG.warn(\"Ignoring invalid schema '{}'\", condClone.getSchema());\n             return EMPTY_QUERY;\n         }\n \n@@ -931,35 +934,29 @@ private String getQuery(final AnyCond cond, final boolean not, final List<Object\n                 LOG.error(\"Could not find {}#getKey\", anyField.getType(), e);\n             }\n \n-            if (relMethod != null) {\n-                if (Long.class.isAssignableFrom(relMethod.getReturnType())) {\n-                    cond.setSchema(cond.getSchema() + \"_id\");\n-                    schema.setType(AttrSchemaType.Long);\n-                }\n-                if (String.class.isAssignableFrom(relMethod.getReturnType())) {\n-                    cond.setSchema(cond.getSchema() + \"_id\");\n-                    schema.setType(AttrSchemaType.String);\n-                }\n+            if (relMethod != null && String.class.isAssignableFrom(relMethod.getReturnType())) {\n+                condClone.setSchema(condClone.getSchema() + \"_id\");\n+                schema.setType(AttrSchemaType.String);\n             }\n         }\n \n         PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n-        if (cond.getType() != AttributeCond.Type.LIKE\n-                && cond.getType() != AttributeCond.Type.ISNULL\n-                && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+        if (condClone.getType() != AttributeCond.Type.LIKE\n+                && condClone.getType() != AttributeCond.Type.ISNULL\n+                && condClone.getType() != AttributeCond.Type.ISNOTNULL) {\n \n             try {\n-                schema.getValidator().validate(cond.getExpression(), attrValue);\n+                schema.getValidator().validate(condClone.getExpression(), attrValue);\n             } catch (ValidationException e) {\n-                LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n+                LOG.error(\"Could not validate expression '\" + condClone.getExpression() + \"'\", e);\n                 return EMPTY_QUERY;\n             }\n         }\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n-        fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n+        fillAttributeQuery(query, attrValue, schema, condClone, not, parameters, svs);\n \n         return query.toString();\n     }"}]}