{"sha":"f2f5819cc17df83a2c96e9b23a3f4364e8866308","node_id":"C_kwDOJfYA1toAKGYyZjU4MTljYzE3ZGY4M2EyYzk2ZTliMjNhM2Y0MzY0ZTg4NjYzMDg","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2022-05-31T10:16:27Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-05-31T10:16:27Z"},"message":"SYNCOPE-1680: support Simple MFA for WA (#348)","tree":{"sha":"3a1e6d2e362c108f3650d2394cc01875a7ae9d90","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3a1e6d2e362c108f3650d2394cc01875a7ae9d90"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f2f5819cc17df83a2c96e9b23a3f4364e8866308","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiler7CRBK7hj4Ov3rIwAALjcIABHfS6f4P0vxULmGzcTkdP9a\np1/jF70JR6ZQojCborpdXoUbGBu3PJnE5BH5lbDSUHuKS9mpm7zGGbj82xaZV3Al\nbeWGceK/2uiXnTf49981svKs+Nbq/EiNh6bOY8jipOKpFRNayE4c4H8FBEuQCI8S\nV2WArgq2W6MZgDE+mVpbP4u71QAXN7U7etlRGzbrveSgVCBaKQoO0Xoorab0K1d5\n8WVwAYam6aBHApc+K6/gp6fqo2nDa546FeInvRsAa3mUiNQLb8njuma3PuQZwKHR\n4iKHvRJK1w1qpE/xInXSRnHFqaQ8qTkrlAH++HMNOOOCKsEmRZq+MlwcJIRukhI=\n=aRhR\n-----END PGP SIGNATURE-----\n","payload":"tree 3a1e6d2e362c108f3650d2394cc01875a7ae9d90\nparent 2432dd52c53b6b3cfe6356171241eb3ceaeb6172\nauthor Misagh Moayyed <mm1844@gmail.com> 1653992187 +0400\ncommitter GitHub <noreply@github.com> 1653992187 +0400\n\nSYNCOPE-1680: support Simple MFA for WA (#348)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2f5819cc17df83a2c96e9b23a3f4364e8866308","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f2f5819cc17df83a2c96e9b23a3f4364e8866308","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2f5819cc17df83a2c96e9b23a3f4364e8866308/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"2432dd52c53b6b3cfe6356171241eb3ceaeb6172","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2432dd52c53b6b3cfe6356171241eb3ceaeb6172","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2432dd52c53b6b3cfe6356171241eb3ceaeb6172"}],"stats":{"total":395,"additions":284,"deletions":111},"files":[{"sha":"951b6703725ca9ceac4290740b239f9239a1c6cc","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SimpleMfaAuthModuleConf.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2f5819cc17df83a2c96e9b23a3f4364e8866308/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSimpleMfaAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2f5819cc17df83a2c96e9b23a3f4364e8866308/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSimpleMfaAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSimpleMfaAuthModuleConf.java?ref=f2f5819cc17df83a2c96e9b23a3f4364e8866308","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+public class SimpleMfaAuthModuleConf implements AuthModuleConf {\n+    private static final long serialVersionUID = -7663257599139312426L;\n+\n+    private long timeToKillInSeconds = 30L;\n+    \n+    private int tokenLength = 6;\n+\n+    private String bypassGroovyScript;\n+\n+    private String emailAttribute = \"email\";\n+\n+    private String emailFrom;\n+\n+    private String emailSubject;\n+\n+    private String emailText;\n+\n+    public String getEmailFrom() {\n+        return emailFrom;\n+    }\n+\n+    public void setEmailFrom(final String emailFrom) {\n+        this.emailFrom = emailFrom;\n+    }\n+\n+    public String getEmailSubject() {\n+        return emailSubject;\n+    }\n+\n+    public void setEmailSubject(final String emailSubject) {\n+        this.emailSubject = emailSubject;\n+    }\n+\n+    public String getEmailText() {\n+        return emailText;\n+    }\n+\n+    public void setEmailText(final String emailText) {\n+        this.emailText = emailText;\n+    }\n+\n+    public String getBypassGroovyScript() {\n+        return bypassGroovyScript;\n+    }\n+\n+    public void setBypassGroovyScript(final String bypassGroovyScript) {\n+        this.bypassGroovyScript = bypassGroovyScript;\n+    }\n+\n+    public String getEmailAttribute() {\n+        return emailAttribute;\n+    }\n+\n+    public void setEmailAttribute(final String emailAttribute) {\n+        this.emailAttribute = emailAttribute;\n+    }\n+\n+    public long getTimeToKillInSeconds() {\n+        return timeToKillInSeconds;\n+    }\n+\n+    public void setTimeToKillInSeconds(final long timeToKillInSeconds) {\n+        this.timeToKillInSeconds = timeToKillInSeconds;\n+    }\n+\n+    public int getTokenLength() {\n+        return tokenLength;\n+    }\n+\n+    public void setTokenLength(final int tokenLength) {\n+        this.tokenLength = tokenLength;\n+    }\n+}"},{"sha":"4e59e87a05043a853dde82f0e6fdf86826abeea7","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2f5819cc17df83a2c96e9b23a3f4364e8866308/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2f5819cc17df83a2c96e9b23a3f4364e8866308/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=f2f5819cc17df83a2c96e9b23a3f4364e8866308","patch":"@@ -69,6 +69,8 @@ under the License.\n               description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n   <AuthModule id=\"DefaultGoogleMfaAuthModule\"\n               description=\"Google Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\", \"label\":\"SyncopeTest\", \"timeStepSize\":30, \"windowSize\":3}'/>\n+  <AuthModule id=\"DefaultSimpleMfaAuthModule\"\n+              description=\"Simple Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SimpleMfaAuthModuleConf\",\"tokenLength\":6, \"timeToKillInSeconds\":30}'/>\n   <AuthModule id=\"DefaultDuoMfaAuthModule\"\n               description=\"Duo Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf\",\"integrationKey\":\"DIOXVRZD2UMZ8XXMNFQ5\",\"secretKey\":\"Q2IU2i8BFNd6VYflZT8Evl6lF7oPlj3PM15BmRU7\", \"applicationKey\":\"u1IHBaREMB7Cb5S4QMISAgHycpj8lPBkDGfWt23I\", \"apiHost\":\"theapi.duosecurity.com\"}'/>\n   <AuthModule id=\"DefaultOIDCAuthModule\""},{"sha":"ca05bde13ebec0e4deac448e76834f1e8248e098","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthModuleTest.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2f5819cc17df83a2c96e9b23a3f4364e8866308/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2f5819cc17df83a2c96e9b23a3f4364e8866308/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java?ref=f2f5819cc17df83a2c96e9b23a3f4364e8866308","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SimpleMfaAuthModuleConf;\n import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n@@ -66,6 +67,10 @@ public void find() {\n         assertNotNull(authModule);\n         assertTrue(authModule.getConf() instanceof LDAPAuthModuleConf);\n \n+        authModule = authModuleDAO.find(\"DefaultSimpleMfaAuthModule\");\n+        assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof SimpleMfaAuthModuleConf);\n+\n         authModule = authModuleDAO.find(\"DefaultJDBCAuthModule\");\n         assertNotNull(authModule);\n         assertTrue(authModule.getConf() instanceof JDBCAuthModuleConf);\n@@ -232,6 +237,14 @@ public void saveWithSAML2IdPModule() {\n         saveAuthModule(\"SAML2IdPAuthModuleTest\", conf);\n     }\n \n+    @Test\n+    public void saveWithSimpleMfaModule() {\n+        SimpleMfaAuthModuleConf conf = new SimpleMfaAuthModuleConf();\n+        conf.setTokenLength(9);\n+        conf.setTimeToKillInSeconds(120);\n+        saveAuthModule(\"SimpleMfaAuthModuleConf\", conf);\n+    }\n+    \n     @Test\n     public void saveWithU2FModule() {\n         U2FAuthModuleConf conf = new U2FAuthModuleConf();"},{"sha":"066d186d206eea5bd44b1794326627172986a92f","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2f5819cc17df83a2c96e9b23a3f4364e8866308/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2f5819cc17df83a2c96e9b23a3f4364e8866308/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=f2f5819cc17df83a2c96e9b23a3f4364e8866308","patch":"@@ -69,6 +69,8 @@ under the License.\n               description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n   <AuthModule id=\"DefaultGoogleMfaAuthModule\"\n               description=\"Google Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\", \"label\":\"SyncopeTest\", \"timeStepSize\":30, \"windowSize\":3}'/>\n+  <AuthModule id=\"DefaultSimpleMfaAuthModule\"\n+              description=\"Simple Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SimpleMfaAuthModuleConf\",\"tokenLength\":6, \"timeToKillInSeconds\":30}'/>\n   <AuthModule id=\"DefaultDuoMfaAuthModule\"\n               description=\"Duo Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf\",\"integrationKey\":\"DIOXVRZD2UMZ8XXMNFQ5\",\"secretKey\":\"Q2IU2i8BFNd6VYflZT8Evl6lF7oPlj3PM15BmRU7\", \"applicationKey\":\"u1IHBaREMB7Cb5S4QMISAgHycpj8lPBkDGfWt23I\", \"apiHost\":\"theapi.duosecurity.com\"}'/>\n   <AuthModule id=\"DefaultOIDCAuthModule\""},{"sha":"4f82c6933dbd6e329d3ba6e335f00b06393df500","filename":"pom.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2f5819cc17df83a2c96e9b23a3f4364e8866308/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2f5819cc17df83a2c96e9b23a3f4364e8866308/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=f2f5819cc17df83a2c96e9b23a3f4364e8866308","patch":"@@ -1535,6 +1535,16 @@ under the License.\n           </exclusion>\n         </exclusions>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-simple-mfa</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-simple-mfa-core</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-support-gauth</artifactId>"},{"sha":"48c6644b7c4475210ac2f7ca32f5414526ccaffc","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":156,"deletions":111,"changes":267,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2f5819cc17df83a2c96e9b23a3f4364e8866308/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2f5819cc17df83a2c96e9b23a3f4364e8866308/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=f2f5819cc17df83a2c96e9b23a3f4364e8866308","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SimpleMfaAuthModuleConf;\n import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n@@ -52,12 +53,14 @@\n import org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties;\n+import org.apereo.cas.configuration.model.support.mfa.simple.CasSimpleMultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jGenericOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties;\n import org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties;\n+import org.apereo.cas.util.ResourceUtils;\n import org.apereo.cas.util.model.TriStateBoolean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -80,25 +83,25 @@ public SyncopeWAPropertySourceLocator(final WARestClient waRestClient) {\n \n     private static SimpleFilterProvider getParentCasFilterProvider() {\n         return new SimpleFilterProvider().\n-                setFailOnUnknownId(false).\n-                addFilter(CasConfigurationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        CasConfigurationProperties.class,\n-                                        CasConfigurationProperties::getAuthn)));\n+            setFailOnUnknownId(false).\n+            addFilter(CasConfigurationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        CasConfigurationProperties.class,\n+                        CasConfigurationProperties::getAuthn)));\n     }\n \n     private static Map<String, Object> filterCasProperties(\n-            final CasConfigurationProperties casProperties,\n-            final SimpleFilterProvider filters) {\n+        final CasConfigurationProperties casProperties,\n+        final SimpleFilterProvider filters) {\n \n         return CasCoreConfigurationUtils.asMap(casProperties.withHolder(), filters);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final SyncopeAuthModuleConf conf,\n-            final String address) {\n+        final String authModule,\n+        final SyncopeAuthModuleConf conf,\n+        final String address) {\n \n         SyncopeAuthenticationProperties syncopeProps = new SyncopeAuthenticationProperties();\n         syncopeProps.setName(authModule);\n@@ -110,39 +113,39 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                        CasCoreConfigurationUtils.getPropertyName(\n-                                AuthenticationProperties.class,\n-                                AuthenticationProperties::getSyncope)));\n+            SimpleBeanPropertyFilter.filterOutAllExcept(\n+                CasCoreConfigurationUtils.getPropertyName(\n+                    AuthenticationProperties.class,\n+                    AuthenticationProperties::getSyncope)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final StaticAuthModuleConf conf) {\n+        final String authModule,\n+        final StaticAuthModuleConf conf) {\n \n         AcceptAuthenticationProperties staticProps = new AcceptAuthenticationProperties();\n         staticProps.setName(authModule);\n         String users = conf.getUsers().entrySet().stream().\n-                map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n-                collect(Collectors.joining(\",\"));\n+            map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n+            collect(Collectors.joining(\",\"));\n         staticProps.setUsers(users);\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n         casProperties.getAuthn().setAccept(staticProps);\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                        CasCoreConfigurationUtils.getPropertyName(\n-                                AuthenticationProperties.class,\n-                                AuthenticationProperties::getAccept)));\n+            SimpleBeanPropertyFilter.filterOutAllExcept(\n+                CasCoreConfigurationUtils.getPropertyName(\n+                    AuthenticationProperties.class,\n+                    AuthenticationProperties::getAccept)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final LDAPAuthModuleConf conf) {\n+        final String authModule,\n+        final LDAPAuthModuleConf conf) {\n \n         LdapAuthenticationProperties ldapProps = new LdapAuthenticationProperties();\n         ldapProps.setName(authModule);\n@@ -163,18 +166,19 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(\n-                AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                        CasCoreConfigurationUtils.getPropertyName(\n-                                AuthenticationProperties.class,\n-                                AuthenticationProperties::getLdap)));\n+            AuthenticationProperties.class.getSimpleName(),\n+            SimpleBeanPropertyFilter.filterOutAllExcept(\n+                CasCoreConfigurationUtils.getPropertyName(\n+                    AuthenticationProperties.class,\n+                    AuthenticationProperties::getLdap)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n+\n     @SuppressWarnings(\"deprecation\")\n     private static Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final DuoMfaAuthModuleConf conf) {\n+        final String authModule,\n+        final DuoMfaAuthModuleConf conf) {\n \n         DuoSecurityMultifactorAuthenticationProperties props = new DuoSecurityMultifactorAuthenticationProperties();\n         props.setName(authModule);\n@@ -188,25 +192,64 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getMfa))).\n-                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        MultifactorAuthenticationProperties.class,\n-                                        MultifactorAuthenticationProperties::getDuo)));\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        AuthenticationProperties.class,\n+                        AuthenticationProperties::getMfa))).\n+            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        MultifactorAuthenticationProperties.class,\n+                        MultifactorAuthenticationProperties::getDuo)));\n+        return filterCasProperties(casProperties, filterProvider);\n+    }\n+\n+    private static Map<String, Object> mapAuthModule(final String authModule,\n+                                                     final SimpleMfaAuthModuleConf conf) {\n+        CasSimpleMultifactorAuthenticationProperties props =\n+            new CasSimpleMultifactorAuthenticationProperties();\n+\n+        props.setName(authModule);\n+        props.setTokenLength(conf.getTokenLength());\n+        props.setTimeToKillInSeconds(conf.getTimeToKillInSeconds());\n+        props.getMail().setAttributeName(conf.getEmailAttribute());\n+        props.getMail().setFrom(conf.getEmailFrom());\n+        props.getMail().setSubject(conf.getEmailSubject());\n+        props.getMail().setText(conf.getEmailText());\n+\n+        try {\n+            if (StringUtils.isNotBlank(conf.getBypassGroovyScript())) {\n+                props.getBypass().getGroovy().setLocation(ResourceUtils.getResourceFrom(conf.getBypassGroovyScript()));\n+            }\n+        } catch (final Exception e) {\n+            LOG.error(\"Unable to load groovy script for bypass\", e);\n+            throw new IllegalArgumentException(e);\n+        }\n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        casProperties.getAuthn().getMfa().setSimple(props);\n+\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n+        filterProvider.\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        AuthenticationProperties.class,\n+                        AuthenticationProperties::getMfa))).\n+            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        MultifactorAuthenticationProperties.class,\n+                        MultifactorAuthenticationProperties::getSimple)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final GoogleMfaAuthModuleConf conf) {\n+        final String authModule,\n+        final GoogleMfaAuthModuleConf conf) {\n \n         GoogleAuthenticatorMultifactorProperties props =\n-                new GoogleAuthenticatorMultifactorProperties();\n+            new GoogleAuthenticatorMultifactorProperties();\n         props.setName(authModule);\n         props.getCore().setIssuer(conf.getIssuer());\n         props.getCore().setCodeDigits(conf.getCodeDigits());\n@@ -221,20 +264,20 @@ private static Map<String, Object> mapAuthModule(\n         filterProvider.addFilter(\n                 AuthenticationProperties.class.getSimpleName(),\n                 SimpleBeanPropertyFilter.filterOutAllExcept(\n-                        CasCoreConfigurationUtils.getPropertyName(\n-                                AuthenticationProperties.class,\n-                                AuthenticationProperties::getMfa))).\n-                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        MultifactorAuthenticationProperties.class,\n-                                        MultifactorAuthenticationProperties::getGauth)));\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        AuthenticationProperties.class,\n+                        AuthenticationProperties::getMfa))).\n+            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        MultifactorAuthenticationProperties.class,\n+                        MultifactorAuthenticationProperties::getGauth)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final U2FAuthModuleConf conf) {\n+        final String authModule,\n+        final U2FAuthModuleConf conf) {\n \n         U2FMultifactorAuthenticationProperties props = new U2FMultifactorAuthenticationProperties();\n         props.setName(authModule);\n@@ -248,22 +291,22 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getMfa))).\n-                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        MultifactorAuthenticationProperties.class,\n-                                        MultifactorAuthenticationProperties::getU2f)));\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        AuthenticationProperties.class,\n+                        AuthenticationProperties::getMfa))).\n+            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        MultifactorAuthenticationProperties.class,\n+                        MultifactorAuthenticationProperties::getU2f)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final JaasAuthModuleConf conf) {\n+        final String authModule,\n+        final JaasAuthModuleConf conf) {\n \n         JaasAuthenticationProperties props = new JaasAuthenticationProperties();\n         props.setName(authModule);\n@@ -278,16 +321,16 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                        CasCoreConfigurationUtils.getPropertyName(\n-                                AuthenticationProperties.class,\n-                                AuthenticationProperties::getJaas)));\n+            SimpleBeanPropertyFilter.filterOutAllExcept(\n+                CasCoreConfigurationUtils.getPropertyName(\n+                    AuthenticationProperties.class,\n+                    AuthenticationProperties::getJaas)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final JDBCAuthModuleConf conf) {\n+        final String authModule,\n+        final JDBCAuthModuleConf conf) {\n \n         QueryJdbcAuthenticationProperties props = new QueryJdbcAuthenticationProperties();\n         props.setName(authModule);\n@@ -307,22 +350,22 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getJdbc))).\n-                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        JdbcAuthenticationProperties.class,\n-                                        JdbcAuthenticationProperties::getQuery)));\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        AuthenticationProperties.class,\n+                        AuthenticationProperties::getJdbc))).\n+            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        JdbcAuthenticationProperties.class,\n+                        JdbcAuthenticationProperties::getQuery)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final OIDCAuthModuleConf conf) {\n+        final String authModule,\n+        final OIDCAuthModuleConf conf) {\n \n         Pac4jGenericOidcClientProperties props = new Pac4jGenericOidcClientProperties();\n         props.setId(conf.getId());\n@@ -344,22 +387,22 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getPac4j))).\n-                addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        Pac4jDelegatedAuthenticationProperties.class,\n-                                        Pac4jDelegatedAuthenticationProperties::getOidc)));\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        AuthenticationProperties.class,\n+                        AuthenticationProperties::getPac4j))).\n+            addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        Pac4jDelegatedAuthenticationProperties.class,\n+                        Pac4jDelegatedAuthenticationProperties::getOidc)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final SAML2IdPAuthModuleConf conf) {\n+        final String authModule,\n+        final SAML2IdPAuthModuleConf conf) {\n \n         Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();\n         props.setClientName(authModule);\n@@ -383,24 +426,24 @@ private static Map<String, Object> mapAuthModule(\n         props.setSignatureReferenceDigestMethods(conf.getSignatureReferenceDigestMethods());\n         props.setPrincipalAttributeId(conf.getUserIdAttribute());\n         props.setNameIdPolicyAllowCreate(StringUtils.isBlank(conf.getNameIdPolicyAllowCreate())\n-                ? TriStateBoolean.UNDEFINED\n-                : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n+            ? TriStateBoolean.UNDEFINED\n+            : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n         casProperties.getAuthn().getPac4j().getSaml().add(props);\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getPac4j))).\n-                addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        Pac4jDelegatedAuthenticationProperties.class,\n-                                        Pac4jDelegatedAuthenticationProperties::getSaml)));\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        AuthenticationProperties.class,\n+                        AuthenticationProperties::getPac4j))).\n+            addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(\n+                        Pac4jDelegatedAuthenticationProperties.class,\n+                        Pac4jDelegatedAuthenticationProperties::getSaml)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n@@ -425,9 +468,11 @@ public PropertySource<?> locate(final Environment environment) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(), (StaticAuthModuleConf) authConf));\n             } else if (authConf instanceof SyncopeAuthModuleConf) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(),\n-                        (SyncopeAuthModuleConf) authConf, syncopeClient.getAddress()));\n+                    (SyncopeAuthModuleConf) authConf, syncopeClient.getAddress()));\n             } else if (authConf instanceof GoogleMfaAuthModuleConf) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(), (GoogleMfaAuthModuleConf) authConf));\n+            } else if (authConf instanceof SimpleMfaAuthModuleConf) {\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (SimpleMfaAuthModuleConf) authConf));\n             } else if (authConf instanceof DuoMfaAuthModuleConf) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(), (DuoMfaAuthModuleConf) authConf));\n             } else if (authConf instanceof JaasAuthModuleConf) {\n@@ -444,7 +489,7 @@ public PropertySource<?> locate(final Environment environment) {\n         });\n \n         syncopeClient.getService(WAConfigService.class).list().\n-                forEach(attr -> properties.put(attr.getSchema(), attr.getValues()));\n+            forEach(attr -> properties.put(attr.getSchema(), attr.getValues()));\n         LOG.debug(\"Collected WA properties: {}\", properties);\n         return new MapPropertySource(getClass().getName(), properties);\n     }"},{"sha":"1e212e5e5e2ebdea78ffb1125c89d4018ad5712d","filename":"wa/starter/pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2f5819cc17df83a2c96e9b23a3f4364e8866308/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2f5819cc17df83a2c96e9b23a3f4364e8866308/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=f2f5819cc17df83a2c96e9b23a3f4364e8866308","patch":"@@ -227,6 +227,14 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-u2f-core</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-simple-mfa</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-simple-mfa-core</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-gauth</artifactId>"}]}