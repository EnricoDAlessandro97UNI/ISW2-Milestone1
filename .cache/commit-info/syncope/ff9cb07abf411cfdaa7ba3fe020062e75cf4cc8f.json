{"sha":"ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZmOWNiMDdhYmY0MTFjZmRhYTdiYTNmZTAyMDA2MmU3NWNmNGNjOGY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-11T14:21:17Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-11T14:40:13Z"},"message":"[SYNCOPE-1480] Ensure dynRealms is properly updated","tree":{"sha":"2eb9ec23829d684a4097809a0b13855be8eab9d5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2eb9ec23829d684a4097809a0b13855be8eab9d5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3d9fa5874a30a947d22f91bd897c908f2d9f71a2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3d9fa5874a30a947d22f91bd897c908f2d9f71a2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3d9fa5874a30a947d22f91bd897c908f2d9f71a2"}],"stats":{"total":217,"additions":185,"deletions":32},"files":[{"sha":"e7f42796423646a62d7c0bb092d7c38b10e2b15e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DynRealmDAO.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDynRealmDAO.java?ref=ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","patch":"@@ -34,10 +34,7 @@ public interface DynRealmDAO extends DAO<DynRealm> {\n \n     void delete(String key);\n \n-    void clearDynMembers(DynRealm dynRealm);\n-\n     void refreshDynMemberships(Any<?> any);\n \n     void removeDynMemberships(String anyKey);\n-\n }"},{"sha":"7302d3ee07a6a4f8c76c6a9fd24090bc28754bd0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"modified","additions":59,"deletions":17,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n@@ -34,6 +35,9 @@\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n \n @Repository\n public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO {\n@@ -43,6 +47,15 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO\n     @Autowired\n     private ApplicationEventPublisher publisher;\n \n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     private AnySearchDAO searchDAO;\n \n@@ -66,24 +79,60 @@ public DynRealm save(final DynRealm dynRealm) {\n         return entityManager().merge(dynRealm);\n     }\n \n+    private List<String> clearDynMembers(final DynRealm dynRealm) {\n+        Query find = entityManager().createNativeQuery(\n+                \"SELECT any_id FROM \" + DYNMEMB_TABLE + \" WHERE dynRealm_id=?\");\n+        find.setParameter(1, dynRealm.getKey());\n+\n+        List<String> cleared = new ArrayList<>();\n+        find.getResultList().stream().map(key -> key instanceof Object[]\n+                ? (String) ((Object[]) key)[0]\n+                : ((String) key)).\n+                forEach(key -> cleared.add((String) key));\n+\n+        Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE dynRealm_id=?\");\n+        delete.setParameter(1, dynRealm.getKey());\n+        delete.executeUpdate();\n+\n+        return cleared;\n+    }\n+\n+    private void notifyDynMembershipRemoval(final List<String> anyKeys) {\n+        anyKeys.forEach(key -> {\n+            Any<?> any = userDAO.find(key);\n+            if (any == null) {\n+                any = groupDAO.find(key);\n+            }\n+            if (any == null) {\n+                any = anyObjectDAO.find(key);\n+            }\n+            if (any != null) {\n+                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n+            }\n+        });\n+    }\n+\n     @Override\n     public DynRealm saveAndRefreshDynMemberships(final DynRealm dynRealm) {\n         DynRealm merged = save(dynRealm);\n \n         // refresh dynamic memberships\n-        clearDynMembers(merged);\n+        List<String> cleared = clearDynMembers(merged);\n \n         merged.getDynMemberships().stream().map(memb -> searchDAO.search(\n                 SearchCondConverter.convert(memb.getFIQLCond()), memb.getAnyType().getKind())).\n                 forEach(matching -> matching.forEach(any -> {\n-                    Query insert = entityManager().createNativeQuery(\n-                            \"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n-                    insert.setParameter(1, any.getKey());\n-                    insert.setParameter(2, merged.getKey());\n-                    insert.executeUpdate();\n \n-                    publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n-                }));\n+            Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n+            insert.setParameter(1, any.getKey());\n+            insert.setParameter(2, merged.getKey());\n+            insert.executeUpdate();\n+\n+            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n+            cleared.remove(any.getKey());\n+        }));\n+\n+        notifyDynMembershipRemoval(cleared);\n \n         return merged;\n     }\n@@ -95,26 +144,19 @@ public void delete(final String key) {\n             return;\n         }\n \n-        clearDynMembers(dynRealm);\n+        notifyDynMembershipRemoval(clearDynMembers(dynRealm));\n \n         entityManager().remove(dynRealm);\n     }\n \n-    @Override\n-    public void clearDynMembers(final DynRealm dynRealm) {\n-        Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE dynRealm_id=?\");\n-        delete.setParameter(1, dynRealm.getKey());\n-        delete.executeUpdate();\n-    }\n-\n     @Transactional\n     @Override\n     public void refreshDynMemberships(final Any<?> any) {\n         findAll().forEach(dynRealm -> dynRealm.getDynMembership(any.getType()).ifPresent(memb -> {\n             boolean matches = anyMatchDAO.matches(any, SearchCondConverter.convert(memb.getFIQLCond()));\n \n             Query find = entityManager().createNativeQuery(\n-                    \"SELECT dynRealm_id FROM \" + JPADynRealmDAO.DYNMEMB_TABLE + \" WHERE any_id=?\");\n+                    \"SELECT dynRealm_id FROM \" + DYNMEMB_TABLE + \" WHERE any_id=?\");\n             find.setParameter(1, any.getKey());\n             boolean existing = !find.getResultList().isEmpty();\n "},{"sha":"7e45b0d4e5a22bd38af499a2ab95e4708916bcc5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n@@ -38,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -213,16 +213,14 @@ public void deleteMapping(final String intAttrName) {\n                 + \" m WHERE m.intAttrName=:intAttrName\", MappingItem.class);\n         query.setParameter(\"intAttrName\", intAttrName);\n \n-        Set<String> itemKeys = new HashSet<>();\n-        query.getResultList().forEach(item -> itemKeys.add(item.getKey()));\n-        itemKeys.stream().map(itemKey -> entityManager().find(JPAMappingItem.class, itemKey)).\n-                filter(Objects::nonNull).map(item -> {\n-            item.getMapping().getItems().remove(item);\n-            return item;\n-        }).map(item -> {\n-            item.setMapping(null);\n-            return item;\n-        }).forEachOrdered(item -> entityManager().remove(item));\n+        query.getResultList().stream().\n+                map(Entity::getKey).\n+                map(itemKey -> entityManager().find(JPAMappingItem.class, itemKey)).filter(Objects::nonNull).\n+                forEach(item -> {\n+                    item.getMapping().getItems().remove(item);\n+                    item.setMapping(null);\n+                    entityManager().remove(item);\n+                });\n \n         // Make empty query cache for *MappingItem and related *Mapping\n         entityManager().getEntityManagerFactory().getCache().evict(JPAMappingItem.class);"},{"sha":"0f00911fa586fb65bba9ee570c3542505707b1e2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DynRealmDataBinderImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java?ref=ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","patch":"@@ -85,7 +85,6 @@ public DynRealm update(final DynRealm toBeUpdated, final DynRealmTO dynRealmTO)\n             memb.setDynRealm(null);\n             itor.remove();\n         }\n-        dynRealmDAO.clearDynMembers(dynRealm);\n \n         dynRealmTO.getDynMembershipConds().forEach((type, fiql) -> {\n             AnyType anyType = anyTypeDAO.find(type);"},{"sha":"d46c33fc11042afc0fd4ed881f5ec8729b776614","filename":"fit/core-reference/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","patch":"@@ -203,6 +203,11 @@ under the License.\n       <artifactId>spring-test</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.jetty</groupId>\n+      <artifactId>jetty-client</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.junit.jupiter</groupId>\n       <artifactId>junit-jupiter</artifactId>"},{"sha":"2a0e71bf15a5158e2186bfba1624ad64ad9b0816","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","patch":"@@ -24,7 +24,10 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -34,6 +37,7 @@\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -50,10 +54,19 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.ElasticsearchDetector;\n+import org.apache.tika.io.IOUtils;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.InputStreamContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n import org.junit.jupiter.api.Test;\n \n public class DynRealmITCase extends AbstractITCase {\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n     @Test\n     public void misc() {\n         DynRealmTO dynRealm = null;\n@@ -211,4 +224,97 @@ public void delegatedAdmin() {\n             }\n         }\n     }\n+\n+    private ArrayNode fetchDynRealmsFromElasticsearch(final String userKey) throws Exception {\n+        String body =\n+                \"{\"\n+                + \"    \\\"query\\\": {\"\n+                + \"        \\\"match\\\": {\\\"_id\\\": \\\"\" + userKey + \"\\\"}\"\n+                + \"    }\"\n+                + \"}\";\n+\n+        HttpClient httpClient = new HttpClient();\n+        httpClient.start();\n+        ContentResponse response = httpClient.newRequest(\"http://localhost:9200/master_user/_search\").\n+                method(HttpMethod.GET).\n+                header(HttpHeader.CONTENT_TYPE, MediaType.APPLICATION_JSON).\n+                content(new InputStreamContentProvider(IOUtils.toInputStream(body))).\n+                send();\n+        assertEquals(HttpStatus.OK_200, response.getStatus());\n+\n+        return (ArrayNode) MAPPER.readTree(response.getContent()).\n+                get(\"hits\").get(\"hits\").get(0).get(\"_source\").get(\"dynRealms\");\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE1480() throws Exception {\n+        String ctype = getUUIDString();\n+\n+        DynRealmTO dynRealm = null;\n+        try {\n+            // 1. create new dyn realm matching a very specific attribute value\n+            dynRealm = new DynRealmTO();\n+            dynRealm.setKey(\"name\" + getUUIDString());\n+            dynRealm.getDynMembershipConds().put(AnyTypeKind.USER.name(), \"ctype==\" + ctype);\n+            dynRealmService.create(dynRealm);\n+\n+            Response response = dynRealmService.create(dynRealm);\n+            dynRealm = getObject(response.getLocation(), DynRealmService.class, DynRealmTO.class);\n+            assertNotNull(dynRealm);\n+\n+            // 2. no dyn realm members\n+            PagedResult<UserTO> matching = userService.search(new AnyQuery.Builder().realm(\"/\").fiql(\n+                    SyncopeClient.getUserSearchConditionBuilder().inDynRealms(dynRealm.getKey()).query()).build());\n+            assertEquals(0, matching.getSize());\n+\n+            // 3. create user with that attribute value\n+            UserCR userCR = UserITCase.getUniqueSample(\"syncope1480@syncope.apache.org\");\n+            userCR.getPlainAttr(\"ctype\").get().getValues().set(0, ctype);\n+            UserTO user = createUser(userCR).getEntity();\n+            assertNotNull(user.getKey());\n+\n+            // 4a. check that Elasticsearch index was updated correctly\n+            if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+                try {\n+                    Thread.sleep(2000);\n+                } catch (InterruptedException ex) {\n+                    // ignore\n+                }\n+\n+                ArrayNode dynRealms = fetchDynRealmsFromElasticsearch(user.getKey());\n+                assertEquals(1, dynRealms.size());\n+                assertEquals(dynRealm.getKey(), dynRealms.get(0).asText());\n+            }\n+\n+            // 4b. now there is 1 realm member\n+            matching = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).fiql(\n+                    SyncopeClient.getUserSearchConditionBuilder().inDynRealms(dynRealm.getKey()).query()).build());\n+            assertEquals(1, matching.getSize());\n+\n+            // 5. change dyn realm condition\n+            dynRealm.getDynMembershipConds().put(AnyTypeKind.USER.name(), \"ctype==ANY\");\n+            dynRealmService.update(dynRealm);\n+\n+            // 6a. check that Elasticsearch index was updated correctly\n+            if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+                try {\n+                    Thread.sleep(2000);\n+                } catch (InterruptedException ex) {\n+                    // ignore\n+                }\n+\n+                ArrayNode dynRealms = fetchDynRealmsFromElasticsearch(user.getKey());\n+                assertTrue(dynRealms.isEmpty());\n+            }\n+\n+            // 6b. no more dyn realm members\n+            matching = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).fiql(\n+                    SyncopeClient.getUserSearchConditionBuilder().inDynRealms(dynRealm.getKey()).query()).build());\n+            assertEquals(0, matching.getSize());\n+        } finally {\n+            if (dynRealm != null) {\n+                dynRealmService.delete(dynRealm.getKey());\n+            }\n+        }\n+    }\n }"},{"sha":"b6d24e6e61b47b9889332a205a4a1c8660413aa8","filename":"pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=ff9cb07abf411cfdaa7ba3fe020062e75cf4cc8f","patch":"@@ -1805,6 +1805,12 @@ under the License.\n         <version>1.62</version>\n         <scope>test</scope>\n       </dependency>\n+      <dependency>\n+        <groupId>org.eclipse.jetty</groupId>\n+        <artifactId>jetty-client</artifactId>\n+        <version>9.4.20.v20190813</version>\n+        <scope>test</scope>\n+      </dependency>\n       <dependency>\n         <groupId>org.springframework</groupId>\n         <artifactId>spring-test</artifactId>"}]}