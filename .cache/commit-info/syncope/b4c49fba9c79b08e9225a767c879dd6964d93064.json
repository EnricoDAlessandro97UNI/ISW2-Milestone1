{"sha":"b4c49fba9c79b08e9225a767c879dd6964d93064","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI0YzQ5ZmJhOWM3OWIwOGU5MjI1YTc2N2M4NzlkZDY5NjRkOTMwNjQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-06T14:07:41Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-06T14:07:41Z"},"message":"Various (small and big) bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246428 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"365bcec835856b6a515abcc1bb5f592d400be384","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/365bcec835856b6a515abcc1bb5f592d400be384"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b4c49fba9c79b08e9225a767c879dd6964d93064","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4c49fba9c79b08e9225a767c879dd6964d93064","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b4c49fba9c79b08e9225a767c879dd6964d93064","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4c49fba9c79b08e9225a767c879dd6964d93064/comments","author":null,"committer":null,"parents":[{"sha":"a1a96c6b2d15625f7973fd3fb9c7def8a34abfb5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1a96c6b2d15625f7973fd3fb9c7def8a34abfb5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a1a96c6b2d15625f7973fd3fb9c7def8a34abfb5"}],"stats":{"total":251,"additions":139,"deletions":112},"files":[{"sha":"921c7039b0794236dbaf135732c5ef9ca3a5cc61","filename":"client/src/main/java/org/syncope/client/to/AbstractAttributableTO.java","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -17,8 +17,6 @@\n import java.util.HashSet;\n import java.util.Set;\n import org.syncope.client.AbstractBaseBean;\n-import org.syncope.client.mod.AbstractAttributableMod;\n-import org.syncope.client.mod.AttributeMod;\n \n public abstract class AbstractAttributableTO extends AbstractBaseBean {\n \n@@ -88,27 +86,4 @@ public Set<String> getResources() {\n     public void setResources(Set<String> resources) {\n         this.resources = resources;\n     }\n-\n-    protected <T extends AbstractAttributableMod> T fillAbstractAttributableMod(\n-            T attributableMod) {\n-\n-        attributableMod.setId(id);\n-\n-        AttributeMod attributeMod = null;\n-        for (AttributeTO attributeTO : attributes) {\n-            attributeMod = new AttributeMod();\n-            attributeMod.setSchema(attributeTO.getSchema());\n-            attributeMod.setValuesToBeAdded(attributeTO.getValues());\n-\n-            attributableMod.addAttributeToBeUpdated(attributeMod);\n-        }\n-        for (AttributeTO derivedAttributeTO : derivedAttributes) {\n-            attributableMod.addDerivedAttributeToBeAdded(\n-                    derivedAttributeTO.getSchema());\n-        }\n-\n-        attributableMod.setResourcesToBeAdded(resources);\n-\n-        return attributableMod;\n-    }\n }"},{"sha":"99d0c7aa3892a4fb859adfda61d05e3c1b79a0aa","filename":"client/src/main/java/org/syncope/client/to/UserTO.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -17,8 +17,6 @@\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n-import org.syncope.client.mod.MembershipMod;\n-import org.syncope.client.mod.UserMod;\n \n public class UserTO extends AbstractAttributableTO {\n \n@@ -90,22 +88,4 @@ public Date getTokenExpireTime() {\n     public void setTokenExpireTime(Date tokenExpireTime) {\n         this.tokenExpireTime = tokenExpireTime;\n     }\n-\n-    public UserMod buildUserMod() {\n-        UserMod userMod = new UserMod();\n-        userMod.setPassword(password);\n-        userMod = fillAbstractAttributableMod(userMod);\n-\n-        MembershipMod membershipMod = null;\n-        for (MembershipTO membershipTO : memberships) {\n-            membershipMod = new MembershipMod();\n-            membershipMod.setRole(membershipTO.getRole());\n-            membershipMod =\n-                    membershipTO.fillAbstractAttributableMod(membershipMod);\n-\n-            userMod.addMembershipMod(membershipMod);\n-        }\n-\n-        return userMod;\n-    }\n }"},{"sha":"7c92410653e4c92be912c77477753d245bb2ab0e","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceBeansLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -96,7 +96,7 @@ public void contextInitialized(ServletContextEvent sce) {\n                 }\n \n             } catch (Throwable t) {\n-                log.error(\"While loading default content\", t);\n+                log.error(\"While loading bundles\", t);\n             }\n         }\n     }"},{"sha":"1df2a3b191ae4ee8a752c6491747f8018cac5cd1","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -115,8 +115,11 @@ public Set<SyncopeRole> getRoles() {\n     }\n \n     public String getPassword() {\n-        String result = null;\n+        if (password == null || passwordKeyPair == null) {\n+            return null;\n+        }\n \n+        String result = null;\n         try {\n             KeyPair kp = AsymmetricCipher.deserializeKeyPair(passwordKeyPair);\n             result = new String(AsymmetricCipher.decrypt(password,\n@@ -133,6 +136,12 @@ public String getPassword() {\n      * @param password\n      */\n     public void setPassword(String password) {\n+        if (password == null) {\n+            this.password = null;\n+            this.passwordKeyPair = null;\n+            return;\n+        }\n+\n         try {\n             KeyPair kp = AsymmetricCipher.generateKeyPair();\n             this.password = AsymmetricCipher.encrypt(password.getBytes(),"},{"sha":"b47027cf5256167773b4e2861b6a57c634441525","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeValueDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -23,7 +23,7 @@ public interface AttributeValueDAO extends DAO {\n \n     <T extends AbstractAttributeValue> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractAttributeValue> boolean existingAttributeValue(\n+    <T extends AbstractAttributeValue> boolean nonUniqueAttributeValue(\n             T attributeValue);\n \n     <T extends AbstractAttributeValue> T save(T attributeValue);"},{"sha":"e4525a965833d05fa3e547cc5d482556ffeea399","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeValueDAOImpl.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -33,23 +33,26 @@ public <T extends AbstractAttributeValue> T find(\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> boolean existingAttributeValue(\n+    public <T extends AbstractAttributeValue> boolean nonUniqueAttributeValue(\n             T attributeValue) {\n \n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM \" + attributeValue.getClass().getSimpleName()\n-                + \" e WHERE (e.stringValue IS NOT NULL AND e.stringValue = :stringValue)\"\n+                \"SELECT DISTINCT e FROM \" + attributeValue.getClass().getSimpleName()\n+                + \" e WHERE e.attribute.schema = :schema AND \"\n+                + \" ((e.stringValue IS NOT NULL AND e.stringValue = :stringValue)\"\n                 + \" OR (e.booleanValue IS NOT NULL AND e.booleanValue = :booleanValue)\"\n                 + \" OR (e.dateValue IS NOT NULL AND e.dateValue = :dateValue)\"\n                 + \" OR (e.longValue IS NOT NULL AND e.longValue = :longValue)\"\n-                + \" OR (e.doubleValue IS NOT NULL AND e.doubleValue = :doubleValue)\");\n+                + \" OR (e.doubleValue IS NOT NULL AND e.doubleValue = :doubleValue))\");\n+\n+        query.setParameter(\"schema\", attributeValue.getAttribute().getSchema());\n         query.setParameter(\"stringValue\", attributeValue.getStringValue());\n         query.setParameter(\"booleanValue\", attributeValue.getBooleanValue());\n         query.setParameter(\"dateValue\", attributeValue.getDateValue());\n         query.setParameter(\"longValue\", attributeValue.getLongValue());\n         query.setParameter(\"doubleValue\", attributeValue.getDoubleValue());\n \n-        return !query.getResultList().isEmpty();\n+        return query.getResultList().size() > 1;\n     }\n \n     @Override"},{"sha":"42ba093d34ddec841a3f67bab550c092ad743237","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedSchemaDAOImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -77,6 +77,7 @@ public <T extends AbstractDerivedSchema> void delete(String name,\n             derivedAttributeDAO.delete(derivedAttribute.getId(),\n                     derivedAttribute.getClass());\n         }\n+        derivedSchema.setDerivedAttributes(Collections.EMPTY_SET);\n \n         entityManager.remove(derivedSchema);\n     }"},{"sha":"7d3f1f77c666778aa79156c8ee2971513096e67a","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":40,"deletions":19,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -15,8 +15,10 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import com.opensymphony.workflow.InvalidActionException;\n import com.opensymphony.workflow.Workflow;\n import com.opensymphony.workflow.WorkflowException;\n+import com.opensymphony.workflow.loader.ActionDescriptor;\n import com.opensymphony.workflow.loader.WorkflowDescriptor;\n import com.opensymphony.workflow.spi.Step;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -91,19 +93,27 @@ private Integer findWorkflowAction(Long workflowEntryId,\n             }\n         }\n \n+        Map<Integer, ActionDescriptor> commonActions =\n+                workflowDescriptor.getCommonActions();\n+        for (Integer actionNumber : commonActions.keySet()) {\n+            if (actionName.equals(commonActions.get(actionNumber).getName())) {\n+                actionId = actionNumber;\n+            }\n+        }\n+\n         return actionId;\n     }\n \n-    public SyncopeUser doExecuteAction(String actionName, UserTO userTO,\n+    public SyncopeUser doExecuteAction(String actionName, Long userId,\n             Map<String, Object> moreInputs)\n             throws WorkflowException, NotFoundException {\n \n-        SyncopeUser syncopeUser = syncopeUserDAO.find(userTO.getId());\n+        SyncopeUser syncopeUser = syncopeUserDAO.find(userId);\n \n         if (syncopeUser == null) {\n-            log.error(\"Could not find user '\" + userTO.getId() + \"'\");\n+            log.error(\"Could not find user '\" + userId + \"'\");\n \n-            throw new NotFoundException(String.valueOf(userTO.getId()));\n+            throw new NotFoundException(String.valueOf(userId));\n         }\n \n         Map<String, Object> inputs = new HashMap<String, Object>();\n@@ -118,8 +128,12 @@ public SyncopeUser doExecuteAction(String actionName, UserTO userTO,\n             throw new NotFoundException(actionName);\n         }\n \n-        userWorkflow.doAction(syncopeUser.getWorkflowEntryId(),\n-                actionId, inputs);\n+        try {\n+            userWorkflow.doAction(syncopeUser.getWorkflowEntryId(),\n+                    actionId, inputs);\n+        } catch (InvalidActionException e) {\n+            throw new WorkflowException(e);\n+        }\n \n         return syncopeUserDAO.save(syncopeUser);\n     }\n@@ -132,7 +146,7 @@ public UserTO executeAction(HttpServletResponse response,\n             throws WorkflowException, NotFoundException {\n \n         return userDataBinder.getUserTO(\n-                doExecuteAction(actionName, userTO, null), userWorkflow);\n+                doExecuteAction(actionName, userTO.getId(), null), userWorkflow);\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n@@ -141,7 +155,7 @@ public UserTO activate(@RequestBody UserTO userTO)\n             throws WorkflowException, NotFoundException {\n \n         return userDataBinder.getUserTO(\n-                doExecuteAction(Constants.ACTION_ACTIVATE, userTO,\n+                doExecuteAction(Constants.ACTION_ACTIVATE, userTO.getId(),\n                 Collections.singletonMap(Constants.TOKEN,\n                 (Object) userTO.getToken())), userWorkflow);\n     }\n@@ -154,7 +168,8 @@ public UserTO generateToken(@PathVariable(\"userId\") Long userId)\n         UserTO userTO = new UserTO();\n         userTO.setId(userId);\n         return userDataBinder.getUserTO(\n-                doExecuteAction(Constants.ACTION_GENERATE_TOKEN, userTO, null),\n+                doExecuteAction(Constants.ACTION_GENERATE_TOKEN,\n+                userTO.getId(), null),\n                 userWorkflow);\n     }\n \n@@ -164,7 +179,7 @@ public UserTO verifyToken(@RequestBody UserTO userTO)\n             throws WorkflowException, NotFoundException {\n \n         return userDataBinder.getUserTO(\n-                doExecuteAction(Constants.ACTION_VERIFY_TOKEN, userTO,\n+                doExecuteAction(Constants.ACTION_VERIFY_TOKEN, userTO.getId(),\n                 Collections.singletonMap(Constants.TOKEN,\n                 (Object) userTO.getToken())),\n                 userWorkflow);\n@@ -319,6 +334,10 @@ public UserTO create(HttpServletResponse response,\n                     + \"\\n\" + syncRoles + \"\\n\" + syncResources);\n         }\n \n+        // By default, ignore id in UserTO:\n+        // set it explicitely in case of overwrite\n+        userTO.setId(0);\n+\n         WorkflowInitException wie = null;\n         Long workflowId = null;\n         try {\n@@ -336,21 +355,18 @@ public UserTO create(HttpServletResponse response,\n \n         if (wie != null) {\n             switch (wie.getExceptionOperation()) {\n+\n                 case OVERWRITE:\n                     Integer resetActionId = findWorkflowAction(\n                             wie.getWorkflowEntryId(), Constants.ACTION_RESET);\n                     if (resetActionId != null) {\n-                        UserTO localUserTO = new UserTO();\n-                        localUserTO.setId(wie.getSyncopeUserId());\n-\n                         doExecuteAction(Constants.ACTION_RESET,\n-                                localUserTO, null);\n+                                wie.getSyncopeUserId(), null);\n                     }\n \n-                    UserMod overwriteMod = userTO.buildUserMod();\n-                    overwriteMod.setId(wie.getSyncopeUserId());\n+                    userTO.setId(wie.getSyncopeUserId());\n+                    break;\n \n-                    return update(overwriteMod, syncRoles, syncResources);\n                 case REJECT:\n                     SyncopeClientCompositeErrorException compositeException =\n                             new SyncopeClientCompositeErrorException(\n@@ -371,6 +387,9 @@ public UserTO create(HttpServletResponse response,\n         syncopeUser.setCreationTime(new Date());\n         syncopeUser = syncopeUserDAO.save(syncopeUser);\n \n+        // Check if attributes with unique schema have unique values\n+        userDataBinder.checkUniqueness(syncopeUser);\n+\n         // Now that user is created locally, let's propagate\n         Set<String> syncResourceNames =\n                 getSyncResourceNames(syncopeUser, syncRoles, syncResources);\n@@ -414,7 +433,6 @@ public UserTO update(@RequestBody UserMod userMod,\n         }\n \n         SyncopeUser syncopeUser = syncopeUserDAO.find(userMod.getId());\n-\n         if (syncopeUser == null) {\n             log.error(\"Could not find user '\" + userMod.getId() + \"'\");\n \n@@ -423,13 +441,16 @@ public UserTO update(@RequestBody UserMod userMod,\n \n         // First of all, let's check if update is allowed\n         syncopeUser = doExecuteAction(Constants.ACTION_UPDATE,\n-                userDataBinder.getUserTO(syncopeUser, userWorkflow), null);\n+                syncopeUser.getId(), null);\n \n         // Update user with provided userMod\n         ResourceOperations resourceOperations =\n                 userDataBinder.updateSyncopeUser(syncopeUser, userMod);\n         syncopeUser = syncopeUserDAO.save(syncopeUser);\n \n+        // Check if attributes with unique schema have unique values\n+        userDataBinder.checkUniqueness(syncopeUser);\n+\n         // Now that user is update locally, let's propagate\n         Set<String> syncResourceNames =\n                 getSyncResourceNames(syncopeUser, syncRoles, syncResources);"},{"sha":"0c7ff69b570c58d66bcac483f8a259b1582fecd8","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":39,"deletions":27,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -21,6 +21,7 @@\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n import org.syncope.client.mod.AbstractAttributableMod;\n import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.to.AbstractAttributableTO;\n@@ -119,8 +120,7 @@ private void fillAttribute(Set<String> values,\n             AbstractSchema schema,\n             AbstractAttribute attribute,\n             AbstractAttributeValue attributeValue,\n-            SyncopeClientException invalidValues,\n-            SyncopeClientException invalidUniques) {\n+            SyncopeClientException invalidValues) {\n \n         // if the schema is multivale, all values are considered for\n         // addition, otherwise only the fist one - if provided - is\n@@ -144,19 +144,6 @@ private void fillAttribute(Set<String> values,\n \n                 invalidValues.addElement(value);\n             }\n-\n-            // if the schema is uniquevalue, check the uniqueness\n-            if (schema.isUniquevalue()\n-                    && attributeValueDAO.existingAttributeValue(\n-                    attributeValue)) {\n-\n-                log.error(\"Unique value schema \" + schema.getName()\n-                        + \" with no unique value: \"\n-                        + attributeValue.getValueAsString());\n-\n-                invalidUniques.addElement(schema.getName());\n-                attribute.setAttributeValues(Collections.EMPTY_LIST);\n-            }\n         }\n     }\n \n@@ -196,8 +183,6 @@ protected ResourceOperations fill(\n \n         SyncopeClientException invalidValues = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidValues);\n-        SyncopeClientException invalidUniques = new SyncopeClientException(\n-                SyncopeClientExceptionType.InvalidUniques);\n \n         // 1. attributes to be updated\n         AbstractSchema schema = null;\n@@ -248,7 +233,7 @@ protected ResourceOperations fill(\n                 // 1.2 add values\n                 fillAttribute(attributeMod.getValuesToBeAdded(),\n                         attributableUtil, schema, attribute,\n-                        attributeValue, invalidValues, invalidUniques);\n+                        attributeValue, invalidValues);\n \n                 // if no values are in, the attribute can be saely removed\n                 if (attribute.getAttributeValues().isEmpty()) {\n@@ -287,9 +272,6 @@ protected ResourceOperations fill(\n         if (!invalidValues.getElements().isEmpty()) {\n             compositeErrorException.addException(invalidValues);\n         }\n-        if (!invalidUniques.getElements().isEmpty()) {\n-            compositeErrorException.addException(invalidUniques);\n-        }\n \n         SyncopeClientException requiredValuesMissing =\n                 checkMandatory(attributableUtil.getSchemaClass(), attributable);\n@@ -405,8 +387,6 @@ protected AbstractAttributable fill(AbstractAttributable attributable,\n         // 1. attributes\n         SyncopeClientException invalidValues = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidValues);\n-        SyncopeClientException invalidUniques = new SyncopeClientException(\n-                SyncopeClientExceptionType.InvalidUniques);\n \n         AbstractSchema schema = null;\n         AbstractAttribute attribute = null;\n@@ -421,7 +401,7 @@ protected AbstractAttributable fill(AbstractAttributable attributable,\n \n                 fillAttribute(attributeTO.getValues(),\n                         attributableUtil, schema, attribute,\n-                        attributeValue, invalidValues, invalidUniques);\n+                        attributeValue, invalidValues);\n \n                 if (!attribute.getAttributeValues().isEmpty()) {\n                     attributable.addAttribute(attribute);\n@@ -433,9 +413,6 @@ protected AbstractAttributable fill(AbstractAttributable attributable,\n         if (!invalidValues.getElements().isEmpty()) {\n             compositeErrorException.addException(invalidValues);\n         }\n-        if (!invalidUniques.getElements().isEmpty()) {\n-            compositeErrorException.addException(invalidUniques);\n-        }\n \n         SyncopeClientException requiredValuesMissing =\n                 checkMandatory(attributableUtil.getSchemaClass(), attributable);\n@@ -524,4 +501,39 @@ protected AbstractAttributableTO fillTO(\n \n         return abstractAttributableTO;\n     }\n+\n+    public void checkUniqueness(AbstractAttributable attributable)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeClientException invalidUniques = new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidUniques);\n+\n+        for (AbstractAttribute attribute : attributable.getAttributes()) {\n+\n+            for (AbstractAttributeValue attributeValue :\n+                    attribute.getAttributeValues()) {\n+\n+                if (attribute.getSchema().isUniquevalue()\n+                        && attributeValueDAO.nonUniqueAttributeValue(\n+                        attributeValue)) {\n+\n+                    log.error(\"Unique value schema \"\n+                            + attribute.getSchema().getName()\n+                            + \" with no unique value: \"\n+                            + attributeValue.getValueAsString());\n+\n+                    invalidUniques.addElement(attribute.getSchema().getName());\n+                }\n+            }\n+        }\n+\n+        if (!invalidUniques.getElements().isEmpty()) {\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+            scce.addException(invalidUniques);\n+\n+            throw scce;\n+        }\n+    }\n }"},{"sha":"1dfd40618ed3b6a746c777eefd34dd2e127d11a8","filename":"core/src/main/java/org/syncope/core/rest/data/ConnectorInstanceDataBinder.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -22,7 +22,6 @@\n import java.net.URLDecoder;\n import java.net.URLEncoder;\n import java.util.Set;\n-import java.util.logging.Level;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -146,11 +145,12 @@ public ConnectorInstance updateConnectorInstance(\n         }\n \n         try {\n-            log.error(URLEncoder.encode(serializeToXML(connectorTO.getConfiguration()), \"UTF-8\"));\n+            log.error(URLEncoder.encode(\n+                    serializeToXML(connectorTO.getConfiguration()), \"UTF-8\"));\n             // Throw composite exception if there is at least one element set\n             // in the composing exceptions\n         } catch (UnsupportedEncodingException ex) {\n-            java.util.logging.Logger.getLogger(ConnectorInstanceDataBinder.class.getName()).log(Level.SEVERE, null, ex);\n+            log.error(\"Unexpected exception\", ex);\n         }\n \n         // Throw composite exception if there is at least one element set\n@@ -167,7 +167,9 @@ public ConnectorInstance updateConnectorInstance(\n         return connectorInstance;\n     }\n \n-    public ConnectorInstanceTO getConnectorInstanceTO(ConnectorInstance connectorInstance) {\n+    public ConnectorInstanceTO getConnectorInstanceTO(\n+            ConnectorInstance connectorInstance) {\n+        \n         ConnectorInstanceTO connectorInstanceTO =\n                 new ConnectorInstanceTO();\n \n@@ -195,7 +197,6 @@ public static String serializeToXML(Object obj) {\n             String res = tokenContentOS.toString();\n \n             return URLEncoder.encode(res, \"UTF-8\");\n-\n         } catch (Throwable t) {\n             if (log.isInfoEnabled()) {\n                 log.info(\"Exception during connector serialization\", t);"},{"sha":"3ee4879258c3dd7c94ea2a52d2a51c3a76711f6f","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -17,6 +17,7 @@\n import com.opensymphony.workflow.Workflow;\n import com.opensymphony.workflow.spi.Step;\n import java.util.List;\n+import javassist.NotFoundException;\n import javax.persistence.EntityNotFoundException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n@@ -68,14 +69,26 @@ public UserDataBinder(SchemaDAO schemaDAO,\n     }\n \n     public SyncopeUser createSyncopeUser(UserTO userTO)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        SyncopeUser syncopeUser = new SyncopeUser();\n+            throws SyncopeClientCompositeErrorException, NotFoundException {\n \n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n+        // Check if UserTO has a valued id: if so,\n+        // try to read the user from the db\n+        SyncopeUser syncopeUser = null;\n+        if (userTO.getId() == 0) {\n+            syncopeUser = new SyncopeUser();\n+        } else {\n+            syncopeUser = syncopeUserDAO.find(userTO.getId());\n+            if (syncopeUser == null) {\n+                log.error(\"Could not find user '\" + userTO.getId() + \"'\");\n+\n+                throw new NotFoundException(String.valueOf(userTO.getId()));\n+            }\n+        }\n+\n         // password\n         // TODO: check password policies\n         SyncopeClientException invalidPassword = new SyncopeClientException(\n@@ -109,9 +122,10 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n                             + membershipTO.getRole());\n                 }\n             } else {\n-                Membership membership = new Membership();\n-                membership.setSyncopeRole(role);\n-                membership.setSyncopeUser(syncopeUser);\n+                Membership membership = membershipDAO.find(syncopeUser, role);\n+                if (membership != null) {\n+                    membershipDAO.delete(membership.getId());\n+                }\n \n                 membership = (Membership) fill(membership, membershipTO,\n                         AttributableUtil.MEMBERSHIP, scce);\n@@ -195,8 +209,9 @@ public UserTO getUserTO(SyncopeUser user, Workflow userWorkflow) {\n         userTO = (UserTO) fillTO(userTO, user.getAttributes(),\n                 user.getDerivedAttributes(), user.getResources());\n \n-        MembershipTO membershipTO = new MembershipTO();\n+        MembershipTO membershipTO = null;\n         for (Membership membership : user.getMemberships()) {\n+            membershipTO = new MembershipTO();\n             membershipTO.setId(membership.getId());\n             membershipTO.setRole(membership.getSyncopeRole().getId());\n "},{"sha":"4984674ebe5f673a82523f8f5025107dddc0bf8c","filename":"core/src/main/java/org/syncope/core/workflow/EmptyUser.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -45,6 +45,7 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n         for (AbstractAttribute attribute : syncopeUser.getAttributes()) {\n             attributeDAO.delete(attribute.getId(), UserAttribute.class);\n         }\n+        syncopeUser.getAttributes().clear();\n \n         DerivedAttributeDAO derivedAttributeDAO =\n                 (DerivedAttributeDAO) context.getBean(\n@@ -55,12 +56,17 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n             derivedAttributeDAO.delete(derivedAttribute.getId(),\n                     UserDerivedAttribute.class);\n         }\n+        syncopeUser.getDerivedAttributes().clear();\n \n         MembershipDAO membershipDAO =\n                 (MembershipDAO) context.getBean(\"membershipDAOImpl\");\n         for (Membership membership : syncopeUser.getMemberships()) {\n             membershipDAO.delete(membership.getId());\n         }\n+        syncopeUser.getMemberships().clear();\n+\n+        syncopeUser.setCreationTime(null);\n+        syncopeUser.setPassword(null);\n \n         transientVars.put(Constants.SYNCOPE_USER, syncopeUser);\n     }"},{"sha":"c6e29adbf9f5ef07fb2500adba45cea04bd224c6","filename":"core/src/main/resources/org/syncope/core/persistence/db.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4c49fba9c79b08e9225a767c879dd6964d93064/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties?ref=b4c49fba9c79b08e9225a767c879dd6964d93064","patch":"@@ -10,8 +10,12 @@\n #  See the License for the specific language governing permissions and\n #  limitations under the License.\n hibernate.connection.driver_class=org.postgresql.Driver\n+#hibernate.connection.driver_class=oracle.jdbc.driver.OracleDriver\n hibernate.connection.url=jdbc:postgresql://localhost:5432/syncope\n+#hibernate.connection.url=jdbc:oracle:thin:@localhost:<1521>:syncope\n hibernate.connection.username=syncope\n hibernate.connection.password=syncope\n hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n-dbUnitDataTypeFactory=org.dbunit.ext.postgresql.PostgresqlDataTypeFactory\n\\ No newline at end of file\n+#hibernate.dialect=org.hibernate.dialect.OracleDialect\n+dbUnitDataTypeFactory=org.dbunit.ext.postgresql.PostgresqlDataTypeFactory\n+#dbUnitDataTypeFactory=org.dbunit.ext.oracle.Oracle10DataTypeFactory"}]}