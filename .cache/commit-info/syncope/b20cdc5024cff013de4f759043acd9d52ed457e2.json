{"sha":"b20cdc5024cff013de4f759043acd9d52ed457e2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIyMGNkYzUwMjRjZmYwMTNkZTRmNzU5MDQzYWNkOWQ1MmVkNDU3ZTI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-22T16:24:37Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-22T16:24:37Z"},"message":"Upgrading Camel","tree":{"sha":"4f01f064c61f0068d4b6883a1b34748c80bc64e5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4f01f064c61f0068d4b6883a1b34748c80bc64e5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b20cdc5024cff013de4f759043acd9d52ed457e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b20cdc5024cff013de4f759043acd9d52ed457e2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b20cdc5024cff013de4f759043acd9d52ed457e2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b20cdc5024cff013de4f759043acd9d52ed457e2/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a9ac69e9846d094974ed926cd6f3dffd2991a537","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a9ac69e9846d094974ed926cd6f3dffd2991a537","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a9ac69e9846d094974ed926cd6f3dffd2991a537"}],"stats":{"total":108,"additions":39,"deletions":69},"files":[{"sha":"67a0ae7a96e512d5ae68739d29971b35ba8d2c6a","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelRouteLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20cdc5024cff013de4f759043acd9d52ed457e2/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20cdc5024cff013de4f759043acd9d52ed457e2/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java?ref=b20cdc5024cff013de4f759043acd9d52ed457e2","patch":"@@ -122,7 +122,7 @@ public void restartContext() {\n     public CamelMetrics metrics() {\n         CamelMetrics metrics = new CamelMetrics();\n \n-        MetricsRegistryService registryService = context.getContext().hasService(MetricsRegistryService.class);\n+        MetricsRegistryService registryService = context.getCamelContext().hasService(MetricsRegistryService.class);\n         if (registryService == null) {\n             LOG.warn(\"Camel metrics not available\");\n         } else {"},{"sha":"c8eaf2f5e31b9a4033cd71e9f2c9e6d524656ace","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/AbstractCamelProvisioningManager.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20cdc5024cff013de4f759043acd9d52ed457e2/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20cdc5024cff013de4f759043acd9d52ed457e2/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java?ref=b20cdc5024cff013de4f759043acd9d52ed457e2","patch":"@@ -29,7 +29,6 @@\n import org.apache.camel.impl.DefaultExchange;\n import org.apache.camel.impl.DefaultMessage;\n import org.apache.camel.model.RoutesDefinition;\n-import org.apache.camel.spring.SpringCamelContext;\n import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -45,44 +44,42 @@ abstract class AbstractCamelProvisioningManager {\n     @Autowired\n     protected SyncopeCamelContext contextFactory;\n \n-    protected SpringCamelContext camelContext;\n-\n     protected RoutesDefinition routes;\n \n     protected final Map<String, PollingConsumer> consumerMap = new HashMap<>();\n \n     protected final List<String> knownURIs = new ArrayList<>();\n \n     protected void sendMessage(final String uri, final Object obj) {\n-        Exchange exchange = new DefaultExchange(contextFactory.getContext());\n+        Exchange exchange = new DefaultExchange(contextFactory.getCamelContext());\n \n-        DefaultMessage message = new DefaultMessage(camelContext);\n+        DefaultMessage message = new DefaultMessage(contextFactory.getCamelContext());\n         message.setBody(obj);\n         exchange.setIn(message);\n \n-        ProducerTemplate template = contextFactory.getContext().createProducerTemplate();\n+        ProducerTemplate template = contextFactory.getCamelContext().createProducerTemplate();\n         template.send(uri, exchange);\n     }\n \n     protected void sendMessage(final String uri, final Object body, final Map<String, Object> properties) {\n-        Exchange exchange = new DefaultExchange(contextFactory.getContext());\n+        Exchange exchange = new DefaultExchange(contextFactory.getCamelContext());\n \n         for (Map.Entry<String, Object> property : properties.entrySet()) {\n             exchange.setProperty(property.getKey(), property.getValue());\n             LOG.debug(\"Added property {}\", property.getKey());\n         }\n \n-        DefaultMessage message = new DefaultMessage(camelContext);\n+        DefaultMessage message = new DefaultMessage(contextFactory.getCamelContext());\n         message.setBody(body);\n         exchange.setIn(message);\n-        ProducerTemplate template = contextFactory.getContext().createProducerTemplate();\n+        ProducerTemplate template = contextFactory.getCamelContext().createProducerTemplate();\n         template.send(uri, exchange);\n     }\n \n     protected PollingConsumer getConsumer(final String uri) {\n         if (!knownURIs.contains(uri)) {\n             knownURIs.add(uri);\n-            Endpoint endpoint = contextFactory.getContext().getEndpoint(uri);\n+            Endpoint endpoint = contextFactory.getCamelContext().getEndpoint(uri);\n             PollingConsumer pollingConsumer = null;\n             try {\n                 pollingConsumer = endpoint.createPollingConsumer();"},{"sha":"740c4a0806420f21eda1fc600375b7765386a6b9","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java","status":"modified","additions":22,"deletions":54,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20cdc5024cff013de4f759043acd9d52ed457e2/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20cdc5024cff013de4f759043acd9d52ed457e2/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=b20cdc5024cff013de4f759043acd9d52ed457e2","patch":"@@ -18,34 +18,25 @@\n  */\n package org.apache.syncope.core.provisioning.camel;\n \n-import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n-import javax.xml.bind.JAXBContext;\n-import javax.xml.bind.Unmarshaller;\n+import org.apache.camel.CamelContext;\n import org.apache.camel.component.metrics.routepolicy.MetricsRoutePolicyFactory;\n-import org.apache.camel.model.Constants;\n-import org.apache.camel.model.RouteDefinition;\n+import org.apache.camel.model.RoutesDefinition;\n import org.apache.camel.spring.SpringCamelContext;\n import org.apache.commons.io.IOUtils;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n-import org.w3c.dom.Node;\n-import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n-import org.w3c.dom.ls.DOMImplementationLS;\n-import org.w3c.dom.ls.LSInput;\n-import org.w3c.dom.ls.LSParser;\n \n @Component\n public class SyncopeCamelContext {\n@@ -57,72 +48,49 @@ public class SyncopeCamelContext {\n \n     private SpringCamelContext camelContext;\n \n-    public SpringCamelContext getContext() {\n+    public CamelContext getCamelContext() {\n         synchronized (this) {\n             if (camelContext == null) {\n-                camelContext = new SpringCamelContext(ApplicationContextProvider.getApplicationContext());\n-                camelContext.setStreamCaching(false);\n-                camelContext.setAllowUseOriginalMessage(false);\n+                camelContext = ApplicationContextProvider.getBeanFactory().getBean(SpringCamelContext.class);\n                 camelContext.addRoutePolicyFactory(new MetricsRoutePolicyFactory());\n             }\n-        }\n \n-        if (camelContext.getRouteDefinitions().isEmpty()) {\n-            List<CamelRoute> routes = routeDAO.findAll();\n-            LOG.debug(\"{} route(s) are going to be loaded \", routes.size());\n-            loadContext(routes.stream().map(input -> input.getContent()).collect(Collectors.toList()));\n-            try {\n-                camelContext.start();\n-            } catch (Exception e) {\n-                LOG.error(\"While starting Camel context\", e);\n-                throw new CamelException(e);\n+            if (camelContext.getRoutes().isEmpty()) {\n+                List<CamelRoute> routes = routeDAO.findAll();\n+                LOG.debug(\"{} route(s) are going to be loaded \", routes.size());\n+\n+                loadRouteDefinitions(routes.stream().map(input -> input.getContent()).collect(Collectors.toList()));\n             }\n         }\n \n         return camelContext;\n     }\n \n-    private void loadContext(final Collection<String> routes) {\n+    private void loadRouteDefinitions(final List<String> routes) {\n         try {\n-            DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n-            DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n-            LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n-\n-            JAXBContext jaxbContext = JAXBContext.newInstance(Constants.JAXB_CONTEXT_PACKAGES);\n-            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n-            List<RouteDefinition> routeDefs = new ArrayList<>();\n-            for (String route : routes) {\n-                try (InputStream input = IOUtils.toInputStream(route, StandardCharsets.UTF_8)) {\n-                    LSInput lsinput = domImpl.createLSInput();\n-                    lsinput.setByteStream(input);\n-\n-                    Node routeElement = parser.parse(lsinput).getDocumentElement();\n-                    routeDefs.add(unmarshaller.unmarshal(routeElement, RouteDefinition.class).getValue());\n-                }\n-            }\n-            camelContext.addRouteDefinitions(routeDefs);\n+            RoutesDefinition routeDefs = camelContext.loadRoutesDefinition(\n+                    IOUtils.toInputStream(\"<routes xmlns=\\\"http://camel.apache.org/schema/spring\\\">\"\n+                            + StringUtils.join(routes)\n+                            + \"</routes>\", StandardCharsets.UTF_8));\n+            camelContext.addRouteDefinitions(routeDefs.getRoutes());\n         } catch (Exception e) {\n-            LOG.error(\"While loading Camel context {}\", e);\n+            LOG.error(\"While adding route definitions into Camel Context {}\", camelContext, e);\n             throw new CamelException(e);\n         }\n     }\n \n     @Transactional(propagation = Propagation.SUPPORTS)\n     public void updateContext(final String routeKey) {\n-        if (camelContext == null) {\n-            getContext();\n-        } else if (!camelContext.getRouteDefinitions().isEmpty()) {\n+        if (!camelContext.getRouteDefinitions().isEmpty()) {\n             camelContext.getRouteDefinitions().remove(camelContext.getRouteDefinition(routeKey));\n-            loadContext(Collections.singletonList(routeDAO.find(routeKey).getContent()));\n+            loadRouteDefinitions(Arrays.asList(routeDAO.find(routeKey).getContent()));\n         }\n     }\n \n     public void restoreRoute(final String routeKey, final String routeContent) {\n         try {\n             camelContext.getRouteDefinitions().remove(camelContext.getRouteDefinition(routeKey));\n-            loadContext(Collections.singletonList(routeContent));\n-\n-            camelContext.start();\n+            loadRouteDefinitions(Arrays.asList(routeContent));\n         } catch (Exception e) {\n             LOG.error(\"While restoring Camel route {}\", routeKey, e);\n             throw new CamelException(e);"},{"sha":"0037a740292b68d0f16501b346e1ecc12616173d","filename":"ext/camel/provisioning-camel/src/main/resources/provisioningCamelContext.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20cdc5024cff013de4f759043acd9d52ed457e2/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FprovisioningCamelContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20cdc5024cff013de4f759043acd9d52ed457e2/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FprovisioningCamelContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FprovisioningCamelContext.xml?ref=b20cdc5024cff013de4f759043acd9d52ed457e2","patch":"@@ -20,11 +20,16 @@ under the License.\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:camel=\"http://camel.apache.org/schema/spring\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\">\n+                           http://www.springframework.org/schema/context/spring-context.xsd\n+                           http://camel.apache.org/schema/spring\n+                           http://camel.apache.org/schema/spring/camel-spring.xsd\">\n \n+  <camel:camelContext id=\"provisioningCamelContext\" streamCache=\"false\" allowUseOriginalMessage=\"false\"/>\n+  \n   <bean id=\"userRoutes\" class=\"org.apache.syncope.core.spring.ResourceWithFallbackLoader\">\n     <property name=\"primary\" value=\"file:${camel.directory}/userRoutes.xml\"/>\n     <property name=\"fallback\" value=\"classpath:userRoutes.xml\"/>"},{"sha":"2916b88d9c62bd9a03fda76f6f8d2be566b5dd1a","filename":"pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20cdc5024cff013de4f759043acd9d52ed457e2/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20cdc5024cff013de4f759043acd9d52ed457e2/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=b20cdc5024cff013de4f759043acd9d52ed457e2","patch":"@@ -386,7 +386,7 @@ under the License.\n \n     <flowable.version>6.2.1</flowable.version>\n \n-    <camel.version>2.20.2</camel.version>\t\n+    <camel.version>2.21.0</camel.version>\t\n \n     <slf4j.version>1.7.25</slf4j.version>\n     <opensaml.version>3.3.0</opensaml.version>\n@@ -2209,8 +2209,8 @@ under the License.\n             <link>http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.9/</link>\n             <link>http://fasterxml.github.io/jackson-dataformat-yaml/javadoc/2.9.pr1/</link>\n             <link>http://fasterxml.github.io/jackson-datatype-joda/javadoc/2.9/</link>\n-            <link>http://www.javadoc.io/doc/org.apache.camel/camel-core/2.20.2/</link>\n-            <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/2.20.2/</link>\n+            <link>http://www.javadoc.io/doc/org.apache.camel/camel-core/2.21.0/</link>\n+            <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/2.21.0/</link>\n             <link>https://ci.apache.org/projects/wicket/apidocs/8.x/</link>\n             <link>https://commons.apache.org/proper/commons-lang/javadocs/api-release/</link>\n             <link>https://commons.apache.org/proper/commons-io/javadocs/api-2.6/</link>"}]}