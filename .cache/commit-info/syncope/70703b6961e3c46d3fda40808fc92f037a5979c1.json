{"sha":"70703b6961e3c46d3fda40808fc92f037a5979c1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcwNzAzYjY5NjFlM2M0NmQzZmRhNDA4MDhmYzkyZjAzN2E1OTc5YzE=","commit":{"author":{"name":"gonzalad","email":"adr_gonzalez@yahoo.fr","date":"2016-11-23T15:22:56Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2016-11-23T17:11:33Z"},"message":"SYNCOPE-971: Case insensitive search - This closes #40","tree":{"sha":"149c3eb019f564ad9969323123230a7c3d035632","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/149c3eb019f564ad9969323123230a7c3d035632"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/70703b6961e3c46d3fda40808fc92f037a5979c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/70703b6961e3c46d3fda40808fc92f037a5979c1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/70703b6961e3c46d3fda40808fc92f037a5979c1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/70703b6961e3c46d3fda40808fc92f037a5979c1/comments","author":{"login":"gonzalad","id":777485,"node_id":"MDQ6VXNlcjc3NzQ4NQ==","avatar_url":"https://avatars.githubusercontent.com/u/777485?v=4","gravatar_id":"","url":"https://api.github.com/users/gonzalad","html_url":"https://github.com/gonzalad","followers_url":"https://api.github.com/users/gonzalad/followers","following_url":"https://api.github.com/users/gonzalad/following{/other_user}","gists_url":"https://api.github.com/users/gonzalad/gists{/gist_id}","starred_url":"https://api.github.com/users/gonzalad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gonzalad/subscriptions","organizations_url":"https://api.github.com/users/gonzalad/orgs","repos_url":"https://api.github.com/users/gonzalad/repos","events_url":"https://api.github.com/users/gonzalad/events{/privacy}","received_events_url":"https://api.github.com/users/gonzalad/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d490b45c194f621ce2faf66f1f03b8f89a97fae5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d490b45c194f621ce2faf66f1f03b8f89a97fae5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d490b45c194f621ce2faf66f1f03b8f89a97fae5"}],"stats":{"total":616,"additions":554,"deletions":62},"files":[{"sha":"61fca89c9593d45c103367ee3c121ceadbf1a327","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -30,11 +30,12 @@\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n-import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n+import org.apache.syncope.common.lib.search.SyncopeFiqlParser;\n+import org.apache.syncope.common.lib.search.SyncopeFiqlSearchCondition;\n import org.apache.syncope.common.lib.search.SyncopeProperty;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n import org.slf4j.Logger;\n@@ -65,7 +66,7 @@ public static List<SearchClause> getSearchClauses(final String fiql) {\n         final List<SearchClause> res = new ArrayList<>();\n         if (StringUtils.isNotBlank(fiql)) {\n             try {\n-                FiqlParser<SearchBean> fiqlParser = new FiqlParser<>(\n+                SyncopeFiqlParser<SearchBean> fiqlParser = new SyncopeFiqlParser<>(\n                         SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n                 res.addAll(getSearchClauses(fiqlParser.parse(fiql)));\n             } catch (Exception e) {\n@@ -140,7 +141,16 @@ private static SearchClause getPrimitiveSearchClause(final SearchCondition<Searc\n             res.setType(SearchClause.Type.ATTRIBUTE);\n         }\n \n-        switch (sc.getConditionType()) {\n+        ConditionType ct = sc.getConditionType();\n+        if (sc instanceof SyncopeFiqlSearchCondition && sc.getConditionType() == ConditionType.CUSTOM) {\n+            SyncopeFiqlSearchCondition<SearchBean> sfsc = (SyncopeFiqlSearchCondition<SearchBean>) sc;\n+            if (SyncopeFiqlParser.IEQ.equals(sfsc.getOperator())) {\n+                ct = ConditionType.EQUALS;\n+            } else if (SyncopeFiqlParser.NIEQ.equals(sfsc.getOperator())) {\n+                ct = ConditionType.NOT_EQUALS;\n+            }\n+        }\n+        switch (ct) {\n             case EQUALS:\n                 if (SpecialAttr.RELATIONSHIP_TYPES.toString().equals(property)) {\n                     res.setComparator(SpecialAttr.NULL.toString().equals(value)\n@@ -273,12 +283,12 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n                                 break;\n \n                             case NOT_EQUALS:\n-                                condition = property.notEqualTo(clause.getValue());\n+                                condition = property.notEqualTolIgnoreCase(clause.getValue());\n                                 break;\n \n                             case EQUALS:\n                             default:\n-                                condition = property.equalTo(clause.getValue());\n+                                condition = property.equalToIgnoreCase(clause.getValue());\n                                 break;\n                         }\n                     }"},{"sha":"1cdafc8060c64ca59b187806729eba639eb280df","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -128,8 +128,7 @@ public MembershipTO transform(final GroupTO input) {\n             }\n         }).hideLabel().setOutputMarkupId(true));\n \n-        allGroups = groupRestClient.search(\n-                templateMode ? \"/\" : realm, null, -1, -1, new SortParam<>(\"name\", true), null);\n+        allGroups = groupRestClient.search(\"/\", null, -1, -1, new SortParam<>(\"name\", true), null);\n \n         final Map<String, GroupTO> allGroupsByKey = new LinkedHashMap<>(allGroups.size());\n         for (GroupTO group : allGroups) {"},{"sha":"4bf61f3c9bcdbbe528569fd8bd25a8b0fdd96e11","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/AbstractFiqlSearchConditionBuilder.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -109,5 +109,15 @@ public CompleteCondition hasNotResources(final String resource, final String...\n             this.result = SpecialAttr.RESOURCES.toString();\n             return condition(FiqlParser.NEQ, resource, (Object[]) moreResources);\n         }\n+\n+        @Override\n+        public CompleteCondition equalToIgnoreCase(final String value, final String... moreValues) {\n+            return condition(SyncopeFiqlParser.IEQ, value, (Object[]) moreValues);\n+        }\n+\n+        @Override\n+        public CompleteCondition notEqualTolIgnoreCase(final String literalOrPattern) {\n+            return condition(SyncopeFiqlParser.NIEQ, literalOrPattern);\n+        }\n     }\n }"},{"sha":"dc3c5aeed87a3fae7b22659f5ff61093ef945cf7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeFiqlParser.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.cxf.jaxrs.ext.search.ConditionType;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.cxf.jaxrs.ext.search.SearchParseException;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n+\n+/**\n+ * This parser introduces 2 new operands {@link #IEQ} (case-insensitive equals) and {@link #NIEQ} (case-insensitive\n+ * not equals) to the native FIQL operands.\n+ *\n+ * @param <T> type of search condition.\n+ */\n+public class SyncopeFiqlParser<T> extends FiqlParser<T> {\n+\n+    public static final String IEQ = \"=~\";\n+\n+    public static final String NIEQ = \"!~\";\n+\n+    public SyncopeFiqlParser(\n+            final Class<T> tclass,\n+            final Map<String, String> contextProperties) {\n+\n+        this(tclass, contextProperties, null);\n+    }\n+\n+    public SyncopeFiqlParser(\n+            final Class<T> tclass,\n+            final Map<String, String> contextProperties,\n+            final Map<String, String> beanProperties) {\n+\n+        super(tclass, contextProperties, beanProperties);\n+\n+        operatorsMap.put(IEQ, ConditionType.CUSTOM);\n+        operatorsMap.put(NIEQ, ConditionType.CUSTOM);\n+\n+        CONDITION_MAP.put(ConditionType.CUSTOM, IEQ);\n+        CONDITION_MAP.put(ConditionType.CUSTOM, NIEQ);\n+\n+        String comparators = GT + \"|\" + GE + \"|\" + LT + \"|\" + LE + \"|\" + EQ + \"|\" + NEQ + \"|\" + IEQ + \"|\" + NIEQ;\n+        String s1 = \"[\\\\p{ASCII}]+(\" + comparators + \")\";\n+        comparatorsPattern = Pattern.compile(s1);\n+    }\n+\n+    @Override\n+    protected ASTNode<T> parseComparison(final String expr) throws SearchParseException {\n+        Matcher m = comparatorsPattern.matcher(expr);\n+        if (m.find()) {\n+            String propertyName = expr.substring(0, m.start(1));\n+            String operator = m.group(1);\n+            String value = expr.substring(m.end(1));\n+            if (\"\".equals(value)) {\n+                throw new SearchParseException(\"Not a comparison expression: \" + expr);\n+            }\n+\n+            String name = unwrapSetter(propertyName);\n+\n+            name = getActualSetterName(name);\n+            TypeInfoObject castedValue = parseType(propertyName, name, value);\n+            if (castedValue != null) {\n+                return new SyncopeComparison(name, operator, castedValue);\n+            } else {\n+                return null;\n+            }\n+        } else {\n+            throw new SearchParseException(\"Not a comparison expression: \" + expr);\n+        }\n+    }\n+\n+    private class SyncopeComparison implements ASTNode<T> {\n+\n+        private final String name;\n+\n+        private final String operator;\n+\n+        private final TypeInfoObject tvalue;\n+\n+        SyncopeComparison(final String name, final String operator, final TypeInfoObject value) {\n+            this.name = name;\n+            this.operator = operator;\n+            this.tvalue = value;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name + \" \" + operator + \" \" + tvalue.getObject()\n+                    + \" (\" + tvalue.getObject().getClass().getSimpleName() + \")\";\n+        }\n+\n+        @Override\n+        public SearchCondition<T> build() throws SearchParseException {\n+            String templateName = getSetter(name);\n+            T cond = createTemplate(templateName);\n+            ConditionType ct = operatorsMap.get(operator);\n+\n+            if (isPrimitive(cond)) {\n+                return new SyncopeFiqlSearchCondition<>(ct, cond);\n+            } else {\n+                String templateNameLCase = templateName.toLowerCase();\n+                return new SyncopeFiqlSearchCondition<>(Collections.singletonMap(templateNameLCase, ct),\n+                        Collections.singletonMap(templateNameLCase, name),\n+                        Collections.singletonMap(templateNameLCase, tvalue.getTypeInfo()),\n+                        cond, operator);\n+            }\n+        }\n+\n+        private boolean isPrimitive(final T pojo) {\n+            return pojo.getClass().getName().startsWith(\"java.lang\");\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        private T createTemplate(final String setter) throws SearchParseException {\n+            try {\n+                if (beanspector != null) {\n+                    beanspector.instantiate().setValue(setter, tvalue.getObject());\n+                    return beanspector.getBean();\n+                } else {\n+                    SearchBean bean = (SearchBean) conditionClass.newInstance();\n+                    bean.set(setter, tvalue.getObject().toString());\n+                    return (T) bean;\n+                }\n+            } catch (Throwable e) {\n+                throw new SearchParseException(e);\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"41e0bacff2d73a327d816c77590ffaeee1a5b582","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeFiqlSearchCondition.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlSearchCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlSearchCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlSearchCondition.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.jaxrs.ext.search.Beanspector;\n+import org.apache.cxf.jaxrs.ext.search.ConditionType;\n+import org.apache.cxf.jaxrs.ext.search.SimpleSearchCondition;\n+\n+/**\n+ * Adds support for custom FIQL operators to {@link SimpleSearchCondition}.\n+ *\n+ * @param <T> type of search condition.\n+ */\n+public class SyncopeFiqlSearchCondition<T> extends SimpleSearchCondition<T> {\n+\n+    static {\n+        SUPPORTED_TYPES.add(ConditionType.CUSTOM);\n+    }\n+\n+    private String operator;\n+\n+    public SyncopeFiqlSearchCondition(final ConditionType cType, final T condition) {\n+        super(cType, condition);\n+    }\n+\n+    public SyncopeFiqlSearchCondition(\n+            final Map<String, ConditionType> getters2operators,\n+            final Map<String, String> realGetters,\n+            final Map<String, Beanspector.TypeInfo> propertyTypeInfo,\n+            final T condition,\n+            final String operator) {\n+\n+        super(getters2operators, realGetters, propertyTypeInfo, condition);\n+        this.operator = operator;\n+    }\n+\n+    public String getOperator() {\n+        return operator;\n+    }\n+\n+}"},{"sha":"2f560c157b7d9e73bcf4d892a606b688d4868c2d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeProperty.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -27,12 +27,22 @@\n  */\n public interface SyncopeProperty extends Property {\n \n+    /** Is textual property equal to (ignoring case) given literal or matching given pattern? */\n+    CompleteCondition equalToIgnoreCase(String value, String... moreValues);\n+\n+    /** Is textual property different (ignoring case) than given literal or not matching given pattern? */\n+    CompleteCondition notEqualTolIgnoreCase(String literalOrPattern);\n+\n+    /** Is property null? */\n     CompleteCondition nullValue();\n \n+    /** Is property not null? */\n     CompleteCondition notNullValue();\n \n+    /** Is user, group or any object owning given resource(s)? */\n     CompleteCondition hasResources(String resource, String... moreResources);\n \n+    /** Is user, group or any object not owning given resource(s)? */\n     CompleteCondition hasNotResources(String resource, String... moreResources);\n \n }"},{"sha":"8414c419b7ff127dc33d7a4e8baa03d2e36fda73","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/search/SyncopeFiqlParserTest.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParserTest.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.cxf.jaxrs.ext.search.ConditionType;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n+import org.junit.Test;\n+\n+public class SyncopeFiqlParserTest {\n+\n+    private static final SyncopeFiqlParser<SearchBean> FIQL_PARSER = new SyncopeFiqlParser<>(\n+            SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private SyncopeFiqlSearchCondition<SearchBean> parse(final String fiql) {\n+        SearchCondition<SearchBean> parsed = FIQL_PARSER.parse(fiql);\n+        assertTrue(parsed instanceof SyncopeFiqlSearchCondition);\n+        return (SyncopeFiqlSearchCondition) parsed;\n+    }\n+\n+    @Test\n+    public void testEqualsIgnoreCase() {\n+        SyncopeFiqlSearchCondition<SearchBean> cond = parse(\"name=~ami*\");\n+        assertEquals(SyncopeFiqlParser.IEQ, cond.getOperator());\n+        assertEquals(ConditionType.CUSTOM, cond.getConditionType());\n+        assertEquals(\"ami*\", cond.getCondition().get(\"name\"));\n+    }\n+\n+    @Test\n+    public void testNotEqualsIgnoreCase() {\n+        SyncopeFiqlSearchCondition<SearchBean> cond = parse(\"name!~ami*\");\n+        assertEquals(SyncopeFiqlParser.NIEQ, cond.getOperator());\n+        assertEquals(ConditionType.CUSTOM, cond.getConditionType());\n+        assertEquals(\"ami*\", cond.getCondition().get(\"name\"));\n+    }\n+\n+    /**\n+     * Simple test for ensuring there's no regression.\n+     */\n+    @Test\n+    public void testEquals() {\n+        SyncopeFiqlSearchCondition<SearchBean> cond = parse(\"name==ami*\");\n+        assertEquals(FiqlParser.EQ, cond.getOperator());\n+        assertEquals(ConditionType.EQUALS, cond.getConditionType());\n+        assertEquals(\"ami*\", cond.getCondition().get(\"name\"));\n+    }\n+\n+}"},{"sha":"b8e2b85ff446f446b583632e828f05a66d93396d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AttributeCond.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAttributeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAttributeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAttributeCond.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -28,7 +28,9 @@ public class AttributeCond extends AbstractSearchCond {\n     public enum Type {\n \n         LIKE,\n+        ILIKE,\n         EQ,\n+        IEQ,\n         GT,\n         LT,\n         GE,"},{"sha":"f07453f75ef7e0256165261a636585554ad7f688","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -20,9 +20,9 @@\n \n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n-import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.SyncopeFiqlParser;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n \n@@ -37,10 +37,10 @@ public final class SearchCondConverter {\n      * @param fiqlExpression FIQL string\n      * @param realms optional realm to provide to {@link SearchCondVisitor}\n      * @return {@link SearchCond} instance for given FIQL expression\n-     * @see FiqlParser\n+     * @see SyncopeFiqlParser\n      */\n     public static SearchCond convert(final String fiqlExpression, final String... realms) {\n-        FiqlParser<SearchBean> fiqlParser = new FiqlParser<>(\n+        SyncopeFiqlParser<SearchBean> fiqlParser = new SyncopeFiqlParser<>(\n                 SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n \n         try {"},{"sha":"bd95fe83ab5dcb2267c84727eab84dfd220687be","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":26,"deletions":10,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -27,6 +27,8 @@\n import org.apache.cxf.jaxrs.ext.search.visitor.AbstractSearchConditionVisitor;\n import org.apache.syncope.common.lib.search.SearchableFields;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n+import org.apache.syncope.common.lib.search.SyncopeFiqlParser;\n+import org.apache.syncope.common.lib.search.SyncopeFiqlSearchCondition;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n@@ -75,18 +77,35 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n         AttributeCond attributeCond = createAttributeCond(name);\n         attributeCond.setExpression(value);\n \n+        ConditionType ct = sc.getConditionType();\n+        if (sc instanceof SyncopeFiqlSearchCondition && sc.getConditionType() == ConditionType.CUSTOM) {\n+            SyncopeFiqlSearchCondition<SearchBean> sfsc = (SyncopeFiqlSearchCondition<SearchBean>) sc;\n+            if (SyncopeFiqlParser.IEQ.equals(sfsc.getOperator())) {\n+                ct = ConditionType.EQUALS;\n+            } else if (SyncopeFiqlParser.NIEQ.equals(sfsc.getOperator())) {\n+                ct = ConditionType.NOT_EQUALS;\n+            } else {\n+                throw new IllegalArgumentException(\n+                        String.format(\"Condition type %s is not supported\", sfsc.getOperator()));\n+            }\n+        }\n+\n         SearchCond leaf;\n-        switch (sc.getConditionType()) {\n+        switch (ct) {\n             case EQUALS:\n             case NOT_EQUALS:\n                 if (specialAttrName == null) {\n                     if (specialAttrValue != null && specialAttrValue == SpecialAttr.NULL) {\n                         attributeCond.setType(AttributeCond.Type.ISNULL);\n                         attributeCond.setExpression(null);\n                     } else if (value.indexOf('%') == -1) {\n-                        attributeCond.setType(AttributeCond.Type.EQ);\n+                        attributeCond.setType(sc.getConditionType() == ConditionType.CUSTOM\n+                                ? AttributeCond.Type.IEQ\n+                                : AttributeCond.Type.EQ);\n                     } else {\n-                        attributeCond.setType(AttributeCond.Type.LIKE);\n+                        attributeCond.setType(sc.getConditionType() == ConditionType.CUSTOM\n+                                ? AttributeCond.Type.ILIKE\n+                                : AttributeCond.Type.LIKE);\n                     }\n \n                     leaf = SearchCond.getLeafCond(attributeCond);\n@@ -133,7 +152,7 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                             assignableCond.setRealmFullPath(realm);\n                             leaf = SearchCond.getLeafCond(assignableCond);\n                             break;\n-                            \n+\n                         case MEMBER:\n                             MemberCond memberCond = new MemberCond();\n                             memberCond.setMember(value);\n@@ -145,14 +164,12 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                                     String.format(\"Special attr name %s is not supported\", specialAttrName));\n                     }\n                 }\n-                if (sc.getConditionType() == ConditionType.NOT_EQUALS) {\n+                if (ct == ConditionType.NOT_EQUALS) {\n                     if (leaf.getAttributeCond() != null\n                             && leaf.getAttributeCond().getType() == AttributeCond.Type.ISNULL) {\n \n                         leaf.getAttributeCond().setType(AttributeCond.Type.ISNOTNULL);\n-                    } else if (leaf.getAnyCond() != null\n-                            && leaf.getAnyCond().getType() == AnyCond.Type.ISNULL) {\n-\n+                    } else if (leaf.getAnyCond() != null && leaf.getAnyCond().getType() == AnyCond.Type.ISNULL) {\n                         leaf.getAnyCond().setType(AttributeCond.Type.ISNOTNULL);\n                     } else {\n                         leaf = SearchCond.getNotLeafCond(leaf);\n@@ -181,8 +198,7 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                 break;\n \n             default:\n-                throw new IllegalArgumentException(\n-                        String.format(\"Condition type %s is not supported\", sc.getConditionType().name()));\n+                throw new IllegalArgumentException(String.format(\"Condition type %s is not supported\", ct.name()));\n         }\n \n         return leaf;"},{"sha":"144d42d72211a0dbfb5712e884dc1cb525fba8f0","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -52,6 +52,34 @@ public void eq() {\n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n     }\n \n+    @Test\n+    public void ieq() {\n+        String fiqlExpression = new UserFiqlSearchConditionBuilder().\n+                is(\"username\").equalToIgnoreCase(\"rossini\").query();\n+        assertEquals(\"username=~rossini\", fiqlExpression);\n+\n+        AnyCond attrCond = new AnyCond(AttributeCond.Type.IEQ);\n+        attrCond.setSchema(\"username\");\n+        attrCond.setExpression(\"rossini\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void nieq() {\n+        String fiqlExpression = new UserFiqlSearchConditionBuilder().\n+                is(\"username\").notEqualTolIgnoreCase(\"rossini\").query();\n+        assertEquals(\"username!~rossini\", fiqlExpression);\n+\n+        AnyCond attrCond = new AnyCond(AttributeCond.Type.IEQ);\n+        attrCond.setSchema(\"username\");\n+        attrCond.setExpression(\"rossini\");\n+        SearchCond simpleCond = SearchCond.getNotLeafCond(attrCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n     @Test\n     public void like() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").equalTo(\"ros*\").query();\n@@ -65,6 +93,33 @@ public void like() {\n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n     }\n \n+    @Test\n+    public void ilike() {\n+        String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").\n+                equalToIgnoreCase(\"ros*\").query();\n+        assertEquals(\"username=~ros*\", fiqlExpression);\n+\n+        AttributeCond attrCond = new AnyCond(AttributeCond.Type.ILIKE);\n+        attrCond.setSchema(\"username\");\n+        attrCond.setExpression(\"ros%\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void nilike() {\n+        String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").notEqualTolIgnoreCase(\"ros*\").query();\n+        assertEquals(\"username!~ros*\", fiqlExpression);\n+\n+        AttributeCond attrCond = new AnyCond(AttributeCond.Type.ILIKE);\n+        attrCond.setSchema(\"username\");\n+        attrCond.setExpression(\"ros%\");\n+        SearchCond simpleCond = SearchCond.getNotLeafCond(attrCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n     @Test\n     public void isNull() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"loginDate\").nullValue().query();"},{"sha":"1513f4f24caf1f7e6bc37e4f9e1f4ee1978c564a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":24,"deletions":6,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -703,7 +703,7 @@ private String getQuery(final MemberCond cond, final boolean not, final List<Obj\n         if (SyncopeConstants.UUID_PATTERN.matcher(cond.getMember()).matches()) {\n             memberKey = cond.getMember();\n         } else {\n-            Any member = userDAO.findByUsername(cond.getMember());\n+            Any<?> member = userDAO.findByUsername(cond.getMember());\n             if (member == null) {\n                 member = anyObjectDAO.findByName(cond.getMember());\n             }\n@@ -745,9 +745,16 @@ private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue\n             final PlainSchema schema, final AttributeCond cond, final boolean not,\n             final List<Object> parameters, final SearchSupport svs) {\n \n-        String column = (cond instanceof AnyCond)\n-                ? cond.getSchema()\n-                : \"' AND \" + svs.fieldName(schema.getType());\n+        // activate ignoreCase only for EQ and LIKE operators\n+        boolean ignoreCase = AttributeCond.Type.ILIKE == cond.getType() || AttributeCond.Type.IEQ == cond.getType();\n+        \n+        String column = (cond instanceof AnyCond)  ? cond.getSchema() :  svs.fieldName(schema.getType());\n+        if (ignoreCase) {\n+            column = \"LOWER (\" + column + \")\";\n+        }\n+        if (!(cond instanceof AnyCond)) {\n+            column = \"' AND \" + column;\n+        }\n \n         switch (cond.getType()) {\n \n@@ -763,13 +770,19 @@ private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue\n                         : \" IS NOT NULL\");\n                 break;\n \n+            case ILIKE:\n             case LIKE:\n                 if (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) {\n                     query.append(column);\n                     if (not) {\n                         query.append(\" NOT \");\n                     }\n-                    query.append(\" LIKE ?\").append(setParameter(parameters, cond.getExpression()));\n+                    query.append(\" LIKE \");\n+                    if (ignoreCase) {\n+                        query.append(\"LOWER(?\").append(setParameter(parameters, cond.getExpression())).append(')');\n+                    } else {\n+                        query.append('?').append(setParameter(parameters, cond.getExpression()));\n+                    }\n                 } else {\n                     if (!(cond instanceof AnyCond)) {\n                         query.append(\"' AND\");\n@@ -779,14 +792,19 @@ private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue\n                 }\n                 break;\n \n+            case IEQ:\n             case EQ:\n                 query.append(column);\n                 if (not) {\n                     query.append(\"<>\");\n                 } else {\n                     query.append('=');\n                 }\n-                query.append('?').append(setParameter(parameters, attrValue.getValue()));\n+                if (ignoreCase) {\n+                    query.append(\"LOWER(?\").append(setParameter(parameters, attrValue.getValue())).append(')');\n+                } else {\n+                    query.append('?').append(setParameter(parameters, attrValue.getValue()));\n+                }\n                 break;\n \n             case GE:"},{"sha":"1e592809d02c245fdd621e13c14cb2dbba4cc890","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":77,"deletions":9,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -153,6 +153,33 @@ public void searchWithLikeCondition() {\n         assertEquals(1, users.size());\n     }\n \n+    @Test\n+    public void searchCaseInsensitiveWithLikeCondition() {\n+        AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.ILIKE);\n+        fullnameLeafCond.setSchema(\"fullname\");\n+        fullnameLeafCond.setExpression(\"%O%\");\n+\n+        MembershipCond groupCond = new MembershipCond();\n+        groupCond.setGroup(\"root\");\n+\n+        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n+        loginDateCond.setSchema(\"loginDate\");\n+        loginDateCond.setExpression(\"2009-05-26\");\n+\n+        SearchCond subCond = SearchCond.getAndCond(\n+                SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(groupCond));\n+\n+        assertTrue(subCond.isValid());\n+\n+        SearchCond cond = SearchCond.getAndCond(subCond, SearchCond.getLeafCond(loginDateCond));\n+\n+        assertTrue(cond.isValid());\n+\n+        List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+    }\n+\n     @Test\n     public void searchWithNotCondition() {\n         AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n@@ -174,6 +201,27 @@ public void searchWithNotCondition() {\n         assertTrue(ids.contains(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\"));\n     }\n \n+    @Test\n+    public void searchCaseInsensitiveWithNotCondition() {\n+        AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.IEQ);\n+        fullnameLeafCond.setSchema(\"fullname\");\n+        fullnameLeafCond.setExpression(\"giuseppe verdi\");\n+\n+        SearchCond cond = SearchCond.getNotLeafCond(fullnameLeafCond);\n+        assertTrue(cond.isValid());\n+\n+        List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(4, users.size());\n+\n+        Set<String> ids = new HashSet<>(users.size());\n+        for (User user : users) {\n+            ids.add(user.getKey());\n+        }\n+        assertTrue(ids.contains(\"1417acbe-cbf6-4277-9372-e75e04f97000\"));\n+        assertTrue(ids.contains(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\"));\n+    }\n+\n     @Test\n     public void searchByBoolean() {\n         AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n@@ -360,6 +408,26 @@ public void searchByUsernameAndFullname() {\n         assertEquals(2, matchingUsers.size());\n     }\n \n+    @Test\n+    public void searchByUsernameAndFullnameIgnoreCase() {\n+        AnyCond usernameLeafCond = new AnyCond(AnyCond.Type.IEQ);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"RoSsini\");\n+\n+        AttributeCond idRightCond = new AttributeCond(AttributeCond.Type.ILIKE);\n+        idRightCond.setSchema(\"fullname\");\n+        idRightCond.setExpression(\"gIuseppe v%\");\n+\n+        SearchCond searchCondition = SearchCond.getOrCond(\n+                SearchCond.getLeafCond(usernameLeafCond),\n+                SearchCond.getLeafCond(idRightCond));\n+\n+        List<User> matchingUsers = searchDAO.search(\n+                searchCondition, AnyTypeKind.USER);\n+        assertNotNull(matchingUsers);\n+        assertEquals(2, matchingUsers.size());\n+    }\n+\n     @Test\n     public void searchByKey() {\n         AnyCond idLeafCond = new AnyCond(AnyCond.Type.EQ);\n@@ -602,27 +670,27 @@ public void issueSYNCOPE433() {\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n-    \n+\n     @Test\n     public void issueSYNCOPE929() {\n         AttributeCond rossiniCond = new AttributeCond(AttributeCond.Type.EQ);\n         rossiniCond.setSchema(\"surname\");\n         rossiniCond.setExpression(\"Rossini\");\n-        \n+\n         AttributeCond genderCond = new AttributeCond(AttributeCond.Type.EQ);\n         genderCond.setSchema(\"gender\");\n         genderCond.setExpression(\"M\");\n \n-        SearchCond orCond = \n-            SearchCond.getOrCond(SearchCond.getLeafCond(rossiniCond),\n-                                 SearchCond.getLeafCond(genderCond));\n-        \n+        SearchCond orCond =\n+                SearchCond.getOrCond(SearchCond.getLeafCond(rossiniCond),\n+                        SearchCond.getLeafCond(genderCond));\n+\n         AttributeCond belliniCond = new AttributeCond(AttributeCond.Type.EQ);\n         belliniCond.setSchema(\"surname\");\n         belliniCond.setExpression(\"Bellini\");\n-        \n-        SearchCond searchCond = \n-            SearchCond.getAndCond(orCond, SearchCond.getLeafCond(belliniCond));\n+\n+        SearchCond searchCond =\n+                SearchCond.getAndCond(orCond, SearchCond.getLeafCond(belliniCond));\n \n         List<User> users = searchDAO.search(searchCond, AnyTypeKind.USER);\n         assertNotNull(users);"},{"sha":"c9189424e94dfb14e23898c7e6616b2ece994e5a","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -120,8 +120,9 @@ under the License.\n   <jaxrs:server id=\"restContainer\" address=\"/\"\n                 basePackages=\"org.apache.syncope.common.rest.api.service, org.apache.syncope.core.rest.cxf.service\" \n                 staticSubresourceResolution=\"true\">\n-    <jaxrs:properties> \n-      <entry key=\"search.lax.property.match\" value=\"true\"/> \n+    <jaxrs:properties>\n+      <entry key=\"search.parser.class\" value=\"org.apache.syncope.common.lib.search.SyncopeFiqlParser\"/>\n+      <entry key=\"search.lax.property.match\" value=\"true\"/>\n       <entry key=\"convert.wadl.resources.to.dom\" value=\"false\"/>\n     </jaxrs:properties> \n     <jaxrs:inInterceptors>"},{"sha":"f64da85a4d12661cec74026dd4b808332e20f11a","filename":"fit/core-reference/src/main/resources/jboss/restCXFContext.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -132,8 +132,9 @@ under the License.\n   <jaxrs:server id=\"restContainer\" address=\"/\"\n                 basePackages=\"org.apache.syncope.common.rest.api.service, org.apache.syncope.core.rest.cxf.service\" \n                 staticSubresourceResolution=\"true\">\n-    <jaxrs:properties> \n-      <entry key=\"search.lax.property.match\" value=\"true\"/> \n+    <jaxrs:properties>\n+      <entry key=\"search.parser.class\" value=\"org.apache.syncope.common.lib.search.SyncopeFiqlParser\"/>\n+      <entry key=\"search.lax.property.match\" value=\"true\"/>\n       <entry key=\"convert.wadl.resources.to.dom\" value=\"false\"/>\n     </jaxrs:properties> \n     <jaxrs:inInterceptors>"},{"sha":"b7f65585880843e98c2a7865e395b7cb8e3808fe","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":45,"deletions":23,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70703b6961e3c46d3fda40808fc92f037a5979c1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70703b6961e3c46d3fda40808fc92f037a5979c1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=70703b6961e3c46d3fda40808fc92f037a5979c1","patch":"@@ -47,8 +47,8 @@ public void searchUser() {\n         // LIKE\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().\n-                        is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).build());\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n@@ -73,12 +73,32 @@ public boolean evaluate(final UserTO user) {\n         assertEquals(2, found.size());\n     }\n \n+    @Test\n+    public void searchUserIgnoreCase() {\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                                is(\"username\").equalToIgnoreCase(\"RoSsINI\").and(\"key\").lessThan(2).query()).build());\n+        assertNotNull(matchingUsers);\n+        assertEquals(1, matchingUsers.getResult().size());\n+        assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n+        assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", matchingUsers.getResult().iterator().next().getKey());\n+\n+        matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(\"(fullname=~*oSsINi)\").page(1).size(2).build());\n+        assertNotNull(matchingUsers);\n+        assertEquals(1, matchingUsers.getResult().size());\n+        assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n+        assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", matchingUsers.getResult().iterator().next().getKey());\n+    }\n+\n     @Test\n     public void searchByUsernameAndKey() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().\n-                        is(\"username\").equalTo(\"rossini\").and(\"key\").lessThan(2).query()).build());\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                                is(\"username\").equalTo(\"rossini\").and(\"key\").lessThan(2).query()).build());\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.getResult().size());\n         assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n@@ -101,8 +121,8 @@ public void searchByGroupNameAndKey() {\n     public void searchByGroup() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(\"root\").query()).\n-                build());\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(\"root\").query()).\n+                        build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n@@ -124,8 +144,8 @@ public void searchByDynGroup() {\n \n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(group.getKey()).query()).\n-                build());\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(group.getKey()).query()).\n+                        build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n@@ -142,8 +162,8 @@ public boolean evaluate(final UserTO user) {\n     public void searchByRole() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(\"Other\").query()).\n-                build());\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(\"Other\").query()).\n+                        build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n@@ -166,8 +186,8 @@ public void searchByDynRole() {\n \n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role.getKey()).query()).\n-                build());\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role.getKey()).query()).\n+                        build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n@@ -184,8 +204,8 @@ public boolean evaluate(final UserTO user) {\n     public void searchUserByResourceName() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query()).\n-                build());\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query()).\n+                        build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n@@ -203,8 +223,9 @@ public void paginatedSearch() {\n         // LIKE\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().\n-                        is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).page(1).size(2).build());\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).page(1).size(2).\n+                        build());\n         assertNotNull(matchingUsers);\n \n         assertFalse(matchingUsers.getResult().isEmpty());\n@@ -259,7 +280,7 @@ public void searchByRelationshipAnyCond() {\n     public void nested() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(\"((fullname==*o*,fullname==*i*);$resources!=ws-target-resource-1)\").page(1).size(2).build());\n+                        fiql(\"((fullname==*o*,fullname==*i*);$resources!=ws-target-resource-1)\").page(1).size(2).build());\n         assertNotNull(matchingUsers);\n \n         assertFalse(matchingUsers.getResult().isEmpty());\n@@ -415,8 +436,8 @@ public boolean evaluate(final GroupTO group) {\n     public void orderBy() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n-                orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build()).build());\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n+                        orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build()).build());\n         assertNotNull(matchingUsers);\n \n         assertFalse(matchingUsers.getResult().isEmpty());\n@@ -443,12 +464,13 @@ public void issueSYNCOPE768() {\n                 getTotalCount();\n         assertEquals(nonOrdered, orderedByNullable);\n     }\n-    \n+\n     @Test\n     public void issueSYNCOPE929() {\n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(\"(surname==Rossini,gender==M);surname==Bellini\").build());\n-        \n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(\"(surname==Rossini,gender==M);surname==Bellini\").build());\n+\n         assertNotNull(matchingUsers);\n \n         assertFalse(matchingUsers.getResult().isEmpty());"}]}