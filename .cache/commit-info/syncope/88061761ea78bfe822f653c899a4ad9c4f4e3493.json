{"sha":"88061761ea78bfe822f653c899a4ad9c4f4e3493","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg4MDYxNzYxZWE3OGJmZTgyMmY2NTNjODk5YTRhZDljNGY0ZTM0OTM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-17T11:30:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-17T11:30:27Z"},"message":"[SYNCOPE-652] Upgrade Spring to 4.2.0.RELEASE + various cleanup","tree":{"sha":"6507da581b3d66cbf7cba9abc0637b2a0e39830d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6507da581b3d66cbf7cba9abc0637b2a0e39830d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/88061761ea78bfe822f653c899a4ad9c4f4e3493","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88061761ea78bfe822f653c899a4ad9c4f4e3493","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/88061761ea78bfe822f653c899a4ad9c4f4e3493","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88061761ea78bfe822f653c899a4ad9c4f4e3493/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4b2dc4d896b894bcd5728740a52601e40e8f17b3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4b2dc4d896b894bcd5728740a52601e40e8f17b3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4b2dc4d896b894bcd5728740a52601e40e8f17b3"}],"stats":{"total":1749,"additions":594,"deletions":1155},"files":[{"sha":"b46adc104bc94d1003cedf7644aa671d9759d75a","filename":".travis.yml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -20,11 +20,11 @@ language: java\n jdk:\n   - openjdk7\n # default install is mvn install --quiet -DskipTests=true\n-install: mvn --show-version --quiet -P all,skipTests\n+install: mvn --show-version --quiet -T 1C -P all,skipTests\n #invoker.streamLogs: we cannot access to log files through Travis web ui, so display everything in the console\n script:\n   - sudo rm /etc/mavenrc\n-  - export MAVEN_OPTS=\"-Xmx2469m -XX:MaxPermSize=512m\"\n-  - mvn --show-version --quiet clean install -Dinvoker.streamLogs=true\n+  - export MAVEN_OPTS=\"-Xmx2469m -XX:MaxPermSize=512m -XX:+TieredCompilation -XX:TieredStopAtLevel=1\"\n+  - mvn --show-version --quiet -T 1C clean install -Dinvoker.streamLogs=true\n notifications:\n   webhooks: http://rovere.tirasa.net/cgi-bin/travis.cgi"},{"sha":"70c532dddbc6701bf07a6e3afc1ae6ebd95c7489","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ConfigurationCommand.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -113,7 +113,7 @@ public void execute() {\n         } else if (StringUtils.isNotBlank(confNameToRead)) {\n             LOG.debug(\"- configuration read {} command\", confNameToRead);\n             try {\n-                final AttrTO attrTO = configurationService.read(confNameToRead);\n+                final AttrTO attrTO = configurationService.get(confNameToRead);\n                 System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n                         + \" - readonly: \" + attrTO.isReadonly());\n             } catch (final SyncopeClientException ex) {\n@@ -123,10 +123,10 @@ public void execute() {\n             LOG.debug(\"- configuration update command with params {}\", updateConf);\n             try {\n                 for (final Map.Entry<String, String> entrySet : updateConf.entrySet()) {\n-                    final AttrTO attrTO = configurationService.read(entrySet.getKey());\n+                    final AttrTO attrTO = configurationService.get(entrySet.getKey());\n                     attrTO.getValues().clear();\n                     attrTO.getValues().add(entrySet.getValue());\n-                    configurationService.set(entrySet.getKey(), attrTO);\n+                    configurationService.set(attrTO);\n                     System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n                             + \" - readonly: \" + attrTO.isReadonly());\n                 }\n@@ -140,7 +140,7 @@ public void execute() {\n                     final AttrTO attrTO = new AttrTO();\n                     attrTO.setSchema(entrySet.getKey());\n                     attrTO.getValues().add(entrySet.getValue());\n-                    configurationService.set(entrySet.getKey(), attrTO);\n+                    configurationService.set(attrTO);\n                     System.out.println(\" - Conf \" + attrTO.getSchema() + \" created with value(s) \" + attrTO.getValues()\n                             + \" - readonly: \" + attrTO.isReadonly());\n                 }"},{"sha":"ade940825e8211dbdbfccd3407afbdc9b5721d39","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConfigurationRestClient.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -53,9 +53,9 @@ public ConfTO list() {\n         return conf;\n     }\n \n-    public AttrTO read(final String key) {\n+    public AttrTO get(final String key) {\n         try {\n-            return getService(ConfigurationService.class).read(key);\n+            return getService(ConfigurationService.class).get(key);\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While reading a configuration schema\", e);\n         }\n@@ -67,7 +67,7 @@ public AttrTO readAttrLayout(final AttrLayoutType type) {\n             return null;\n         }\n \n-        AttrTO attrLayout = read(type.getConfKey());\n+        AttrTO attrLayout = get(type.getConfKey());\n         if (attrLayout == null) {\n             attrLayout = new AttrTO();\n             attrLayout.setSchema(type.getConfKey());\n@@ -79,8 +79,8 @@ public AttrTO readAttrLayout(final AttrLayoutType type) {\n         return attrLayout;\n     }\n \n-    public void set(final AttrTO attributeTO) {\n-        getService(ConfigurationService.class).set(attributeTO.getSchema(), attributeTO);\n+    public void set(final AttrTO attrTO) {\n+        getService(ConfigurationService.class).set(attrTO);\n     }\n \n     public void delete(final String key) {"},{"sha":"e3fc90153dc22e333c2678e7b6e3aeff568070ea","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/StatusMod.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FStatusMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FStatusMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FStatusMod.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -67,11 +67,11 @@ public enum ModType {\n      */\n     private final List<String> resourceNames = new ArrayList<>();\n \n-    @PathParam(\"key\")\n     public long getKey() {\n         return key;\n     }\n \n+    @PathParam(\"key\")\n     public void setKey(final long key) {\n         this.key = key;\n     }"},{"sha":"c3b468ce88c0237462bb9741f645ec864e11fe9e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -22,6 +22,7 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.List;\n+import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -58,6 +59,7 @@ public String getSchema() {\n     /**\n      * @param schema name to be set\n      */\n+    @PathParam(\"schema\")\n     public void setSchema(final String schema) {\n         this.schema = schema;\n "},{"sha":"0dfa8b5bb2fff6b1299b1936dbe25c2ff0e9805e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/LoggerTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLoggerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLoggerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLoggerTO.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -42,11 +42,11 @@ public void setLevel(final LoggerLevel level) {\n         this.level = level;\n     }\n \n-    @PathParam(\"key\")\n     public String getKey() {\n         return key;\n     }\n \n+    @PathParam(\"key\")\n     public void setKey(final String key) {\n         this.key = key;\n     }"},{"sha":"875ebc5ec7c4a61905cb625c39753f855957d0c6","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -56,34 +56,33 @@ public interface ConfigurationService extends JAXRSService {\n     ConfTO list();\n \n     /**\n-     * Returns configuration parameter with matching key.\n+     * Returns configuration parameter with matching schema.\n      *\n-     * @param key identifier of configuration to be read\n-     * @return configuration parameter with matching key\n+     * @param schema identifier of configuration to be read\n+     * @return configuration parameter with matching schema\n      */\n     @GET\n-    @Path(\"{key}\")\n+    @Path(\"{schema}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    AttrTO read(@NotNull @PathParam(\"key\") String key);\n+    AttrTO get(@NotNull @PathParam(\"schema\") String schema);\n \n     /**\n-     * Creates / updates the configuration parameter with the given key.\n+     * Creates / updates the configuration parameter with the given schema.\n      *\n-     * @param key parameter key\n      * @param value parameter value\n      */\n     @PUT\n-    @Path(\"{key}\")\n+    @Path(\"{schema}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void set(@NotNull @PathParam(\"key\") String key, @NotNull AttrTO value);\n+    void set(@NotNull AttrTO value);\n \n     /**\n-     * Deletes the configuration parameter with matching key.\n+     * Deletes the configuration parameter with matching schema.\n      *\n-     * @param key configuration parameter key\n+     * @param schema configuration parameter schema\n      */\n     @DELETE\n-    @Path(\"{key}\")\n+    @Path(\"{schema}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void delete(@NotNull @PathParam(\"key\") String key);\n+    void delete(@NotNull @PathParam(\"schema\") String schema);\n }"},{"sha":"7b25e9bc128cbb4683812fdb21c7b7d4dd1e6dd1","filename":"core/logic/pom.xml","status":"modified","additions":1,"deletions":85,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fpom.xml?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -93,51 +93,6 @@ under the License.\n       <artifactId>syncope-core-provisioning-java</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-    \n-    <!-- TEST -->\n-    <dependency>\n-      <groupId>com.icegreen</groupId>\n-      <artifactId>greenmail</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.core</groupId>\n-      <artifactId>syncope-core-workflow-java</artifactId>\n-      <version>${project.version}</version>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>javax.el</groupId>\n-      <artifactId>javax.el-api</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.core</groupId>\n-      <artifactId>syncope-core-persistence-jpa</artifactId>\n-      <version>${project.version}</version>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.slf4j</groupId>\n-      <artifactId>slf4j-simple</artifactId>\n-      <version>${slf4j.version}</version>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.h2database</groupId>\n-      <artifactId>h2</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-test</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n   </dependencies>\n \n   <build>\n@@ -147,47 +102,8 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n     </resources>\n-    <testResources>\n-      <testResource>\n-        <directory>${basedir}/src/test/resources</directory>\n-        <filtering>true</filtering>\n-      </testResource>\n-      <testResource>\n-        <directory>${basedir}/../persistence-jpa/src/main/resources</directory>\n-        <includes>\n-          <include>persistence.properties</include>\n-        </includes>\n-        <filtering>true</filtering>\n-      </testResource>\n-      <testResource>\n-        <directory>${basedir}/../persistence-jpa/src/test/resources</directory>\n-        <filtering>true</filtering>\n-      </testResource>\n-      <testResource>\n-        <directory>${basedir}/../provisioning-java/src/main/resources</directory>\n-        <includes>\n-          <include>connid.properties</include>\n-        </includes>\n-        <filtering>true</filtering>\n-      </testResource>\n-    </testResources>\n-    \n+        \n     <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-dependency-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <executions>\n-          <execution>\n-            <id>set-bundles</id>\n-            <phase>process-test-resources</phase>\n-            <goals>\n-              <goal>copy</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      \n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>"},{"sha":"b36c4eab4aca6f47e04fbdd9dc4165913bd450cb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConfigurationLogic.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -60,8 +60,8 @@ public class ConfigurationLogic extends AbstractTransactionalLogic<ConfTO> {\n     private GroupWorkflowAdapter gwfAdapter;\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_DELETE + \"')\")\n-    public void delete(final String key) {\n-        confDAO.delete(key);\n+    public void delete(final String schema) {\n+        confDAO.delete(schema);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_LIST + \"')\")\n@@ -70,18 +70,18 @@ public ConfTO list() {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public AttrTO read(final String key) {\n+    public AttrTO get(final String schema) {\n         AttrTO result;\n \n-        CPlainAttr conf = confDAO.find(key);\n+        CPlainAttr conf = confDAO.find(schema);\n         if (conf == null) {\n-            PlainSchema schema = plainSchemaDAO.find(key);\n-            if (schema == null) {\n-                throw new NotFoundException(\"Configuration key \" + key);\n+            PlainSchema plainSchema = plainSchemaDAO.find(schema);\n+            if (plainSchema == null) {\n+                throw new NotFoundException(\"Configuration schema \" + schema);\n             }\n \n             result = new AttrTO();\n-            result.setSchema(key);\n+            result.setSchema(schema);\n         } else {\n             result = binder.getAttrTO(conf);\n         }"},{"sha":"9c436aced805ca688a9961d50aac23a75bebf190","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -196,12 +196,12 @@ public TaskExecTO execute(final Long taskKey, final boolean dryRun) {\n         TaskExecTO result = null;\n         switch (taskUtils.getType()) {\n             case PROPAGATION:\n-                final TaskExec propExec = taskExecutor.execute((PropagationTask) task);\n+                TaskExec propExec = taskExecutor.execute((PropagationTask) task);\n                 result = binder.getTaskExecTO(propExec);\n                 break;\n \n             case NOTIFICATION:\n-                final TaskExec notExec = notificationJobDelegate.executeSingle((NotificationTask) task);\n+                TaskExec notExec = notificationJobDelegate.executeSingle((NotificationTask) task);\n                 result = binder.getTaskExecTO(notExec);\n                 break;\n "},{"sha":"33cb920d52ee640595196e20abf1cf5726f33c25","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/JobInstanceLoaderImpl.java","status":"modified","additions":47,"deletions":38,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -25,6 +25,8 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n@@ -229,59 +231,66 @@ public Integer getPriority() {\n     @Transactional\n     @Override\n     public void load() {\n-        AuthContextUtils.setFakeAuth(SyncopeConstants.MASTER_DOMAIN);\n-        String notificationJobCronExpression = StringUtils.EMPTY;\n-        long interruptMaxRetries = 1;\n-        try {\n-            CPlainAttr notificationJobCronExp =\n-                    confDAO.find(\"notificationjob.cronExpression\", NotificationJob.DEFAULT_CRON_EXP);\n-            if (!notificationJobCronExp.getValuesAsStrings().isEmpty()) {\n-                notificationJobCronExpression = notificationJobCronExp.getValuesAsStrings().get(0);\n-            }\n+        final Pair<String, Long> notificationConf = AuthContextUtils.execWithAuthContext(SyncopeConstants.MASTER_DOMAIN,\n+                new AuthContextUtils.Executable<Pair<String, Long>>() {\n \n-            interruptMaxRetries = confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue();\n-        } finally {\n-            AuthContextUtils.clearFakeAuth();\n-        }\n+                    @Override\n+                    public Pair<String, Long> exec() {\n+                        String notificationJobCronExpression = StringUtils.EMPTY;\n \n-        for (String domain : domainsHolder.getDomains().keySet()) {\n-            AuthContextUtils.setFakeAuth(domain);\n+                        CPlainAttr notificationJobCronExp =\n+                        confDAO.find(\"notificationjob.cronExpression\", NotificationJob.DEFAULT_CRON_EXP);\n+                        if (!notificationJobCronExp.getValuesAsStrings().isEmpty()) {\n+                            notificationJobCronExpression = notificationJobCronExp.getValuesAsStrings().get(0);\n+                        }\n \n-            try {\n-                // 1. jobs for SchedTasks\n-                Set<SchedTask> tasks = new HashSet<>(taskDAO.<SchedTask>findAll(TaskType.SCHEDULED));\n-                tasks.addAll(taskDAO.<SyncTask>findAll(TaskType.SYNCHRONIZATION));\n-                tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n-                for (SchedTask task : tasks) {\n-                    try {\n-                        registerJob(task, interruptMaxRetries);\n-                    } catch (Exception e) {\n-                        LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n+                        long interruptMaxRetries = confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).\n+                        getLongValue();\n+\n+                        return ImmutablePair.of(notificationJobCronExpression, interruptMaxRetries);\n+                    }\n+                });\n+\n+        for (String domain : domainsHolder.getDomains().keySet()) {\n+            AuthContextUtils.execWithAuthContext(domain, new AuthContextUtils.Executable<Void>() {\n+\n+                @Override\n+                public Void exec() {\n+                    // 1. jobs for SchedTasks\n+                    Set<SchedTask> tasks = new HashSet<>(taskDAO.<SchedTask>findAll(TaskType.SCHEDULED));\n+                    tasks.addAll(taskDAO.<SyncTask>findAll(TaskType.SYNCHRONIZATION));\n+                    tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n+                    for (SchedTask task : tasks) {\n+                        try {\n+                            registerJob(task, notificationConf.getRight());\n+                        } catch (Exception e) {\n+                            LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n+                        }\n                     }\n-                }\n \n-                // 2. ReportJobs\n-                for (Report report : reportDAO.findAll()) {\n-                    try {\n-                        registerJob(report);\n-                    } catch (Exception e) {\n-                        LOG.error(\"While loading job instance for report \" + report.getName(), e);\n+                    // 2. ReportJobs\n+                    for (Report report : reportDAO.findAll()) {\n+                        try {\n+                            registerJob(report);\n+                        } catch (Exception e) {\n+                            LOG.error(\"While loading job instance for report \" + report.getName(), e);\n+                        }\n                     }\n+\n+                    return null;\n                 }\n-            } finally {\n-                AuthContextUtils.clearFakeAuth();\n-            }\n+            });\n         }\n \n         // 3. NotificationJob\n-        if (StringUtils.isBlank(notificationJobCronExpression)) {\n+        if (StringUtils.isBlank(notificationConf.getLeft())) {\n             LOG.debug(\"Empty value provided for NotificationJob's cron, not registering anything on Quartz\");\n         } else {\n             LOG.debug(\"NotificationJob's cron expression: {} - registering Quartz job and trigger\",\n-                    notificationJobCronExpression);\n+                    notificationConf.getLeft());\n \n             try {\n-                registerNotificationJob(notificationJobCronExpression);\n+                registerNotificationJob(notificationConf.getLeft());\n             } catch (Exception e) {\n                 LOG.error(\"While loading NotificationJob instance\", e);\n             }"},{"sha":"adba78d1bb4e44e92697458538da721579a744fa","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/notification/NotificationJob.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -60,13 +60,22 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         LOG.debug(\"Waking up...\");\n \n         for (String domain : domainsHolder.getDomains().keySet()) {\n-            AuthContextUtils.setFakeAuth(domain);\n             try {\n-                delegate.execute();\n-            } catch (Exception e) {\n-                throw new JobExecutionException(e);\n-            } finally {\n-                AuthContextUtils.clearFakeAuth();\n+                AuthContextUtils.execWithAuthContext(domain, new AuthContextUtils.Executable<Void>() {\n+\n+                    @Override\n+                    public Void exec() {\n+                        try {\n+                            delegate.execute();\n+                        } catch (Exception e) {\n+                            throw new RuntimeException(e);\n+                        }\n+\n+                        return null;\n+                    }\n+                });\n+            } catch (RuntimeException e) {\n+                throw new JobExecutionException(e.getCause());\n             }\n         }\n "},{"sha":"763bab53c3cb9ff94bdaedbaf5e5009ff2144bd0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/notification/NotificationJobDelegate.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJobDelegate.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -187,8 +187,9 @@ public TaskExec executeSingle(final NotificationTask task) {\n \n         if (hasToBeRegistered(execution)) {\n             execution = notificationManager.storeExec(execution);\n-            if (retryPossible && (NotificationJob.Status.valueOf(execution.getStatus())\n-                    == NotificationJob.Status.NOT_SENT)) {\n+            if (retryPossible\n+                    && (NotificationJob.Status.valueOf(execution.getStatus()) == NotificationJob.Status.NOT_SENT)) {\n+\n                 handleRetries(execution);\n             }\n         } else {"},{"sha":"686953cb71c63443dbf76548cbecce2419f04a09","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJob.java","status":"modified","additions":16,"deletions":6,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -51,13 +51,23 @@ public void setReportKey(final Long reportKey) {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        AuthContextUtils.setFakeAuth(context.getMergedJobDataMap().getString(JobInstanceLoader.DOMAIN));\n         try {\n-            delegate.execute(reportKey);\n-        } catch (Exception e) {\n-            throw new JobExecutionException(e);\n-        } finally {\n-            AuthContextUtils.clearFakeAuth();\n+            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobInstanceLoader.DOMAIN),\n+                    new AuthContextUtils.Executable<Void>() {\n+\n+                        @Override\n+                        public Void exec() {\n+                            try {\n+                                delegate.execute(reportKey);\n+                            } catch (Exception e) {\n+                                throw new RuntimeException(e);\n+                            }\n+\n+                            return null;\n+                        }\n+                    });\n+        } catch (RuntimeException e) {\n+            throw new JobExecutionException(e.getCause());\n         }\n     }\n }"},{"sha":"32ae36720f337f6569f55ae85848619678197ae9","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/AbstractTest.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b2dc4d896b894bcd5728740a52601e40e8f17b3/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b2dc4d896b894bcd5728740a52601e40e8f17b3/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java?ref=4b2dc4d896b894bcd5728740a52601e40e8f17b3","patch":"@@ -1,40 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import org.junit.runner.RunWith;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.test.context.transaction.TransactionConfiguration;\n-\n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\n-    \"classpath:provisioningContext.xml\",\n-    \"classpath:logicContext.xml\",\n-    \"classpath:workflowContext.xml\",\n-    \"classpath:logicTest.xml\"\n-})\n-@TransactionConfiguration(transactionManager = \"MasterTransactionManager\")\n-public abstract class AbstractTest {\n-\n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractTest.class);\n-\n-}"},{"sha":"6c208a2928022786ab9d5a1a717a1f3da74a675a","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/NotificationTest.java","status":"removed","additions":0,"deletions":659,"changes":659,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b2dc4d896b894bcd5728740a52601e40e8f17b3/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b2dc4d896b894bcd5728740a52601e40e8f17b3/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java?ref=4b2dc4d896b894bcd5728740a52601e40e8f17b3","patch":"@@ -1,659 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-import com.icegreen.greenmail.util.GreenMail;\n-import com.icegreen.greenmail.util.ServerSetup;\n-import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Random;\n-import java.util.Set;\n-import java.util.UUID;\n-import javax.annotation.Resource;\n-import javax.mail.Flags.Flag;\n-import javax.mail.Folder;\n-import javax.mail.Message;\n-import javax.mail.Session;\n-import javax.mail.Store;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n-import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n-import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.NotificationTaskTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n-import org.apache.syncope.core.logic.notification.NotificationJob;\n-import org.apache.syncope.core.misc.security.SyncopeGrantedAuthority;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.mail.javamail.JavaMailSender;\n-import org.springframework.mail.javamail.JavaMailSenderImpl;\n-import org.springframework.security.authentication.TestingAuthenticationToken;\n-import org.springframework.security.core.Authentication;\n-import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.security.core.userdetails.User;\n-import org.springframework.security.core.userdetails.UserDetails;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Transactional\n-public class NotificationTest extends AbstractTest {\n-\n-    private static final String SMTP_HOST = \"localhost\";\n-\n-    private static final int SMTP_PORT = 2525;\n-\n-    private static final String POP3_HOST = \"localhost\";\n-\n-    private static final int POP3_PORT = 1110;\n-\n-    private static final String MAIL_ADDRESS = \"notificationtest@syncope.apache.org\";\n-\n-    private static final String MAIL_PASSWORD = \"password\";\n-\n-    private static GreenMail greenMail;\n-\n-    @Resource(name = \"adminUser\")\n-    private String adminUser;\n-\n-    @Autowired\n-    private NotificationDAO notificationDAO;\n-\n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n-\n-    @Autowired\n-    private TaskDAO taskDAO;\n-\n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private ConfDAO confDAO;\n-\n-    @Autowired\n-    private UserLogic userLogic;\n-\n-    @Autowired\n-    private GroupLogic groupLogic;\n-\n-    @Autowired\n-    private TaskLogic taskLogic;\n-\n-    @Autowired\n-    private NotificationJob notificationJob;\n-\n-    @Autowired\n-    private NotificationManager notificationManager;\n-\n-    @Autowired\n-    private JavaMailSender mailSender;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @BeforeClass\n-    public static void startGreenMail() {\n-        ServerSetup[] config = new ServerSetup[2];\n-        config[0] = new ServerSetup(SMTP_PORT, SMTP_HOST, ServerSetup.PROTOCOL_SMTP);\n-        config[1] = new ServerSetup(POP3_PORT, POP3_HOST, ServerSetup.PROTOCOL_POP3);\n-        greenMail = new GreenMail(config);\n-        greenMail.setUser(MAIL_ADDRESS, MAIL_PASSWORD);\n-        greenMail.start();\n-    }\n-\n-    @AfterClass\n-    public static void stopGreenMail() {\n-        if (greenMail != null) {\n-            greenMail.stop();\n-        }\n-    }\n-\n-    private static UserTO getUniqueSampleTO(final String email) {\n-        return getSampleTO(UUID.randomUUID().toString().substring(0, 8) + email);\n-    }\n-\n-    private static AttrTO attributeTO(final String schema, final String value) {\n-        AttrTO attr = new AttrTO();\n-        attr.setSchema(schema);\n-        attr.getValues().add(value);\n-        return attr;\n-    }\n-\n-    private static UserTO getSampleTO(final String email) {\n-        String uid = UUID.randomUUID().toString().substring(0, 8) + email;\n-        UserTO userTO = new UserTO();\n-        userTO.setPassword(\"password123\");\n-        userTO.setUsername(uid);\n-        userTO.setRealm(\"/even/two\");\n-\n-        userTO.getPlainAttrs().add(attributeTO(\"fullname\", uid));\n-        userTO.getPlainAttrs().add(attributeTO(\"firstname\", uid));\n-        userTO.getPlainAttrs().add(attributeTO(\"surname\", \"surname\"));\n-        userTO.getPlainAttrs().add(attributeTO(\"type\", \"a type\"));\n-        userTO.getPlainAttrs().add(attributeTO(\"userId\", uid));\n-        userTO.getPlainAttrs().add(attributeTO(\"email\", email));\n-        userTO.getPlainAttrs().add(attributeTO(\"loginDate\", new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())));\n-        userTO.getDerAttrs().add(attributeTO(\"cn\", null));\n-        userTO.getVirAttrs().add(attributeTO(\"virtualdata\", \"virtualvalue\"));\n-        return userTO;\n-    }\n-\n-    @Before\n-    public void setupSecurity() {\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(Entitlement.values(),\n-                new Transformer<String, GrantedAuthority>() {\n-\n-                    @Override\n-                    public GrantedAuthority transform(final String entitlement) {\n-                        return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-                    }\n-                }, new ArrayList<GrantedAuthority>());\n-\n-        UserDetails userDetails = new User(adminUser, \"FAKE_PASSWORD\", authorities);\n-        Authentication authentication = new TestingAuthenticationToken(userDetails, \"FAKE_PASSWORD\", authorities);\n-        SecurityContextHolder.getContext().setAuthentication(authentication);\n-    }\n-\n-    @Before\n-    public void setupSMTP() throws Exception {\n-        JavaMailSenderImpl sender = (JavaMailSenderImpl) mailSender;\n-        sender.setDefaultEncoding(SyncopeConstants.DEFAULT_ENCODING);\n-        sender.setHost(SMTP_HOST);\n-        sender.setPort(SMTP_PORT);\n-    }\n-\n-    private boolean verifyMail(final String sender, final String subject) throws Exception {\n-        LOG.info(\"Waiting for notification to be sent...\");\n-        try {\n-            Thread.sleep(1000);\n-        } catch (InterruptedException e) {\n-        }\n-\n-        boolean found = false;\n-        Session session = Session.getDefaultInstance(System.getProperties());\n-        Store store = session.getStore(\"pop3\");\n-        store.connect(POP3_HOST, POP3_PORT, MAIL_ADDRESS, MAIL_PASSWORD);\n-\n-        Folder inbox = store.getFolder(\"INBOX\");\n-        assertNotNull(inbox);\n-        inbox.open(Folder.READ_WRITE);\n-\n-        Message[] messages = inbox.getMessages();\n-        for (Message message : messages) {\n-            if (sender.equals(message.getFrom()[0].toString()) && subject.equals(message.getSubject())) {\n-                found = true;\n-                message.setFlag(Flag.DELETED, true);\n-            }\n-        }\n-\n-        inbox.close(true);\n-        store.close();\n-        return found;\n-    }\n-\n-    @Test\n-    public void notifyByMail() throws Exception {\n-        // 1. create suitable notification for subsequent tests\n-        Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-\n-        AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n-        about.setNotification(notification);\n-        notification.add(about);\n-        about.setAnyType(anyTypeDAO.findUser());\n-        about.set(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n-\n-        notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n-        notification.setSelfAsRecipient(true);\n-\n-        notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n-\n-        Random random = new Random(System.currentTimeMillis());\n-        String sender = \"syncopetest-\" + random.nextLong() + \"@syncope.apache.org\";\n-        notification.setSender(sender);\n-        String subject = \"Test notification \" + random.nextLong();\n-        notification.setSubject(subject);\n-        notification.setTemplate(\"optin\");\n-\n-        Notification actual = notificationDAO.save(notification);\n-        assertNotNull(actual);\n-\n-        notificationDAO.flush();\n-\n-        // 2. create user\n-        UserTO userTO = getSampleTO(MAIL_ADDRESS);\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(7);\n-        userTO.getMemberships().add(membershipTO);\n-\n-        userLogic.create(userTO, true);\n-\n-        // 3. force Quartz job execution and verify e-mail\n-        notificationJob.execute(null);\n-        assertTrue(verifyMail(sender, subject));\n-\n-        // 4. get NotificationTask id and text body\n-        Long taskId = null;\n-        String textBody = null;\n-        for (NotificationTask task : taskDAO.<NotificationTask>findAll(TaskType.NOTIFICATION)) {\n-            if (sender.equals(task.getSender())) {\n-                taskId = task.getKey();\n-                textBody = task.getTextBody();\n-            }\n-        }\n-        assertNotNull(taskId);\n-        assertNotNull(textBody);\n-        assertTrue(\"Notification mail text doesn't contain expected content.\",\n-                textBody.contains(\"Your email address is notificationtest@syncope.apache.org.\"));\n-        assertTrue(\"Notification mail text doesn't contain expected content.\",\n-                textBody.contains(\"Your email address inside a link: \"\n-                        + \"http://localhost/?email=notificationtest%40syncope.apache.org .\"));\n-\n-        // 5. execute Notification task and verify e-mail\n-        taskLogic.execute(taskId, false);\n-        assertTrue(verifyMail(sender, subject));\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE192() throws Exception {\n-        // 1. create suitable notification for subsequent tests\n-        Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-\n-        AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n-        about.setNotification(notification);\n-        notification.add(about);\n-        about.setAnyType(anyTypeDAO.findUser());\n-        about.set(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n-\n-        notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n-        notification.setSelfAsRecipient(true);\n-\n-        notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n-\n-        Random random = new Random(System.currentTimeMillis());\n-        String sender = \"syncope192-\" + random.nextLong() + \"@syncope.apache.org\";\n-        notification.setSender(sender);\n-        String subject = \"Test notification \" + random.nextLong();\n-        notification.setSubject(subject);\n-        notification.setTemplate(\"optin\");\n-        notification.setTraceLevel(TraceLevel.NONE);\n-\n-        Notification actual = notificationDAO.save(notification);\n-        assertNotNull(actual);\n-\n-        // 2. create user\n-        UserTO userTO = getSampleTO(MAIL_ADDRESS);\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(7);\n-        userTO.getMemberships().add(membershipTO);\n-\n-        userLogic.create(userTO, true);\n-\n-        // 3. force Quartz job execution and verify e-mail\n-        notificationJob.execute(null);\n-        assertTrue(verifyMail(sender, subject));\n-\n-        // 4. get NotificationTask id\n-        Long taskId = null;\n-        for (NotificationTask task : taskDAO.<NotificationTask>findAll(TaskType.NOTIFICATION)) {\n-            if (sender.equals(task.getSender())) {\n-                taskId = task.getKey();\n-            }\n-        }\n-        assertNotNull(taskId);\n-\n-        // 5. verify that last exec status was updated\n-        NotificationTaskTO task = (NotificationTaskTO) taskLogic.read(taskId);\n-        assertNotNull(task);\n-        assertTrue(task.getExecutions().isEmpty());\n-        assertTrue(task.isExecuted());\n-        assertTrue(StringUtils.isNotBlank(task.getLatestExecStatus()));\n-    }\n-\n-    @Test\n-    public void notifyByMailEmptyAbout() throws Exception {\n-        // 1. create suitable notification for subsequent tests\n-        Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-        notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n-        notification.setSelfAsRecipient(true);\n-\n-        notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n-\n-        Random random = new Random(System.currentTimeMillis());\n-        String sender = \"syncopetest-\" + random.nextLong() + \"@syncope.apache.org\";\n-        notification.setSender(sender);\n-        String subject = \"Test notification \" + random.nextLong();\n-        notification.setSubject(subject);\n-        notification.setTemplate(\"optin\");\n-\n-        Notification actual = notificationDAO.save(notification);\n-        assertNotNull(actual);\n-\n-        notificationDAO.flush();\n-\n-        // 2. create user\n-        UserTO userTO = getSampleTO(MAIL_ADDRESS);\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(7);\n-        userTO.getMemberships().add(membershipTO);\n-\n-        userLogic.create(userTO, true);\n-\n-        // 3. force Quartz job execution and verify e-mail\n-        notificationJob.execute(null);\n-        assertTrue(verifyMail(sender, subject));\n-\n-        // 4. get NotificationTask id\n-        Long taskId = null;\n-        for (NotificationTask task : taskDAO.<NotificationTask>findAll(TaskType.NOTIFICATION)) {\n-            if (sender.equals(task.getSender())) {\n-                taskId = task.getKey();\n-            }\n-        }\n-        assertNotNull(taskId);\n-\n-        // 5. execute Notification task and verify e-mail\n-        taskLogic.execute(taskId, false);\n-        assertTrue(verifyMail(sender, subject));\n-    }\n-\n-    @Test\n-    public void notifyByMailWithRetry() throws Exception {\n-        // 1. create suitable notification for subsequent tests\n-        Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-        notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n-        notification.setSelfAsRecipient(true);\n-\n-        notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n-\n-        Random random = new Random(System.currentTimeMillis());\n-        String sender = \"syncopetest-\" + random.nextLong() + \"@syncope.apache.org\";\n-        notification.setSender(sender);\n-        String subject = \"Test notification \" + random.nextLong();\n-        notification.setSubject(subject);\n-        notification.setTemplate(\"optin\");\n-\n-        Notification actual = notificationDAO.save(notification);\n-        assertNotNull(actual);\n-\n-        notificationDAO.flush();\n-\n-        // 2. create user\n-        UserTO userTO = getSampleTO(MAIL_ADDRESS);\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(7);\n-        userTO.getMemberships().add(membershipTO);\n-\n-        userLogic.create(userTO, true);\n-\n-        // 3. Set number of retries\n-        CPlainAttr maxRetries = entityFactory.newEntity(CPlainAttr.class);\n-        maxRetries.setSchema(plainSchemaDAO.find(\"notification.maxRetries\"));\n-        CPlainAttrValue maxRetriesValue = entityFactory.newEntity(CPlainAttrValue.class);\n-        maxRetries.add(\"5\", maxRetriesValue);\n-        confDAO.save(maxRetries);\n-        confDAO.flush();\n-\n-        // 4. Stop mail server to force error sending mail\n-        stopGreenMail();\n-\n-        // 5. force Quartz job execution multiple times\n-        for (int i = 0; i < 10; i++) {\n-            notificationJob.execute(null);\n-        }\n-\n-        // 6. get NotificationTask, count number of executions\n-        NotificationTask foundTask = null;\n-        for (NotificationTask task : taskDAO.<NotificationTask>findAll(TaskType.NOTIFICATION)) {\n-            if (sender.equals(task.getSender())) {\n-                foundTask = task;\n-            }\n-        }\n-        assertNotNull(foundTask);\n-        assertEquals(6, notificationManager.countExecutionsWithStatus(foundTask.getKey(),\n-                NotificationJob.Status.NOT_SENT.name()));\n-\n-        // 7. start mail server again\n-        startGreenMail();\n-\n-        // 8. reset number of retries\n-        maxRetries = entityFactory.newEntity(CPlainAttr.class);\n-        maxRetries.setSchema(plainSchemaDAO.find(\"notification.maxRetries\"));\n-        maxRetriesValue = entityFactory.newEntity(CPlainAttrValue.class);\n-        maxRetries.add(\"0\", maxRetriesValue);\n-        confDAO.save(maxRetries);\n-        confDAO.flush();\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE445() throws Exception {\n-        // 1. create suitable notification for subsequent tests\n-        Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-\n-        AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n-        about.setNotification(notification);\n-        notification.add(about);\n-        about.setAnyType(anyTypeDAO.findUser());\n-        about.set(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n-\n-        notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n-        notification.setSelfAsRecipient(true);\n-\n-        notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n-\n-        notification.getStaticRecipients().add(\"syncope445@syncope.apache.org\");\n-\n-        Random random = new Random(System.currentTimeMillis());\n-        String sender = \"syncopetest-\" + random.nextLong() + \"@syncope.apache.org\";\n-        notification.setSender(sender);\n-        String subject = \"Test notification \" + random.nextLong();\n-        notification.setSubject(subject);\n-        notification.setTemplate(\"optin\");\n-\n-        Notification actual = notificationDAO.save(notification);\n-        assertNotNull(actual);\n-\n-        notificationDAO.flush();\n-\n-        // 2. create user\n-        UserTO userTO = getSampleTO(MAIL_ADDRESS);\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(7);\n-        userTO.getMemberships().add(membershipTO);\n-\n-        userLogic.create(userTO, true);\n-\n-        // 3. force Quartz job execution and verify e-mail\n-        notificationJob.execute(null);\n-        assertTrue(verifyMail(sender, subject));\n-\n-        // 4. get NotificationTask id and text body\n-        Long taskId = null;\n-        String textBody = null;\n-        Set<String> recipients = null;\n-        for (NotificationTask task : taskDAO.<NotificationTask>findAll(TaskType.NOTIFICATION)) {\n-            if (sender.equals(task.getSender())) {\n-                taskId = task.getKey();\n-                textBody = task.getTextBody();\n-                recipients = task.getRecipients();\n-            }\n-        }\n-\n-        assertNotNull(taskId);\n-        assertNotNull(textBody);\n-        assertNotNull(recipients);\n-        assertTrue(recipients.contains(\"syncope445@syncope.apache.org\"));\n-\n-        // 5. execute Notification task and verify e-mail\n-        taskLogic.execute(taskId, false);\n-        assertTrue(verifyMail(sender, subject));\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE492() throws Exception {\n-        // 1. create suitable disabled notification for subsequent tests\n-        Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-\n-        AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n-        about.setNotification(notification);\n-        notification.add(about);\n-        about.setAnyType(anyTypeDAO.findUser());\n-        about.set(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n-\n-        notification.setSelfAsRecipient(true);\n-\n-        notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n-\n-        notification.getStaticRecipients().add(\"syncope492@syncope.apache.org\");\n-\n-        Random random = new Random(System.currentTimeMillis());\n-        String sender = \"syncopetest-\" + random.nextLong() + \"@syncope.apache.org\";\n-        notification.setSender(sender);\n-        String subject = \"Test notification \" + random.nextLong();\n-        notification.setSubject(subject);\n-        notification.setTemplate(\"optin\");\n-        notification.setActive(false);\n-\n-        Notification actual = notificationDAO.save(notification);\n-        assertNotNull(actual);\n-\n-        notificationDAO.flush();\n-\n-        final int tasksNumberBefore = taskDAO.findAll(TaskType.NOTIFICATION).size();\n-\n-        // 2. create user\n-        UserTO userTO = getUniqueSampleTO(MAIL_ADDRESS);\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(7);\n-        userTO.getMemberships().add(membershipTO);\n-\n-        userLogic.create(userTO, true);\n-\n-        // 3. force Quartz job execution\n-        notificationJob.execute(null);\n-\n-        // 4. check if number of tasks is not incremented\n-        assertEquals(tasksNumberBefore, taskDAO.findAll(TaskType.NOTIFICATION).size());\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE446() throws Exception {\n-        // 1. create suitable notification for subsequent tests\n-        Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.getEvents().add(\"[REST]:[GroupLogic]:[]:[create]:[SUCCESS]\");\n-\n-        AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n-        about.setNotification(notification);\n-        notification.add(about);\n-        about.setAnyType(anyTypeDAO.findGroup());\n-        about.set(new GroupFiqlSearchConditionBuilder().is(\"name\").equalTo(\"group446\").query());\n-\n-        notification.setSelfAsRecipient(false);\n-\n-        notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n-\n-        notification.getStaticRecipients().add(MAIL_ADDRESS);\n-\n-        Random random = new Random(System.currentTimeMillis());\n-        String sender = \"syncopetest-\" + random.nextLong() + \"@syncope.apache.org\";\n-        notification.setSender(sender);\n-        String subject = \"Test notification \" + random.nextLong();\n-        notification.setSubject(subject);\n-        notification.setTemplate(\"optin\");\n-\n-        Notification actual = notificationDAO.save(notification);\n-        assertNotNull(actual);\n-\n-        notificationDAO.flush();\n-\n-        // 2. create group\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setName(\"group446\");\n-        groupTO.setRealm(\"/even/two\");\n-\n-        GroupTO createdGroup = groupLogic.create(groupTO);\n-        assertNotNull(createdGroup);\n-\n-        // 3. force Quartz job execution and verify e-mail\n-        notificationJob.execute(null);\n-        assertTrue(verifyMail(sender, subject));\n-\n-        // 4. get NotificationTask id and text body\n-        Long taskId = null;\n-        String textBody = null;\n-        Set<String> recipients = null;\n-        for (NotificationTask task : taskDAO.<NotificationTask>findAll(TaskType.NOTIFICATION)) {\n-            if (sender.equals(task.getSender())) {\n-                taskId = task.getKey();\n-                textBody = task.getTextBody();\n-                recipients = task.getRecipients();\n-            }\n-        }\n-\n-        assertNotNull(taskId);\n-        assertNotNull(textBody);\n-        assertTrue(recipients != null && recipients.contains(MAIL_ADDRESS));\n-\n-        // 5. execute Notification task and verify e-mail\n-        taskLogic.execute(taskId, false);\n-        assertTrue(verifyMail(sender, subject));\n-    }\n-}"},{"sha":"fd6edd633938269563438319cb148b60e83788e6","filename":"core/logic/src/test/resources/logicTest.xml","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b2dc4d896b894bcd5728740a52601e40e8f17b3/core%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b2dc4d896b894bcd5728740a52601e40e8f17b3/core%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml?ref=4b2dc4d896b894bcd5728740a52601e40e8f17b3","patch":"@@ -1,59 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xmlns:context=\"http://www.springframework.org/schema/context\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-                           http://www.springframework.org/schema/beans/spring-beans.xsd\n-                           http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\">\n-    \n-  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n-    <property name=\"locations\">\n-      <list>\n-        <value>classpath:persistence.properties</value>\n-        <value>classpath:domains/*.properties</value>\n-        <value>classpath:security.properties</value>\n-        <value>classpath:connid.properties</value>\n-        <value>classpath:mail.properties</value>\n-        <value>classpath:logic.properties</value>\n-        <value>classpath:workflow.properties</value>\n-        <value>classpath:provisioning.properties</value>\n-      </list>\n-    </property>\n-    <property name=\"ignoreResourceNotFound\" value=\"true\"/>\n-    <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n-  </bean>\n-\n-  <bean class=\"org.apache.syncope.core.misc.spring.ApplicationContextProvider\"/>\n-\n-  <bean id=\"adminUser\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${adminUser}\"/>\n-  </bean>\n-  <bean id=\"anonymousUser\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${anonymousUser}\"/>\n-  </bean>\n-  \n-  <context:component-scan base-package=\"org.apache.syncope.core.misc.policy\"/>\n-  <context:component-scan base-package=\"org.apache.syncope.core.misc.security\"/>\n-\n-  <import resource=\"persistenceContext.xml\"/>\n-  \n-</beans>"},{"sha":"595dda38f592fa5df52a6d32d9ca3be2b4096975","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthContextUtils.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -90,7 +90,7 @@ public static String getDomain() {\n         return domainKey;\n     }\n \n-    public static void setFakeAuth(final String domain) {\n+    private static void setFakeAuth(final String domain) {\n         List<GrantedAuthority> authorities = CollectionUtils.collect(Entitlement.values(),\n                 new Transformer<String, GrantedAuthority>() {\n \n@@ -107,17 +107,13 @@ public GrantedAuthority transform(final String entitlement) {\n         SecurityContextHolder.getContext().setAuthentication(auth);\n     }\n \n-    public static void clearFakeAuth() {\n-        SecurityContextHolder.clearContext();\n-    }\n-\n     public static <T> T execWithAuthContext(final String domainKey, final Executable<T> executable) {\n         SecurityContext ctx = SecurityContextHolder.getContext();\n         setFakeAuth(domainKey);\n         try {\n             return executable.exec();\n         } finally {\n-            clearFakeAuth();\n+            SecurityContextHolder.clearContext();\n             SecurityContextHolder.setContext(ctx);\n         }\n     }"},{"sha":"2a21281b81cea3682de5f331d2847ea018202382","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/spring/ApplicationContextProvider.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.core.misc.spring;\n \n+import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n \n public class ApplicationContextProvider implements ApplicationContextAware {\n \n@@ -41,8 +43,16 @@ public static DefaultListableBeanFactory getBeanFactory() {\n                 : BEAN_FACTORY;\n     }\n \n+    private static void enableDomainTransactionInterceptor() {\n+        for (String name : getBeanFactory().getBeanNamesForType(TransactionInterceptor.class)) {\n+            BeanDefinition bd = getBeanFactory().getBeanDefinition(name);\n+            bd.setBeanClassName(DomainTransactionInterceptor.class.getName());\n+        }\n+    }\n+\n     public static void setBeanFactory(final DefaultListableBeanFactory beanFactory) {\n         BEAN_FACTORY = beanFactory;\n+        enableDomainTransactionInterceptor();\n     }\n \n     /**\n@@ -53,5 +63,6 @@ public static void setBeanFactory(final DefaultListableBeanFactory beanFactory)\n     @Override\n     public void setApplicationContext(final ApplicationContext ctx) {\n         CTX = (ConfigurableApplicationContext) ctx;\n+        enableDomainTransactionInterceptor();\n     }\n }"},{"sha":"e23900221675a4dfe7afe0887a8fd4aff8f71575","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/spring/DomainTransactionInterceptor.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FDomainTransactionInterceptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FDomainTransactionInterceptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FDomainTransactionInterceptor.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.spring;\n+package org.apache.syncope.core.misc.spring;\n \n import java.lang.reflect.Method;\n import org.aopalliance.intercept.MethodInvocation;","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/DomainTransactionInterceptor.java"},{"sha":"e9834263280302f6965c70758ac00c27fb2ca5fd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/SpringComponentReplacer.java","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b2dc4d896b894bcd5728740a52601e40e8f17b3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FSpringComponentReplacer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b2dc4d896b894bcd5728740a52601e40e8f17b3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FSpringComponentReplacer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FSpringComponentReplacer.java?ref=4b2dc4d896b894bcd5728740a52601e40e8f17b3","patch":"@@ -1,42 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.spring;\n-\n-import org.springframework.beans.BeansException;\n-import org.springframework.beans.factory.config.BeanDefinition;\n-import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n-import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.interceptor.TransactionInterceptor;\n-\n-/**\n- * Hack for dynamically replacing standard {@link TransactionInterceptor} with\n- * {@link DomainTransactionInterceptor} in Spring context.\n- */\n-@Component\n-public class SpringComponentReplacer implements BeanFactoryPostProcessor {\n-\n-    @Override\n-    public void postProcessBeanFactory(final ConfigurableListableBeanFactory factory) throws BeansException {\n-        for (String name : factory.getBeanNamesForType(TransactionInterceptor.class)) {\n-            BeanDefinition bd = factory.getBeanDefinition(name);\n-            bd.setBeanClassName(DomainTransactionInterceptor.class.getName());\n-        }\n-    }\n-}"},{"sha":"bffe55f8267b88ab1cc483dac5914e81fee4e0ea","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -28,11 +28,9 @@\n import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.test.context.transaction.TransactionConfiguration;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = { \"classpath:persistenceTest.xml\" })\n-@TransactionConfiguration(transactionManager = \"MasterTransactionManager\")\n public abstract class AbstractTest {\n \n     @Autowired"},{"sha":"cd6b535bad287177d68f70374be2df47ab4bff45","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyObjectTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -33,7 +33,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class AnyObjectTest extends AbstractTest {\n \n     @Autowired"},{"sha":"b5f99cebaac7b7827ef44216487a0ddd1246bb0f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -53,7 +53,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class AnySearchTest extends AbstractTest {\n \n     @Autowired"},{"sha":"1bdae2d68cd4ca978b613ecee18ff56ed083339a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeClassTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeClassTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeClassTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeClassTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -32,7 +32,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class AnyTypeClassTest extends AbstractTest {\n \n     @Autowired"},{"sha":"05026a20ebe169630feee590bc0a2cc04e7b9edb","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -34,7 +34,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class AnyTypeTest extends AbstractTest {\n \n     @Autowired"},{"sha":"38332b6912eaa38ea8421079492712c363dd597a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConfTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -38,7 +38,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class ConfTest extends AbstractTest {\n \n     @Autowired"},{"sha":"f3ade5e888778d87190a1036f370031563a0aece","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConnInstanceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -37,7 +37,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class ConnInstanceTest extends AbstractTest {\n \n     @Autowired"},{"sha":"3fb15b747ebdbb183793b566c04bf031cafaeca2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerAttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerAttrTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -43,7 +43,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class DerAttrTest extends AbstractTest {\n \n     @Autowired"},{"sha":"abe3de3da1b80182652a7ba471ad399c56050a9b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -34,7 +34,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class DerSchemaTest extends AbstractTest {\n \n     @Autowired"},{"sha":"2924d343012fd0a08183c3995e94315fb6c800ed","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DomainTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -33,7 +33,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class DomainTest extends AbstractTest {\n \n     @Autowired"},{"sha":"0b24a256aaa36d15fdd84a79564b9d407be434a5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GroupTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -32,7 +32,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class GroupTest extends AbstractTest {\n \n     @Autowired"},{"sha":"074c26ece1e757c87e1454f2b551549b06e6ae3a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -44,11 +44,9 @@\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.test.context.transaction.TransactionConfiguration;\n import org.springframework.transaction.annotation.Transactional;\n \n-@TransactionConfiguration(transactionManager = \"TwoTransactionManager\")\n-@Transactional\n+@Transactional(\"Two\")\n public class MultitenancyTest extends AbstractTest {\n \n     @Autowired\n@@ -85,7 +83,7 @@ public static void unsetAuthContext() {\n \n     @Test\n     public void readPlainSchemas() {\n-        assertEquals(18, plainSchemaDAO.findAll().size());\n+        assertEquals(16, plainSchemaDAO.findAll().size());\n     }\n \n     @Test"},{"sha":"b97cbd455d9d8c4f71cab42797e12c44d911731a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/NotificationTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FNotificationTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -33,7 +33,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class NotificationTest extends AbstractTest {\n \n     @Autowired"},{"sha":"fe53386542e991709d8383ccf2fbe39e87fd882c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -46,7 +46,7 @@\n import org.springframework.security.crypto.codec.Base64;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class PlainAttrTest extends AbstractTest {\n \n     @Autowired"},{"sha":"c42546056af79c4a0a481f0597f213267dfedf53","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -38,7 +38,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class PlainSchemaTest extends AbstractTest {\n \n     @Autowired"},{"sha":"c75a14891f38b6f8026fa3a40508d29fa60c8c7c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -38,7 +38,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class PolicyTest extends AbstractTest {\n \n     @Autowired"},{"sha":"4eb611af0132c97a885323344de0a32bfcec35aa","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RealmTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -41,7 +41,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class RealmTest extends AbstractTest {\n \n     @Autowired"},{"sha":"98089625f12bbab88b916a0c2a8c911780a0727d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RelationshipTypeTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -35,7 +35,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class RelationshipTypeTest extends AbstractTest {\n \n     @Autowired"},{"sha":"11449816f15c8284c70a3006ec1faf3d0165e553","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ReportTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -31,7 +31,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class ReportTest extends AbstractTest {\n \n     @Autowired"},{"sha":"bdfd645b5a36981b123727c55076994eca73a05b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -46,7 +46,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class ResourceTest extends AbstractTest {\n \n     @Autowired"},{"sha":"2368e383dcd4dc5ddf6d8a8ac8533b7e995fb453","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RoleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -34,7 +34,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class RoleTest extends AbstractTest {\n \n     @Autowired"},{"sha":"08466b1bf86b61ad879b29c3163f26e9e4aa47b0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SecurityQuestionTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSecurityQuestionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSecurityQuestionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSecurityQuestionTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -30,7 +30,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class SecurityQuestionTest extends AbstractTest {\n \n     @Autowired"},{"sha":"e840a06593f50888b5caf9913cdd98564f6b619c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskExecTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -35,7 +35,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class TaskExecTest extends AbstractTest {\n \n     @Autowired"},{"sha":"2fa4a8c272981cb2b52019e5ab3c191fe8795ef2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -47,7 +47,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class TaskTest extends AbstractTest {\n \n     @Autowired"},{"sha":"7c62ab2714bcfe1172c3c14673bbd1237bbf35d8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -39,7 +39,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class UserTest extends AbstractTest {\n \n     @Autowired"},{"sha":"fd13cd67240419345947dd1119259852fec023c9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirAttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirAttrTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -37,7 +37,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class VirAttrTest extends AbstractTest {\n \n     @Autowired"},{"sha":"10970d1b5270edc0838919b38fc83271f996fe31","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -34,7 +34,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class VirSchemaTest extends AbstractTest {\n \n     @Autowired"},{"sha":"6c59ad0fd956a75be651b4482dcf5eaa30f2af24","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -44,7 +44,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class AnySearchTest extends AbstractTest {\n \n     @Autowired"},{"sha":"cef688b534ff2be2fc26aa4694e34dd29cd4473d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeClassTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -33,7 +33,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class AnyTypeClassTest extends AbstractTest {\n \n     @Autowired"},{"sha":"0f25f202f3a8ea1a34d24c7ed839c68ad52b4294","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -31,7 +31,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class AnyTypeTest extends AbstractTest {\n \n     @Autowired"},{"sha":"d9f79fc89901e8d0a68da1e3b50a48ea3e14822f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConnInstanceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -35,7 +35,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class ConnInstanceTest extends AbstractTest {\n \n     @Autowired"},{"sha":"f4529f8780081cf6a1b3b25c304b7ee4977277e1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/DerSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDerSchemaTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -30,7 +30,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class DerSchemaTest extends AbstractTest {\n \n     @Autowired"},{"sha":"57e3d1fb101a56ac7cb70adf875888f112074401","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -28,7 +28,6 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n-import javax.persistence.EntityManager;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n@@ -59,7 +58,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class GroupTest extends AbstractTest {\n \n     @Autowired"},{"sha":"82147a245b6df905846dcbf24fc5d1db7b37cda4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainAttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -47,7 +47,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class PlainAttrTest extends AbstractTest {\n \n     @Autowired"},{"sha":"ab0b88b3f00511e24e3a1dd0e4d40c1c7649621c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -40,7 +40,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class PlainSchemaTest extends AbstractTest {\n \n     @Autowired"},{"sha":"5bf1b8302aa98724b7a3011fe742bb2a04c977ef","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RealmTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -31,7 +31,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class RealmTest extends AbstractTest {\n \n     @Autowired"},{"sha":"f143fd8a74560494efc06311e80396e0724e34a3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ReportTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -35,7 +35,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class ReportTest extends AbstractTest {\n \n     @Autowired"},{"sha":"967b7190902de36a174285b616c092c77c2b3793","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -28,7 +28,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import javax.persistence.EntityManager;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -53,7 +52,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class ResourceTest extends AbstractTest {\n \n     @Autowired"},{"sha":"2ca08bba0f782c62340ea0a180885aec29b2a1aa","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -46,7 +46,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class RoleTest extends AbstractTest {\n \n     @Autowired"},{"sha":"14c463c2445fd7e4ac5a9f072d9515e462c491ac","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/SecurityQuestionTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FSecurityQuestionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FSecurityQuestionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FSecurityQuestionTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -28,7 +28,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class SecurityQuestionTest extends AbstractTest {\n \n     @Autowired"},{"sha":"03ff4c682ccd5f610d9fa3fb3d1c5e97f65cffdc","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -55,7 +55,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class TaskTest extends AbstractTest {\n \n     @Autowired"},{"sha":"62bba9ccad3d65e44233c78dd9e9a7ad31ec82f1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -42,7 +42,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class UserTest extends AbstractTest {\n \n     @Autowired"},{"sha":"37ff60f9bbda085493db8521969294a7c5d1c6a0","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -30,13 +30,13 @@ under the License.\n   <CPlainAttrValue id=\"1\" attribute_id=\"1\" stringValue=\"SHA1\"/>\n \n   <!-- notificationjob.cronExpression:\n-  + not existing: NotificationJob runs according to Notification.DEFAULT_CRON_EXP\n+  + not existing: NotificationJob runs according to NotificationJob.DEFAULT_CRON_EXP\n   + provided as empty string: NotificationJob disabled\n   + provided as non-empty string: NotificationJob runs according to the given value -->\n   <PlainSchema name=\"notificationjob.cronExpression\" type=\"String\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"2\" owner_id=\"1\" schema_name=\"notificationjob.cronExpression\"/>\n-  <CPlainAttrValue id=\"2\" attribute_id=\"2\" stringValue=\"\"/>\n+  <CPlainAttrValue id=\"2\" attribute_id=\"2\" stringValue=\"0/5 * * * * ?\"/>\n   \n   <PlainSchema name=\"notification.maxRetries\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>"},{"sha":"b4c5d9b2146e729a43fe8de0b15b3abfc1fca9f4","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -29,20 +29,6 @@ under the License.\n   <CPlainAttr id=\"1\" owner_id=\"1\" schema_name=\"password.cipher.algorithm\"/>\n   <CPlainAttrValue id=\"1\" attribute_id=\"1\" stringValue=\"SHA1\"/>\n \n-  <!-- notificationjob.cronExpression:\n-  + not existing: NotificationJob runs according to Notification.DEFAULT_CRON_EXP\n-  + provided as empty string: NotificationJob disabled\n-  + provided as non-empty string: NotificationJob runs according to the given value -->\n-  <PlainSchema name=\"notificationjob.cronExpression\" type=\"String\"\n-               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CPlainAttr id=\"2\" owner_id=\"1\" schema_name=\"notificationjob.cronExpression\"/>\n-  <CPlainAttrValue id=\"2\" attribute_id=\"2\" stringValue=\"\"/>\n-\n-  <PlainSchema name=\"notification.maxRetries\" type=\"Long\"\n-               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CPlainAttr id=\"3\" owner_id=\"1\" schema_name=\"notification.maxRetries\"/>\n-  <CPlainAttrValue id=\"3\" attribute_id=\"3\" longValue=\"3\"/>\n-\n   <PlainSchema name=\"token.length\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"4\" owner_id=\"1\" schema_name=\"token.length\"/>"},{"sha":"a38ba5004aff2b7de985febdea61f1cee1439b60","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -25,6 +25,7 @@\n import java.util.Set;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n@@ -56,7 +57,8 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {\n     private ExternalResourceDAO resourceDAO;\n \n     private String getBeanName(final ExternalResource resource) {\n-        return String.format(\"connInstance-%d-%s\", resource.getConnector().getKey(), resource.getKey());\n+        return String.format(\"connInstance-%s-%d-%s\",\n+                AuthContextUtils.getDomain(), resource.getConnector().getKey(), resource.getKey());\n     }\n \n     @Override\n@@ -71,7 +73,7 @@ public Connector getConnector(final ExternalResource resource) {\n \n     @Override\n     public Connector createConnector(final ConnInstance connInstance, final Set<ConnConfProperty> configuration) {\n-        final ConnInstance connInstanceClone = SerializationUtils.clone(connInstance);\n+        ConnInstance connInstanceClone = SerializationUtils.clone(connInstance);\n \n         connInstanceClone.setConfiguration(configuration);\n \n@@ -82,10 +84,11 @@ public Connector createConnector(final ConnInstance connInstance, final Set<Conn\n     }\n \n     @Override\n-    public ConnInstance getOverriddenConnInstance(final ConnInstance connInstance,\n-            final Set<ConnConfProperty> overridden) {\n-        final Set<ConnConfProperty> configuration = new HashSet<>();\n-        final Map<String, ConnConfProperty> overridable = new HashMap<>();\n+    public ConnInstance getOverriddenConnInstance(\n+            final ConnInstance connInstance, final Set<ConnConfProperty> overridden) {\n+\n+        Set<ConnConfProperty> configuration = new HashSet<>();\n+        Map<String, ConnConfProperty> overridable = new HashMap<>();\n \n         // add not overridable properties\n         for (ConnConfProperty prop : connInstance.getConfiguration()) {\n@@ -114,12 +117,12 @@ public ConnInstance getOverriddenConnInstance(final ConnInstance connInstance,\n \n     @Override\n     public void registerConnector(final ExternalResource resource) {\n-        final ConnInstance connInstance = getOverriddenConnInstance(\n+        ConnInstance connInstance = getOverriddenConnInstance(\n                 SerializationUtils.clone(resource.getConnector()), resource.getConnInstanceConfiguration());\n-        final Connector connector = createConnector(resource.getConnector(), connInstance.getConfiguration());\n+        Connector connector = createConnector(resource.getConnector(), connInstance.getConfiguration());\n         LOG.debug(\"Connector to be registered: {}\", connector);\n \n-        final String beanName = getBeanName(resource);\n+        String beanName = getBeanName(resource);\n \n         if (ApplicationContextProvider.getBeanFactory().containsSingleton(beanName)) {\n             unregisterConnector(beanName);"},{"sha":"dbfeca59b66deec092c54700f1b3fcad62f3f6ae","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":22,"deletions":10,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -82,17 +82,29 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         this.runningThread.set(Thread.currentThread());\n         this.interruptMaxRetries = context.getMergedJobDataMap().getLong(INTERRUPT_MAX_RETRIES_KEY);\n \n-        AuthContextUtils.setFakeAuth(context.getMergedJobDataMap().getString(JobInstanceLoader.DOMAIN));\n         try {\n-            Class<?> delegateClass = ClassUtils.getClass(context.getMergedJobDataMap().getString(DELEGATE_CLASS_KEY));\n-\n-            ((SchedTaskJobDelegate) ApplicationContextProvider.getBeanFactory().\n-                    createBean(delegateClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false)).\n-                    execute(taskKey, context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY));\n-        } catch (Exception e) {\n-            throw new JobExecutionException(e);\n-        } finally {\n-            AuthContextUtils.clearFakeAuth();\n+            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobInstanceLoader.DOMAIN),\n+                    new AuthContextUtils.Executable<Void>() {\n+\n+                        @Override\n+                        public Void exec() {\n+                            try {\n+                                Class<?> delegateClass =\n+                                ClassUtils.getClass(context.getMergedJobDataMap().getString(DELEGATE_CLASS_KEY));\n+\n+                                ((SchedTaskJobDelegate) ApplicationContextProvider.getBeanFactory().\n+                                createBean(delegateClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false)).\n+                                execute(taskKey, context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY));\n+                            } catch (Exception e) {\n+                                throw new RuntimeException(e);\n+                            }\n+\n+                            return null;\n+                        }\n+                    }\n+            );\n+        } catch (RuntimeException e) {\n+            throw new JobExecutionException(e.getCause());\n         }\n     }\n "},{"sha":"412b9780f31ace42065be8611f3c533dde2fcac9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -375,21 +375,21 @@ public TaskExec storeExec(final TaskExec execution) {\n         task.addExec(execution);\n         task.setExecuted(true);\n         taskDAO.save(task);\n-        // this flush call is needed to generate a value for the execution id\n+        // this flush call is needed to generate a value for the execution key\n         taskDAO.flush();\n         return execution;\n     }\n \n     @Override\n-    public void setTaskExecuted(final Long taskId, final boolean executed) {\n-        NotificationTask task = taskDAO.find(taskId);\n+    public void setTaskExecuted(final Long taskKey, final boolean executed) {\n+        NotificationTask task = taskDAO.find(taskKey);\n         task.setExecuted(executed);\n         taskDAO.save(task);\n     }\n \n     @Override\n-    public long countExecutionsWithStatus(final Long taskId, final String status) {\n-        NotificationTask task = taskDAO.find(taskId);\n+    public long countExecutionsWithStatus(final Long taskKey, final String status) {\n+        NotificationTask task = taskDAO.find(taskKey);\n         long count = 0;\n         for (TaskExec taskExec : task.getExecs()) {\n             if (status == null) {"},{"sha":"e26f2381922baf071b6b5a0d16d474b62e6b1a1c","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/AbstractTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -21,7 +21,6 @@\n import org.junit.runner.RunWith;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.test.context.transaction.TransactionConfiguration;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\n@@ -30,6 +29,5 @@\n     \"classpath:workflowContext.xml\",\n     \"classpath:provisioningTest.xml\"\n })\n-@TransactionConfiguration(transactionManager = \"MasterTransactionManager\")\n public abstract class AbstractTest {\n }"},{"sha":"205aa2fa1a1554cfb649b3df59f59d9b2ae98ed0","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ConnectorManagerTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -31,7 +31,7 @@\n import org.springframework.test.util.ReflectionTestUtils;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class ConnectorManagerTest extends AbstractTest {\n \n     private ConnectorManager connManager;"},{"sha":"8bf191e16fc72f09589d26ad6aa74f2a0d9d429d","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MappingTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -33,7 +33,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class MappingTest extends AbstractTest {\n \n     @Autowired"},{"sha":"13f155770ab2f7adf9034467ed00bda414000e05","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ResourceDataBinderTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -43,7 +43,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional\n+@Transactional(\"Master\")\n public class ResourceDataBinderTest extends AbstractTest {\n \n     @Autowired"},{"sha":"09e077951c73b4960ada86e93aef9facf00d294c","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConfigurationServiceImpl.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConfigurationServiceImpl.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -55,8 +55,8 @@ public void write(final OutputStream os) throws IOException {\n     }\n \n     @Override\n-    public void delete(final String key) {\n-        logic.delete(key);\n+    public void delete(final String schema) {\n+        logic.delete(schema);\n     }\n \n     @Override\n@@ -65,13 +65,12 @@ public ConfTO list() {\n     }\n \n     @Override\n-    public AttrTO read(final String key) {\n-        return logic.read(key);\n+    public AttrTO get(final String schema) {\n+        return logic.get(schema);\n     }\n \n     @Override\n-    public void set(final String key, final AttrTO value) {\n-        value.setSchema(key);\n+    public void set(final AttrTO value) {\n         logic.set(value);\n     }\n }"},{"sha":"1339153a5b68f80b80de6c4b8af5204e22966d33","filename":"fit/core-reference/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -101,6 +101,11 @@ under the License.\n     </dependency>\n     \n     <!-- TEST -->\n+    <dependency>\n+      <groupId>com.icegreen</groupId>\n+      <artifactId>greenmail</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope.fit</groupId>\n       <artifactId>syncope-fit-build-tools</artifactId>"},{"sha":"66f2e90ed8c6c1c1aa6faf291c624156a4231748","filename":"fit/core-reference/src/main/resources/mail.properties","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmail.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmail.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmail.properties?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -0,0 +1,25 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+templates.directory=${conf.directory}\n+smtpHost=localhost\n+smtpPort=2525\n+smtpUser=\n+smtpPassword=\n+smtpProtocol=smtp\n+smtpEncoding=UTF-8\n+smtpConnectionTimeout=3000\n+mailDebug=false"},{"sha":"fe79eda6147f676f5e7025fa7ffa54249dcd633d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":26,"deletions":11,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -33,6 +33,8 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n@@ -41,6 +43,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.core.logic.notification.NotificationJob;\n \n public abstract class AbstractTaskITCase extends AbstractITCase {\n \n@@ -88,21 +91,21 @@ protected void removeTestUsers() {\n         }\n     }\n \n-    public static TaskExecTO execProvisioningTask(\n-            final TaskService taskService, final Long taskKey, final int maxWaitSeconds, final boolean dryRun) {\n+    protected static TaskExecTO execTask(final TaskService taskService, final Long taskKey, final String initialStatus,\n+            final int maxWaitSeconds, final boolean dryRun) {\n \n         AbstractTaskTO taskTO = taskService.read(taskKey);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n \n         int preSyncSize = taskTO.getExecutions().size();\n         TaskExecTO execution = taskService.execute(taskTO.getKey(), dryRun);\n-        assertEquals(\"JOB_FIRED\", execution.getStatus());\n+        assertEquals(initialStatus, execution.getStatus());\n \n         int i = 0;\n         int maxit = maxWaitSeconds;\n \n-        // wait for sync completion (executions incremented)\n+        // wait for completion (executions incremented)\n         do {\n             try {\n                 Thread.sleep(1000);\n@@ -122,6 +125,18 @@ public static TaskExecTO execProvisioningTask(\n         return taskTO.getExecutions().get(taskTO.getExecutions().size() - 1);\n     }\n \n+    public static TaskExecTO execProvisioningTask(\n+            final TaskService taskService, final Long taskKey, final int maxWaitSeconds, final boolean dryRun) {\n+\n+        return execTask(taskService, taskKey, \"JOB_FIRED\", maxWaitSeconds, dryRun);\n+    }\n+\n+    protected static TaskExecTO execNotificationTask(\n+            final TaskService taskService, final Long taskKey, final int maxWaitSeconds) {\n+\n+        return execTask(taskService, taskKey, NotificationJob.Status.SENT.name(), maxWaitSeconds, false);\n+    }\n+\n     protected Map<Long, TaskExecTO> execProvisioningTasks(final TaskService taskService,\n             final Set<Long> taskKeys, final int maxWaitSeconds, final boolean dryRun) throws Exception {\n \n@@ -154,13 +169,13 @@ protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n                 taskService.list(TaskType.NOTIFICATION, SyncopeClient.getListQueryBuilder().build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n-        NotificationTaskTO taskTO = null;\n-        for (NotificationTaskTO task : tasks.getResult()) {\n-            if (sender.equals(task.getSender())) {\n-                taskTO = task;\n+\n+        return CollectionUtils.find(tasks.getResult(), new Predicate<NotificationTaskTO>() {\n+\n+            @Override\n+            public boolean evaluate(final NotificationTaskTO task) {\n+                return sender.equals(task.getSender());\n             }\n-        }\n-        return taskTO;\n+        });\n     }\n-\n }"},{"sha":"71317e4d939ed8c775b15836301947cd0fca0a7d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConfigurationITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -58,9 +58,9 @@ public void create() {\n         conf.setSchema(testKey.getKey());\n         conf.getValues().add(\"testValue\");\n \n-        configurationService.set(conf.getSchema(), conf);\n+        configurationService.set(conf);\n \n-        AttrTO actual = configurationService.read(conf.getSchema());\n+        AttrTO actual = configurationService.get(conf.getSchema());\n         assertEquals(actual, conf);\n     }\n \n@@ -72,18 +72,18 @@ public void delete() throws UnsupportedEncodingException {\n             assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n         }\n \n-        AttrTO tokenLength = configurationService.read(\"token.length\");\n+        AttrTO tokenLength = configurationService.get(\"token.length\");\n \n         configurationService.delete(\"token.length\");\n         try {\n-            configurationService.read(\"token.length\");\n+            configurationService.get(\"token.length\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n         }\n \n-        configurationService.set(tokenLength.getSchema(), tokenLength);\n+        configurationService.set(tokenLength);\n \n-        AttrTO actual = configurationService.read(tokenLength.getSchema());\n+        AttrTO actual = configurationService.get(tokenLength.getSchema());\n         assertEquals(actual, tokenLength);\n     }\n \n@@ -98,20 +98,20 @@ public void list() {\n \n     @Test\n     public void read() {\n-        AttrTO conf = configurationService.read(\"token.expireTime\");\n+        AttrTO conf = configurationService.get(\"token.expireTime\");\n         assertNotNull(conf);\n     }\n \n     @Test\n     public void update() {\n-        AttrTO expireTime = configurationService.read(\"token.expireTime\");\n+        AttrTO expireTime = configurationService.get(\"token.expireTime\");\n         int value = Integer.parseInt(expireTime.getValues().get(0));\n         value++;\n         expireTime.getValues().set(0, value + \"\");\n \n-        configurationService.set(expireTime.getSchema(), expireTime);\n+        configurationService.set(expireTime);\n \n-        AttrTO newConfigurationTO = configurationService.read(expireTime.getSchema());\n+        AttrTO newConfigurationTO = configurationService.get(expireTime.getSchema());\n         assertEquals(expireTime, newConfigurationTO);\n     }\n "},{"sha":"9ca7b501ec1f892b43d5d0424077c69fff04cae9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/MultitenancyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -98,7 +98,7 @@ public void masterOnly() {\n \n     @Test\n     public void readPlainSchemas() {\n-        assertEquals(18, adminClient.getService(SchemaService.class).list(SchemaType.PLAIN).size());\n+        assertEquals(16, adminClient.getService(SchemaService.class).list(SchemaType.PLAIN).size());\n     }\n \n     @Test"},{"sha":"02c4299f9d6a4d083eb4d3ba96c9b3e21b182f42","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/NotificationTaskITCase.java","status":"modified","additions":285,"deletions":32,"changes":317,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -21,10 +21,25 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import com.icegreen.greenmail.util.GreenMail;\n+import com.icegreen.greenmail.util.ServerSetup;\n+import java.io.InputStream;\n+import java.util.Properties;\n+import javax.mail.Flags;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.Session;\n+import javax.mail.Store;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n@@ -34,45 +49,176 @@\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.core.logic.notification.NotificationJob;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class NotificationTaskITCase extends AbstractTaskITCase {\n \n+    private static final String MAIL_ADDRESS = \"notificationtest@syncope.apache.org\";\n+\n+    private static final String POP3_HOST = \"localhost\";\n+\n+    private static final int POP3_PORT = 1110;\n+\n+    private static String SMTP_HOST;\n+\n+    private static int SMTP_PORT;\n+\n+    private static GreenMail greenMail;\n+\n+    @BeforeClass\n+    public static void startGreenMail() {\n+        Properties props = new Properties();\n+        InputStream propStream = null;\n+        try {\n+            propStream = ExceptionMapperITCase.class.getResourceAsStream(\"/mail.properties\");\n+            props.load(propStream);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not load /mail.properties\", e);\n+        } finally {\n+            IOUtils.closeQuietly(propStream);\n+        }\n+\n+        SMTP_HOST = props.getProperty(\"smtpHost\");\n+        assertNotNull(SMTP_HOST);\n+        SMTP_PORT = Integer.parseInt(props.getProperty(\"smtpPort\"));\n+        assertNotNull(SMTP_PORT);\n+\n+        ServerSetup[] config = new ServerSetup[2];\n+        config[0] = new ServerSetup(SMTP_PORT, SMTP_HOST, ServerSetup.PROTOCOL_SMTP);\n+        config[1] = new ServerSetup(POP3_PORT, POP3_HOST, ServerSetup.PROTOCOL_POP3);\n+        greenMail = new GreenMail(config);\n+        greenMail.start();\n+    }\n+\n+    @AfterClass\n+    public static void stopGreenMail() {\n+        if (greenMail != null) {\n+            greenMail.stop();\n+        }\n+    }\n+\n+    private boolean verifyMail(final String sender, final String subject, final String mailAddress) throws Exception {\n+        LOG.info(\"Waiting for notification to be sent...\");\n+        greenMail.waitForIncomingEmail(1);\n+\n+        boolean found = false;\n+        Session session = Session.getDefaultInstance(System.getProperties());\n+        session.setDebug(true);\n+        Store store = session.getStore(\"pop3\");\n+        store.connect(POP3_HOST, POP3_PORT, mailAddress, mailAddress);\n+\n+        Folder inbox = store.getFolder(\"INBOX\");\n+        assertNotNull(inbox);\n+        inbox.open(Folder.READ_WRITE);\n+\n+        Message[] messages = inbox.getMessages();\n+        for (Message message : messages) {\n+            if (sender.equals(message.getFrom()[0].toString()) && subject.equals(message.getSubject())) {\n+                found = true;\n+                message.setFlag(Flags.Flag.DELETED, true);\n+            }\n+        }\n+\n+        inbox.close(true);\n+        store.close();\n+        return found;\n+    }\n+\n     @Test\n-    public void issueSYNCOPE81() {\n-        String sender = \"syncope81@syncope.apache.org\";\n-        createNotificationTask(sender);\n+    public void notifyByMail() throws Exception {\n+        String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n+        String subject = \"Test notification \" + getUUIDString();\n+        String recipient = createNotificationTask(true, true, TraceLevel.ALL, sender, subject);\n         NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n         assertNotNull(taskTO);\n+        assertTrue(taskTO.getExecutions().isEmpty());\n \n+        execNotificationTask(taskService, taskTO.getKey(), 50);\n+\n+        assertTrue(verifyMail(sender, subject, recipient));\n+\n+        // verify message body\n+        taskTO = taskService.read(taskTO.getKey());\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.isExecuted());\n+        assertNotNull(taskTO.getTextBody());\n+        assertTrue(\"Notification mail text doesn't contain expected content.\",\n+                taskTO.getTextBody().contains(\"Your email address is \" + recipient + \".\"));\n+        assertTrue(\"Notification mail text doesn't contain expected content.\",\n+                taskTO.getTextBody().contains(\"Your email address inside a link: \"\n+                        + \"http://localhost/?email=\" + recipient.replaceAll(\"@\", \"%40\") + \" .\"));\n+    }\n+\n+    @Test\n+    public void notifyByMailEmptyAbout() throws Exception {\n+        String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n+        String subject = \"Test notification \" + getUUIDString();\n+        String recipient = createNotificationTask(true, false, TraceLevel.ALL, sender, subject);\n+        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        assertNotNull(taskTO);\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n-        // generate an execution in order to verify the deletion of a notification task with one or more executions\n-        TaskExecTO execution = taskService.execute(taskTO.getKey(), false);\n-        assertEquals(\"NOT_SENT\", execution.getStatus());\n-\n-        int i = 0;\n-        int maxit = 50;\n-        int executions = 0;\n-\n-        // wait for task exec completion (executions incremented)\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n+        execNotificationTask(taskService, taskTO.getKey(), 50);\n \n-            taskTO = taskService.read(taskTO.getKey());\n+        assertTrue(verifyMail(sender, subject, recipient));\n+    }\n+\n+    @Test\n+    public void notifyByMailWithRetry() throws Exception {\n+        // 1. Set higher number of retries\n+        AttrTO origMaxRetries = configurationService.get(\"notification.maxRetries\");\n+\n+        configurationService.set(attrTO(origMaxRetries.getSchema(), \"10\"));\n \n+        // 2. Stop mail server to force errors while sending out e-mails\n+        stopGreenMail();\n+\n+        try {\n+            // 3. create notification and user\n+            String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n+            String subject = \"Test notification \" + getUUIDString();\n+            createNotificationTask(true, true, TraceLevel.ALL, sender, subject);\n+            NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n             assertNotNull(taskTO);\n-            assertNotNull(taskTO.getExecutions());\n+            assertTrue(taskTO.getExecutions().isEmpty());\n+\n+            // 4. verify notification could not be delivered\n+            execTask(taskService, taskTO.getKey(), NotificationJob.Status.NOT_SENT.name(), 5, false);\n+\n+            taskTO = taskService.read(taskTO.getKey());\n+            assertNotNull(taskTO);\n+            assertFalse(taskTO.isExecuted());\n+            assertFalse(taskTO.getExecutions().isEmpty());\n+            for (TaskExecTO exec : taskTO.getExecutions()) {\n+                assertEquals(NotificationJob.Status.NOT_SENT.name(), exec.getStatus());\n+            }\n+        } finally {\n+            // start mail server again\n+            startGreenMail();\n+            // reset number of retries\n+            configurationService.set(origMaxRetries);\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE81() {\n+        String sender = \"syncope81@syncope.apache.org\";\n+        createNotificationTask(true, true, TraceLevel.ALL, sender, \"Test notification\");\n+        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.getExecutions().isEmpty());\n \n-            i++;\n-        } while (executions == taskTO.getExecutions().size() && i < maxit);\n+        // generate an execution in order to verify the deletion of a notification task with one or more executions\n+        execNotificationTask(taskService, taskTO.getKey(), 50);\n \n+        taskTO = taskService.read(taskTO.getKey());\n+        assertTrue(taskTO.isExecuted());\n         assertFalse(taskTO.getExecutions().isEmpty());\n \n         taskService.delete(taskTO.getKey());\n@@ -82,7 +228,7 @@ public void issueSYNCOPE81() {\n     public void issueSYNCOPE86() {\n         // 1. create notification task\n         String sender = \"syncope86@syncope.apache.org\";\n-        createNotificationTask(sender);\n+        createNotificationTask(true, true, TraceLevel.ALL, sender, \"Test notification\");\n \n         // 2. get NotificationTaskTO for user just created\n         NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n@@ -91,52 +237,159 @@ public void issueSYNCOPE86() {\n \n         try {\n             // 3. execute the generated NotificationTask\n-            TaskExecTO execution = taskService.execute(taskTO.getKey(), false);\n-            assertNotNull(execution);\n+            execNotificationTask(taskService, taskTO.getKey(), 50);\n \n             // 4. verify\n             taskTO = taskService.read(taskTO.getKey());\n             assertNotNull(taskTO);\n+            assertTrue(taskTO.isExecuted());\n             assertEquals(1, taskTO.getExecutions().size());\n         } finally {\n             // Remove execution to make test re-runnable\n             taskService.deleteExecution(taskTO.getExecutions().get(0).getKey());\n         }\n     }\n \n-    private void createNotificationTask(final String sender) {\n+    @Test\n+    public void issueSYNCOPE192() throws Exception {\n+        String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n+        String subject = \"Test notification \" + getUUIDString();\n+        String recipient = createNotificationTask(true, true, TraceLevel.NONE, sender, subject);\n+        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.getExecutions().isEmpty());\n+\n+        taskService.execute(taskTO.getKey(), false);\n+\n+        try {\n+            Thread.sleep(5);\n+        } catch (InterruptedException e) {\n+        }\n+\n+        assertTrue(verifyMail(sender, subject, recipient));\n+\n+        // verify that last exec status was updated\n+        taskTO = taskService.read(taskTO.getKey());\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.isExecuted());\n+        assertTrue(taskTO.getExecutions().isEmpty());\n+        assertTrue(StringUtils.isNotBlank(taskTO.getLatestExecStatus()));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE445() throws Exception {\n+        String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n+        String subject = \"Test notification \" + getUUIDString();\n+        String recipient = createNotificationTask(\n+                true, true, TraceLevel.ALL, sender, subject, \"syncope445@syncope.apache.org\");\n+        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.getExecutions().isEmpty());\n+\n+        execNotificationTask(taskService, taskTO.getKey(), 50);\n+\n+        assertTrue(verifyMail(sender, subject, recipient));\n+\n+        // verify task\n+        taskTO = taskService.read(taskTO.getKey());\n+        assertTrue(taskTO.isExecuted());\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.getRecipients().contains(\"syncope445@syncope.apache.org\"));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE446() throws Exception {\n         // 1. Create notification\n         NotificationTO notification = new NotificationTO();\n-        notification.setTraceLevel(TraceLevel.FAILURES);\n+        notification.setTraceLevel(TraceLevel.ALL);\n+        notification.getEvents().add(\"[REST]:[GroupLogic]:[]:[create]:[SUCCESS]\");\n+\n+        String groupName = \"group\" + getUUIDString();\n+        notification.getAbouts().put(AnyTypeKind.GROUP.name(),\n+                SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(groupName).query());\n+\n+        notification.setRecipients(SyncopeClient.getUserSearchConditionBuilder().inGroups(8L).query());\n+        notification.setSelfAsRecipient(false);\n+        notification.setRecipientAttrName(\"email\");\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n+        notification.getStaticRecipients().add(MAIL_ADDRESS);\n+\n+        String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n+        notification.setSender(sender);\n+        String subject = \"Test notification \" + getUUIDString();\n+        notification.setSubject(subject);\n+        notification.setTemplate(\"optin\");\n+        notification.setActive(true);\n+\n+        Response response = notificationService.create(notification);\n+        notification = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n+        assertNotNull(notification);\n+\n+        // 2. create group\n+        GroupTO groupTO = new GroupTO();\n+        groupTO.setName(groupName);\n+        groupTO.setRealm(\"/even/two\");\n+        groupTO = createGroup(groupTO);\n+        assertNotNull(groupTO);\n+\n+        // 3. verify\n+        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        assertNotNull(taskTO);\n+\n+        execNotificationTask(taskService, taskTO.getKey(), 50);\n+\n+        assertTrue(verifyMail(sender, subject, MAIL_ADDRESS));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE492() throws Exception {\n+        String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n+        String subject = \"Test notification \" + getUUIDString();\n+        createNotificationTask(false, true, TraceLevel.NONE, sender, subject, \"syncope445@syncope.apache.org\");\n+\n+        // verify that no task was created for disabled notification\n+        assertNull(findNotificationTaskBySender(sender));\n+    }\n+\n+    private String createNotificationTask(final boolean active, final boolean includeAbout, final TraceLevel traceLevel,\n+            final String sender, final String subject, final String... staticRecipients) {\n+\n+        // 1. Create notification\n+        NotificationTO notification = new NotificationTO();\n+        notification.setTraceLevel(traceLevel);\n         notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n \n-        notification.getAbouts().put(AnyTypeKind.USER.name(),\n-                SyncopeClient.getUserSearchConditionBuilder().inGroups(7L).query());\n+        if (includeAbout) {\n+            notification.getAbouts().put(AnyTypeKind.USER.name(),\n+                    SyncopeClient.getUserSearchConditionBuilder().inGroups(7L).query());\n+        }\n \n         notification.setRecipients(SyncopeClient.getUserSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n-\n         notification.setRecipientAttrName(\"email\");\n         notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n+        if (staticRecipients != null) {\n+            CollectionUtils.addAll(notification.getStaticRecipients(), staticRecipients);\n+        }\n \n         notification.setSender(sender);\n-        String subject = \"Test notification\";\n         notification.setSubject(subject);\n         notification.setTemplate(\"optin\");\n-        notification.setActive(true);\n+        notification.setActive(active);\n \n         Response response = notificationService.create(notification);\n         notification = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n         assertNotNull(notification);\n \n         // 2. create user\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope@syncope.apache.org\");\n+        UserTO userTO = UserITCase.getUniqueSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRightKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n+        return userTO.getUsername();\n     }\n \n }"},{"sha":"da438d3ea7cb7c2d64b06df661246274c35b99f4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -113,18 +113,17 @@ public static UserTO getUniqueSampleTO(final String email) {\n     }\n \n     public static UserTO getSampleTO(final String email) {\n-        String uid = email;\n         UserTO userTO = new UserTO();\n         userTO.setRealm(SyncopeConstants.ROOT_REALM);\n         userTO.setPassword(\"password123\");\n-        userTO.setUsername(uid);\n+        userTO.setUsername(email);\n \n-        userTO.getPlainAttrs().add(attrTO(\"fullname\", uid));\n-        userTO.getPlainAttrs().add(attrTO(\"firstname\", uid));\n+        userTO.getPlainAttrs().add(attrTO(\"fullname\", email));\n+        userTO.getPlainAttrs().add(attrTO(\"firstname\", email));\n         userTO.getPlainAttrs().add(attrTO(\"surname\", \"surname\"));\n         userTO.getPlainAttrs().add(attrTO(\"type\", \"a type\"));\n-        userTO.getPlainAttrs().add(attrTO(\"userId\", uid));\n-        userTO.getPlainAttrs().add(attrTO(\"email\", uid));\n+        userTO.getPlainAttrs().add(attrTO(\"userId\", email));\n+        userTO.getPlainAttrs().add(attrTO(\"email\", email));\n         userTO.getPlainAttrs().add(attrTO(\"loginDate\", DATE_FORMAT.get().format(new Date())));\n         userTO.getDerAttrs().add(attrTO(\"cn\", null));\n         userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n@@ -1274,12 +1273,12 @@ public void issueSYNCOPE185() {\n \n     @Test()\n     public void issueSYNCOPE51() {\n-        AttrTO defaultCA = configurationService.read(\"password.cipher.algorithm\");\n+        AttrTO defaultCA = configurationService.get(\"password.cipher.algorithm\");\n         final String originalCAValue = defaultCA.getValues().get(0);\n         defaultCA.getValues().set(0, \"MD5\");\n-        configurationService.set(defaultCA.getSchema(), defaultCA);\n+        configurationService.set(defaultCA);\n \n-        AttrTO newCA = configurationService.read(defaultCA.getSchema());\n+        AttrTO newCA = configurationService.get(defaultCA.getSchema());\n         assertEquals(defaultCA, newCA);\n \n         UserTO userTO = getSampleTO(\"syncope51@syncope.apache.org\");\n@@ -1294,9 +1293,9 @@ public void issueSYNCOPE51() {\n         }\n \n         defaultCA.getValues().set(0, originalCAValue);\n-        configurationService.set(defaultCA.getSchema(), defaultCA);\n+        configurationService.set(defaultCA);\n \n-        AttrTO oldCA = configurationService.read(defaultCA.getSchema());\n+        AttrTO oldCA = configurationService.get(defaultCA.getSchema());\n         assertEquals(defaultCA, oldCA);\n     }\n \n@@ -1428,12 +1427,12 @@ public void issueSYNCOPE122() {\n     @Test\n     public void isseSYNCOPE136AES() {\n         // 1. read configured cipher algorithm in order to be able to restore it at the end of test\n-        AttrTO pwdCipherAlgo = configurationService.read(\"password.cipher.algorithm\");\n+        AttrTO pwdCipherAlgo = configurationService.get(\"password.cipher.algorithm\");\n         final String origpwdCipherAlgo = pwdCipherAlgo.getValues().get(0);\n \n         // 2. set AES password cipher algorithm\n         pwdCipherAlgo.getValues().set(0, \"AES\");\n-        configurationService.set(pwdCipherAlgo.getSchema(), pwdCipherAlgo);\n+        configurationService.set(pwdCipherAlgo);\n \n         // 3. create user with no resources\n         UserTO userTO = getUniqueSampleTO(\"syncope136_AES@apache.org\");\n@@ -1466,7 +1465,7 @@ public void isseSYNCOPE136AES() {\n \n         // 6. restore initial cipher algorithm\n         pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n-        configurationService.set(pwdCipherAlgo.getSchema(), pwdCipherAlgo);\n+        configurationService.set(pwdCipherAlgo);\n     }\n \n     @Test"},{"sha":"34a934930368f22c2de6d303ffcad944310954d2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserSelfITCase.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -252,8 +252,7 @@ public void noContent() throws IOException {\n     @Test\n     public void passwordReset() {\n         // 0. ensure that password request DOES require security question\n-        configurationService.set(\"passwordReset.securityQuestion\",\n-                attrTO(\"passwordReset.securityQuestion\", \"true\"));\n+        configurationService.set(attrTO(\"passwordReset.securityQuestion\", \"true\"));\n \n         // 1. create an user with security question and answer\n         UserTO user = UserITCase.getUniqueSampleTO(\"pwdReset@syncope.apache.org\");\n@@ -313,8 +312,7 @@ public void passwordReset() {\n     @Test\n     public void passwordResetWithoutSecurityQuestion() {\n         // 0. disable security question for password reset\n-        configurationService.set(\"passwordReset.securityQuestion\",\n-                attrTO(\"passwordReset.securityQuestion\", \"false\"));\n+        configurationService.set(attrTO(\"passwordReset.securityQuestion\", \"false\"));\n \n         // 1. create an user with security question and answer\n         UserTO user = UserITCase.getUniqueSampleTO(\"pwdResetNoSecurityQuestion@syncope.apache.org\");\n@@ -350,8 +348,7 @@ public void passwordResetWithoutSecurityQuestion() {\n         assertNull(read.getToken());\n \n         // 7. re-enable security question for password reset\n-        configurationService.set(\"passwordReset.securityQuestion\",\n-                attrTO(\"passwordReset.securityQuestion\", \"true\"));\n+        configurationService.set(attrTO(\"passwordReset.securityQuestion\", \"true\"));\n     }\n \n }"},{"sha":"6330b9e81ed955c76fcee97a437656fa3b9ad775","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88061761ea78bfe822f653c899a4ad9c4f4e3493/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88061761ea78bfe822f653c899a4ad9c4f4e3493/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=88061761ea78bfe822f653c899a4ad9c4f4e3493","patch":"@@ -332,7 +332,7 @@ under the License.\n \n     <jackson.version>2.6.1</jackson.version>\n \n-    <spring.version>4.1.7.RELEASE</spring.version>\n+    <spring.version>4.2.0.RELEASE</spring.version>\n     <spring-security.version>4.0.2.RELEASE</spring-security.version>\n \n     <openjpa.version>2.4.0</openjpa.version>"}]}