{"sha":"54de3984790735467e69b46feb934d17f2fd2b42","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU0ZGUzOTg0NzkwNzM1NDY3ZTY5YjQ2ZmViOTM0ZDE3ZjJmZDJiNDI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-06-08T07:04:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-06-08T07:04:50Z"},"message":"[SYNCOPE-666] More cleanup + test for using realm in ConnObjectLink","tree":{"sha":"84501e27ab8811157001c8050445fa8535804856","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/84501e27ab8811157001c8050445fa8535804856"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/54de3984790735467e69b46feb934d17f2fd2b42","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/54de3984790735467e69b46feb934d17f2fd2b42","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/54de3984790735467e69b46feb934d17f2fd2b42","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/54de3984790735467e69b46feb934d17f2fd2b42/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a64ef15f1dd69b09226c4dac27551cfd3988c7e9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a64ef15f1dd69b09226c4dac27551cfd3988c7e9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a64ef15f1dd69b09226c4dac27551cfd3988c7e9"}],"stats":{"total":446,"additions":247,"deletions":199},"files":[{"sha":"df09b5f9f6edb0231d637237271995c3df1fc5b0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -50,7 +50,6 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -201,10 +200,7 @@ public ConnObjectTO readConnObject(final String resourceKey, final String anyTyp\n         if (any == null) {\n             throw new NotFoundException(anyType + \" \" + key);\n         }\n-\n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(anyType.getKind());\n-\n-        MappingItem connObjectKeyItem = attrUtils.getConnObjectKeyItem(provision);\n+        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n         if (connObjectKeyItem == null) {\n             throw new NotFoundException(\n                     \"ConnObjectKey mapping for \" + anyType + \" \" + key + \" on resource '\" + resourceKey + \"'\");\n@@ -214,7 +210,7 @@ public ConnObjectTO readConnObject(final String resourceKey, final String anyTyp\n         Connector connector = connFactory.getConnector(resource);\n         ConnectorObject connectorObject = connector.getObject(\n                 provision.getObjectClass(), new Uid(connObjectKeyValue),\n-                connector.getOperationOptions(attrUtils.getMappingItems(provision, MappingPurpose.BOTH)));\n+                connector.getOperationOptions(MappingUtils.getMappingItems(provision, MappingPurpose.BOTH)));\n         if (connectorObject == null) {\n             throw new NotFoundException(\"Object \" + connObjectKeyValue + \" with class \" + provision.getObjectClass()\n                     + \" not found on resource \" + resourceKey);"},{"sha":"161d0c159f9cfc6bbb96238874730551ada5b14b","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/AbstractTest.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\n+    \"classpath:provisioningContext.xml\",\n+    \"classpath:logicContext.xml\",\n+    \"classpath:workflowContext.xml\",\n+    \"classpath:persistenceTest.xml\",\n+    \"classpath:logicTest.xml\"\n+})\n+@Transactional\n+public abstract class AbstractTest {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractTest.class);\n+\n+}"},{"sha":"1f1dab7f56609c178b2658b9ce95c154d9c3a72f","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/MappingTest.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMappingTest.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class MappingTest extends AbstractTest {\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Test\n+    public void connObjectLink() {\n+        ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n+        assertNotNull(ldap);\n+\n+        Provision provision = ldap.getProvision(anyTypeDAO.findUser());\n+        assertNotNull(provision);\n+        assertNotNull(provision.getMapping());\n+        assertNotNull(provision.getMapping().getConnObjectLink());\n+\n+        User user = userDAO.find(\"rossini\");\n+        assertNotNull(user);\n+\n+        Name name = MappingUtils.evaluateNAME(user, provision, user.getUsername());\n+        assertEquals(\"uid=rossini,ou=people,o=isp\", name.getNameValue());\n+\n+        provision.getMapping().setConnObjectLink(\"'uid=' + username + ',o=' + realm + ',ou=people,o=isp'\");\n+\n+        name = MappingUtils.evaluateNAME(user, provision, user.getUsername());\n+        assertEquals(\"uid=rossini,o=even,ou=people,o=isp\", name.getNameValue());\n+    }\n+}"},{"sha":"bc425dc075d7df16fcda0c5ba568ff4344d47406","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/NotificationTest.java","status":"modified","additions":2,"deletions":19,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -70,9 +70,6 @@\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.mail.javamail.JavaMailSender;\n import org.springframework.mail.javamail.JavaMailSenderImpl;\n@@ -82,22 +79,8 @@\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\n-    \"classpath:provisioningContext.xml\",\n-    \"classpath:logicContext.xml\",\n-    \"classpath:workflowContext.xml\",\n-    \"classpath:persistenceTest.xml\",\n-    \"classpath:logicTest.xml\"\n-})\n-@Transactional\n-public class NotificationTest {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(NotificationTest.class);\n+\n+public class NotificationTest extends AbstractTest {\n \n     private static final String SMTP_HOST = \"localhost\";\n "},{"sha":"807ea0fbedfbc72217ad4d29de80082d84117465","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -199,7 +199,7 @@ private <T extends AnyTO> T getAnyTOFromConnObject(final ConnectorObject obj,\n \n         // 1. fill with data from connector object\n         anyTO.setRealm(syncTask.getDestinatioRealm().getFullPath());\n-        for (MappingItem item : anyUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)) {\n+        for (MappingItem item : MappingUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)) {\n             Attribute attr = obj.getAttributeByName(item.getExtAttrName());\n \n             AttrTO attrTO;"},{"sha":"140c5ada1b2cfb9d093dc09e4cdf6dd6afd21605","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":75,"deletions":22,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -120,7 +120,6 @@ public boolean evaluate(final T item) {\n     /**\n      * Prepare attributes for sending to a connector instance.\n      *\n-     * @param anyUtils any object\n      * @param any given any object\n      * @param password clear-text password\n      * @param changePwd whether password should be included for propagation attributes or not\n@@ -130,8 +129,8 @@ public boolean evaluate(final T item) {\n      * @param provision provision information\n      * @return connObjectLink + prepared attributes\n      */\n-    public static Pair<String, Set<Attribute>> prepareAttributes(\n-            final AnyUtils anyUtils, final Any<?, ?, ?> any,\n+    public static Pair<String, Set<Attribute>> prepareAttrs(\n+            final Any<?, ?, ?> any,\n             final String password,\n             final boolean changePwd,\n             final Set<String> vAttrsToBeRemoved,\n@@ -149,7 +148,7 @@ public static Pair<String, Set<Attribute>> prepareAttributes(\n         Set<Attribute> attributes = new HashSet<>();\n         String connObjectKey = null;\n \n-        for (MappingItem mapping : anyUtils.getMappingItems(provision, MappingPurpose.PROPAGATION)) {\n+        for (MappingItem mapping : getMappingItems(provision, MappingPurpose.PROPAGATION)) {\n             LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n \n             try {\n@@ -188,11 +187,10 @@ public static Pair<String, Set<Attribute>> prepareAttributes(\n         }\n \n         Attribute connObjectKeyExtAttr =\n-                AttributeUtil.find(anyUtils.getConnObjectKeyItem(provision).getExtAttrName(), attributes);\n+                AttributeUtil.find(getConnObjectKeyItem(provision).getExtAttrName(), attributes);\n         if (connObjectKeyExtAttr != null) {\n             attributes.remove(connObjectKeyExtAttr);\n-            attributes.add(AttributeBuilder.build(\n-                    anyUtils.getConnObjectKeyItem(provision).getExtAttrName(), connObjectKey));\n+            attributes.add(AttributeBuilder.build(getConnObjectKeyItem(provision).getExtAttrName(), connObjectKey));\n         }\n         attributes.add(evaluateNAME(any, provision, connObjectKey));\n \n@@ -373,26 +371,23 @@ private static Pair<String, Attribute> prepareAttr(\n      * @param connObjectKey connector object key\n      * @return the value to be propagated as __NAME__\n      */\n-    public static Name evaluateNAME(final Any<?, ?, ?> any,\n-            final Provision provision, final String connObjectKey) {\n-\n-        final AnyUtilsFactory anyUtilsFactory =\n-                ApplicationContextProvider.getApplicationContext().getBean(AnyUtilsFactory.class);\n-        final AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-\n+    public static Name evaluateNAME(final Any<?, ?, ?> any, final Provision provision, final String connObjectKey) {\n         if (StringUtils.isBlank(connObjectKey)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n             LOG.error(\"Missing ConnObjectKey for '{}': \", provision.getResource());\n         }\n \n         // Evaluate connObjectKey expression\n+        String connObjectLink = provision == null || provision.getMapping() == null\n+                ? null\n+                : provision.getMapping().getConnObjectLink();\n         String evalConnObjectLink = null;\n-        if (StringUtils.isNotBlank(anyUtils.getConnObjectLink(provision))) {\n-            final JexlContext jexlContext = new MapContext();\n+        if (StringUtils.isNotBlank(connObjectLink)) {\n+            JexlContext jexlContext = new MapContext();\n             JexlUtils.addFieldsToContext(any, jexlContext);\n             JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n             JexlUtils.addDerAttrsToContext(any.getDerAttrs(), any.getPlainAttrs(), jexlContext);\n-            evalConnObjectLink = JexlUtils.evaluate(anyUtils.getConnObjectLink(provision), jexlContext);\n+            evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n         }\n \n         // If connObjectLink evaluates to an empty string, just use the provided connObjectKey as Name(),\n@@ -414,11 +409,7 @@ public static Name evaluateNAME(final Any<?, ?, ?> any,\n     }\n \n     private static String getGroupOwnerValue(final Provision provision, final Any<?, ?, ?> any) {\n-        AnyUtilsFactory anyUtilsFactory =\n-                ApplicationContextProvider.getApplicationContext().getBean(AnyUtilsFactory.class);\n-\n-        Pair<String, Attribute> preparedAttr = prepareAttr(\n-                provision, anyUtilsFactory.getInstance(any).getConnObjectKeyItem(provision),\n+        Pair<String, Attribute> preparedAttr = prepareAttr(provision, getConnObjectKeyItem(provision),\n                 any, null, null, Collections.<String>emptySet(), Collections.<String, AttrMod>emptyMap());\n         String connObjectKey = preparedAttr.getKey();\n \n@@ -611,6 +602,68 @@ public static String getConnObjectKeyValue(final Any<?, ?, ?> any, final Provisi\n                 : values.get(0).getValueAsString();\n     }\n \n+    public static MappingItem getConnObjectKeyItem(final Provision provision) {\n+        Mapping mapping = null;\n+        if (provision != null) {\n+            mapping = provision.getMapping();\n+        }\n+\n+        return mapping == null\n+                ? null\n+                : mapping.getConnObjectKeyItem();\n+    }\n+\n+    public static List<MappingItem> getMappingItems(final Provision provision, final MappingPurpose purpose) {\n+        List<? extends MappingItem> items = Collections.<MappingItem>emptyList();\n+        if (provision != null) {\n+            items = provision.getMapping().getItems();\n+        }\n+\n+        List<MappingItem> result = new ArrayList<>();\n+\n+        switch (purpose) {\n+            case SYNCHRONIZATION:\n+                for (MappingItem item : items) {\n+                    if (MappingPurpose.PROPAGATION != item.getPurpose()\n+                            && MappingPurpose.NONE != item.getPurpose()) {\n+\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            case PROPAGATION:\n+                for (MappingItem item : items) {\n+                    if (MappingPurpose.SYNCHRONIZATION != item.getPurpose()\n+                            && MappingPurpose.NONE != item.getPurpose()) {\n+\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            case BOTH:\n+                for (MappingItem item : items) {\n+                    if (MappingPurpose.NONE != item.getPurpose()) {\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            case NONE:\n+                for (MappingItem item : items) {\n+                    if (MappingPurpose.NONE == item.getPurpose()) {\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n     /**\n      * Private default constructor, for static-only classes.\n      */"},{"sha":"443bbae2d2bb0c1cff2be108c8c27b8788fe2cdd","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/jexl/JexlUtils.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -22,7 +22,6 @@\n import java.beans.Introspector;\n import java.beans.PropertyDescriptor;\n import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n@@ -106,24 +105,22 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n \n         try {\n             for (PropertyDescriptor desc : Introspector.getBeanInfo(object.getClass()).getPropertyDescriptors()) {\n-                final Class<?> type = desc.getPropertyType();\n-                final String fieldName = desc.getName();\n+                Class<?> type = desc.getPropertyType();\n+                String fieldName = desc.getName();\n \n                 if ((!fieldName.startsWith(\"pc\"))\n                         && (!ArrayUtils.contains(IGNORE_FIELDS, fieldName))\n                         && (!Iterable.class.isAssignableFrom(type))\n                         && (!type.isArray())) {\n-                    try {\n-                        final Method getter = desc.getReadMethod();\n-\n-                        final Object fieldValue;\n \n-                        if (getter == null) {\n+                    try {\n+                        Object fieldValue;\n+                        if (desc.getReadMethod() == null) {\n                             final Field field = object.getClass().getDeclaredField(fieldName);\n                             field.setAccessible(true);\n                             fieldValue = field.get(object);\n                         } else {\n-                            fieldValue = getter.invoke(object);\n+                            fieldValue = desc.getReadMethod().invoke(object);\n                         }\n \n                         context.set(fieldName, fieldValue == null\n@@ -133,7 +130,6 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n                                         : fieldValue));\n \n                         LOG.debug(\"Add field {} with value {}\", fieldName, fieldValue);\n-\n                     } catch (Exception iae) {\n                         LOG.error(\"Reading '{}' value error\", fieldName, iae);\n                     }\n@@ -143,6 +139,13 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n             LOG.error(\"Reading class attributes error\", ie);\n         }\n \n+        if (object instanceof Any) {\n+            Any<?, ?, ?> any = (Any<?, ?, ?>) object;\n+            if (any.getRealm() != null) {\n+                context.set(\"realm\", any.getRealm().getName());\n+            }\n+        }\n+\n         return context;\n     }\n "},{"sha":"8c640860710dcf4e7aecadedf4c9b21d738d383f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -18,13 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import java.util.List;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n \n public interface AnyUtils {\n \n@@ -52,12 +48,6 @@ public interface AnyUtils {\n \n     <T extends VirAttr<?>> T newVirAttr();\n \n-    MappingItem getConnObjectKeyItem(Provision provision);\n-\n-    String getConnObjectLink(Provision provision);\n-\n-    List<MappingItem> getMappingItems(Provision provision, MappingPurpose purpose);\n-\n     IntMappingType plainIntMappingType();\n \n     IntMappingType derIntMappingType();"},{"sha":"9d0f7987ff9ef1078fd883bc4ab32172a95ea036","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -18,25 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n@@ -318,82 +311,6 @@ public <T extends VirAttr<?>> T newVirAttr() {\n         return result;\n     }\n \n-    @Override\n-    public MappingItem getConnObjectKeyItem(final Provision provision) {\n-        Mapping mapping = null;\n-        if (provision != null) {\n-            mapping = provision.getMapping();\n-        }\n-\n-        return mapping == null\n-                ? null\n-                : mapping.getConnObjectKeyItem();\n-    }\n-\n-    @Override\n-    public String getConnObjectLink(final Provision provision) {\n-        Mapping mapping = null;\n-        if (provision != null) {\n-            mapping = provision.getMapping();\n-        }\n-\n-        return mapping == null\n-                ? null\n-                : mapping.getConnObjectLink();\n-    }\n-\n-    @Override\n-    public List<MappingItem> getMappingItems(final Provision provision, final MappingPurpose purpose) {\n-        List<? extends MappingItem> items = Collections.<MappingItem>emptyList();\n-        if (provision != null) {\n-            items = provision.getMapping().getItems();\n-        }\n-\n-        List<MappingItem> result = new ArrayList<>();\n-\n-        switch (purpose) {\n-            case SYNCHRONIZATION:\n-                for (MappingItem item : items) {\n-                    if (MappingPurpose.PROPAGATION != item.getPurpose()\n-                            && MappingPurpose.NONE != item.getPurpose()) {\n-\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            case PROPAGATION:\n-                for (MappingItem item : items) {\n-                    if (MappingPurpose.SYNCHRONIZATION != item.getPurpose()\n-                            && MappingPurpose.NONE != item.getPurpose()) {\n-\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            case BOTH:\n-                for (MappingItem item : items) {\n-                    if (MappingPurpose.NONE != item.getPurpose()) {\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            case NONE:\n-                for (MappingItem item : items) {\n-                    if (MappingPurpose.NONE == item.getPurpose()) {\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public IntMappingType plainIntMappingType() {\n         IntMappingType result = null;"},{"sha":"8916d27eb4817255641b59022f9d18639abfc4b8","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/VirAttrHandler.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n@@ -64,8 +63,7 @@ PropagationByResource fillVirtual(\n     void retrieveVirAttrValues(Any<?, ?, ?> any);\n \n     void updateOnResourcesIfMappingMatches(\n-            Any<?, ?, ?> any, AnyUtils anyUtils, String schemaKey,\n-            Iterable<? extends ExternalResource> resources, IntMappingType mappingType,\n-            PropagationByResource propByRes);\n+            Any<?, ?, ?> any, String schemaKey, Iterable<? extends ExternalResource> resources,\n+            IntMappingType mappingType, PropagationByResource propByRes);\n \n }"},{"sha":"888329c6cc36a54d1d13a3132298646a7008ace3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -117,12 +117,12 @@ public VirSchema getVirSchema(final String virSchemaName) {\n     }\n \n     @Override\n-    public void updateOnResourcesIfMappingMatches(final Any<?, ?, ?> any, final AnyUtils anyUtils,\n-            final String schemaKey, final Iterable<? extends ExternalResource> resources,\n-            final IntMappingType mappingType, final PropagationByResource propByRes) {\n+    public void updateOnResourcesIfMappingMatches(final Any<?, ?, ?> any, final String schemaKey,\n+            final Iterable<? extends ExternalResource> resources, final IntMappingType mappingType,\n+            final PropagationByResource propByRes) {\n \n         for (ExternalResource resource : resources) {\n-            for (MappingItem mapItem : anyUtils.getMappingItems(\n+            for (MappingItem mapItem : MappingUtils.getMappingItems(\n                     resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n \n                 if (schemaKey.equals(mapItem.getIntAttrName()) && mapItem.getIntMappingType() == mappingType) {\n@@ -166,7 +166,7 @@ public PropagationByResource fillVirtual(final Any any,\n                 }\n \n                 for (ExternalResource resource : externalResources) {\n-                    for (MappingItem mapItem : anyUtils.getMappingItems(\n+                    for (MappingItem mapItem : MappingUtils.getMappingItems(\n                             resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n \n                         if (virSchema.getKey().equals(mapItem.getIntAttrName())\n@@ -199,8 +199,8 @@ public PropagationByResource fillVirtual(final Any any,\n                     any.add(virAttr);\n                 }\n \n-                updateOnResourcesIfMappingMatches(any, anyUtils, virSchema.getKey(),\n-                        externalResources, anyUtils.derIntMappingType(), propByRes);\n+                updateOnResourcesIfMappingMatches(\n+                        any, virSchema.getKey(), externalResources, anyUtils.derIntMappingType(), propByRes);\n \n                 List<String> values = new ArrayList<>(virAttr.getValues());\n                 values.removeAll(vAttrToBeUpdated.getValuesToBeRemoved());\n@@ -322,19 +322,19 @@ private void retrieveVirAttrValue(\n \n             AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n-            for (ExternalResource resource : getTargetResources(virAttr, type, anyUtils, any.getType())) {\n+            for (ExternalResource resource : getTargetResources(virAttr, type, any.getType())) {\n                 Provision provision = resource.getProvision(any.getType());\n                 LOG.debug(\"Search values into {},{}\", resource, provision);\n \n                 try {\n-                    List<MappingItem> mappings = anyUtils.getMappingItems(provision, MappingPurpose.BOTH);\n+                    List<MappingItem> mappings = MappingUtils.getMappingItems(provision, MappingPurpose.BOTH);\n \n                     ConnectorObject connectorObject;\n                     if (externalResources.containsKey(resource.getKey())) {\n                         connectorObject = externalResources.get(resource.getKey());\n                     } else {\n                         LOG.debug(\"Perform connection to {}\", resource.getKey());\n-                        String connObjectKey = anyUtils.getConnObjectKeyItem(provision) == null\n+                        String connObjectKey = MappingUtils.getConnObjectKeyItem(provision) == null\n                                 ? null\n                                 : MappingUtils.getConnObjectKeyValue(any, provision);\n \n@@ -395,15 +395,15 @@ private void retrieveVirAttrValue(\n     }\n \n     private Collection<ExternalResource> getTargetResources(\n-            final VirAttr<?> attr, final IntMappingType type, final AnyUtils anyUtils, final AnyType anyType) {\n+            final VirAttr<?> attr, final IntMappingType type, final AnyType anyType) {\n \n         return CollectionUtils.select(getAllResources(attr.getOwner()), new Predicate<ExternalResource>() {\n \n             @Override\n             public boolean evaluate(final ExternalResource resource) {\n                 return resource.getProvision(anyType) != null\n                         && !MappingUtils.getMatchingMappingItems(\n-                                anyUtils.getMappingItems(resource.getProvision(anyType), MappingPurpose.BOTH),\n+                                MappingUtils.getMappingItems(resource.getProvision(anyType), MappingPurpose.BOTH),\n                                 attr.getSchema().getKey(), type).isEmpty();\n             }\n         });"},{"sha":"90f5e91c8e9ad34a71033b65dd3e3f8c18325dfa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -368,7 +368,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n                 }\n \n                 for (ExternalResource resource : resources) {\n-                    for (MappingItem mapItem : anyUtils.getMappingItems(\n+                    for (MappingItem mapItem : MappingUtils.getMappingItems(\n                             resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n \n                         if (schema.getKey().equals(mapItem.getIntAttrName())\n@@ -402,7 +402,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n             }\n \n             if (schema != null && attr != null && attr.getSchema() != null) {\n-                virAttrHander.updateOnResourcesIfMappingMatches(any, anyUtils, schema.getKey(),\n+                virAttrHander.updateOnResourcesIfMappingMatches(any, schema.getKey(),\n                         resources, anyUtils.plainIntMappingType(), propByRes);\n \n                 // 1.1 remove values\n@@ -460,7 +460,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n                 }\n \n                 for (ExternalResource resource : resources) {\n-                    for (MappingItem mapItem : anyUtils.getMappingItems(\n+                    for (MappingItem mapItem : MappingUtils.getMappingItems(\n                             resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n \n                         if (derSchema.getKey().equals(mapItem.getIntAttrName())\n@@ -486,7 +486,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n         for (String derAttrToBeAdded : anyMod.getDerAttrsToAdd()) {\n             DerSchema derSchema = getDerSchema(derAttrToBeAdded);\n             if (derSchema != null) {\n-                virAttrHander.updateOnResourcesIfMappingMatches(any, anyUtils, derSchema.getKey(),\n+                virAttrHander.updateOnResourcesIfMappingMatches(any, derSchema.getKey(),\n                         resources, anyUtils.derIntMappingType(), propByRes);\n \n                 DerAttr derAttr = any.getDerAttr(derSchema.getKey());\n@@ -700,7 +700,7 @@ protected Map<String, String> getConnObjectKeys(final Any<?, ?, ?> any) {\n         for (ExternalResource resource : iterable) {\n             Provision provision = resource.getProvision(any.getType());\n             if (provision != null && provision.getMapping() != null) {\n-                MappingItem connObjectKeyItem = anyUtilsFactory.getInstance(any).getConnObjectKeyItem(provision);\n+                MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n                 if (connObjectKeyItem == null) {\n                     throw new NotFoundException(\n                             \"ConnObjectKey mapping for \" + any.getType().getKey() + \" \" + any.getKey()"},{"sha":"e557699ee960bd6d703c8a7cc4a20e2b307de596","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -48,9 +48,9 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.misc.ExceptionUtils2;\n+import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -123,9 +123,6 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected AuditManager auditManager;\n \n-    @Autowired\n-    protected AnyUtilsFactory anyUtilsFactory;\n-\n     @Autowired\n     protected EntityFactory entityFactory;\n \n@@ -537,8 +534,7 @@ protected ConnectorObject getRemoteObject(final PropagationTask task, final Conn\n                     task.getPropagationOperation(),\n                     new ObjectClass(task.getObjectClassName()),\n                     new Uid(connObjectKey),\n-                    connector.getOperationOptions(anyUtilsFactory.getInstance(task.getAnyTypeKind()).\n-                            getMappingItems(provision, MappingPurpose.PROPAGATION)));\n+                    connector.getOperationOptions(MappingUtils.getMappingItems(provision, MappingPurpose.PROPAGATION)));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;"},{"sha":"59f8994a5fa1da50a508e74adef3a39c350ec62f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -49,8 +49,6 @@\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -101,9 +99,6 @@ public class PropagationManagerImpl implements PropagationManager {\n     @Autowired\n     protected ConnObjectUtils connObjectUtils;\n \n-    @Autowired\n-    protected AnyUtilsFactory anyUtilsFactory;\n-\n     @Autowired\n     protected VirAttrHandler virAttrHandler;\n \n@@ -412,18 +407,16 @@ protected List<PropagationTask> createTasks(final Any<?, ?, ?> any,\n \n         LOG.debug(\"Provisioning any {}:\\n{}\", any, propByRes);\n \n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-\n         if (!propByRes.get(ResourceOperation.CREATE).isEmpty()\n                 && vAttrsToBeRemoved != null && vAttrsToBeUpdated != null) {\n \n             virAttrHandler.retrieveVirAttrValues(any);\n \n             // update vAttrsToBeUpdated as well\n             for (VirAttr<?> virAttr : any.getVirAttrs()) {\n-                final String schema = virAttr.getSchema().getKey();\n+                String schema = virAttr.getSchema().getKey();\n \n-                final AttrMod attributeMod = new AttrMod();\n+                AttrMod attributeMod = new AttrMod();\n                 attributeMod.setSchema(schema);\n                 attributeMod.getValuesToBeAdded().addAll(virAttr.getValues());\n \n@@ -446,31 +439,31 @@ protected List<PropagationTask> createTasks(final Any<?, ?, ?> any,\n                 } else if (provision == null) {\n                     LOG.error(\"No provision specified on resource {} for type {}, ignoring...\",\n                             resource, any.getType());\n-                } else if (anyUtils.getMappingItems(provision, MappingPurpose.PROPAGATION).isEmpty()) {\n+                } else if (MappingUtils.getMappingItems(provision, MappingPurpose.PROPAGATION).isEmpty()) {\n                     LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n                             any.getType(), resource);\n                 } else {\n                     PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n                     task.setResource(resource);\n                     task.setObjectClassName(\n                             resource.getProvision(any.getType()).getObjectClass().getObjectClassValue());\n-                    task.setAnyTypeKind(anyUtils.getAnyTypeKind());\n+                    task.setAnyTypeKind(any.getType().getKind());\n                     if (!deleteOnResource) {\n                         task.setAnyKey(any.getKey());\n                     }\n                     task.setPropagationOperation(operation);\n                     task.setPropagationMode(resource.getPropagationMode());\n                     task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n-                    Pair<String, Set<Attribute>> preparedAttrs = MappingUtils.prepareAttributes(anyUtils, any,\n-                            password, changePwd, vAttrsToBeRemoved, vAttrsToBeUpdated, enable, provision);\n+                    Pair<String, Set<Attribute>> preparedAttrs = MappingUtils.prepareAttrs(\n+                            any, password, changePwd, vAttrsToBeRemoved, vAttrsToBeUpdated, enable, provision);\n                     task.setConnObjectKey(preparedAttrs.getKey());\n \n                     // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n                     // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n                     List<String> mandatoryMissing = new ArrayList<>();\n                     List<String> mandatoryNullOrEmpty = new ArrayList<>();\n-                    for (MappingItem item : anyUtils.getMappingItems(provision, MappingPurpose.PROPAGATION)) {\n+                    for (MappingItem item : MappingUtils.getMappingItems(provision, MappingPurpose.PROPAGATION)) {\n                         if (!item.isConnObjectKey()\n                                 && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n "},{"sha":"14c94f706245449d7f7629a016e6fad03d8ed825","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -119,7 +120,7 @@ public Long findMatchingAnyKey(\n \n         List<ConnectorObject> found = connector.search(provision.getObjectClass(),\n                 new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                        anyUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)));\n+                        MappingUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", provision.getObjectClass(), resource, name);\n@@ -162,7 +163,7 @@ private List<Long> findByConnObjectKeyItem(\n \n         List<Long> result = new ArrayList<>();\n \n-        MappingItem connObjectKeyItem = anyUtils.getConnObjectKeyItem(provision);\n+        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n         switch (connObjectKeyItem.getIntMappingType()) {\n             case UserPlainSchema:\n             case GroupPlainSchema:\n@@ -249,12 +250,12 @@ private List<Long> findByAnySearch(\n             final ConnectorObject connObj,\n             final List<String> altSearchSchemas,\n             final Provision provision,\n-            final AnyUtils anyUtils) {\n+            final AnyTypeKind anyTypeKind) {\n \n         // search for external attribute's name/value of each specified name\n         Map<String, Attribute> extValues = new HashMap<>();\n \n-        for (MappingItem item : anyUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)) {\n+        for (MappingItem item : MappingUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)) {\n             extValues.put(item.getIntAttrName(), connObj.getAttributeByName(item.getExtAttrName()));\n         }\n \n@@ -309,7 +310,7 @@ private List<Long> findByAnySearch(\n                     : SearchCond.getAndCond(searchCond, nodeCond);\n         }\n \n-        return search(searchCond, anyUtils.getAnyTypeKind());\n+        return search(searchCond, anyTypeKind);\n     }\n \n     private SyncCorrelationRule getCorrelationRule(final Provision provision, final SyncPolicySpec policySpec) {\n@@ -367,7 +368,7 @@ public List<Long> findExisting(\n         return syncRule == null\n                 ? altSearchSchemas == null || altSearchSchemas.isEmpty()\n                         ? findByConnObjectKeyItem(uid, provision, anyUtils)\n-                        : findByAnySearch(connObj, altSearchSchemas, provision, anyUtils)\n+                        : findByAnySearch(connObj, altSearchSchemas, provision, anyUtils.getAnyTypeKind())\n                 : findByCorrelationRule(connObj, syncRule, anyUtils.getAnyTypeKind());\n     }\n "},{"sha":"6ea8cb05180a2fed5e5eb6aacc43019355da410d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54de3984790735467e69b46feb934d17f2fd2b42/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54de3984790735467e69b46feb934d17f2fd2b42/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=54de3984790735467e69b46feb934d17f2fd2b42","patch":"@@ -30,6 +30,7 @@\n import java.util.Set;\n \n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -194,6 +195,8 @@ public void testUserSearch() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n+        // 1. user assigned to role 1, with search entitlement on realms /odd and /even: won't find anything with \n+        // root realm\n         UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n                 getService(UserService.class);\n \n@@ -214,13 +217,20 @@ public Long transform(final UserTO input) {\n         assertFalse(matchedUserKeys.contains(2L));\n         assertFalse(matchedUserKeys.contains(5L));\n \n+        // 2. user assigned to role 4, with search entitlement on realm /even/two\n         UserService userService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(UserService.class);\n \n         matchedUsers = userService3.search(\n                 SyncopeClient.getAnySearchQueryBuilder().realm(\"/even/two\").\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query()).build());\n         assertNotNull(matchedUsers);\n-        assertTrue(matchedUsers.getResult().isEmpty());\n+        assertTrue(CollectionUtils.matchesAll(matchedUsers.getResult(), new Predicate<UserTO>() {\n+\n+            @Override\n+            public boolean evaluate(final UserTO matched) {\n+                return \"/even/two\".equals(matched.getRealm());\n+            }\n+        }));\n     }\n \n     @Test"}]}