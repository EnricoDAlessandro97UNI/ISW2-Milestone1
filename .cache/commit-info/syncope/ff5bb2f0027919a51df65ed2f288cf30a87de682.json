{"sha":"ff5bb2f0027919a51df65ed2f288cf30a87de682","node_id":"C_kwDOJfYA1toAKGZmNWJiMmYwMDI3OTE5YTUxZGY2NWVkMmYyODhjZjMwYTg3ZGU2ODI","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-01-19T08:17:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-19T08:18:26Z"},"message":"[SYNCOPE-1724] Providing SyncopeElasticsearchHealthContributor (#404)","tree":{"sha":"4d60b2f1a923905e7db855643bacb4e59aa47e8a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4d60b2f1a923905e7db855643bacb4e59aa47e8a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ff5bb2f0027919a51df65ed2f288cf30a87de682","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff5bb2f0027919a51df65ed2f288cf30a87de682","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ff5bb2f0027919a51df65ed2f288cf30a87de682","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff5bb2f0027919a51df65ed2f288cf30a87de682/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"63d9cbb8e56539f924db3f4e4565dd27a55b8480","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/63d9cbb8e56539f924db3f4e4565dd27a55b8480","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/63d9cbb8e56539f924db3f4e4565dd27a55b8480"}],"stats":{"total":161,"additions":134,"deletions":27},"files":[{"sha":"808ecb3561c83bf8e7f72b06d74254422a60c9bf","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreApplication.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff5bb2f0027919a51df65ed2f288cf30a87de682/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff5bb2f0027919a51df65ed2f288cf30a87de682/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java?ref=ff5bb2f0027919a51df65ed2f288cf30a87de682","patch":"@@ -21,6 +21,7 @@\n import java.util.Map;\n import org.apache.cxf.spring.boot.autoconfigure.openapi.OpenApiAutoConfiguration;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n@@ -39,6 +40,8 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import org.apache.syncope.core.starter.actuate.DefaultSyncopeCoreInfoContributor;\n import org.apache.syncope.core.starter.actuate.DomainsHealthIndicator;\n import org.apache.syncope.core.starter.actuate.EntityCacheEndpoint;\n@@ -152,8 +155,8 @@ public SyncopeCoreInfoContributor syncopeCoreInfoContributor(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public DomainsHealthIndicator domainsHealthIndicator() {\n-        return new DomainsHealthIndicator();\n+    public DomainsHealthIndicator domainsHealthIndicator(final DomainHolder domainHolder) {\n+        return new DomainsHealthIndicator(domainHolder);\n     }\n \n     @ConditionalOnMissingBean\n@@ -165,8 +168,13 @@ public MailHealthIndicator mailHealthIndicator(final JavaMailSender mailSender)\n     @ConditionalOnClass(name = { \"org.apache.syncope.core.logic.ResourceLogic\" })\n     @ConditionalOnMissingBean\n     @Bean\n-    public ExternalResourcesHealthIndicator externalResourcesHealthIndicator() {\n-        return new ExternalResourcesHealthIndicator();\n+    public ExternalResourcesHealthIndicator externalResourcesHealthIndicator(\n+            final DomainOps domainOps,\n+            final ExternalResourceDAO resourceDAO,\n+            final ConnInstanceDataBinder connInstanceDataBinder,\n+            final ConnectorManager connectorManager) {\n+\n+        return new ExternalResourcesHealthIndicator(domainOps, resourceDAO, connInstanceDataBinder, connectorManager);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"53e2d8d2a894d630c6203afd15a9a50ef7259890","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/DomainsHealthIndicator.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff5bb2f0027919a51df65ed2f288cf30a87de682/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDomainsHealthIndicator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff5bb2f0027919a51df65ed2f288cf30a87de682/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDomainsHealthIndicator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDomainsHealthIndicator.java?ref=ff5bb2f0027919a51df65ed2f288cf30a87de682","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.health.Health;\n import org.springframework.boot.actuate.health.HealthIndicator;\n import org.springframework.boot.actuate.health.Status;\n@@ -33,8 +32,11 @@ public class DomainsHealthIndicator implements HealthIndicator {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(DomainsHealthIndicator.class);\n \n-    @Autowired\n-    protected DomainHolder domainHolder;\n+    protected final DomainHolder domainHolder;\n+\n+    public DomainsHealthIndicator(final DomainHolder domainHolder) {\n+        this.domainHolder = domainHolder;\n+    }\n \n     @Override\n     public Health health() {"},{"sha":"2587bf847752e4783ca789f7ed0088c17517a67b","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/EntityCacheEndpoint.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff5bb2f0027919a51df65ed2f288cf30a87de682/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FEntityCacheEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff5bb2f0027919a51df65ed2f288cf30a87de682/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FEntityCacheEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FEntityCacheEndpoint.java?ref=ff5bb2f0027919a51df65ed2f288cf30a87de682","patch":"@@ -31,7 +31,7 @@\n @Endpoint(id = \"entityCache\")\n public class EntityCacheEndpoint {\n \n-    private final EntityCacheDAO entityCacheDAO;\n+    protected final EntityCacheDAO entityCacheDAO;\n \n     public EntityCacheEndpoint(final EntityCacheDAO entityCacheDAO) {\n         this.entityCacheDAO = entityCacheDAO;"},{"sha":"439edf525b573897a50f0306f120dc68ce913c02","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/ExternalResourcesHealthIndicator.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff5bb2f0027919a51df65ed2f288cf30a87de682/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FExternalResourcesHealthIndicator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff5bb2f0027919a51df65ed2f288cf30a87de682/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FExternalResourcesHealthIndicator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FExternalResourcesHealthIndicator.java?ref=ff5bb2f0027919a51df65ed2f288cf30a87de682","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.health.Health;\n import org.springframework.boot.actuate.health.HealthIndicator;\n import org.springframework.boot.actuate.health.Status;\n@@ -39,17 +38,25 @@ public class ExternalResourcesHealthIndicator implements HealthIndicator {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(ExternalResourcesHealthIndicator.class);\n \n-    @Autowired\n-    protected DomainOps domainOps;\n+    protected final DomainOps domainOps;\n \n-    @Autowired\n-    protected ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    protected ConnInstanceDataBinder connInstanceDataBinder;\n+    protected final ConnInstanceDataBinder connInstanceDataBinder;\n \n-    @Autowired\n-    protected ConnectorManager connectorManager;\n+    protected final ConnectorManager connectorManager;\n+\n+    public ExternalResourcesHealthIndicator(\n+            final DomainOps domainOps,\n+            final ExternalResourceDAO resourceDAO,\n+            final ConnInstanceDataBinder connInstanceDataBinder,\n+            final ConnectorManager connectorManager) {\n+\n+        this.domainOps = domainOps;\n+        this.resourceDAO = resourceDAO;\n+        this.connInstanceDataBinder = connInstanceDataBinder;\n+        this.connectorManager = connectorManager;\n+    }\n \n     @Override\n     public Health health() {"},{"sha":"d48d5edef35e62243d13849cb38e008f5b5b477a","filename":"ext/elasticsearch/client-elasticsearch/pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff5bb2f0027919a51df65ed2f288cf30a87de682/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff5bb2f0027919a51df65ed2f288cf30a87de682/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml?ref=ff5bb2f0027919a51df65ed2f288cf30a87de682","patch":"@@ -43,7 +43,7 @@ under the License.\n       <artifactId>syncope-core-spring</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-      \n+\n     <dependency>\n       <groupId>co.elastic.clients</groupId>\n       <artifactId>elasticsearch-java</artifactId>\n@@ -57,6 +57,11 @@ under the License.\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-databind</artifactId>\n     </dependency>\n+\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-actuator</artifactId>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"4f9b3d2af2dd9fd3dea6ab55893b8224bd6c196e","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientContext.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff5bb2f0027919a51df65ed2f288cf30a87de682/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff5bb2f0027919a51df65ed2f288cf30a87de682/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java?ref=ff5bb2f0027919a51df65ed2f288cf30a87de682","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.springframework.boot.actuate.health.HealthContributor;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n@@ -70,4 +71,11 @@ public ElasticsearchIndexManager elasticsearchIndexManager(\n     public ElasticsearchIndexLoader elasticsearchIndexLoader(final ElasticsearchIndexManager indexManager) {\n         return new ElasticsearchIndexLoader(indexManager);\n     }\n+\n+    @ConditionalOnMissingBean\n+    @Bean(name = {\n+        \"syncopeElasticsearchHealthContributor\", \"elasticsearchHealthIndicator\", \"elasticsearchHealthContributor\" })\n+    public HealthContributor syncopeElasticsearchHealthContributor(final ElasticsearchClient client) {\n+        return new SyncopeElasticsearchHealthContributor(client);\n+    }\n }"},{"sha":"163519c532a0b99c62f8d620dadf2545e0d377c4","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/SyncopeElasticsearchHealthContributor.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff5bb2f0027919a51df65ed2f288cf30a87de682/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FSyncopeElasticsearchHealthContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff5bb2f0027919a51df65ed2f288cf30a87de682/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FSyncopeElasticsearchHealthContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FSyncopeElasticsearchHealthContributor.java?ref=ff5bb2f0027919a51df65ed2f288cf30a87de682","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.elasticsearch.client;\n+\n+import static co.elastic.clients.elasticsearch._types.HealthStatus.Green;\n+import static co.elastic.clients.elasticsearch._types.HealthStatus.Red;\n+import static co.elastic.clients.elasticsearch._types.HealthStatus.Yellow;\n+\n+import co.elastic.clients.elasticsearch.ElasticsearchClient;\n+import co.elastic.clients.elasticsearch.cluster.HealthResponse;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+\n+public class SyncopeElasticsearchHealthContributor implements HealthIndicator {\n+\n+    protected final ElasticsearchClient client;\n+\n+    public SyncopeElasticsearchHealthContributor(final ElasticsearchClient client) {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Health health() {\n+        Health.Builder builder = new Health.Builder();\n+\n+        try {\n+            HealthResponse health = client.cluster().health();\n+            switch (health.status()) {\n+                case Green:\n+                case Yellow:\n+                    builder.up();\n+                    break;\n+\n+                case Red:\n+                default:\n+                    builder.down();\n+            }\n+            builder.withDetail(\"cluster_name\", health.clusterName());\n+            builder.withDetail(\"status\", health.status().jsonValue());\n+            builder.withDetail(\"timed_out\", health.timedOut());\n+            builder.withDetail(\"number_of_nodes\", health.numberOfNodes());\n+            builder.withDetail(\"number_of_data_nodes\", health.numberOfDataNodes());\n+            builder.withDetail(\"active_primary_shards\", health.activePrimaryShards());\n+            builder.withDetail(\"relocating_shards\", health.relocatingShards());\n+            builder.withDetail(\"initializing_shards\", health.initializingShards());\n+            builder.withDetail(\"unassigned_shards\", health.unassignedShards());\n+            builder.withDetail(\"delayed_unassigned_shards\", health.delayedUnassignedShards());\n+            builder.withDetail(\"number_of_pending_tasks\", health.numberOfPendingTasks());\n+            builder.withDetail(\"number_of_in_flight_fetch\", health.numberOfInFlightFetch());\n+            builder.withDetail(\"task_max_waiting_in_queue_millis\", health.taskMaxWaitingInQueueMillis());\n+            builder.withDetail(\"active_shards_percent_as_number\", health.activeShardsPercentAsNumber());\n+        } catch (Exception e) {\n+            builder.down(e);\n+        }\n+\n+        return builder.build();\n+    }\n+}"},{"sha":"8591fbf7f7dd3bad9b18684e99b0a97e649f188e","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff5bb2f0027919a51df65ed2f288cf30a87de682/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff5bb2f0027919a51df65ed2f288cf30a87de682/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=ff5bb2f0027919a51df65ed2f288cf30a87de682","patch":"@@ -99,7 +99,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n             throws JobExecutionException {\n \n         if (!dryRun) {\n-            LOG.debug(\"Start rebuilding indexes\");\n+            setStatus(\"Start rebuilding indexes\");\n \n             try {\n                 indexManager.createAnyIndex(\n@@ -111,8 +111,9 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                 indexManager.createAnyIndex(\n                         AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT, anyObjectSettings(), anyObjectMapping());\n \n-                LOG.debug(\"Indexing users...\");\n-                for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                int users = userDAO.count();\n+                setStatus(\"Indexing \" + users + \" users...\");\n+                for (int page = 1; page <= (users / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (String user : userDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n                                 index(ElasticsearchUtils.getAnyIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n@@ -128,8 +129,9 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                     }\n                 }\n \n-                LOG.debug(\"Indexing groups...\");\n-                for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                int groups = groupDAO.count();\n+                setStatus(\"Indexing \" + groups + \" groups...\");\n+                for (int page = 1; page <= (groups / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (String group : groupDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n                                 index(ElasticsearchUtils.getAnyIndex(AuthContextUtils.getDomain(), AnyTypeKind.GROUP)).\n@@ -145,8 +147,9 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                     }\n                 }\n \n-                LOG.debug(\"Indexing any objects...\");\n-                for (int page = 1; page <= (anyObjectDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                int anyObjects = anyObjectDAO.count();\n+                setStatus(\"Indexing \" + anyObjects + \" any objects...\");\n+                for (int page = 1; page <= (anyObjects / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (String anyObject : anyObjectDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n                                 index(ElasticsearchUtils.getAnyIndex(\n@@ -166,7 +169,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                 indexManager.createAuditIndex(\n                         AuthContextUtils.getDomain(), auditSettings(), auditMapping());\n \n-                LOG.debug(\"Rebuild indexes for domain {} successfully completed\", AuthContextUtils.getDomain());\n+                setStatus(\"Rebuild indexes for domain \" + AuthContextUtils.getDomain() + \" successfully completed\");\n             } catch (Exception e) {\n                 throw new JobExecutionException(\"While rebuilding index for domain \" + AuthContextUtils.getDomain(), e);\n             }"},{"sha":"067716dc37e3aab4da7adb3890d1c66b389d9068","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff5bb2f0027919a51df65ed2f288cf30a87de682/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff5bb2f0027919a51df65ed2f288cf30a87de682/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=ff5bb2f0027919a51df65ed2f288cf30a87de682","patch":"@@ -508,7 +508,7 @@ under the License.\n     <jdbc.mysql.version>8.0.31</jdbc.mysql.version>\n     <jdbc.mariadb.version>3.0.8</jdbc.mariadb.version>\n     <jdbc.mssql.version>11.2.1.jre</jdbc.mssql.version>\n-    <jdbc.oracle.version>21.7.0.0</jdbc.oracle.version>\n+    <jdbc.oracle.version>21.8.0.0</jdbc.oracle.version>\n \n     <conf.directory>${project.build.directory}/test-classes</conf.directory>\n     <bundles.directory>${project.build.directory}/bundles</bundles.directory>"}]}