{"sha":"3a9ed4e4fdee40979c3fb08c4a6e83137d296857","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNhOWVkNGU0ZmRlZTQwOTc5YzNmYjA4YzRhNmU4MzEzN2QyOTY4NTc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-05-13T12:06:58Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-05-13T12:07:11Z"},"message":"[SYNCOPE-1460] Checking domain removal","tree":{"sha":"b00874d65bada99e72a29a1a49da0d03d0366932","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b00874d65bada99e72a29a1a49da0d03d0366932"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3a9ed4e4fdee40979c3fb08c4a6e83137d296857","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3a9ed4e4fdee40979c3fb08c4a6e83137d296857","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3a9ed4e4fdee40979c3fb08c4a6e83137d296857","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"730f144d8f72d0be1e18e00fcbf743b6d50acf17","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/730f144d8f72d0be1e18e00fcbf743b6d50acf17","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/730f144d8f72d0be1e18e00fcbf743b6d50acf17"}],"stats":{"total":369,"additions":197,"deletions":172},"files":[{"sha":"627fe0b2f3bd8f7128c0ee793ddd0f02f9b92da2","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/DomainWatcher.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainWatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainWatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainWatcher.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -25,5 +25,7 @@\n  */\n public interface DomainWatcher {\n \n-    void process(Domain domain);\n+    void added(Domain domain);\n+\n+    void removed(String domain);\n }"},{"sha":"2ff47264e3dc233b99b07a542a054a42e1c5abc7","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperDomainOps.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -67,9 +67,9 @@ public void afterPropertiesSet() throws Exception {\n                         LOG.debug(\"Domain {} added\", event.getData().getPath());\n                         try {\n                             Domain domain = MAPPER.readValue(event.getData().getData(), Domain.class);\n-                            \n+\n                             LOG.info(\"Domain {} created\", domain.getKey());\n-                            watcher.process(domain);\n+                            watcher.added(domain);\n                         } catch (IOException e) {\n                             LOG.debug(\"Could not parse {}\", new String(event.getData().getData()), e);\n                         }\n@@ -81,6 +81,7 @@ public void afterPropertiesSet() throws Exception {\n \n                     case NODE_REMOVED:\n                         LOG.debug(\"Domain {} removed\", event.getData().getPath());\n+                        watcher.removed(StringUtils.substringAfter(event.getData().getPath(), DOMAIN_PATH + \"/\"));\n                         break;\n \n                     default:"},{"sha":"330798b7f0e1ceb6019945e5cd310921aae9baf4","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/LoggingDomainWatcher.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FLoggingDomainWatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FLoggingDomainWatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FLoggingDomainWatcher.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -28,7 +28,12 @@ public class LoggingDomainWatcher implements DomainWatcher {\n     private static final Logger LOG = LoggerFactory.getLogger(LoggingDomainWatcher.class);\n \n     @Override\n-    public void process(final Domain domain) {\n-        LOG.info(\"Domain {} created\", domain);\n+    public void added(final Domain domain) {\n+        LOG.info(\"Domain {} added\", domain);\n+    }\n+\n+    @Override\n+    public void removed(final String domain) {\n+        LOG.info(\"Domain {} removed\", domain);\n     }\n }"},{"sha":"59189e8ba403054617b977ebd2de5afd5b7e15e5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/DomainRegistry.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainRegistry.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -26,4 +26,6 @@\n public interface DomainRegistry {\n \n     void register(Domain req);\n+\n+    void unregister(String domain);\n }"},{"sha":"00e0260286d6fe0bec043c63bb211d95d8f7b1c5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/SyncopeCoreLoader.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FSyncopeCoreLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FSyncopeCoreLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FSyncopeCoreLoader.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -39,4 +39,13 @@ default void load() {\n     default void load(String domain, DataSource datasource) {\n         // nothing to do        \n     }\n+\n+    /**\n+     * Perform closing operations on the given domain.\n+     *\n+     * @param domain domain to unload\n+     */\n+    default void unload(String domain) {\n+        // nothing to do        \n+    }\n }"},{"sha":"68a698262fa36756e04bb15570289ad40cb1cf69","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/DomainConfFactory.java","status":"modified","additions":51,"deletions":3,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -23,6 +23,7 @@\n import java.io.ByteArrayInputStream;\n import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n+import javax.persistence.EntityManagerFactory;\n import javax.sql.DataSource;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.apache.syncope.core.persistence.jpa.spring.DomainEntityManagerFactoryBean;\n@@ -42,28 +43,40 @@\n import org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.DomainRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n @Component\n public class DomainConfFactory implements DomainRegistry, EnvironmentAware {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(DomainConfFactory.class);\n+\n     private Environment env;\n \n     @Override\n     public void setEnvironment(final Environment env) {\n         this.env = env;\n     }\n \n-    private void registerSingleton(final String name, final Object bean) {\n+    private void unregisterSingleton(final String name) {\n         if (ApplicationContextProvider.getBeanFactory().containsSingleton(name)) {\n             ApplicationContextProvider.getBeanFactory().destroySingleton(name);\n         }\n+    }\n+\n+    private void registerSingleton(final String name, final Object bean) {\n+        unregisterSingleton(name);\n         ApplicationContextProvider.getBeanFactory().registerSingleton(name, bean);\n     }\n \n-    private void registerBeanDefinition(final String name, final BeanDefinition beanDefinition) {\n+    private void unregisterBeanDefinition(final String name) {\n         if (ApplicationContextProvider.getBeanFactory().containsBeanDefinition(name)) {\n             ApplicationContextProvider.getBeanFactory().removeBeanDefinition(name);\n         }\n+    }\n+\n+    private void registerBeanDefinition(final String name, final BeanDefinition beanDefinition) {\n+        unregisterBeanDefinition(name);\n         ApplicationContextProvider.getBeanFactory().registerBeanDefinition(name, beanDefinition);\n     }\n \n@@ -98,7 +111,6 @@ public void register(final Domain domain) {\n         databasePopulator.setIgnoreFailedDrops(true);\n         databasePopulator.setSqlScriptEncoding(StandardCharsets.UTF_8.name());\n         databasePopulator.addScript(new ClassPathResource(\"/audit/\" + domain.getAuditSql()));\n-\n         registerSingleton(domain.getKey().toLowerCase() + \"ResourceDatabasePopulator\", databasePopulator);\n \n         // domainDataSourceInitializer\n@@ -148,4 +160,40 @@ public void register(final Domain domain) {\n                         addConstructorArgValue(domain.getKeymasterConfParams().getBytes()).\n                         getBeanDefinition());\n     }\n+\n+    @Override\n+    public void unregister(final String domain) {\n+        // domainKeymasterConfParamsJSON\n+        unregisterSingleton(domain + \"KeymasterConfParamsJSON\");\n+        unregisterBeanDefinition(domain + \"KeymasterConfParamsJSON\");\n+\n+        // domainContentXML\n+        unregisterSingleton(domain + \"ContentXML\");\n+        unregisterBeanDefinition(domain + \"ContentXML\");\n+\n+        // domainEntityManagerFactory\n+        try {\n+            EntityManagerFactory emf = ApplicationContextProvider.getBeanFactory().\n+                    getBean(domain + \"EntityManagerFactory\", EntityManagerFactory.class);\n+            emf.close();\n+        } catch (Exception e) {\n+            LOG.error(\"Could not close EntityManagerFactory for Domain {}\", domain, e);\n+        }\n+        unregisterSingleton(domain + \"EntityManagerFactory\");\n+        unregisterBeanDefinition(domain + \"EntityManagerFactory\");\n+\n+        // domainTransactionManager\n+        unregisterSingleton(domain + \"TransactionManager\");\n+        unregisterBeanDefinition(domain + \"TransactionManager\");\n+\n+        // domainDataSourceInitializer\n+        unregisterSingleton(domain.toLowerCase() + \"DataSourceInitializer\");\n+\n+        // domainResourceDatabasePopulator\n+        unregisterSingleton(domain.toLowerCase() + \"ResourceDatabasePopulator\");\n+\n+        // domainDataSource\n+        unregisterSingleton(domain + \"DataSource\");\n+        unregisterBeanDefinition(domain + \"DataSource\");\n+    }\n }"},{"sha":"ffc258d79aff7f2fd659dd3c14bbeb45dfa8d8e6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/RuntimeDomainLoader.java","status":"modified","additions":28,"deletions":5,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -43,11 +43,11 @@ public class RuntimeDomainLoader implements DomainWatcher {\n     private DomainRegistry domainRegistry;\n \n     @Override\n-    public void process(final Domain domain) {\n+    public void added(final Domain domain) {\n         if (domainHolder.getDomains().containsKey(domain.getKey())) {\n             LOG.debug(\"Domain {} already inited, skipping\", domain.getKey());\n         } else {\n-            LOG.info(\"Domain {} initialization\", domain.getKey());\n+            LOG.info(\"Domain {} registration\", domain.getKey());\n \n             domainRegistry.register(domain);\n \n@@ -56,14 +56,37 @@ public void process(final Domain domain) {\n                     forEach(loader -> {\n                         String loaderName = AopUtils.getTargetClass(loader).getName();\n \n-                        loader.load();\n-\n                         LOG.debug(\"[{}] Starting on domain '{}'\", loaderName, domain);\n                         loader.load(domain.getKey(), domainHolder.getDomains().get(domain.getKey()));\n                         LOG.debug(\"[{}] Completed on domain '{}'\", loaderName, domain);\n                     });\n \n-            LOG.info(\"Domain {} successfully inited\", domain.getKey());\n+            LOG.info(\"Domain {} successfully deployed\", domain.getKey());\n+        }\n+    }\n+\n+    @Override\n+    public void removed(final String domain) {\n+        if (domainHolder.getDomains().containsKey(domain)) {\n+            LOG.info(\"Domain {} unregistration\", domain);\n+\n+            ApplicationContextProvider.getApplicationContext().getBeansOfType(SyncopeCoreLoader.class).values().\n+                    stream().sorted(Comparator.comparing(SyncopeCoreLoader::getOrder).reversed()).\n+                    forEach(loader -> {\n+                        String loaderName = AopUtils.getTargetClass(loader).getName();\n+\n+                        LOG.debug(\"[{}] Starting on domain '{}'\", loaderName, domain);\n+                        loader.unload(domain);\n+                        LOG.debug(\"[{}] Completed on domain '{}'\", loaderName, domain);\n+                    });\n+\n+            domainRegistry.unregister(domain);\n+\n+            domainHolder.getDomains().remove(domain);\n+\n+            LOG.info(\"Domain {} successfully undeployed\", domain);\n+        } else {\n+            LOG.debug(\"Domain {} not inited, skipping\", domain);\n         }\n     }\n }"},{"sha":"35a014c9df20e841f6d0e2ad386e1069a4ee3e14","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/CommonEntityManagerFactoryConf.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -42,10 +42,6 @@ public class CommonEntityManagerFactoryConf implements DomainHolder {\n \n     private final Map<String, Object> jpaPropertyMap = new HashMap<>();\n \n-    public void addDomain(final String domain, final DataSource datasource) {\n-        this.domains.put(domain, datasource);\n-    }\n-\n     @Override\n     public Map<String, DataSource> getDomains() {\n         return domains;"},{"sha":"dc9623a7a660da70eadb663ff3f96646d814889e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/DomainEntityManagerFactoryBean.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainEntityManagerFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainEntityManagerFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainEntityManagerFactoryBean.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -41,6 +41,6 @@ public void setCommonEntityManagerFactoryConf(final CommonEntityManagerFactoryCo\n             super.setPersistenceUnitPostProcessors(commonEMFConf.getPersistenceUnitPostProcessors());\n         }\n \n-        commonEMFConf.addDomain(this.getPersistenceUnitName(), this.getDataSource());\n+        commonEMFConf.getDomains().put(this.getPersistenceUnitName(), this.getDataSource());\n     }\n }"},{"sha":"4d09755d79f4e722f47d451fc6d062a510fdfc14","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -403,4 +403,33 @@ public void load(final String domain, final DataSource datasource) {\n             }\n         }\n     }\n+\n+    @Override\n+    public void unload(final String domain) {\n+        AuthContextUtils.callAsAdmin(domain, () -> {\n+            // 1. jobs for SchedTasks\n+            Set<SchedTask> tasks = new HashSet<>(taskDAO.<SchedTask>findAll(TaskType.SCHEDULED));\n+            tasks.addAll(taskDAO.<PullTask>findAll(TaskType.PULL));\n+            tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n+\n+            tasks.forEach(task -> {\n+                try {\n+                    unregister(task);\n+                } catch (Exception e) {\n+                    LOG.error(\"While unloading job instance for task \" + task.getKey(), e);\n+                }\n+            });\n+\n+            // 2. jobs for Reports\n+            reportDAO.findAll().forEach(report -> {\n+                try {\n+                    unregister(report);\n+                } catch (Exception e) {\n+                    LOG.error(\"While unloading job instance for report \" + report.getName(), e);\n+                }\n+            });\n+\n+            return null;\n+        });\n+    }\n }"},{"sha":"2596a139eaff2755e5af15bd672dceadceef8910","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":30,"deletions":20,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n@@ -30,6 +31,7 @@\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n public class TaskJob extends AbstractInterruptableJob {\n \n@@ -49,6 +51,9 @@ public enum Status {\n \n     }\n \n+    @Autowired\n+    private DomainHolder domainHolder;\n+\n     /**\n      * Key, set by the caller, for identifying the task to be executed.\n      */\n@@ -73,29 +78,34 @@ public JobDelegate getDelegate() {\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n         try {\n-            AuthContextUtils.callAsAdmin(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY), () -> {\n-                try {\n-                    ImplementationDAO implementationDAO =\n-                            ApplicationContextProvider.getApplicationContext().getBean(ImplementationDAO.class);\n-                    Implementation implementation = implementationDAO.find(\n-                            context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n-                    if (implementation == null) {\n-                        LOG.error(\"Could not find Implementation '{}', aborting\",\n+            String domain = context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY);\n+            if (domainHolder.getDomains().containsKey(domain)) {\n+                AuthContextUtils.callAsAdmin(domain, () -> {\n+                    try {\n+                        ImplementationDAO implementationDAO =\n+                                ApplicationContextProvider.getApplicationContext().getBean(ImplementationDAO.class);\n+                        Implementation implementation = implementationDAO.find(\n                                 context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n-                    } else {\n-                        delegate = ImplementationManager.<SchedTaskJobDelegate>build(implementation);\n-                        delegate.execute(\n-                                taskKey,\n-                                context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n-                                context);\n+                        if (implementation == null) {\n+                            LOG.error(\"Could not find Implementation '{}', aborting\",\n+                                    context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n+                        } else {\n+                            delegate = ImplementationManager.<SchedTaskJobDelegate>build(implementation);\n+                            delegate.execute(\n+                                    taskKey,\n+                                    context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n+                                    context);\n+                        }\n+                    } catch (Exception e) {\n+                        LOG.error(\"While executing task {}\", taskKey, e);\n+                        throw new RuntimeException(e);\n                     }\n-                } catch (Exception e) {\n-                    LOG.error(\"While executing task {}\", taskKey, e);\n-                    throw new RuntimeException(e);\n-                }\n \n-                return null;\n-            });\n+                    return null;\n+                });\n+            } else {\n+                LOG.debug(\"Domain {} not found, skipping\", domain);\n+            }\n         } catch (RuntimeException e) {\n             LOG.error(\"While executing task {}\", taskKey, e);\n             throw new JobExecutionException(\"While executing task \" + taskKey, e);"},{"sha":"862340cb9bbcb646e7f3de69dc4fa33a31af0d95","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java","status":"modified","additions":24,"deletions":16,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.slf4j.Logger;\n@@ -96,7 +97,20 @@ public void setAnonymousKey(final String anonymousKey) {\n \n     @Override\n     public Authentication authenticate(final Authentication authentication) {\n-        String domain = SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).getDomain();\n+        Domain domain;\n+        if (SyncopeConstants.MASTER_DOMAIN.equals(\n+                SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).getDomain())) {\n+\n+            domain = new Domain.Builder(SyncopeConstants.MASTER_DOMAIN).build();\n+        } else {\n+            try {\n+                domain = domainOps.read(\n+                        SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).getDomain());\n+            } catch (NotFoundException | KeymasterException e) {\n+                throw new BadCredentialsException(\"Could not find domain \"\n+                        + SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).getDomain(), e);\n+            }\n+        }\n \n         String[] username = new String[1];\n         boolean authenticated;\n@@ -107,33 +121,27 @@ public Authentication authenticate(final Authentication authentication) {\n             authenticated = authentication.getCredentials().toString().equals(anonymousKey);\n         } else if (adminUser.equals(authentication.getName())) {\n             username[0] = adminUser;\n-            if (SyncopeConstants.MASTER_DOMAIN.equals(domain)) {\n+            if (SyncopeConstants.MASTER_DOMAIN.equals(domain.getKey())) {\n                 credentialChecker.checkIsDefaultAdminPasswordInUse();\n                 authenticated = ENCRYPTOR.verify(\n                         authentication.getCredentials().toString(),\n                         CipherAlgorithm.valueOf(adminPasswordAlgorithm),\n                         adminPassword);\n             } else {\n-                try {\n-                    Domain domainObj = domainOps.read(domain);\n-                    authenticated = ENCRYPTOR.verify(\n-                            authentication.getCredentials().toString(),\n-                            domainObj.getAdminCipherAlgorithm(),\n-                            domainObj.getAdminPassword());\n-                } catch (KeymasterException e) {\n-                    LOG.error(\"While attempting to read domain {}\", domain, e);\n-                    authenticated = false;\n-                }\n+                authenticated = ENCRYPTOR.verify(\n+                        authentication.getCredentials().toString(),\n+                        domain.getAdminCipherAlgorithm(),\n+                        domain.getAdminPassword());\n             }\n         } else {\n-            Pair<User, Boolean> authResult = AuthContextUtils.callAsAdmin(domain,\n-                    () -> dataAccessor.authenticate(domain, authentication));\n+            Pair<User, Boolean> authResult = AuthContextUtils.callAsAdmin(domain.getKey(),\n+                    () -> dataAccessor.authenticate(domain.getKey(), authentication));\n             authenticated = BooleanUtils.toBoolean(authResult.getRight());\n             if (authResult.getLeft() != null && authResult.getRight() != null) {\n                 username[0] = authResult.getLeft().getUsername();\n \n                 if (!authResult.getRight()) {\n-                    AuthContextUtils.callAsAdmin(domain, () -> {\n+                    AuthContextUtils.callAsAdmin(domain.getKey(), () -> {\n                         provisioningManager.internalSuspend(authResult.getLeft().getKey());\n                         return null;\n                     });\n@@ -144,7 +152,7 @@ public Authentication authenticate(final Authentication authentication) {\n             username[0] = authentication.getPrincipal().toString();\n         }\n \n-        return finalizeAuthentication(authenticated, domain, username[0], authentication);\n+        return finalizeAuthentication(authenticated, domain.getKey(), username[0], authentication);\n     }\n \n     protected Authentication finalizeAuthentication("},{"sha":"789f39d52e3cf3ad6af94e83a5264ed7846179c8","filename":"ext/self-keymaster/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -74,7 +74,7 @@ public Domain create(final Domain domain) {\n         domainEntity.set(domain);\n         domainEntity = domainDAO.save(domainEntity);\n \n-        domainWatcher.process(domain);\n+        domainWatcher.added(domain);\n \n         return domainEntity.get();\n     }\n@@ -110,6 +110,8 @@ public void adjustPoolSize(final String key, final int maxPoolSize, final int mi\n     @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n     public void delete(final String key) {\n         domainDAO.delete(key);\n+\n+        domainWatcher.removed(key);\n     }\n \n     @Override"},{"sha":"0526e5249df97f5357c18d21735adb675ed0c6f2","filename":"ext/self-keymaster/rest-cxf/pom.xml","status":"modified","additions":3,"deletions":21,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/ext%2Fself-keymaster%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/ext%2Fself-keymaster%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fpom.xml?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -39,27 +39,9 @@ under the License.\n \n   <dependencies>\n     <dependency>\n-      <groupId>javax.servlet</groupId>\n-      <artifactId>javax.servlet-api</artifactId>\n-      <scope>provided</scope>\n-    </dependency>\n-\n-    <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-rs-service-description</artifactId>\n-    </dependency>\n-\n-    <dependency>\n-      <groupId>com.fasterxml.jackson.jaxrs</groupId>\n-      <artifactId>jackson-jaxrs-json-provider</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.fasterxml.jackson.module</groupId>\n-      <artifactId>jackson-module-afterburner</artifactId>\n+      <groupId>org.apache.syncope.core.idrepo</groupId>\n+      <artifactId>syncope-core-idrepo-rest-cxf</artifactId>\n+      <version>${project.version}</version>\n     </dependency>\n \n     <dependency>"},{"sha":"f7671eb8e8b45db4fee2b784f063476f134b639e","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/SelfKeymasterContext.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3a9ed4e4fdee40979c3fb08c4a6e83137d296857/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java?ref=3a9ed4e4fdee40979c3fb08c4a6e83137d296857","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.ext.self.keymaster.cxf;\n \n-import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n import java.util.Arrays;\n import java.util.Collections;\n import javax.annotation.Resource;\n@@ -33,6 +33,7 @@\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.core.rest.cxf.RestServiceExceptionMapper;\n import org.apache.syncope.core.spring.security.UsernamePasswordAuthenticationProvider;\n import org.apache.syncope.core.spring.security.WebSecurityContext;\n import org.apache.syncope.ext.self.keymaster.cxf.client.SelfKeymasterInternalConfParamOps;\n@@ -65,16 +66,6 @@ public class SelfKeymasterContext {\n     @Resource(name = \"version\")\n     private String version;\n \n-    @Bean\n-    public JacksonJsonProvider selfKeymasterJacksonJsonProvider() {\n-        return new JacksonJsonProvider();\n-    }\n-\n-    @Bean\n-    public SelfKeymasterExceptionMapper selfKeymasterExceptionMapper() {\n-        return new SelfKeymasterExceptionMapper();\n-    }\n-\n     @Bean\n     public WadlGenerator selfKeymasterWADLGenerator() {\n         WadlGenerator wadlGenerator = new WadlGenerator();\n@@ -109,8 +100,8 @@ public Server selfKeymasterContainer() {\n                 ctx.getBean(JAXRSBeanValidationOutInterceptor.class)));\n \n         selfKeymasterContainer.setProviders(Arrays.asList(\n-                selfKeymasterJacksonJsonProvider(),\n-                selfKeymasterExceptionMapper(),\n+                ctx.getBean(RestServiceExceptionMapper.class),\n+                ctx.getBean(JacksonJaxbJsonProvider.class),\n                 selfKeymasterWADLGenerator()));\n \n         selfKeymasterContainer.setApplicationContext(ctx);"},{"sha":"6415f50342069bd45cf4a52d58960261ee276a2e","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/SelfKeymasterExceptionMapper.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/730f144d8f72d0be1e18e00fcbf743b6d50acf17/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/730f144d8f72d0be1e18e00fcbf743b6d50acf17/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterExceptionMapper.java?ref=730f144d8f72d0be1e18e00fcbf743b6d50acf17","patch":"@@ -1,83 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.self.keymaster.cxf;\n-\n-import javax.validation.ValidationException;\n-import javax.ws.rs.ForbiddenException;\n-import javax.ws.rs.NotAuthorizedException;\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.Response.ResponseBuilder;\n-import javax.ws.rs.ext.ExceptionMapper;\n-import javax.ws.rs.ext.Provider;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n-import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.security.access.AccessDeniedException;\n-\n-@Provider\n-public class SelfKeymasterExceptionMapper implements ExceptionMapper<Exception> {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SelfKeymasterExceptionMapper.class);\n-\n-    @Override\n-    public Response toResponse(final Exception ex) {\n-        LOG.error(\"Exception thrown\", ex);\n-\n-        ResponseBuilder builder = null;\n-\n-        if (ex instanceof AccessDeniedException\n-                || ex instanceof ForbiddenException\n-                || ex instanceof NotAuthorizedException) {\n-\n-            // leaves the default exception processing\n-            builder = null;\n-        } else if (ex instanceof NotFoundException) {\n-            builder = Response.status(Response.Status.NOT_FOUND).\n-                    entity(ExceptionUtils.getRootCauseMessage(ex));\n-        } else if (ex instanceof KeymasterException) {\n-            builder = Response.status(Response.Status.BAD_REQUEST).\n-                    entity(ExceptionUtils.getRootCauseMessage(ex));\n-        } else if (ex instanceof SyncopeClientException) {\n-            SyncopeClientException sce = (SyncopeClientException) ex;\n-            builder = builder(sce.getType(), ExceptionUtils.getRootCauseMessage(ex));\n-        } else {\n-            // process JAX-RS validation errors\n-            if (ex instanceof ValidationException) {\n-                builder = builder(ClientExceptionType.RESTValidation, ExceptionUtils.getRootCauseMessage(ex));\n-            }\n-            // ...or just report as InternalServerError\n-            if (builder == null) {\n-                builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n-                        entity(ExceptionUtils.getRootCauseMessage(ex));\n-            }\n-        }\n-\n-        return builder == null ? null : builder.build();\n-    }\n-\n-    private ResponseBuilder builder(final ClientExceptionType type, final String msg) {\n-        ResponseBuilder builder = Response.status(type.getResponseStatus());\n-\n-        return builder.entity(msg);\n-    }\n-}"}]}