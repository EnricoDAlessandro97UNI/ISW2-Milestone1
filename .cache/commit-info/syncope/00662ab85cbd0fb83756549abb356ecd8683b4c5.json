{"sha":"00662ab85cbd0fb83756549abb356ecd8683b4c5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAwNjYyYWI4NWNiZDBmYjgzNzU2NTQ5YWJiMzU2ZWNkODY4M2I0YzU=","commit":{"author":{"name":"Massimiliano Perrone","email":"massi@apache.org","date":"2014-08-08T15:51:00Z"},"committer":{"name":"Massimiliano Perrone","email":"massi@apache.org","date":"2014-08-08T15:51:00Z"},"message":"Fixed #SYNCOPE-542\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_2_X@1616809 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7379dba4ae6a148ff4b36ba4a395e13638da5d6c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7379dba4ae6a148ff4b36ba4a395e13638da5d6c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/00662ab85cbd0fb83756549abb356ecd8683b4c5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/00662ab85cbd0fb83756549abb356ecd8683b4c5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/00662ab85cbd0fb83756549abb356ecd8683b4c5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/00662ab85cbd0fb83756549abb356ecd8683b4c5/comments","author":null,"committer":null,"parents":[{"sha":"c5ce9605f424a000d11ccc03e976f1f13fc2d7b7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c5ce9605f424a000d11ccc03e976f1f13fc2d7b7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c5ce9605f424a000d11ccc03e976f1f13fc2d7b7"}],"stats":{"total":234,"additions":205,"deletions":29},"files":[{"sha":"d91704f4a7e51b8455049a7e4460266f66597710","filename":"installer/src/main/java/org/apache/syncope/installer/containers/Tomcat.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fcontainers%2FTomcat.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fcontainers%2FTomcat.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fcontainers%2FTomcat.java?ref=00662ab85cbd0fb83756549abb356ecd8683b4c5","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.installer.containers;\n \n+import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n import org.apache.syncope.installer.utilities.FileSystemUtils;\n@@ -32,14 +33,15 @@ public class Tomcat extends AbstractContainer {\n     private final String installPath;\n \n     private final String artifactId;\n-\n+    \n     private final HttpUtils httpUtils;\n \n     public Tomcat(final boolean tomcatSsl, final String tomcatHost, final String tomcatPort,\n-            final String installPath, final String artifactId, final String tomcatUser, final String tomcatPassword) {\n+            final String installPath, final String artifactId, final String tomcatUser, final String tomcatPassword,\n+            final AbstractUIProcessHandler handler) {\n         this.installPath = installPath;\n         this.artifactId = artifactId;\n-        httpUtils = new HttpUtils(tomcatSsl, tomcatHost, tomcatPort, tomcatUser, tomcatPassword);\n+        httpUtils = new HttpUtils(tomcatSsl, tomcatHost, tomcatPort, tomcatUser, tomcatPassword, handler);\n     }\n \n     public boolean deployCore() {"},{"sha":"c3f74296e9f2a1d8e84aca350f2c9d1b0e092b7b","filename":"installer/src/main/java/org/apache/syncope/installer/containers/jboss/JBoss.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fcontainers%2Fjboss%2FJBoss.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fcontainers%2Fjboss%2FJBoss.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fcontainers%2Fjboss%2FJBoss.java?ref=00662ab85cbd0fb83756549abb356ecd8683b4c5","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.installer.containers.jboss;\n \n+import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import org.apache.syncope.installer.containers.AbstractContainer;\n import org.apache.syncope.installer.utilities.HttpUtils;\n import org.apache.syncope.installer.utilities.JsonUtils;\n@@ -42,13 +43,13 @@ public class JBoss extends AbstractContainer {\n \n     public JBoss(final boolean jbossSsl, final String jbossHost, final String jbossPort,\n             final String jbossAdminUsername, final String jbossAdminPassword,\n-            final String installPath, final String artifactId) {\n+            final String installPath, final String artifactId, final AbstractUIProcessHandler handler) {\n         this.jbossSsl = jbossSsl;\n         this.jbossHost = jbossHost;\n         this.jbossPort = jbossPort;\n         this.installPath = installPath;\n         this.artifactId = artifactId;\n-        httpUtils = new HttpUtils(jbossSsl, jbossHost, jbossPort, jbossAdminUsername, jbossAdminPassword);\n+        httpUtils = new HttpUtils(jbossSsl, jbossHost, jbossPort, jbossAdminUsername, jbossAdminPassword, handler);\n \n     }\n "},{"sha":"1338ff05b25c8a569561736d95c664dfa24dbd17","filename":"installer/src/main/java/org/apache/syncope/installer/processes/ArchetypeProcess.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java?ref=00662ab85cbd0fb83756549abb356ecd8683b4c5","patch":"@@ -22,6 +22,7 @@\n import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.File;\n import org.apache.syncope.installer.files.Pom;\n+import org.apache.syncope.installer.utilities.InstallLog;\n import org.apache.syncope.installer.utilities.MavenUtils;\n \n public class ArchetypeProcess {\n@@ -44,6 +45,7 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n \n         if (!new File(installPath).exists()) {\n             fileSystemUtils.createDirectory(installPath, null);\n+            InstallLog.initialize(installPath, handler);\n         }\n \n         final MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);"},{"sha":"a601902c62edae4015c61d0cefe02fb86632886b","filename":"installer/src/main/java/org/apache/syncope/installer/processes/ContainerProcess.java","status":"modified","additions":23,"deletions":6,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java?ref=00662ab85cbd0fb83756549abb356ecd8683b4c5","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.installer.files.JBossDeploymentStructureXml;\n import org.apache.syncope.installer.files.PersistenceContextEMFactoryXml;\n import org.apache.syncope.installer.files.CoreWebXml;\n+import org.apache.syncope.installer.utilities.InstallLog;\n import org.apache.syncope.installer.utilities.MavenUtils;\n \n public class ContainerProcess {\n@@ -96,6 +97,9 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n \n         final FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n \n+        handler.logOutput(\"Configure web.xml file according to \" + selectedContainer + \" properties\", true);\n+        InstallLog.getInstance().info(\"Configure web.xml file according to \" + selectedContainer + \" properties\");\n+\n         if (withDataSource) {\n             fileSystemUtils.writeToFile(new File(installPath + \"/\" + artifactId + CoreWebXml.PATH), CoreWebXml.\n                     withDataSource());\n@@ -122,37 +126,50 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n         switch (selectedContainer) {\n             case TOMCAT:\n                 final Tomcat tomcat = new Tomcat(\n-                        tomcatSsl, tomcatHost, tomcatPort, installPath, artifactId, tomcatUser, tomcatPassword);\n+                        tomcatSsl, tomcatHost, tomcatPort, installPath, artifactId, tomcatUser, tomcatPassword, handler);\n                 boolean deployCoreResult = tomcat.deployCore();\n                 if (deployCoreResult) {\n                     handler.logOutput(\"Core successfully deployed \", true);\n+                    InstallLog.getInstance().info(\"Core successfully deployed \");\n                 } else {\n-                    handler.emitError(\"Deploy core on Tomcat failed\", \"Deploy core on Tomcat failed\");\n+                    final String messageError = \"Deploy core on Tomcat failed\";\n+                    handler.emitError(messageError, messageError);\n+                    InstallLog.getInstance().error(messageError);\n                 }\n \n                 boolean deployConsoleResult = tomcat.deployConsole();\n                 if (deployConsoleResult) {\n                     handler.logOutput(\"Console successfully deployed \", true);\n+                    InstallLog.getInstance().info(\"Console successfully deployed \");\n                 } else {\n-                    handler.emitError(\"Deploy console on Tomcat failed\", \"Deploy console on Tomcat failed\");\n+                    final String messageError = \"Deploy console on Tomcat failed\";\n+                    handler.emitError(messageError, messageError);\n+                    InstallLog.getInstance().error(messageError);\n                 }\n                 break;\n             case JBOSS:\n                 final JBoss jBoss = new JBoss(\n-                        jbossSsl, jbossHost, jbossPort, jbossAdminUsername, jbossAdminPassword, installPath, artifactId);\n+                        jbossSsl, jbossHost, jbossPort, jbossAdminUsername,\n+                        jbossAdminPassword, installPath, artifactId, handler);\n \n                 boolean deployCoreJboss = jBoss.deployCore();\n                 if (deployCoreJboss) {\n                     handler.logOutput(\"Core successfully deployed \", true);\n+                    InstallLog.getInstance().info(\"Core successfully deployed \");\n                 } else {\n-                    handler.emitError(\"Deploy core on JBoss failed\", \"Deploy core on JBoss failed\");\n+                    final String messageError = \"Deploy core on JBoss failed\";\n+                    handler.emitError(messageError, messageError);\n+                    InstallLog.getInstance().error(messageError);\n                 }\n \n                 boolean deployConsoleJBoss = jBoss.deployConsole();\n                 if (deployConsoleJBoss) {\n                     handler.logOutput(\"Console successfully deployed \", true);\n+                    InstallLog.getInstance().info(\"Console successfully deployed \");\n                 } else {\n-                    handler.emitError(\"Deploy console on JBoss failed\", \"Deploy console on JBoss failed\");\n+                    final String messageError = \"Deploy console on JBoss failed\";\n+                    handler.emitError(messageError, messageError);\n+                    InstallLog.getInstance().error(messageError);\n                 }\n                 break;\n             case GLASSFISH:"},{"sha":"22419baebf70119fe86f52337aa5534a428c6bb8","filename":"installer/src/main/java/org/apache/syncope/installer/processes/PersistenceProcess.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FPersistenceProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FPersistenceProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FPersistenceProcess.java?ref=00662ab85cbd0fb83756549abb356ecd8683b4c5","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.installer.enums.DBs;\n import org.apache.syncope.installer.files.OrmXml;\n import org.apache.syncope.installer.files.PersistenceProperties;\n+import org.apache.syncope.installer.utilities.InstallLog;\n \n public class PersistenceProcess {\n \n@@ -58,6 +59,9 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n \n         final StringBuilder persistenceProperties = new StringBuilder(PersistenceProperties.HEADER);\n \n+        handler.logOutput(\"Configure persistence file according to \" + dbSelected + \" properties\", true);\n+        InstallLog.getInstance().info(\"Configure persistence file according to \" + dbSelected + \" properties\");\n+        \n         switch (dbSelected) {\n             case POSTGRES:\n                 persistenceProperties.append(String.format("},{"sha":"38592431e9622d64ef3443d36fb4e63fba68675b","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/FileSystemUtils.java","status":"modified","additions":38,"deletions":10,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java?ref=00662ab85cbd0fb83756549abb356ecd8683b4c5","patch":"@@ -26,34 +26,44 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n \n public class FileSystemUtils {\n \n     public static final boolean IS_WIN = System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n \n+    private static final String UNIX_CREATE_DIRECTORY = \"mkdir -p %s\";\n+\n+    private static final String WIN_CREATE_DIRECTORY = \"mkdir %s\";\n+\n     private final AbstractUIProcessHandler handler;\n-    \n+\n     public FileSystemUtils(final AbstractUIProcessHandler handler) {\n         this.handler = handler;\n     }\n-    \n+\n     public void createDirectory(final String directoryPath, final String path) {\n-        exec(String.format(CREATE_DIRECTORY, directoryPath), path);\n-    }\n+        if (IS_WIN) {\n+            exec(String.format(WIN_CREATE_DIRECTORY, directoryPath), path);\n+        } else {\n+            exec(String.format(UNIX_CREATE_DIRECTORY, directoryPath), path);\n+        }\n \n-    private static final String CREATE_DIRECTORY = \"mkdir -p %s\";\n+    }\n \n     public void exec(final String cmd, final String path) {\n         try {\n+            handler.logOutput(\"Executing \" + cmd, true);\n             final ProcessBuilder builder = new ProcessBuilder(cmd.split(\" \"));\n             if (path != null && !path.isEmpty()) {\n                 builder.directory(new File(path));\n             }\n             final Process process = builder.start();\n             readResponse(process.getInputStream());\n         } catch (final IOException ex) {\n-            handler.emitError(\"Error executing \" + cmd + \": \" + ex.getMessage(),\n-                    \"Error executing \" + cmd + \": \" + ex.getMessage());\n+            final String errorMessage = \"Error executing \" + cmd + \": \" + ex.getMessage();\n+            handler.emitError(errorMessage, errorMessage);\n+            InstallLog.getInstance().error(errorMessage);\n         }\n     }\n \n@@ -63,7 +73,9 @@ private void readResponse(final InputStream inputStream) throws\n         String line = reader.readLine();\n         while (line != null) {\n             line = reader.readLine();\n-            handler.logOutput(line == null ? \"\" : line, false);\n+            final String content = line == null ? \"\" : line;\n+            handler.logOutput(content, false);\n+            InstallLog.getInstance().info(content);\n         }\n         inputStream.close();\n     }\n@@ -75,8 +87,24 @@ public void writeToFile(final File file, final String content) {\n             bw.write(content);\n             bw.close();\n         } catch (final IOException ex) {\n-            handler.emitError(\"Error writing file\" + file.getAbsolutePath() + \": \" + ex.getMessage(),\n-                    \"Error writing file\" + file.getAbsolutePath() + \": \" + ex.getMessage());\n+            final String errorMessage = \"Error writing file \" + file.getAbsolutePath() + \": \" + ex.getMessage();\n+            handler.emitError(errorMessage, errorMessage);\n+            InstallLog.getInstance().error(errorMessage);\n+        }\n+    }\n+\n+    public void appendToFile(final File file, final String content) {\n+        try {\n+            if (!file.exists()) {\n+                file.createNewFile();\n+            }\n+            final PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(file, true)));\n+            out.println(content);\n+            out.close();\n+        } catch (IOException ex) {\n+            final String errorMessage = \"Error writing file \" + file.getAbsolutePath() + \": \" + ex.getMessage();\n+            handler.emitError(errorMessage, errorMessage);\n+            InstallLog.getInstance().error(errorMessage);\n         }\n     }\n "},{"sha":"1e8e94cc512b653fd8420bc931a58b7d122089db","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/HttpUtils.java","status":"modified","additions":31,"deletions":5,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java?ref=00662ab85cbd0fb83756549abb356ecd8683b4c5","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.installer.utilities;\n \n+import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.File;\n import java.io.IOException;\n import java.security.KeyManagementException;\n@@ -69,8 +70,10 @@ public class HttpUtils {\n \n     private final HttpHost targetHost;\n \n+    private final AbstractUIProcessHandler handler;\n+\n     public HttpUtils(final boolean isSsl, final String host,\n-            final String port, final String username, final String password) {\n+            final String port, final String username, final String password, final AbstractUIProcessHandler handler) {\n \n         this.isSsl = isSsl;\n         this.host = host;\n@@ -83,9 +86,11 @@ public HttpUtils(final boolean isSsl, final String host,\n             httpClient = HttpClients.createDefault();\n             this.targetHost = new HttpHost(this.host, this.port, \"http\");\n         }\n-        \n+\n         this.username = username;\n         this.password = password;\n+\n+        this.handler = handler;\n     }\n \n     public int getWithBasicAuth(final String path) {\n@@ -97,11 +102,18 @@ public int getWithBasicAuth(final String path) {\n         }\n         int status = 0;\n         try {\n+            handler.logOutput(\"Calling \" + httpGet.getURI(), true);\n+            InstallLog.getInstance().info(\"Calling \" + httpGet.getURI());\n             final CloseableHttpResponse response = httpClient.execute(\n                     targetHost, httpGet, setAuth(targetHost, new BasicScheme()));\n             status = response.getStatusLine().getStatusCode();\n+            handler.logOutput(\"Calling status \" + status, true);\n+            InstallLog.getInstance().info(\"Calling status \" + status);\n             response.close();\n-        } catch (IOException ex) {\n+        } catch (final IOException ex) {\n+            final String messageError = \"Error in \" + path + \": \" + ex.getMessage();\n+            handler.emitError(messageError, messageError);\n+            InstallLog.getInstance().error(messageError);\n         }\n         return status;\n     }\n@@ -113,8 +125,13 @@ public String postWithDigestAuth(final String url, final String file) {\n                     httpPost(url, MultipartEntityBuilder.create().addPart(\"bin\", new FileBody(new File(file))).build()),\n                     setAuth(targetHost, new DigestScheme()));\n             responseBodyAsString = IOUtils.toString(response.getEntity().getContent());\n+            handler.logOutput(\"Http status: \" + response.getStatusLine().getStatusCode(), true);\n+            InstallLog.getInstance().info(\"Http status: \" + response.getStatusLine().getStatusCode());\n             response.close();\n-        } catch (IOException ex) {\n+        } catch (final IOException ex) {\n+            final String messageError = \"Error calling \" + url + \": \" + ex.getMessage();\n+            handler.emitError(messageError, messageError);\n+            InstallLog.getInstance().error(messageError);\n         }\n \n         return responseBodyAsString;\n@@ -128,8 +145,15 @@ public int postWithStringEntity(final String url, final String stringEntity) {\n             final CloseableHttpResponse response = httpClient.execute(\n                     targetHost, httPost, setAuth(targetHost, new DigestScheme()));\n             status = response.getStatusLine().getStatusCode();\n+            handler.logOutput(\"Http status: \" + status, true);\n+            InstallLog.getInstance().info(\"Http status: \" + status);\n+\n             response.close();\n-        } catch (IOException ioe) {\n+        } catch (final IOException ioe) {\n+            final String messageError = \"Error calling \" + url + \": \" + ioe.getMessage();\n+            handler.emitError(messageError, messageError);\n+            InstallLog.getInstance().error(messageError);\n+\n         }\n         return status;\n     }\n@@ -149,6 +173,8 @@ private HttpClientContext setAuth(final HttpHost targetHost, final AuthScheme au\n     private HttpPost httpPost(final String url, final HttpEntity reqEntity) {\n         final HttpPost httppost = new HttpPost(url);\n         httppost.setEntity(reqEntity);\n+        handler.logOutput(\"Calling \" + httppost.getURI(), true);\n+        InstallLog.getInstance().info(\"Calling \" + httppost.getURI());\n         return httppost;\n     }\n "},{"sha":"3a77e4d1a565ca25ec8a9c08d7331551a63ee4f7","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/InstallLog.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FInstallLog.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FInstallLog.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FInstallLog.java?ref=00662ab85cbd0fb83756549abb356ecd8683b4c5","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.installer.utilities;\n+\n+import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n+import java.io.File;\n+import java.util.Date;\n+\n+public class InstallLog {\n+\n+    private static InstallLog installLog = null;\n+\n+    private final File log;\n+\n+    private final FileSystemUtils fileSystemUtils;\n+\n+    private InstallLog(final String installPath, final AbstractUIProcessHandler handler) {\n+        log = new File(installPath + \"/install.log\");\n+        fileSystemUtils = new FileSystemUtils(handler);\n+    }\n+\n+    public static InstallLog initialize(final String installPath, final AbstractUIProcessHandler handler) {\n+        synchronized (InstallLog.class) {\n+            if (installLog == null) {\n+                installLog = new InstallLog(installPath, handler);\n+            }\n+        }\n+        return installLog;\n+    }\n+\n+    public static InstallLog getInstance() {\n+        return installLog;\n+    }\n+\n+    public void error(final String msg) {\n+        writeToFile(\"Error\", msg);\n+    }\n+\n+    public void info(final String msg) {\n+        writeToFile(\"Info\", msg);\n+    }\n+\n+    private void writeToFile(final String what, final String msg) {\n+        fileSystemUtils.appendToFile(log, new Date() + \" | \" + what + \": \" + msg);\n+    }\n+\n+}"},{"sha":"598f7ff98c6ba39295b755456d22a7921276b102","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/MavenUtils.java","status":"modified","additions":36,"deletions":3,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00662ab85cbd0fb83756549abb356ecd8683b4c5/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java?ref=00662ab85cbd0fb83756549abb356ecd8683b4c5","patch":"@@ -50,7 +50,11 @@ public void archetypeGenerate(final String archetypeVersion, final String groupI\n         final InvocationRequest request = new DefaultInvocationRequest();\n         request.setGoals(Collections.singletonList(\"archetype:generate\"));\n         request.setInteractive(false);\n-        request.setProperties(archetypeProperties(archetypeVersion, groupId, artifactId, secretKey, anonymousKey));\n+        final Properties properties\n+                = archetypeProperties(archetypeVersion, groupId, artifactId, secretKey, anonymousKey);\n+        request.setProperties(properties);\n+        logToHandler(request.getGoals(), properties);\n+        logToFile(request.getGoals(), properties);\n         invoke(request, installPath);\n     }\n \n@@ -72,14 +76,41 @@ public void createPackage(final String path, final String confDirectory,\n             final String logDirectory, final String bundlesDirectory) {\n \n         final InvocationRequest request = new DefaultInvocationRequest();\n-        request.setProperties(packageProperties(confDirectory, logDirectory, bundlesDirectory));\n+        final Properties properties = packageProperties(confDirectory, logDirectory, bundlesDirectory);\n+        request.setProperties(properties);\n         final List<String> mavenGoals = new ArrayList<String>();\n         mavenGoals.add(\"clean\");\n         mavenGoals.add(\"package\");\n         request.setGoals(mavenGoals);\n+        logToHandler(request.getGoals(), properties);\n+        logToFile(request.getGoals(), properties);\n         invoke(request, path);\n     }\n \n+    private void logToHandler(final List<String> goals, final Properties properties) {\n+        handler.logOutput(\"Executing maven command:\", true);\n+        final StringBuilder mavenCommand = new StringBuilder(\"mvn \");\n+        for (final String goal : goals) {\n+            mavenCommand.append(goal).append(\" \");\n+        }\n+        handler.logOutput(mavenCommand.toString(), true);\n+        for (final String propertyName : properties.stringPropertyNames()) {\n+            handler.logOutput(\"-D \" + propertyName + \"=\" + properties.getProperty(propertyName), true);\n+        }\n+    }\n+\n+    private void logToFile(final List<String> goals, final Properties properties) {\n+        InstallLog.getInstance().info(\"Executing maven command:\");\n+        final StringBuilder mavenCommand = new StringBuilder(\"mvn \");\n+        for (final String goal : goals) {\n+            mavenCommand.append(goal).append(\" \");\n+        }\n+        InstallLog.getInstance().info(mavenCommand.toString());\n+        for (final String propertyName : properties.stringPropertyNames()) {\n+            InstallLog.getInstance().info(\"-D \" + propertyName + \"=\" + properties.getProperty(propertyName));\n+        }\n+    }\n+\n     private Properties packageProperties(final String confDirectory, final String logDirectory,\n             final String bundlesDirectory) {\n         final Properties properties = new Properties();\n@@ -97,7 +128,9 @@ private InvocationResult invoke(final InvocationRequest request, final String pa\n         try {\n             result = invoker.execute(request);\n         } catch (MavenInvocationException ex) {\n-            handler.emitError(\"Maven exception: \" + ex.getMessage(), \"Maven exception: \" + ex.getMessage());\n+            final String messageError = \"Maven exception: \" + ex.getMessage();\n+            handler.emitError(messageError, messageError);\n+            InstallLog.getInstance().info(messageError);\n         }\n         return result;\n     }"}]}