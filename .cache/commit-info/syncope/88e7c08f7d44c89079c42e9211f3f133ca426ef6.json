{"sha":"88e7c08f7d44c89079c42e9211f3f133ca426ef6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg4ZTdjMDhmN2Q0NGM4OTA3OWM0MmU5MjExZjNmMTMzY2E0MjZlZjY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-19T20:41:24Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-19T20:41:24Z"},"message":"added the possibility to specify a prefix to the token in order to make vadata validity check after confirmations \n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246635 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5147be7626522f9c30e178c71c664b3679fda4f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a5147be7626522f9c30e178c71c664b3679fda4f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/88e7c08f7d44c89079c42e9211f3f133ca426ef6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88e7c08f7d44c89079c42e9211f3f133ca426ef6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/88e7c08f7d44c89079c42e9211f3f133ca426ef6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88e7c08f7d44c89079c42e9211f3f133ca426ef6/comments","author":null,"committer":null,"parents":[{"sha":"856ecc64cfc934a4726a01bfdfbdf8d40ec0da63","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/856ecc64cfc934a4726a01bfdfbdf8d40ec0da63","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/856ecc64cfc934a4726a01bfdfbdf8d40ec0da63"}],"stats":{"total":54,"additions":46,"deletions":8},"files":[{"sha":"397b0be27d0419e9d4282206b8d35798c569440f","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":22,"deletions":4,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88e7c08f7d44c89079c42e9211f3f133ca426ef6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88e7c08f7d44c89079c42e9211f3f133ca426ef6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=88e7c08f7d44c89079c42e9211f3f133ca426ef6","patch":"@@ -42,6 +42,7 @@\n import org.bouncycastle.jce.provider.BouncyCastleProvider;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.security.AsymmetricCipher;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n@@ -282,8 +283,16 @@ public void setWorkflowId(Long workflowEntryId) {\n         this.workflowId = workflowEntryId;\n     }\n \n-    public void generateToken(int tokenLength, int tokenExpireTime) {\n-        token = RandomStringUtils.randomAlphanumeric(tokenLength);\n+    public void generateToken(\n+            int tokenLength, int tokenExpireTime, String prefix) {\n+\n+        if (prefix == null || prefix.isEmpty()) {\n+            prefix = \"\";\n+        } else {\n+            prefix += \"|\";\n+        }\n+\n+        token = prefix + RandomStringUtils.randomAlphanumeric(tokenLength);\n \n         Calendar calendar = Calendar.getInstance();\n         calendar.add(Calendar.MINUTE, tokenExpireTime);\n@@ -303,7 +312,16 @@ public Date getTokenExpireTime() {\n         return tokenExpireTime;\n     }\n \n-    public boolean checkToken(String token) {\n-        return this.token.equals(token) && tokenExpireTime.after(new Date());\n+    public boolean checkToken(String token, String prefix) {\n+\n+        if (prefix == null || prefix.isEmpty()) {\n+            prefix = \"\";\n+        } else {\n+            prefix += \"|\";\n+        }\n+\n+        return token.startsWith(prefix)\n+                && this.token.equals(token)\n+                && tokenExpireTime.after(new Date());\n     }\n }"},{"sha":"0b3310cd8c1c0d798c761b1cf90bbe9ca2fcd4c9","filename":"core/src/main/java/org/syncope/core/workflow/Constants.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88e7c08f7d44c89079c42e9211f3f133ca426ef6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88e7c08f7d44c89079c42e9211f3f133ca426ef6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java?ref=88e7c08f7d44c89079c42e9211f3f133ca426ef6","patch":"@@ -33,6 +33,7 @@ public final class Constants {\n     public static final String USER_TO = \"userTO\";\n     public static final String USER_MOD = \"userMod\";\n     public static final String USER_WORKFLOW = \"userWorkflow\";\n+    public static final String PREFIX = \"prefix\";\n \n     private Constants() {\n     }"},{"sha":"8323a611cf896aa9ed4fd2e9d881f62a90c5a201","filename":"core/src/main/java/org/syncope/core/workflow/GenerateToken.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88e7c08f7d44c89079c42e9211f3f133ca426ef6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88e7c08f7d44c89079c42e9211f3f133ca426ef6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java?ref=88e7c08f7d44c89079c42e9211f3f133ca426ef6","patch":"@@ -18,6 +18,11 @@\n import com.opensymphony.workflow.FunctionProvider;\n import com.opensymphony.workflow.WorkflowException;\n import java.util.Map;\n+import javax.crypto.Cipher;\n+import javax.crypto.SecretKey;\n+import javax.crypto.SecretKeyFactory;\n+import javax.crypto.spec.DESKeySpec;\n+import org.bouncycastle.util.encoders.Base64;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n@@ -41,12 +46,16 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n \n         SyncopeUser syncopeUser = (SyncopeUser) transientVars.get(\n                 Constants.SYNCOPE_USER);\n+\n+        final String prefix = (String) transientVars.get(\n+                Constants.PREFIX);\n+\n         try {\n             syncopeUser.generateToken(\n                     Integer.parseInt(syncopeConfigurationDAO.find(\n                     \"token.length\").getConfValue()),\n                     Integer.parseInt(syncopeConfigurationDAO.find(\n-                    \"token.expireTime\").getConfValue()));\n+                    \"token.expireTime\").getConfValue()), prefix);\n         } catch (MissingConfKeyException e) {\n             throw new WorkflowException(e);\n         }"},{"sha":"faacc03f7f7e855e3db9702cb36eb9aa22e6d5ee","filename":"core/src/main/java/org/syncope/core/workflow/IsValidToken.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88e7c08f7d44c89079c42e9211f3f133ca426ef6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88e7c08f7d44c89079c42e9211f3f133ca426ef6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java?ref=88e7c08f7d44c89079c42e9211f3f133ca426ef6","patch":"@@ -19,6 +19,7 @@\n import com.opensymphony.workflow.WorkflowException;\n import java.util.Map;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n \n public class IsValidToken extends OSWorkflowComponent\n         implements Condition {\n@@ -29,15 +30,24 @@ public boolean passesCondition(Map transientVars, Map args, PropertySet ps)\n \n         boolean validToken = false;\n \n+        final String prefix = (String) transientVars.get(\n+                Constants.PREFIX);\n+\n         SyncopeUser syncopeUser = (SyncopeUser) transientVars.get(\n                 Constants.SYNCOPE_USER);\n-        String token = (String) transientVars.get(Constants.TOKEN);\n \n-        validToken = syncopeUser.checkToken(token);\n+        final String token = (String) transientVars.get(Constants.TOKEN);\n+\n+        LOG.debug(\"Check for token validity with prefix '{}'\", prefix);\n+\n+        validToken = syncopeUser.checkToken(token, prefix);\n+\n+        LOG.debug(\"Validated token '{}': \" + validToken, token);\n+\n         if (validToken) {\n             syncopeUser.removeToken();\n         }\n-\n+        \n         return validToken;\n     }\n }"}]}