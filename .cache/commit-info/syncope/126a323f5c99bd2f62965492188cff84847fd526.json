{"sha":"126a323f5c99bd2f62965492188cff84847fd526","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEyNmEzMjNmNWM5OWJkMmY2Mjk2NTQ5MjE4OGNmZjg0ODQ3ZmQ1MjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-25T12:01:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-25T12:22:46Z"},"message":"[SYNCOPE-1201] Conditions are now set seprated for each available AnyType","tree":{"sha":"2ee50f99e75e11f1135003c3767e43edcbdf4fc4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2ee50f99e75e11f1135003c3767e43edcbdf4fc4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/126a323f5c99bd2f62965492188cff84847fd526","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/126a323f5c99bd2f62965492188cff84847fd526","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/126a323f5c99bd2f62965492188cff84847fd526","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/126a323f5c99bd2f62965492188cff84847fd526/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"95268987f5154f30a36695a9e1dd37dc8fa4cca0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/95268987f5154f30a36695a9e1dd37dc8fa4cca0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/95268987f5154f30a36695a9e1dd37dc8fa4cca0"}],"stats":{"total":453,"additions":350,"deletions":103},"files":[{"sha":"f1a0b693088b79996db7493c9043e58da94568c2","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DynRealmModalPanel.java","status":"modified","additions":54,"deletions":11,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -24,27 +24,35 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.BasePage;\n-import org.apache.syncope.client.console.panels.search.SearchClause;\n+import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n+import org.apache.syncope.client.console.panels.search.GroupSearchPanel;\n+import org.apache.syncope.client.console.panels.search.MapOfListModel;\n import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.DynRealmRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.DynRealmWrapper;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.model.ResourceModel;\n \n public class DynRealmModalPanel extends AbstractModalPanel<DynRealmWrapper> {\n \n     private static final long serialVersionUID = -3773196441177699452L;\n \n+    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n+\n     private final DynRealmRestClient restClient = new DynRealmRestClient();\n \n     private final DynRealmWrapper dynRealmWrapper;\n@@ -63,23 +71,58 @@ public DynRealmModalPanel(\n         modal.setFormModel(dynRealmWrapper);\n \n         AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n-                \"key\", \"key\", new PropertyModel<String>(dynRealmWrapper.getInnerObject(), \"key\"), false);\n+                \"key\", \"key\", new PropertyModel<>(dynRealmWrapper.getInnerObject(), \"key\"), false);\n         key.setReadOnly(!create);\n         key.setRequired(true);\n         add(key);\n \n-        add(new Accordion(\"cond\", Collections.<ITab>singletonList(\n-                new AbstractTab(new ResourceModel(\"cond\", \"Dynamic Condition\")) {\n+        final LoadableDetachableModel<List<AnyTypeTO>> types = new LoadableDetachableModel<List<AnyTypeTO>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<AnyTypeTO> load() {\n+                return anyTypeRestClient.listAnyTypes();\n+            }\n+        };\n+\n+        add(new ListView<AnyTypeTO>(\"dynMembershipCond\", types) {\n \n-            private static final long serialVersionUID = 1037272333056449378L;\n+            private static final long serialVersionUID = 9101744072914090143L;\n \n             @Override\n-            public Panel getPanel(final String panelId) {\n-                return new UserSearchPanel.Builder(\n-                        new PropertyModel<List<SearchClause>>(dynRealmWrapper, \"dynClauses\")).\n-                        required(false).build(panelId);\n+            protected void populateItem(final ListItem<AnyTypeTO> item) {\n+                final String key = item.getModelObject().getKey();\n+                item.add(new Accordion(\"dynMembershipCond\", Collections.<ITab>singletonList(\n+                        new AbstractTab(Model.of(key + \" Dynamic Condition\")) {\n+\n+                    private static final long serialVersionUID = 1037272333056449378L;\n+\n+                    @Override\n+                    public Panel getPanel(final String panelId) {\n+                        switch (item.getModelObject().getKind()) {\n+                            case USER:\n+                                return new UserSearchPanel.Builder(\n+                                        new MapOfListModel<>(dynRealmWrapper, \"dynClauses\", key)).\n+                                        required(false).build(panelId);\n+\n+                            case GROUP:\n+                                return new GroupSearchPanel.Builder(\n+                                        new MapOfListModel<>(dynRealmWrapper, \"dynClauses\", key)).\n+                                        required(false).build(panelId);\n+\n+                            case ANY_OBJECT:\n+                            default:\n+                                return new AnyObjectSearchPanel.Builder(\n+                                        key,\n+                                        new MapOfListModel<>(dynRealmWrapper, \"dynClauses\", key)).\n+                                        required(false).build(panelId);\n+                        }\n+                    }\n+                }), Model.of(StringUtils.isBlank(dynRealmWrapper.getDynMembershipConds().get(key)) ? -1 : 0)).\n+                        setOutputMarkupId(true));\n             }\n-        }), Model.of(StringUtils.isBlank(dynRealmWrapper.getCond()) ? -1 : 0)).setOutputMarkupId(true));\n+        });\n     }\n \n     @Override"},{"sha":"de013a960e00768ee86ef463bfe3a4b8fb9f7e88","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/DynRealmWrapper.java","status":"modified","additions":30,"deletions":11,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FDynRealmWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FDynRealmWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FDynRealmWrapper.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -19,47 +19,66 @@\n package org.apache.syncope.client.console.wizards;\n \n import java.io.Serializable;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.client.console.panels.search.SearchClause;\n import org.apache.syncope.client.console.panels.search.SearchUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n public class DynRealmWrapper implements Serializable {\n \n     private static final long serialVersionUID = 7226128615964284614L;\n \n     private final DynRealmTO dynRealmTO;\n \n-    private List<SearchClause> dynClauses;\n+    private Map<String, List<SearchClause>> dynClauses;\n \n     public DynRealmWrapper(final DynRealmTO dynRealmTO) {\n         this.dynRealmTO = dynRealmTO;\n         getDynClauses();\n     }\n \n-    public final List<SearchClause> getDynClauses() {\n+    public final Map<String, List<SearchClause>> getDynClauses() {\n         if (this.dynClauses == null) {\n-            this.dynClauses = SearchUtils.getSearchClauses(this.dynRealmTO.getCond());\n+            this.dynClauses = SearchUtils.getSearchClauses(this.dynRealmTO.getDynMembershipConds());\n         }\n         return this.dynClauses;\n     }\n \n-    public void setDynClauses(final List<SearchClause> dynClauses) {\n-        this.dynClauses = dynClauses;\n+    public void setDynClauses(final Map<String, List<SearchClause>> dynClauses) {\n+        this.dynClauses.clear();\n+        this.dynClauses.putAll(dynClauses);\n     }\n \n-    public String getCond() {\n-        if (CollectionUtils.isEmpty(this.dynClauses)) {\n-            return null;\n-        } else {\n-            return SearchUtils.buildFIQL(this.dynClauses, SyncopeClient.getUserSearchConditionBuilder());\n+    public Map<String, String> getDynMembershipConds() {\n+        final Map<String, String> res = new HashMap<>();\n+        if (this.dynClauses != null && !this.dynClauses.isEmpty()) {\n+            this.dynClauses.entrySet().stream().\n+                    filter(entry -> (CollectionUtils.isNotEmpty(entry.getValue()))).\n+                    forEachOrdered(entry -> {\n+                        AbstractFiqlSearchConditionBuilder builder = AnyTypeKind.USER.name().equals(entry.getKey())\n+                                ? SyncopeClient.getUserSearchConditionBuilder()\n+                                : AnyTypeKind.GROUP.name().equals(entry.getKey())\n+                                ? SyncopeClient.getGroupSearchConditionBuilder()\n+                                : SyncopeClient.getAnyObjectSearchConditionBuilder(entry.getKey());\n+                        String fiql = SearchUtils.buildFIQL(entry.getValue(), builder);\n+                        if (fiql != null) {\n+                            res.put(entry.getKey(), fiql);\n+                        }\n+                    });\n         }\n+\n+        return res;\n     }\n \n     public DynRealmTO fillDynamicConditions() {\n-        this.dynRealmTO.setCond(this.getCond());\n+        this.dynRealmTO.getDynMembershipConds().clear();\n+        this.dynRealmTO.getDynMembershipConds().putAll(this.getDynMembershipConds());\n         return this.dynRealmTO;\n     }\n "},{"sha":"bf59b5f741aef3f279749a41dcbbd39f7b893d12","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/DynamicMemberships.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -100,8 +100,8 @@ public Panel getPanel(final String panelId) {\n                                 key, new MapOfListModel<>(groupWrapper, \"aDynClauses\", key)).\n                                 required(false).build(panelId);\n                     }\n-                }), Model.of(StringUtils.isBlank(groupWrapper.getADynMembershipConds().get(key)) ? -1 : 0))\n-                        .setOutputMarkupId(true));\n+                }), Model.of(StringUtils.isBlank(groupWrapper.getADynMembershipConds().get(key)) ? -1 : 0)).\n+                        setOutputMarkupId(true));\n             }\n         });\n         // ------------------------"},{"sha":"9f8fa4c66d82cfc1f1a2f188a911d8b34c34a534","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/DynRealmModalPanel.html","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.html?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -20,7 +20,9 @@\n   <wicket:extend>\n     <div class=\"form-group\">\n       <span wicket:id=\"key\"/>\n-      <div wicket:id=\"cond\"/>\n+      <span wicket:id=\"dynMembershipCond\">\n+        <div wicket:id=\"dynMembershipCond\"/>\n+      </span>\n     </div>\n   </wicket:extend>\n </html>"},{"sha":"d3fff016fec6d9e060361fea8791dea7992ae529","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/DynRealmTO.java","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDynRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDynRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDynRealmTO.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -18,10 +18,16 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n+import java.util.Map;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlRootElement(name = \"dynRealm\")\n @XmlType\n@@ -31,7 +37,9 @@ public class DynRealmTO extends AbstractBaseBean implements EntityTO {\n \n     private String key;\n \n-    private String cond;\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, String> dynMembershipConds = new HashMap<>();\n \n     @Override\n     public String getKey() {\n@@ -44,12 +52,8 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n-    public String getCond() {\n-        return cond;\n+    @JsonProperty\n+    public Map<String, String> getDynMembershipConds() {\n+        return dynMembershipConds;\n     }\n-\n-    public void setCond(final String cond) {\n-        this.cond = cond;\n-    }\n-\n }"},{"sha":"711d251970b65f567b37c8688c46301cd35dd45d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynRealm.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRealm.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -18,6 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-public interface DynRealm extends DynMembership<Any<?>>, ProvidedKeyEntity {\n+import java.util.List;\n+import java.util.Optional;\n+\n+public interface DynRealm extends ProvidedKeyEntity {\n+\n+    boolean add(DynRealmMembership dynRealmMembership);\n+\n+    Optional<? extends DynRealmMembership> getDynMembership(AnyType anyType);\n+\n+    List<? extends DynRealmMembership> getDynMemberships();\n \n }"},{"sha":"3e26583a73beb38eef45ba85f2a29279ba1df375","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynRealmMembership.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRealmMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRealmMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRealmMembership.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface DynRealmMembership extends DynMembership<Any<?>> {\n+\n+    DynRealm getDynRealm();\n+\n+    void setDynRealm(DynRealm dynRealm);\n+\n+    AnyType getAnyType();\n+\n+    void setAnyType(AnyType anyType);\n+\n+}"},{"sha":"1c84be55b5af0fcbdee5a9887069177e2d9d42d0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"modified","additions":22,"deletions":42,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -19,13 +19,14 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n+import java.util.Optional;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.jpa.entity.JPADynRealm;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n@@ -72,42 +73,21 @@ public DynRealm save(final DynRealm dynRealm) {\n         DynRealm merged = entityManager().merge(dynRealm);\n \n         // refresh dynamic memberships\n-        if (merged.getFIQLCond() != null) {\n-            clearDynMembers(merged);\n-\n-            List<Any<?>> matching = searchDAO().search(\n-                    SearchCondConverter.convert(merged.getFIQLCond()), AnyTypeKind.USER);\n-            for (Any<?> any : matching) {\n-                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n-                insert.setParameter(1, any.getKey());\n-                insert.setParameter(2, merged.getKey());\n-                insert.executeUpdate();\n-\n-                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n-            }\n-\n-            matching = searchDAO().search(\n-                    SearchCondConverter.convert(merged.getFIQLCond()), AnyTypeKind.GROUP);\n-            for (Any<?> any : matching) {\n-                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n-                insert.setParameter(1, any.getKey());\n-                insert.setParameter(2, merged.getKey());\n-                insert.executeUpdate();\n-\n-                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n-            }\n-\n-            matching = searchDAO().search(\n-                    SearchCondConverter.convert(merged.getFIQLCond()), AnyTypeKind.ANY_OBJECT);\n-            for (Any<?> any : matching) {\n-                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n-                insert.setParameter(1, any.getKey());\n-                insert.setParameter(2, merged.getKey());\n-                insert.executeUpdate();\n-\n-                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n-            }\n-        }\n+        clearDynMembers(merged);\n+\n+        merged.getDynMemberships().stream().map(memb -> searchDAO().search(\n+                SearchCondConverter.convert(memb.getFIQLCond()), memb.getAnyType().getKind())).\n+                forEachOrdered(matching -> {\n+                    matching.forEach(any -> {\n+                        Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE\n+                                + \" VALUES(?, ?)\");\n+                        insert.setParameter(1, any.getKey());\n+                        insert.setParameter(2, merged.getKey());\n+                        insert.executeUpdate();\n+\n+                        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n+                    });\n+                });\n \n         return merged;\n     }\n@@ -134,22 +114,22 @@ public void clearDynMembers(final DynRealm dynRealm) {\n     @Transactional\n     @Override\n     public void refreshDynMemberships(final Any<?> any) {\n-        for (DynRealm dynRealm : findAll()) {\n-            if (dynRealm.getFIQLCond() != null) {\n+        findAll().forEach(dynRealm -> {\n+            Optional<? extends DynRealmMembership> memb = dynRealm.getDynMembership(any.getType());\n+            if (memb.isPresent()) {\n                 Query delete = entityManager().createNativeQuery(\n                         \"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE dynRealm_id=? AND any_id=?\");\n                 delete.setParameter(1, dynRealm.getKey());\n                 delete.setParameter(2, any.getKey());\n                 delete.executeUpdate();\n-\n-                if (searchDAO().matches(any, SearchCondConverter.convert(dynRealm.getFIQLCond()))) {\n+                if (searchDAO().matches(any, SearchCondConverter.convert(memb.get().getFIQLCond()))) {\n                     Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n                     insert.setParameter(1, any.getKey());\n                     insert.setParameter(2, dynRealm.getKey());\n                     insert.executeUpdate();\n                 }\n             }\n-        }\n+        });\n     }\n \n     @Override"},{"sha":"a92cb41b920724f887f682adb4ac4baa5cb0b73e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADynRealm.java","status":"modified","additions":23,"deletions":7,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRealm.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -18,11 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n import javax.persistence.Table;\n-import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.jpa.validation.entity.DynRealmCheck;\n \n @Entity\n@@ -35,16 +42,25 @@ public class JPADynRealm extends AbstractProvidedKeyEntity implements DynRealm {\n \n     public static final String TABLE = \"DynRealm\";\n \n-    @NotNull\n-    private String fiql;\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"dynRealm\")\n+    private List<JPADynRealmMembership> dynMemberships = new ArrayList<>();\n \n     @Override\n-    public String getFIQLCond() {\n-        return fiql;\n+    public boolean add(final DynRealmMembership dynRealmMembership) {\n+        checkType(dynRealmMembership, JPADynRealmMembership.class);\n+        return this.dynMemberships.add((JPADynRealmMembership) dynRealmMembership);\n     }\n \n     @Override\n-    public void setFIQLCond(final String fiql) {\n-        this.fiql = fiql;\n+    public Optional<? extends DynRealmMembership> getDynMembership(final AnyType anyType) {\n+        return dynMemberships.stream().\n+                filter(dynRealmMembership -> anyType != null && anyType.equals(dynRealmMembership.getAnyType())).\n+                findFirst();\n     }\n+\n+    @Override\n+    public List<? extends DynRealmMembership> getDynMemberships() {\n+        return dynMemberships;\n+    }\n+\n }"},{"sha":"c97773ab5336743c796f7a72b81ec6f7acfcbad7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADynRealmMembership.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRealmMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRealmMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRealmMembership.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n+\n+@Entity\n+@Table(name = JPADynRealmMembership.TABLE)\n+public class JPADynRealmMembership extends AbstractGeneratedKeyEntity implements DynRealmMembership {\n+\n+    private static final long serialVersionUID = 8157856850557493134L;\n+\n+    public static final String TABLE = \"DynRealmMembership\";\n+\n+    @OneToOne\n+    private JPADynRealm dynRealm;\n+\n+    @ManyToOne\n+    private JPAAnyType anyType;\n+\n+    @NotNull\n+    private String fiql;\n+\n+    @Override\n+    public DynRealm getDynRealm() {\n+        return dynRealm;\n+    }\n+\n+    @Override\n+    public void setDynRealm(final DynRealm dynRealm) {\n+        checkType(dynRealm, JPADynRealm.class);\n+        this.dynRealm = (JPADynRealm) dynRealm;\n+    }\n+\n+    @Override\n+    public AnyType getAnyType() {\n+        return anyType;\n+    }\n+\n+    @Override\n+    public void setAnyType(final AnyType anyType) {\n+        checkType(anyType, JPAAnyType.class);\n+        this.anyType = (JPAAnyType) anyType;\n+    }\n+\n+    @Override\n+    public String getFIQLCond() {\n+        return fiql;\n+    }\n+\n+    @Override\n+    public void setFIQLCond(final String fiql) {\n+        this.fiql = fiql;\n+    }\n+\n+}"},{"sha":"985bfa08810ca00cffcbfe8f173c520f49626dbc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -126,6 +126,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResourceHistoryConf;\n@@ -145,6 +146,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPARealm();\n         } else if (reference.equals(DynRealm.class)) {\n             result = (E) new JPADynRealm();\n+        } else if (reference.equals(DynRealmMembership.class)) {\n+            result = (E) new JPADynRealmMembership();\n         } else if (reference.equals(AnyTemplateRealm.class)) {\n             result = (E) new JPAAnyTemplateRealm();\n         } else if (reference.equals(AccountPolicy.class)) {"},{"sha":"53ef4fb45c65ab907afed749ede87440b18e5bbb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -209,8 +209,9 @@ public boolean add(final ADynGroupMembership dynGroupMembership) {\n \n     @Override\n     public Optional<? extends ADynGroupMembership> getADynMembership(final AnyType anyType) {\n-        return aDynMemberships.stream().filter(dynGroupMembership\n-                -> anyType != null && anyType.equals(dynGroupMembership.getAnyType())).findFirst();\n+        return aDynMemberships.stream().\n+                filter(dynGroupMembership -> anyType != null && anyType.equals(dynGroupMembership.getAnyType())).\n+                findFirst();\n     }\n \n     @Override\n@@ -226,8 +227,9 @@ public boolean add(final TypeExtension typeExtension) {\n \n     @Override\n     public Optional<? extends TypeExtension> getTypeExtension(final AnyType anyType) {\n-        return typeExtensions.stream().filter(typeExtension\n-                -> typeExtension.getAnyType().equals(anyType)).findFirst();\n+        return typeExtensions.stream().\n+                filter(typeExtension -> typeExtension.getAnyType().equals(anyType)).\n+                findFirst();\n     }\n \n     @Override"},{"sha":"db4703585ec2298bb88589881a7126c0d5abfb52","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/DynRealmTest.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -26,11 +26,13 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;\n@@ -40,6 +42,9 @@\n @Transactional(\"Master\")\n public class DynRealmTest extends AbstractTest {\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Autowired\n     private DynRealmDAO dynRealmDAO;\n \n@@ -53,7 +58,14 @@ public class DynRealmTest extends AbstractTest {\n     public void misc() {\n         DynRealm dynRealm = entityFactory.newEntity(DynRealm.class);\n         dynRealm.setKey(\"/name\");\n-        dynRealm.setFIQLCond(\"cool==true\");\n+\n+        DynRealmMembership memb = entityFactory.newEntity(DynRealmMembership.class);\n+        memb.setDynRealm(dynRealm);\n+        memb.setAnyType(anyTypeDAO.findUser());\n+        memb.setFIQLCond(\"cool==true\");\n+        \n+        dynRealm.add(memb);\n+        memb.setDynRealm(dynRealm);\n \n         // invalid key (starts with /)\n         try {"},{"sha":"6973e1ebe46f750fe8c3d22a5154624e40d658d7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DynRealmDataBinderImpl.java","status":"modified","additions":52,"deletions":12,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -18,46 +18,83 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Iterator;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.provisioning.api.data.DynRealmDataBinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class DynRealmDataBinderImpl implements DynRealmDataBinder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(DynRealmDataBinder.class);\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Autowired\n     private DynRealmDAO dynRealmDAO;\n \n     @Autowired\n     private EntityFactory entityFactory;\n \n+    private void setDynMembership(final DynRealm dynRealm, final AnyType anyType, final String dynMembershipFIQL) {\n+        SearchCond dynMembershipCond = SearchCondConverter.convert(dynMembershipFIQL);\n+        if (!dynMembershipCond.isValid()) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            sce.getElements().add(dynMembershipFIQL);\n+            throw sce;\n+        }\n+\n+        DynRealmMembership dynMembership;\n+        if (dynRealm.getDynMembership(anyType).isPresent()) {\n+            dynMembership = dynRealm.getDynMembership(anyType).get();\n+        } else {\n+            dynMembership = entityFactory.newEntity(DynRealmMembership.class);\n+            dynMembership.setDynRealm(dynRealm);\n+            dynMembership.setAnyType(anyType);\n+            dynRealm.add(dynMembership);\n+        }\n+        dynMembership.setFIQLCond(dynMembershipFIQL);\n+    }\n+\n     @Override\n     public DynRealm create(final DynRealmTO dynRealmTO) {\n         return update(entityFactory.newEntity(DynRealm.class), dynRealmTO);\n     }\n \n     @Override\n-    public DynRealm update(final DynRealm dynRealm, final DynRealmTO dynRealmTO) {\n-        dynRealm.setKey(dynRealmTO.getKey());\n+    public DynRealm update(final DynRealm toBeUpdated, final DynRealmTO dynRealmTO) {\n+        toBeUpdated.setKey(dynRealmTO.getKey());\n+        DynRealm dynRealm = dynRealmDAO.save(toBeUpdated);\n \n-        SearchCond cond = null;\n-        if (dynRealmTO.getCond() != null) {\n-            cond = SearchCondConverter.convert(dynRealmTO.getCond());\n+        for (Iterator<? extends DynRealmMembership> itor = dynRealm.getDynMemberships().iterator(); itor.hasNext();) {\n+            DynRealmMembership memb = itor.next();\n+            memb.setDynRealm(null);\n+            itor.remove();\n         }\n-        if (cond == null || !cond.isValid()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n-            sce.getElements().add(dynRealmTO.getCond());\n-            throw sce;\n-        }\n-        dynRealm.setFIQLCond(dynRealmTO.getCond());\n+        dynRealmDAO.clearDynMembers(dynRealm);\n+\n+        dynRealmTO.getDynMembershipConds().entrySet().forEach(entry -> {\n+            AnyType anyType = anyTypeDAO.find(entry.getKey());\n+            if (anyType == null) {\n+                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), entry.getKey());\n+            } else {\n+                setDynMembership(dynRealm, anyType, entry.getValue());\n+            }\n+        });\n \n         return dynRealmDAO.save(dynRealm);\n     }\n@@ -67,7 +104,10 @@ public DynRealmTO getDynRealmTO(final DynRealm dynRealm) {\n         DynRealmTO dynRealmTO = new DynRealmTO();\n \n         dynRealmTO.setKey(dynRealm.getKey());\n-        dynRealmTO.setCond(dynRealm.getFIQLCond());\n+\n+        dynRealm.getDynMemberships().forEach(memb -> {\n+            dynRealmTO.getDynMembershipConds().put(memb.getAnyType().getKey(), memb.getFIQLCond());\n+        });\n \n         return dynRealmTO;\n     }"},{"sha":"8ba464e775d960e681a9d8bb6c115d1ffdc07937","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -69,13 +69,18 @@ private void setDynMembership(final Group group, final AnyType anyType, final St\n             sce.getElements().add(dynMembershipFIQL);\n             throw sce;\n         }\n+        if (anyType.getKind() == AnyTypeKind.GROUP) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n+            sce.getElements().add(anyType.getKind().name());\n+            throw sce;\n+        }\n \n         DynGroupMembership<?> dynMembership;\n         if (anyType.getKind() == AnyTypeKind.ANY_OBJECT && !group.getADynMembership(anyType).isPresent()) {\n             dynMembership = entityFactory.newEntity(ADynGroupMembership.class);\n             dynMembership.setGroup(group);\n-            group.add((ADynGroupMembership) dynMembership);\n             ((ADynGroupMembership) dynMembership).setAnyType(anyType);\n+            group.add((ADynGroupMembership) dynMembership);\n         } else if (anyType.getKind() == AnyTypeKind.USER && group.getUDynMembership() == null) {\n             dynMembership = entityFactory.newEntity(UDynGroupMembership.class);\n             dynMembership.setGroup(group);"},{"sha":"27720925fb32f2314156199e0b3a5f746a7a46f8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/126a323f5c99bd2f62965492188cff84847fd526/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/126a323f5c99bd2f62965492188cff84847fd526/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=126a323f5c99bd2f62965492188cff84847fd526","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -56,7 +57,7 @@ public void misc() {\n         try {\n             dynRealm = new DynRealmTO();\n             dynRealm.setKey(\"/name\" + getUUIDString());\n-            dynRealm.setCond(\"cool==true\");\n+            dynRealm.getDynMembershipConds().put(AnyTypeKind.USER.name(), \"cool==true\");\n \n             // invalid key (starts with /)\n             try {\n@@ -93,7 +94,8 @@ public void delegatedAdmin() {\n             // 1. create dynamic realm for all users and groups having resource-ldap assigned\n             dynRealm = new DynRealmTO();\n             dynRealm.setKey(\"LDAPLovers\" + getUUIDString());\n-            dynRealm.setCond(\"$resources==resource-ldap\");\n+            dynRealm.getDynMembershipConds().put(AnyTypeKind.USER.name(), \"$resources==resource-ldap\");\n+            dynRealm.getDynMembershipConds().put(AnyTypeKind.GROUP.name(), \"$resources==resource-ldap\");\n \n             Response response = dynRealmService.create(dynRealm);\n             dynRealm = getObject(response.getLocation(), DynRealmService.class, DynRealmTO.class);"}]}