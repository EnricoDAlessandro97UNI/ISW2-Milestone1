{"sha":"2c48533389ee654602effc6deb78ae4587d0c3e1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJjNDg1MzMzODllZTY1NDYwMmVmZmM2ZGViNzhhZTQ1ODdkMGMzZTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-10T06:52:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-10T06:52:23Z"},"message":"[SYNCOPE-1380] Raise IgnoreProvisionException, more appropriate","tree":{"sha":"306b31217fc412f6f7af66ffd4c8ddfd3a7bdf91","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/306b31217fc412f6f7af66ffd4c8ddfd3a7bdf91"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2c48533389ee654602effc6deb78ae4587d0c3e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2c48533389ee654602effc6deb78ae4587d0c3e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2c48533389ee654602effc6deb78ae4587d0c3e1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2c48533389ee654602effc6deb78ae4587d0c3e1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"cf5a50298106988dab77393b65703895d7b3f336","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cf5a50298106988dab77393b65703895d7b3f336","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cf5a50298106988dab77393b65703895d7b3f336"}],"stats":{"total":67,"additions":39,"deletions":28},"files":[{"sha":"95d37e82e89fbb2bb6c468e2dc23fb78b7b44ee3","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/IgnoreProvisionException.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c48533389ee654602effc6deb78ae4587d0c3e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FIgnoreProvisionException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c48533389ee654602effc6deb78ae4587d0c3e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FIgnoreProvisionException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FIgnoreProvisionException.java?ref=2c48533389ee654602effc6deb78ae4587d0c3e1","patch":"@@ -19,11 +19,17 @@\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n /**\n- * Raised by {@link PullActions} or {@link PushActions} methods when the given any object is to be ignored for\n- * pull / push.\n+ * Raised when the given any object is to be ignored for pull / push.\n  */\n public class IgnoreProvisionException extends RuntimeException {\n \n     private static final long serialVersionUID = -8803817097998786364L;\n \n+    public IgnoreProvisionException() {\n+        super();\n+    }\n+\n+    public IgnoreProvisionException(final String message) {\n+        super(message);\n+    }\n }"},{"sha":"c02077d6dad215544f1ab032f45306bbc61c9260","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c48533389ee654602effc6deb78ae4587d0c3e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c48533389ee654602effc6deb78ae4587d0c3e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=2c48533389ee654602effc6deb78ae4587d0c3e1","patch":"@@ -154,6 +154,7 @@ public boolean handle(final SyncDelta delta) {\n             ignoreResult.setAnyType(provision == null\n                     ? getAnyUtils().anyTypeKind().name() : provision.getAnyType().getKey());\n             ignoreResult.setStatus(ProvisioningReport.Status.IGNORE);\n+            ignoreResult.setMessage(e.getMessage());\n             ignoreResult.setKey(null);\n             ignoreResult.setName(delta.getObject().getName().getNameValue());\n             profile.getResults().add(ignoreResult);\n@@ -781,21 +782,22 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                 processed.getDeltaType(), processed.getUid().getUidValue(), processed.getObject().getObjectClass());\n \n         try {\n-            List<String> anyKeys = pullUtils.match(processed.getObject(), provision, anyUtils);\n+            List<String> keys = pullUtils.match(processed.getObject(), provision, anyUtils);\n             LOG.debug(\"Match(es) found for {} as {}: {}\",\n-                    processed.getUid().getUidValue(), processed.getObject().getObjectClass(), anyKeys);\n+                    processed.getUid().getUidValue(), processed.getObject().getObjectClass(), keys);\n \n-            if (anyKeys.size() > 1) {\n+            if (keys.size() > 1) {\n                 switch (profile.getConflictResolutionAction()) {\n                     case IGNORE:\n-                        throw new IllegalStateException(\"More than one match: \" + anyKeys);\n+                        throw new IgnoreProvisionException(\"More than one match found for \"\n+                                + processed.getObject().getUid().getUidValue() + \": \" + keys);\n \n                     case FIRSTMATCH:\n-                        anyKeys = anyKeys.subList(0, 1);\n+                        keys = keys.subList(0, 1);\n                         break;\n \n                     case LASTMATCH:\n-                        anyKeys = anyKeys.subList(anyKeys.size() - 1, anyKeys.size());\n+                        keys = keys.subList(keys.size() - 1, keys.size());\n                         break;\n \n                     default:\n@@ -804,7 +806,7 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n             }\n \n             if (SyncDeltaType.CREATE_OR_UPDATE == processed.getDeltaType()) {\n-                if (anyKeys.isEmpty()) {\n+                if (keys.isEmpty()) {\n                     switch (profile.getTask().getUnmatchingRule()) {\n                         case ASSIGN:\n                             profile.getResults().addAll(assign(processed, provision, anyUtils));\n@@ -825,7 +827,7 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                     // update VirAttrCache\n                     for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n                         Attribute attr = processed.getObject().getAttributeByName(virSchema.getExtAttrName());\n-                        for (String anyKey : anyKeys) {\n+                        for (String anyKey : keys) {\n                             if (attr == null) {\n                                 virAttrCache.expire(\n                                         provision.getAnyType().getKey(),\n@@ -845,39 +847,39 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n \n                     switch (profile.getTask().getMatchingRule()) {\n                         case UPDATE:\n-                            profile.getResults().addAll(update(processed, anyKeys, provision));\n+                            profile.getResults().addAll(update(processed, keys, provision));\n                             break;\n \n                         case DEPROVISION:\n-                            profile.getResults().addAll(deprovision(processed, anyKeys, provision, false));\n+                            profile.getResults().addAll(deprovision(processed, keys, provision, false));\n                             break;\n \n                         case UNASSIGN:\n-                            profile.getResults().addAll(deprovision(processed, anyKeys, provision, true));\n+                            profile.getResults().addAll(deprovision(processed, keys, provision, true));\n                             break;\n \n                         case LINK:\n-                            profile.getResults().addAll(link(processed, anyKeys, provision, false));\n+                            profile.getResults().addAll(link(processed, keys, provision, false));\n                             break;\n \n                         case UNLINK:\n-                            profile.getResults().addAll(link(processed, anyKeys, provision, true));\n+                            profile.getResults().addAll(link(processed, keys, provision, true));\n                             break;\n \n                         case IGNORE:\n-                            profile.getResults().addAll(ignore(processed, anyKeys, provision, true));\n+                            profile.getResults().addAll(ignore(processed, keys, provision, true));\n                             break;\n \n                         default:\n                         // do nothing\n                     }\n                 }\n             } else if (SyncDeltaType.DELETE == processed.getDeltaType()) {\n-                if (anyKeys.isEmpty()) {\n+                if (keys.isEmpty()) {\n                     finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, processed);\n                     LOG.debug(\"No match found for deletion\");\n                 } else {\n-                    profile.getResults().addAll(delete(processed, anyKeys, provision));\n+                    profile.getResults().addAll(delete(processed, keys, provision));\n                 }\n             }\n         } catch (IllegalStateException | IllegalArgumentException e) {"},{"sha":"8ad473ea8dc20ca6c1dc7bba94d548887574321a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c48533389ee654602effc6deb78ae4587d0c3e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c48533389ee654602effc6deb78ae4587d0c3e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=2c48533389ee654602effc6deb78ae4587d0c3e1","patch":"@@ -208,20 +208,21 @@ public boolean handle(final String anyKey) {\n             doHandle(any, provision);\n             return true;\n         } catch (IgnoreProvisionException e) {\n-            ProvisioningReport result = profile.getResults().stream().\n+            ProvisioningReport ignoreResult = profile.getResults().stream().\n                     filter(report -> anyKey.equalsIgnoreCase(report.getKey())).\n                     findFirst().\n                     orElse(null);\n-            if (result == null) {\n-                result = new ProvisioningReport();\n-                result.setKey(anyKey);\n-                result.setAnyType(any == null ? null : any.getType().getKey());\n+            if (ignoreResult == null) {\n+                ignoreResult = new ProvisioningReport();\n+                ignoreResult.setKey(anyKey);\n+                ignoreResult.setAnyType(any == null ? null : any.getType().getKey());\n \n-                profile.getResults().add(result);\n+                profile.getResults().add(ignoreResult);\n             }\n \n-            result.setOperation(ResourceOperation.NONE);\n-            result.setStatus(ProvisioningReport.Status.IGNORE);\n+            ignoreResult.setOperation(ResourceOperation.NONE);\n+            ignoreResult.setStatus(ProvisioningReport.Status.IGNORE);\n+            ignoreResult.setMessage(e.getMessage());\n \n             LOG.warn(\"Ignoring during push\", e);\n             return true;\n@@ -249,7 +250,8 @@ protected void doHandle(final Any<?> any, final Provision provision) throws JobE\n         if (connObjs.size() > 1) {\n             switch (profile.getConflictResolutionAction()) {\n                 case IGNORE:\n-                    throw new IllegalStateException(\"More than one match: \" + connObjs);\n+                    throw new IgnoreProvisionException(\"More than one match found for \"\n+                            + any.getKey() + \": \" + connObjs);\n \n                 case FIRSTMATCH:\n                     connObjs = connObjs.subList(0, 1);"},{"sha":"fb29bd46846d21db2fffa88652b9aeca527eaca6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c48533389ee654602effc6deb78ae4587d0c3e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c48533389ee654602effc6deb78ae4587d0c3e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=2c48533389ee654602effc6deb78ae4587d0c3e1","patch":"@@ -687,7 +687,8 @@ private void doHandle(final SyncDelta delta, final OrgUnit orgUnit) throws JobEx\n         if (keys.size() > 1) {\n             switch (profile.getConflictResolutionAction()) {\n                 case IGNORE:\n-                    throw new IllegalStateException(\"More than one match \" + keys);\n+                        throw new IgnoreProvisionException(\"More than one match found for \"\n+                                + processed.getObject().getUid().getUidValue() + \": \" + keys);\n \n                 case FIRSTMATCH:\n                     keys = keys.subList(0, 1);"}]}