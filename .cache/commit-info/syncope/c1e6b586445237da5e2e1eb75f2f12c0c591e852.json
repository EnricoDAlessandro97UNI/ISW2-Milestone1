{"sha":"c1e6b586445237da5e2e1eb75f2f12c0c591e852","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMxZTZiNTg2NDQ1MjM3ZGE1ZTJlMWViNzVmMmYxMmMwYzU5MWU4NTI=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2015-02-24T08:38:14Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2015-02-24T08:38:14Z"},"message":"[SYNCOPE-647] Fix propagation of an updated membership","tree":{"sha":"59eef359875427d88c726f3fa71a1ed5e2353c14","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/59eef359875427d88c726f3fa71a1ed5e2353c14"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c1e6b586445237da5e2e1eb75f2f12c0c591e852","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1e6b586445237da5e2e1eb75f2f12c0c591e852","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c1e6b586445237da5e2e1eb75f2f12c0c591e852","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1e6b586445237da5e2e1eb75f2f12c0c591e852/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"8081553f475ad7256472b249bbb6d4c080ee4617","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8081553f475ad7256472b249bbb6d4c080ee4617","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8081553f475ad7256472b249bbb6d4c080ee4617"}],"stats":{"total":131,"additions":90,"deletions":41},"files":[{"sha":"dbcb40a3e694246e191a0da460bb31c359c84d95","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":42,"deletions":35,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1e6b586445237da5e2e1eb75f2f12c0c591e852/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1e6b586445237da5e2e1eb75f2f12c0c591e852/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=c1e6b586445237da5e2e1eb75f2f12c0c591e852","patch":"@@ -417,6 +417,19 @@ private void setVirAttrSchema(final AbstractAttributable attributable,\n         }\n     }\n \n+    private void updateOnResourcesIfMappingMatches(final AttributableUtil attrUtil, final String schemaName,\n+            final Set<ExternalResource> resources, final IntMappingType mappingType,\n+            final PropagationByResource propByRes) {\n+\n+        for (ExternalResource resource : resources) {\n+            for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+                if (schemaName.equals(mapItem.getIntAttrName()) && mapItem.getIntMappingType() == mappingType) {\n+                    propByRes.add(ResourceOperation.UPDATE, resource.getName());\n+                }\n+            }\n+        }\n+    }\n+\n     public PropagationByResource fillVirtual(final AbstractAttributable attributable,\n             final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n             final AttributableUtil attrUtil) {\n@@ -427,10 +440,10 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n         if (attributable instanceof AbstractSubject) {\n             externalResources.addAll(((AbstractSubject) attributable).getResources());\n         }\n-\n         if (attributable instanceof Membership) {\n             externalResources.clear();\n             externalResources.addAll(((Membership) attributable).getSyncopeUser().getResources());\n+            externalResources.addAll(((Membership) attributable).getSyncopeRole().getResources());\n         }\n \n         // 1. virtual attributes to be removed\n@@ -445,11 +458,10 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n                     virAttrDAO.delete(virAttr);\n                 }\n \n-                for (ExternalResource resource : resourceDAO.findAll()) {\n+                for (ExternalResource resource : externalResources) {\n                     for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                         if (virSchema.getName().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == attrUtil.virIntMappingType()\n-                                && externalResources.contains(resource)) {\n+                                && mapItem.getIntMappingType() == attrUtil.virIntMappingType()) {\n \n                             propByRes.add(ResourceOperation.UPDATE, resource.getName());\n \n@@ -483,15 +495,12 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n             }\n \n             if (virSchema != null && virAttr != null && virAttr.getSchema() != null) {\n-                for (ExternalResource resource : resourceDAO.findAll()) {\n-                    for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n-                        if (virSchema.getName().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == attrUtil.virIntMappingType()\n-                                && externalResources.contains(resource)) {\n-\n-                            propByRes.add(ResourceOperation.UPDATE, resource.getName());\n-                        }\n-                    }\n+                if (attributable instanceof AbstractSubject) {\n+                    updateOnResourcesIfMappingMatches(attrUtil, virSchema.getName(),\n+                            externalResources, attrUtil.virIntMappingType(), propByRes);\n+                } else if (attributable instanceof Membership) {\n+                    updateOnResourcesIfMappingMatches(attrUtil, virSchema.getName(),\n+                            externalResources, IntMappingType.MembershipVirtualSchema, propByRes);\n                 }\n \n                 final List<String> values = new ArrayList<String>(virAttr.getValues());\n@@ -588,6 +597,16 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n             }\n         }\n \n+        final Set<ExternalResource> externalResources = new HashSet<ExternalResource>();\n+        if (attributable instanceof AbstractSubject) {\n+            externalResources.addAll(((AbstractSubject) attributable).getResources());\n+        }\n+        if (attributable instanceof Membership) {\n+            externalResources.clear();\n+            externalResources.addAll(((Membership) attributable).getSyncopeUser().getResources());\n+            externalResources.addAll(((Membership) attributable).getSyncopeRole().getResources());\n+        }\n+\n         LOG.debug(\"Attributes to be removed:\\n{}\", propByRes);\n \n         // 4. attributes to be updated\n@@ -610,17 +629,11 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n \n             if (schema != null && attr != null && attr.getSchema() != null) {\n                 if (attributable instanceof AbstractSubject) {\n-                    for (ExternalResource resource : resourceDAO.findAll()) {\n-                        for (AbstractMappingItem mapItem : attrUtil.\n-                                getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n-                            if (schema.getName().equals(mapItem.getIntAttrName())\n-                                    && mapItem.getIntMappingType() == attrUtil.intMappingType()\n-                                    && ((AbstractSubject) attributable).getResources().contains(resource)) {\n-\n-                                propByRes.add(ResourceOperation.UPDATE, resource.getName());\n-                            }\n-                        }\n-                    }\n+                    updateOnResourcesIfMappingMatches(attrUtil, schema.getName(),\n+                            externalResources, attrUtil.intMappingType(), propByRes);\n+                } else if (attributable instanceof Membership) {\n+                    updateOnResourcesIfMappingMatches(attrUtil, schema.getName(),\n+                            externalResources, IntMappingType.MembershipSchema, propByRes);\n                 }\n \n                 // 1.1 remove values\n@@ -707,17 +720,11 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n             AbstractDerSchema derSchema = getDerSchema(derAttrToBeAdded, attrUtil.derSchemaClass());\n             if (derSchema != null) {\n                 if (attributable instanceof AbstractSubject) {\n-                    for (ExternalResource resource : resourceDAO.findAll()) {\n-                        for (AbstractMappingItem mapItem : attrUtil.\n-                                getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n-                            if (derSchema.getName().equals(mapItem.getIntAttrName())\n-                                    && mapItem.getIntMappingType() == attrUtil.derIntMappingType()\n-                                    && ((AbstractSubject) attributable).getResources().contains(resource)) {\n-\n-                                propByRes.add(ResourceOperation.UPDATE, resource.getName());\n-                            }\n-                        }\n-                    }\n+                    updateOnResourcesIfMappingMatches(attrUtil, derSchema.getName(),\n+                            externalResources, attrUtil.derIntMappingType(), propByRes);\n+                } else if (attributable instanceof Membership) {\n+                    updateOnResourcesIfMappingMatches(attrUtil, derSchema.getName(),\n+                            externalResources, IntMappingType.MembershipDerivedSchema, propByRes);\n                 }\n \n                 AbstractDerAttr derAttr = attrUtil.newDerAttr();"},{"sha":"7d5493ca65155c62b6ef6c86968f665ad9c4d3ec","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":48,"deletions":6,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1e6b586445237da5e2e1eb75f2f12c0c591e852/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1e6b586445237da5e2e1eb75f2f12c0c591e852/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=c1e6b586445237da5e2e1eb75f2f12c0c591e852","patch":"@@ -1069,7 +1069,7 @@ public final void issue280() {\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"123password\");\n         userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n-        \n+\n         final StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n         st.getResourceNames().add(RESOURCE_NAME_TESTDB);\n@@ -1563,11 +1563,11 @@ public void isseSYNCOPE136AES() {\n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n-        \n+\n         final StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n         st.getResourceNames().add(RESOURCE_NAME_WS1);\n-        userMod.setPwdPropRequest(st);        \n+        userMod.setPwdPropRequest(st);\n \n         userTO = updateUser(userMod);\n         assertNotNull(userTO);\n@@ -1603,7 +1603,7 @@ public void isseSYNCOPE136Random() {\n         st.setOnSyncope(false);\n         st.getResourceNames().add(RESOURCE_NAME_LDAP);\n         userMod.setPwdPropRequest(st);\n-        \n+\n         userTO = updateUser(userMod);\n         assertNotNull(userTO);\n \n@@ -2323,7 +2323,7 @@ public void issueSYNCOPE505DB() throws Exception {\n         st.setOnSyncope(false);\n         st.getResourceNames().add(RESOURCE_NAME_TESTDB);\n         userMod.setPwdPropRequest(st);\n-        \n+\n         user = updateUser(userMod);\n         assertNotNull(user);\n         assertEquals(1, user.getResources().size());\n@@ -2361,7 +2361,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         UserMod userMod = new UserMod();\n         userMod.setId(user.getId());\n         userMod.getResourcesToAdd().add(RESOURCE_NAME_LDAP);\n-        \n+\n         final StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n         st.getResourceNames().add(RESOURCE_NAME_LDAP);\n@@ -2491,4 +2491,46 @@ public void issueSYNCOPE391() {\n             resourceService.update(RESOURCE_NAME_CSV, csv);\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE647() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope647@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attributeTO(\"csvuserid\", null));\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(12L);\n+        membershipTO.getAttrs().add(attributeTO(\"postalAddress\", \"postalAddress\"));\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, actual.getId());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"postalAddress\", connObjectTO.getAttrMap().get(\"postalAddress\").getValues().get(0));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(actual.getId());\n+\n+        MembershipMod membershipMod = new MembershipMod();\n+        membershipMod.setRole(12L);\n+        membershipMod.getAttrsToUpdate().add(attributeMod(\"postalAddress\", \"newPostalAddress\"));\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(actual.getMemberships().iterator().next().getId());\n+\n+        actual = updateUser(userMod);\n+\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, actual.getId());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"newPostalAddress\", connObjectTO.getAttrMap().get(\"postalAddress\").getValues().get(0));\n+    }\n }"}]}