{"sha":"45fa15309968d0d30bde74e41d0d2de5cb96d0f2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ1ZmExNTMwOTk2OGQwZDMwYmRlNzRlNDFkMGQyZGU1Y2I5NmQwZjI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-20T08:04:31Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-20T08:04:31Z"},"message":"RESTful access to configuration entities\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246401 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6b2fdb8b231444128191a66550e8ae1da3cdd125","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6b2fdb8b231444128191a66550e8ae1da3cdd125"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/45fa15309968d0d30bde74e41d0d2de5cb96d0f2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/45fa15309968d0d30bde74e41d0d2de5cb96d0f2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/45fa15309968d0d30bde74e41d0d2de5cb96d0f2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/comments","author":null,"committer":null,"parents":[{"sha":"14f9577a312631f64f8f17553aa0580dfe6e6acf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/14f9577a312631f64f8f17553aa0580dfe6e6acf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/14f9577a312631f64f8f17553aa0580dfe6e6acf"}],"stats":{"total":534,"additions":480,"deletions":54},"files":[{"sha":"e6c8ea0b54b36362be049b397a8f7c2a1c4c9e24","filename":"client/src/main/java/org/syncope/client/to/ConfigurationTO.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -0,0 +1,37 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+public class ConfigurationTO extends AbstractBaseTO {\n+\n+    private String confKey;\n+    private String confValue;\n+\n+    public String getConfKey() {\n+        return confKey;\n+    }\n+\n+    public void setConfKey(String confKey) {\n+        this.confKey = confKey;\n+    }\n+\n+    public String getConfValue() {\n+        return confValue;\n+    }\n+\n+    public void setConfValue(String confValue) {\n+        this.confValue = confValue;\n+    }\n+}"},{"sha":"d72723674e79e913708c6a37db6045e6b1ff02c2","filename":"client/src/main/java/org/syncope/client/to/ConfigurationTOs.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTOs.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -0,0 +1,42 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ConfigurationTOs extends AbstractBaseTO\n+        implements Iterable<ConfigurationTO> {\n+\n+    private List<ConfigurationTO> configurations;\n+\n+    public ConfigurationTOs() {\n+        configurations = new ArrayList<ConfigurationTO>();\n+    }\n+\n+    public List<ConfigurationTO> getConfigurations() {\n+        return configurations;\n+    }\n+\n+    public void setConfigurations(List<ConfigurationTO> users) {\n+        this.configurations = users;\n+    }\n+\n+    @Override\n+    public Iterator<ConfigurationTO> iterator() {\n+        return configurations.iterator();\n+    }\n+}"},{"sha":"61bbbd08ae7a3c52a26de0b32eac1c4aae334b52","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -25,6 +25,9 @@ public enum SyncopeClientExceptionType {\n     InvalidRoles(\n     \"Syncope.InvalidRoles\",\n     \"Syncope.InvalidRoles.name\"),\n+    InvalidSchemaDefinition(\n+    \"Syncope.InvalidSchemaDefinition\",\n+    \"\"),\n     InvalidUpdate(\n     \"Syncope.InvalidUpdate\",\n     \"Syncope.InvalidUpdate.name\"),"},{"sha":"cf5f0bf2f6459ad12e3ab756516c2528c3e5fc16","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -16,15 +16,15 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.validation.UniqueValueException;\n+import org.syncope.core.persistence.validation.MultiUniqueValueException;\n \n public interface SchemaDAO extends DAO {\n \n     <T extends AbstractSchema> T find(String name, Class<T> reference);\n \n     <T extends AbstractSchema> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractSchema> T save(T schema) throws UniqueValueException;\n+    <T extends AbstractSchema> T save(T schema) throws MultiUniqueValueException;\n \n     <T extends AbstractSchema> void delete(String name, Class<T> reference);\n }"},{"sha":"614f23c1e07f7262a240f7537cc84199a99c8c89","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -29,7 +29,7 @@\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SchemaMappingDAO;\n-import org.syncope.core.persistence.validation.UniqueValueException;\n+import org.syncope.core.persistence.validation.MultiUniqueValueException;\n \n @Repository\n public class SchemaDAOImpl extends AbstractDAOImpl\n@@ -55,10 +55,10 @@ public <T extends AbstractSchema> List<T> findAll(Class<T> reference) {\n     @Override\n     @Transactional\n     public <T extends AbstractSchema> T save(T schema)\n-            throws UniqueValueException {\n+            throws MultiUniqueValueException {\n \n         if (schema.isMultivalue() && schema.isUniquevalue()) {\n-            throw new UniqueValueException(schema);\n+            throw new MultiUniqueValueException(schema);\n         }\n \n         return entityManager.merge(schema);"},{"sha":"dc93eff5e5d74a6efebba4fa3095c1eef69b5670","filename":"core/src/main/java/org/syncope/core/persistence/validation/MultiUniqueValueException.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FMultiUniqueValueException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FMultiUniqueValueException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FMultiUniqueValueException.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -16,9 +16,9 @@\n \n import org.syncope.core.persistence.beans.AbstractSchema;\n \n-public class UniqueValueException extends ValidationException {\n+public class MultiUniqueValueException extends ValidationException {\n \n-    public UniqueValueException(AbstractSchema schema) {\n+    public MultiUniqueValueException(AbstractSchema schema) {\n         super(\"A schema cannot be multivalue and uniquevalue at the same time\"\n                 + schema);\n     }","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/UniqueValueException.java"},{"sha":"a13a96e2a8b2ccd2dd9fe417da4bde08e87824dd","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -26,6 +26,7 @@\n import org.syncope.client.validation.SyncopeClientErrorHandler;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.propagation.PropagationException;\n+import org.syncope.core.persistence.validation.MultiUniqueValueException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n public abstract class AbstractController {\n@@ -85,6 +86,18 @@ protected <T> T throwNotFoundException(String notFound,\n         return null;\n     }\n \n+    protected <T> T throwMultiUniqueValueException(MultiUniqueValueException e,\n+            HttpServletResponse response) throws IOException {\n+\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.InvalidSchemaDefinition.getHeaderValue());\n+\n+        response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n+\n+        return null;\n+    }\n+\n     protected <T> T throwWorkflowException(WorkflowException we,\n             HttpServletResponse response) throws IOException {\n "},{"sha":"749d59fb72b5cc0b433c60831e00e4c4906925a1","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -0,0 +1,143 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.to.ConfigurationTOs;\n+import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.rest.data.ConfigurationDataBinder;\n+\n+@Controller\n+@RequestMapping(\"/configuration\")\n+public class ConfigurationController extends AbstractController {\n+\n+    @Autowired\n+    private SyncopeConfigurationDAO syncopeConfigurationDAO;\n+    @Autowired\n+    private ConfigurationDataBinder configurationDataBinder;\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/create\")\n+    public ConfigurationTO create(HttpServletRequest request,\n+            HttpServletResponse response,\n+            @RequestBody ConfigurationTO configurationTO)\n+            throws IOException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"create called with parameters \" + configurationTO);\n+        }\n+\n+        SyncopeConfiguration syncopeConfiguration =\n+                configurationDataBinder.createSyncopeConfiguration(\n+                configurationTO);\n+\n+        syncopeConfiguration =\n+                syncopeConfigurationDAO.save(syncopeConfiguration);\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+\n+        return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n+    }\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{confKey}\")\n+    public void delete(HttpServletResponse response,\n+            @PathVariable(\"confKey\") String confKey)\n+            throws IOException {\n+\n+        SyncopeConfiguration syncopeConfiguration =\n+                syncopeConfigurationDAO.find(confKey);\n+\n+        if (syncopeConfiguration == null) {\n+            log.error(\"Could not find configuration '\" + confKey + \"'\");\n+\n+            throwNotFoundException(String.valueOf(confKey), response);\n+        } else {\n+            syncopeConfigurationDAO.delete(confKey);\n+        }\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list\")\n+    public ConfigurationTOs list(HttpServletRequest request) throws IOException {\n+        List<SyncopeConfiguration> configurations =\n+                syncopeConfigurationDAO.findAll();\n+        List<ConfigurationTO> configurationTOs =\n+                new ArrayList<ConfigurationTO>(configurations.size());\n+\n+        for (SyncopeConfiguration configuration : configurations) {\n+            configurationTOs.add(\n+                    configurationDataBinder.getConfigurationTO(configuration));\n+        }\n+\n+        ConfigurationTOs result = new ConfigurationTOs();\n+        result.setConfigurations(configurationTOs);\n+        return result;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/read/{confKey}\")\n+    public ConfigurationTO read(HttpServletResponse response,\n+            @PathVariable(\"confKey\") String confKey)\n+            throws IOException {\n+\n+        SyncopeConfiguration syncopeConfiguration =\n+                syncopeConfigurationDAO.find(confKey);\n+\n+        if (syncopeConfiguration == null) {\n+            log.error(\"Could not find configuration '\" + confKey + \"'\");\n+\n+            return throwNotFoundException(String.valueOf(confKey), response);\n+        }\n+\n+        return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n+    }\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/update\")\n+    public ConfigurationTO update(HttpServletResponse response,\n+            @RequestBody ConfigurationTO configurationTO)\n+            throws IOException {\n+\n+        SyncopeConfiguration syncopeConfiguration =\n+                syncopeConfigurationDAO.find(configurationTO.getConfKey());\n+\n+        if (syncopeConfiguration == null) {\n+            log.error(\"Could not find configuration '\" + configurationTO + \"'\");\n+\n+            return throwNotFoundException(configurationTO.getConfKey(), response);\n+        }\n+\n+        syncopeConfiguration.setConfValue(configurationTO.getConfValue());\n+\n+        return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n+    }\n+}"},{"sha":"303909a6a0964d718eecae98b8c6328d21b102b9","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -45,15 +45,17 @@ public class DerivedSchemaController extends AbstractController {\n     public DerivedSchemaTO create(HttpServletResponse response,\n             @RequestBody DerivedSchemaTO derivedSchemaTO,\n             @PathVariable(\"kind\") String kind)\n-            throws InstantiationException, IllegalAccessException {\n+            throws IOException {\n \n-        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         AbstractDerivedSchema derivedSchema =\n+                getAttributableUtil(kind).newDerivedSchema();\n+        derivedSchema =\n                 derivedSchemaDataBinder.createDerivedSchema(\n-                derivedSchemaTO, reference,\n+                derivedSchemaTO, derivedSchema,\n                 getAttributableUtil(kind).getSchemaClass());\n \n         derivedSchema = derivedSchemaDAO.save(derivedSchema);\n+\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n@@ -72,6 +74,7 @@ public void delete(HttpServletResponse response,\n         if (derivedSchema == null) {\n             log.error(\"Could not find derived schema '\"\n                     + derivedSchemaName + \"'\");\n+            \n             throwNotFoundException(derivedSchemaName, response);\n         } else {\n             derivedSchemaDAO.delete(derivedSchemaName, reference);\n@@ -111,6 +114,7 @@ public DerivedSchemaTO read(HttpServletResponse response,\n         if (derivedSchema == null) {\n             log.error(\"Could not find derived schema '\"\n                     + derivedSchemaName + \"'\");\n+            \n             return throwNotFoundException(derivedSchemaName, response);\n         }\n \n@@ -122,18 +126,21 @@ public DerivedSchemaTO read(HttpServletResponse response,\n     public DerivedSchemaTO update(HttpServletResponse response,\n             @RequestBody DerivedSchemaTO derivedSchemaTO,\n             @PathVariable(\"kind\") String kind)\n-            throws InstantiationException, IllegalAccessException, IOException {\n+            throws IOException {\n \n-        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         AbstractDerivedSchema derivedSchema =\n+                getAttributableUtil(kind).newDerivedSchema();\n+        derivedSchema =\n                 derivedSchemaDataBinder.createDerivedSchema(\n-                derivedSchemaTO, reference,\n+                derivedSchemaTO, derivedSchema,\n                 getAttributableUtil(kind).getSchemaClass());\n         if (derivedSchema == null) {\n-            log.error(\"Could not find schema '\" + derivedSchemaTO.getName() + \"'\");\n+            log.error(\"Could not find schema '\"\n+                    + derivedSchemaTO.getName() + \"'\");\n+\n             return throwNotFoundException(derivedSchemaTO.getName(), response);\n         }\n-        \n+\n         derivedSchema = derivedSchemaDAO.save(derivedSchema);\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }"},{"sha":"2450ce2db40ac6f331d9ce9f3509e80a756271f0","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":28,"deletions":14,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -28,10 +28,10 @@\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.to.SchemaTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.core.persistence.validation.UniqueValueException;\n import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.validation.MultiUniqueValueException;\n \n @Controller\n @RequestMapping(\"/schema\")\n@@ -45,15 +45,21 @@ public class SchemaController extends AbstractController {\n     @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public SchemaTO create(HttpServletResponse response,\n-            @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n-            throws InstantiationException, IllegalAccessException,\n-            UniqueValueException {\n+            @RequestBody SchemaTO schemaTO,\n+            @PathVariable(\"kind\") String kind)\n+            throws IOException {\n \n-        Class reference = getAttributableUtil(kind).getSchemaClass();\n-        AbstractSchema schema = schemaDataBinder.createSchema(schemaTO,\n-                reference, getAttributableUtil(kind).getDerivedSchemaClass());\n+        AbstractSchema schema = getAttributableUtil(kind).newSchema();\n+        schema = schemaDataBinder.createSchema(schemaTO, schema,\n+                getAttributableUtil(kind).getDerivedSchemaClass());\n+        try {\n+            schema = schemaDAO.save(schema);\n+        } catch (MultiUniqueValueException e) {\n+            log.error(\"While saving schema\", e);\n+\n+            return throwMultiUniqueValueException(e, response);\n+        }\n \n-        schema = schemaDAO.save(schema);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return schemaDataBinder.getSchemaTO(schema);\n     }\n@@ -63,7 +69,8 @@ public SchemaTO create(HttpServletResponse response,\n     value = \"/{kind}/delete/{schema}\")\n     public void delete(HttpServletResponse response,\n             @PathVariable(\"kind\") String kind,\n-            @PathVariable(\"schema\") String schemaName) throws IOException {\n+            @PathVariable(\"schema\") String schemaName)\n+            throws IOException {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n@@ -95,7 +102,8 @@ public SchemaTOs list(@PathVariable(\"kind\") String kind) {\n     value = \"/{kind}/read/{schema}\")\n     public SchemaTO read(HttpServletResponse response,\n             @PathVariable(\"kind\") String kind,\n-            @PathVariable(\"schema\") String schemaName) throws IOException {\n+            @PathVariable(\"schema\") String schemaName)\n+            throws IOException {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n@@ -111,8 +119,7 @@ public SchemaTO read(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public SchemaTO update(HttpServletResponse response,\n             @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n-            throws IOException, InstantiationException, IllegalAccessException,\n-            UniqueValueException {\n+            throws IOException {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = null;\n@@ -128,8 +135,15 @@ public SchemaTO update(HttpServletResponse response,\n             log.error(\"Could not update for \" + schemaTO, e);\n             return throwCompositeException(e, response);\n         }\n-        \n-        schema = schemaDAO.save(schema);\n+\n+        try {\n+            schema = schemaDAO.save(schema);\n+        } catch (MultiUniqueValueException e) {\n+            log.error(\"While saving schema\", e);\n+\n+            return throwMultiUniqueValueException(e, response);\n+        }\n+\n         return schemaDataBinder.getSchemaTO(schema);\n     }\n }"},{"sha":"0a67400a5cac67ecef99dc8249ba04ec6b6f2d17","filename":"core/src/main/java/org/syncope/core/rest/data/AttributableUtil.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -49,6 +49,21 @@ public <T extends AbstractSchema> Class<T> getSchemaClass() {\n         return result;\n     }\n \n+    public <T extends AbstractSchema> T newSchema() {\n+        T result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = (T) new UserSchema();\n+                break;\n+            case ROLE:\n+                result = (T) new RoleSchema();\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n     public <T extends AbstractDerivedSchema> Class<T> getDerivedSchemaClass() {\n         Class result = null;\n \n@@ -64,6 +79,21 @@ public <T extends AbstractDerivedSchema> Class<T> getDerivedSchemaClass() {\n         return result;\n     }\n \n+    public <T extends AbstractDerivedSchema> T newDerivedSchema() {\n+        T result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = (T) new UserDerivedSchema();\n+                break;\n+            case ROLE:\n+                result = (T) new RoleDerivedSchema();\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n     public <T extends AbstractAttribute> Class<T> getAttributeClass() {\n         Class result = null;\n "},{"sha":"25e5367849ee46398d47349232e5e9fdf087232b","filename":"core/src/main/java/org/syncope/core/rest/data/ConfigurationDataBinder.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -0,0 +1,43 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+\n+@Component\n+public class ConfigurationDataBinder extends AbstractAttributableDataBinder {\n+\n+    public SyncopeConfiguration createSyncopeConfiguration(\n+            ConfigurationTO configurationTO) {\n+\n+        SyncopeConfiguration syncopeConfiguration = new SyncopeConfiguration();\n+        syncopeConfiguration.setConfKey(configurationTO.getConfKey());\n+        syncopeConfiguration.setConfValue(configurationTO.getConfValue());\n+\n+        return syncopeConfiguration;\n+    }\n+\n+    public ConfigurationTO getConfigurationTO(\n+            SyncopeConfiguration syncopeConfiguration) {\n+\n+        ConfigurationTO configurationTO = new ConfigurationTO();\n+        configurationTO.setConfKey(syncopeConfiguration.getConfKey());\n+        configurationTO.setConfValue(syncopeConfiguration.getConfValue());\n+\n+        return configurationTO;\n+    }\n+}"},{"sha":"0b32e1040756ddd720653658c29b4e1365a2eecc","filename":"core/src/main/java/org/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -30,8 +30,8 @@ public class DerivedSchemaDataBinder {\n \n     private static final Logger log = LoggerFactory.getLogger(\n             DerivedSchemaDataBinder.class);\n-    private static final String[] ignoreDerivedSchemaProperties = {\"schemas\",\n-        \"derivedAttributes\"};\n+    private static final String[] ignoreDerivedSchemaProperties = {\n+        \"schemas\", \"derivedAttributes\"};\n     private SchemaDAO schemaDAO;\n     private DerivedSchemaDAO derivedSchemaDAO;\n \n@@ -67,12 +67,10 @@ private <T extends AbstractDerivedSchema, K extends AbstractSchema> T populateDe\n \n     public <T extends AbstractDerivedSchema, K extends AbstractSchema> T createDerivedSchema(\n             DerivedSchemaTO derivedSchemaTO,\n-            Class<T> derivedReference,\n-            Class<K> reference)\n-            throws InstantiationException, IllegalAccessException {\n+            T derivedSchema,\n+            Class<K> reference) {\n \n-        return populateDerivedSchema(derivedReference.newInstance(),\n-                derivedSchemaTO, reference);\n+        return populateDerivedSchema(derivedSchema, derivedSchemaTO, reference);\n     }\n \n     public <T extends AbstractDerivedSchema, K extends AbstractSchema> T updateDerivedSchema("},{"sha":"4a6b80a371d49246954041082dd1a59b829112b5","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -30,16 +30,15 @@\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.validation.UniqueValueException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n public class SchemaDataBinder {\n \n     private static final Logger log = LoggerFactory.getLogger(\n             SchemaDataBinder.class);\n-    private static final String[] ignoreSchemaProperties = {\"derivedSchemas\",\n-        \"attributes\"};\n+    private static final String[] ignoreSchemaProperties = {\n+        \"derivedSchemas\", \"attributes\"};\n     private SchemaDAO schemaDAO;\n     private DerivedSchemaDAO derivedSchemaDAO;\n \n@@ -75,21 +74,17 @@ private <T extends AbstractSchema, K extends AbstractDerivedSchema> T populateSc\n \n     public <T extends AbstractSchema, K extends AbstractDerivedSchema> T createSchema(\n             SchemaTO schemaTO,\n-            Class<T> reference,\n-            Class<K> derivedReference)\n-            throws InstantiationException, IllegalAccessException,\n-            UniqueValueException {\n+            T schema,\n+            Class<K> derivedReference) {\n \n-        return populateSchema(\n-                reference.newInstance(), schemaTO, derivedReference);\n+        return populateSchema(schema, schemaTO, derivedReference);\n     }\n \n     public <T extends AbstractSchema, K extends AbstractDerivedSchema> T updateSchema(\n             SchemaTO schemaTO,\n             Class<T> reference,\n             Class<K> derivedReference)\n-            throws InstantiationException, IllegalAccessException,\n-            SyncopeClientCompositeErrorException, UniqueValueException {\n+            throws SyncopeClientCompositeErrorException {\n \n         T schema = schemaDAO.find(schemaTO.getName(), reference);\n         if (schema != null) {\n@@ -124,12 +119,12 @@ public <T extends AbstractSchema, K extends AbstractDerivedSchema> T updateSchem\n                         new SyncopeClientCompositeErrorException(\n                         HttpStatus.BAD_REQUEST);\n \n-                SyncopeClientException ex = new SyncopeClientException(\n+                SyncopeClientException e = new SyncopeClientException(\n                         SyncopeClientExceptionType.InvalidUpdate);\n \n-                ex.addElement(schema.getName());\n-                sccee.addException(ex);\n-                \n+                e.addElement(schema.getName());\n+                sccee.addException(e);\n+\n                 throw sccee;\n             }\n "},{"sha":"b8cd549959e0bb0c0bf1c56c16edcb3d19b80e14","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaDAOTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -23,7 +23,7 @@\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.validation.UniqueValueException;\n+import org.syncope.core.persistence.validation.MultiUniqueValueException;\n import org.syncope.types.SchemaType;\n \n @Transactional\n@@ -61,7 +61,7 @@ public final void save() {\n         \n         try {\n             schemaDAO.save(attributeSchema);\n-        } catch (UniqueValueException e) {\n+        } catch (MultiUniqueValueException e) {\n             log.error(\"Unexpected exception\", e);\n         }\n "},{"sha":"3422f852a8adfcefefb0fb5479a5baeee3defbad","filename":"core/src/test/java/org/syncope/core/test/rest/ConfigurationTestITCase.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConfigurationTestITCase.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -0,0 +1,101 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.rest;\n+\n+import java.io.UnsupportedEncodingException;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.to.ConfigurationTOs;\n+\n+public class ConfigurationTestITCase extends AbstractTestITCase {\n+\n+    @Test\n+    public void create() {\n+        ConfigurationTO configurationTO = new ConfigurationTO();\n+        configurationTO.setConfKey(\"testKey\");\n+        configurationTO.setConfValue(\"testValue\");\n+\n+        ConfigurationTO newConfigurationTO = restTemplate.postForObject(\n+                BASE_URL + \"configuration/create\",\n+                configurationTO, ConfigurationTO.class);\n+        assertEquals(configurationTO, newConfigurationTO);\n+    }\n+\n+    @Test\n+    public void delete() throws UnsupportedEncodingException {\n+        try {\n+            restTemplate.delete(BASE_URL + \"configuration/delete/{confKey}.json\",\n+                    \"nonExistent\");\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+\n+        ConfigurationTO tokenLengthTO = restTemplate.getForObject(\n+                BASE_URL + \"configuration/read/{confKey}.json\",\n+                ConfigurationTO.class,\n+                \"token.length\");\n+\n+        restTemplate.delete(BASE_URL + \"configuration/delete/{confKey}.json\",\n+                \"token.length\");\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"configuration/read/{confKey}.json\",\n+                    ConfigurationTO.class,\n+                    \"token.length\");\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+\n+        ConfigurationTO newConfigurationTO = restTemplate.postForObject(\n+                BASE_URL + \"configuration/create\",\n+                tokenLengthTO, ConfigurationTO.class);\n+        assertEquals(tokenLengthTO, newConfigurationTO);\n+    }\n+\n+    @Test\n+    public void list() {\n+        ConfigurationTOs configurations = restTemplate.getForObject(\n+                BASE_URL + \"configuration/list.json\",\n+                ConfigurationTOs.class);\n+\n+        assertNotNull(configurations);\n+    }\n+\n+    @Test\n+    public void read() {\n+        ConfigurationTO configurationTO = restTemplate.getForObject(BASE_URL\n+                + \"configuration/read/{confKey}.json\",\n+                ConfigurationTO.class, \"token.expireTime\");\n+\n+        assertNotNull(configurationTO);\n+    }\n+\n+    @Test\n+    public void update() {\n+        ConfigurationTO configurationTO = new ConfigurationTO();\n+        configurationTO.setConfKey(\"token.expireTime\");\n+        configurationTO.setConfValue(\"61\");\n+\n+        ConfigurationTO newConfigurationTO = restTemplate.postForObject(\n+                BASE_URL + \"configuration/update\",\n+                configurationTO, ConfigurationTO.class);\n+\n+        assertEquals(configurationTO, newConfigurationTO);\n+    }\n+}"},{"sha":"93378ea86557ec63228f591ca3bb76d5075efc53","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45fa15309968d0d30bde74e41d0d2de5cb96d0f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=45fa15309968d0d30bde74e41d0d2de5cb96d0f2","patch":"@@ -159,7 +159,7 @@ public void list() {\n     @Test\n     public void read() {\n         UserTO userTO = restTemplate.getForObject(BASE_URL\n-                + \"user/read/{userId}.json\", UserTO.class, \"1\");\n+                + \"user/read/{userId}.json\", UserTO.class, 1);\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getAttributes());"}]}