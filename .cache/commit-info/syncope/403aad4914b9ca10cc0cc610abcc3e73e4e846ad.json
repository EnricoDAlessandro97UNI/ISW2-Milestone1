{"sha":"403aad4914b9ca10cc0cc610abcc3e73e4e846ad","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQwM2FhZDQ5MTRiOWNhMTBjYzBjYzYxMGFiY2MzZTczZTRlODQ2YWQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-22T19:21:01Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-22T19:21:01Z"},"message":"Fixes #136\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246639 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a268117c012595f5ae30385c6e26d761c77ae479","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a268117c012595f5ae30385c6e26d761c77ae479"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/403aad4914b9ca10cc0cc610abcc3e73e4e846ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/403aad4914b9ca10cc0cc610abcc3e73e4e846ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/403aad4914b9ca10cc0cc610abcc3e73e4e846ad","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/comments","author":null,"committer":null,"parents":[{"sha":"123fe14d4cbf8991a0b3114a117301b0a0a845bb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/123fe14d4cbf8991a0b3114a117301b0a0a845bb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/123fe14d4cbf8991a0b3114a117301b0a0a845bb"}],"stats":{"total":458,"additions":410,"deletions":48},"files":[{"sha":"d22600b431903c9ae22081cfe0db62922e64d357","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=403aad4914b9ca10cc0cc610abcc3e73e4e846ad","patch":"@@ -27,10 +27,18 @@ public interface SyncopeUserDAO extends DAO {\n \n     List<SyncopeUser> findByAttributeValue(UserAttributeValue attributeValue);\n \n+    List<SyncopeUser> findByAttributeValue(UserAttributeValue attributeValue,\n+            int page, int itemsPerPage);\n+\n     List<SyncopeUser> findAll();\n \n+    List<SyncopeUser> findAll(int page, int itemsPerPage);\n+\n     List<SyncopeUser> search(NodeCond searchCondition);\n \n+    List<SyncopeUser> search(NodeCond searchCondition,\n+            int page, int itemsPerPage);\n+\n     SyncopeUser save(SyncopeUser syncopeUser);\n \n     void delete(Long id);"},{"sha":"db1096d561387226899cdf8315a4de7121cae760","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":162,"deletions":46,"changes":208,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=403aad4914b9ca10cc0cc610abcc3e73e4e846ad","patch":"@@ -26,6 +26,7 @@\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n import org.syncope.core.persistence.beans.membership.Membership;\n@@ -75,7 +76,16 @@ public SyncopeUser findByWorkflowId(final Long workflowId) {\n     public List<SyncopeUser> findByAttributeValue(\n             final UserAttributeValue attributeValue) {\n \n-        Query query = entityManager.createQuery(\n+        return findByAttributeValue(attributeValue, -1, -1);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public final List<SyncopeUser> findByAttributeValue(\n+            final UserAttributeValue attributeValue,\n+            final int page, final int itemsPerPage) {\n+\n+        final Query query = entityManager.createQuery(\n                 \"SELECT u\"\n                 + \" FROM SyncopeUser u, UserAttribute ua, UserAttributeValue e \"\n                 + \" WHERE e.attribute = ua AND ua.owner = u\"\n@@ -88,20 +98,44 @@ public List<SyncopeUser> findByAttributeValue(\n                 + \" OR (e.longValue IS NOT NULL\"\n                 + \" AND e.longValue = :longValue)\"\n                 + \" OR (e.doubleValue IS NOT NULL\"\n-                + \" AND e.doubleValue = :doubleValue))\");\n+                + \" AND e.doubleValue = :doubleValue)) ORDER BY u.id\");\n         query.setParameter(\"stringValue\", attributeValue.getStringValue());\n         query.setParameter(\"booleanValue\", attributeValue.getBooleanValue());\n         query.setParameter(\"dateValue\", attributeValue.getDateValue());\n         query.setParameter(\"longValue\", attributeValue.getLongValue());\n         query.setParameter(\"doubleValue\", attributeValue.getDoubleValue());\n \n+        query.setFirstResult(\n+                itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n         return query.getResultList();\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public List<SyncopeUser> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e FROM SyncopeUser e\");\n+    public final List<SyncopeUser> findAll() {\n+        return findAll(-1, -1);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public final List<SyncopeUser> findAll(\n+            final int page, final int itemsPerPage) {\n+\n+        final Query query = entityManager.createQuery(\n+                \"SELECT e FROM SyncopeUser e ORDER BY e.id\");\n+\n+        query.setFirstResult(\n+                itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n         return query.getResultList();\n     }\n \n@@ -137,6 +171,13 @@ public void delete(final Long id) {\n     @Override\n     @Transactional(readOnly = true)\n     public List<SyncopeUser> search(final NodeCond searchCondition) {\n+        return search(searchCondition, -1, -1);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<SyncopeUser> search(final NodeCond searchCondition,\n+            final int page, final int itemsPerPage) {\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Search condition:\\n\" + searchCondition);\n         }\n@@ -150,11 +191,18 @@ public List<SyncopeUser> search(final NodeCond searchCondition) {\n             result = Collections.EMPTY_LIST;\n         }\n \n-        return result;\n+        // TODO: temporary solution to the paginated search\n+        int from = itemsPerPage * (page <= 0 ? 0 : page - 1);\n+\n+        int to = itemsPerPage <= 0 || from + itemsPerPage > result.size()\n+                ? result.size() : from + itemsPerPage;\n+\n+        return from > to ? Collections.EMPTY_LIST : result.subList(from, to);\n     }\n \n     @Transactional(readOnly = true)\n-    private List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n+    private List<SyncopeUser> doSearch(\n+            final NodeCond nodeCond) {\n         List<SyncopeUser> result;\n         List<SyncopeUser> rightResult;\n \n@@ -195,15 +243,33 @@ private List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n                 break;\n \n             case AND:\n+                // TODO: not paginable\n                 result = doSearch(nodeCond.getLeftNodeCond());\n                 rightResult = doSearch(nodeCond.getRightNodeCond());\n                 result.retainAll(rightResult);\n                 break;\n \n             case OR:\n+                // TODO: not paginable\n                 result = doSearch(nodeCond.getLeftNodeCond());\n                 rightResult = doSearch(nodeCond.getRightNodeCond());\n-                result.addAll(rightResult);\n+\n+                List<SyncopeUser> from = null;\n+                List<SyncopeUser> to = null;\n+\n+                if (rightResult.size() > result.size()) {\n+                    from = result;\n+                    to = rightResult;\n+                } else {\n+                    from = rightResult;\n+                    to = result;\n+                }\n+\n+                for (SyncopeUser user : from) {\n+                    if (!to.contains(user)) to.add(user);\n+                }\n+\n+                result = to;\n                 break;\n \n             default:\n@@ -243,6 +309,55 @@ private Criterion getCriterion(final NodeCond leafCond) {\n                                 leafCond.getMembershipCond().getRoleName());\n                     }\n                 } else if (leafCond.getAttributeCond() != null) {\n+                        UserSchema userSchema = schemaDAO.find(\n+                                leafCond.getAttributeCond().getSchema(),\n+                                UserSchema.class);\n+                        if (userSchema == null) {\n+                            LOG.warn(\"Ignoring invalid schema '\"\n+                                    + leafCond.getAttributeCond().getSchema()\n+                                    + \"'\");\n+                        } else {\n+                            UserAttributeValue attributeValue =\n+                                    new UserAttributeValue();\n+                            try {\n+                                if (leafCond.getAttributeCond().getType()\n+                                        == AttributeCond.Type.LIKE) {\n+\n+                                    attributeValue.setStringValue(\n+                                            leafCond.getAttributeCond().\n+                                            getExpression());\n+                                } else {\n+                                    attributeValue =\n+                                            userSchema.getValidator().\n+                                            getValue(\n+                                            leafCond.getAttributeCond().\n+                                            getExpression(),\n+                                            attributeValue);\n+                                }\n+\n+                                criterion = Restrictions.and(\n+                                        Restrictions.eq(\"a.schema.name\",\n+                                        leafCond.getAttributeCond().getSchema()),\n+                                        getCriterion(\n+                                        leafCond.getAttributeCond().getType(),\n+                                        attributeValue));\n+                            } catch (ValidationException e) {\n+                                LOG.error(\"Could not validate expression '\"\n+                                        + leafCond.getAttributeCond().\n+                                        getExpression() + \"'\", e);\n+                            }\n+                        }\n+                    }\n+\n+                break;\n+\n+            case NOT_LEAF:\n+                leafCond.setType(NodeCond.Type.LEAF);\n+\n+                final AttributeCond attributeCondition =\n+                        leafCond.getAttributeCond();\n+\n+                if (attributeCondition != null) {\n                     UserSchema userSchema = schemaDAO.find(\n                             leafCond.getAttributeCond().getSchema(),\n                             UserSchema.class);\n@@ -251,42 +366,43 @@ private Criterion getCriterion(final NodeCond leafCond) {\n                                 + leafCond.getAttributeCond().getSchema()\n                                 + \"'\");\n                     } else {\n-                        UserAttributeValue example =\n+                        UserAttributeValue attributeValue =\n                                 new UserAttributeValue();\n                         try {\n                             if (leafCond.getAttributeCond().getType()\n                                     == AttributeCond.Type.LIKE) {\n \n-                                example.setStringValue(\n+                                attributeValue.setStringValue(\n                                         leafCond.getAttributeCond().\n                                         getExpression());\n                             } else {\n-                                example = userSchema.getValidator().\n+                                attributeValue =\n+                                        userSchema.getValidator().\n                                         getValue(\n                                         leafCond.getAttributeCond().\n                                         getExpression(),\n-                                        example);\n+                                        attributeValue);\n                             }\n \n                             criterion = Restrictions.and(\n                                     Restrictions.eq(\"a.schema.name\",\n                                     leafCond.getAttributeCond().getSchema()),\n-                                    getCriterion(\n+                                    Restrictions.not(getCriterion(\n                                     leafCond.getAttributeCond().getType(),\n-                                    example));\n+                                    attributeValue)));\n+\n+                            // if user doesn't have the attribute it won't be returned\n+\n                         } catch (ValidationException e) {\n                             LOG.error(\"Could not validate expression '\"\n                                     + leafCond.getAttributeCond().\n                                     getExpression() + \"'\", e);\n                         }\n                     }\n+                } else {\n+                    leafCond.setType(NodeCond.Type.LEAF);\n+                    criterion = Restrictions.not(getCriterion(leafCond));\n                 }\n-\n-                break;\n-\n-            case NOT_LEAF:\n-                leafCond.setType(NodeCond.Type.LEAF);\n-                criterion = Restrictions.not(getCriterion(leafCond));\n                 break;\n \n             default:\n@@ -297,50 +413,50 @@ private Criterion getCriterion(final NodeCond leafCond) {\n \n     @Transactional(readOnly = true)\n     private Criterion getCriterion(final AttributeCond.Type type,\n-            final AbstractAttributeValue example) {\n+            final AbstractAttributeValue attributeValue) {\n \n         Criterion result = null;\n         switch (type) {\n             case EQ:\n                 result = Restrictions.disjunction().\n                         add(Restrictions.eq(\"av.stringValue\",\n-                        example.getStringValue())).\n+                        attributeValue.getStringValue())).\n                         add(Restrictions.eq(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n+                        attributeValue.getBooleanValue())).\n                         add(Restrictions.eq(\"av.longValue\",\n-                        example.getLongValue())).\n+                        attributeValue.getLongValue())).\n                         add(Restrictions.eq(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n+                        attributeValue.getDoubleValue())).\n                         add(Restrictions.eq(\"av.dateValue\",\n-                        example.getDateValue()));\n+                        attributeValue.getDateValue()));\n                 break;\n \n             case GE:\n                 result = Restrictions.disjunction().\n                         add(Restrictions.ge(\"av.stringValue\",\n-                        example.getStringValue())).\n+                        attributeValue.getStringValue())).\n                         add(Restrictions.ge(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n+                        attributeValue.getBooleanValue())).\n                         add(Restrictions.ge(\"av.longValue\",\n-                        example.getLongValue())).\n+                        attributeValue.getLongValue())).\n                         add(Restrictions.ge(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n+                        attributeValue.getDoubleValue())).\n                         add(Restrictions.ge(\"av.dateValue\",\n-                        example.getDateValue()));\n+                        attributeValue.getDateValue()));\n                 break;\n \n             case GT:\n                 result = Restrictions.disjunction().\n                         add(Restrictions.gt(\"av.stringValue\",\n-                        example.getStringValue())).\n+                        attributeValue.getStringValue())).\n                         add(Restrictions.gt(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n+                        attributeValue.getBooleanValue())).\n                         add(Restrictions.gt(\"av.longValue\",\n-                        example.getLongValue())).\n+                        attributeValue.getLongValue())).\n                         add(Restrictions.gt(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n+                        attributeValue.getDoubleValue())).\n                         add(Restrictions.gt(\"av.dateValue\",\n-                        example.getDateValue()));\n+                        attributeValue.getDateValue()));\n                 break;\n \n             case ISNOTNULL:\n@@ -355,35 +471,35 @@ private Criterion getCriterion(final AttributeCond.Type type,\n             case LE:\n                 result = Restrictions.disjunction().\n                         add(Restrictions.le(\"av.stringValue\",\n-                        example.getStringValue())).\n+                        attributeValue.getStringValue())).\n                         add(Restrictions.le(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n+                        attributeValue.getBooleanValue())).\n                         add(Restrictions.le(\"av.longValue\",\n-                        example.getLongValue())).\n+                        attributeValue.getLongValue())).\n                         add(Restrictions.le(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n+                        attributeValue.getDoubleValue())).\n                         add(Restrictions.le(\"av.dateValue\",\n-                        example.getDateValue()));\n+                        attributeValue.getDateValue()));\n                 break;\n \n             case LIKE:\n                 // LIKE operator is meaningful for strings only\n                 result = Restrictions.like(\"av.stringValue\",\n-                        example.getStringValue());\n+                        attributeValue.getStringValue());\n                 break;\n \n             case LT:\n                 result = Restrictions.disjunction().\n                         add(Restrictions.lt(\"av.stringValue\",\n-                        example.getStringValue())).\n+                        attributeValue.getStringValue())).\n                         add(Restrictions.lt(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n+                        attributeValue.getBooleanValue())).\n                         add(Restrictions.lt(\"av.longValue\",\n-                        example.getLongValue())).\n+                        attributeValue.getLongValue())).\n                         add(Restrictions.lt(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n+                        attributeValue.getDoubleValue())).\n                         add(Restrictions.lt(\"av.dateValue\",\n-                        example.getDateValue()));\n+                        attributeValue.getDateValue()));\n                 break;\n \n             default:"},{"sha":"c9799dd3111d00d317e3b5992063541882fde457","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=403aad4914b9ca10cc0cc610abcc3e73e4e846ad","patch":"@@ -197,6 +197,20 @@ public List<UserTO> list() {\n         return userTOs;\n     }\n \n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/paginatedList/{page}/{size}\")\n+    public List<UserTO> paginatedList(\n+            @PathVariable(\"page\") final int page,\n+            @PathVariable(\"size\") final int size) {\n+        List<SyncopeUser> users = syncopeUserDAO.findAll(page, size);\n+        List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n+        for (SyncopeUser user : users) {\n+            userTOs.add(userDataBinder.getUserTO(user, userWorkflow));\n+        }\n+\n+        return userTOs;\n+    }\n+\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{userId}\")\n     public UserTO read(@PathVariable(\"userId\") Long userId)\n@@ -257,6 +271,33 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n         return result;\n     }\n \n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/paginatedSearch/{page}/{size}\")\n+    public List<UserTO> paginatedSearch(\n+            @RequestBody final NodeCond searchCondition,\n+            @PathVariable(\"page\") final int page,\n+            @PathVariable(\"size\") final int size)\n+            throws InvalidSearchConditionException {\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"search called with condition \" + searchCondition);\n+        }\n+\n+        if (!searchCondition.checkValidity()) {\n+            LOG.error(\"Invalid search condition: \" + searchCondition);\n+            throw new InvalidSearchConditionException();\n+        }\n+\n+        List<SyncopeUser> matchingUsers =\n+                syncopeUserDAO.search(searchCondition, page, size);\n+        List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n+        for (SyncopeUser user : matchingUsers) {\n+            result.add(userDataBinder.getUserTO(user, userWorkflow));\n+        }\n+\n+        return result;\n+    }\n+\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/status/{userId}\")\n     public ModelAndView getStatus(@PathVariable(\"userId\") Long userId)"},{"sha":"4107a25c07214a5b6fb1901473a14459dbc2fe7c","filename":"core/src/test/java/org/syncope/core/persistence/dao/SyncopeUserTest.java","status":"modified","additions":117,"deletions":2,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserTest.java?ref=403aad4914b9ca10cc0cc610abcc3e73e4e846ad","patch":"@@ -24,8 +24,10 @@\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.user.UserAttribute;\n+import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n \n @Transactional\n public class SyncopeUserTest extends AbstractTest {\n@@ -39,6 +41,67 @@ public final void findAll() {\n         assertEquals(\"did not get expected number of users \", 4, list.size());\n     }\n \n+    @Test\n+    public final void findAllByPageAndSize() {\n+        // get first page\n+        List<SyncopeUser> list = syncopeUserDAO.findAll(1, 2);\n+        assertEquals(\"did not get expected number of users \", 2, list.size());\n+\n+        // get second page\n+        list = syncopeUserDAO.findAll(2, 2);\n+        assertEquals(\"did not get expected number of users \", 2, list.size());\n+\n+        // get second page with uncomplete set\n+        list = syncopeUserDAO.findAll(2, 3);\n+        assertEquals(\"did not get expected number of users \", 1, list.size());\n+\n+        // get unexistent page\n+        list = syncopeUserDAO.findAll(3, 2);\n+        assertEquals(\"did not get expected number of users \", 0, list.size());\n+    }\n+\n+    public final void findByAttribute() {\n+        final UserSchema schema = new UserSchema();\n+        schema.setName(\"username\");\n+\n+        final UserAttribute username = new UserAttribute();\n+        username.setSchema(schema);\n+\n+        final UserAttributeValue usernameValue = new UserAttributeValue();\n+        usernameValue.setStringValue(\"chicchiricco\");\n+        usernameValue.setAttribute(username);\n+\n+        username.addValue(usernameValue);\n+\n+        // get first page\n+        final List<SyncopeUser> list = syncopeUserDAO.findByAttributeValue(\n+                usernameValue);\n+        assertEquals(\"did not get expected number of users \", 1, list.size());\n+    }\n+\n+    public final void findByAttributePageAndSize() {\n+        final UserSchema schema = new UserSchema();\n+        schema.setName(\"username\");\n+\n+        final UserAttribute username = new UserAttribute();\n+        username.setSchema(schema);\n+\n+        final UserAttributeValue usernameValue = new UserAttributeValue();\n+        usernameValue.setStringValue(\"chicchiricco\");\n+        usernameValue.setAttribute(username);\n+\n+        username.addValue(usernameValue);\n+\n+        // get first page\n+        List<SyncopeUser> list = syncopeUserDAO.findByAttributeValue(\n+                usernameValue, 1, 2);\n+        assertEquals(\"did not get expected number of users \", 1, list.size());\n+\n+        // get unexistent page\n+        list = syncopeUserDAO.findAll(2, 2);\n+        assertEquals(\"did not get expected number of users \", 0, list.size());\n+    }\n+\n     @Test\n     public final void findById() {\n         SyncopeUser user = syncopeUserDAO.find(1L);\n@@ -61,7 +124,7 @@ public final void save() {\n     }\n \n     @Test\n-    public final void search() {\n+    public final void searchWithLikeCondition() {\n         AttributeCond usernameLeafCond =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n         usernameLeafCond.setSchema(\"username\");\n@@ -90,6 +153,58 @@ public final void search() {\n         assertEquals(1, users.size());\n     }\n \n+    @Test\n+    public final void searchWithNotCondition() {\n+        final AttributeCond usernameLeafCond =\n+                new AttributeCond(AttributeCond.Type.EQ);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"fabio.martelli\");\n+\n+        final NodeCond cond = NodeCond.getNotLeafCond(usernameLeafCond);\n+\n+        assertTrue(cond.checkValidity());\n+\n+        final List<SyncopeUser> users = syncopeUserDAO.search(cond);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+\n+        assertEquals(Long.valueOf(1L), users.get(0).getId());\n+    }\n+\n+    @Test\n+    public final void searchByPageAndSize() {\n+        AttributeCond usernameLeafCond =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"%o%\");\n+\n+        MembershipCond membershipCond = new MembershipCond();\n+        membershipCond.setRoleId(1L);\n+\n+        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n+        loginDateCond.setSchema(\"loginDate\");\n+        loginDateCond.setExpression(\"2009-05-26\");\n+\n+        NodeCond subCond = NodeCond.getAndCond(\n+                NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(membershipCond));\n+\n+        assertTrue(subCond.checkValidity());\n+\n+        NodeCond cond = NodeCond.getAndCond(subCond,\n+                NodeCond.getLeafCond(loginDateCond));\n+\n+        assertTrue(cond.checkValidity());\n+\n+        List<SyncopeUser> users = syncopeUserDAO.search(cond, 1, 2);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+\n+        users = syncopeUserDAO.search(cond, 2, 2);\n+        assertNotNull(users);\n+        assertTrue(users.isEmpty());\n+    }\n+\n     @Test\n     public final void delete() {\n         SyncopeUser user = syncopeUserDAO.find(3L);"},{"sha":"971da5f0992242edcb4c945049ca72c4c1838c8a","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/403aad4914b9ca10cc0cc610abcc3e73e4e846ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=403aad4914b9ca10cc0cc610abcc3e73e4e846ad","patch":"@@ -252,6 +252,39 @@ public final void list() {\n         }\n     }\n \n+    @Test\n+    public final void paginatedList() {\n+        List<UserTO> users = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n+                UserTO[].class, 1, 2));\n+\n+        assertNotNull(users);\n+        assertFalse(users.isEmpty());\n+        assertEquals(2, users.size());\n+\n+        for (UserTO user : users) {\n+            assertNotNull(user);\n+        }\n+\n+        users = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n+                UserTO[].class, 2, 2));\n+\n+        assertNotNull(users);\n+        assertFalse(users.isEmpty());\n+        assertEquals(2, users.size());\n+\n+        users = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n+                UserTO[].class, 100, 2));\n+\n+        assertNotNull(users);\n+        assertTrue(users.isEmpty());\n+    }\n+\n     @Test\n     public final void read() {\n         UserTO userTO = restTemplate.getForObject(\n@@ -331,6 +364,55 @@ public final void search() {\n         assertTrue(userIds.contains(3L));\n     }\n \n+    @Test\n+    public final void paginatedSearch() {\n+        // LIKE\n+        AttributeCond usernameLeafCond1 =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        usernameLeafCond1.setSchema(\"username\");\n+        usernameLeafCond1.setExpression(\"%o%\");\n+\n+        AttributeCond usernameLeafCond2 =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        usernameLeafCond2.setSchema(\"username\");\n+        usernameLeafCond2.setExpression(\"%i%\");\n+\n+        NodeCond searchCondition = NodeCond.getAndCond(\n+                NodeCond.getLeafCond(usernameLeafCond1),\n+                NodeCond.getLeafCond(usernameLeafCond2));\n+\n+        assertTrue(searchCondition.checkValidity());\n+\n+        List<UserTO> matchedUsers = Arrays.asList(\n+                restTemplate.postForObject(\n+                BASE_URL + \"user/paginatedSearch/{page}/{size}\",\n+                searchCondition, UserTO[].class, 1, 2));\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.isEmpty());\n+        for (UserTO user : matchedUsers) {\n+            assertNotNull(user);\n+        }\n+\n+        // ISNULL\n+        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNULL);\n+        isNullCond.setSchema(\"loginDate\");\n+        searchCondition = NodeCond.getLeafCond(isNullCond);\n+\n+        matchedUsers = Arrays.asList(\n+                restTemplate.postForObject(\n+                BASE_URL + \"user/paginatedSearch/{page}/{size}\",\n+                searchCondition, UserTO[].class, 1, 2));\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.isEmpty());\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n+        for (UserTO user : matchedUsers) {\n+            userIds.add(user.getId());\n+        }\n+        assertEquals(2, userIds.size());\n+        assertTrue(userIds.contains(2L));\n+        assertTrue(userIds.contains(3L));\n+    }\n+\n     @Test\n     public final void update() {\n         UserTO userTO = getSampleTO(\"g.h@t.com\");"}]}