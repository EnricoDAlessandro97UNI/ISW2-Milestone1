{"sha":"76a4861d322120ac8e6a9ba21416c858243c0d55","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc2YTQ4NjFkMzIyMTIwYWM4ZTZhOWJhMjE0MTZjODU4MjQzYzBkNTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-07-25T14:26:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-07-25T14:26:38Z"},"message":"[SYNCOPE-285] Alignign TaskService and PolicyService in terms of 'type' path parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1506985 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"17a68565ee679c69dd8ee5abbc1f54e8de8509ca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/17a68565ee679c69dd8ee5abbc1f54e8de8509ca"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/76a4861d322120ac8e6a9ba21416c858243c0d55","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/76a4861d322120ac8e6a9ba21416c858243c0d55","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/76a4861d322120ac8e6a9ba21416c858243c0d55","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/76a4861d322120ac8e6a9ba21416c858243c0d55/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5ff02d7cbfbe4674028aede2822acea712e28c53","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ff02d7cbfbe4674028aede2822acea712e28c53","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5ff02d7cbfbe4674028aede2822acea712e28c53"}],"stats":{"total":260,"additions":109,"deletions":151},"files":[{"sha":"a511f8c3b1cf01b048a728b20e84044966cda1af","filename":"common/src/main/java/org/apache/syncope/common/services/PolicyService.java","status":"modified","additions":12,"deletions":21,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -31,76 +31,67 @@\n import org.apache.syncope.common.to.AbstractPolicyTO;\r\n import org.apache.syncope.common.types.PolicyType;\r\n \r\n-@Path(\"policies/{type}\")\r\n+@Path(\"policies\")\r\n public interface PolicyService {\r\n \r\n     /**\r\n-     * @param type Creates a new policy with given type\r\n      * @param policyTO Policy to be created (needs to match type)\r\n      * @param <T> response type (extending PolicyTO)\r\n-     * @see PolicyTO\r\n      * @return Response containing URI location for created resource\r\n      */\r\n     @POST\r\n-    <T extends AbstractPolicyTO> Response create(@PathParam(\"type\") PolicyType type, T policyTO);\r\n+    <T extends AbstractPolicyTO> Response create(T policyTO);\r\n \r\n     /**\r\n-     * @param type Deletes policy with given type\r\n      * @param policyId Deletes policy with given id\r\n      * @param <T> response type (extending PolicyTO)\r\n-     * @see PolicyTO\r\n      */\r\n     @DELETE\r\n     @Path(\"{policyId}\")\r\n-    <T extends AbstractPolicyTO> void delete(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n+    <T extends AbstractPolicyTO> void delete(@PathParam(\"policyId\") Long policyId);\r\n \r\n     /**\r\n      * @param type Type selector for requested policies\r\n      * @param <T> response type (extending PolicyTO)\r\n-     * @see PolicyTO\r\n-     * @return List of policies with matching type.\r\n+     * @return List of policies with matching type\r\n      */\r\n     @GET\r\n+    @Path(\"{type}/list\")\r\n+    // TODO '/list' path will be removed once CXF/JAX-B bug is solved\r\n     <T extends AbstractPolicyTO> List<T> list(@PathParam(\"type\") PolicyType type);\r\n \r\n     /**\r\n-     * @param type Request for policy with given type\r\n      * @param policyId ID of requested policy\r\n      * @param <T> response type (extending PolicyTO)\r\n-     * @see PolicyTO\r\n-     * @return Returns policy with matching id and type\r\n+     * @return policy with matching id\r\n      */\r\n     @GET\r\n     @Path(\"{policyId}\")\r\n-    <T extends AbstractPolicyTO> T read(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n+    <T extends AbstractPolicyTO> T read(@PathParam(\"policyId\") Long policyId);\r\n \r\n     /**\r\n      * @param type PolicyType to read global policy from\r\n      * @param <T> response type (extending PolicyTO)\r\n-     * @see PolicyTO\r\n      * @return Global Policy for matching type\r\n      */\r\n     @GET\r\n-    @Path(\"0\")\r\n+    @Path(\"{type}/0\")\r\n     <T extends AbstractPolicyTO> T readGlobal(@PathParam(\"type\") PolicyType type);\r\n \r\n     /**\r\n-     * @param type PolicyType to be updated.\r\n      * @param policyId ID of policy to be updated\r\n      * @param policyTO Policy to replace existing policy\r\n      * @param <T> response type (extending PolicyTO)\r\n-     * @see PolicyTO\r\n      */\r\n     @PUT\r\n     @Path(\"{policyId}\")\r\n-    <T extends AbstractPolicyTO> void update(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId,\r\n-            T policyTO);\r\n+    <T extends AbstractPolicyTO> void update(@PathParam(\"policyId\") Long policyId, T policyTO);\r\n \r\n     /**\r\n      * @param type PolicyType (just SYNC is supported).\r\n-     * @return Returns correlation rules java classes.\r\n+     * @return correlation rules java classes\r\n      */\r\n     @GET\r\n     @Path(\"syncCorrelationRuleClasses\")\r\n-    Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses(@PathParam(\"type\") PolicyType type);\r\n+    Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses();\r\n }\r"},{"sha":"0e4349ede2ced54c4e6c59ce6499791a8298a3f6","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.common.to.SyncActionClassTO;\r\n import org.apache.syncope.common.to.TaskExecTO;\r\n import org.apache.syncope.common.to.AbstractTaskTO;\r\n+import org.apache.syncope.common.to.SchedTaskTO;\r\n import org.apache.syncope.common.types.TaskType;\r\n \r\n @Path(\"tasks\")\r\n@@ -53,10 +54,11 @@ public interface TaskService {\n \r\n     /**\r\n      * @param taskTO Task to be created\r\n+     * @param <T> type of taskTO\r\n      * @return Response containing URI location for created resource\r\n      */\r\n     @POST\r\n-    Response create(AbstractTaskTO taskTO);\r\n+    <T extends SchedTaskTO> Response create(T taskTO);\r\n \r\n     /**\r\n      * @param taskId Id of task to be deleted\r\n@@ -97,6 +99,7 @@ public interface TaskService {\n \r\n     /**\r\n      * @param taskType Type of tasks to be listed\r\n+     * @param <T> type of taskTO\r\n      * @return Returns list of tasks with matching type\r\n      */\r\n     @GET\r\n@@ -108,22 +111,22 @@ public interface TaskService {\n      * @param taskType Type of tasks to be listed\r\n      * @param page Page number of tasks in relation to page size\r\n      * @param size Number of tasks listed per page\r\n+     * @param <T> type of taskTO\r\n      * @return Returns paginated list of task with matching type\r\n      */\r\n     @GET\r\n     @Path(\"{type}\")\r\n-    <T extends AbstractTaskTO> List<T> list(@PathParam(\"type\") TaskType taskType, @QueryParam(\"page\") int page,\r\n-            @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n+    <T extends AbstractTaskTO> List<T> list(@PathParam(\"type\") TaskType taskType,\r\n+            @QueryParam(\"page\") int page, @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n     /**\r\n-     * @param taskType Type of task to be read\r\n      * @param taskId Id of task to be read\r\n+     * @param <T> type of taskTO\r\n      * @return Returns task with matching id\r\n      */\r\n     @GET\r\n-    @Path(\"{type}/{taskId}\")\r\n-    // TODO TaskType can be removed once CXF migration is done\r\n-    <T extends AbstractTaskTO> T read(@PathParam(\"type\") TaskType taskType, @PathParam(\"taskId\") Long taskId);\r\n+    @Path(\"{taskId}\")\r\n+    <T extends AbstractTaskTO> T read(@PathParam(\"taskId\") Long taskId);\r\n \r\n     /**\r\n      * @param executionId Id if task execution to be read\r\n@@ -148,7 +151,7 @@ <T extends AbstractTaskTO> List<T> list(@PathParam(\"type\") TaskType taskType, @Q\n     @PUT\r\n     @Path(\"{taskId}\")\r\n     void update(@PathParam(\"taskId\") Long taskId, AbstractTaskTO taskTO);\r\n-    \r\n+\r\n     @POST\r\n     @Path(\"bulk\")\r\n     BulkActionRes bulkAction(BulkAction bulkAction);\r"},{"sha":"c56cc54290942a7f1bbd9d912ec43355c6e38a24","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":4,"deletions":21,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -21,10 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.services.PolicyService;\n-import org.apache.syncope.common.to.AccountPolicyTO;\n-import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.AbstractPolicyTO;\n-import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.springframework.stereotype.Component;\n@@ -72,41 +69,27 @@ public <T extends AbstractPolicyTO> List<T> getPolicies(final PolicyType type, f\n     }\n \n     public <T extends AbstractPolicyTO> void createPolicy(final T policy) {\n-        getService(PolicyService.class).create(policy.getType(), policy);\n+        getService(PolicyService.class).create(policy);\n     }\n \n     public <T extends AbstractPolicyTO> void updatePolicy(final T policy) {\n-        getService(PolicyService.class).update(policy.getType(), policy.getId(), policy);\n+        getService(PolicyService.class).update(policy.getId(), policy);\n     }\n \n     public void delete(final Long id, final Class<? extends AbstractPolicyTO> policyClass) {\n-        getService(PolicyService.class).delete(getPolicyType(policyClass), id);\n+        getService(PolicyService.class).delete(id);\n     }\n \n     public List<String> getCorrelationRuleClasses() {\n         List<String> rules = null;\n \n         try {\n             rules = CollectionWrapper.unwrapSyncCorrelationRuleClasses(\n-                    getService(PolicyService.class).getSyncCorrelationRuleClasses(PolicyType.SYNC));\n+                    getService(PolicyService.class).getSyncCorrelationRuleClasses());\n         } catch (Exception e) {\n             LOG.error(\"While getting all correlation rule classes\", e);\n         }\n \n         return rules;\n     }\n-\n-    private PolicyType getPolicyType(final Class<? extends AbstractPolicyTO> clazz) {\n-        PolicyType policyType;\n-        if (AccountPolicyTO.class.equals(clazz)) {\n-            policyType = PolicyType.ACCOUNT;\n-        } else if (PasswordPolicyTO.class.equals(clazz)) {\n-            policyType = PolicyType.PASSWORD;\n-        } else if (SyncPolicyTO.class.equals(clazz)) {\n-            policyType = PolicyType.SYNC;\n-        } else {\n-            throw new IllegalArgumentException(\"Policy Type not supported\");\n-        }\n-        return policyType;\n-    }\n }"},{"sha":"eeb3d659e22b7e2e661edce8ec5781bf5df41c2b","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -106,15 +106,15 @@ private TaskType getTaskType(final Class<?> reference) {\n     }\n \n     public PropagationTaskTO readPropagationTask(final Long taskId) {\n-        return getService(TaskService.class).read(TaskType.PROPAGATION, taskId);\n+        return getService(TaskService.class).read(taskId);\n     }\n \n     public NotificationTaskTO readNotificationTask(final Long taskId) {\n-        return getService(TaskService.class).read(TaskType.NOTIFICATION, taskId);\n+        return getService(TaskService.class).read(taskId);\n     }\n \n     public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final Long taskId) {\n-        return getService(TaskService.class).read(getTaskType(reference), taskId);\n+        return getService(TaskService.class).read(taskId);\n     }\n \n     /**"},{"sha":"b22887de9be382c0bbb98e3bb1d321f202c1ee3d","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -191,13 +191,13 @@ public <T extends AbstractPolicyTO> T read(final Long id) {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_DELETE')\")\n-    public AbstractPolicyTO delete(final Long id) {\n+    public <T extends AbstractPolicyTO> T delete(final Long id) {\n         Policy policy = policyDAO.find(id);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n         }\n \n-        AbstractPolicyTO policyToDelete = binder.getPolicyTO(policy);\n+        T policyToDelete = binder.getPolicyTO(policy);\n         policyDAO.delete(policy);\n \n         auditManager.audit(Category.policy, PolicySubCategory.delete, Result.success,"},{"sha":"8a7f78da892aa8a4765e8b864114c564e7ac20b6","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -93,7 +93,7 @@ public class TaskController extends AbstractController {\n     private ImplementationClassNamesLoader classNamesLoader;\n \n     @PreAuthorize(\"hasRole('TASK_CREATE')\")\n-    public AbstractTaskTO createSchedTask(final SchedTaskTO taskTO) {\n+    public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n         LOG.debug(\"Creating task \" + taskTO);\n \n         TaskUtil taskUtil = TaskUtil.getInstance(taskTO);\n@@ -121,12 +121,12 @@ public AbstractTaskTO createSchedTask(final SchedTaskTO taskTO) {\n     }\n \n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n-    public AbstractTaskTO updateSync(final SyncTaskTO taskTO) {\n+    public SyncTaskTO updateSync(final SyncTaskTO taskTO) {\n         return updateSched(taskTO);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n-    public AbstractTaskTO updateSched(final SchedTaskTO taskTO) {\n+    public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n         LOG.debug(\"Task update called with parameter {}\", taskTO);\n \n         SchedTask task = taskDAO.find(taskTO.getId());\n@@ -219,7 +219,7 @@ public Set<String> getSyncActionsClasses() {\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n-    public AbstractTaskTO read(final Long taskId) {\n+    public <T extends AbstractTaskTO> T read(final Long taskId) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n@@ -365,14 +365,14 @@ public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n-    public AbstractTaskTO delete(final Long taskId) {\n+    public <T extends AbstractTaskTO> T delete(final Long taskId) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n         TaskUtil taskUtil = TaskUtil.getInstance(task);\n \n-        AbstractTaskTO taskToDelete = binder.getTaskTO(task, taskUtil);\n+        T taskToDelete = binder.getTaskTO(task, taskUtil);\n \n         if (TaskType.SCHEDULED == taskUtil.getType() || TaskType.SYNCHRONIZATION == taskUtil.getType()) {\n             jobInstanceLoader.unregisterJob(task);"},{"sha":"b00553b889586854bc21532ebb41f7ea0622ff02","filename":"core/src/main/java/org/apache/syncope/core/rest/data/PolicyDataBinder.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -62,7 +62,7 @@ private boolean isGlobalPolicy(final PolicyType policyType) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n-        final AbstractPolicyTO policyTO;\n+        final T policyTO;\n \n         final boolean isGlobal = isGlobalPolicy(policy.getType());\n \n@@ -73,7 +73,7 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n                     throw new ClassCastException(\"Expected \" + PasswordPolicySpec.class.getName()\n                             + \", found \" + policy.getSpecification().getClass().getName());\n                 }\n-                policyTO = new PasswordPolicyTO(isGlobal);\n+                policyTO = (T) new PasswordPolicyTO(isGlobal);\n                 ((PasswordPolicyTO) policyTO).setSpecification((PasswordPolicySpec) policy.getSpecification());\n                 break;\n \n@@ -83,7 +83,7 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n                     throw new ClassCastException(\"Expected \" + AccountPolicySpec.class.getName()\n                             + \", found \" + policy.getSpecification().getClass().getName());\n                 }\n-                policyTO = new AccountPolicyTO(isGlobal);\n+                policyTO = (T) new AccountPolicyTO(isGlobal);\n                 ((AccountPolicyTO) policyTO).setSpecification((AccountPolicySpec) policy.getSpecification());\n                 break;\n \n@@ -95,14 +95,14 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n                             + \", found \" + policy.getSpecification().getClass().getName());\n \n                 }\n-                policyTO = new SyncPolicyTO(isGlobal);\n+                policyTO = (T) new SyncPolicyTO(isGlobal);\n                 ((SyncPolicyTO) policyTO).setSpecification((SyncPolicySpec) policy.getSpecification());\n         }\n \n         policyTO.setId(policy.getId());\n         policyTO.setDescription(policy.getDescription());\n \n-        return (T) policyTO;\n+        return policyTO;\n     }\n \n     @SuppressWarnings(\"unchecked\")"},{"sha":"6b2f4177217e2dab01d78c8e52e71f37035a3322","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -226,8 +226,8 @@ private void setExecTime(final SchedTaskTO taskTO, final Task task) {\n         }\n     }\n \n-    public AbstractTaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n-        AbstractTaskTO taskTO = taskUtil.newTaskTO();\n+    public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtil taskUtil) {\n+        T taskTO = taskUtil.newTaskTO();\n         BeanUtils.copyProperties(task, taskTO, IGNORE_TASK_PROPERTIES);\n \n         TaskExec latestExec = taskExecDAO.findLatestStarted(task);"},{"sha":"ea692f74858f6926c51e384cde583c4e2dac8f41","filename":"core/src/main/java/org/apache/syncope/core/services/ConnectorServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -44,7 +44,7 @@ public class ConnectorServiceImpl extends AbstractServiceImpl implements Connect\n     @Override\r\n     public Response create(final ConnInstanceTO connInstanceTO) {\r\n         ConnInstanceTO connInstance = controller.create(connInstanceTO);\r\n-        URI location = uriInfo.getAbsolutePathBuilder().path(connInstance.getId() + \"\").build();\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(connInstance.getId())).build();\r\n         return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, connInstance.getId()).build();\r\n     }\r\n \r"},{"sha":"3343fe96e37ac1677f42ef8e63c50cd1225686ac","filename":"core/src/main/java/org/apache/syncope/core/services/NotificationServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -39,7 +39,7 @@ public class NotificationServiceImpl extends AbstractServiceImpl implements Noti\n     @Override\n     public Response create(final NotificationTO notificationTO) {\n         NotificationTO createdNotificationTO = controller.create(notificationTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdNotificationTO.getId()).build();\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(createdNotificationTO.getId())).build();\n         return Response.created(location)\n                 .header(SyncopeConstants.REST_HEADER_ID, createdNotificationTO.getId())\n                 .build();"},{"sha":"481aada5f819c6f2ce301e98ec06cf8eccd502dd","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":8,"deletions":22,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -43,14 +43,14 @@ public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyServ\n     private PolicyController policyController;\r\n \r\n     @Override\r\n-    public <T extends AbstractPolicyTO> Response create(final PolicyType type, final T policyTO) {\r\n+    public <T extends AbstractPolicyTO> Response create(final T policyTO) {\r\n         AbstractPolicyTO policy = policyController.create(policyTO);\r\n-        URI location = uriInfo.getAbsolutePathBuilder().path(policy.getId() + \"\").build();\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(policy.getId())).build();\r\n         return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, policy.getId()).build();\r\n     }\r\n \r\n     @Override\r\n-    public void delete(final PolicyType type, final Long policyId) {\r\n+    public void delete(final Long policyId) {\r\n         policyController.delete(policyId);\r\n     }\r\n \r\n@@ -60,7 +60,7 @@ public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractPolicyTO> T read(final PolicyType type, final Long policyId) {\r\n+    public <T extends AbstractPolicyTO> T read(final Long policyId) {\r\n         return policyController.read(policyId);\r\n     }\r\n \r\n@@ -93,8 +93,8 @@ public <T extends AbstractPolicyTO> T readGlobal(final PolicyType type) {\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractPolicyTO> void update(final PolicyType type, final Long policyId, final T policyTO) {\r\n-        switch (type) {\r\n+    public <T extends AbstractPolicyTO> void update(final Long policyId, final T policyTO) {\r\n+        switch (policyTO.getType()) {\r\n             case ACCOUNT:\r\n             case GLOBAL_ACCOUNT:\r\n                 policyController.update((AccountPolicyTO) policyTO);\r\n@@ -116,21 +116,7 @@ public <T extends AbstractPolicyTO> void update(final PolicyType type, final Lon\n     }\r\n \r\n     @Override\r\n-    public Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses(final PolicyType type) {\r\n-        Set<CorrelationRuleClassTO> result = null;\r\n-\r\n-        switch (type) {\r\n-            case SYNC:\r\n-            case GLOBAL_SYNC:\r\n-\r\n-                result = CollectionWrapper.wrapSyncCorrelationRuleClasses(\r\n-                        policyController.getSyncCorrelationRuleClasses());\r\n-                break;\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n-\r\n-        return result;\r\n+    public Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses() {\r\n+        return CollectionWrapper.wrapSyncCorrelationRuleClasses(policyController.getSyncCorrelationRuleClasses());\r\n     }\r\n }\r"},{"sha":"72c8bb54b26a037e5d56cc6aef04cbeeacff2156","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -48,7 +48,7 @@ public class ReportServiceImpl extends AbstractServiceImpl implements ReportServ\n     @Override\n     public Response create(final ReportTO reportTO) {\n         ReportTO createdReportTO = controller.create(reportTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdReportTO.getId()).build();\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(createdReportTO.getId())).build();\n         return Response.created(location)\n                 .header(SyncopeConstants.REST_HEADER_ID, createdReportTO.getId())\n                 .build();"},{"sha":"6b820b3cc984d579e262a9f56e8c22881d1b2d34","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -53,7 +53,7 @@ public int count() {\n     @Override\r\n     public Response create(final RoleTO roleTO) {\r\n         RoleTO created = controller.create(roleTO);\r\n-        URI location = uriInfo.getAbsolutePathBuilder().path(created.getId() + \"\").build();\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getId())).build();\r\n         return Response.created(location)\r\n                 .header(SyncopeConstants.REST_HEADER_ID, created.getId())\r\n                 .entity(created)\r"},{"sha":"63b3c428f12149b9d034be18c877cbe4d542e748","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.common.types.TaskType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.apache.syncope.core.rest.controller.TaskController;\r\n-import org.apache.syncope.core.util.TaskUtil;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n \r\n@@ -54,16 +53,15 @@ public int count(final TaskType taskType) {\n     }\r\n \r\n     @Override\r\n-    public Response create(final AbstractTaskTO taskTO) {\r\n-        AbstractTaskTO createdTask;\r\n+    public <T extends SchedTaskTO> Response create(final T taskTO) {\r\n+        T createdTask;\r\n         if (taskTO instanceof SyncTaskTO || taskTO instanceof SchedTaskTO) {\r\n-            createdTask = controller.createSchedTask((SchedTaskTO) taskTO);\r\n+            createdTask = controller.createSchedTask(taskTO);\r\n         } else {\r\n             throw new BadRequestException();\r\n         }\r\n \r\n-        TaskType taskType = TaskUtil.getInstance(taskTO.getClass()).getType();\r\n-        URI location = uriInfo.getAbsolutePathBuilder().path(taskType.toString() + \"/\" + createdTask.getId()).build();\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(createdTask.getId())).build();\r\n         return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, createdTask.getId()).build();\r\n     }\r\n \r\n@@ -102,10 +100,9 @@ public <T extends AbstractTaskTO> List<T> list(final TaskType taskType, final in\n         return controller.list(taskType, page, size);\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n-    public <T extends AbstractTaskTO> T read(final TaskType taskType, final Long taskId) {\r\n-        return (T) controller.read(taskId);\r\n+    public <T extends AbstractTaskTO> T read(final Long taskId) {\r\n+        return controller.read(taskId);\r\n     }\r\n \r\n     @Override\r"},{"sha":"9ba003a591aa4f10737cdc7a56f0aa95fbda5cc2","filename":"core/src/main/java/org/apache/syncope/core/services/UserRequestServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -66,7 +66,7 @@ public Response create(final UserRequestTO userRequestTO) {\n                 break;\n         }\n \n-        URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + outUserRequestTO.getId()).build();\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(outUserRequestTO.getId())).build();\n         return Response.created(location)\n                 .header(SyncopeConstants.REST_HEADER_ID, outUserRequestTO.getId())\n                 .build();"},{"sha":"24f0abbd5ea026dcbd34db287136b7e9ca27c8b5","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -69,7 +69,7 @@ public int count() {\n     @Override\n     public Response create(final UserTO userTO) {\n         UserTO created = controller.create(userTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(created.getId() + \"\").build();\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getId())).build();\n         return Response.created(location).\n                 header(SyncopeConstants.REST_HEADER_ID, created.getId()).\n                 entity(created)"},{"sha":"483d3b4dcd833eb15d15e46d452a8588f9712780","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -55,7 +55,6 @@\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.SchemaType;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n@@ -233,8 +232,8 @@ protected RoleTO createRole(final RoleService roleService, final RoleTO newRoleT\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T extends AbstractPolicyTO> T createPolicy(final PolicyType policyType, final T policy) {\n-        Response response = policyService.create(policyType, policy);\n+    protected <T extends AbstractPolicyTO> T createPolicy(final T policy) {\n+        Response response = policyService.create(policy);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n             Exception ex = clientExceptionMapper.fromResponse(response);\n             if (ex != null) {"},{"sha":"27476563b77d0e081e6af3489437a8f1a0781ac0","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -50,7 +50,7 @@ public void listByType() {\n \n     @Test\n     public void read() {\n-        SyncPolicyTO policyTO = policyService.read(PolicyType.SYNC, 1L);\n+        SyncPolicyTO policyTO = policyService.read(1L);\n \n         assertNotNull(policyTO);\n     }\n@@ -79,7 +79,7 @@ public void createWithException() {\n         policy.setDescription(\"global password policy\");\n \n         try {\n-            createPolicy(PolicyType.PASSWORD, policy);\n+            createPolicy(policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n             assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidPasswordPolicy));\n@@ -92,7 +92,7 @@ public void createMissingDescription() {\n         policy.setSpecification(new SyncPolicySpec());\n \n         try {\n-            createPolicy(PolicyType.SYNC, policy);\n+            createPolicy(policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n             assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidSyncPolicy));\n@@ -103,7 +103,7 @@ public void createMissingDescription() {\n     public void create() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n \n-        SyncPolicyTO policyTO = createPolicy(PolicyType.SYNC, policy);\n+        SyncPolicyTO policyTO = createPolicy(policy);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.SYNC, policyTO.getType());\n@@ -113,17 +113,17 @@ public void create() {\n     @Test\n     public void update() {\n         // get global password\n-        PasswordPolicyTO globalPolicy = policyService.read(PolicyType.PASSWORD, 2L);\n+        PasswordPolicyTO globalPolicy = policyService.read(2L);\n \n         PasswordPolicyTO policy = new PasswordPolicyTO();\n         policy.setDescription(\"A simple password policy\");\n         policy.setSpecification(globalPolicy.getSpecification());\n \n         // create a new password policy using global password as a template\n-        policy = createPolicy(PolicyType.PASSWORD, policy);\n+        policy = createPolicy(policy);\n \n         // read new password policy\n-        policy = policyService.read(PolicyType.PASSWORD, policy.getId());\n+        policy = policyService.read(policy.getId());\n \n         assertNotNull(\"find to update did not work\", policy);\n \n@@ -132,8 +132,8 @@ public void update() {\n         policy.setSpecification(policySpec);\n \n         // update new password policy\n-        policyService.update(PolicyType.PASSWORD, policy.getId(), policy);\n-        policy = policyService.read(PolicyType.PASSWORD, policy.getId());\n+        policyService.update(policy.getId(), policy);\n+        policy = policyService.read(policy.getId());\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n@@ -145,14 +145,14 @@ public void update() {\n     public void delete() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n \n-        SyncPolicyTO policyTO = createPolicy(PolicyType.SYNC, policy);\n+        SyncPolicyTO policyTO = createPolicy(policy);\n         assertNotNull(policyTO);\n \n-        policyService.delete(PolicyType.SYNC, policyTO.getId());\n+        policyService.delete(policyTO.getId());\n \n         Throwable t = null;\n         try {\n-            policyService.read(PolicyType.SYNC, policyTO.getId());\n+            policyService.read(policyTO.getId());\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n         }\n@@ -162,7 +162,7 @@ public void delete() {\n \n     @Test\n     public void getCorrelationRules() {\n-        assertEquals(1, policyService.getSyncCorrelationRuleClasses(PolicyType.SYNC).size());\n+        assertEquals(1, policyService.getSyncCorrelationRuleClasses().size());\n     }\n \n     private SyncPolicyTO buildSyncPolicyTO() {"},{"sha":"28a0c24f363b51fa19ab2051fff14db187fb3eef","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":23,"deletions":24,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -53,7 +53,6 @@\n import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.IntMappingType;\n-import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.types.TraceLevel;\n@@ -111,7 +110,7 @@ public void create() {\n         SyncTaskTO actual = getObject(response, SyncTaskTO.class, taskService);\n         assertNotNull(actual);\n \n-        task = taskService.read(TaskType.SYNCHRONIZATION, actual.getId());\n+        task = taskService.read(actual.getId());\n         assertNotNull(task);\n         assertEquals(actual.getId(), task.getId());\n         assertEquals(actual.getJobClassName(), task.getJobClassName());\n@@ -121,15 +120,15 @@ public void create() {\n \n     @Test\n     public void update() {\n-        SchedTaskTO task = taskService.read(TaskType.SCHEDULED, SCHED_TASK_ID);\n+        SchedTaskTO task = taskService.read(SCHED_TASK_ID);\n         assertNotNull(task);\n \n         SchedTaskTO taskMod = new SchedTaskTO();\n         taskMod.setId(5);\n         taskMod.setCronExpression(null);\n \n         taskService.update(taskMod.getId(), taskMod);\n-        SchedTaskTO actual = taskService.read(TaskType.SCHEDULED, taskMod.getId());\n+        SchedTaskTO actual = taskService.read(taskMod.getId());\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n         assertNull(actual.getCronExpression());\n@@ -182,7 +181,7 @@ public void paginatedList() {\n \n     @Test\n     public void read() {\n-        PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, 3L);\n+        PropagationTaskTO taskTO = taskService.read(3L);\n \n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n@@ -251,7 +250,7 @@ public void sync() {\n             assertNotNull(usersPre);\n \n             // Update sync task\n-            SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, SYNC_TASK_ID);\n+            SyncTaskTO task = taskService.read(SYNC_TASK_ID);\n             assertNotNull(task);\n \n             // add custom SyncJob actions\n@@ -271,7 +270,7 @@ public void sync() {\n             task.setUserTemplate(template);\n \n             taskService.update(task.getId(), task);\n-            SyncTaskTO actual = taskService.read(TaskType.SYNCHRONIZATION, task.getId());\n+            SyncTaskTO actual = taskService.read(task.getId());\n             assertNotNull(actual);\n             assertEquals(task.getId(), actual.getId());\n             assertEquals(TestSyncActions.class.getName(), actual.getActionsClassName());\n@@ -329,7 +328,7 @@ public void sync() {\n     @Test\n     public void reconcileFromDB() {\n         // update sync task\n-        SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 7L);\n+        SyncTaskTO task = taskService.read(7L);\n         assertNotNull(task);\n \n         // add user template\n@@ -342,7 +341,7 @@ public void reconcileFromDB() {\n         task.setUserTemplate(template);\n \n         taskService.update(task.getId(), task);\n-        SyncTaskTO actual = taskService.read(TaskType.SYNCHRONIZATION, task.getId());\n+        SyncTaskTO actual = taskService.read(task.getId());\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n         assertEquals(template, actual.getUserTemplate());\n@@ -375,7 +374,7 @@ public void reconcileFromDB() {\n     public void reconcileFromLDAP()\n             throws InvalidSearchConditionException {\n         // Update sync task\n-        SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 11L);\n+        SyncTaskTO task = taskService.read(11L);\n         assertNotNull(task);\n \n         //  add user template\n@@ -386,7 +385,7 @@ public void reconcileFromLDAP()\n         task.setRoleTemplate(template);\n \n         taskService.update(task.getId(), task);\n-        SyncTaskTO actual = taskService.read(TaskType.SYNCHRONIZATION, task.getId());\n+        SyncTaskTO actual = taskService.read(task.getId());\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n         assertEquals(template, actual.getRoleTemplate());\n@@ -470,7 +469,7 @@ public void issueSYNCOPE81() {\n                 } catch (InterruptedException e) {\n                 }\n \n-                taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getId());\n+                taskTO = taskService.read(taskTO.getId());\n \n                 assertNotNull(taskTO);\n                 assertNotNull(taskTO.getExecutions());\n@@ -500,7 +499,7 @@ public void issueSYNCOPE86() {\n             assertNotNull(execution);\n \n             // 4. verify\n-            taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getId());\n+            taskTO = taskService.read(taskTO.getId());\n             assertNotNull(taskTO);\n             assertEquals(1, taskTO.getExecutions().size());\n         } finally {\n@@ -608,13 +607,13 @@ public void issueSYNCOPE68() {\n             //-----------------------------\n \n             // Update sync task\n-            SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 9L);\n+            SyncTaskTO task = taskService.read(9L);\n             assertNotNull(task);\n \n             task.setUserTemplate(template);\n \n             taskService.update(task.getId(), task);\n-            SyncTaskTO actual = taskService.read(TaskType.SYNCHRONIZATION, task.getId());\n+            SyncTaskTO actual = taskService.read(task.getId());\n             assertNotNull(actual);\n             assertEquals(task.getId(), actual.getId());\n             assertFalse(actual.getUserTemplate().getResources().isEmpty());\n@@ -649,7 +648,7 @@ public void issueSYNCOPE144() {\n         assertEquals(\"issueSYNCOPE144\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n \n-        task = taskService.read(TaskType.SCHEDULED, actual.getId());\n+        task = taskService.read(actual.getId());\n         assertNotNull(task);\n         assertEquals(\"issueSYNCOPE144\", task.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", task.getDescription());\n@@ -693,7 +692,7 @@ public void issueSYNCOPE230() {\n     private TaskExecTO execSyncTask(final Long taskId, final int maxWaitSeconds,\n             final boolean dryRun) {\n \n-        AbstractTaskTO taskTO = taskService.read(TaskType.SYNCHRONIZATION, taskId);\n+        AbstractTaskTO taskTO = taskService.read(taskId);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n \n@@ -711,7 +710,7 @@ private TaskExecTO execSyncTask(final Long taskId, final int maxWaitSeconds,\n             } catch (InterruptedException e) {\n             }\n \n-            taskTO = taskService.read(TaskType.SYNCHRONIZATION, taskTO.getId());\n+            taskTO = taskService.read(taskTO.getId());\n \n             assertNotNull(taskTO);\n             assertNotNull(taskTO.getExecutions());\n@@ -739,7 +738,7 @@ public void issueSYNCOPE272() {\n             assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n \n             // update sync task\n-            SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, SYNC_TASK_ID);\n+            SyncTaskTO task = taskService.read(SYNC_TASK_ID);\n             assertNotNull(task);\n \n             // add user template\n@@ -758,7 +757,7 @@ public void issueSYNCOPE272() {\n             task.setUserTemplate(template);\n \n             taskService.update(task.getId(), task);\n-            SyncTaskTO actual = taskService.read(TaskType.SYNCHRONIZATION, task.getId());\n+            SyncTaskTO actual = taskService.read(task.getId());\n             assertNotNull(actual);\n             assertEquals(task.getId(), actual.getId());\n \n@@ -782,10 +781,10 @@ public void issueSYNCOPE258() {\n         // -----------------------------\n         // Add a custom correlation rule\n         // -----------------------------\n-        SyncPolicyTO policyTO = policyService.read(PolicyType.SYNC, 9L);\n+        SyncPolicyTO policyTO = policyService.read(9L);\n         policyTO.getSpecification().setUserJavaRule(TestSyncRule.class.getName());\n \n-        policyService.update(PolicyType.SYNC, policyTO.getId(), policyTO);\n+        policyService.update(policyTO.getId(), policyTO);\n         // -----------------------------\n \n         SyncTaskTO task = new SyncTaskTO();\n@@ -822,7 +821,7 @@ public void issueSYNCOPE258() {\n \n         execSyncTask(actual.getId(), 50, false);\n \n-        SyncTaskTO executed = taskService.read(TaskType.SYNCHRONIZATION, actual.getId());\n+        SyncTaskTO executed = taskService.read(actual.getId());\n         assertEquals(1, executed.getExecutions().size());\n \n         // asser for just one match\n@@ -849,7 +848,7 @@ public void issueSYNCOPE307() {\n         assertEquals(\"virtualvalue\", userTO.getVirtualAttributeMap().get(\"virtualdata\").getValues().get(0));\n \n         // Update sync task\n-        SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 12L);\n+        SyncTaskTO task = taskService.read(12L);\n         assertNotNull(task);\n \n         //  add user template"},{"sha":"9a6fca6e785c0358a6c6ba9d966a3abb80116940","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76a4861d322120ac8e6a9ba21416c858243c0d55/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=76a4861d322120ac8e6a9ba21416c858243c0d55","patch":"@@ -173,7 +173,7 @@ public void createUserWithNoPropagation() {\n         assertTrue(newMaxId > maxId);\n \n         // get last task\n-        PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, newMaxId);\n+        PropagationTaskTO taskTO = taskService.read(newMaxId);\n \n         assertNotNull(taskTO);\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -183,15 +183,15 @@ public void createUserWithNoPropagation() {\n     public void issue172() {\n         List<PasswordPolicyTO> policies = policyService.list(PolicyType.GLOBAL_PASSWORD);\n         for (PasswordPolicyTO policyTO : policies) {\n-            policyService.delete(PolicyType.GLOBAL_PASSWORD, policyTO.getId());\n+            policyService.delete(policyTO.getId());\n         }\n \n         try {\n             UserTO userTO = getUniqueSampleTO(\"issue172@syncope.apache.org\");\n             createUser(userTO);\n         } finally {\n             for (PasswordPolicyTO policyTO : policies) {\n-                Response response = policyService.create(PolicyType.GLOBAL_PASSWORD, policyTO);\n+                Response response = policyService.create(policyTO);\n                 AbstractPolicyTO cPolicyTO = getObject(response, PasswordPolicyTO.class, policyService);\n                 assertNotNull(cPolicyTO);\n             }\n@@ -386,7 +386,7 @@ public void create() {\n         assertFalse(tasks.isEmpty());\n \n         long maxId = getMaxTaskId(tasks);\n-        PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, maxId);\n+        PropagationTaskTO taskTO = taskService.read(maxId);\n \n         assertNotNull(taskTO);\n         int maxTaskExecutions = taskTO.getExecutions().size();\n@@ -448,7 +448,7 @@ public void create() {\n         assertEquals(newMaxId, maxId);\n \n         // get last task\n-        taskTO = taskService.read(TaskType.PROPAGATION, newMaxId);\n+        taskTO = taskService.read(newMaxId);\n \n         assertNotNull(taskTO);\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n@@ -995,7 +995,7 @@ public void verifyTaskRegistration() {\n         // all update executions have to be registered\n         assertTrue(newMaxId > maxId);\n \n-        final PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, newMaxId);\n+        final PropagationTaskTO taskTO = taskService.read(newMaxId);\n \n         assertNotNull(taskTO);\n         assertEquals(1, taskTO.getExecutions().size());"}]}