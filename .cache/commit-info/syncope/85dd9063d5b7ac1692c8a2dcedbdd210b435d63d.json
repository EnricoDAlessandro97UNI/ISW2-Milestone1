{"sha":"85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg1ZGQ5MDYzZDViN2FjMTY5MmM4YTJkY2VkYmRkMjEwYjQzNWQ2M2Q=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-09T16:20:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-14T16:21:53Z"},"message":"Unique schema key across the three tables","tree":{"sha":"049cf8903b580584a12f8ea35ed7192573187da7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/049cf8903b580584a12f8ea35ed7192573187da7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"50f5a66778f7f94692e02a9e16243584817356b1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/50f5a66778f7f94692e02a9e16243584817356b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/50f5a66778f7f94692e02a9e16243584817356b1"}],"stats":{"total":2209,"additions":953,"deletions":1256},"files":[{"sha":"a364316e894b8f34761e0f944bd532c8e79d9ba7","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationResultManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -40,7 +40,6 @@ public void printNotification(final NotificationTO notificationTO) {\n         System.out.println(\"    recipient attribute name: \" + notificationTO.getRecipientAttrName());\n         System.out.println(\"    template: \" + notificationTO.getTemplate());\n         System.out.println(\"    abouts: \" + notificationTO.getAbouts());\n-        System.out.println(\"    recipient attribute types: \" + notificationTO.getRecipientAttrType());\n         System.out.println(\"    static recipient: \" + notificationTO.getStaticRecipients());\n         System.out.println(\"    trace level: \" + notificationTO.getTraceLevel());\n         System.out.println(\"    active: \" + notificationTO.isActive());"},{"sha":"ca7c87a0a53d87915c47037682dbc073384c4df7","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/resource/ResourceResultManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -77,7 +77,6 @@ private void printMapping(final MappingTO mappingTO) {\n     private void printMappingItem(final List<MappingItemTO> mappingItemTOs) {\n         for (final MappingItemTO mappingItemTO : mappingItemTOs) {\n             System.out.println(\"             mapping key: \" + mappingItemTO.getKey());\n-            System.out.println(\"             mapping item type: \" + mappingItemTO.getIntMappingType().name());\n             System.out.println(\"             internal attribute name: \" + mappingItemTO.getIntAttrName());\n             System.out.println(\"             external attribute name: \" + mappingItemTO.getExtAttrName());\n             System.out.println(\"             mandatory condition: \" + mappingItemTO.getMandatoryCondition());"},{"sha":"001e5690961e782490df47b365f482fb166f72ac","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -18,29 +18,11 @@\n  */\n package org.apache.syncope.common.lib;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.common.lib.search.SearchableFields;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n \n public final class EntityTOUtils {\n \n-    public static final List<String> ANY_FIELDS;\n-\n-    static {\n-        List<String> anyFields = new ArrayList<>();\n-        anyFields.addAll(SearchableFields.get(UserTO.class));\n-        anyFields.addAll(SearchableFields.get(GroupTO.class));\n-        anyFields.addAll(SearchableFields.get(AnyObjectTO.class));\n-\n-        ANY_FIELDS = Collections.unmodifiableList(anyFields);\n-    }\n-\n     public static <E extends EntityTO> Transformer<E, String> keyTransformer() {\n         return new Transformer<E, String>() {\n "},{"sha":"2788a4abf802caf2b2a7fb0380dbc56e122162eb","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccountRuleConf.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -26,7 +26,8 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.report.Schema;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.SchemaType;\n \n @XmlRootElement(name = \"defaultAccountRuleConf\")\n @XmlType\n@@ -67,8 +68,8 @@ public class DefaultAccountRuleConf extends AbstractAccountRuleConf implements A\n     /**\n      * User attribute values not permitted.\n      */\n-    @Schema(type\n-            = { IntMappingType.UserPlainSchema, IntMappingType.UserDerivedSchema, IntMappingType.UserVirtualSchema })\n+    @Schema(anyTypeKind = AnyTypeKind.USER,\n+            type = { SchemaType.PLAIN, SchemaType.DERIVED, SchemaType.VIRTUAL })\n     private final List<String> schemasNotPermitted = new ArrayList<>();\n \n     /**"},{"sha":"b62254608eb77a7d9a00fe14bc0e61b1e7fe2502","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -26,7 +26,8 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.report.Schema;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.SchemaType;\n \n @XmlRootElement(name = \"defaultPasswordRuleConf\")\n @XmlType\n@@ -142,8 +143,8 @@ public class DefaultPasswordRuleConf extends AbstractPasswordRuleConf {\n     /**\n      * User attribute values not permitted.\n      */\n-    @Schema(type\n-            = { IntMappingType.UserPlainSchema, IntMappingType.UserDerivedSchema, IntMappingType.UserVirtualSchema })\n+    @Schema(anyTypeKind = AnyTypeKind.USER,\n+            type = { SchemaType.PLAIN, SchemaType.DERIVED, SchemaType.VIRTUAL })\n     private final List<String> schemasNotPermitted = new ArrayList<>();\n \n     /**"},{"sha":"6f3800ac116677b289cfe5ad2c4f85d8b17fdc71","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/GroupReportletConf.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FGroupReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FGroupReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FGroupReportletConf.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -26,7 +26,8 @@\n import javax.xml.bind.annotation.XmlEnum;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.SchemaType;\n \n @XmlRootElement(name = \"groupReportletConf\")\n @XmlType\n@@ -47,13 +48,13 @@ public enum Feature {\n \n     }\n \n-    @Schema(type = IntMappingType.GroupPlainSchema)\n+    @Schema(anyTypeKind = AnyTypeKind.GROUP, type = { SchemaType.PLAIN })\n     private final List<String> plainAttrs = new ArrayList<>();\n \n-    @Schema(type = IntMappingType.GroupDerivedSchema)\n+    @Schema(anyTypeKind = AnyTypeKind.GROUP, type = { SchemaType.DERIVED })\n     private final List<String> derAttrs = new ArrayList<>();\n \n-    @Schema(type = IntMappingType.GroupVirtualSchema)\n+    @Schema(anyTypeKind = AnyTypeKind.GROUP, type = { SchemaType.VIRTUAL })\n     private final List<String> virAttrs = new ArrayList<>();\n \n     @SearchCondition(type = \"GROUP\")"},{"sha":"c1771ba6646b5464f1d8979b92efc70506741c6f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/Schema.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FSchema.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -22,11 +22,14 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.SchemaType;\n \n @Target({ ElementType.FIELD })\n @Retention(RetentionPolicy.RUNTIME)\n public @interface Schema {\n \n-    IntMappingType[] type() default { IntMappingType.UserPlainSchema };\n+    SchemaType[] type() default { SchemaType.PLAIN };\n+\n+    AnyTypeKind anyTypeKind();\n }"},{"sha":"0a5455d35c18a69ffff1d64d3b29a66b0a370579","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/UserReportletConf.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -26,21 +26,22 @@\n import javax.xml.bind.annotation.XmlEnum;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.SchemaType;\n \n @XmlRootElement(name = \"userReportletConf\")\n @XmlType\n public class UserReportletConf extends AbstractAnyReportletConf {\n \n     private static final long serialVersionUID = 6602717600064602764L;\n \n-    @Schema(type = IntMappingType.UserPlainSchema)\n+    @Schema(anyTypeKind = AnyTypeKind.USER, type = { SchemaType.PLAIN })\n     private final List<String> plainAttrs = new ArrayList<>();\n \n-    @Schema(type = IntMappingType.UserDerivedSchema)\n+    @Schema(anyTypeKind = AnyTypeKind.USER, type = { SchemaType.DERIVED })\n     private final List<String> derAttrs = new ArrayList<>();\n \n-    @Schema(type = IntMappingType.UserVirtualSchema)\n+    @Schema(anyTypeKind = AnyTypeKind.USER, type = { SchemaType.VIRTUAL })\n     private final List<String> virAttrs = new ArrayList<>();\n \n     @XmlEnum"},{"sha":"0912cf9baa6ddcdc09fd27bdaf519233dbce21f9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SearchableFields.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -22,10 +22,15 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n public final class SearchableFields {\n@@ -34,6 +39,18 @@ public final class SearchableFields {\n         \"serialVersionUID\", \"password\"\n     };\n \n+    private static final Set<String> ANY_FIELDS = new HashSet<>();\n+\n+    static {\n+        ANY_FIELDS.addAll(SearchableFields.get(UserTO.class));\n+        ANY_FIELDS.addAll(SearchableFields.get(GroupTO.class));\n+        ANY_FIELDS.addAll(SearchableFields.get(AnyObjectTO.class));\n+    }\n+\n+    public static boolean contains(final String schema) {\n+        return ANY_FIELDS.contains(schema);\n+    }\n+\n     public static List<String> get(final AnyTypeKind anyTypeKind) {\n         return get(anyTypeKind.getToClass());\n     }"},{"sha":"c078950bb352ceb36d73ea8a9d585470613034d5","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingItemTO.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingItemTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingItemTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingItemTO.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -26,7 +26,6 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n \n @XmlRootElement(name = \"mappingItem\")\n@@ -43,11 +42,6 @@ public class MappingItemTO extends AbstractBaseBean implements EntityTO {\n      */\n     private String intAttrName;\n \n-    /**\n-     * Schema type to be mapped.\n-     */\n-    private IntMappingType intMappingType;\n-\n     /**\n      * External resource's field to be mapped.\n      */\n@@ -135,14 +129,6 @@ public void setIntAttrName(final String intAttrName) {\n         this.intAttrName = intAttrName;\n     }\n \n-    public IntMappingType getIntMappingType() {\n-        return intMappingType;\n-    }\n-\n-    public void setIntMappingType(final IntMappingType intMappingType) {\n-        this.intMappingType = intMappingType;\n-    }\n-\n     public MappingPurpose getPurpose() {\n         return purpose;\n     }"},{"sha":"a9048c7fad38fbd4f30dbdea8c3c5968ae3af58d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -28,7 +28,6 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n \n @XmlRootElement(name = \"mapping\")\n @XmlType\n@@ -61,17 +60,6 @@ public boolean evaluate(final MappingItemTO item) {\n     }\n \n     protected boolean addConnObjectKeyItem(final MappingItemTO connObjectItem) {\n-        if (IntMappingType.UserVirtualSchema == connObjectItem.getIntMappingType()\n-                || IntMappingType.GroupVirtualSchema == connObjectItem.getIntMappingType()\n-                || IntMappingType.AnyObjectVirtualSchema == connObjectItem.getIntMappingType()\n-                || IntMappingType.Password == connObjectItem.getIntMappingType()) {\n-\n-            throw new IllegalArgumentException(\"Virtual attributes cannot be set as connObjectKey\");\n-        }\n-        if (IntMappingType.Password == connObjectItem.getIntMappingType()) {\n-            throw new IllegalArgumentException(\"Password attributes cannot be set as connObjectKey\");\n-        }\n-\n         connObjectItem.setMandatoryCondition(\"true\");\n         connObjectItem.setConnObjectKey(true);\n "},{"sha":"428efdeb23b2db7ff6ec7461c53457cbb2a49a8d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTO.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -32,7 +32,6 @@\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n \n @XmlRootElement(name = \"notification\")\n@@ -53,8 +52,6 @@ public class NotificationTO extends AbstractBaseBean implements EntityTO {\n \n     private final List<String> staticRecipients = new ArrayList<>();\n \n-    private IntMappingType recipientAttrType;\n-\n     private String recipientAttrName;\n \n     private boolean selfAsRecipient;\n@@ -117,14 +114,6 @@ public void setRecipientAttrName(final String recipientAttrName) {\n         this.recipientAttrName = recipientAttrName;\n     }\n \n-    public IntMappingType getRecipientAttrType() {\n-        return recipientAttrType;\n-    }\n-\n-    public void setRecipientAttrType(final IntMappingType recipientAttrType) {\n-        this.recipientAttrType = recipientAttrType;\n-    }\n-\n     public boolean isSelfAsRecipient() {\n         return selfAsRecipient;\n     }"},{"sha":"149cc81b1b7f45aa603294f3c6cfb059b275c837","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -29,7 +29,7 @@ public enum EntityViolationType {\n     InvalidConnInstanceLocation(\"org.apache.syncope.core.persistence.validation.conninstance.location\"),\n     InvalidConnPoolConf(\"org.apache.syncope.core.persistence.validation.conninstance.poolConf\"),\n     InvalidMapping(\"org.apache.syncope.core.persistence.validation.mapping\"),\n-    InvalidName(\"org.apache.syncope.core.persistence.validation.name\"),\n+    InvalidKey(\"org.apache.syncope.core.persistence.validation.key\"),\n     InvalidNotification(\"org.apache.syncope.core.persistence.validation.notification\"),\n     InvalidPassword(\"org.apache.syncope.core.persistence.validation.user.password\"),\n     InvalidPolicy(\"org.apache.syncope.core.persistence.validation.policy\"),"},{"sha":"855334839331fafbbe974694286e9e0556697333","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/IntMappingType.java","status":"removed","additions":0,"deletions":203,"changes":203,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/50f5a66778f7f94692e02a9e16243584817356b1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/50f5a66778f7f94692e02a9e16243584817356b1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java?ref=50f5a66778f7f94692e02a9e16243584817356b1","patch":"@@ -1,203 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import java.util.Collection;\n-import java.util.EnumSet;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import javax.xml.bind.annotation.XmlEnum;\n-\n-/**\n- * Internal attribute mapping type.\n- */\n-@XmlEnum\n-public enum IntMappingType {\n-\n-    // Unfortunately enum type cannot be extended ...\n-    // -------------------------\n-    // User attribute types (the same in UserMappingType)\n-    // -------------------------\n-    UserPlainSchema(AnyTypeKind.USER),\n-    UserDerivedSchema(AnyTypeKind.USER),\n-    UserVirtualSchema(AnyTypeKind.USER),\n-    UserKey(AnyTypeKind.USER),\n-    Username(AnyTypeKind.USER),\n-    Password(AnyTypeKind.USER),\n-    // -------------------------\n-    // Group attribute types (the same in GroupMappingType)\n-    // -------------------------\n-    GroupPlainSchema(AnyTypeKind.GROUP),\n-    GroupDerivedSchema(AnyTypeKind.GROUP),\n-    GroupVirtualSchema(AnyTypeKind.GROUP),\n-    GroupKey(AnyTypeKind.GROUP),\n-    GroupName(AnyTypeKind.GROUP),\n-    GroupOwnerSchema(AnyTypeKind.GROUP),\n-    // -------------------------\n-    // Any attribute types (the same in AnyMappingType)\n-    // -------------------------\n-    AnyObjectPlainSchema(AnyTypeKind.ANY_OBJECT),\n-    AnyObjectDerivedSchema(AnyTypeKind.ANY_OBJECT),\n-    AnyObjectVirtualSchema(AnyTypeKind.ANY_OBJECT),\n-    AnyObjectKey(AnyTypeKind.ANY_OBJECT),\n-    AnyObjectName(AnyTypeKind.ANY_OBJECT);\n-\n-    private final AnyTypeKind anyTypeKind;\n-\n-    IntMappingType(final AnyTypeKind anyTypeKind) {\n-        this.anyTypeKind = anyTypeKind;\n-    }\n-\n-    public AnyTypeKind getAnyTypeKind() {\n-        return anyTypeKind;\n-    }\n-\n-    /**\n-     * Get attribute types for a certain any object type.\n-     *\n-     * @param anyTypeKind any object type\n-     * @param toBeFiltered types to be filtered from the result.\n-     * @return set of attribute types.\n-     */\n-    public static Set<IntMappingType> getAttributeTypes(\n-            final AnyTypeKind anyTypeKind, final Collection<IntMappingType> toBeFiltered) {\n-\n-        final Set<IntMappingType> res = getAttributeTypes(anyTypeKind);\n-        res.removeAll(toBeFiltered);\n-\n-        return res;\n-    }\n-\n-    /**\n-     * Get attribute types for a certain any object type.\n-     *\n-     * @param anyTypeKind any object type\n-     * @return set of attribute types.\n-     */\n-    public static Set<IntMappingType> getAttributeTypes(final AnyTypeKind anyTypeKind) {\n-        EnumSet<?> enumset;\n-\n-        switch (anyTypeKind) {\n-            case GROUP:\n-                enumset = EnumSet.allOf(GroupMappingType.class);\n-                break;\n-\n-            case ANY_OBJECT:\n-                enumset = EnumSet.allOf(AnyMappingType.class);\n-                break;\n-\n-            case USER:\n-            default:\n-                enumset = EnumSet.allOf(UserMappingType.class);\n-                break;\n-        }\n-\n-        final Set<IntMappingType> result = new HashSet<>(enumset.size());\n-        for (Object obj : enumset) {\n-            result.add(IntMappingType.valueOf(obj.toString()));\n-        }\n-\n-        return result;\n-    }\n-\n-    public static Set<IntMappingType> getEmbedded() {\n-        return EnumSet.of(IntMappingType.UserKey, IntMappingType.Username, IntMappingType.Password,\n-                IntMappingType.GroupKey, IntMappingType.GroupName, IntMappingType.GroupOwnerSchema,\n-                IntMappingType.AnyObjectKey, IntMappingType.AnyObjectName);\n-    }\n-\n-    /**\n-     * Check if attribute type belongs to the specified any object type set.\n-     *\n-     * @param anyTypeKind any object type.\n-     * @param type attribute type.\n-     * @return true if attribute type belongs to the specified any object type set.\n-     */\n-    public static boolean contains(final AnyTypeKind anyTypeKind, final String type) {\n-        switch (anyTypeKind) {\n-            case GROUP:\n-                for (GroupMappingType c : GroupMappingType.values()) {\n-                    if (c.name().equals(type)) {\n-                        return true;\n-                    }\n-                }\n-                break;\n-\n-            case ANY_OBJECT:\n-                for (AnyMappingType c : AnyMappingType.values()) {\n-                    if (c.name().equals(type)) {\n-                        return true;\n-                    }\n-                }\n-                break;\n-\n-            case USER:\n-            default:\n-                for (UserMappingType c : UserMappingType.values()) {\n-                    if (c.name().equals(type)) {\n-                        return true;\n-                    }\n-                }\n-                break;\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * User attribute types.\n-     */\n-    private enum UserMappingType {\n-\n-        UserPlainSchema,\n-        UserDerivedSchema,\n-        UserVirtualSchema,\n-        UserKey,\n-        Username,\n-        Password;\n-\n-    }\n-\n-    /**\n-     * Group attribute types.\n-     */\n-    private enum GroupMappingType {\n-\n-        GroupPlainSchema,\n-        GroupDerivedSchema,\n-        GroupVirtualSchema,\n-        GroupKey,\n-        GroupName,\n-        GroupOwnerSchema;\n-\n-    }\n-\n-    /**\n-     * Any attribute types.\n-     */\n-    private enum AnyMappingType {\n-\n-        AnyObjectPlainSchema,\n-        AnyObjectDerivedSchema,\n-        AnyObjectVirtualSchema,\n-        AnyObjectKey,\n-        AnyObjectName;\n-\n-    }\n-}"},{"sha":"6afa7718c7336e78d7e0256b4310cd600335610b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -43,7 +42,7 @@ public interface ExternalResourceDAO extends DAO<ExternalResource> {\n \n     ExternalResource save(ExternalResource resource);\n \n-    void deleteMapping(String schemaName, IntMappingType intMappingType);\n+    void deleteMapping(String schemaName);\n \n     void delete(String key);\n }"},{"sha":"84812b245bc796514db07f00c7f34070d22fa0c8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -21,7 +21,6 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n@@ -31,6 +30,8 @@ public interface AnyUtils {\n \n     <T extends Any<?>> Class<T> anyClass();\n \n+    boolean isFieldName(String name);\n+\n     <T extends PlainAttr<?>> Class<T> plainAttrClass();\n \n     <T extends PlainAttr<?>> T newPlainAttr();\n@@ -43,12 +44,6 @@ public interface AnyUtils {\n \n     <T extends PlainAttrValue> T newPlainAttrUniqueValue();\n \n-    IntMappingType plainIntMappingType();\n-\n-    IntMappingType derIntMappingType();\n-\n-    IntMappingType virIntMappingType();\n-\n     <T extends AnyTO> T newAnyTO();\n \n     Set<ExternalResource> getAllResources(Any<?> any);"},{"sha":"8b2cc2dfff88e25370a5664deb085cefd94ab833","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/LinkingMappingItem.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -20,7 +20,6 @@\n \n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -73,26 +72,6 @@ public void setIntAttrName(final String intAttrName) {\n         // RO instance, nothing to do\n     }\n \n-    @Override\n-    public IntMappingType getIntMappingType() {\n-        switch (virSchema.getProvision().getAnyType().getKind()) {\n-            case ANY_OBJECT:\n-                return IntMappingType.AnyObjectVirtualSchema;\n-\n-            case GROUP:\n-                return IntMappingType.GroupVirtualSchema;\n-\n-            case USER:\n-            default:\n-                return IntMappingType.UserVirtualSchema;\n-        }\n-    }\n-\n-    @Override\n-    public void setIntMappingType(final IntMappingType intMappingType) {\n-        // RO instance, nothing to do\n-    }\n-\n     @Override\n     public String getMandatoryCondition() {\n         return virSchema.getMandatoryCondition();"},{"sha":"9046ccf627eb65bebacc38e6bdccb1615a16f47b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Notification.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n \n public interface Notification extends Entity {\n@@ -36,10 +35,6 @@ public interface Notification extends Entity {\n \n     void setRecipientAttrName(String recipientAttrName);\n \n-    IntMappingType getRecipientAttrType();\n-\n-    void setRecipientAttrType(IntMappingType recipientAttrType);\n-\n     String getRecipientsFIQL();\n \n     void setRecipientsFIQL(String recipientsFIQL);"},{"sha":"461eaa1aadc1b109f5f19a09f989a39e5e01d8e9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/MappingItem.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.api.entity.resource;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n \n@@ -37,10 +36,6 @@ public interface MappingItem extends Entity {\n \n     void setIntAttrName(String intAttrName);\n \n-    IntMappingType getIntMappingType();\n-\n-    void setIntMappingType(IntMappingType intMappingType);\n-\n     String getMandatoryCondition();\n \n     void setMandatoryCondition(String condition);"},{"sha":"ead74aca5041082d817e264907a3d23856cf0455","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -25,7 +25,7 @@\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n import org.apache.cxf.jaxrs.ext.search.SearchUtils;\n import org.apache.cxf.jaxrs.ext.search.visitor.AbstractSearchConditionVisitor;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n+import org.apache.syncope.common.lib.search.SearchableFields;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n@@ -56,7 +56,7 @@ public void setRealm(final String realm) {\n     }\n \n     private AttributeCond createAttributeCond(final String schema) {\n-        AttributeCond attributeCond = EntityTOUtils.ANY_FIELDS.contains(schema)\n+        AttributeCond attributeCond = SearchableFields.contains(schema)\n                 ? new AnyCond()\n                 : new AttributeCond();\n         attributeCond.setSchema(schema);"},{"sha":"3894adb76e534fd825b039ba18892fe130401b3c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -21,13 +21,10 @@\n import java.util.Collection;\n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.JPADerSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -77,10 +74,7 @@ public void delete(final String key) {\n             return;\n         }\n \n-        AnyUtilsFactory anyUtilsFactory = new JPAAnyUtilsFactory();\n-        for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n-            resourceDAO.deleteMapping(key, anyUtilsFactory.getInstance(anyTypeKind).derIntMappingType());\n-        }\n+        resourceDAO.deleteMapping(key);\n \n         if (schema.getAnyTypeClass() != null) {\n             schema.getAnyTypeClass().getDerSchemas().remove(schema);"},{"sha":"0658179484edba552c8032a337d78fe1e0e3e1c6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -23,7 +23,6 @@\n import java.util.Set;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -160,16 +159,11 @@ public ExternalResource save(final ExternalResource resource) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public void deleteMapping(final String intAttrName, final IntMappingType intMappingType) {\n-        if (IntMappingType.getEmbedded().contains(intMappingType)) {\n-            return;\n-        }\n-\n+    public void deleteMapping(final String intAttrName) {\n         TypedQuery<MappingItem> query = entityManager().createQuery(\n                 \"SELECT m FROM \" + JPAMappingItem.class.getSimpleName()\n-                + \" m WHERE m.intAttrName=:intAttrName AND m.intMappingType=:intMappingType\", MappingItem.class);\n+                + \" m WHERE m.intAttrName=:intAttrName\", MappingItem.class);\n         query.setParameter(\"intAttrName\", intAttrName);\n-        query.setParameter(\"intMappingType\", intMappingType);\n \n         Set<String> itemKeys = new HashSet<>();\n         for (MappingItem item : query.getResultList()) {"},{"sha":"2e3bef526351f8ce148b431711649088a1820338","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -101,7 +101,7 @@ public void delete(final String key) {\n                 plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n             }\n \n-            resourceDAO.deleteMapping(key, anyUtils.plainIntMappingType());\n+            resourceDAO.deleteMapping(key);\n         }\n \n         if (schema.getAnyTypeClass() != null) {"},{"sha":"4636f7d38f59b6e9596976f6f4a1556cbca1fce5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -23,17 +23,13 @@\n import java.util.List;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n import org.apache.syncope.core.persistence.jpa.entity.JPAVirSchema;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n@@ -122,12 +118,7 @@ public void delete(final String key) {\n             return;\n         }\n \n-        AnyUtilsFactory anyUtilsFactory = new JPAAnyUtilsFactory();\n-        for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n-            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n-\n-            resourceDAO.deleteMapping(key, anyUtils.virIntMappingType());\n-        }\n+        resourceDAO.deleteMapping(key);\n \n         if (schema.getAnyTypeClass() != null) {\n             schema.getAnyTypeClass().getVirSchemas().remove(schema);"},{"sha":"81c972bd189c39ab99c046ef121a09c12c121f0f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractSchema.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSchema.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.Schema;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaKeyCheck;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.JOINED)\n+@Table(name = AbstractSchema.TABLE)\n+@Cacheable\n+@SchemaKeyCheck\n+public abstract class AbstractSchema extends AbstractProvidedKeyEntity implements Schema {\n+\n+    public static final String TABLE = \"SyncopeSchema\";\n+\n+    private static final long serialVersionUID = -9222344997225831269L;\n+\n+}"},{"sha":"b13b19df2841a9bb8f73cd5e1b99a41f9ed4b45a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":61,"deletions":70,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -18,14 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import java.lang.reflect.Field;\n+import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.lang3.ClassUtils;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -57,6 +61,40 @@\n @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n public class JPAAnyUtils implements AnyUtils {\n \n+    private static final Set<String> USER_FIELD_NAMES = new HashSet<>();\n+\n+    private static final Set<String> GROUP_FIELD_NAMES = new HashSet<>();\n+\n+    private static final Set<String> ANY_OBJECT_FIELD_NAMES = new HashSet<>();\n+\n+    static {\n+        initFieldNames(JPAUser.class, USER_FIELD_NAMES);\n+        initFieldNames(JPAGroup.class, GROUP_FIELD_NAMES);\n+        initFieldNames(JPAAnyObject.class, ANY_OBJECT_FIELD_NAMES);\n+    }\n+\n+    private static void initFieldNames(final Class<?> entityClass, final Set<String> keys) {\n+        List<Class<?>> classes = ClassUtils.getAllSuperclasses(entityClass);\n+        if (!classes.contains(JPAUser.class)) {\n+            classes.add(JPAUser.class);\n+        }\n+        for (Class<?> clazz : classes) {\n+            for (Field field : clazz.getDeclaredFields()) {\n+                if (!Collection.class.isAssignableFrom(field.getType())\n+                        && !Map.class.isAssignableFrom(field.getType())) {\n+\n+                    keys.add(field.getName());\n+                }\n+            }\n+        }\n+    }\n+\n+    public static boolean matchesFieldName(final String candidate) {\n+        return USER_FIELD_NAMES.contains(candidate)\n+                || GROUP_FIELD_NAMES.contains(candidate)\n+                || ANY_OBJECT_FIELD_NAMES.contains(candidate);\n+    }\n+\n     private final AnyTypeKind anyTypeKind;\n \n     @Autowired\n@@ -98,6 +136,28 @@ public <T extends Any<?>> Class<T> anyClass() {\n         return result;\n     }\n \n+    @Override\n+    public boolean isFieldName(final String name) {\n+        Set<String> names;\n+\n+        switch (anyTypeKind) {\n+            case GROUP:\n+                names = GROUP_FIELD_NAMES;\n+                break;\n+\n+            case ANY_OBJECT:\n+                names = ANY_OBJECT_FIELD_NAMES;\n+                break;\n+\n+            case USER:\n+            default:\n+                names = USER_FIELD_NAMES;\n+                break;\n+        }\n+\n+        return names.contains(name);\n+    }\n+\n     @Override\n     public <T extends PlainAttr<?>> Class<T> plainAttrClass() {\n         Class result;\n@@ -233,75 +293,6 @@ public <T extends PlainAttrValue> T newPlainAttrUniqueValue() {\n         return result;\n     }\n \n-    @Override\n-    public IntMappingType plainIntMappingType() {\n-        IntMappingType result = null;\n-\n-        switch (anyTypeKind) {\n-            case GROUP:\n-                result = IntMappingType.GroupPlainSchema;\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = IntMappingType.AnyObjectPlainSchema;\n-                break;\n-\n-            case USER:\n-                result = IntMappingType.UserPlainSchema;\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public IntMappingType derIntMappingType() {\n-        IntMappingType result = null;\n-\n-        switch (anyTypeKind) {\n-            case GROUP:\n-                result = IntMappingType.GroupDerivedSchema;\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = IntMappingType.AnyObjectDerivedSchema;\n-                break;\n-\n-            case USER:\n-                result = IntMappingType.UserDerivedSchema;\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public IntMappingType virIntMappingType() {\n-        IntMappingType result = null;\n-\n-        switch (anyTypeKind) {\n-            case GROUP:\n-                result = IntMappingType.GroupVirtualSchema;\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = IntMappingType.AnyObjectVirtualSchema;\n-                break;\n-\n-            case USER:\n-                result = IntMappingType.UserVirtualSchema;\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public <T extends AnyTO> T newAnyTO() {\n         T result = null;"},{"sha":"e01fc99b8a969481b9cb14d12533826fa82d927d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADerSchema.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -18,22 +18,20 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.OneToOne;\n+import javax.persistence.PrimaryKeyJoinColumn;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaKeyCheck;\n \n @Entity\n @Table(name = JPADerSchema.TABLE)\n-@Cacheable\n-@SchemaKeyCheck\n-public class JPADerSchema extends AbstractProvidedKeyEntity implements DerSchema {\n+@PrimaryKeyJoinColumn(name = \"id\", referencedColumnName = \"id\")\n+public class JPADerSchema extends AbstractSchema implements DerSchema {\n \n     private static final long serialVersionUID = -6173643493348674060L;\n "},{"sha":"392c8af0fd6b51dfb55d31fa58db75e4ccc119ab","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -38,7 +38,6 @@\n import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -74,10 +73,6 @@ public class JPANotification extends AbstractGeneratedKeyEntity implements Notif\n     @Column(name = \"staticRecipients\")\n     private List<String> staticRecipients;\n \n-    @NotNull\n-    @Enumerated(EnumType.STRING)\n-    private IntMappingType recipientAttrType;\n-\n     @NotNull\n     private String recipientAttrName;\n \n@@ -138,16 +133,6 @@ public void setRecipientAttrName(final String recipientAttrName) {\n         this.recipientAttrName = recipientAttrName;\n     }\n \n-    @Override\n-    public IntMappingType getRecipientAttrType() {\n-        return recipientAttrType;\n-    }\n-\n-    @Override\n-    public void setRecipientAttrType(final IntMappingType recipientAttrType) {\n-        this.recipientAttrType = recipientAttrType;\n-    }\n-\n     @Override\n     public String getRecipientsProviderClassName() {\n         return recipientsProviderClassName;"},{"sha":"45155173db02ee576089a8760359de56b1d98ef8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -27,6 +27,7 @@\n import javax.persistence.FetchType;\n import javax.persistence.Lob;\n import javax.persistence.OneToOne;\n+import javax.persistence.PrimaryKeyJoinColumn;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n import javax.validation.constraints.Max;\n@@ -40,13 +41,12 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.BasicValidator;\n import org.apache.syncope.core.persistence.jpa.validation.entity.PlainSchemaCheck;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaKeyCheck;\n \n @Entity\n @Table(name = JPAPlainSchema.TABLE)\n+@PrimaryKeyJoinColumn(name = \"id\", referencedColumnName = \"id\")\n @PlainSchemaCheck\n-@SchemaKeyCheck\n-public class JPAPlainSchema extends AbstractProvidedKeyEntity implements PlainSchema {\n+public class JPAPlainSchema extends AbstractSchema implements PlainSchema {\n \n     private static final long serialVersionUID = -8621028596062054739L;\n "},{"sha":"1325ca7e45af3db90547bf1c0026a57468dd6bfb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAVirSchema.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -19,11 +19,11 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import javax.persistence.Basic;\n-import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n+import javax.persistence.PrimaryKeyJoinColumn;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n@@ -35,13 +35,11 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaKeyCheck;\n \n @Entity\n @Table(name = JPAVirSchema.TABLE)\n-@Cacheable\n-@SchemaKeyCheck\n-public class JPAVirSchema extends AbstractProvidedKeyEntity implements VirSchema {\n+@PrimaryKeyJoinColumn(name = \"id\", referencedColumnName = \"id\")\n+public class JPAVirSchema extends AbstractSchema implements VirSchema {\n \n     private static final long serialVersionUID = 3274006935328590141L;\n "},{"sha":"ee11d598d212447ffe339b056fdd2453981892b3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAPlainAttrValue.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n import javax.persistence.Entity;\n-import javax.persistence.Inheritance;\n-import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n@@ -31,7 +29,6 @@\n \n @Entity\n @Table(name = JPAAPlainAttrValue.TABLE)\n-@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n public class JPAAPlainAttrValue extends AbstractPlainAttrValue implements APlainAttrValue {\n \n     private static final long serialVersionUID = -2965487882824889272L;"},{"sha":"f4cbbcae52aef1405dbf936d89ac9baa7db11cb3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPACPlainAttrValue.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity.conf;\n \n import javax.persistence.Entity;\n-import javax.persistence.Inheritance;\n-import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n@@ -31,7 +29,6 @@\n \n @Entity\n @Table(name = JPACPlainAttrValue.TABLE)\n-@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n public class JPACPlainAttrValue extends AbstractPlainAttrValue implements CPlainAttrValue {\n \n     private static final long serialVersionUID = -4029895248193486171L;"},{"sha":"bf2cd6ff6b50843de3f28f1e525fc2ee2fec41c2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainAttrValue.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrValue.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity.group;\n \n import javax.persistence.Entity;\n-import javax.persistence.Inheritance;\n-import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n@@ -31,7 +29,6 @@\n \n @Entity\n @Table(name = JPAGPlainAttrValue.TABLE)\n-@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n public class JPAGPlainAttrValue extends AbstractPlainAttrValue implements GPlainAttrValue {\n \n     private static final long serialVersionUID = -766808291128424707L;"},{"sha":"38949940a2e9a1e089ea4e02c1211e946506b07b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMapping.java","status":"modified","additions":2,"deletions":21,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -30,7 +30,6 @@\n import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -92,26 +91,8 @@ public boolean evaluate(final MappingItem item) {\n \n     @Override\n     public void setConnObjectKeyItem(final MappingItem item) {\n-        checkType(item, JPAMappingItem.class);\n-        this.addConnObjectKeyItem((JPAMappingItem) item);\n-    }\n-\n-    protected boolean addConnObjectKeyItem(final MappingItem connObjectKeyItem) {\n-        if (IntMappingType.UserVirtualSchema == connObjectKeyItem.getIntMappingType()\n-                || IntMappingType.GroupVirtualSchema == connObjectKeyItem.getIntMappingType()\n-                || IntMappingType.AnyObjectVirtualSchema == connObjectKeyItem.getIntMappingType()\n-                || IntMappingType.Password == connObjectKeyItem.getIntMappingType()) {\n-\n-            throw new IllegalArgumentException(\"Virtual attributes cannot be set as ConnObjectKey\");\n-        }\n-        if (IntMappingType.Password == connObjectKeyItem.getIntMappingType()) {\n-            throw new IllegalArgumentException(\"Password attributes cannot be set as ConnObjectKey\");\n-        }\n-\n-        connObjectKeyItem.setExtAttrName(connObjectKeyItem.getExtAttrName());\n-        connObjectKeyItem.setConnObjectKey(true);\n-\n-        return this.add(connObjectKeyItem);\n+        item.setConnObjectKey(true);\n+        this.add(item);\n     }\n \n     @Override"},{"sha":"7c89dec681487515fb31f154daff904da25d09ed","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"modified","additions":1,"deletions":49,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -35,7 +35,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -56,10 +55,6 @@ public class JPAMappingItem extends AbstractGeneratedKeyEntity implements Mappin\n     @Column(nullable = true)\n     private String intAttrName;\n \n-    @NotNull\n-    @Enumerated(EnumType.STRING)\n-    private IntMappingType intMappingType;\n-\n     /**\n      * Target resource's field to be mapped.\n      */\n@@ -158,57 +153,14 @@ public void setMandatoryCondition(final String mandatoryCondition) {\n \n     @Override\n     public String getIntAttrName() {\n-        final String name;\n-\n-        switch (getIntMappingType()) {\n-            case UserKey:\n-            case GroupKey:\n-            case AnyObjectKey:\n-                name = \"id\";\n-                break;\n-\n-            case Username:\n-                name = \"username\";\n-                break;\n-\n-            case Password:\n-                name = \"password\";\n-                break;\n-\n-            case GroupName:\n-                name = \"groupName\";\n-                break;\n-\n-            case GroupOwnerSchema:\n-                name = \"groupOwnerSchema\";\n-                break;\n-\n-            case AnyObjectName:\n-                name = \"anyObjectName\";\n-                break;\n-                \n-            default:\n-                name = intAttrName;\n-        }\n-\n-        return name;\n+        return intAttrName;\n     }\n \n     @Override\n     public void setIntAttrName(final String intAttrName) {\n         this.intAttrName = intAttrName;\n     }\n \n-    @Override\n-    public IntMappingType getIntMappingType() {\n-        return intMappingType;\n-    }\n-\n-    @Override\n-    public void setIntMappingType(final IntMappingType intMappingType) {\n-        this.intMappingType = intMappingType;\n-    }\n-\n     @Override\n     public boolean isConnObjectKey() {\n         return isBooleanAsInteger(connObjectKey);"},{"sha":"99ea4ee3590797ca6822f3ed338204c12caa0f8d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainAttrValue.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity.user;\n \n import javax.persistence.Entity;\n-import javax.persistence.Inheritance;\n-import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n@@ -31,7 +29,6 @@\n \n @Entity\n @Table(name = JPAUPlainAttrValue.TABLE)\n-@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n public class JPAUPlainAttrValue extends AbstractPlainAttrValue implements UPlainAttrValue {\n \n     private static final long serialVersionUID = -6259576015647897446L;"},{"sha":"5eeae0d4e3082b9713a8056cb1b55e8b50f8edd6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AbstractValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -29,7 +29,7 @@\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractValidator.class);\n \n-    protected static final Pattern NAME_PATTERN =\n+    protected static final Pattern KEY_PATTERN =\n             Pattern.compile(\"^[\\\\w \\\\-@.]+\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n     @Override"},{"sha":"2829e69f58cc478a55757dbff3002fefa630d5ae","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/DomainValidator.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainValidator.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -29,14 +29,14 @@ public class DomainValidator extends AbstractValidator<DomainCheck, Domain> {\n     public boolean isValid(final Domain object, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        boolean isValid = !SyncopeConstants.MASTER_DOMAIN.equals(object.getKey());\n-\n-        if (!isValid) {\n+        if (SyncopeConstants.MASTER_DOMAIN.equals(object.getKey())) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidName, \"Reserved: \" + SyncopeConstants.MASTER_DOMAIN)).\n-                    addPropertyNode(\"name\").addConstraintViolation();\n+                    getTemplate(EntityViolationType.InvalidKey, \"Reserved: \" + SyncopeConstants.MASTER_DOMAIN)).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n+\n+            return false;\n         }\n \n-        return isValid;\n+        return true;\n     }\n }"},{"sha":"99a8ec87b83aecf5b1d534341437dafb204b6a05","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":35,"deletions":29,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -25,22 +25,28 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n public class ExternalResourceValidator extends AbstractValidator<ExternalResourceCheck, ExternalResource> {\n \n+    private static final AnyUtilsFactory ANY_UTILS_FACTORY = new JPAAnyUtilsFactory();\n+\n     private boolean isValid(final MappingItem item, final ConstraintValidatorContext context) {\n         if (StringUtils.isBlank(item.getExtAttrName())) {\n             context.buildConstraintViolationWithTemplate(\n@@ -50,6 +56,14 @@ private boolean isValid(final MappingItem item, final ConstraintValidatorContext\n             return false;\n         }\n \n+        if (item.getPurpose() == null) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidMapping, item + \" - purpose is null\")).\n+                    addPropertyNode(\"purpose\").addConstraintViolation();\n+\n+            return false;\n+        }\n+\n         if (StringUtils.isBlank(item.getIntAttrName())) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, item + \" - intAttrName is null\")).\n@@ -58,32 +72,32 @@ private boolean isValid(final MappingItem item, final ConstraintValidatorContext\n             return false;\n         }\n \n-        if (item.getPurpose() == null) {\n+        IntAttrName intAttrName = null;\n+        try {\n+            intAttrName = IntAttrNameParser.parse(\n+                    item.getIntAttrName(),\n+                    ANY_UTILS_FACTORY,\n+                    item.getMapping().getProvision().getAnyType().getKind());\n+        } catch (IllegalArgumentException e) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidMapping, item + \" - purpose is null\")).\n-                    addPropertyNode(\"purpose\").addConstraintViolation();\n+                    getTemplate(EntityViolationType.InvalidMapping, item + \" - \" + e.getMessage())).\n+                    addPropertyNode(\"intAttrName\").addConstraintViolation();\n \n             return false;\n         }\n \n-        if (item.getIntMappingType() == IntMappingType.AnyObjectDerivedSchema\n-                || item.getIntMappingType() == IntMappingType.GroupDerivedSchema\n-                || item.getIntMappingType() == IntMappingType.UserDerivedSchema) {\n+        if (intAttrName.getSchemaType() == SchemaType.DERIVED\n+                && item.getPurpose() != MappingPurpose.PROPAGATION) {\n \n-            if (item.getPurpose() != MappingPurpose.PROPAGATION) {\n-                context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidMapping,\n-                                \" - only \" + MappingPurpose.PROPAGATION.name() + \" allowed for derived\")).\n-                        addPropertyNode(\"purpose\").addConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidMapping,\n+                            \" - only \" + MappingPurpose.PROPAGATION.name() + \" allowed for derived\")).\n+                    addPropertyNode(\"purpose\").addConstraintViolation();\n \n-                return false;\n-            }\n+            return false;\n         }\n \n-        if (item.getIntMappingType() == IntMappingType.AnyObjectVirtualSchema\n-                || item.getIntMappingType() == IntMappingType.GroupVirtualSchema\n-                || item.getIntMappingType() == IntMappingType.UserVirtualSchema) {\n-\n+        if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n             if (item.getPurpose() != MappingPurpose.PROPAGATION) {\n                 context.buildConstraintViolationWithTemplate(\n                         getTemplate(EntityViolationType.InvalidMapping,\n@@ -136,14 +150,6 @@ public boolean evaluate(final MappingItem item) {\n             return false;\n         }\n \n-        MappingItem connObjectKey = mapping.getConnObjectKeyItem();\n-        if (connObjectKey.getIntMappingType().getAnyTypeKind() != anyType.getKind()) {\n-            context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidMapping, \"ConnObjectKey must be from the same AnyTypeKind\")).\n-                    addPropertyNode(\"anyTypeKind\").addConstraintViolation();\n-            return false;\n-        }\n-\n         boolean isValid = true;\n \n         int passwords = 0;\n@@ -189,10 +195,10 @@ public boolean evaluate(final MappingItem item) {\n     public boolean isValid(final ExternalResource resource, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (resource.getKey() == null || !NAME_PATTERN.matcher(resource.getKey()).matches()) {\n+        if (resource.getKey() == null || !KEY_PATTERN.matcher(resource.getKey()).matches()) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidName, \"Invalid Resource name\")).\n-                    addPropertyNode(\"name\").addConstraintViolation();\n+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid resource key\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n             return false;\n         }\n "},{"sha":"281779555de189471507d903cff9fca58c1149d6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainSchemaValidator.java","status":"modified","additions":14,"deletions":22,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainSchemaValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainSchemaValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainSchemaValidator.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -20,7 +20,6 @@\n \n import javax.validation.ConstraintValidatorContext;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -29,37 +28,30 @@ public class PlainSchemaValidator extends AbstractValidator<PlainSchemaCheck, Pl\n \n     @Override\n     public boolean isValid(final PlainSchema schema, final ConstraintValidatorContext context) {\n-        boolean isValid = schema.getKey() != null && !EntityTOUtils.ANY_FIELDS.contains(schema.getKey());\n+        boolean isValid = schema.getType() != AttrSchemaType.Enum\n+                || StringUtils.isNotBlank(schema.getEnumerationValues());\n         if (!isValid) {\n+            context.disableDefaultConstraintViolation();\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidName, \"Invalid PlainSchema name\")).\n-                    addPropertyNode(\"name\").addConstraintViolation();\n+                    getTemplate(EntityViolationType.InvalidSchemaEnum, \"Enumeration values missing\")).\n+                    addPropertyNode(\"enumerationValues\").addConstraintViolation();\n         } else {\n-            isValid = schema.getType() != AttrSchemaType.Enum\n-                    || StringUtils.isNotBlank(schema.getEnumerationValues());\n+            isValid = schema.getType() != AttrSchemaType.Encrypted\n+                    || (schema.getSecretKey() != null && schema.getCipherAlgorithm() != null);\n             if (!isValid) {\n                 context.disableDefaultConstraintViolation();\n                 context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidSchemaEnum, \"Enumeration values missing\")).\n-                        addPropertyNode(\"enumerationValues\").addConstraintViolation();\n+                        getTemplate(EntityViolationType.InvalidSchemaEncrypted,\n+                                \"SecretKey or CipherAlgorithm missing\")).\n+                        addPropertyNode(\"secretKey\").addPropertyNode(\"cipherAlgorithm\").addConstraintViolation();\n             } else {\n-                isValid = schema.getType() != AttrSchemaType.Encrypted\n-                        || (schema.getSecretKey() != null && schema.getCipherAlgorithm() != null);\n+                isValid = !schema.isMultivalue() || !schema.isUniqueConstraint();\n                 if (!isValid) {\n                     context.disableDefaultConstraintViolation();\n                     context.buildConstraintViolationWithTemplate(\n-                            getTemplate(EntityViolationType.InvalidSchemaEncrypted,\n-                                    \"SecretKey or CipherAlgorithm missing\")).\n-                            addPropertyNode(\"secretKey\").addPropertyNode(\"cipherAlgorithm\").addConstraintViolation();\n-                } else {\n-                    isValid = !schema.isMultivalue() || !schema.isUniqueConstraint();\n-                    if (!isValid) {\n-                        context.disableDefaultConstraintViolation();\n-                        context.buildConstraintViolationWithTemplate(\n-                                getTemplate(EntityViolationType.InvalidSchemaMultivalueUnique,\n-                                        \"Cannot contemporary be multivalue and have unique constraint\")).\n-                                addPropertyNode(\"multiValue\").addConstraintViolation();\n-                    }\n+                            getTemplate(EntityViolationType.InvalidSchemaMultivalueUnique,\n+                                    \"Cannot contemporary be multivalue and have unique constraint\")).\n+                            addPropertyNode(\"multiValue\").addConstraintViolation();\n                 }\n             }\n         }"},{"sha":"9953859f26ea5c96c0cdf493d9c91e5673c0f524","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RelationshipTypeValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRelationshipTypeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRelationshipTypeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRelationshipTypeValidator.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -31,8 +31,8 @@ public boolean isValid(final RelationshipType object, final ConstraintValidatorC\n \n         if (MembershipType.getInstance().getKey().equalsIgnoreCase(object.getKey())) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidName, \"Invalid RelationshipType name\")).\n-                    addPropertyNode(\"name\").addConstraintViolation();\n+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid relationshipType name\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n             return false;\n         }\n "},{"sha":"c1de34d11c950fc1fe472782a6c36e85a773ccd9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RoleValidator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -28,10 +28,10 @@ public class RoleValidator extends AbstractValidator<RoleCheck, Role> {\n     public boolean isValid(final Role role, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (role.getKey() == null || !NAME_PATTERN.matcher(role.getKey()).matches()) {\n+        if (role.getKey() == null || !KEY_PATTERN.matcher(role.getKey()).matches()) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidName, \"Invalid Role name\")).\n-                    addPropertyNode(\"name\").addConstraintViolation();\n+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid role key\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n             return false;\n         }\n "},{"sha":"8c716207021858099cdfcc6068c7ef3a6ccbb181","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SchemaKeyValidator.java","status":"modified","additions":11,"deletions":51,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaKeyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaKeyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaKeyValidator.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -18,77 +18,37 @@\n  */\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n-import java.lang.reflect.Field;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n import javax.validation.ConstraintValidatorContext;\n-import org.apache.commons.lang3.ClassUtils;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPAConf;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtils;\n \n public class SchemaKeyValidator extends AbstractValidator<SchemaKeyCheck, Object> {\n \n-    private static final Set<String> UNALLOWED_SCHEMA_KEYS = new HashSet<>();\n-\n-    static {\n-        initUnallowedSchemaKeys(JPAAnyObject.class, UNALLOWED_SCHEMA_KEYS);\n-        initUnallowedSchemaKeys(JPAGroup.class, UNALLOWED_SCHEMA_KEYS);\n-        initUnallowedSchemaKeys(JPAUser.class, UNALLOWED_SCHEMA_KEYS);\n-        initUnallowedSchemaKeys(JPAConf.class, UNALLOWED_SCHEMA_KEYS);\n-    }\n-\n-    private static void initUnallowedSchemaKeys(final Class<?> entityClass, final Set<String> keys) {\n-        List<Class<?>> classes = ClassUtils.getAllSuperclasses(entityClass);\n-        if (!classes.contains(JPAUser.class)) {\n-            classes.add(JPAUser.class);\n-        }\n-        for (Class<?> clazz : classes) {\n-            for (Field field : clazz.getDeclaredFields()) {\n-                if (!Collection.class.isAssignableFrom(field.getType())\n-                        && !Map.class.isAssignableFrom(field.getType())) {\n-\n-                    keys.add(field.getName());\n-                }\n-            }\n-        }\n-    }\n-\n     @Override\n     public boolean isValid(final Object object, final ConstraintValidatorContext context) {\n-        String schemaName;\n-        Set<String> unallowedNames = UNALLOWED_SCHEMA_KEYS;\n+        String key = null;\n         if (object instanceof PlainSchema) {\n-            schemaName = ((PlainSchema) object).getKey();\n+            key = ((PlainSchema) object).getKey();\n         } else if (object instanceof DerSchema) {\n-            schemaName = ((DerSchema) object).getKey();\n+            key = ((DerSchema) object).getKey();\n         } else if (object instanceof VirSchema) {\n-            schemaName = ((VirSchema) object).getKey();\n-        } else {\n-            schemaName = null;\n-            unallowedNames = Collections.emptySet();\n+            key = ((VirSchema) object).getKey();\n         }\n \n-        boolean isValid = NAME_PATTERN.matcher(schemaName).matches();\n+        boolean isValid = KEY_PATTERN.matcher(key).matches();\n         if (!isValid) {\n             context.disableDefaultConstraintViolation();\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidName, \"Invalid Schema name\")).\n-                    addPropertyNode(\"name\").addConstraintViolation();\n-        } else if (unallowedNames.contains(schemaName)) {\n+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid schema key\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n+        } else if (JPAAnyUtils.matchesFieldName(key)) {\n             context.disableDefaultConstraintViolation();\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidName, \"Schema name not allowed: \" + schemaName)).\n-                    addPropertyNode(\"name\").addConstraintViolation();\n+                    getTemplate(EntityViolationType.InvalidKey, \"Schema key not allowed: \" + key)).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n \n             return false;\n         }"},{"sha":"675a30cc4f16d89294369c22ba6031af633b0ccd","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -22,6 +22,7 @@ under the License.\n \n   <SyncopeConf id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\"/>\n \n+  <SyncopeSchema id=\"password.cipher.algorithm\"/>\n   <PlainSchema id=\"password.cipher.algorithm\" type=\"String\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"56db89b9-119e-4923-a16e-f42823b90c66\" \n@@ -33,55 +34,63 @@ under the License.\n   + not existing: NotificationJob runs according to NotificationJob.DEFAULT_CRON_EXP\n   + provided as empty string: NotificationJob disabled\n   + provided as non-empty string: NotificationJob runs according to the given value -->\n+  <SyncopeSchema id=\"notificationjob.cronExpression\"/>\n   <PlainSchema id=\"notificationjob.cronExpression\" type=\"String\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"abd5a2d2-25ee-48b7-b5ca-76813b54a6f2\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"notificationjob.cronExpression\"/>\n   <CPlainAttrValue id=\"4828ea70-d151-4c16-b344-2d07b1956bee\"\n                    attribute_id=\"abd5a2d2-25ee-48b7-b5ca-76813b54a6f2\" stringValue=\"\"/>\n   \n+  <SyncopeSchema id=\"notification.maxRetries\"/>\n   <PlainSchema id=\"notification.maxRetries\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"0523d7e6-af13-4e1e-9edb-e35971aacee7\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"notification.maxRetries\"/>\n   <CPlainAttrValue id=\"010e2bdc-0094-4918-bac3-d0d5ea17b54a\"\n                    attribute_id=\"0523d7e6-af13-4e1e-9edb-e35971aacee7\" longValue=\"3\"/>\n \n+  <SyncopeSchema id=\"token.length\"/>\n   <PlainSchema id=\"token.length\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"58977caa-dcf7-4ae3-8591-7e3d0a395200\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"token.length\"/>\n   <CPlainAttrValue id=\"372e28e0-3af1-4774-b668-81aa84903b75\"\n                    attribute_id=\"58977caa-dcf7-4ae3-8591-7e3d0a395200\" longValue=\"256\"/>\n \n+  <SyncopeSchema id=\"token.expireTime\"/>\n   <PlainSchema id=\"token.expireTime\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"01f69abd-df85-4e1b-bb88-ad570594e045\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"token.expireTime\"/>\n   <CPlainAttrValue id=\"963970cf-4af6-46bb-875b-a1b758ac8d05\"\n                    attribute_id=\"01f69abd-df85-4e1b-bb88-ad570594e045\" longValue=\"60\"/>\n \n+  <SyncopeSchema id=\"selfRegistration.allowed\"/>\n   <PlainSchema id=\"selfRegistration.allowed\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"7b19cefa-d606-477c-8431-c9464f53fe8b\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"selfRegistration.allowed\"/>\n   <CPlainAttrValue id=\"c8b9a0f1-0168-4e2a-95b8-4819fc70e620\"\n                    attribute_id=\"7b19cefa-d606-477c-8431-c9464f53fe8b\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"passwordReset.allowed\"/>\n   <PlainSchema id=\"passwordReset.allowed\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"dc35cc97-6ed9-4bb2-bb3b-509f4cd8f3d3\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"passwordReset.allowed\"/>\n   <CPlainAttrValue id=\"b1ecea41-ab7c-4dd3-9e3e-b6baf0f98046\"\n                    attribute_id=\"dc35cc97-6ed9-4bb2-bb3b-509f4cd8f3d3\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"passwordReset.securityQuestion\"/>\n   <PlainSchema id=\"passwordReset.securityQuestion\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"e5a712ad-53fd-4102-ba55-fb45caed5f7b\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"passwordReset.securityQuestion\"/>\n   <CPlainAttrValue id=\"b5e8e79d-8039-4318-9698-fe5e181ebe98\"\n                    attribute_id=\"e5a712ad-53fd-4102-ba55-fb45caed5f7b\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"authentication.statuses\"/>\n   <PlainSchema id=\"authentication.statuses\" type=\"String\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"888ae8e1-a295-4ee2-a15e-31dbf6dfc3f9\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"authentication.statuses\"/>\n@@ -91,13 +100,15 @@ under the License.\n                    attribute_id=\"888ae8e1-a295-4ee2-a15e-31dbf6dfc3f9\" stringValue=\"active\"/>\n \n   <!-- Save user login date upon successful authentication -->\n+  <SyncopeSchema id=\"log.lastlogindate\"/>\n   <PlainSchema id=\"log.lastlogindate\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"9891c0a7-27ee-4215-9eea-ca32e580b4e4\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"log.lastlogindate\"/>\n   <CPlainAttrValue id=\"162dd874-0417-4bb9-9724-db1ff2952dd1\"\n                    attribute_id=\"9891c0a7-27ee-4215-9eea-ca32e580b4e4\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"tasks.interruptMaxRetries\"/>\n   <PlainSchema id=\"tasks.interruptMaxRetries\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"c2b9ca96-c6ef-433d-8287-0e0cfd0ad0db\"\n@@ -106,6 +117,7 @@ under the License.\n                    attribute_id=\"c2b9ca96-c6ef-433d-8287-0e0cfd0ad0db\" longValue=\"20\"/>\n   \n   <!-- Return hashed password values when reading users -->\n+  <SyncopeSchema id=\"return.password.value\"/>\n   <PlainSchema id=\"return.password.value\" type=\"Boolean\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"bcfd7efc-0605-4b5e-b4bb-85c1d5f6493a\"\n@@ -122,6 +134,7 @@ under the License.\n   <AnyType_AnyTypeClass anyType_id=\"GROUP\" anyTypeClass_id=\"BaseGroup\"/>\n         \n   <!-- Actual plain schemas -->\n+  <SyncopeSchema id=\"email\"/>\n   <PlainSchema id=\"email\" type=\"String\" anyTypeClass_id=\"BaseUser\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n@@ -165,13 +178,13 @@ we are happy to inform you that the password request was execute successfully fo\n &lt;/body&gt;\n &lt;/html&gt;\"/>\n \n-  <Notification id=\"e00945b5-1184-4d43-8e45-4318a8dcdfd4\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n+  <Notification id=\"e00945b5-1184-4d43-8e45-4318a8dcdfd4\" active=\"1\" recipientAttrName=\"email\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template_id=\"requestPasswordReset\" \n                 traceLevel=\"FAILURES\"/> \n   <AnyAbout id=\"a328f2e6-25e9-4cc1-badf-7425d7be4b39\" anyType_id=\"USER\" notification_id=\"e00945b5-1184-4d43-8e45-4318a8dcdfd4\" filter=\"token!=$null\"/>\n   <Notification_events notification_id=\"e00945b5-1184-4d43-8e45-4318a8dcdfd4\" event=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n   \n-  <Notification id=\"bef0c250-e8a7-4848-bb63-2564fc409ce2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n+  <Notification id=\"bef0c250-e8a7-4848-bb63-2564fc409ce2\" active=\"1\" recipientAttrName=\"email\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template_id=\"confirmPasswordReset\" \n                 traceLevel=\"FAILURES\"/> \n   <Notification_events notification_id=\"bef0c250-e8a7-4848-bb63-2564fc409ce2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>"},{"sha":"511a3595ffaf8968634742d468a07d3220cd22fb","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConfTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -114,7 +114,7 @@ public void issueSYNCOPE418() {\n \n             fail();\n         } catch (InvalidEntityException e) {\n-            assertTrue(e.hasViolation(EntityViolationType.InvalidName));\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidKey));\n         }\n     }\n }"},{"sha":"97764b830464c3c7f935d224602cd78b94a6a5db","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -94,7 +94,7 @@ public void issueSYNCOPE418() {\n             derSchemaDAO.save(schema);\n             fail();\n         } catch (InvalidEntityException e) {\n-            assertTrue(e.hasViolation(EntityViolationType.InvalidName));\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidKey));\n         }\n     }\n }"},{"sha":"b2ef43c5c37c0abd5ac389aa0cd8eaf9a2163d40","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/NotificationTest.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FNotificationTest.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -23,7 +23,6 @@\n import static org.junit.Assert.assertNull;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n@@ -78,7 +77,6 @@ public void save() {\n         notification.setRecipientsFIQL(\"fake recipients\");\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notification.setSender(\"syncope@syncope.apache.org\");\n         notification.setSubject(\"Test notification\");\n@@ -109,7 +107,6 @@ public void issueSYNCOPE445() {\n         notification.setRecipientsFIQL(\"fake search condition\");\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notification.getStaticRecipients().add(\"syncope445@syncope.apache.org\");\n \n@@ -136,7 +133,6 @@ public void issueSYNCOPE446() {\n         about.set(\"fake search condition\");\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notification.getStaticRecipients().add(\"syncope446@syncope.apache.org\");\n "},{"sha":"722eb5f0f63aa44036b27a47dda681f6ef016d4b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -101,13 +101,12 @@ public void checkForEnumType() {\n         schema.setType(AttrSchemaType.Enum);\n         schema.setKey(\"color\");\n \n-        Exception ex = null;\n         try {\n             plainSchemaDAO.save(schema);\n+            fail();\n         } catch (Exception e) {\n-            ex = e;\n+            assertNotNull(e);\n         }\n-        assertNotNull(ex);\n \n         schema.setEnumerationValues(\"red\" + SyncopeConstants.ENUM_VALUES_SEPARATOR + \"yellow\");\n         schema.setEnumerationKeys(\"1\" + SyncopeConstants.ENUM_VALUES_SEPARATOR + \"2\");\n@@ -146,7 +145,7 @@ public void issueSYNCOPE418() {\n             plainSchemaDAO.save(schema);\n             fail();\n         } catch (InvalidEntityException e) {\n-            assertTrue(e.hasViolation(EntityViolationType.InvalidName));\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidKey));\n         }\n     }\n }"},{"sha":"e08833f1ae80b44b164e51952d4dc5303864b1ee","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":2,"deletions":28,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -26,12 +26,9 @@\n import static org.junit.Assert.fail;\n \n import java.util.List;\n-import java.util.UUID;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -120,7 +117,6 @@ public void save() {\n         MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n         connObjectKey.setExtAttrName(\"username\");\n         connObjectKey.setIntAttrName(\"fullname\");\n-        connObjectKey.setIntMappingType(IntMappingType.UserKey);\n         connObjectKey.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(connObjectKey);\n \n@@ -157,7 +153,6 @@ public void saveInvalidMappingIntAttr() {\n \n         MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n         connObjectKey.setConnObjectKey(true);\n-        connObjectKey.setIntMappingType(IntMappingType.UserPlainSchema);\n         mapping.add(connObjectKey);\n \n         // save the resource\n@@ -184,7 +179,6 @@ public void saveInvalidConnObjectKeyMapping() {\n \n         MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n         connObjectKey.setConnObjectKey(true);\n-        connObjectKey.setIntMappingType(IntMappingType.UserVirtualSchema);\n         mapping.setConnObjectKeyItem(connObjectKey);\n \n         // save the resource\n@@ -212,12 +206,10 @@ public void saveInvalidMappingExtAttr() {\n         MappingItem item = entityFactory.newEntity(MappingItem.class);\n         item.setConnObjectKey(true);\n         item.setIntAttrName(\"fullname\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         mapping.add(item);\n \n         item = entityFactory.newEntity(MappingItem.class);\n         item.setIntAttrName(\"userId\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         mapping.add(item);\n \n         resourceDAO.save(resource);\n@@ -241,7 +233,6 @@ public void saveInvalidProvision() {\n         MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n         connObjectKey.setExtAttrName(\"username\");\n         connObjectKey.setIntAttrName(\"fullname\");\n-        connObjectKey.setIntMappingType(IntMappingType.UserKey);\n         connObjectKey.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(connObjectKey);\n \n@@ -277,12 +268,10 @@ public void saveVirtualMapping() {\n         MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n         connObjectKey.setExtAttrName(\"username\");\n         connObjectKey.setIntAttrName(\"fullname\");\n-        connObjectKey.setIntMappingType(IntMappingType.UserKey);\n         connObjectKey.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(connObjectKey);\n \n         MappingItem virtualMapItem = entityFactory.newEntity(MappingItem.class);\n-        virtualMapItem.setIntMappingType(IntMappingType.UserVirtualSchema);\n         virtualMapItem.setIntAttrName(\"virtualReadOnly\");\n         virtualMapItem.setExtAttrName(\"TEST\");\n         virtualMapItem.setPurpose(MappingPurpose.BOTH);\n@@ -324,40 +313,26 @@ public void saveWithGroupMappingType() {\n         MappingItem item = entityFactory.newEntity(MappingItem.class);\n         item.setIntAttrName(\"fullname\");\n         item.setExtAttrName(\"fullname\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n         item = entityFactory.newEntity(MappingItem.class);\n         item.setIntAttrName(\"icon\");\n         item.setExtAttrName(\"icon\");\n-        item.setIntMappingType(IntMappingType.GroupPlainSchema);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n \n         item = entityFactory.newEntity(MappingItem.class);\n         item.setIntAttrName(\"mderiveddata\");\n         item.setExtAttrName(\"mderiveddata\");\n-        item.setIntMappingType(IntMappingType.AnyObjectDerivedSchema);\n         item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.add(item);\n \n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n         assertNotNull(actual);\n \n-        int items = 0;\n-        for (MappingItem mapItem : actual.getProvision(anyTypeDAO.findUser()).getMapping().getItems()) {\n-            items++;\n-\n-            if (\"icon\".equals(mapItem.getIntAttrName())) {\n-                assertTrue(IntMappingType.contains(AnyTypeKind.GROUP, mapItem.getIntMappingType().toString()));\n-            }\n-            if (\"mderiveddata\".equals(mapItem.getIntAttrName())) {\n-                assertTrue(IntMappingType.contains(AnyTypeKind.ANY_OBJECT, mapItem.getIntMappingType().toString()));\n-            }\n-        }\n-        assertEquals(3, items);\n+        assertEquals(3, actual.getProvision(anyTypeDAO.findUser()).getMapping().getItems().size());\n     }\n \n     @Test\n@@ -380,7 +355,7 @@ public void issueSYNCOPE418() {\n             resourceDAO.save(resource);\n             fail();\n         } catch (InvalidEntityException e) {\n-            assertTrue(e.hasViolation(EntityViolationType.InvalidName));\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidKey));\n         }\n     }\n \n@@ -405,7 +380,6 @@ public void issueSYNCOPE645() {\n         final MappingItem item = entityFactory.newEntity(MappingItem.class);\n         item.setIntAttrName(\"icon\");\n         item.setExtAttrName(\"icon\");\n-        item.setIntMappingType(IntMappingType.GroupPlainSchema);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n "},{"sha":"192ef0ff2f476aa8cd4007d51aba3bddd55df0f1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -107,7 +107,7 @@ public void issueSYNCOPE418() {\n             virSchemaDAO.save(schema);\n             fail();\n         } catch (InvalidEntityException e) {\n-            assertTrue(e.hasViolation(EntityViolationType.InvalidName));\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidKey));\n         }\n     }\n }"},{"sha":"b93acbb6705cf4328f4ed2b93a31631c759c1e99","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -23,11 +23,15 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.HashSet;\n import java.util.Set;\n import java.util.UUID;\n+import javax.persistence.EntityExistsException;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -53,12 +57,32 @@ public class PlainSchemaTest extends AbstractTest {\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n     @Autowired\n     private PlainAttrDAO plainAttrDAO;\n \n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    @Test\n+    public void checkIdUniqueness() {\n+        assertNotNull(derSchemaDAO.find(\"cn\"));\n+\n+        PlainSchema schema = entityFactory.newEntity(PlainSchema.class);\n+        schema.setKey(\"cn\");\n+        schema.setType(AttrSchemaType.String);\n+        plainSchemaDAO.save(schema);\n+\n+        try {\n+            plainSchemaDAO.flush();\n+            fail();\n+        } catch (Exception e) {\n+            assertTrue(e instanceof EntityExistsException);\n+        }\n+    }\n+\n     @Test\n     public void deleteFullname() {\n         // fullname is mapped as ConnObjectKey for ws-target-resource-2, need to swap it otherwise validation errors "},{"sha":"efe23497d8478f5812efebf2bf28cec9d84f2ccf","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -29,7 +29,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -132,7 +131,6 @@ public void save() {\n             MappingItem item = entityFactory.newEntity(MappingItem.class);\n             item.setExtAttrName(\"test\" + i);\n             item.setIntAttrName(\"nonexistent\" + i);\n-            item.setIntMappingType(IntMappingType.UserPlainSchema);\n             item.setMandatoryCondition(\"false\");\n             item.setPurpose(MappingPurpose.PULL);\n             mapping.add(item);\n@@ -141,7 +139,6 @@ public void save() {\n         MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n         connObjectKey.setExtAttrName(\"username\");\n         connObjectKey.setIntAttrName(\"username\");\n-        connObjectKey.setIntMappingType(IntMappingType.UserKey);\n         connObjectKey.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.setConnObjectKeyItem(connObjectKey);\n         connObjectKey.setMapping(mapping);\n@@ -151,7 +148,6 @@ public void save() {\n         derived.setConnObjectKey(false);\n         derived.setExtAttrName(\"fullname\");\n         derived.setIntAttrName(\"cn\");\n-        derived.setIntMappingType(IntMappingType.UserDerivedSchema);\n         derived.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.add(derived);\n         derived.setMapping(mapping);\n@@ -299,7 +295,6 @@ public void issue243() {\n         int origMapItems = csv.getProvision(anyTypeDAO.findUser()).getMapping().getItems().size();\n \n         MappingItem newMapItem = entityFactory.newEntity(MappingItem.class);\n-        newMapItem.setIntMappingType(IntMappingType.Username);\n         newMapItem.setExtAttrName(\"TEST\");\n         newMapItem.setPurpose(MappingPurpose.PROPAGATION);\n         csv.getProvision(anyTypeDAO.findUser()).getMapping().add(newMapItem);"},{"sha":"7b00f82bf0ffb7e57b7feee28ab573abde0d5a2f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/VirSchemaTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -23,7 +23,6 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n@@ -74,7 +73,6 @@ public void deal() {\n \n         MappingItem item = virSchema.asLinkingMappingItem();\n         assertNotNull(item);\n-        assertEquals(IntMappingType.UserVirtualSchema, item.getIntMappingType());\n         assertEquals(virSchema.getKey(), item.getIntAttrName());\n     }\n }"},{"sha":"2ff33108c97b70a4ffdf6ee871c3b284487d5b35","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":119,"deletions":68,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -22,6 +22,7 @@ under the License.\n   \n   <SyncopeConf id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\"/>\n \n+  <SyncopeSchema id=\"password.cipher.algorithm\"/>\n   <PlainSchema id=\"password.cipher.algorithm\" type=\"String\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"56db89b9-119e-4923-a16e-f42823b90c66\" \n@@ -33,55 +34,63 @@ under the License.\n   + not existing: NotificationJob runs according to NotificationJob.DEFAULT_CRON_EXP\n   + provided as empty string: NotificationJob disabled\n   + provided as non-empty string: NotificationJob runs according to the given value -->\n+  <SyncopeSchema id=\"notificationjob.cronExpression\"/>\n   <PlainSchema id=\"notificationjob.cronExpression\" type=\"String\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"abd5a2d2-25ee-48b7-b5ca-76813b54a6f2\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"notificationjob.cronExpression\"/>\n   <CPlainAttrValue id=\"4828ea70-d151-4c16-b344-2d07b1956bee\"\n                    attribute_id=\"abd5a2d2-25ee-48b7-b5ca-76813b54a6f2\" stringValue=\"0/20 * * * * ?\"/>\n   \n+  <SyncopeSchema id=\"notification.maxRetries\"/>\n   <PlainSchema id=\"notification.maxRetries\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"0523d7e6-af13-4e1e-9edb-e35971aacee7\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"notification.maxRetries\"/>\n   <CPlainAttrValue id=\"010e2bdc-0094-4918-bac3-d0d5ea17b54a\"\n                    attribute_id=\"0523d7e6-af13-4e1e-9edb-e35971aacee7\" longValue=\"3\"/>\n \n+  <SyncopeSchema id=\"token.length\"/>\n   <PlainSchema id=\"token.length\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"58977caa-dcf7-4ae3-8591-7e3d0a395200\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"token.length\"/>\n   <CPlainAttrValue id=\"372e28e0-3af1-4774-b668-81aa84903b75\"\n                    attribute_id=\"58977caa-dcf7-4ae3-8591-7e3d0a395200\" longValue=\"256\"/>\n \n+  <SyncopeSchema id=\"token.expireTime\"/>\n   <PlainSchema id=\"token.expireTime\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"01f69abd-df85-4e1b-bb88-ad570594e045\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"token.expireTime\"/>\n   <CPlainAttrValue id=\"963970cf-4af6-46bb-875b-a1b758ac8d05\"\n                    attribute_id=\"01f69abd-df85-4e1b-bb88-ad570594e045\" longValue=\"60\"/>\n \n+  <SyncopeSchema id=\"selfRegistration.allowed\"/>\n   <PlainSchema id=\"selfRegistration.allowed\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"7b19cefa-d606-477c-8431-c9464f53fe8b\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"selfRegistration.allowed\"/>\n   <CPlainAttrValue id=\"c8b9a0f1-0168-4e2a-95b8-4819fc70e620\"\n                    attribute_id=\"7b19cefa-d606-477c-8431-c9464f53fe8b\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"passwordReset.allowed\"/>\n   <PlainSchema id=\"passwordReset.allowed\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"dc35cc97-6ed9-4bb2-bb3b-509f4cd8f3d3\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"passwordReset.allowed\"/>\n   <CPlainAttrValue id=\"b1ecea41-ab7c-4dd3-9e3e-b6baf0f98046\"\n                    attribute_id=\"dc35cc97-6ed9-4bb2-bb3b-509f4cd8f3d3\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"passwordReset.securityQuestion\"/>\n   <PlainSchema id=\"passwordReset.securityQuestion\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"e5a712ad-53fd-4102-ba55-fb45caed5f7b\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"passwordReset.securityQuestion\"/>\n   <CPlainAttrValue id=\"b5e8e79d-8039-4318-9698-fe5e181ebe98\"\n                    attribute_id=\"e5a712ad-53fd-4102-ba55-fb45caed5f7b\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"authentication.statuses\"/>\n   <PlainSchema id=\"authentication.statuses\" type=\"String\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"888ae8e1-a295-4ee2-a15e-31dbf6dfc3f9\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"authentication.statuses\"/>\n@@ -91,13 +100,15 @@ under the License.\n                    attribute_id=\"888ae8e1-a295-4ee2-a15e-31dbf6dfc3f9\" stringValue=\"active\"/>\n \n   <!-- Save user login date upon successful authentication -->\n+  <SyncopeSchema id=\"log.lastlogindate\"/>\n   <PlainSchema id=\"log.lastlogindate\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"9891c0a7-27ee-4215-9eea-ca32e580b4e4\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"log.lastlogindate\"/>\n   <CPlainAttrValue id=\"162dd874-0417-4bb9-9724-db1ff2952dd1\"\n                    attribute_id=\"9891c0a7-27ee-4215-9eea-ca32e580b4e4\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"tasks.interruptMaxRetries\"/>\n   <PlainSchema id=\"tasks.interruptMaxRetries\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"c2b9ca96-c6ef-433d-8287-0e0cfd0ad0db\"\n@@ -106,6 +117,7 @@ under the License.\n                    attribute_id=\"c2b9ca96-c6ef-433d-8287-0e0cfd0ad0db\" longValue=\"20\"/>\n   \n   <!-- Return hashed password values when reading users -->\n+  <SyncopeSchema id=\"return.password.value\"/>\n   <PlainSchema id=\"return.password.value\" type=\"Boolean\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"bcfd7efc-0605-4b5e-b4bb-85c1d5f6493a\"\n@@ -339,85 +351,121 @@ under the License.\n   <UMembership id=\"8cfb78fc-d0e7-4f08-a0ae-d7abf3223b6f\"\n                user_id=\"823074dc-d280-436d-a7dd-07399fae48ec\" group_id=\"ece66293-8f31-4a84-8e8d-23da36e70846\"/>\n \n+  <SyncopeSchema id=\"fullname\"/>\n   <PlainSchema id=\"fullname\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"userId\"/>\n   <PlainSchema id=\"userId\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"\n                validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n+  <SyncopeSchema id=\"loginDate\"/>\n   <PlainSchema id=\"loginDate\" type=\"Date\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n                conversionPattern=\"yyyy-MM-dd\"/>\n+  <SyncopeSchema id=\"firstname\"/>\n   <PlainSchema id=\"firstname\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"surname\"/>\n   <PlainSchema id=\"surname\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"ctype\"/>\n   <PlainSchema id=\"ctype\" type=\"String\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"email\"/>\n   <PlainSchema id=\"email\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n+  <SyncopeSchema id=\"activationDate\"/>\n   <PlainSchema id=\"activationDate\" type=\"Date\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n+  <SyncopeSchema id=\"uselessReadonly\"/>\n   <PlainSchema id=\"uselessReadonly\" type=\"String\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"1\"/>\n+  <SyncopeSchema id=\"cool\"/>\n   <PlainSchema id=\"cool\" type=\"Boolean\" anyTypeClass_id=\"other\" \n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"gender\"/>\n   <PlainSchema id=\"gender\" type=\"Enum\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                enumerationValues=\"M;F\"/>\n+  <SyncopeSchema id=\"aLong\"/>\n   <PlainSchema id=\"aLong\" type=\"Long\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"makeItDouble\"/>\n   <PlainSchema id=\"makeItDouble\" type=\"Long\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"obscure\"/>\n   <PlainSchema id=\"obscure\" type=\"Encrypted\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                secretKey=\"7abcdefghilmnopqrstuvz9#\" cipherAlgorithm=\"SHA\"/>\n+  <SyncopeSchema id=\"photo\"/>\n   <PlainSchema id=\"photo\" type=\"Binary\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                mimeType=\"image/jpeg\"/>\n \n+  <SyncopeSchema id=\"csvuserid\"/>\n   <DerSchema id=\"csvuserid\" expression=\"firstname + ',' + surname\" anyTypeClass_id=\"csv\"/>\n+  <SyncopeSchema id=\"cn\"/>\n   <DerSchema id=\"cn\" expression=\"surname + ', ' + firstname\" anyTypeClass_id=\"minimal user\"/>\n+  <SyncopeSchema id=\"noschema\"/>\n   <DerSchema id=\"noschema\" expression=\"surname + ', ' + notfound\" anyTypeClass_id=\"other\"/>\n+  <SyncopeSchema id=\"info\"/>\n   <DerSchema id=\"info\" expression=\"username + ' - ' + creationDate + '[' + failedLogins + ']'\" anyTypeClass_id=\"minimal user\"/>\n \n+  <SyncopeSchema id=\"icon\"/>\n   <PlainSchema id=\"icon\" type=\"String\" anyTypeClass_id=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>                \n+  <SyncopeSchema id=\"show\"/>\n   <PlainSchema id=\"show\" type=\"Boolean\" anyTypeClass_id=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"rderived_sx\"/>\n   <PlainSchema id=\"rderived_sx\" type=\"String\" anyTypeClass_id=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"rderived_dx\"/>\n   <PlainSchema id=\"rderived_dx\" type=\"String\" anyTypeClass_id=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>           \n+  <SyncopeSchema id=\"title\"/>\n   <PlainSchema id=\"title\" type=\"String\" anyTypeClass_id=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n+  <SyncopeSchema id=\"rderiveddata\"/>\n   <DerSchema id=\"rderiveddata\" expression=\"rderived_sx + '-' + rderived_dx\"\n              anyTypeClass_id=\"minimal group\"/>\n+  <SyncopeSchema id=\"displayProperty\"/>\n   <DerSchema id=\"displayProperty\" expression=\"icon + ': ' + show\"\n              anyTypeClass_id=\"minimal group\"/>\n+  <SyncopeSchema id=\"rderToBePropagated\"/>\n   <DerSchema id=\"rderToBePropagated\" expression=\"rderived_sx + '-' + rderived_dx\"\n              anyTypeClass_id=\"minimal group\"/>\n \n+  <SyncopeSchema id=\"rderivedschema\"/>\n   <DerSchema id=\"rderivedschema\" expression=\"rderived_sx + '-' + rderived_dx\"  anyTypeClass_id=\"minimal group\"/>\n \n+  <SyncopeSchema id=\"subscriptionDate\"/>\n   <PlainSchema id=\"subscriptionDate\" type=\"Date\" anyTypeClass_id=\"generic membership\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n+  <SyncopeSchema id=\"mderived_sx\"/>\n   <PlainSchema id=\"mderived_sx\" type=\"String\" anyTypeClass_id=\"generic membership\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"mderived_dx\"/>\n   <PlainSchema id=\"mderived_dx\" type=\"String\" anyTypeClass_id=\"generic membership\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>          \n+  <SyncopeSchema id=\"postalAddress\"/>\n   <PlainSchema id=\"postalAddress\" type=\"String\" anyTypeClass_id=\"generic membership\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n+  <SyncopeSchema id=\"mderiveddata\"/>\n   <DerSchema id=\"mderiveddata\" expression=\"mderived_sx + '-' + mderived_dx\"/>\n+  <SyncopeSchema id=\"mderToBePropagated\"/>\n   <DerSchema id=\"mderToBePropagated\" expression=\"mderived_sx + '-' + mderived_dx\" \n              anyTypeClass_id=\"generic membership\"/>\n         \n+  <SyncopeSchema id=\"model\"/>\n   <PlainSchema id=\"model\" type=\"String\" anyTypeClass_id=\"minimal printer\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <SyncopeSchema id=\"location\"/>\n   <PlainSchema id=\"location\" type=\"String\" anyTypeClass_id=\"minimal printer\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n     \n@@ -708,116 +756,116 @@ under the License.\n   <Provision id=\"209ea85f-f964-49c7-a498-6c9c2baa3bd8\" resource_id=\"ws-target-resource-1\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"bc0cf27b-16b7-4e83-a4b0-09af7ea4aacc\" provision_id=\"209ea85f-f964-49c7-a498-6c9c2baa3bd8\"/>\n   <MappingItem id=\"96aad4e0-2678-4903-a52f-0a7d090a2863\" mapping_id=\"bc0cf27b-16b7-4e83-a4b0-09af7ea4aacc\" extAttrName=\"userId\"\n-               intMappingType=\"Username\" mandatoryCondition=\"true\"\n+               intAttrName=\"username\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"7f55b09c-b573-41dc-a9eb-ccd80bd3ea7a\" extAttrName=\"email\" mapping_id=\"bc0cf27b-16b7-4e83-a4b0-09af7ea4aacc\"\n-               intAttrName=\"email\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"email\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"a9749641-0556-49e2-a519-9bec35a4e06e\" extAttrName=\"surname\" mapping_id=\"bc0cf27b-16b7-4e83-a4b0-09af7ea4aacc\"\n-               intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"surname\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"d118671c-2e3e-4aa3-a3dd-fde2ba4c4ded\" mapping_id=\"bc0cf27b-16b7-4e83-a4b0-09af7ea4aacc\"\n-               extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n+               extAttrName=\"__PASSWORD__\" intAttrName=\"password\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"1\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"dca9de4f-9a5a-4280-8e9a-357e321ba7a5\" mapping_id=\"bc0cf27b-16b7-4e83-a4b0-09af7ea4aacc\" \n-               extAttrName=\"fullname\" intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               extAttrName=\"fullname\" intAttrName=\"surname\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"471f0e2e-2bde-4442-9abf-0effb533f2ee\" mapping_id=\"bc0cf27b-16b7-4e83-a4b0-09af7ea4aacc\"\n-               extAttrName=\"type\" intAttrName=\"ctype\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               extAttrName=\"type\" intAttrName=\"ctype\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"72324cda-a66c-4ffe-b6b6-1d9b6cee9bf2\" mapping_id=\"bc0cf27b-16b7-4e83-a4b0-09af7ea4aacc\"\n-               extAttrName=\"name\" intAttrName=\"firstname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n+               extAttrName=\"name\" intAttrName=\"firstname\" mandatoryCondition=\"false\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"NONE\"/>\n   \n   <Provision id=\"41a53a00-0b35-4047-831a-d5238f74c7ba\" resource_id=\"ws-target-resource-list-mappings-1\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"bf8afa4a-1522-44b9-91d0-c7b035e4fd99\" provision_id=\"41a53a00-0b35-4047-831a-d5238f74c7ba\"/>\n   <MappingItem id=\"6f8d7b42-44f4-4697-aff5-1736c4b01ee4\" mapping_id=\"bf8afa4a-1522-44b9-91d0-c7b035e4fd99\"\n-               extAttrName=\"email\" intAttrName=\"email\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               extAttrName=\"email\" intAttrName=\"email\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"8515e385-3bf1-4928-adc9-489dee65829a\" extAttrName=\"surname\"\n                mapping_id=\"bf8afa4a-1522-44b9-91d0-c7b035e4fd99\"\n-               intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"surname\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n \n   <Provision id=\"09a65250-d9de-44b1-9412-11ed996d356d\" resource_id=\"ws-target-resource-list-mappings-2\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"b12c4fad-f0f1-406d-b143-f2d68ed28e3a\" provision_id=\"09a65250-d9de-44b1-9412-11ed996d356d\"/>\n   <MappingItem id=\"55a4cf7f-ac96-4e8b-931c-2d0eab6a6bca\" mapping_id=\"b12c4fad-f0f1-406d-b143-f2d68ed28e3a\"\n-               extAttrName=\"userId\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               extAttrName=\"userId\" intAttrName=\"userId\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n \n   <Provision id=\"3d75991b-caee-4993-8e46-afb13d1bfbd4\" resource_id=\"ws-target-resource-2\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"240a0291-f89d-4557-a547-2a3b9aad625b\" provision_id=\"3d75991b-caee-4993-8e46-afb13d1bfbd4\"/>\n   <MappingItem id=\"d5c4d467-cd18-4148-8195-015808b4b3e6\" mapping_id=\"240a0291-f89d-4557-a547-2a3b9aad625b\"\n-               extAttrName=\"fullname\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               extAttrName=\"fullname\" intAttrName=\"fullname\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"370a8673-f3f7-4328-a9ce-acd946f687c5\" mapping_id=\"240a0291-f89d-4557-a547-2a3b9aad625b\"\n-               extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n+               extAttrName=\"__PASSWORD__\" intAttrName=\"password\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"1\" purpose=\"BOTH\"/>\n   <MappingItem id=\"c8d1a47a-1846-47b8-9f68-30aa21e94dcc\" extAttrName=\"type\" mapping_id=\"240a0291-f89d-4557-a547-2a3b9aad625b\"\n-               intAttrName=\"ctype\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"ctype\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"f0a06b24-7d4d-480e-8188-e53045885569\" extAttrName=\"surname\" mapping_id=\"240a0291-f89d-4557-a547-2a3b9aad625b\"\n-               intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"type == 'F'\"\n+               intAttrName=\"surname\" mandatoryCondition=\"type == 'F'\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"adc3c628-27b3-4740-be01-2f83c210ace9\" extAttrName=\"name\" mapping_id=\"240a0291-f89d-4557-a547-2a3b9aad625b\"\n-               intAttrName=\"virtualdata\" intMappingType=\"UserVirtualSchema\" mandatoryCondition=\"type == 'F'\"\n+               intAttrName=\"virtualdata\" mandatoryCondition=\"type == 'F'\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"6972a78b-2570-45d9-bc0b-31d2f2f9c860\" extAttrName=\"fullname\" mapping_id=\"240a0291-f89d-4557-a547-2a3b9aad625b\"\n-               intAttrName=\"cn\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"cn\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n     \n   <Provision id=\"9ebc3237-49fa-4dce-9a4c-3070e931812f\" resource_id=\"ws-target-resource-update\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"c17813c0-4e90-4118-bb28-cd36ad6d5a4d\" provision_id=\"9ebc3237-49fa-4dce-9a4c-3070e931812f\"/>\n   <MappingItem id=\"cc973ed6-d031-4790-adab-fc059ac0c818\" extAttrName=\"email\" mapping_id=\"c17813c0-4e90-4118-bb28-cd36ad6d5a4d\"\n-               intAttrName=\"email\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n+               intAttrName=\"email\" mandatoryCondition=\"false\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"7a72c812-1897-4db0-bed4-4e7e8ea51afe\" extAttrName=\"userId\" mapping_id=\"c17813c0-4e90-4118-bb28-cd36ad6d5a4d\"\n-               intAttrName=\"userId\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n+               intAttrName=\"userId\" mandatoryCondition=\"false\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"946a3c7f-6359-4ab7-8a5f-adb08bdb4b5b\" extAttrName=\"test3\" mapping_id=\"c17813c0-4e90-4118-bb28-cd36ad6d5a4d\"\n-               intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n+               intAttrName=\"fullname\" mandatoryCondition=\"false\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n     \n   <Provision id=\"8680bc79-dfa1-4719-9886-1d582bf1124f\" resource_id=\"ws-target-resource-nopropagation\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"63ddd4c8-efed-4a22-a4b4-1f4e6f47c8d0\" provision_id=\"8680bc79-dfa1-4719-9886-1d582bf1124f\"/>\n   <MappingItem id=\"ffcfbb5e-7bbd-489a-a69e-2dd84f00731a\" mapping_id=\"63ddd4c8-efed-4a22-a4b4-1f4e6f47c8d0\" extAttrName=\"fullname\" \n-               intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"fullname\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n                      \n   <Provision id=\"0bfa7c3e-2bb3-43d7-ac0e-d57cff7a18c8\" resource_id=\"ws-target-resource-nopropagation2\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"3f636292-6edb-4d20-ab24-fe0c5fc3dec3\" provision_id=\"0bfa7c3e-2bb3-43d7-ac0e-d57cff7a18c8\"/>\n   <MappingItem id=\"e34928b8-ca57-4b6c-81c1-70bc87ff3fdc\" mapping_id=\"3f636292-6edb-4d20-ab24-fe0c5fc3dec3\" extAttrName=\"fullname\" \n-               intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"fullname\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n                      \n   <Provision id=\"5bd76fec-f8d7-4ab9-acd7-89e099d534e8\" resource_id=\"ws-target-resource-nopropagation3\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"c2a0cec1-32c4-4493-8f01-d1176e557fc1\" provision_id=\"5bd76fec-f8d7-4ab9-acd7-89e099d534e8\"/>\n   <MappingItem id=\"f3ba0859-b0f0-44a5-abfd-4a1a5ca29fbf\" mapping_id=\"c2a0cec1-32c4-4493-8f01-d1176e557fc1\" extAttrName=\"fullname\"\n-               intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"fullname\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n                      \n   <Provision id=\"18de6376-7051-4216-96f0-26629076abb9\" resource_id=\"ws-target-resource-nopropagation4\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"906452d9-3eeb-4ef7-ac90-5ffc14513fbf\" provision_id=\"18de6376-7051-4216-96f0-26629076abb9\"/>\n   <MappingItem id=\"118\" mapping_id=\"906452d9-3eeb-4ef7-ac90-5ffc14513fbf\"\n-               extAttrName=\"fullname\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               extAttrName=\"fullname\" intAttrName=\"fullname\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n                        \n   <Provision id=\"779fefb5-dd25-4078-915d-3c199ee32158\" resource_id=\"resource-testdb\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"cb624b93-874b-40a0-8021-3b8116b781ab\" provision_id=\"779fefb5-dd25-4078-915d-3c199ee32158\"/>\n   <MappingItem id=\"1e0d30cd-2569-4a80-b9dc-af1467bd1c0b\" mapping_id=\"cb624b93-874b-40a0-8021-3b8116b781ab\"\n-               extAttrName=\"ID\" intMappingType=\"Username\" mandatoryCondition=\"true\"\n+               extAttrName=\"ID\" intAttrName=\"username\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"7fd1a178-77a1-4c4c-aca2-3c3f1834b77b\" mapping_id=\"cb624b93-874b-40a0-8021-3b8116b781ab\"\n-               extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n+               extAttrName=\"__PASSWORD__\" intAttrName=\"password\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"1\" purpose=\"BOTH\"/>\n                      \n   <Provision id=\"0359084d-68fe-4bf8-b42b-2ebe4f578ae7\" resource_id=\"resource-testdb2\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"935a0fc2-4a0b-4d82-9931-3c5ce44a33c1\" provision_id=\"0359084d-68fe-4bf8-b42b-2ebe4f578ae7\"/>\n   <MappingItem id=\"6d90658a-f470-4450-912d-6fe7d3bcda46\" mapping_id=\"935a0fc2-4a0b-4d82-9931-3c5ce44a33c1\" extAttrName=\"ID\" \n-               intMappingType=\"Username\" mandatoryCondition=\"true\"\n+               intAttrName=\"username\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"2fb9eb01-50df-456e-86c1-b55f68cde2da\" mapping_id=\"935a0fc2-4a0b-4d82-9931-3c5ce44a33c1\" extAttrName=\"__PASSWORD__\" \n-               intMappingType=\"Password\" mandatoryCondition=\"true\"\n+               intAttrName=\"password\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"1\" purpose=\"PROPAGATION\"/>\n                          \n   <Provision id=\"2adb6537-e207-4d9b-804f-90bf18cd6f48\" resource_id=\"resource-csv\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n@@ -826,44 +874,44 @@ under the License.\n   <Provision_AnyTypeClass provision_id=\"2adb6537-e207-4d9b-804f-90bf18cd6f48\" anyTypeClass_id=\"minimal group\"/>\n   <Mapping id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\" provision_id=\"2adb6537-e207-4d9b-804f-90bf18cd6f48\"/>\n   <MappingItem id=\"517dc983-99a2-43c9-b4b4-78fd838e5ad1\" extAttrName=\"id\" mapping_id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\"\n-               intMappingType=\"Username\" mandatoryCondition=\"true\"\n+               intAttrName=\"username\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"ba6fb125-466e-4109-8e5d-133936437674\" extAttrName=\"id\" mapping_id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\"\n-               intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"fullname\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"c426b070-0290-42be-9ee1-4046c7649635\" mapping_id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\"\n-               extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n+               extAttrName=\"__PASSWORD__\" intAttrName=\"password\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"1\" purpose=\"BOTH\"/>\n   <MappingItem id=\"20dbe358-5b71-4edd-8670-2bbde982e5c4\" extAttrName=\"name\" mapping_id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\"\n-               intAttrName=\"firstname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n+               intAttrName=\"firstname\" mandatoryCondition=\"false\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"4d70850e-9fc5-4e75-83ea-432fe090e1c0\" extAttrName=\"surname\" mapping_id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\"\n-               intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n+               intAttrName=\"surname\" mandatoryCondition=\"false\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"4b2f4292-d8ab-4948-a341-3f8c9e23e72d\" extAttrName=\"email\" mapping_id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\"\n-               intAttrName=\"userId\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"userId\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PULL\"/>\n   <MappingItem id=\"20d6c914-54e7-4968-b1fc-685ae9c2c4a4\" extAttrName=\"email\" mapping_id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\"\n-               intAttrName=\"email\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"email\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PULL\"/>\n   <MappingItem id=\"09237f39-0d45-4258-a7cc-2400f7536b72\" extAttrName=\"__NAME__\" mapping_id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\"\n-               intAttrName=\"csvuserid\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n+               intAttrName=\"csvuserid\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"63151b89-2eb3-4980-a682-0215d54ab4a2\" extAttrName=\"theirgroup\" mapping_id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\"\n-               intAttrName=\"rderToBePropagated\" intMappingType=\"GroupDerivedSchema\" mandatoryCondition=\"false\"\n+               intAttrName=\"rderToBePropagated\" mandatoryCondition=\"false\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"b6079a7b-ac40-481d-81c9-2a292bab0092\" extAttrName=\"membership\" mapping_id=\"538c27dc-d260-4c53-9fc8-bf02ee226911\"\n-               intAttrName=\"mderToBePropagated\" intMappingType=\"AnyObjectDerivedSchema\" mandatoryCondition=\"false\"\n+               intAttrName=\"mderToBePropagated\" mandatoryCondition=\"false\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n                          \n   <Provision id=\"1b53c74e-6a63-49ef-b2f1-96eeb7f1bbb8\" resource_id=\"ws-target-resource-update-resetsynctoken\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"\n              serializedSyncToken='{\"value\":null}'/>\n   <Mapping id=\"23e20ce6-1ff9-495e-aa59-a58e5127a008\" provision_id=\"1b53c74e-6a63-49ef-b2f1-96eeb7f1bbb8\"/>\n   <MappingItem id=\"608f01c5-eb7c-462a-b4d6-b7c3c9632a50\" mapping_id=\"23e20ce6-1ff9-495e-aa59-a58e5127a008\"\n-               extAttrName=\"userId\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n+               extAttrName=\"userId\" intAttrName=\"userId\" mandatoryCondition=\"false\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"79ada054-5f8b-4e77-b405-bfec58b06e7b\" mapping_id=\"23e20ce6-1ff9-495e-aa59-a58e5127a008\"\n-               extAttrName=\"__PASSWORD__\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n+               extAttrName=\"__PASSWORD__\" intAttrName=\"fullname\" mandatoryCondition=\"false\"\n                connObjectKey=\"0\" password=\"1\" purpose=\"BOTH\"/>\n \n   <Provision id=\"8b938d63-aa92-448c-89a8-a685fc0a67c8\" resource_id=\"resource-ldap\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n@@ -872,105 +920,108 @@ under the License.\n   <Mapping id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\" provision_id=\"8b938d63-aa92-448c-89a8-a685fc0a67c8\"\n            connObjectLink=\"&apos;uid=&apos; + username + &apos;,ou=people,o=isp&apos;\"/>\n   <MappingItem id=\"9ff7d686-452c-4cec-a475-c1137c5d88c7\" connObjectKey=\"1\" password=\"0\" mapping_id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\"\n-               extAttrName=\"cn\" intAttrName=\"Username\" intMappingType=\"Username\"\n+               extAttrName=\"cn\" intAttrName=\"Username\" intAttrName=\"username\"\n                mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n   <MappingItem id=\"73d97083-cfda-44e6-be62-3f9ac558b5eb\" connObjectKey=\"0\" password=\"1\" mapping_id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\"\n-               extAttrName=\"__PASSWORD__\" intAttrName=\"Password\" intMappingType=\"Password\"\n+               extAttrName=\"__PASSWORD__\" intAttrName=\"Password\" intAttrName=\"password\"\n                mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n   <MappingItem id=\"cf0a222c-36ea-41e6-987c-7908614ccd23\" connObjectKey=\"0\" password=\"0\" mapping_id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\"\n-               extAttrName=\"sn\" intAttrName=\"surname\" intMappingType=\"UserPlainSchema\"\n+               extAttrName=\"sn\" intAttrName=\"surname\"\n                mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n   <MappingItem id=\"b3a12364-e471-4e37-83ad-476c33a43617\" connObjectKey=\"0\" password=\"0\" mapping_id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\"\n-               extAttrName=\"cn\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\"\n+               extAttrName=\"cn\" intAttrName=\"fullname\"\n                mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n   <MappingItem id=\"aad2b7d7-3201-4bba-b496-f6587b4b7518\" connObjectKey=\"0\" password=\"0\" mapping_id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\"\n-               extAttrName=\"mail\" intAttrName=\"email\" intMappingType=\"UserPlainSchema\"\n+               extAttrName=\"mail\" intAttrName=\"email\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"81b83c98-127b-469b-a497-412ba50acbeb\" connObjectKey=\"0\" password=\"0\" mapping_id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\"\n-               extAttrName=\"title\" intAttrName=\"title\" intMappingType=\"GroupPlainSchema\"\n+               extAttrName=\"title\" intAttrName=\"title\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"318e92a1-3acb-49c5-b2fd-dba819c40ef1\" connObjectKey=\"0\" password=\"0\" mapping_id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\"\n-               extAttrName=\"postalAddress\" intAttrName=\"postalAddress\" intMappingType=\"UserPlainSchema\"\n+               extAttrName=\"postalAddress\" intAttrName=\"postalAddress\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"78fa504f-213c-41ac-a922-7c9f98e5ce11\" connObjectKey=\"0\" password=\"0\" mapping_id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\"\n-               extAttrName=\"mail\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\"\n+               extAttrName=\"mail\" intAttrName=\"userId\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"af6085cb-d0e8-47c9-b5f9-4b7d491a9750\" connObjectKey=\"0\" password=\"0\" mapping_id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\"\n-               extAttrName=\"registeredAddress\" intAttrName=\"obscure\" intMappingType=\"UserPlainSchema\"\n+               extAttrName=\"registeredAddress\" intAttrName=\"obscure\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"5bb62bd2-5007-4eb8-b4f9-9df8917dc767\" connObjectKey=\"0\" password=\"0\" mapping_id=\"ae1c77c3-2f1d-4258-ad06-710bb09041a9\"\n-               extAttrName=\"jpegPhoto\" intAttrName=\"photo\" intMappingType=\"UserPlainSchema\"\n+               extAttrName=\"jpegPhoto\" intAttrName=\"photo\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n         \n+  <SyncopeSchema id=\"virtualReadOnly\"/>\n   <VirSchema id=\"virtualReadOnly\" READONLY=\"1\" anyTypeClass_id=\"minimal user\"\n              provision_id=\"8b938d63-aa92-448c-89a8-a685fc0a67c8\" extAttrName=\"givenname\"/>\n \n   <Provision id=\"20a75199-3f2e-4b9a-9510-c68dd7fc7b3d\" resource_id=\"resource-ldap\" anyType_id=\"GROUP\" objectClass=\"__GROUP__\"/>\n   <Mapping id=\"128412c8-be4f-4d7b-8bed-5ab89134f718\" provision_id=\"20a75199-3f2e-4b9a-9510-c68dd7fc7b3d\"\n            connObjectLink=\"&apos;cn=&apos; + name + &apos;,ou=groups,o=isp&apos;\"/>\n   <MappingItem id=\"1\" connObjectKey=\"1\" password=\"0\" mapping_id=\"128412c8-be4f-4d7b-8bed-5ab89134f718\"\n-               extAttrName=\"cn\" intAttrName=\"groupName\" intMappingType=\"GroupName\"\n+               extAttrName=\"cn\" intAttrName=\"name\"\n                mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n   <MappingItem id=\"2\" connObjectKey=\"0\" password=\"0\" mapping_id=\"128412c8-be4f-4d7b-8bed-5ab89134f718\"\n-               extAttrName=\"owner\" intAttrName=\"groupOwnerSchema\" intMappingType=\"GroupOwnerSchema\"\n+               extAttrName=\"owner\" intAttrName=\"owner\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"3\" connObjectKey=\"0\" password=\"0\" mapping_id=\"128412c8-be4f-4d7b-8bed-5ab89134f718\"\n-               extAttrName=\"description\" intAttrName=\"title\" intMappingType=\"GroupPlainSchema\"\n+               extAttrName=\"description\" intAttrName=\"title\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   \n+  <SyncopeSchema id=\"rvirtualdata\"/>\n   <VirSchema id=\"rvirtualdata\" anyTypeClass_id=\"minimal group\" provision_id=\"20a75199-3f2e-4b9a-9510-c68dd7fc7b3d\" extAttrName=\"businessCategory\"/>\n \n   <Provision id=\"46b54e2a-e43e-4cd7-8c13-1af1bd65c3d3\" resource_id=\"resource-db-pull\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"cda910bd-fc28-4f63-890e-66edc62d428b\" provision_id=\"46b54e2a-e43e-4cd7-8c13-1af1bd65c3d3\"/>\n   <MappingItem id=\"1a345706-a498-41bb-a948-820307a4365e\" connObjectKey=\"0\" mapping_id=\"cda910bd-fc28-4f63-890e-66edc62d428b\"\n-               extAttrName=\"EMAIL\" intAttrName=\"email\" intMappingType=\"UserPlainSchema\" \n+               extAttrName=\"EMAIL\" intAttrName=\"email\" \n                mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"a234bde8-b431-408c-8ec9-c986c5b7f98d\" connObjectKey=\"0\" mapping_id=\"cda910bd-fc28-4f63-890e-66edc62d428b\"\n-               extAttrName=\"SURNAME\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" \n+               extAttrName=\"SURNAME\" intAttrName=\"fullname\" \n                mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"51a856de-ae25-41cd-967a-86920c834b70\" connObjectKey=\"1\" mapping_id=\"cda910bd-fc28-4f63-890e-66edc62d428b\"\n-               extAttrName=\"ID\" intAttrName=\"firstname\" intMappingType=\"UserPlainSchema\" \n+               extAttrName=\"ID\" intAttrName=\"firstname\" \n                mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"f4e5178e-ef37-4949-933a-7ec7eaea64c6\" connObjectKey=\"0\" mapping_id=\"cda910bd-fc28-4f63-890e-66edc62d428b\"\n-               extAttrName=\"SURNAME\" intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" \n+               extAttrName=\"SURNAME\" intAttrName=\"surname\" \n                mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"3ac0ecaf-d9a1-4fc1-9ae9-84dc34576810\" connObjectKey=\"0\" mapping_id=\"cda910bd-fc28-4f63-890e-66edc62d428b\"\n-               extAttrName=\"USERNAME\" intAttrName=\"Username\" intMappingType=\"Username\" \n+               extAttrName=\"USERNAME\" intAttrName=\"Username\" intAttrName=\"username\" \n                mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"e7215305-93c9-460b-b862-46f7b60de72d\" connObjectKey=\"0\" mapping_id=\"cda910bd-fc28-4f63-890e-66edc62d428b\"\n-               extAttrName=\"EMAIL\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\" \n+               extAttrName=\"EMAIL\" intAttrName=\"userId\" \n                mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n               \n   <Provision id=\"6d7cb60a-c4ad-4a70-94ae-e5b88eb24930\" resource_id=\"resource-db-virattr\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"45280585-308f-4571-9788-c7a4734b3614\" provision_id=\"6d7cb60a-c4ad-4a70-94ae-e5b88eb24930\"/>\n   <MappingItem id=\"6cb2f9f0-5fb4-4686-a375-31e2c34a6cd8\" mapping_id=\"45280585-308f-4571-9788-c7a4734b3614\" connObjectKey=\"1\" password=\"0\"\n-               extAttrName=\"ID\" intMappingType=\"UserKey\" \n+               extAttrName=\"ID\" intAttrName=\"key\" \n                mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n                 \n+  <SyncopeSchema id=\"virtualdata\"/>\n   <VirSchema id=\"virtualdata\" anyTypeClass_id=\"minimal user\" provision_id=\"6d7cb60a-c4ad-4a70-94ae-e5b88eb24930\" extAttrName=\"USERNAME\"/>\n   \n   <Provision id=\"cfa86cbe-94b6-4712-a40a-a4861be1d425\" resource_id=\"ws-target-resource-timeout\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"c71d690a-3dd9-48a5-b76f-32805186c4dc\" provision_id=\"cfa86cbe-94b6-4712-a40a-a4861be1d425\"/>\n   <MappingItem id=\"321bc904-e1fc-4a54-bf7c-74c8cbcc0815\" mapping_id=\"c71d690a-3dd9-48a5-b76f-32805186c4dc\" connObjectKey=\"1\" password=\"0\"\n-               extAttrName=\"fullname\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\"\n+               extAttrName=\"fullname\" intAttrName=\"fullname\"\n                mandatoryCondition=\"true\" purpose=\"PROPAGATION\"/>\n   \n   <Provision id=\"ac1659dc-3ea3-45eb-8ae6-626e3d916492\" resource_id=\"ws-target-resource-delete\" anyType_id=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"72f590ae-2754-456b-aabb-eda7d8459dd3\" provision_id=\"ac1659dc-3ea3-45eb-8ae6-626e3d916492\"/>\n   <MappingItem id=\"4c98536f-10df-4953-b2df-59d7cd057fd2\" mapping_id=\"72f590ae-2754-456b-aabb-eda7d8459dd3\" extAttrName=\"userId\" \n-               intMappingType=\"Username\" mandatoryCondition=\"true\"\n+               intAttrName=\"username\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n \n   <Provision id=\"f1b55b66-eb13-4a93-a49c-448e93756eb6\" resource_id=\"resource-db-scripted\" anyType_id=\"PRINTER\" objectClass=\"__PRINTER__\"/>\n   <Mapping id=\"16439b5f-50c3-4604-97e9-f4004933abd8\" provision_id=\"f1b55b66-eb13-4a93-a49c-448e93756eb6\"/>\n   <MappingItem id=\"23aa0299-ddbb-4e59-8918-0ab2a32465fa\" mapping_id=\"16439b5f-50c3-4604-97e9-f4004933abd8\" extAttrName=\"ID\" \n-               intMappingType=\"AnyObjectKey\" mandatoryCondition=\"true\"\n+               intAttrName=\"key\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"3dc96af0-5d0a-4ec1-be84-244716d88401\" mapping_id=\"16439b5f-50c3-4604-97e9-f4004933abd8\" extAttrName=\"PRINTERNAME\" \n-               intMappingType=\"AnyObjectName\" mandatoryCondition=\"true\"\n+               intAttrName=\"name\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"f3ef9f8b-e667-4b18-969f-ba98c3d78bc0\" mapping_id=\"16439b5f-50c3-4604-97e9-f4004933abd8\" extAttrName=\"LOCATION\" \n-               intAttrName=\"location\" intMappingType=\"AnyObjectPlainSchema\"\n+               intAttrName=\"location\"\n                mandatoryCondition=\"false\" connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n     \n   <Task DTYPE=\"PropagationTask\" id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" operation=\"UPDATE\"\n@@ -1171,7 +1222,7 @@ $$ }&#10;\"\n &lt;p&gt;\n     This message was sent to the following recipients:\n &lt;ul&gt;&#10;\n-$$ for (recipient: recipients) {&#10;\n+$$ for (recipient: recipients) {&#10;Na\n   &lt;li&gt;${recipient.plainAttrMap[&quot;email&quot;].values[0]}&lt;/li&gt;&#10;\n $$ }&#10;\n &lt;/ul&gt;&#10;\n@@ -1195,7 +1246,7 @@ $$ }&#10;\n &lt;/body&gt;\n &lt;/html&gt;\"/>\n \n-  <Notification id=\"e00945b5-1184-4d43-8e45-4318a8dcdfd4\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n+  <Notification id=\"e00945b5-1184-4d43-8e45-4318a8dcdfd4\" active=\"1\" recipientAttrName=\"email\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template_id=\"requestPasswordReset\" \n                 traceLevel=\"FAILURES\"/> \n   <AnyAbout id=\"a328f2e6-25e9-4cc1-badf-7425d7be4b39\" anyType_id=\"USER\" notification_id=\"e00945b5-1184-4d43-8e45-4318a8dcdfd4\" filter=\"token!=$null\"/>\n@@ -1205,15 +1256,15 @@ $$ }&#10;\n         textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <NotificationTask_recipients notificationTask_id=\"e1e520f0-2cbd-4e11-9a89-ea58a0f957e7\" address=\"recipient@prova.org\"/>  \n   \n-  <Notification id=\"bef0c250-e8a7-4848-bb63-2564fc409ce2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n+  <Notification id=\"bef0c250-e8a7-4848-bb63-2564fc409ce2\" active=\"1\" recipientAttrName=\"email\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template_id=\"confirmPasswordReset\" \n                 traceLevel=\"FAILURES\"/> \n   <Notification_events notification_id=\"bef0c250-e8a7-4848-bb63-2564fc409ce2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n \n   <Notification id=\"9e2b911c-25de-4c77-bcea-b86ed9451050\" sender=\"test@syncope.apache.org\" subject=\"Test subject\" template_id=\"test\" selfAsRecipient=\"0\" \n                 traceLevel=\"FAILURES\"\n                 recipientsFIQL=\"$groups==7\"\n-                recipientAttrType=\"UserPlainSchema\" recipientAttrName=\"email\" active=\"1\"/>\n+                recipientAttrName=\"email\" active=\"1\"/>\n   <AnyAbout id=\"2e2ee845-2abf-43c6-b543-49243a84e2f1\" anyType_id=\"USER\" notification_id=\"9e2b911c-25de-4c77-bcea-b86ed9451050\" filter=\"fullname==*o*;fullname==*i*\"/>\n   <Notification_events notification_id=\"9e2b911c-25de-4c77-bcea-b86ed9451050\" event=\"[CUSTOM]:[]:[]:[unexisting1]:[FAILURE]\"/>\n   <Notification_events notification_id=\"9e2b911c-25de-4c77-bcea-b86ed9451050\" event=\"[CUSTOM]:[]:[]:[unexisting2]:[SUCCESS]\"/>"},{"sha":"3d8d0a5e83401780fca717c4bfb84a814f3d772b","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -22,48 +22,55 @@ under the License.\n \n   <SyncopeConf id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\"/>\n \n+  <SyncopeSchema id=\"password.cipher.algorithm\"/>\n   <PlainSchema id=\"password.cipher.algorithm\" type=\"String\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"56db89b9-119e-4923-a16e-f42823b90c66\" \n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"password.cipher.algorithm\"/>\n   <CPlainAttrValue id=\"870323e8-8db6-4a64-b512-15f9fa094905\" \n                    attribute_id=\"56db89b9-119e-4923-a16e-f42823b90c66\" stringValue=\"SHA1\"/>\n \n+  <SyncopeSchema id=\"token.length\"/>\n   <PlainSchema id=\"token.length\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"58977caa-dcf7-4ae3-8591-7e3d0a395200\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"token.length\"/>\n   <CPlainAttrValue id=\"372e28e0-3af1-4774-b668-81aa84903b75\"\n                    attribute_id=\"58977caa-dcf7-4ae3-8591-7e3d0a395200\" longValue=\"256\"/>\n \n+  <SyncopeSchema id=\"token.expireTime\"/>\n   <PlainSchema id=\"token.expireTime\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"01f69abd-df85-4e1b-bb88-ad570594e045\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"token.expireTime\"/>\n   <CPlainAttrValue id=\"963970cf-4af6-46bb-875b-a1b758ac8d05\"\n                    attribute_id=\"01f69abd-df85-4e1b-bb88-ad570594e045\" longValue=\"60\"/>\n \n+  <SyncopeSchema id=\"selfRegistration.allowed\"/>\n   <PlainSchema id=\"selfRegistration.allowed\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"7b19cefa-d606-477c-8431-c9464f53fe8b\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"selfRegistration.allowed\"/>\n   <CPlainAttrValue id=\"c8b9a0f1-0168-4e2a-95b8-4819fc70e620\"\n                    attribute_id=\"7b19cefa-d606-477c-8431-c9464f53fe8b\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"passwordReset.allowed\"/>\n   <PlainSchema id=\"passwordReset.allowed\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"dc35cc97-6ed9-4bb2-bb3b-509f4cd8f3d3\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"passwordReset.allowed\"/>\n   <CPlainAttrValue id=\"b1ecea41-ab7c-4dd3-9e3e-b6baf0f98046\"\n                    attribute_id=\"dc35cc97-6ed9-4bb2-bb3b-509f4cd8f3d3\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"passwordReset.securityQuestion\"/>\n   <PlainSchema id=\"passwordReset.securityQuestion\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"e5a712ad-53fd-4102-ba55-fb45caed5f7b\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"passwordReset.securityQuestion\"/>\n   <CPlainAttrValue id=\"b5e8e79d-8039-4318-9698-fe5e181ebe98\"\n                    attribute_id=\"e5a712ad-53fd-4102-ba55-fb45caed5f7b\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"authentication.statuses\"/>\n   <PlainSchema id=\"authentication.statuses\" type=\"String\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"888ae8e1-a295-4ee2-a15e-31dbf6dfc3f9\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"authentication.statuses\"/>\n@@ -73,13 +80,15 @@ under the License.\n                    attribute_id=\"888ae8e1-a295-4ee2-a15e-31dbf6dfc3f9\" stringValue=\"active\"/>\n \n   <!-- Save user login date upon successful authentication -->\n+  <SyncopeSchema id=\"log.lastlogindate\"/>\n   <PlainSchema id=\"log.lastlogindate\" type=\"Boolean\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"9891c0a7-27ee-4215-9eea-ca32e580b4e4\"\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"log.lastlogindate\"/>\n   <CPlainAttrValue id=\"162dd874-0417-4bb9-9724-db1ff2952dd1\"\n                    attribute_id=\"9891c0a7-27ee-4215-9eea-ca32e580b4e4\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"tasks.interruptMaxRetries\"/>\n   <PlainSchema id=\"tasks.interruptMaxRetries\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"c2b9ca96-c6ef-433d-8287-0e0cfd0ad0db\"\n@@ -88,6 +97,7 @@ under the License.\n                    attribute_id=\"c2b9ca96-c6ef-433d-8287-0e0cfd0ad0db\" longValue=\"20\"/>\n   \n   <!-- Return hashed password values when reading users -->\n+  <SyncopeSchema id=\"return.password.value\"/>\n   <PlainSchema id=\"return.password.value\" type=\"Boolean\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"bcfd7efc-0605-4b5e-b4bb-85c1d5f6493a\"\n@@ -101,6 +111,7 @@ under the License.\n \n   <AnyType id=\"GROUP\" kind=\"GROUP\"/>\n         \n+  <SyncopeSchema id=\"email\"/>\n   <PlainSchema id=\"email\" type=\"String\" anyTypeClass_id=\"BaseUser\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>"},{"sha":"4beb5ce83b419c4359ba173fb91ace0acdb2a6ae","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrNameParser.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+\n+public final class IntAttrNameParser {\n+\n+    private static final Pattern ENCLOSING_GROUP_PATTERN = Pattern.compile(\"^groups\\\\[[\\\\w]+\\\\]\\\\.[\\\\w]+\");\n+\n+    private static final Pattern RELATED_ANY_OBJECT_PATTERN = Pattern.compile(\"^anyObjects\\\\[[\\\\w]+\\\\]\\\\.[\\\\w]+\");\n+\n+    private static final Pattern MEMBERSHIP_PATTERN = Pattern.compile(\"^\\\\[[\\\\w]+\\\\]\\\\.[\\\\w]+\");\n+\n+    public static class IntAttrName {\n+\n+        private AnyTypeKind anyTypeKind;\n+\n+        private String field;\n+\n+        private SchemaType schemaType;\n+\n+        private String schemaName;\n+\n+        private String enclosingGroup;\n+\n+        private String relatedAnyObject;\n+\n+        private String membershipOfGroup;\n+\n+        public AnyTypeKind getAnyTypeKind() {\n+            return anyTypeKind;\n+        }\n+\n+        public String getField() {\n+            return field;\n+        }\n+\n+        public SchemaType getSchemaType() {\n+            return schemaType;\n+        }\n+\n+        public String getSchemaName() {\n+            return schemaName;\n+        }\n+\n+        public String getEnclosingGroup() {\n+            return enclosingGroup;\n+        }\n+\n+        public String getRelatedAnyObject() {\n+            return relatedAnyObject;\n+        }\n+\n+        public String getMembershipOfGroup() {\n+            return membershipOfGroup;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return ToStringBuilder.reflectionToString(field, ToStringStyle.MULTI_LINE_STYLE);\n+        }\n+\n+    }\n+\n+    private static void setFieldOrSchemaName(\n+            final String fieldOrSchemaName, final AnyUtils anyUtils, final IntAttrName result) {\n+\n+        if (anyUtils.isFieldName(fieldOrSchemaName)) {\n+            result.field = fieldOrSchemaName;\n+        } else {\n+            result.schemaName = fieldOrSchemaName;\n+        }\n+    }\n+\n+    public static IntAttrName parse(\n+            final String intAttrName,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final AnyTypeKind provisionAnyTypeKind) {\n+\n+        IntAttrName result = new IntAttrName();\n+\n+        if (intAttrName.indexOf('.') == -1) {\n+            result.anyTypeKind = provisionAnyTypeKind;\n+            setFieldOrSchemaName(intAttrName, anyUtilsFactory.getInstance(provisionAnyTypeKind), result);\n+        } else {\n+            Matcher matcher = ENCLOSING_GROUP_PATTERN.matcher(intAttrName);\n+            if (matcher.matches()) {\n+                result.anyTypeKind = AnyTypeKind.GROUP;\n+                result.enclosingGroup = matcher.group(1);\n+                setFieldOrSchemaName(matcher.group(2), anyUtilsFactory.getInstance(AnyTypeKind.GROUP), result);\n+            } else {\n+                matcher = RELATED_ANY_OBJECT_PATTERN.matcher(intAttrName);\n+                if (matcher.matches()) {\n+                    result.anyTypeKind = AnyTypeKind.ANY_OBJECT;\n+                    result.relatedAnyObject = matcher.group(1);\n+                    setFieldOrSchemaName(matcher.group(2), anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT), result);\n+                } else {\n+                    matcher = MEMBERSHIP_PATTERN.matcher(intAttrName);\n+                    if (matcher.matches()) {\n+                        result.anyTypeKind = AnyTypeKind.USER;\n+                        result.membershipOfGroup = matcher.group(1);\n+                        setFieldOrSchemaName(matcher.group(2), anyUtilsFactory.getInstance(AnyTypeKind.USER), result);\n+                    } else {\n+                        throw new IllegalArgumentException(\"Unparsable expression: \" + intAttrName);\n+                    }\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private IntAttrNameParser() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"99c1ba89d8bd3246d6baf14b31333c67f6954914","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -44,11 +44,11 @@ public interface MappingManager {\n      * Get attribute values for the given {@link MappingItem} and any objects.\n      *\n      * @param provision provision information\n-     * @param mappingItem mapping item\n+     * @param mapItem mapping item\n      * @param anys any objects\n      * @return attribute values.\n      */\n-    List<PlainAttrValue> getIntValues(Provision provision, MappingItem mappingItem, List<Any<?>> anys);\n+    List<PlainAttrValue> getIntValues(Provision provision, MappingItem mapItem, List<Any<?>> anys);\n \n     /**\n      * Prepare attributes for sending to a connector instance.\n@@ -68,11 +68,11 @@ Pair<String, Set<Attribute>> prepareAttrs(\n      * connector.\n      *\n      * @param <T> any object\n-     * @param mappingItem mapping item\n+     * @param mapItem mapping item\n      * @param attr attribute received from connector\n      * @param anyTO any object\n      * @param anyUtils any utils\n      */\n-    <T extends AnyTO> void setIntValues(MappingItem mappingItem, Attribute attr, T anyTO, AnyUtils anyUtils);\n+    <T extends AnyTO> void setIntValues(MappingItem mapItem, Attribute attr, T anyTO, AnyUtils anyUtils);\n \n }"},{"sha":"e2f793aeb0f37a1f070ad2f884b203b5e30abb96","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":223,"deletions":278,"changes":501,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -74,6 +73,8 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser.IntAttrName;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n@@ -349,7 +350,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n         String connObjectKey = null;\n \n         for (MappingItem mappingItem : getMappingItems(provision, MappingPurpose.PROPAGATION)) {\n-            LOG.debug(\"Processing schema {}\", mappingItem.getIntAttrName());\n+            LOG.debug(\"Processing expression '{}'\", mappingItem.getIntAttrName());\n \n             try {\n                 Pair<String, Attribute> preparedAttr = prepareAttr(provision, mappingItem, any, password);\n@@ -373,7 +374,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n                     }\n                 }\n             } catch (Exception e) {\n-                LOG.debug(\"Attribute '{}' processing failed\", mappingItem.getIntAttrName(), e);\n+                LOG.debug(\"Expression '{}' processing failed\", mappingItem.getIntAttrName(), e);\n             }\n         }\n \n@@ -410,9 +411,12 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n     private Pair<String, Attribute> prepareAttr(\n             final Provision provision, final MappingItem mapItem, final Any<?> any, final String password) {\n \n+        IntAttrName intAttrName =\n+                IntAttrNameParser.parse(mapItem.getIntAttrName(), anyUtilsFactory, provision.getAnyType().getKind());\n+\n         List<Any<?>> anys = new ArrayList<>();\n \n-        switch (mapItem.getIntMappingType().getAnyTypeKind()) {\n+        switch (intAttrName.getAnyTypeKind()) {\n             case USER:\n                 if (any instanceof User) {\n                     anys.add(any);\n@@ -443,18 +447,14 @@ private Pair<String, Attribute> prepareAttr(\n         AttrSchemaType schemaType;\n         Pair<String, Attribute> result;\n \n-        switch (mapItem.getIntMappingType()) {\n-            case UserPlainSchema:\n-            case GroupPlainSchema:\n-            case AnyObjectPlainSchema:\n-                schema = plainSchemaDAO.find(mapItem.getIntAttrName());\n+        switch (intAttrName.getSchemaType()) {\n+            case PLAIN:\n+                schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n                 schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n                 break;\n \n-            case UserVirtualSchema:\n-            case GroupVirtualSchema:\n-            case AnyObjectVirtualSchema:\n-                schema = virSchemaDAO.find(mapItem.getIntAttrName());\n+            case VIRTUAL:\n+                schema = virSchemaDAO.find(intAttrName.getSchemaName());\n                 readOnlyVirSchema = (schema != null && schema.isReadonly());\n                 schemaType = AttrSchemaType.String;\n                 break;\n@@ -470,10 +470,9 @@ private Pair<String, Attribute> prepareAttr(\n         LOG.debug(\"Define mapping for: \"\n                 + \"\\n* ExtAttrName \" + extAttrName\n                 + \"\\n* is connObjectKey \" + mapItem.isConnObjectKey()\n-                + \"\\n* is password \" + (mapItem.isPassword() || mapItem.getIntMappingType() == IntMappingType.Password)\n+                + \"\\n* is password \" + mapItem.isPassword()\n                 + \"\\n* mandatory condition \" + mapItem.getMandatoryCondition()\n-                + \"\\n* Schema \" + mapItem.getIntAttrName()\n-                + \"\\n* IntMappingType \" + mapItem.getIntMappingType().toString()\n+                + \"\\n* Schema \" + intAttrName.getSchemaName()\n                 + \"\\n* ClassType \" + schemaType.getType().getName()\n                 + \"\\n* Values \" + values);\n \n@@ -518,8 +517,7 @@ private Pair<String, Attribute> prepareAttr(\n                             null, AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n                 }\n             } else if ((schema != null && schema.isMultivalue())\n-                    || anyUtilsFactory.getInstance(any).getAnyTypeKind()\n-                    != mapItem.getIntMappingType().getAnyTypeKind()) {\n+                    || anyUtilsFactory.getInstance(any).getAnyTypeKind() != intAttrName.getAnyTypeKind()) {\n \n                 result = new ImmutablePair<>(\n                         null, AttributeBuilder.build(extAttrName, objValues));\n@@ -541,184 +539,150 @@ private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n         return evaluateNAME(any, provision, connObjectKey).getNameValue();\n     }\n \n-    /**\n-     * Get attribute values for the given {@link MappingItem} and any objects.\n-     *\n-     * @param provision provision information\n-     * @param mappingItem mapping item\n-     * @param anys any objects\n-     * @return attribute values.\n-     */\n     @Transactional(readOnly = true)\n     @Override\n     public List<PlainAttrValue> getIntValues(\n-            final Provision provision, final MappingItem mappingItem, final List<Any<?>> anys) {\n+            final Provision provision, final MappingItem mapItem, final List<Any<?>> anys) {\n \n-        LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", anys, mappingItem.getIntMappingType());\n+        LOG.debug(\"Get attributes for '{}' and intAttrName '{}'\", anys, mapItem.getIntAttrName());\n \n-        boolean transform = true;\n+        IntAttrName intAttrName =\n+                IntAttrNameParser.parse(mapItem.getIntAttrName(), anyUtilsFactory, provision.getAnyType().getKind());\n \n         List<PlainAttrValue> values = new ArrayList<>();\n-        switch (mappingItem.getIntMappingType()) {\n-            case UserPlainSchema:\n-            case GroupPlainSchema:\n-            case AnyObjectPlainSchema:\n-                for (Any<?> any : anys) {\n-                    PlainAttr<?> attr = any.getPlainAttr(mappingItem.getIntAttrName());\n-                    if (attr != null) {\n-                        if (attr.getUniqueValue() != null) {\n-                            PlainAttrUniqueValue value = SerializationUtils.clone(attr.getUniqueValue());\n-                            value.setAttr(null);\n-                            values.add(value);\n-                        } else if (attr.getValues() != null) {\n-                            for (PlainAttrValue value : attr.getValues()) {\n-                                PlainAttrValue shadow = SerializationUtils.clone(value);\n-                                shadow.setAttr(null);\n-                                values.add(shadow);\n-                            }\n-                        }\n-                    }\n-\n-                    LOG.debug(\"Retrieved attribute {}\"\n-                            + \"\\n* IntAttrName {}\"\n-                            + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\",\n-                            attr, mappingItem.getIntAttrName(), mappingItem.getIntMappingType(), values);\n-                }\n+        boolean transform = true;\n \n-                break;\n+        if (intAttrName.getField() != null) {\n+            switch (intAttrName.getField()) {\n+                case \"key\":\n+                    for (Any<?> any : anys) {\n+                        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+                        PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                        attrValue.setStringValue(any.getKey());\n+                        values.add(attrValue);\n+                    }\n+                    break;\n \n-            case UserDerivedSchema:\n-            case GroupDerivedSchema:\n-            case AnyObjectDerivedSchema:\n-                DerSchema derSchema = derSchemaDAO.find(mappingItem.getIntAttrName());\n-                if (derSchema != null) {\n+                case \"username\":\n                     for (Any<?> any : anys) {\n-                        String value = derAttrHandler.getValue(any, derSchema);\n-                        if (value != null) {\n-                            AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                            attrValue.setStringValue(value);\n+                        if (any instanceof User) {\n+                            UPlainAttrValue attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n+                            attrValue.setStringValue(((User) any).getUsername());\n                             values.add(attrValue);\n-\n-                            LOG.debug(\"Retrieved values for {}\"\n-                                    + \"\\n* IntAttrName {}\"\n-                                    + \"\\n* IntMappingType {}\"\n-                                    + \"\\n* Attribute values {}\",\n-                                    derSchema.getKey(), mappingItem.getIntAttrName(), mappingItem.getIntMappingType(),\n-                                    values);\n                         }\n                     }\n-                }\n-                break;\n-\n-            case UserVirtualSchema:\n-            case GroupVirtualSchema:\n-            case AnyObjectVirtualSchema:\n-                // virtual attributes don't get transformed\n-                transform = false;\n+                    break;\n \n-                VirSchema virSchema = virSchemaDAO.find(mappingItem.getIntAttrName());\n-                if (virSchema != null) {\n+                case \"name\":\n                     for (Any<?> any : anys) {\n-                        LOG.debug(\"Expire entry cache {}-{}\", any.getKey(), mappingItem.getIntAttrName());\n-                        virAttrCache.expire(any.getType().getKey(), any.getKey(), mappingItem.getIntAttrName());\n-\n-                        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-                        for (String value : virAttrHandler.getValues(any, virSchema)) {\n-                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                            attrValue.setStringValue(value);\n+                        if (any instanceof Group) {\n+                            GPlainAttrValue attrValue = entityFactory.newEntity(GPlainAttrValue.class);\n+                            attrValue.setStringValue(((Group) any).getName());\n+                            values.add(attrValue);\n+                        } else if (any instanceof AnyObject) {\n+                            APlainAttrValue attrValue = entityFactory.newEntity(APlainAttrValue.class);\n+                            attrValue.setStringValue(((AnyObject) any).getName());\n                             values.add(attrValue);\n                         }\n-\n-                        LOG.debug(\"Retrieved values for {}\"\n-                                + \"\\n* IntAttrName {}\"\n-                                + \"\\n* IntMappingType {}\"\n-                                + \"\\n* Attribute values {}\",\n-                                virSchema.getKey(), mappingItem.getIntAttrName(), mappingItem.getIntMappingType(),\n-                                values);\n                     }\n-                }\n-                break;\n+                    break;\n \n-            case UserKey:\n-            case GroupKey:\n-            case AnyObjectKey:\n-                for (Any<?> any : anys) {\n-                    AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-                    PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                    attrValue.setStringValue(any.getKey());\n-                    values.add(attrValue);\n-                }\n-                break;\n+                case \"owner\":\n+                    Mapping uMapping = provision.getAnyType().equals(anyTypeDAO.findUser())\n+                            ? provision.getMapping()\n+                            : null;\n+                    Mapping gMapping = provision.getAnyType().equals(anyTypeDAO.findGroup())\n+                            ? provision.getMapping()\n+                            : null;\n \n-            case Username:\n-                for (Any<?> any : anys) {\n-                    if (any instanceof User) {\n-                        UPlainAttrValue attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n-                        attrValue.setStringValue(((User) any).getUsername());\n-                        values.add(attrValue);\n-                    }\n-                }\n-                break;\n+                    for (Any<?> any : anys) {\n+                        if (any instanceof Group) {\n+                            Group group = (Group) any;\n+                            String groupOwnerValue = null;\n+                            if (group.getUserOwner() != null && uMapping != null) {\n+                                groupOwnerValue = getGroupOwnerValue(provision, group.getUserOwner());\n+                            }\n+                            if (group.getGroupOwner() != null && gMapping != null) {\n+                                groupOwnerValue = getGroupOwnerValue(provision, group.getGroupOwner());\n+                            }\n \n-            case GroupName:\n-                for (Any<?> any : anys) {\n-                    if (any instanceof Group) {\n-                        GPlainAttrValue attrValue = entityFactory.newEntity(GPlainAttrValue.class);\n-                        attrValue.setStringValue(((Group) any).getName());\n-                        values.add(attrValue);\n+                            if (StringUtils.isNotBlank(groupOwnerValue)) {\n+                                GPlainAttrValue attrValue = entityFactory.newEntity(GPlainAttrValue.class);\n+                                attrValue.setStringValue(groupOwnerValue);\n+                                values.add(attrValue);\n+                            }\n+                        }\n                     }\n-                }\n-                break;\n+                    break;\n \n-            case GroupOwnerSchema:\n-                Mapping uMapping = provision.getAnyType().equals(anyTypeDAO.findUser())\n-                        ? provision.getMapping()\n-                        : null;\n-                Mapping gMapping = provision.getAnyType().equals(anyTypeDAO.findGroup())\n-                        ? provision.getMapping()\n-                        : null;\n-\n-                for (Any<?> any : anys) {\n-                    if (any instanceof Group) {\n-                        Group group = (Group) any;\n-                        String groupOwnerValue = null;\n-                        if (group.getUserOwner() != null && uMapping != null) {\n-                            groupOwnerValue = getGroupOwnerValue(provision, group.getUserOwner());\n-                        }\n-                        if (group.getGroupOwner() != null && gMapping != null) {\n-                            groupOwnerValue = getGroupOwnerValue(provision, group.getGroupOwner());\n+                default:\n+            }\n+        } else if (intAttrName.getSchemaType() != null) {\n+            switch (intAttrName.getSchemaType()) {\n+                case PLAIN:\n+                    for (Any<?> any : anys) {\n+                        PlainAttr<?> attr = any.getPlainAttr(intAttrName.getSchemaName());\n+                        if (attr != null) {\n+                            if (attr.getUniqueValue() != null) {\n+                                PlainAttrUniqueValue value = SerializationUtils.clone(attr.getUniqueValue());\n+                                value.setAttr(null);\n+                                values.add(value);\n+                            } else if (attr.getValues() != null) {\n+                                for (PlainAttrValue value : attr.getValues()) {\n+                                    PlainAttrValue shadow = SerializationUtils.clone(value);\n+                                    shadow.setAttr(null);\n+                                    values.add(shadow);\n+                                }\n+                            }\n                         }\n-\n-                        if (StringUtils.isNotBlank(groupOwnerValue)) {\n-                            GPlainAttrValue attrValue = entityFactory.newEntity(GPlainAttrValue.class);\n-                            attrValue.setStringValue(groupOwnerValue);\n-                            values.add(attrValue);\n+                    }\n+                    break;\n+\n+                case DERIVED:\n+                    DerSchema derSchema = derSchemaDAO.find(intAttrName.getSchemaName());\n+                    if (derSchema != null) {\n+                        for (Any<?> any : anys) {\n+                            String value = derAttrHandler.getValue(any, derSchema);\n+                            if (value != null) {\n+                                AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+                                PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                                attrValue.setStringValue(value);\n+                                values.add(attrValue);\n+                            }\n                         }\n                     }\n-                }\n-                break;\n+                    break;\n \n-            case AnyObjectName:\n-                for (Any<?> any : anys) {\n-                    if (any instanceof AnyObject) {\n-                        APlainAttrValue attrValue = entityFactory.newEntity(APlainAttrValue.class);\n-                        attrValue.setStringValue(((AnyObject) any).getName());\n-                        values.add(attrValue);\n+                case VIRTUAL:\n+                    // virtual attributes don't get transformed\n+                    transform = false;\n+\n+                    VirSchema virSchema = virSchemaDAO.find(intAttrName.getSchemaName());\n+                    if (virSchema != null) {\n+                        for (Any<?> any : anys) {\n+                            LOG.debug(\"Expire entry cache {}-{}\", any.getKey(), intAttrName.getSchemaName());\n+                            virAttrCache.expire(any.getType().getKey(), any.getKey(), intAttrName.getSchemaName());\n+\n+                            AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+                            for (String value : virAttrHandler.getValues(any, virSchema)) {\n+                                PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                                attrValue.setStringValue(value);\n+                                values.add(attrValue);\n+                            }\n+                        }\n                     }\n-                }\n-                break;\n+                    break;\n \n-            default:\n+                default:\n+            }\n         }\n \n         LOG.debug(\"Values for propagation: {}\", values);\n \n         List<PlainAttrValue> transformed = values;\n         if (transform) {\n-            for (MappingItemTransformer transformer : getMappingItemTransformers(mappingItem)) {\n-                transformed = transformer.beforePropagation(mappingItem, anys, transformed);\n+            for (MappingItemTransformer transformer : getMappingItemTransformers(mapItem)) {\n+                transformed = transformer.beforePropagation(mapItem, anys, transformed);\n             }\n             LOG.debug(\"Transformed values for propagation: {}\", values);\n         } else {\n@@ -728,13 +692,6 @@ public List<PlainAttrValue> getIntValues(\n         return transformed;\n     }\n \n-    /**\n-     * Get connObjectKey internal value.\n-     *\n-     * @param any any object\n-     * @param provision provision information\n-     * @return connObjectKey internal value\n-     */\n     @Transactional(readOnly = true)\n     @Override\n     public String getConnObjectKeyValue(final Any<?> any, final Provision provision) {\n@@ -745,146 +702,134 @@ public String getConnObjectKeyValue(final Any<?> any, final Provision provision)\n                 : values.get(0).getValueAsString();\n     }\n \n-    /**\n-     * Set attribute values, according to the given {@link MappingItem}, to any object from attribute received from\n-     * connector.\n-     *\n-     * @param mappingItem mapping item\n-     * @param attr attribute received from connector\n-     * @param anyTO any object\n-     * @param anyUtils any utils\n-     */\n     @Transactional(readOnly = true)\n     @Override\n     public void setIntValues(\n-            final MappingItem mappingItem, final Attribute attr, final AnyTO anyTO, final AnyUtils anyUtils) {\n+            final MappingItem mapItem, final Attribute attr, final AnyTO anyTO, final AnyUtils anyUtils) {\n \n         List<Object> values = null;\n         if (attr != null) {\n             values = attr.getValue();\n-            for (MappingItemTransformer transformer : getMappingItemTransformers(mappingItem)) {\n-                values = transformer.beforePull(mappingItem, anyTO, values);\n+            for (MappingItemTransformer transformer : getMappingItemTransformers(mapItem)) {\n+                values = transformer.beforePull(mapItem, anyTO, values);\n             }\n         }\n         values = ListUtils.emptyIfNull(values);\n \n-        switch (mappingItem.getIntMappingType()) {\n-            case UserKey:\n-            case GroupKey:\n-            case AnyObjectKey:\n-                break;\n-\n-            case Password:\n-                if (anyTO instanceof UserTO && !values.isEmpty()) {\n-                    ((UserTO) anyTO).setPassword(ConnObjectUtils.getPassword(values.get(0)));\n-                }\n-                break;\n-\n-            case Username:\n-                if (anyTO instanceof UserTO) {\n-                    ((UserTO) anyTO).setUsername(values.isEmpty() || values.get(0) == null\n-                            ? null\n-                            : values.get(0).toString());\n-                }\n-                break;\n+        IntAttrName intAttrName =\n+                IntAttrNameParser.parse(mapItem.getIntAttrName(), anyUtilsFactory, anyUtils.getAnyTypeKind());\n \n-            case GroupName:\n-                if (anyTO instanceof GroupTO) {\n-                    ((GroupTO) anyTO).setName(values.isEmpty() || values.get(0) == null\n-                            ? null\n-                            : values.get(0).toString());\n-                }\n-                break;\n+        if (intAttrName.getField() != null) {\n+            switch (intAttrName.getField()) {\n+                case \"key\":\n+                    break;\n \n-            case GroupOwnerSchema:\n-                if (anyTO instanceof GroupTO && attr != null) {\n-                    // using a special attribute (with schema \"\", that will be ignored) for carrying the\n-                    // GroupOwnerSchema value\n-                    AttrTO attrTO = new AttrTO();\n-                    attrTO.setSchema(StringUtils.EMPTY);\n-                    if (values.isEmpty() || values.get(0) == null) {\n-                        attrTO.getValues().add(StringUtils.EMPTY);\n-                    } else {\n-                        attrTO.getValues().add(values.get(0).toString());\n+                case \"password\":\n+                    if (anyTO instanceof UserTO && !values.isEmpty()) {\n+                        ((UserTO) anyTO).setPassword(ConnObjectUtils.getPassword(values.get(0)));\n                     }\n+                    break;\n \n-                    ((GroupTO) anyTO).getPlainAttrs().add(attrTO);\n-                }\n-                break;\n+                case \"username\":\n+                    if (anyTO instanceof UserTO) {\n+                        ((UserTO) anyTO).setUsername(values.isEmpty() || values.get(0) == null\n+                                ? null\n+                                : values.get(0).toString());\n+                    }\n+                    break;\n+\n+                case \"name\":\n+                    if (anyTO instanceof GroupTO) {\n+                        ((GroupTO) anyTO).setName(values.isEmpty() || values.get(0) == null\n+                                ? null\n+                                : values.get(0).toString());\n+                    } else if (anyTO instanceof AnyObjectTO) {\n+                        ((AnyObjectTO) anyTO).setName(values.isEmpty() || values.get(0) == null\n+                                ? null\n+                                : values.get(0).toString());\n+                    }\n+                    break;\n+\n+                case \"owner\":\n+                    if (anyTO instanceof GroupTO && attr != null) {\n+                        // using a special attribute (with schema \"\", that will be ignored) for carrying the\n+                        // GroupOwnerSchema value\n+                        AttrTO attrTO = new AttrTO();\n+                        attrTO.setSchema(StringUtils.EMPTY);\n+                        if (values.isEmpty() || values.get(0) == null) {\n+                            attrTO.getValues().add(StringUtils.EMPTY);\n+                        } else {\n+                            attrTO.getValues().add(values.get(0).toString());\n+                        }\n \n-            case AnyObjectName:\n-                if (anyTO instanceof AnyObjectTO) {\n-                    ((AnyObjectTO) anyTO).setName(values.isEmpty() || values.get(0) == null\n-                            ? null\n-                            : values.get(0).toString());\n-                }\n-                break;\n+                        ((GroupTO) anyTO).getPlainAttrs().add(attrTO);\n+                    }\n+                    break;\n \n-            case UserPlainSchema:\n-            case GroupPlainSchema:\n-            case AnyObjectPlainSchema:\n-                AttrTO attrTO = new AttrTO();\n-                attrTO.setSchema(mappingItem.getIntAttrName());\n+                default:\n+            }\n+        } else if (intAttrName.getSchemaType() != null) {\n+            switch (intAttrName.getSchemaType()) {\n+                case PLAIN:\n+                    AttrTO attrTO = new AttrTO();\n+                    attrTO.setSchema(intAttrName.getSchemaName());\n \n-                PlainSchema schema = plainSchemaDAO.find(mappingItem.getIntAttrName());\n+                    PlainSchema schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n \n-                for (Object value : values) {\n-                    AttrSchemaType schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n-                    if (value != null) {\n-                        PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                        switch (schemaType) {\n-                            case String:\n-                                attrValue.setStringValue(value.toString());\n-                                break;\n-\n-                            case Binary:\n-                                attrValue.setBinaryValue((byte[]) value);\n-                                break;\n-\n-                            default:\n-                                try {\n-                                    attrValue.parseValue(schema, value.toString());\n-                                } catch (ParsingValidationException e) {\n-                                    LOG.error(\"While parsing provided value {}\", value, e);\n+                    for (Object value : values) {\n+                        AttrSchemaType schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n+                        if (value != null) {\n+                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                            switch (schemaType) {\n+                                case String:\n                                     attrValue.setStringValue(value.toString());\n-                                    schemaType = AttrSchemaType.String;\n-                                }\n-                                break;\n+                                    break;\n+\n+                                case Binary:\n+                                    attrValue.setBinaryValue((byte[]) value);\n+                                    break;\n+\n+                                default:\n+                                    try {\n+                                        attrValue.parseValue(schema, value.toString());\n+                                    } catch (ParsingValidationException e) {\n+                                        LOG.error(\"While parsing provided value {}\", value, e);\n+                                        attrValue.setStringValue(value.toString());\n+                                        schemaType = AttrSchemaType.String;\n+                                    }\n+                                    break;\n+                            }\n+                            attrTO.getValues().add(attrValue.getValueAsString(schemaType));\n                         }\n-                        attrTO.getValues().add(attrValue.getValueAsString(schemaType));\n                     }\n-                }\n \n-                anyTO.getPlainAttrs().add(attrTO);\n-                break;\n+                    anyTO.getPlainAttrs().add(attrTO);\n+                    break;\n \n-            case UserDerivedSchema:\n-            case GroupDerivedSchema:\n-            case AnyObjectDerivedSchema:\n-                attrTO = new AttrTO();\n-                attrTO.setSchema(mappingItem.getIntAttrName());\n-                anyTO.getDerAttrs().add(attrTO);\n-                break;\n+                case DERIVED:\n+                    attrTO = new AttrTO();\n+                    attrTO.setSchema(intAttrName.getSchemaName());\n+                    anyTO.getDerAttrs().add(attrTO);\n+                    break;\n \n-            case UserVirtualSchema:\n-            case GroupVirtualSchema:\n-            case AnyObjectVirtualSchema:\n-                attrTO = new AttrTO();\n-                attrTO.setSchema(mappingItem.getIntAttrName());\n+                case VIRTUAL:\n+                    attrTO = new AttrTO();\n+                    attrTO.setSchema(intAttrName.getSchemaName());\n \n-                // virtual attributes don't get transformed, iterate over original attr.getValue()\n-                for (Object value : (attr == null || attr.getValue() == null)\n-                        ? Collections.emptyList() : attr.getValue()) {\n+                    // virtual attributes don't get transformed, iterate over original attr.getValue()\n+                    for (Object value : (attr == null || attr.getValue() == null)\n+                            ? Collections.emptyList() : attr.getValue()) {\n \n-                    if (value != null) {\n-                        attrTO.getValues().add(value.toString());\n+                        if (value != null) {\n+                            attrTO.getValues().add(value.toString());\n+                        }\n                     }\n-                }\n \n-                anyTO.getVirAttrs().add(attrTO);\n-                break;\n+                    anyTO.getVirAttrs().add(attrTO);\n+                    break;\n \n-            default:\n+                default:\n+            }\n         }\n     }\n }"},{"sha":"ca94e161cb01efa367f1fdde30bced88f01e66dc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":2,"deletions":14,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -26,7 +26,6 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -38,7 +37,6 @@\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -96,11 +94,6 @@ abstract class AbstractAnyDataBinder {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractAnyDataBinder.class);\n \n-    private static final IntMappingType[] FOR_MANDATORY = new IntMappingType[] {\n-        IntMappingType.AnyObjectPlainSchema, IntMappingType.AnyObjectDerivedSchema,\n-        IntMappingType.UserPlainSchema, IntMappingType.UserDerivedSchema,\n-        IntMappingType.GroupPlainSchema, IntMappingType.GroupDerivedSchema };\n-\n     @Autowired\n     protected RealmDAO realmDAO;\n \n@@ -224,10 +217,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n \n         if (provision != null) {\n             for (MappingItem item : provision.getMapping().getItems()) {\n-                if (ArrayUtils.contains(FOR_MANDATORY, item.getIntMappingType())\n-                        && (item.getPurpose() == MappingPurpose.PROPAGATION\n-                        || item.getPurpose() == MappingPurpose.BOTH)) {\n-\n+                if ((item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH)) {\n                     List<PlainAttrValue> values = mappingManager.getIntValues(\n                             provision, item, Collections.<Any<?>>singletonList(any));\n                     if (values.isEmpty() && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n@@ -351,9 +341,7 @@ protected void processAttrPatch(\n             for (MappingItem mapItem\n                     : MappingManagerImpl.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n \n-                if (schema.getKey().equals(mapItem.getIntAttrName())\n-                        && mapItem.getIntMappingType() == anyUtils.plainIntMappingType()) {\n-\n+                if (schema.getKey().equals(mapItem.getIntAttrName())) {\n                     propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n                     if (mapItem.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {"},{"sha":"a9de5bd77f6026c1996a725cddbf0b3aec36d8df","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.core.provisioning.api.data.NotificationDataBinder;\n import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n@@ -33,7 +34,9 @@\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -55,6 +58,9 @@ public class NotificationDataBinderImpl implements NotificationDataBinder {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n     @Override\n     public NotificationTO getNotificationTO(final Notification notification) {\n         NotificationTO result = new NotificationTO();\n@@ -118,5 +124,8 @@ public boolean evaluate(final AnyAbout anyAbout) {\n                 return notificationTO.getAbouts().containsKey(anyAbout.getAnyType().getKey());\n             }\n         });\n+\n+        // 3. verify recipientAttrName\n+        IntAttrNameParser.parse(notification.getRecipientAttrName(), anyUtilsFactory, AnyTypeKind.USER);\n     }\n }"},{"sha":"ddf5a14a4fb3d21b987e8531a84085c9bc298503","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":41,"deletions":35,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n@@ -48,11 +48,14 @@\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n@@ -86,6 +89,9 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n     @Override\n     public ExternalResource create(final ResourceTO resourceTO) {\n         return update(entityFactory.newEntity(ExternalResource.class), resourceTO);\n@@ -259,44 +265,37 @@ private void populateMapping(\n                 SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         for (MappingItemTO itemTO : mappingTO.getItems()) {\n-            if (itemTO == null || itemTO.getIntMappingType() == null) {\n-                LOG.error(\"Null {} or missing {}\",\n-                        MappingItemTO.class.getSimpleName(), IntMappingType.class.getSimpleName());\n-                invalidMapping.getElements().add(\n-                        \"Null \" + MappingItemTO.class.getSimpleName()\n-                        + \" or missing \" + IntMappingType.class.getSimpleName());\n+            if (itemTO == null) {\n+                LOG.error(\"Null {}\", MappingItemTO.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + MappingItemTO.class.getSimpleName());\n             } else {\n                 if (itemTO.getIntAttrName() == null) {\n-                    if (IntMappingType.getEmbedded().contains(itemTO.getIntMappingType())) {\n-                        itemTO.setIntAttrName(itemTO.getIntMappingType().toString());\n-                    } else {\n-                        requiredValuesMissing.getElements().add(\"intAttrName\");\n-                        scce.addException(requiredValuesMissing);\n-                    }\n+                    requiredValuesMissing.getElements().add(\"intAttrName\");\n+                    scce.addException(requiredValuesMissing);\n                 }\n \n-                boolean allowed;\n-                switch (itemTO.getIntMappingType()) {\n-                    case UserPlainSchema:\n-                    case GroupPlainSchema:\n-                    case AnyObjectPlainSchema:\n-                        allowed = allowedSchemas.getPlainSchemas().contains(itemTO.getIntAttrName());\n-                        break;\n-\n-                    case UserDerivedSchema:\n-                    case GroupDerivedSchema:\n-                    case AnyObjectDerivedSchema:\n-                        allowed = allowedSchemas.getDerSchemas().contains(itemTO.getIntAttrName());\n-                        break;\n-\n-                    case UserVirtualSchema:\n-                    case GroupVirtualSchema:\n-                    case AnyObjectVirtualSchema:\n-                        allowed = allowedSchemas.getVirSchemas().contains(itemTO.getIntAttrName());\n-                        break;\n-\n-                    default:\n-                        allowed = true;\n+                IntAttrName intAttrName = IntAttrNameParser.parse(\n+                        itemTO.getIntAttrName(),\n+                        anyUtilsFactory,\n+                        mapping.getProvision().getAnyType().getKind());\n+\n+                boolean allowed = true;\n+                if (intAttrName.getSchemaType() != null) {\n+                    switch (intAttrName.getSchemaType()) {\n+                        case PLAIN:\n+                            allowed = allowedSchemas.getPlainSchemas().contains(itemTO.getIntAttrName());\n+                            break;\n+\n+                        case DERIVED:\n+                            allowed = allowedSchemas.getDerSchemas().contains(itemTO.getIntAttrName());\n+                            break;\n+\n+                        case VIRTUAL:\n+                            allowed = allowedSchemas.getVirSchemas().contains(itemTO.getIntAttrName());\n+                            break;\n+\n+                        default:\n+                    }\n                 }\n \n                 if (allowed) {\n@@ -314,6 +313,13 @@ private void populateMapping(\n                     BeanUtils.copyProperties(itemTO, item, MAPPINGITEM_IGNORE_PROPERTIES);\n                     item.setMapping(mapping);\n                     if (item.isConnObjectKey()) {\n+                        if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n+                            throw new IllegalArgumentException(\"Virtual attributes cannot be set as ConnObjectKey\");\n+                        }\n+                        if (\"password\".equals(intAttrName.getField())) {\n+                            throw new IllegalArgumentException(\"Password attributes cannot be set as ConnObjectKey\");\n+                        }\n+\n                         mapping.setConnObjectKeyItem(item);\n                     } else {\n                         mapping.add(item);"},{"sha":"d0229f947916dc4d9d32af2fc03a681619f0f145","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":40,"deletions":36,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -63,10 +62,13 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser.IntAttrName;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n@@ -150,6 +152,9 @@ public class NotificationManagerImpl implements NotificationManager {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n     @Transactional(readOnly = true)\n     @Override\n     public long getMaxRetries() {\n@@ -190,8 +195,7 @@ private NotificationTask getNotificationTask(\n         for (User recipient : recipients) {\n             virAttrHander.getValues(recipient);\n \n-            String email = getRecipientEmail(notification.getRecipientAttrType(),\n-                    notification.getRecipientAttrName(), recipient);\n+            String email = getRecipientEmail(notification.getRecipientAttrName(), recipient);\n             if (email == null) {\n                 LOG.warn(\"{} cannot be notified: {} not found\", recipient, notification.getRecipientAttrName());\n             } else {\n@@ -339,43 +343,43 @@ public List<NotificationTask> createTasks(\n         return notifications;\n     }\n \n-    private String getRecipientEmail(\n-            final IntMappingType recipientAttrType, final String recipientAttrName, final User user) {\n-\n+    private String getRecipientEmail(final String recipientAttrName, final User user) {\n         String email = null;\n \n-        switch (recipientAttrType) {\n-            case Username:\n-                email = user.getUsername();\n-                break;\n+        IntAttrName intAttrName = IntAttrNameParser.parse(recipientAttrName, anyUtilsFactory, AnyTypeKind.USER);\n \n-            case UserPlainSchema:\n-                UPlainAttr attr = user.getPlainAttr(recipientAttrName);\n-                if (attr != null) {\n-                    email = attr.getValuesAsStrings().isEmpty() ? null : attr.getValuesAsStrings().get(0);\n-                }\n-                break;\n-\n-            case UserDerivedSchema:\n-                DerSchema schema = derSchemaDAO.find(recipientAttrName);\n-                if (schema == null) {\n-                    LOG.warn(\"Ignoring non existing {} {}\", DerSchema.class.getSimpleName(), recipientAttrName);\n-                } else {\n-                    email = derAttrHander.getValue(user, schema);\n-                }\n-                break;\n-\n-            case UserVirtualSchema:\n-                VirSchema virSchema = virSchemaDAO.find(recipientAttrName);\n-                if (virSchema == null) {\n-                    LOG.warn(\"Ignoring non existing {} {}\", VirSchema.class.getSimpleName(), recipientAttrName);\n-                } else {\n-                    List<String> virAttrValues = virAttrHander.getValues(user, virSchema);\n-                    email = virAttrValues.isEmpty() ? null : virAttrValues.get(0);\n-                }\n-                break;\n+        if (\"username\".equals(intAttrName.getField())) {\n+            email = user.getUsername();\n+        } else if (intAttrName.getSchemaType() != null) {\n+            switch (intAttrName.getSchemaType()) {\n+                case PLAIN:\n+                    UPlainAttr attr = user.getPlainAttr(recipientAttrName);\n+                    if (attr != null) {\n+                        email = attr.getValuesAsStrings().isEmpty() ? null : attr.getValuesAsStrings().get(0);\n+                    }\n+                    break;\n+\n+                case DERIVED:\n+                    DerSchema schema = derSchemaDAO.find(recipientAttrName);\n+                    if (schema == null) {\n+                        LOG.warn(\"Ignoring non existing {} {}\", DerSchema.class.getSimpleName(), recipientAttrName);\n+                    } else {\n+                        email = derAttrHander.getValue(user, schema);\n+                    }\n+                    break;\n+\n+                case VIRTUAL:\n+                    VirSchema virSchema = virSchemaDAO.find(recipientAttrName);\n+                    if (virSchema == null) {\n+                        LOG.warn(\"Ignoring non existing {} {}\", VirSchema.class.getSimpleName(), recipientAttrName);\n+                    } else {\n+                        List<String> virAttrValues = virAttrHander.getValues(user, virSchema);\n+                        email = virAttrValues.isEmpty() ? null : virAttrValues.get(0);\n+                    }\n+                    break;\n \n-            default:\n+                default:\n+            }\n         }\n \n         return email;"},{"sha":"a2c9271685c8b025f9a82767d560dba309454073","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -47,6 +47,8 @@\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -155,10 +157,10 @@ public boolean handle(final ConnectorObject obj) {\n         return result;\n     }\n \n-    private AnyDAO<?> getAnyDAO(final MappingItem connObjectKeyItem) {\n-        return AnyTypeKind.USER == connObjectKeyItem.getIntMappingType().getAnyTypeKind()\n+    private AnyDAO<?> getAnyDAO(final AnyTypeKind anyTypeKind) {\n+        return AnyTypeKind.USER == anyTypeKind\n                 ? userDAO\n-                : AnyTypeKind.ANY_OBJECT == connObjectKeyItem.getIntMappingType().getAnyTypeKind()\n+                : AnyTypeKind.ANY_OBJECT == anyTypeKind\n                         ? anyObjectDAO\n                         : groupDAO;\n     }\n@@ -181,72 +183,70 @@ private List<String> findByConnObjectKeyItem(\n             }\n         }\n \n-        switch (connObjectKeyItem.getIntMappingType()) {\n-            case UserPlainSchema:\n-            case GroupPlainSchema:\n-            case AnyObjectPlainSchema:\n-                PlainAttrValue value = anyUtils.newPlainAttrValue();\n+        IntAttrName intAttrName = IntAttrNameParser.parse(\n+                connObjectKeyItem.getIntAttrName(),\n+                anyUtilsFactory,\n+                provision.getAnyType().getKind());\n+\n+        if (intAttrName.getField() != null) {\n+            switch (intAttrName.getField()) {\n+                case \"key\":\n+                    Any<?> any = getAnyDAO(provision.getAnyType().getKind()).find(transfUid);\n+                    if (any != null) {\n+                        result.add(any.getKey());\n+                    }\n+                    break;\n \n-                PlainSchema schema = plainSchemaDAO.find(connObjectKeyItem.getIntAttrName());\n-                if (schema == null) {\n-                    value.setStringValue(transfUid);\n-                } else {\n-                    try {\n-                        value.parseValue(schema, transfUid);\n-                    } catch (ParsingValidationException e) {\n-                        LOG.error(\"While parsing provided __UID__ {}\", transfUid, e);\n-                        value.setStringValue(transfUid);\n+                case \"username\":\n+                    User user = userDAO.findByUsername(transfUid);\n+                    if (user != null) {\n+                        result.add(user.getKey());\n                     }\n-                }\n+                    break;\n \n-                List<? extends Any<?>> anys =\n-                        getAnyDAO(connObjectKeyItem).findByAttrValue(connObjectKeyItem.getIntAttrName(), value);\n-                for (Any<?> any : anys) {\n-                    result.add(any.getKey());\n-                }\n-                break;\n-\n-            case UserDerivedSchema:\n-            case GroupDerivedSchema:\n-            case AnyObjectDerivedSchema:\n-                anys = getAnyDAO(connObjectKeyItem).findByDerAttrValue(connObjectKeyItem.getIntAttrName(), transfUid);\n-                for (Any<?> any : anys) {\n-                    result.add(any.getKey());\n-                }\n-                break;\n-\n-            case UserKey:\n-            case GroupKey:\n-            case AnyObjectKey:\n-                Any<?> any = getAnyDAO(connObjectKeyItem).find(transfUid);\n-                if (any != null) {\n-                    result.add(any.getKey());\n-                }\n-                break;\n+                case \"name\":\n+                    Group group = groupDAO.findByName(transfUid);\n+                    if (group != null) {\n+                        result.add(group.getKey());\n+                    }\n+                    AnyObject anyObject = anyObjectDAO.findByName(transfUid);\n+                    if (anyObject != null) {\n+                        result.add(anyObject.getKey());\n+                    }\n+                    break;\n+            }\n+        } else if (intAttrName.getSchemaType() != null) {\n+            switch (intAttrName.getSchemaType()) {\n+                case PLAIN:\n+                    PlainAttrValue value = anyUtils.newPlainAttrValue();\n \n-            case Username:\n-                User user = userDAO.findByUsername(transfUid);\n-                if (user != null) {\n-                    result.add(user.getKey());\n-                }\n-                break;\n+                    PlainSchema schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n+                    if (schema == null) {\n+                        value.setStringValue(transfUid);\n+                    } else {\n+                        try {\n+                            value.parseValue(schema, transfUid);\n+                        } catch (ParsingValidationException e) {\n+                            LOG.error(\"While parsing provided __UID__ {}\", transfUid, e);\n+                            value.setStringValue(transfUid);\n+                        }\n+                    }\n \n-            case GroupName:\n-                Group group = groupDAO.findByName(transfUid);\n-                if (group != null) {\n-                    result.add(group.getKey());\n-                }\n-                break;\n+                    List<? extends Any<?>> anys = getAnyDAO(provision.getAnyType().getKind()).\n+                            findByAttrValue(intAttrName.getSchemaName(), value);\n+                    for (Any<?> any : anys) {\n+                        result.add(any.getKey());\n+                    }\n+                    break;\n \n-            case AnyObjectName:\n-                AnyObject anyObject = anyObjectDAO.findByName(transfUid);\n-                if (anyObject != null) {\n-                    result.add(anyObject.getKey());\n-                }\n-                break;\n-                \n-            default:\n-                LOG.error(\"Invalid connObjectKey type '{}'\", connObjectKeyItem.getIntMappingType());\n+                case DERIVED:\n+                    anys = getAnyDAO(provision.getAnyType().getKind()).\n+                            findByDerAttrValue(intAttrName.getSchemaName(), transfUid);\n+                    for (Any<?> any : anys) {\n+                        result.add(any.getKey());\n+                    }\n+                    break;\n+            }\n         }\n \n         return result;"},{"sha":"cb1612aa20a634a7c712d56da4a7823773d649b2","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ResourceDataBinderTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -89,7 +88,6 @@ public void issue42() {\n \n         MappingItemTO item = new MappingItemTO();\n         item.setIntAttrName(\"userId\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"campo1\");\n         item.setConnObjectKey(true);\n         item.setMandatoryCondition(\"false\");"},{"sha":"c6bde9cb603d4182c3ae0450e6b5e7ab7cf4a00c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConfigurationITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConfigurationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConfigurationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConfigurationITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -167,7 +167,7 @@ public void issueSYNCOPE418() {\n \n             assertNotNull(e.getElements());\n             assertEquals(1, e.getElements().size());\n-            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidKey.name()));\n         }\n     }\n }"},{"sha":"067022b8c299db1e0b80e72730c8a27859f615a0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConnectorITCase.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -57,7 +57,6 @@\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -674,7 +673,6 @@ public void issueSYNCOPE112() {\n             MappingItemTO mapItem = new MappingItemTO();\n             mapItem.setExtAttrName(\"uid\");\n             mapItem.setIntAttrName(\"userId\");\n-            mapItem.setIntMappingType(IntMappingType.UserPlainSchema);\n             mapItem.setConnObjectKey(true);\n             mapping.setConnObjectKeyItem(mapItem);\n             // ----------------------------------------"},{"sha":"71a381464060e612916c02f71544fa63289cda8d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DerSchemaITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -142,7 +142,7 @@ public void issueSYNCOPE418() {\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidDerSchema, e.getType());\n-            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidKey.name()));\n         }\n     }\n }"},{"sha":"a09b9bb8c879e22ebb52386c31c579a02eba560c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -76,7 +76,6 @@\n import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n@@ -882,14 +881,12 @@ public void issueSYNCOPE632() {\n             MappingTO mapping = newLDAP.getProvision(AnyTypeKind.GROUP.name()).getMapping();\n \n             MappingItemTO connObjectKey = mapping.getConnObjectKeyItem();\n-            connObjectKey.setIntMappingType(IntMappingType.GroupDerivedSchema);\n             connObjectKey.setIntAttrName(\"displayProperty\");\n             connObjectKey.setPurpose(MappingPurpose.PROPAGATION);\n             mapping.setConnObjectKeyItem(connObjectKey);\n             mapping.setConnObjectLink(\"'cn=' + displayProperty + ',ou=groups,o=isp'\");\n \n             MappingItemTO description = new MappingItemTO();\n-            description.setIntMappingType(IntMappingType.GroupKey);\n             description.setExtAttrName(\"description\");\n             description.setPurpose(MappingPurpose.BOTH);\n             mapping.add(description);"},{"sha":"a89fae3a49ba05b50d9ce788bd6f57ce14249d0f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MigrationITCase.java","status":"modified","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -49,7 +49,6 @@\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -260,7 +259,6 @@ private void setupResource(final String connectorKey, final String anyTypeClass)\n \n         MappingItemTO item = new MappingItemTO();\n         item.setIntAttrName(\"username\");\n-        item.setIntMappingType(IntMappingType.Username);\n         item.setExtAttrName(\"username\");\n         item.setMandatoryCondition(\"true\");\n         item.setPurpose(MappingPurpose.PULL);\n@@ -269,71 +267,62 @@ private void setupResource(final String connectorKey, final String anyTypeClass)\n         item = new MappingItemTO();\n         item.setPassword(true);\n         item.setIntAttrName(\"password\");\n-        item.setIntMappingType(IntMappingType.Password);\n         item.setExtAttrName(\"__PASSWORD__\");\n         item.setMandatoryCondition(\"true\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(MIGRATION_CIPHER_ALGORITHM);\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"cipherAlgorithm\");\n         item.setMandatoryCondition(\"true\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(\"surname\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"surname\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(\"email\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"email\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(\"firstname\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"firstname\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(\"ctype\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"type\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(\"gender\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"gender\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(\"loginDate\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"loginDate\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(MIGRATION_RESOURCES_SCHEMA);\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"__RESOURCES__\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n@@ -351,47 +340,41 @@ private void setupResource(final String connectorKey, final String anyTypeClass)\n \n         item = new MappingItemTO();\n         item.setIntAttrName(\"groupName\");\n-        item.setIntMappingType(IntMappingType.GroupName);\n         item.setExtAttrName(\"name\");\n         item.setMandatoryCondition(\"true\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.setConnObjectKeyItem(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(\"show\");\n-        item.setIntMappingType(IntMappingType.GroupPlainSchema);\n         item.setExtAttrName(\"show\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(\"title\");\n-        item.setIntMappingType(IntMappingType.GroupPlainSchema);\n         item.setExtAttrName(\"title\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(\"icon\");\n-        item.setIntMappingType(IntMappingType.GroupPlainSchema);\n         item.setExtAttrName(\"icon\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(MIGRATION_RESOURCES_SCHEMA);\n-        item.setIntMappingType(IntMappingType.GroupPlainSchema);\n         item.setExtAttrName(\"__RESOURCES__\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setIntAttrName(MIGRATION_MEMBERSHIPS_SCHEMA);\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"__MEMBERSHIPS__\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);"},{"sha":"2c5b0234e5b124c8bb39e899946c75b29a2590e3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n@@ -157,29 +156,27 @@ public void createResourceAndPull() {\n \n             MappingItemTO item = new MappingItemTO();\n             item.setIntAttrName(\"username\");\n-            item.setIntMappingType(IntMappingType.Username);\n             item.setExtAttrName(\"cn\");\n             item.setPurpose(MappingPurpose.BOTH);\n             mapping.setConnObjectKeyItem(item);\n \n             item = new MappingItemTO();\n             item.setPassword(true);\n-            item.setIntMappingType(IntMappingType.Password);\n+            item.setIntAttrName(\"password\");\n             item.setExtAttrName(\"userPassword\");\n             item.setPurpose(MappingPurpose.BOTH);\n             item.setMandatoryCondition(\"true\");\n             mapping.add(item);\n \n             item = new MappingItemTO();\n-            item.setIntMappingType(IntMappingType.UserKey);\n+            item.setIntAttrName(\"key\");\n             item.setPurpose(MappingPurpose.BOTH);\n             item.setExtAttrName(\"sn\");\n             item.setMandatoryCondition(\"true\");\n             mapping.add(item);\n \n             item = new MappingItemTO();\n             item.setIntAttrName(\"email\");\n-            item.setIntMappingType(IntMappingType.UserPlainSchema);\n             item.setPurpose(MappingPurpose.BOTH);\n             item.setExtAttrName(\"mail\");\n             mapping.add(item);"},{"sha":"012acb9b1c285fc67d856e4234fd915489638845","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationITCase.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -51,7 +50,6 @@ private NotificationTO buildNotificationTO() {\n                 is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query());\n \n         notificationTO.setRecipientAttrName(\"email\");\n-        notificationTO.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notificationTO.setSender(\"syncope@syncope.apache.org\");\n         notificationTO.setSubject(\"Test notification\");"},{"sha":"665d38b4f2705114b8b0ab135883d2831e05ffd3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -46,7 +46,6 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -322,7 +321,6 @@ public void issueSYNCOPE446() throws Exception {\n                 inGroups(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").query());\n         notification.setSelfAsRecipient(false);\n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n         notification.getStaticRecipients().add(MAIL_ADDRESS);\n         notification.setRecipientsProviderClassName(TestNotificationRecipientsProvider.class.getName());\n \n@@ -395,7 +393,6 @@ private String createNotificationTask(\n                 inGroups(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").query());\n         notification.setSelfAsRecipient(true);\n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n         if (staticRecipients != null) {\n             CollectionUtils.addAll(notification.getStaticRecipients(), staticRecipients);\n         }"},{"sha":"36fe8885a65d76e1c9531878ff99630e73a2b853","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -88,7 +88,7 @@ public void createWithNotPermittedName() {\n             boolean entityViolationTypeCheck = false;\n             for (String element : e.getElements()) {\n                 if (!entityViolationTypeCheck) {\n-                    entityViolationTypeCheck = element.contains(EntityViolationType.InvalidName.name());\n+                    entityViolationTypeCheck = element.contains(EntityViolationType.InvalidKey.name());\n                 }\n             }\n             assertTrue(entityViolationTypeCheck);\n@@ -334,7 +334,7 @@ public void issueSYNCOPE418() {\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n-            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidKey.name()));\n         }\n     }\n }"},{"sha":"243aff702e26ee008d541bfe1c0976df28d4f0e0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n@@ -317,7 +316,6 @@ public void issueSYNCOPE598() {\n             provisionTO.setMapping(mapping);\n \n             MappingItemTO item = new MappingItemTO();\n-            item.setIntMappingType(IntMappingType.GroupPlainSchema);\n             item.setExtAttrName(\"cn\");\n             item.setIntAttrName(schemaTO.getKey());\n             item.setConnObjectKey(true);\n@@ -387,7 +385,6 @@ public void issueSYNCOPE648() {\n         notification.getStaticRecipients().add(\"issueyncope648@syncope.apache.org\");\n         notification.setSelfAsRecipient(false);\n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notification.setSender(\"syncope648@syncope.apache.org\");\n         String subject = \"Test notification\";"},{"sha":"f509611273acc2c0c2181966711b9d83880d6e46","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":11,"deletions":25,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -50,7 +50,6 @@\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -80,21 +79,18 @@ private ResourceTO buildResourceTO(final String resourceName) {\n         MappingItemTO item = new MappingItemTO();\n         item.setExtAttrName(\"userId\");\n         item.setIntAttrName(\"userId\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setExtAttrName(\"username\");\n-        item.setIntAttrName(\"fullname\");\n-        item.setIntMappingType(IntMappingType.UserKey);\n+        item.setIntAttrName(\"key\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n         item = new MappingItemTO();\n         item.setExtAttrName(\"fullname\");\n         item.setIntAttrName(\"cn\");\n-        item.setIntMappingType(IntMappingType.UserDerivedSchema);\n         item.setConnObjectKey(false);\n         item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.add(item);\n@@ -139,22 +135,19 @@ public void createOverridingProps() {\n         MappingItemTO item = new MappingItemTO();\n         item.setExtAttrName(\"uid\");\n         item.setIntAttrName(\"userId\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n \n         item = new MappingItemTO();\n         item.setExtAttrName(\"username\");\n-        item.setIntAttrName(\"fullname\");\n-        item.setIntMappingType(IntMappingType.UserKey);\n+        item.setIntAttrName(\"key\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n         item = new MappingItemTO();\n         item.setExtAttrName(\"fullname\");\n         item.setIntAttrName(\"cn\");\n-        item.setIntMappingType(IntMappingType.UserDerivedSchema);\n         item.setConnObjectKey(false);\n         item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.add(item);\n@@ -198,7 +191,7 @@ public void createWithSingleMappingItem() {\n         provisionTO.setMapping(mapping);\n \n         MappingItemTO item = new MappingItemTO();\n-        item.setIntMappingType(IntMappingType.UserKey);\n+        item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.PROPAGATION);\n@@ -212,7 +205,7 @@ public void createWithSingleMappingItem() {\n         mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n         item = new MappingItemTO();\n-        item.setIntMappingType(IntMappingType.GroupKey);\n+        item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"groupId\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.PULL);\n@@ -248,13 +241,12 @@ public void createWithInvalidMapping() {\n         provisionTO.setMapping(mapping);\n \n         MappingItemTO item = new MappingItemTO();\n-        item.setIntMappingType(IntMappingType.UserKey);\n+        item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         mapping.setConnObjectKeyItem(item);\n \n         item = new MappingItemTO();\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"email\");\n         // missing intAttrName ...\n         mapping.add(item);\n@@ -286,13 +278,12 @@ public void createWithoutExtAttr() {\n         provisionTO.setMapping(mapping);\n \n         MappingItemTO item = new MappingItemTO();\n-        item.setIntMappingType(IntMappingType.UserKey);\n+        item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         mapping.setConnObjectKeyItem(item);\n \n         item = new MappingItemTO();\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setIntAttrName(\"usernane\");\n         // missing extAttrName ...\n         mapping.add(item);\n@@ -319,7 +310,6 @@ public void createWithPasswordPolicy() {\n         MappingItemTO item = new MappingItemTO();\n         item.setExtAttrName(\"userId\");\n         item.setIntAttrName(\"userId\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n@@ -368,7 +358,6 @@ public void update() {\n         item.setKey(\"cc973ed6-d031-4790-adab-fc059ac0c818\");\n         item.setExtAttrName(\"test3\");\n         item.setIntAttrName(\"fullname\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n \n@@ -377,14 +366,12 @@ public void update() {\n             item = new MappingItemTO();\n             item.setExtAttrName(\"test\" + i);\n             item.setIntAttrName(\"fullname\");\n-            item.setIntMappingType(IntMappingType.UserPlainSchema);\n             item.setPurpose(MappingPurpose.BOTH);\n             mapping.add(item);\n         }\n         item = new MappingItemTO();\n         item.setExtAttrName(\"username\");\n-        item.setIntAttrName(\"fullname\");\n-        item.setIntMappingType(IntMappingType.UserKey);\n+        item.setIntAttrName(\"key\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n@@ -642,13 +629,13 @@ public void issueSYNCOPE368() {\n         provisionTO.setMapping(mapping);\n \n         MappingItemTO item = new MappingItemTO();\n-        item.setIntMappingType(IntMappingType.GroupName);\n+        item.setIntAttrName(\"name\");\n         item.setExtAttrName(\"cn\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n         item = new MappingItemTO();\n-        item.setIntMappingType(IntMappingType.GroupOwnerSchema);\n+        item.setIntAttrName(\"owner\");\n         item.setExtAttrName(\"owner\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n@@ -666,7 +653,7 @@ public void issueSYNCOPE418() {\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidExternalResource, e.getType());\n-            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidKey.name()));\n         }\n     }\n \n@@ -687,14 +674,13 @@ public void issueSYNCOPE493() {\n         provisionTO.setMapping(mapping);\n \n         MappingItemTO item = new MappingItemTO();\n-        item.setIntMappingType(IntMappingType.UserKey);\n+        item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.setConnObjectKeyItem(item);\n \n         MappingItemTO item2 = new MappingItemTO();\n-        item2.setIntMappingType(IntMappingType.UserPlainSchema);\n         item2.setConnObjectKey(false);\n         item2.setIntAttrName(\"gender\");\n         item2.setExtAttrName(\"gender\");"},{"sha":"37fc276c8ee8782d2eab63663c78164115ca374a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -50,7 +50,6 @@\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n@@ -506,7 +505,6 @@ public void issueSYNCOPE453() {\n \n             MappingItemTO item = new MappingItemTO();\n             item.setIntAttrName(\"fullname\");\n-            item.setIntMappingType(IntMappingType.UserPlainSchema);\n             item.setExtAttrName(\"ID\");\n             item.setPurpose(MappingPurpose.PROPAGATION);\n             item.setConnObjectKey(true);\n@@ -515,14 +513,12 @@ public void issueSYNCOPE453() {\n             item = new MappingItemTO();\n             item.setExtAttrName(\"USERNAME\");\n             item.setIntAttrName(\"username\");\n-            item.setIntMappingType(IntMappingType.Username);\n             item.setPurpose(MappingPurpose.PROPAGATION);\n             mapping.getItems().add(item);\n \n             item = new MappingItemTO();\n             item.setExtAttrName(\"EMAIL\");\n             item.setIntAttrName(\"rvirtualdata\");\n-            item.setIntMappingType(IntMappingType.GroupVirtualSchema);\n             item.setPurpose(MappingPurpose.PROPAGATION);\n             mapping.getItems().add(item);\n "},{"sha":"b7ab0ce4cf0afc263a322206086ba1cb0ba13570","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirSchemaITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85dd9063d5b7ac1692c8a2dcedbdd210b435d63d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java?ref=85dd9063d5b7ac1692c8a2dcedbdd210b435d63d","patch":"@@ -148,7 +148,7 @@ public void issueSYNCOPE418() {\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidVirSchema, e.getType());\n \n-            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidKey.name()));\n         }\n     }\n }"}]}