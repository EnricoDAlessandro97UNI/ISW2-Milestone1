{"sha":"f9e4c8da6ba71d316b780dec9a285deaffc85b5e","node_id":"C_kwDOJfYA1toAKGY5ZTRjOGRhNmJhNzFkMzE2Yjc4MGRlYzlhMjg1ZGVhZmZjODViNWU","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-11-29T14:16:34Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-11-29T14:16:34Z"},"message":"[SYNCOPE-1697] Improving input and validation of CommandArgs instances (#395)","tree":{"sha":"4361f979a38d24d3df9eff04484e35f87a391cd6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4361f979a38d24d3df9eff04484e35f87a391cd6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f9e4c8da6ba71d316b780dec9a285deaffc85b5e","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhhRCCRBK7hj4Ov3rIwAAnL8IAAQR2sH6L+b81sNWR/qcEhLE\njNXIqsbbYGSvUnBuiuVSCQjRIUxMW9G0JbfMoW5pOc3+5+Zg5i7myFwPKUmTpuls\nXQ0iDZlAw0I+9ltbRpABszDhHdhq5MkB99CfVpbhJryCISUq/446yPNrBYO+Dk0t\n9W9CorQ/56OCKx+NxLijmIHbQbTdHvcsIF+lIBKSNKv3+1/4IHEZSdcfGex1uctx\nvCDSi2jMNLmj4bg8qT3qwzM61zYmmLSsajWj50fCQTiahPFQoCYYV87eMeDfUxb+\njioNNE2mY35oR70eOlpze8sdX4P+A0e6xM9cHu/LDDshJyfBlMmSvJTDH0BXQ0c=\n=FO7y\n-----END PGP SIGNATURE-----\n","payload":"tree 4361f979a38d24d3df9eff04484e35f87a391cd6\nparent 252e81429a979daf537fd5c84db58ba4c1859dfd\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1669731394 +0100\ncommitter GitHub <noreply@github.com> 1669731394 +0100\n\n[SYNCOPE-1697] Improving input and validation of CommandArgs instances (#395)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f9e4c8da6ba71d316b780dec9a285deaffc85b5e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f9e4c8da6ba71d316b780dec9a285deaffc85b5e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"252e81429a979daf537fd5c84db58ba4c1859dfd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/252e81429a979daf537fd5c84db58ba4c1859dfd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/252e81429a979daf537fd5c84db58ba4c1859dfd"}],"stats":{"total":341,"additions":248,"deletions":93},"files":[{"sha":"bb945460b5e77ba38e0fb361c612bce563d13210","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":98,"deletions":30,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n+import de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverBehavior;\n+import de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverConfig;\n+import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.lang.reflect.ParameterizedType;\n@@ -31,6 +35,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n@@ -50,7 +55,6 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n-import org.apache.syncope.common.lib.Schema;\n import org.apache.syncope.common.lib.report.SearchCondition;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.SchemaTO;\n@@ -61,9 +65,11 @@\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.util.ListModel;\n@@ -126,9 +132,37 @@ protected List<String> load() {\n \n             private static final long serialVersionUID = 9101744072914090143L;\n \n+            private void setRequired(final ListItem<String> item, final boolean required) {\n+                if (required) {\n+                    Fragment fragment = new Fragment(\"required\", \"requiredFragment\", this);\n+                    fragment.add(new Label(\"requiredLabel\", \"*\"));\n+                    item.replace(fragment);\n+                }\n+            }\n+\n+            private void setDescription(final ListItem<String> item, final String description) {\n+                Fragment fragment = new Fragment(\"description\", \"descriptionFragment\", this);\n+                fragment.add(new Label(\"descriptionLabel\", Model.of()).add(new PopoverBehavior(\n+                        Model.<String>of(),\n+                        Model.of(description),\n+                        new PopoverConfig().withPlacement(TooltipConfig.Placement.right)) {\n+\n+                    private static final long serialVersionUID = -7867802555691605021L;\n+\n+                    @Override\n+                    protected String createRelAttribute() {\n+                        return \"description\";\n+                    }\n+                }).setRenderBodyOnly(false));\n+                item.replace(fragment);\n+            }\n+\n             @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n             @Override\n             protected void populateItem(final ListItem<String> item) {\n+                item.add(new Fragment(\"required\", \"emptyFragment\", this));\n+                item.add(new Fragment(\"description\", \"emptyFragment\", this));\n+\n                 String fieldName = item.getModelObject();\n \n                 item.add(new Label(\"fieldName\", new ResourceModel(fieldName, fieldName)));\n@@ -138,13 +172,11 @@ protected void populateItem(final ListItem<String> item) {\n                     return;\n                 }\n \n-                SearchCondition scondAnnot = field.getAnnotation(SearchCondition.class);\n-                Schema schemaAnnot = field.getAnnotation(Schema.class);\n-\n                 BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(bean.getObject());\n \n                 Panel panel;\n \n+                SearchCondition scondAnnot = field.getAnnotation(SearchCondition.class);\n                 if (scondAnnot != null) {\n                     String fiql = (String) wrapper.getPropertyValue(fieldName);\n \n@@ -171,32 +203,33 @@ protected void populateItem(final ListItem<String> item) {\n                             builder = SyncopeClient.getAnyObjectSearchConditionBuilder(scondAnnot.type());\n                     }\n \n-                    if (BeanPanel.this.sCondWrapper != null) {\n-                        BeanPanel.this.sCondWrapper.put(fieldName, Pair.of(builder, clauses));\n-                    }\n+                    Optional.ofNullable(BeanPanel.this.sCondWrapper).\n+                            ifPresent(scw -> scw.put(fieldName, Pair.of(builder, clauses)));\n                 } else if (List.class.equals(field.getType())) {\n                     Class<?> listItemType = field.getGenericType() instanceof ParameterizedType\n                             ? (Class<?>) ((ParameterizedType) field.getGenericType()).getActualTypeArguments()[0]\n                             : String.class;\n \n-                    if (listItemType.equals(String.class) && schemaAnnot != null) {\n+                    org.apache.syncope.common.lib.Schema schema =\n+                            field.getAnnotation(org.apache.syncope.common.lib.Schema.class);\n+                    if (listItemType.equals(String.class) && schema != null) {\n                         List<SchemaTO> choices = new ArrayList<>();\n \n-                        for (SchemaType type : schemaAnnot.type()) {\n+                        for (SchemaType type : schema.type()) {\n                             switch (type) {\n                                 case PLAIN:\n                                     choices.addAll(\n-                                            SchemaRestClient.getSchemas(SchemaType.PLAIN, schemaAnnot.anyTypeKind()));\n+                                            SchemaRestClient.getSchemas(SchemaType.PLAIN, schema.anyTypeKind()));\n                                     break;\n \n                                 case DERIVED:\n                                     choices.addAll(\n-                                            SchemaRestClient.getSchemas(SchemaType.DERIVED, schemaAnnot.anyTypeKind()));\n+                                            SchemaRestClient.getSchemas(SchemaType.DERIVED, schema.anyTypeKind()));\n                                     break;\n \n                                 case VIRTUAL:\n                                     choices.addAll(\n-                                            SchemaRestClient.getSchemas(SchemaType.VIRTUAL, schemaAnnot.anyTypeKind()));\n+                                            SchemaRestClient.getSchemas(SchemaType.VIRTUAL, schema.anyTypeKind()));\n                                     break;\n \n                                 default:\n@@ -214,17 +247,29 @@ protected void populateItem(final ListItem<String> item) {\n                                 new PropertyModel<>(bean.getObject(), fieldName),\n                                 new ListModel(List.of(listItemType.getEnumConstants()))).hideLabel();\n                     } else {\n+                        Triple<FieldPanel, Boolean, Optional<String>> single =\n+                                buildSinglePanel(bean.getObject(), field.getType(), field, \"value\");\n+\n+                        setRequired(item, single.getMiddle());\n+                        single.getRight().ifPresent(description -> setDescription(item, description));\n+\n                         panel = new MultiFieldPanel.Builder<>(\n                                 new PropertyModel<>(bean.getObject(), fieldName)).build(\n                                 \"value\",\n                                 fieldName,\n-                                buildSinglePanel(bean.getObject(), listItemType, fieldName, \"panel\")).hideLabel();\n+                                single.getLeft()).hideLabel();\n                     }\n                 } else if (Map.class.equals(field.getType())) {\n                     panel = new AjaxGridFieldPanel(\n                             \"value\", fieldName, new PropertyModel<>(bean, fieldName)).hideLabel();\n                 } else {\n-                    panel = buildSinglePanel(bean.getObject(), field.getType(), fieldName, \"value\").hideLabel();\n+                    Triple<FieldPanel, Boolean, Optional<String>> single =\n+                            buildSinglePanel(bean.getObject(), field.getType(), field, \"value\");\n+\n+                    setRequired(item, single.getMiddle());\n+                    single.getRight().ifPresent(description -> setDescription(item, description));\n+\n+                    panel = single.getLeft().hideLabel();\n                 }\n \n                 item.add(panel.setRenderBodyOnly(true));\n@@ -233,33 +278,34 @@ protected void populateItem(final ListItem<String> item) {\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private static FieldPanel buildSinglePanel(\n-            final Serializable bean, final Class<?> type, final String fieldName, final String id) {\n+    private static Triple<FieldPanel, Boolean, Optional<String>> buildSinglePanel(\n+            final Serializable bean, final Class<?> type, final Field field, final String id) {\n \n-        PropertyModel model = new PropertyModel<>(bean, fieldName);\n+        PropertyModel model = new PropertyModel<>(bean, field.getName());\n \n-        FieldPanel result;\n+        FieldPanel panel;\n         if (ClassUtils.isAssignable(Boolean.class, type)) {\n-            result = new AjaxCheckBoxPanel(id, fieldName, model);\n+            panel = new AjaxCheckBoxPanel(id, field.getName(), model);\n         } else if (ClassUtils.isAssignable(Number.class, type)) {\n-            result = new AjaxSpinnerFieldPanel.Builder<>().build(\n-                    id, fieldName, (Class<Number>) ClassUtils.resolvePrimitiveIfNecessary(type), model);\n+            panel = new AjaxSpinnerFieldPanel.Builder<>().build(\n+                    id, field.getName(), (Class<Number>) ClassUtils.resolvePrimitiveIfNecessary(type), model);\n         } else if (Date.class.equals(type)) {\n-            result = new AjaxDateTimeFieldPanel(id, fieldName, model,\n+            panel = new AjaxDateTimeFieldPanel(id, field.getName(), model,\n                     DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n         } else if (OffsetDateTime.class.equals(type)) {\n-            result = new AjaxDateTimeFieldPanel(id, fieldName, new DateOps.WrappedDateModel(model),\n+            panel = new AjaxDateTimeFieldPanel(id, field.getName(), new DateOps.WrappedDateModel(model),\n                     DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n         } else if (type.isEnum()) {\n-            result = new AjaxDropDownChoicePanel(id, fieldName, model).setChoices(List.of(type.getEnumConstants()));\n+            panel = new AjaxDropDownChoicePanel(id, field.getName(), model).\n+                    setChoices(List.of(type.getEnumConstants()));\n         } else if (Duration.class.equals(type)) {\n-            result = new AjaxTextFieldPanel(id, fieldName, new IModel<>() {\n+            panel = new AjaxTextFieldPanel(id, field.getName(), new IModel<>() {\n \n                 private static final long serialVersionUID = 807008909842554829L;\n \n                 @Override\n                 public String getObject() {\n-                    return Optional.ofNullable(PropertyResolver.getValue(fieldName, bean)).\n+                    return Optional.ofNullable(PropertyResolver.getValue(field.getName(), bean)).\n                             map(Object::toString).orElse(null);\n                 }\n \n@@ -268,15 +314,37 @@ public void setObject(final String object) {\n                     PropertyResolverConverter prc = new PropertyResolverConverter(\n                             SyncopeWebApplication.get().getConverterLocator(),\n                             SyncopeConsoleSession.get().getLocale());\n-                    PropertyResolver.setValue(fieldName, bean, Duration.parse(object), prc);\n+                    PropertyResolver.setValue(field.getName(), bean, Duration.parse(object), prc);\n                 }\n             });\n         } else {\n             // treat as String if nothing matched above\n-            result = new AjaxTextFieldPanel(id, fieldName, model);\n+            panel = new AjaxTextFieldPanel(id, field.getName(), model);\n+        }\n+\n+        boolean required = false;\n+        Optional<String> description = Optional.empty();\n+\n+        io.swagger.v3.oas.annotations.media.Schema schema =\n+                field.getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class);\n+        if (schema != null) {\n+            panel.setReadOnly(schema.accessMode() == Schema.AccessMode.READ_ONLY);\n+\n+            required = schema.requiredMode() == Schema.RequiredMode.REQUIRED;\n+            panel.setRequired(required);\n+\n+            Optional.ofNullable(schema.example()).ifPresent(panel::setPlaceholder);\n+\n+            description = Optional.ofNullable(schema.description());\n+\n+            if (panel instanceof AjaxTextFieldPanel\n+                    && panel.getModelObject() == null\n+                    && schema.defaultValue() != null) {\n+\n+                ((AjaxTextFieldPanel) panel).setModelObject(schema.defaultValue());\n+            }\n         }\n \n-        result.hideLabel();\n-        return result;\n+        return Triple.of(panel, required, description);\n     }\n }"},{"sha":"2d3290b384094cfffc4d89fbea58d484cf99f4f7","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/BeanPanel.html","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.html?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -19,8 +19,20 @@\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n     <div wicket:id=\"propView\">\n+      <wicket:fragment wicket:id=\"requiredFragment\">\n+        <span wicket:id=\"requiredLabel\"/>\n+      </wicket:fragment>\n+\n+      <wicket:fragment wicket:id=\"descriptionFragment\">\n+        <span wicket:id=\"descriptionLabel\" class=\"fas fa-info-circle\" style=\"cursor: pointer\"/>\n+      </wicket:fragment>\n+\n+      <wicket:fragment wicket:id=\"emptyFragment\">\n+      </wicket:fragment>\n+\n       <div class=\"form-group inforow\">\n-        <label wicket:id=\"fieldName\">[LABEL]</label>\n+        <label wicket:id=\"fieldName\">[LABEL]</label><span wicket:id=\"required\"/>\n+        <span wicket:id=\"description\"/>\n         <span wicket:id=\"value\">[value]</span>\n       </div>\n     </div>"},{"sha":"513a0a1dbb28f0fd5d31d58f78e69a18a369d691","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":43,"deletions":29,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -20,40 +20,38 @@\n \n public enum EntityViolationType {\n \n-    Standard(\"\"),\n-    InvalidAnyType(\"org.apache.syncope.core.persistence.validation.anytype\"),\n-    InvalidADynMemberships(\"org.apache.syncope.core.persistence.validation.group.adynmemberships\"),\n-    InvalidConnInstanceLocation(\"org.apache.syncope.core.persistence.validation.conninstance.location\"),\n-    InvalidConnPoolConf(\"org.apache.syncope.core.persistence.validation.conninstance.poolConf\"),\n-    InvalidMapping(\"org.apache.syncope.core.persistence.validation.mapping\"),\n-    InvalidKey(\"org.apache.syncope.core.persistence.validation.key\"),\n-    InvalidName(\"org.apache.syncope.core.persistence.validation.name\"),\n-    InvalidPassword(\"org.apache.syncope.core.persistence.validation.user.password\"),\n-    InvalidPolicy(\"org.apache.syncope.core.persistence.validation.policy\"),\n-    InvalidPropagationTask(\"org.apache.syncope.core.persistence.validation.propagationtask\"),\n-    InvalidRealm(\"org.apache.syncope.core.persistence.validation.realm\"),\n-    InvalidDynRealm(\"org.apache.syncope.core.persistence.validation.dynrealm\"),\n-    InvalidReport(\"org.apache.syncope.core.persistence.validation.report\"),\n-    InvalidResource(\"org.apache.syncope.core.persistence.validation.externalresource\"),\n-    InvalidGroupOwner(\"org.apache.syncope.core.persistence.validation.group.owner\"),\n-    InvalidSchemaEncrypted(\"org.apache.syncope.core.persistence.validation.schema.encrypted\"),\n-    InvalidSchemaEnum(\"org.apache.syncope.core.persistence.validation.schema.enum\"),\n-    InvalidSchemaMultivalueUnique(\"org.apache.syncope.core.persistence.validation.schema.multivalueUnique\"),\n-    InvalidSchedTask(\"org.apache.syncope.core.persistence.validation.schedtask\"),\n-    InvalidProvisioningTask(\"org.apache.syncope.core.persistence.validation.provisioningtask\"),\n-    InvalidPlainAttr(\"org.apache.syncope.core.persistence.validation.plainattr\"),\n-    InvalidUsername(\"org.apache.syncope.core.persistence.validation.user.username\"),\n-    InvalidValueList(\"org.apache.syncope.core.persistence.validation.attr.valueList\"),\n-    InvalidRemediation(\"org.apache.syncope.core.persistence.validation.remediation\"),\n-    MoreThanOneNonNull(\"org.apache.syncope.core.persistence.validation.attrvalue.moreThanOneNonNull\");\n+    Standard,\n+    InvalidAnyType,\n+    InvalidADynMemberships,\n+    InvalidConnInstanceLocation,\n+    InvalidConnPoolConf,\n+    InvalidMapping,\n+    InvalidKey,\n+    InvalidName,\n+    InvalidPassword,\n+    InvalidPolicy,\n+    InvalidPropagationTask,\n+    InvalidRealm,\n+    InvalidDynRealm,\n+    InvalidReport,\n+    InvalidResource,\n+    InvalidGroupOwner,\n+    InvalidSchemaEncrypted,\n+    InvalidSchemaEnum,\n+    InvalidSchemaMultivalueUnique,\n+    InvalidSchedTask,\n+    InvalidProvisioningTask,\n+    InvalidPlainAttr,\n+    InvalidUsername,\n+    InvalidValueList,\n+    InvalidRemediation,\n+    MoreThanOneNonNull;\n \n     private String message;\n \n     private String propertyPath;\n \n-    EntityViolationType(final String message) {\n-        this.message = message;\n-    }\n+    private Object invalidValue;\n \n     public void setMessage(final String message) {\n         this.message = message;\n@@ -71,4 +69,20 @@ public void setPropertyPath(final String propertyPath) {\n         this.propertyPath = propertyPath;\n     }\n \n+    public void setInvalidValue(final Object invalidValue) {\n+        this.invalidValue = invalidValue;\n+    }\n+\n+    public Object getInvalidValue() {\n+        return invalidValue;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name() + \"{\"\n+                + \"message=\" + message\n+                + \", propertyPath=\" + propertyPath\n+                + \", invalidValue=\" + invalidValue\n+                + '}';\n+    }\n }"},{"sha":"02a5b257058dfd65b7f389dbaf385b9cdea58d08","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/CommandLogic.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCommandLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCommandLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCommandLogic.java?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -23,8 +23,12 @@\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ValidationException;\n+import javax.validation.Validator;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.command.CommandArgs;\n@@ -34,6 +38,7 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.logic.api.Command;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -45,10 +50,13 @@ public class CommandLogic extends AbstractLogic<EntityTO> {\n \n     protected final ImplementationDAO implementationDAO;\n \n+    protected final Validator validator;\n+\n     protected final Map<String, Command<?>> perContextCommands = new ConcurrentHashMap<>();\n \n-    public CommandLogic(final ImplementationDAO implementationDAO) {\n+    public CommandLogic(final ImplementationDAO implementationDAO, final Validator validator) {\n         this.implementationDAO = implementationDAO;\n+        this.validator = validator;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.IMPLEMENTATION_LIST + \"')\")\n@@ -110,6 +118,21 @@ public String run(final CommandTO command) {\n             throw sce;\n         }\n \n+        if (command.getArgs() != null) {\n+            try {\n+                Set<ConstraintViolation<Object>> violations = validator.validate(command.getArgs());\n+                if (!violations.isEmpty()) {\n+                    throw new InvalidEntityException(command.getArgs().getClass().getName(), violations);\n+                }\n+            } catch (ValidationException e) {\n+                LOG.error(\"While validating {}\", command.getArgs(), e);\n+\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+                sce.getElements().add(e.getMessage());\n+                throw sce;\n+            }\n+        }\n+\n         try {\n             return runnable.run(command.getArgs());\n         } catch (Exception e) {"},{"sha":"9904587bf4295938ba5f194436b1a6ad524e73f1","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/IdRepoLogicContext.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import javax.validation.Validator;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n@@ -267,8 +268,8 @@ public AuditLogic auditLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public CommandLogic commandLogic(final ImplementationDAO implementationDAO) {\n-        return new CommandLogic(implementationDAO);\n+    public CommandLogic commandLogic(final ImplementationDAO implementationDAO, final Validator validator) {\n+        return new CommandLogic(implementationDAO, validator);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"781edbd3a2f34dd8cd56a6cfbcdc2457eca5863c","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/job/MacroRunJobDelegate.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fjob%2FMacroRunJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fjob%2FMacroRunJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fjob%2FMacroRunJobDelegate.java?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -19,7 +19,10 @@\n package org.apache.syncope.core.logic.job;\n \n import java.util.Map;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validator;\n import org.apache.syncope.common.lib.command.CommandArgs;\n import org.apache.syncope.core.logic.api.Command;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -38,6 +41,9 @@ public class MacroRunJobDelegate extends AbstractSchedTaskJobDelegate<MacroTask>\n     @Autowired\n     protected ImplementationDAO implementationDAO;\n \n+    @Autowired\n+    protected Validator validator;\n+\n     protected final Map<String, Command<?>> perContextCommands = new ConcurrentHashMap<>();\n \n     @SuppressWarnings(\"unchecked\")\n@@ -67,12 +73,19 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                 output.append(command).append(' ').append(args);\n             } else {\n                 try {\n+                    if (task.getCommandArgs().get(i) != null) {\n+                        Set<ConstraintViolation<Object>> violations = validator.validate(task.getCommandArgs().get(i));\n+                        if (!violations.isEmpty()) {\n+                            LOG.error(\"Errors while validating {}: {}\", task.getCommandArgs().get(i), violations);\n+                            throw new IllegalArgumentException(task.getCommandArgs().get(i).getClass().getName());\n+                        }\n+                    }\n+\n                     output.append(runnable.run(task.getCommandArgs().get(i)));\n                 } catch (Exception e) {\n                     if (task.isContinueOnError()) {\n                         output.append(\"Continuing on error: <\").append(e.getMessage()).append('>');\n-                        LOG.error(\"While running {} with args {}, continuing on error\",\n-                                command.getKey(), args, e);\n+                        LOG.error(\"While running {} with args {}, continuing on error\", command.getKey(), args, e);\n                     } else {\n                         throw new RuntimeException(\"While running \" + command.getKey(), e);\n                     }"},{"sha":"8870b4ea3637ec966d5bfd48e66d6f137c49e10e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java","status":"modified","additions":9,"deletions":18,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -23,6 +23,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.validation.ConstraintViolation;\n import javax.validation.ValidationException;\n import org.apache.commons.lang3.StringUtils;\n@@ -76,28 +77,22 @@ public InvalidEntityException(\n         this.entityClassSimpleName = entityClassSimpleName;\n \n         violations.forEach(violation -> {\n-            int firstComma = violation.getMessageTemplate().indexOf(';');\n-\n-            final String key = violation.getMessageTemplate().substring(\n-                    0, firstComma > 0 ? firstComma : violation.getMessageTemplate().length());\n-\n-            final String message = violation.getMessageTemplate().substring(firstComma > 0 ? firstComma + 1 : 0);\n+            String key = StringUtils.substringBefore(violation.getMessageTemplate(), \";\").trim();\n+            String message = StringUtils.substringAfter(violation.getMessageTemplate(), \";\").trim();\n \n             EntityViolationType entityViolationType;\n             try {\n-                entityViolationType = EntityViolationType.valueOf(key.trim());\n+                entityViolationType = EntityViolationType.valueOf(key);\n             } catch (IllegalArgumentException e) {\n                 entityViolationType = EntityViolationType.Standard;\n             }\n-\n-            entityViolationType.setMessage(message.trim());\n-\n+            entityViolationType.setMessage(message);\n             entityViolationType.setPropertyPath(violation.getPropertyPath().toString());\n+            entityViolationType.setInvalidValue(violation.getInvalidValue());\n \n             if (!this.violations.containsKey(violation.getLeafBean().getClass())) {\n                 this.violations.put(violation.getLeafBean().getClass(), EnumSet.noneOf(EntityViolationType.class));\n             }\n-\n             this.violations.get(violation.getLeafBean().getClass()).add(entityViolationType);\n         });\n     }\n@@ -116,12 +111,8 @@ public final Map<Class<?>, Set<EntityViolationType>> getViolations() {\n \n     @Override\n     public String getMessage() {\n-        StringBuilder sb = new StringBuilder();\n-\n-        violations.forEach(\n-                (key, value) -> sb.append(key.getSimpleName()).append(' ').append(value.toString()).append(\", \"));\n-        sb.delete(sb.lastIndexOf(\", \"), sb.length());\n-\n-        return sb.toString();\n+        return violations.entrySet().stream().\n+                map(entry -> entry.getKey().getSimpleName() + \" \" + entry.getValue().toString()).\n+                collect(Collectors.joining(\",\"));\n     }\n }"},{"sha":"3f83a3949c85fe5aeaf8508433e81d34ab96a0fc","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestCommandArgs.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommandArgs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommandArgs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommandArgs.java?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -18,17 +18,26 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import io.swagger.v3.oas.annotations.media.Schema;\n+import javax.validation.constraints.NotEmpty;\n import org.apache.syncope.common.lib.command.CommandArgs;\n \n public class TestCommandArgs extends CommandArgs {\n \n     private static final long serialVersionUID = 1408260716514938521L;\n \n-    private String parentRealm = \"/even/two\";\n+    @NotEmpty\n+    @Schema(description = \"parent realm\", example = \"/even/two\", defaultValue = \"/\",\n+            requiredMode = Schema.RequiredMode.REQUIRED)\n+    private String parentRealm = \"/\";\n \n-    private String realmName = \"realm123\";\n+    @NotEmpty\n+    @Schema(description = \"new realm name\", example = \"realm123\", requiredMode = Schema.RequiredMode.REQUIRED)\n+    private String realmName;\n \n-    private String printerName = \"printer123\";\n+    @NotEmpty\n+    @Schema(description = \"printer name\", example = \"printer123\", requiredMode = Schema.RequiredMode.REQUIRED)\n+    private String printerName;\n \n     public String getParentRealm() {\n         return parentRealm;"},{"sha":"cb2cfc72bdbc08dc06e469c5401f69784d36f532","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CommandITCase.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCommandITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCommandITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCommandITCase.java?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -22,6 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -30,6 +31,7 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -76,11 +78,26 @@ public void listCommands() {\n         assertTrue(command.getArgs() instanceof TestCommandArgs);\n     }\n \n+    @Test\n+    public void argsValidationFailure() {\n+        CommandTO command = COMMAND_SERVICE.search(new CommandQuery.Builder().\n+                keyword(TestCommand.class.getSimpleName()).page(1).size(1).build()).getResult().get(0);\n+\n+        try {\n+            COMMAND_SERVICE.run(command);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidValues, e.getType());\n+        }\n+    }\n+\n     @Test\n     public void runCommand() {\n         CommandTO command = COMMAND_SERVICE.search(\n                 new CommandQuery.Builder().page(1).size(1).build()).getResult().get(0);\n         TestCommandArgs args = ((TestCommandArgs) command.getArgs());\n+        args.setParentRealm(\"/even/two\");\n+        args.setRealmName(\"realm123\");\n         args.setPrinterName(\"printer124\");\n \n         CommandOutput output = COMMAND_SERVICE.run(command);"},{"sha":"1391335b491ae6fe5b0af9a6809d17854d942290","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MacroITCase.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMacroITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMacroITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMacroITCase.java?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -57,6 +57,14 @@ public class MacroITCase extends AbstractITCase {\n \n     private static String MACRO_TASK_KEY;\n \n+    private static final TestCommandArgs TCA = new TestCommandArgs();\n+\n+    static {\n+        TCA.setParentRealm(\"/odd\");\n+        TCA.setRealmName(\"macro\");\n+        TCA.setPrinterName(\"aprinter112\");\n+    }\n+\n     @BeforeAll\n     public static void testCommandsSetup() throws Exception {\n         CommandITCase.testCommandSetup();\n@@ -87,8 +95,7 @@ public static void testCommandsSetup() throws Exception {\n             task.setActive(true);\n             task.setRealm(\"/odd\");\n             task.getCommands().add(new CommandTO.Builder(\"GroovyCommand\").build());\n-            task.getCommands().add(new CommandTO.Builder(TestCommand.class.getSimpleName()).\n-                    args(new TestCommandArgs()).build());\n+            task.getCommands().add(new CommandTO.Builder(TestCommand.class.getSimpleName()).args(TCA).build());\n \n             Response response = TASK_SERVICE.create(TaskType.MACRO, task);\n             task = getObject(response.getLocation(), TaskService.class, MacroTaskTO.class);\n@@ -124,10 +131,9 @@ public void execute() {\n         ExecTO exec = TASK_SERVICE.read(TaskType.MACRO, MACRO_TASK_KEY, true).getExecutions().get(preExecs);\n         assertEquals(ExecStatus.SUCCESS.name(), exec.getStatus());\n \n-        TestCommandArgs args = new TestCommandArgs();\n-        AnyObjectTO printer = ANY_OBJECT_SERVICE.read(args.getPrinterName());\n+        AnyObjectTO printer = ANY_OBJECT_SERVICE.read(TCA.getPrinterName());\n         assertNotNull(printer);\n-        assertEquals(args.getParentRealm() + \"/\" + args.getRealmName(), printer.getRealm());\n+        assertEquals(TCA.getParentRealm() + \"/\" + TCA.getRealmName(), printer.getRealm());\n         assertFalse(REALM_SERVICE.list(printer.getRealm()).isEmpty());\n     }\n "},{"sha":"b0e52ef103a7bd5ed9c78b07a06e986d7cb96401","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -24,6 +24,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.Attr;\n@@ -62,7 +63,7 @@\n public class MembershipITCase extends AbstractITCase {\n \n     @Test\n-    public void misc() {\n+    public void misc() throws JsonProcessingException {\n         UserCR userCR = UserITCase.getUniqueSample(\"memb@apache.org\");\n         userCR.setRealm(\"/even/two\");\n         userCR.getPlainAttrs().add(new Attr.Builder(\"aLong\").value(\"1976\").build());"},{"sha":"3027aad8ce8b16bd688e264389da0fb67edc1c3a","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9e4c8da6ba71d316b780dec9a285deaffc85b5e/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=f9e4c8da6ba71d316b780dec9a285deaffc85b5e","patch":"@@ -1923,7 +1923,7 @@ under the License.\n             <dependency>\n               <groupId>com.puppycrawl.tools</groupId>\n               <artifactId>checkstyle</artifactId>\n-              <version>10.4</version>\n+              <version>10.5.0</version>\n             </dependency>\n           </dependencies>\n           <configuration>"}]}