{"sha":"e702a667035b32585f45ed72cee5dc68a515219d","node_id":"C_kwDOJfYA1toAKGU3MDJhNjY3MDM1YjMyNTg1ZjQ1ZWQ3MmNlZTVkYzY4YTUxNTIxOWQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-07-14T13:36:59Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-07-14T13:36:59Z"},"message":"[SYNCOPE-1689] Consolidate Provision, Mapping and Items into single JSON column (#360)","tree":{"sha":"c3a9b4d58335830a548cf5c202e9787e6061de99","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c3a9b4d58335830a548cf5c202e9787e6061de99"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e702a667035b32585f45ed72cee5dc68a515219d","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0Bv7CRBK7hj4Ov3rIwAAjKkIAH8j8bRjhRMSgVTSpmouhTXT\nE3W3QnNGZ2fcCuoFA5U9TzoKTWoVO+np7V3dOGI7ns4fzK30lqtlwGehb81bYz2r\nis7kpujxVTTN/nFGWA1Ev9YHfx/th22pEx8ZqxpitJY+ps152SQUYGTxq9J+8LMK\ne8eJtrjuaZEt9TZ8YI+eyGXPC6QZWgygtd/YQ/NT6xxtFQ1U/FyCGDqcu0HJoCbF\n+toslExhAjSd33pXtwNlygw3qIR4JdkPm9TcodUMwfqnC/WwuCpBukSrEh+8uNLp\n+z0Df1PJ+ms6rMtdt69ZjuU8Wlg0IIr98ej/OibqzPifv7Tgi7PogCE9qTcbNPc=\n=iphQ\n-----END PGP SIGNATURE-----\n","payload":"tree c3a9b4d58335830a548cf5c202e9787e6061de99\nparent 703803cc8ed2fc721a5e6c080ed231b9d1bce2d9\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1657805819 +0200\ncommitter GitHub <noreply@github.com> 1657805819 +0200\n\n[SYNCOPE-1689] Consolidate Provision, Mapping and Items into single JSON column (#360)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e702a667035b32585f45ed72cee5dc68a515219d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e702a667035b32585f45ed72cee5dc68a515219d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e702a667035b32585f45ed72cee5dc68a515219d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9"}],"stats":{"total":7633,"additions":2840,"deletions":4793},"files":[{"sha":"88384af75863e3c2c9f5b088475cc90007ac76dd","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMStatusProvider.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMStatusProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMStatusProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMStatusProvider.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -30,28 +30,28 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.ui.commons.status.ConnObjectWrapper;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n \n public class IdMStatusProvider implements StatusProvider {\n \n     private static final long serialVersionUID = 1875374599950896631L;\n \n     @Override\n-    public Optional<Pair<ConnObjectTO, ConnObjectTO>> get(\n+    public Optional<Pair<ConnObject, ConnObject>> get(\n             final String anyTypeKey, final String connObjectKeyValue, final String resource) {\n \n         return ReconStatusUtils.getReconStatus(anyTypeKey, connObjectKeyValue, resource).\n                 map(status -> Pair.of(status.getOnSyncope(), status.getOnResource()));\n     }\n \n     @Override\n-    public List<Triple<ConnObjectTO, ConnObjectWrapper, String>> get(\n+    public List<Triple<ConnObject, ConnObjectWrapper, String>> get(\n             final AnyTO any, final Collection<String> resources) {\n \n         return ReconStatusUtils.getReconStatuses(\n                 any.getType(), any.getKey(), any.getResources()).stream().\n-                map(status -> Triple.<ConnObjectTO, ConnObjectWrapper, String>of(\n+                map(status -> Triple.<ConnObject, ConnObjectWrapper, String>of(\n                 status.getRight().getOnSyncope(),\n                 new ConnObjectWrapper(any, status.getLeft(), status.getRight().getOnResource()),\n                 null))."},{"sha":"8cea28186cffcb73bb47db39580faabd3585cbf3","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectDetails.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectDetails.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,22 +20,22 @@\n \n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.wizards.any.ConnObjectPanel;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n \n public class ConnObjectDetails extends MultilevelPanel.SecondLevel {\n \n     private static final long serialVersionUID = -6532127408741991806L;\n \n-    public ConnObjectDetails(final ConnObjectTO connObjectTO) {\n+    public ConnObjectDetails(final ConnObject connObjectTO) {\n         super();\n \n         MultilevelPanel mlp = new MultilevelPanel(\"details\");\n         mlp.setFirstLevel(new ConnObjectPanel(\n                 MultilevelPanel.FIRST_LEVEL_ID,\n                 Pair.<IModel<?>, IModel<?>>of(Model.of(), Model.of()),\n-                Pair.of((ConnObjectTO) null, connObjectTO),\n+                Pair.of((ConnObject) null, connObjectTO),\n                 true));\n         add(mlp);\n     }"},{"sha":"a4d24cb6b0132ba4c8eb0907b9c365801e1aebaa","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -148,15 +148,15 @@ public void onClick(final AjaxRequestTarget target) {\n         accordion.setOutputMarkupId(true);\n         add(accordion.setEnabled(true).setVisible(true));\n \n-        List<ConnObjectTO> listOfItems = reloadItems(resource.getKey(), anyType, null, null);\n+        List<ConnObject> listOfItems = reloadItems(resource.getKey(), anyType, null, null);\n \n-        ListViewPanel.Builder<ConnObjectTO> builder = new ListViewPanel.Builder<>(\n-                ConnObjectTO.class, pageRef) {\n+        ListViewPanel.Builder<ConnObject> builder = new ListViewPanel.Builder<>(\n+                ConnObject.class, pageRef) {\n \n             private static final long serialVersionUID = -8251750413385566738L;\n \n             @Override\n-            protected Component getValueComponent(final String key, final ConnObjectTO bean) {\n+            protected Component getValueComponent(final String key, final ConnObject bean) {\n                 if (StringUtils.equals(key, STATUS)) {\n                     ReconStatus status;\n                     try {\n@@ -211,7 +211,7 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n             private static final long serialVersionUID = 7511002881490248598L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final ConnObjectTO modelObject) {\n+            public void onClick(final AjaxRequestTarget target, final ConnObject modelObject) {\n                 viewConnObject(modelObject, target);\n             }\n         }, ActionLink.ActionType.VIEW, IdMEntitlement.RESOURCE_GET_CONNOBJECT).\n@@ -228,7 +228,7 @@ public void onClick(final AjaxRequestTarget target, final ConnObjectTO modelObje\n                 private static final long serialVersionUID = 6377238742125L;\n \n                 @Override\n-                public void onClick(final AjaxRequestTarget target, final ConnObjectTO modelObject) {\n+                public void onClick(final AjaxRequestTarget target, final ConnObject modelObject) {\n                     try {\n                         ReconStatus status = ReconciliationRestClient.status(\n                                 new ReconQuery.Builder(anyType, resource.getKey()).fiql(modelObject.getFiql()).build());\n@@ -265,7 +265,7 @@ public void onClick(final AjaxRequestTarget target, final ConnObjectTO modelObje\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                List<ConnObjectTO> listOfItems = reloadItems(resource.getKey(), anyType, nextPageCookie, getFiql());\n+                List<ConnObject> listOfItems = reloadItems(resource.getKey(), anyType, nextPageCookie, getFiql());\n                 target.add(arrows);\n                 send(ConnObjectListViewPanel.this, Broadcast.DEPTH, new ListViewReload<>(listOfItems, target));\n             }\n@@ -282,15 +282,15 @@ public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof SearchClausePanel.SearchEvent) {\n             this.nextPageCookie = null;\n             AjaxRequestTarget target = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n-            List<ConnObjectTO> listOfItems = reloadItems(resource.getKey(), anyType, null, getFiql());\n+            List<ConnObject> listOfItems = reloadItems(resource.getKey(), anyType, null, getFiql());\n             target.add(arrows);\n             send(ConnObjectListViewPanel.this, Broadcast.DEPTH, new ListViewReload<>(listOfItems, target));\n         } else {\n             super.onEvent(event);\n         }\n     }\n \n-    protected abstract void viewConnObject(ConnObjectTO connObjectTO, AjaxRequestTarget target);\n+    protected abstract void viewConnObject(ConnObject connObjectTO, AjaxRequestTarget target);\n \n     protected abstract void pullConnObject(\n             String fiql,\n@@ -301,13 +301,13 @@ protected abstract void pullConnObject(\n             boolean isOnSyncope,\n             PageReference pageRef);\n \n-    protected List<ConnObjectTO> reloadItems(\n+    protected List<ConnObject> reloadItems(\n             final String resource,\n             final String anyType,\n             final String cookie,\n             final String fiql) {\n \n-        Pair<String, List<ConnObjectTO>> items = new ResourceRestClient().searchConnObjects(\n+        Pair<String, List<ConnObject>> items = new ResourceRestClient().searchConnObjects(\n                 resource,\n                 anyType,\n                 new ConnObjectTOQuery.Builder()."},{"sha":"17f8b11c95a805040ae14bb439e6564fd9502da5","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjects.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -27,8 +27,8 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -51,7 +51,7 @@ public ConnObjects(final ResourceTO resource, final PageReference pageRef) {\n         super(BaseModal.CONTENT_ID);\n \n         List<String> availableAnyTypes = resource.getProvisions().stream().\n-                map(ProvisionTO::getAnyType).\n+                map(Provision::getAnyType).\n                 sorted(AnyTypeRestClient.KEY_COMPARATOR).\n                 collect(Collectors.toList());\n         if (resource.getOrgUnit() != null) {\n@@ -115,7 +115,7 @@ private class NextableConnObjectDirectoryPanel extends ConnObjectListViewPanel {\n         }\n \n         @Override\n-        protected void viewConnObject(final ConnObjectTO connObjectTO, final AjaxRequestTarget target) {\n+        protected void viewConnObject(final ConnObject connObjectTO, final AjaxRequestTarget target) {\n             anyTypes.setEnabled(false);\n             target.add(anyTypes);\n "},{"sha":"96c8637017e58d1e24f27cb7593dd681c6324dd1","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ProvisionAuxClassesPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n@@ -46,9 +46,9 @@ public class ProvisionAuxClassesPanel extends Panel {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ProvisionAuxClassesPanel.class);\n \n-    private final ProvisionTO provision;\n+    private final Provision provision;\n \n-    public ProvisionAuxClassesPanel(final String id, final ProvisionTO provision) {\n+    public ProvisionAuxClassesPanel(final String id, final Provision provision) {\n         super(id);\n         setOutputMarkupId(true);\n "},{"sha":"f7f1a1829bb9d923f257429dc19af62c33218f2a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ResourceDirectoryPanel.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDirectoryPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -346,14 +346,8 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                     ResourceTO resource = ResourceRestClient.read(((ResourceTO) model.getObject()).getKey());\n                     resource.setKey(\"Copy of \" + resource.getKey());\n                     // reset some resource objects keys\n-                    if (resource.getOrgUnit() != null) {\n-                        resource.getOrgUnit().setKey(null);\n-                        resource.getOrgUnit().getItems().forEach(item -> item.setKey(null));\n-                    }\n                     resource.getProvisions().forEach(provision -> {\n-                        provision.setKey(null);\n                         if (provision.getMapping() != null) {\n-                            provision.getMapping().getItems().forEach(item -> item.setKey(null));\n                             provision.getMapping().getLinkingItems().clear();\n                         }\n                         provision.getVirSchemas().clear();"},{"sha":"4645e47713edc9663f4e220cb353b332dd7a3758","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/search/ConnObjectSearchPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n-import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClass;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -120,7 +120,7 @@ protected Map<String, PlainSchemaTO> load() {\n             protected Map<String, PlainSchemaTO> load() {\n                 return connectorRestClient.buildObjectClassInfo(\n                         connectorRestClient.read(resource.getConnector()), false).stream().\n-                        map(ConnIdObjectClassTO::getAttributes).\n+                        map(ConnIdObjectClass::getAttributes).\n                         flatMap(List::stream).\n                         collect(Collectors.toMap(PlainSchemaTO::getKey, Function.identity(),\n                                 (schema1, schema2) -> schema1));"},{"sha":"f34ef84e2ab54742ecf9c8bf9f56a3a864bc4a3a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -33,8 +33,8 @@\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ConnBundleTO;\n-import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.lib.to.ConnIdBundle;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClass;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -78,7 +78,7 @@ public static List<String> getObjectClasses(final String connectorKey) {\n                     getLanguage());\n             if (connInstance != null) {\n                 result.addAll(service.buildObjectClassInfo(connInstance, true).stream().\n-                        map(ConnIdObjectClassTO::getType).collect(Collectors.toList()));\n+                        map(ConnIdObjectClass::getType).collect(Collectors.toList()));\n             }\n         } catch (Exception e) {\n             LOG.error(\"While reading object classes for connector {}\", connectorKey, e);\n@@ -98,7 +98,7 @@ public static List<String> getExtAttrNames(\n         connInstanceTO.getConf().addAll(conf);\n \n         // SYNCOPE-156: use provided info to give schema names (and type!) by ObjectClass\n-        Optional<ConnIdObjectClassTO> connIdObjectClass = buildObjectClassInfo(connInstanceTO, false).stream().\n+        Optional<ConnIdObjectClass> connIdObjectClass = buildObjectClassInfo(connInstanceTO, false).stream().\n                 filter(object -> object.getType().equalsIgnoreCase(objectClass)).\n                 findAny();\n \n@@ -139,8 +139,8 @@ public static ConnInstanceTO delete(final String key) {\n         return connectorTO;\n     }\n \n-    public static List<ConnBundleTO> getAllBundles() {\n-        List<ConnBundleTO> bundles = List.of();\n+    public static List<ConnIdBundle> getAllBundles() {\n+        List<ConnIdBundle> bundles = List.of();\n \n         try {\n             bundles = getService(ConnectorService.class).getBundles(SyncopeConsoleSession.get().getLocale().toString());\n@@ -205,10 +205,10 @@ public static Pair<Boolean, String> check(final ConnInstanceTO connectorTO) {\n         return Pair.of(check, errorMessage);\n     }\n \n-    public static List<ConnIdObjectClassTO> buildObjectClassInfo(\n+    public static List<ConnIdObjectClass> buildObjectClassInfo(\n             final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n-        List<ConnIdObjectClassTO> result = List.of();\n+        List<ConnIdObjectClass> result = List.of();\n         try {\n             result = getService(ConnectorService.class).buildObjectClassInfo(connInstanceTO, includeSpecial);\n         } catch (Exception e) {"},{"sha":"908a5ca2cf8ccea0cb408bd28426f08c50446c33","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,8 +29,8 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n+import org.apache.syncope.common.lib.to.ConnObject;\n+import org.apache.syncope.common.lib.to.PagedConnObjectResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOQuery;\n@@ -75,7 +75,7 @@ public static Pair<Boolean, String> check(final ResourceTO resourceTO) {\n         return Pair.of(check, errorMessage);\n     }\n \n-    public static ConnObjectTO readConnObject(final String resource, final String anyTypeKey, final String anyKey) {\n+    public static ConnObject readConnObject(final String resource, final String anyTypeKey, final String anyKey) {\n         return getService(ResourceService.class).readConnObject(resource, anyTypeKey, anyKey);\n     }\n \n@@ -93,16 +93,16 @@ public static String getConnObjectKeyValue(final String resource, final String a\n         return null;\n     }\n \n-    public static Pair<String, List<ConnObjectTO>> searchConnObjects(\n+    public static Pair<String, List<ConnObject>> searchConnObjects(\n             final String resource,\n             final String anyTypeKey,\n             final ConnObjectTOQuery.Builder queryBuilder,\n             final SortParam<String> sortParam) {\n \n-        final List<ConnObjectTO> result = new ArrayList<>();\n+        final List<ConnObject> result = new ArrayList<>();\n         String nextPageResultCookie = null;\n \n-        PagedConnObjectTOResult list;\n+        PagedConnObjectResult list;\n         try {\n             if (sortParam != null) {\n                 queryBuilder.orderBy(toOrderBy(sortParam));"},{"sha":"beb6146a51914c8d03b5d3d3cc031857bcd6a448","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/LinkedAccountStatusPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FLinkedAccountStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FLinkedAccountStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FLinkedAccountStatusPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.client.console.panels.RemoteObjectPanel;\n import org.apache.syncope.client.console.wizards.any.ConnObjectPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n@@ -56,7 +56,7 @@ public LinkedAccountStatusPanel(\n     }\n \n     @Override\n-    protected Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs() {\n+    protected Pair<ConnObject, ConnObject> getConnObjectTOs() {\n         Optional<ReconStatus> status = ReconStatusUtils.getReconStatus(anyTypeKey, connObjectKeyValue, resource);\n \n         return status.map(reconStatus -> Pair.of(reconStatus.getOnSyncope(), reconStatus.getOnResource())).orElse(null);"},{"sha":"5a737f7b5f6596b2003ced47e3e771930b553a4f","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconStatusPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.client.console.panels.RemoteObjectPanel;\n import org.apache.syncope.client.console.wizards.any.ConnObjectPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n@@ -56,7 +56,7 @@ public ReconStatusPanel(\n     }\n \n     @Override\n-    protected Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs() {\n+    protected Pair<ConnObject, ConnObject> getConnObjectTOs() {\n         List<Pair<String, ReconStatus>> statuses =\n                 ReconStatusUtils.getReconStatuses(anyTypeKey, anyKey, List.of(resource));\n "},{"sha":"0399dc1f30db3ef366513819237e3f4cc22c85c5","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusModal.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.status.StatusBean;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -50,7 +50,7 @@ public ResourceStatusModal(\n         super(baseModal, pageReference, resource, null, false);\n \n         List<String> availableAnyTypes = resource.getProvisions().stream().\n-                map(ProvisionTO::getAnyType).\n+                map(Provision::getAnyType).\n                 sorted(AnyTypeRestClient.KEY_COMPARATOR).\n                 collect(Collectors.toList());\n "},{"sha":"1ca1ce27aadb1b3267fd68dd8e9fe8df12c61433","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java","status":"modified","additions":2,"deletions":14,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -45,8 +45,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n@@ -635,19 +634,8 @@ public void onClick(final AjaxRequestTarget target) {\n                     ResourceTO resource = ResourceRestClient.read(node.getKey());\n                     resource.setKey(\"Copy of \" + node.getKey());\n \n-                    // reset some resource objects keys\n-                    if (resource.getOrgUnit() != null) {\n-                        resource.getOrgUnit().setKey(null);\n-                        for (ItemTO item : resource.getOrgUnit().getItems()) {\n-                            item.setKey(null);\n-                        }\n-                    }\n-                    for (ProvisionTO provision : resource.getProvisions()) {\n-                        provision.setKey(null);\n+                    for (Provision provision : resource.getProvisions()) {\n                         if (provision.getMapping() != null) {\n-                            for (ItemTO item : provision.getMapping().getItems()) {\n-                                item.setKey(null);\n-                            }\n                             provision.getMapping().getLinkingItems().clear();\n                         }\n                         provision.getVirSchemas().clear();"},{"sha":"0bbe9be3c48733e285fb5976fcba5f878c9438a9","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/LinkedAccountDetailsPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountDetailsPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -158,7 +158,7 @@ private void setConnObjectFieldChoices(\n         AtomicReference<String> resourceRemoteKey = new AtomicReference<>(ConnIdSpecialName.NAME);\n         try {\n             resourceRemoteKey.set(ResourceRestClient.read(resource).getProvision(AnyTypeKind.USER.name()).get().\n-                    getMapping().getConnObjectKeyItem().getExtAttrName());\n+                    getMapping().getConnObjectKeyItem().get().getExtAttrName());\n         } catch (Exception ex) {\n             LOG.error(\"While reading mapping for resource {}\", resource, ex);\n         }\n@@ -168,7 +168,7 @@ private void setConnObjectFieldChoices(\n             builder.fiql(SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n                     is(resourceRemoteKey.get()).equalTo(searchTerm + \"*\").query()).build();\n         }\n-        Pair<String, List<ConnObjectTO>> items = ResourceRestClient.searchConnObjects(\n+        Pair<String, List<ConnObject>> items = ResourceRestClient.searchConnObjects(\n                 resource,\n                 AnyTypeKind.USER.name(),\n                 builder,"},{"sha":"4574260c8d2fad908821e772348c3b5c24628948","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorConfPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n import java.util.stream.Collectors;\n-import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdBundle;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.wicket.model.LoadableDetachableModel;\n@@ -29,9 +29,9 @@ public abstract class ConnectorConfPanel extends AbstractConnConfPanel<ConnInsta\n \n     private static final long serialVersionUID = -2025535531121434050L;\n \n-    private final List<ConnBundleTO> bundles;\n+    private final List<ConnIdBundle> bundles;\n \n-    public ConnectorConfPanel(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n+    public ConnectorConfPanel(final ConnInstanceTO connInstanceTO, final List<ConnIdBundle> bundles) {\n         super(connInstanceTO);\n         this.bundles = bundles;\n "},{"sha":"e285ed2bc980f85e72e7e86cefd9a165ac928014","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdBundle;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -48,7 +48,7 @@ public class ConnectorDetailsPanel extends WizardStep {\n \n     private static final long serialVersionUID = -2435937897614232137L;\n \n-    public ConnectorDetailsPanel(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n+    public ConnectorDetailsPanel(final ConnInstanceTO connInstanceTO, final List<ConnIdBundle> bundles) {\n         super();\n         setOutputMarkupId(true);\n \n@@ -111,7 +111,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     ((DropDownChoice<String>) location.getField()).setNullValid(false);\n                     bundleName.setEnabled(true);\n \n-                    List<ConnBundleTO> bundles = ConnectorRestClient.getAllBundles().stream().\n+                    List<ConnIdBundle> bundles = ConnectorRestClient.getAllBundles().stream().\n                             filter(object -> object.getLocation().equals(connInstanceTO.getLocation())).\n                             collect(Collectors.toList());\n \n@@ -161,7 +161,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                 List<String> versions;\n                 if (bundles.isEmpty()) {\n-                    List<ConnBundleTO> bundles = ConnectorRestClient.getAllBundles().stream().\n+                    List<ConnIdBundle> bundles = ConnectorRestClient.getAllBundles().stream().\n                             filter(object -> object.getLocation().equals(connInstanceTO.getLocation())).\n                             collect(Collectors.toList());\n                     versions = getVersions(connInstanceTO, bundles);\n@@ -207,14 +207,14 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 new PropertyModel<>(connInstanceTO.getPoolConf(), \"minEvictableIdleTimeMillis\")));\n     }\n \n-    private static List<String> getVersions(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n+    private static List<String> getVersions(final ConnInstanceTO connInstanceTO, final List<ConnIdBundle> bundles) {\n         return bundles.stream().filter(object -> object.getLocation().equals(connInstanceTO.getLocation())\n                 && object.getBundleName().equals(connInstanceTO.getBundleName())).\n-                map(ConnBundleTO::getVersion).collect(Collectors.toList());\n+                map(ConnIdBundle::getVersion).collect(Collectors.toList());\n     }\n \n-    private List<String> getBundles(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n+    private List<String> getBundles(final ConnInstanceTO connInstanceTO, final List<ConnIdBundle> bundles) {\n         return bundles.stream().filter(object -> object.getLocation().equals(connInstanceTO.getLocation())).\n-                map(ConnBundleTO::getBundleName).collect(Collectors.toList());\n+                map(ConnIdBundle::getBundleName).collect(Collectors.toList());\n     }\n }"},{"sha":"7fc06a4dd1f9a8423b4debebbcc24388a683cd42","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorWizardBuilder.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorWizardBuilder.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.topology.TopologyNode;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n-import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdBundle;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -41,7 +41,7 @@ public class ConnectorWizardBuilder extends AbstractResourceWizardBuilder<ConnIn\n \n     private static final long serialVersionUID = -2025535531121434050L;\n \n-    private final List<ConnBundleTO> bundles;\n+    private final List<ConnIdBundle> bundles;\n \n     public ConnectorWizardBuilder(final ConnInstanceTO defaultItem, final PageReference pageRef) {\n         super(defaultItem, pageRef);\n@@ -60,7 +60,7 @@ protected WizardModel buildModelSteps(final Serializable modelObject, final Wiza\n             @Override\n             protected Pair<Boolean, String> check(final AjaxRequestTarget target) {\n                 ConnInstanceTO connInstanceTO = ConnInstanceTO.class.cast(modelObject);\n-                ConnBundleTO bundleTO = ConnectorWizardBuilder.getBundle(connInstanceTO, bundles);\n+                ConnIdBundle bundleTO = ConnectorWizardBuilder.getBundle(connInstanceTO, bundles);\n \n                 connInstanceTO.setConnectorName(bundleTO.getConnectorName());\n                 connInstanceTO.setBundleName(bundleTO.getBundleName());\n@@ -82,7 +82,7 @@ protected void onComponentTag(final ComponentTag tag) {\n     @Override\n     protected Serializable onApplyInternal(final Serializable modelObject) {\n         ConnInstanceTO connInstanceTO = ConnInstanceTO.class.cast(modelObject);\n-        ConnBundleTO bundleTO = ConnectorWizardBuilder.getBundle(connInstanceTO, bundles);\n+        ConnIdBundle bundleTO = ConnectorWizardBuilder.getBundle(connInstanceTO, bundles);\n \n         connInstanceTO.setConnectorName(bundleTO.getConnectorName());\n         connInstanceTO.setBundleName(bundleTO.getBundleName());\n@@ -121,8 +121,8 @@ protected Serializable getCreateCustomPayloadEvent(final Serializable afterObjec\n                 target);\n     }\n \n-    protected static ConnBundleTO getBundle(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n-        List<ConnBundleTO> bundlesList;\n+    protected static ConnIdBundle getBundle(final ConnInstanceTO connInstanceTO, final List<ConnIdBundle> bundles) {\n+        List<ConnIdBundle> bundlesList;\n         if (bundles.isEmpty()) {\n             bundlesList = ConnectorRestClient.getAllBundles().stream().\n                     filter(object -> object.getLocation().equals(connInstanceTO.getLocation()))."},{"sha":"06e70654d34a57290ab8ec1dc6d9686cca82a505","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -32,8 +32,7 @@\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.MappingTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.PageReference;\n@@ -211,7 +210,7 @@ protected WizardModel buildModelSteps(final ResourceProvision resourceProvision,\n         JEXLTransformersTogglePanel jexlTransformers = new JEXLTransformersTogglePanel(mapping, pageRef);\n         addOuterObject(jexlTransformers);\n         if (resourceProvision.getProvisionTO() != null && resourceProvision.getProvisionTO().getMapping() == null) {\n-            resourceProvision.getProvisionTO().setMapping(new MappingTO());\n+            resourceProvision.getProvisionTO().setMapping(new org.apache.syncope.common.lib.to.Mapping());\n         }\n         mapping.add(new ResourceMappingPanel(\n                 \"mapping\", resourceTO, adminRealm, resourceProvision, itemTransformers, jexlTransformers));\n@@ -230,18 +229,18 @@ protected Serializable onApplyInternal(final ResourceProvision resourceProvision\n             this.resourceTO.getOrgUnit().getItems().clear();\n             this.resourceTO.getOrgUnit().getItems().addAll(resourceProvision.getItems());\n         } else if (resourceProvision.getProvisionTO() != null) {\n-            final List<ProvisionTO> provisions;\n+            final List<Provision> provisions;\n             if (resourceProvision.getKey() == null) {\n                 provisions = this.resourceTO.getProvisions().stream().\n                         filter(object -> !resourceProvision.getAnyType().equals(object.getAnyType())).\n                         collect(Collectors.toList());\n             } else {\n                 provisions = this.resourceTO.getProvisions().stream().\n-                        filter(object -> !resourceProvision.getKey().equals(object.getKey())).\n+                        filter(object -> !resourceProvision.getKey().equals(object.getObjectClass())).\n                         collect(Collectors.toList());\n             }\n \n-            ProvisionTO provisionTO = resourceProvision.getProvisionTO();\n+            Provision provisionTO = resourceProvision.getProvisionTO();\n             provisionTO.getMapping().getItems().clear();\n             provisionTO.getMapping().getItems().addAll(resourceProvision.getItems());\n             provisions.add(provisionTO);"},{"sha":"d61cf6c6e62a817c0f72b2d2429f00f1ae504ba7","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvision.java","status":"modified","additions":28,"deletions":30,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,38 +23,38 @@\n import java.util.Optional;\n import org.apache.syncope.client.console.panels.ToggleableTarget;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n-import org.apache.syncope.common.lib.to.OrgUnitTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n \n public class ResourceProvision implements ToggleableTarget {\n \n     private static final long serialVersionUID = 1103991919577739952L;\n \n-    private ProvisionTO provisionTO;\n+    private Provision provisionTO;\n \n-    private OrgUnitTO orgUnitTO;\n+    private OrgUnit orgUnitTO;\n \n-    private List<ItemTO> items;\n+    private List<Item> items;\n \n     public ResourceProvision() {\n         this.items = new ArrayList<>();\n     }\n \n-    public ResourceProvision(final ProvisionTO provisionTO) {\n+    public ResourceProvision(final Provision provisionTO) {\n         setProvisionTO(provisionTO);\n     }\n \n-    public ResourceProvision(final OrgUnitTO orgUnitTO) {\n+    public ResourceProvision(final OrgUnit orgUnitTO) {\n         setOrgUnitTO(orgUnitTO);\n     }\n \n-    public ProvisionTO getProvisionTO() {\n+    public Provision getProvisionTO() {\n         return provisionTO;\n     }\n \n-    public final void setProvisionTO(final ProvisionTO provisionTO) {\n+    public final void setProvisionTO(final Provision provisionTO) {\n         this.provisionTO = provisionTO;\n         this.orgUnitTO = null;\n \n@@ -68,11 +68,11 @@ public final void setProvisionTO(final ProvisionTO provisionTO) {\n         }\n     }\n \n-    public OrgUnitTO getOrgUnitTO() {\n+    public OrgUnit getOrgUnitTO() {\n         return orgUnitTO;\n     }\n \n-    public final void setOrgUnitTO(final OrgUnitTO orgUnitTO) {\n+    public final void setOrgUnitTO(final OrgUnit orgUnitTO) {\n         this.orgUnitTO = orgUnitTO;\n         this.provisionTO = null;\n \n@@ -87,33 +87,32 @@ public final void setOrgUnitTO(final OrgUnitTO orgUnitTO) {\n     @Override\n     public String getKey() {\n         return provisionTO == null\n-            ? Optional.ofNullable(orgUnitTO).map(OrgUnitTO::getKey).orElse(null)\n-            : provisionTO.getKey();\n+                ? Optional.ofNullable(orgUnitTO).map(OrgUnit::getObjectClass).orElse(null)\n+                : provisionTO.getObjectClass();\n     }\n \n     @Override\n     public String getAnyType() {\n         return provisionTO == null\n-            ? orgUnitTO == null\n-            ? null\n-            : SyncopeConstants.REALM_ANYTYPE : provisionTO.getAnyType();\n+                ? orgUnitTO == null\n+                        ? null\n+                        : SyncopeConstants.REALM_ANYTYPE : provisionTO.getAnyType();\n     }\n \n     public void setAnyType(final String anyType) {\n         if (SyncopeConstants.REALM_ANYTYPE.equals(anyType)) {\n-            setOrgUnitTO(new OrgUnitTO());\n+            setOrgUnitTO(new OrgUnit());\n         } else {\n-            setProvisionTO(new ProvisionTO());\n+            setProvisionTO(new Provision());\n             getProvisionTO().setAnyType(anyType);\n-            getProvisionTO().setMapping(new MappingTO());\n+            getProvisionTO().setMapping(new Mapping());\n         }\n     }\n \n     public String getObjectClass() {\n         return provisionTO == null\n-            ? Optional.ofNullable(orgUnitTO)\n-            .map(OrgUnitTO::getObjectClass)\n-            .orElse(null) : provisionTO.getObjectClass();\n+                ? Optional.ofNullable(orgUnitTO).map(OrgUnit::getObjectClass).orElse(null)\n+                : provisionTO.getObjectClass();\n     }\n \n     public void setObjectClass(final String objectClass) {\n@@ -129,8 +128,8 @@ public List<String> getAuxClasses() {\n     }\n \n     public boolean isIgnoreCaseMatch() {\n-        return Optional.ofNullable(provisionTO)\n-            .map(ProvisionTO::isIgnoreCaseMatch).orElseGet(() -> orgUnitTO.isIgnoreCaseMatch());\n+        return Optional.ofNullable(provisionTO).\n+                map(Provision::isIgnoreCaseMatch).orElseGet(() -> orgUnitTO.isIgnoreCaseMatch());\n     }\n \n     public void setIgnoreCaseMatch(final boolean ignoreCaseMatch) {\n@@ -143,8 +142,8 @@ public void setIgnoreCaseMatch(final boolean ignoreCaseMatch) {\n \n     public String getConnObjectLink() {\n         return provisionTO == null\n-            ? Optional.ofNullable(orgUnitTO).map(OrgUnitTO::getConnObjectLink).orElse(null)\n-            : provisionTO.getMapping().getConnObjectLink();\n+                ? Optional.ofNullable(orgUnitTO).map(OrgUnit::getConnObjectLink).orElse(null)\n+                : provisionTO.getMapping().getConnObjectLink();\n     }\n \n     public void setConnObjectLink(final String connObjectLink) {\n@@ -155,8 +154,7 @@ public void setConnObjectLink(final String connObjectLink) {\n         }\n     }\n \n-    public List<ItemTO> getItems() {\n+    public List<Item> getItems() {\n         return items;\n     }\n-\n }"},{"sha":"3c59396028892676af0e2d60211370f0dd2abbf1","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.PageReference;\n@@ -257,8 +257,8 @@ protected void onSubmit(final String type, final AjaxRequestTarget target) {\n         add(objectTypeTogglePanel);\n     }\n \n-    private void checkConnObjectKeyCount(final String anyType, final List<ItemTO> items) {\n-        long connObjectKeyCount = items.stream().filter(ItemTO::isConnObjectKey).count();\n+    private void checkConnObjectKeyCount(final String anyType, final List<Item> items) {\n+        long connObjectKeyCount = items.stream().filter(Item::isConnObjectKey).count();\n \n         if (connObjectKeyCount != 1) {\n             throw new IllegalArgumentException(anyType + \": \""},{"sha":"c5b8be70b35e6652b5552992d94545f735929591","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/status/ConnObjectWrapper.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FConnObjectWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FConnObjectWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FConnObjectWrapper.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,7 +20,7 @@\n \n import java.io.Serializable;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n \n public class ConnObjectWrapper implements Serializable {\n \n@@ -30,9 +30,9 @@ public class ConnObjectWrapper implements Serializable {\n \n     private final String resource;\n \n-    private final ConnObjectTO connObjectTO;\n+    private final ConnObject connObjectTO;\n \n-    public ConnObjectWrapper(final AnyTO any, final String resource, final ConnObjectTO connObjectTO) {\n+    public ConnObjectWrapper(final AnyTO any, final String resource, final ConnObject connObjectTO) {\n         this.any = any;\n         this.resource = resource;\n         this.connObjectTO = connObjectTO;\n@@ -46,7 +46,7 @@ public String getResource() {\n         return resource;\n     }\n \n-    public ConnObjectTO getConnObjectTO() {\n+    public ConnObject getConnObjectTO() {\n         return connObjectTO;\n     }\n "},{"sha":"787f8eb7446cf5049dda4b504d00a1c74f06d996","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/status/StatusUtils.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FStatusUtils.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.wicket.markup.ComponentTag;\n@@ -42,7 +42,7 @@ public final class StatusUtils implements Serializable {\n     public static StatusBean getStatusBean(\n             final AnyTO anyTO,\n             final String resource,\n-            final ConnObjectTO connObjectTO,\n+            final ConnObject connObjectTO,\n             final boolean notUser) {\n \n         StatusBean statusBean = new StatusBean(anyTO, resource);\n@@ -62,7 +62,7 @@ public static StatusBean getStatusBean(\n     public static StatusBean getStatusBean(\n             final RealmTO realmTO,\n             final String resource,\n-            final ConnObjectTO connObjectTO) {\n+            final ConnObject connObjectTO) {\n \n         StatusBean statusBean = new StatusBean(realmTO, resource);\n \n@@ -77,14 +77,14 @@ public static StatusBean getStatusBean(\n         return statusBean;\n     }\n \n-    public static Boolean isEnabled(final ConnObjectTO objectTO) {\n+    public static Boolean isEnabled(final ConnObject objectTO) {\n         Optional<Attr> status = objectTO.getAttr(ConnIdSpecialName.ENABLE);\n         return status.isPresent() && status.get().getValues() != null && !status.get().getValues().isEmpty()\n                 ? Boolean.valueOf(status.get().getValues().get(0))\n                 : Boolean.FALSE;\n     }\n \n-    private static String getConnObjectLink(final ConnObjectTO objectTO) {\n+    private static String getConnObjectLink(final ConnObject objectTO) {\n         Optional<Attr> name = Optional.ofNullable(objectTO).map(to -> to.getAttr(ConnIdSpecialName.NAME)).orElse(null);\n         return name != null && name.isPresent() && name.get().getValues() != null && !name.get().getValues().isEmpty()\n                 ? name.get().getValues().get(0)"},{"sha":"dca6c753cb26ac6324505bfaded864e2c2aba46f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoStatusProvider.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoStatusProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoStatusProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoStatusProvider.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -28,21 +28,21 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.ui.commons.status.ConnObjectWrapper;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n \n public class IdRepoStatusProvider implements StatusProvider {\n \n     private static final long serialVersionUID = -7948190795547208134L;\n \n     @Override\n-    public Optional<Pair<ConnObjectTO, ConnObjectTO>> get(\n+    public Optional<Pair<ConnObject, ConnObject>> get(\n             final String anyTypeKey, final String connObjectKeyValue, final String resource) {\n \n         return Optional.empty();\n     }\n \n     @Override\n-    public List<Triple<ConnObjectTO, ConnObjectWrapper, String>> get(\n+    public List<Triple<ConnObject, ConnObjectWrapper, String>> get(\n             final AnyTO any, final Collection<String> resources) {\n \n         return List.of();"},{"sha":"df6a9916da4f288a8f7733936cc558b4b873e8d8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/StatusProvider.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FStatusProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FStatusProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FStatusProvider.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -28,14 +28,14 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.ui.commons.status.ConnObjectWrapper;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n \n public interface StatusProvider extends Serializable {\n \n-    Optional<Pair<ConnObjectTO, ConnObjectTO>> get(\n+    Optional<Pair<ConnObject, ConnObject>> get(\n             String anyTypeKey, String connObjectKeyValue, String resource);\n \n-    List<Triple<ConnObjectTO, ConnObjectWrapper, String>> get(AnyTO any, Collection<String> resources);\n+    List<Triple<ConnObject, ConnObjectWrapper, String>> get(AnyTO any, Collection<String> resources);\n \n     <T extends Serializable> void addConnObjectLink(\n             ListViewPanel.Builder<T> builder, ActionLink<T> connObjectLink);"},{"sha":"d286e7b455fe23153032fa84fb4fd12ff6cb083d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.PageReference;\n@@ -279,7 +279,7 @@ protected Panel customResultBody(final String panelId, final AnyWrapper<A> item,\n                 ((ProvisioningResult<A>) result).getEntity(),\n                 new ListModel<>(new ArrayList<>()),\n                 ((ProvisioningResult<A>) result).getPropagationStatuses().stream().map(status -> {\n-                    ConnObjectTO before = status.getBeforeObj();\n+                    ConnObject before = status.getBeforeObj();\n                     ConnObjectWrapper afterObjWrapper = new ConnObjectWrapper(\n                             ((ProvisioningResult<A>) result).getEntity(),\n                             status.getResource(),"},{"sha":"7e1ad12c4e478bc71b2e5169abd7fe7c7325e2cf","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.client.ui.commons.status.StatusUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -162,7 +162,7 @@ protected Panel customResultBody(final String panelId, final RealmTO item, final\n             @Override\n             protected Component getValueComponent(final String key, final PropagationStatus bean) {\n                 if (\"afterObj\".equalsIgnoreCase(key)) {\n-                    ConnObjectTO afterObj = bean.getAfterObj();\n+                    ConnObject afterObj = bean.getAfterObj();\n                     String remoteId = afterObj == null\n                             || afterObj.getAttrs().isEmpty()\n                             || afterObj.getAttr(ConnIdSpecialName.NAME).isEmpty()\n@@ -249,7 +249,7 @@ protected RemoteRealmPanel(final PropagationStatus bean) {\n         }\n \n         @Override\n-        protected final Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs() {\n+        protected final Pair<ConnObject, ConnObject> getConnObjectTOs() {\n             return Pair.of(bean.getBeforeObj(), bean.getAfterObj());\n         }\n     }"},{"sha":"11a88f131e0317086f9744e3f02a9474b0af0810","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RemoteObjectPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemoteObjectPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemoteObjectPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemoteObjectPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.client.console.panels;\n \n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n \n public abstract class RemoteObjectPanel extends MultilevelPanel.SecondLevel {\n \n     private static final long serialVersionUID = 4303365227411467563L;\n \n     protected static final String REMOTE_OBJECT_PANEL_ID = \"remoteObject\";\n \n-    protected abstract Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs();\n+    protected abstract Pair<ConnObject, ConnObject> getConnObjectTOs();\n }"},{"sha":"46bb9aab66d560bbb75f34ce0b9c5263062d89ab","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/ConnObjectAttrColumn.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import java.util.Optional;\n import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n@@ -30,7 +30,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.ResourceModel;\n \n-public class ConnObjectAttrColumn extends AbstractColumn<ConnObjectTO, String> {\n+public class ConnObjectAttrColumn extends AbstractColumn<ConnObject, String> {\n \n     private static final long serialVersionUID = 2624734332447371372L;\n \n@@ -45,9 +45,9 @@ public ConnObjectAttrColumn(final String name, final SchemaType schemaType) {\n \n     @Override\n     public void populateItem(\n-            final Item<ICellPopulator<ConnObjectTO>> cellItem,\n+            final Item<ICellPopulator<ConnObject>> cellItem,\n             final String componentId,\n-            final IModel<ConnObjectTO> rowModel) {\n+            final IModel<ConnObject> rowModel) {\n \n         Optional<Attr> attr = rowModel.getObject().getAttr(name);\n         List<String> values = attr.map(Attr::getValues).orElse(null);"},{"sha":"3f74823941771f283c5ef9a4f635c846dee8aef8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ItemTransformerWidget.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -22,7 +22,7 @@\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.icon.FontAwesome5IconType;\n import java.util.List;\n import org.apache.syncope.client.console.wizards.mapping.ItemTransformersTogglePanel;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.markup.html.link.AbstractLink;\n@@ -33,13 +33,13 @@ public class ItemTransformerWidget extends AlertWidget<String> {\n \n     private static final long serialVersionUID = 7667120094526529934L;\n \n-    private final ItemTO item;\n+    private final Item item;\n \n     private final ItemTransformersTogglePanel transformers;\n \n     public ItemTransformerWidget(\n             final String id,\n-            final ItemTO item,\n+            final Item item,\n             final ItemTransformersTogglePanel transformers) {\n \n         super(id);"},{"sha":"64b809e679d88b205741bd3d6e79c1b438994554","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JEXLTransformerWidget.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,7 +24,7 @@\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.wizards.mapping.JEXLTransformersTogglePanel;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.markup.html.link.AbstractLink;\n@@ -35,13 +35,13 @@ public class JEXLTransformerWidget extends AlertWidget<String> {\n \n     private static final long serialVersionUID = 7667120094526529934L;\n \n-    private final ItemTO item;\n+    private final Item item;\n \n     private final JEXLTransformersTogglePanel transformers;\n \n     public JEXLTransformerWidget(\n             final String id,\n-            final ItemTO item,\n+            final Item item,\n             final JEXLTransformersTogglePanel transformers) {\n \n         super(id);"},{"sha":"587da008c0fa115184c1a6086a3ff10cad72cce8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/ConnObjectPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.EntityTOUtils;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.wicket.Component;\n import org.apache.wicket.behavior.Behavior;\n import org.apache.wicket.markup.ComponentTag;\n@@ -53,7 +53,7 @@ public class ConnObjectPanel extends Panel {\n     public ConnObjectPanel(\n             final String id,\n             final Pair<IModel<?>, IModel<?>> titles,\n-            final Pair<ConnObjectTO, ConnObjectTO> connObjectTOs,\n+            final Pair<ConnObject, ConnObject> connObjectTOs,\n             final boolean hideLeft) {\n \n         super(id);"},{"sha":"56fe8d68a4af25427ec74b26289255861cc25490","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/StatusPanel.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.client.ui.commons.status.StatusBean;\n import org.apache.syncope.client.ui.commons.status.StatusUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.Component;\n@@ -75,7 +75,7 @@ public <T extends AnyTO> StatusPanel(\n             final String id,\n             final T any,\n             final IModel<List<StatusBean>> model,\n-            final List<Triple<ConnObjectTO, ConnObjectWrapper, String>> connObjects,\n+            final List<Triple<ConnObject, ConnObjectWrapper, String>> connObjects,\n             final PageReference pageRef) {\n \n         super(id);\n@@ -85,7 +85,7 @@ public <T extends AnyTO> StatusPanel(\n     protected void init(\n             final AnyTO any,\n             final IModel<List<StatusBean>> model,\n-            final List<Triple<ConnObjectTO, ConnObjectWrapper, String>> connObjects,\n+            final List<Triple<ConnObject, ConnObjectWrapper, String>> connObjects,\n             final PageReference pageRef,\n             final boolean enableConnObjectLink) {\n \n@@ -158,7 +158,7 @@ protected Component getValueComponent(final String key, final StatusBean bean) {\n \n             @Override\n             protected boolean statusCondition(final StatusBean bean) {\n-                Pair<ConnObjectTO, ConnObjectTO> pair =\n+                Pair<ConnObject, ConnObject> pair =\n                         getConnObjectTOs(bean.getKey(), bean.getResource(), connObjects);\n                 return pair != null && pair.getRight() != null;\n             }\n@@ -200,12 +200,12 @@ public Map<String, StatusBean> getInitialStatusBeanMap() {\n         return initialStatusBeanMap;\n     }\n \n-    protected static Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs(\n+    protected static Pair<ConnObject, ConnObject> getConnObjectTOs(\n             final String anyKey,\n             final String resource,\n-            final List<Triple<ConnObjectTO, ConnObjectWrapper, String>> objects) {\n+            final List<Triple<ConnObject, ConnObjectWrapper, String>> objects) {\n \n-        for (Triple<ConnObjectTO, ConnObjectWrapper, String> object : objects) {\n+        for (Triple<ConnObject, ConnObjectWrapper, String> object : objects) {\n             if (anyKey.equals(object.getMiddle().getAny().getKey())\n                     && resource.equalsIgnoreCase(object.getMiddle().getResource())) {\n \n@@ -222,9 +222,9 @@ static class RemoteAnyPanel extends RemoteObjectPanel {\n \n         protected final StatusBean bean;\n \n-        protected final List<Triple<ConnObjectTO, ConnObjectWrapper, String>> connObjects;\n+        protected final List<Triple<ConnObject, ConnObjectWrapper, String>> connObjects;\n \n-        RemoteAnyPanel(final StatusBean bean, final List<Triple<ConnObjectTO, ConnObjectWrapper, String>> connObjects) {\n+        RemoteAnyPanel(final StatusBean bean, final List<Triple<ConnObject, ConnObjectWrapper, String>> connObjects) {\n             this.bean = bean;\n             this.connObjects = connObjects;\n \n@@ -236,7 +236,7 @@ static class RemoteAnyPanel extends RemoteObjectPanel {\n         }\n \n         @Override\n-        protected final Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs() {\n+        protected final Pair<ConnObject, ConnObject> getConnObjectTOs() {\n             return StatusPanel.getConnObjectTOs(bean.getKey(), bean.getResource(), connObjects);\n         }\n     }"},{"sha":"5ddc00f345c196684403e4436911120d0bce9344","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/mapping/AbstractMappingPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n@@ -76,7 +76,7 @@ public abstract class AbstractMappingPanel extends Panel {\n     /**\n      * All mappings.\n      */\n-    protected final ListView<ItemTO> mappings;\n+    protected final ListView<Item> mappings;\n \n     /**\n      * Mapping container.\n@@ -87,7 +87,7 @@ public AbstractMappingPanel(\n             final String id,\n             final ItemTransformersTogglePanel itemTransformers,\n             final JEXLTransformersTogglePanel jexlTransformers,\n-            final IModel<List<ItemTO>> model,\n+            final IModel<List<Item>> model,\n             final boolean addMappingBtnVisible,\n             final MappingPurpose defaultPurpose) {\n \n@@ -181,8 +181,8 @@ protected String createRelAttribute() {\n             private static final long serialVersionUID = 4949588177564901031L;\n \n             @Override\n-            protected void populateItem(final ListItem<ItemTO> item) {\n-                final ItemTO itemTO = item.getModelObject();\n+            protected void populateItem(final ListItem<Item> item) {\n+                final Item itemTO = item.getModelObject();\n                 if (itemTO.getPurpose() == null) {\n                     itemTO.setPurpose(defaultPurpose);\n                 }\n@@ -380,7 +380,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target) {\n-                model.getObject().add(new ItemTO());\n+                model.getObject().add(new Item());\n                 target.add(AbstractMappingPanel.this);\n             }\n         };"},{"sha":"ac580f4bd094e006b2ee8b82dacc5ce40ce33b1d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/mapping/ItemTransformersTogglePanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -43,7 +43,7 @@ public class ItemTransformersTogglePanel extends TogglePanel<Serializable> {\n \n     private static final long serialVersionUID = -3195479265440591519L;\n \n-    private ItemTO item;\n+    private Item item;\n \n     public ItemTransformersTogglePanel(final WebMarkupContainer container, final PageReference pageRef) {\n         super(Constants.OUTER, \"itemTransformersTogglePanel\", pageRef);\n@@ -110,7 +110,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n         });\n     }\n \n-    public ItemTransformersTogglePanel setItem(final AjaxRequestTarget target, final ItemTO item) {\n+    public ItemTransformersTogglePanel setItem(final AjaxRequestTarget target, final Item item) {\n         this.item = item;\n         setHeader(target, StringUtils.EMPTY);\n         return this;"},{"sha":"8fde87d06342a8d623c142302cfe80520b1dfdf8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/mapping/JEXLTransformersTogglePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FJEXLTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FJEXLTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FJEXLTransformersTogglePanel.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.client.console.panels.TogglePanel;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n@@ -70,7 +70,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n         });\n     }\n \n-    public JEXLTransformersTogglePanel setItem(final AjaxRequestTarget target, final ItemTO item) {\n+    public JEXLTransformersTogglePanel setItem(final AjaxRequestTarget target, final Item item) {\n         this.propagationJEXLTransformer.setNewModel(new PropertyModel<>(item, \"propagationJEXLTransformer\"));\n         this.pullJEXLTransformer.setNewModel(new PropertyModel<>(item, \"pullJEXLTransformer\"));\n         setHeader(target, StringUtils.EMPTY);"},{"sha":"e1eceda8922f9bd8177fa66b75f0e2f829b246a5","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyItemTransformer.groovy","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyItemTransformer.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyItemTransformer.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyItemTransformer.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,10 +20,10 @@ import groovy.transform.CompileStatic\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair\n import org.apache.syncope.common.lib.to.EntityTO\n+import org.apache.syncope.common.lib.to.Item\n import org.apache.syncope.common.lib.types.AttrSchemaType\n-import org.apache.syncope.core.persistence.api.entity.Entity\n+import org.apache.syncope.core.persistence.api.entity.Any\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue\n-import org.apache.syncope.core.persistence.api.entity.resource.Item\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer\n \n @CompileStatic\n@@ -32,7 +32,7 @@ class MyItemTransformer implements ItemTransformer {\n   @Override\n   Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n     Item item,\n-    Entity entity,\n+    Any<?> any,\n     AttrSchemaType schemaType,\n     List<PlainAttrValue> values) {\n "},{"sha":"f92be605eca82948c6e5d7f2a48d1758c77963d1","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyLogicActions.groovy","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyLogicActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyLogicActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyLogicActions.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -17,9 +17,10 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n-import org.apache.syncope.common.lib.request.AnyCR;\n-import org.apache.syncope.common.lib.request.AnyUR;\n-import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.request.AnyCR\n+import org.apache.syncope.common.lib.request.AnyUR\n+import org.apache.syncope.common.lib.to.AnyTO\n+import org.apache.syncope.common.lib.to.PropagationStatus\n import org.apache.syncope.core.provisioning.api.LogicActions\n \n @CompileStatic\n@@ -31,7 +32,7 @@ class MyLogicActions implements LogicActions {\n   }\n \n   @Override\n-  <A extends AnyTO> A afterCreate(A input) {\n+  <A extends AnyTO> A afterCreate(A input, List<PropagationStatus> statuses) {\n     return input;\n   }\n \n@@ -41,7 +42,7 @@ class MyLogicActions implements LogicActions {\n   }\n \n   @Override\n-  <A extends AnyTO> A afterUpdate(A input) {\n+  <A extends AnyTO> A afterUpdate(A input, List<PropagationStatus> statuses) {\n     return input;\n   }\n \n@@ -51,7 +52,7 @@ class MyLogicActions implements LogicActions {\n   }\n \n   @Override\n-  <A extends AnyTO> A afterDelete(A input) {\n+  <A extends AnyTO> A afterDelete(A input, List<PropagationStatus> statuses) {\n     return input;\n   }\n }\n\\ No newline at end of file"},{"sha":"6c83796acbca983e55c7c75f594c61caec9fa57c","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPropagationActions.groovy","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,8 +20,8 @@\n import groovy.transform.CompileStatic\n import java.util.Optional\n import java.util.Set\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision\n+import org.apache.syncope.common.lib.to.OrgUnit\n+import org.apache.syncope.common.lib.to.Provision\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions"},{"sha":"f9d9bb72c79cf6aa6ddb2eedba2b46d9914f298a","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyProvisionSorter.groovy","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyProvisionSorter.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyProvisionSorter.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyProvisionSorter.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,9 +18,8 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n-import org.apache.syncope.core.persistence.api.ProvisionSorter\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision\n-\n+import org.apache.syncope.common.lib.to.Provision\n+import org.apache.syncope.core.provisioning.api.ProvisionSorter\n \n @CompileStatic\n class MyProvisionSorter implements ProvisionSorter {\n@@ -29,5 +28,4 @@ class MyProvisionSorter implements ProvisionSorter {\n   int compare(Provision provision1, Provision provision2) {\n     return 0;\n   }\n-  \n-}\n\\ No newline at end of file\n+}"},{"sha":"c8ee0be506e4bd51d64b8cd3a3ef6eaa347b4bd3","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,9 +23,9 @@ import org.apache.syncope.common.lib.request.AnyUR\n import org.apache.syncope.common.lib.to.LinkedAccountTO\n import org.apache.syncope.common.lib.to.RealmTO\n import org.apache.syncope.common.lib.to.EntityTO\n+import org.apache.syncope.common.lib.to.OrgUnit\n+import org.apache.syncope.common.lib.to.Provision\n import org.apache.syncope.common.lib.to.ProvisioningReport\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningActions"},{"sha":"c4e3a8faecc383097bb312279a9aba44d94a3951","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullCorrelationRule.groovy","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullCorrelationRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullCorrelationRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullCorrelationRule.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -17,9 +17,9 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n+import org.apache.syncope.common.lib.to.Provision\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision\n import org.identityconnectors.framework.common.objects.SyncDelta\n \n @CompileStatic"},{"sha":"f2547726d946aee1239085ce89c8f37fa1c5643c","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPushCorrelationRule.groovy","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPushCorrelationRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPushCorrelationRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPushCorrelationRule.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -17,16 +17,17 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n+import org.apache.syncope.common.lib.to.Provision\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.apache.syncope.core.persistence.api.entity.Any\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource\n+import org.identityconnectors.framework.common.objects.filter.Filter\n \n @CompileStatic\n class MyPushCorrelationRule implements PushCorrelationRule {\n \n   @Override\n-  Filter getFilter(Any<?> any, Provision provision) {\n+  Filter getFilter(Any<?> any, ExternalResource resource, Provision provision) {\n     \n   }\n }"},{"sha":"e449c3632b60a6c33f468b300eba813d8bc4ec80","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyReportlet.groovy","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyReportlet.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyReportlet.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyReportlet.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,6 +19,7 @@\n import groovy.transform.CompileStatic\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator\n import org.apache.syncope.core.persistence.api.dao.Reportlet\n+import org.xml.sax.ContentHandler\n import org.xml.sax.SAXException\n import java.util.concurrent.atomic.AtomicReference\n \n@@ -27,5 +28,5 @@ class MyReportlet implements Reportlet {\n   \n   @Override\n   void extract(ContentHandler handler, AtomicReference<String> status) throws SAXException {\n-  }\n+  }  \n }"},{"sha":"550ae91b706ea1de58ab62d48f0e397cf552cdcb","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MySchedTaskJobDelegate.groovy","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMySchedTaskJobDelegate.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMySchedTaskJobDelegate.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMySchedTaskJobDelegate.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -22,8 +22,19 @@ import org.quartz.JobExecutionContext\n import org.quartz.JobExecutionException\n \n @CompileStatic\n-class MySchedTaskJobDelegate implements SchedTaskJobDelegate {\n-\t\n+class MySchedTaskJobDelegate implements SchedTaskJobDelegate {\t\n+\n+  String currentStatus() {\n+    return \"RUNNING\"\n+  }\n+\n+  void interrupt() {\n+  }\n+\n+  boolean isInterrupted() {\n+    return false\n+  }\n+\n   @Override\n   void execute(String taskKey, boolean dryRun, JobExecutionContext context) throws JobExecutionException {\n    "},{"sha":"93cf989b5065b98072bd036d69f48cba1866a534","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AttrRepoTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrRepoTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrRepoTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrRepoTO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -38,7 +38,7 @@ public class AttrRepoTO implements EntityTO {\n \n     private int order = 0;\n \n-    private final List<ItemTO> items = new ArrayList<>();\n+    private final List<Item> items = new ArrayList<>();\n \n     private AttrRepoConf conf;\n \n@@ -77,7 +77,7 @@ public void setOrder(final int order) {\n         this.order = order;\n     }\n \n-    public List<ItemTO> getItems() {\n+    public List<Item> getItems() {\n         return items;\n     }\n "},{"sha":"2888ac9f78e1ea891124a32525cb5335ec5c4df8","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AuthModuleTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -38,7 +38,7 @@ public class AuthModuleTO implements EntityTO {\n \n     private int order = 0;\n \n-    private final List<ItemTO> items = new ArrayList<>();\n+    private final List<Item> items = new ArrayList<>();\n \n     private AuthModuleConf conf;\n \n@@ -77,7 +77,7 @@ public void setOrder(final int order) {\n         this.order = order;\n     }\n \n-    public List<ItemTO> getItems() {\n+    public List<Item> getItems() {\n         return items;\n     }\n "},{"sha":"1256ef824c946acbebd598d2edbdbd5d8a63228f","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ConnIdBundle.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdBundle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdBundle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdBundle.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.common.lib.BaseBean;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n \n-public class ConnBundleTO implements BaseBean {\n+public class ConnIdBundle implements BaseBean {\n \n     private static final long serialVersionUID = 7215115961910138005L;\n ","previous_filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ConnBundleTO.java"},{"sha":"fe5695cb9036aaff55ec8fd53ecdf157c665243c","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ConnIdObjectClass.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdObjectClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdObjectClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdObjectClass.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -27,7 +27,7 @@\n /**\n  * Metadata description of ConnId ObjectClass.\n  */\n-public class ConnIdObjectClassTO implements BaseBean {\n+public class ConnIdObjectClass implements BaseBean {\n \n     private static final long serialVersionUID = -3719658595689434648L;\n ","previous_filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ConnIdObjectClassTO.java"},{"sha":"81bb31f7cb1099dcff683f69401d0ae6f4f76afc","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/Mapping.java","status":"renamed","additions":6,"deletions":44,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMapping.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -22,19 +22,16 @@\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-public class MappingTO implements ItemContainerTO {\n+public class Mapping extends ItemContainer {\n \n     private static final long serialVersionUID = 8447688036282611118L;\n \n     private String connObjectLink;\n \n-    private final List<ItemTO> items = new ArrayList<>();\n-\n-    private final List<ItemTO> linkingItems = new ArrayList<>();\n+    private final List<Item> linkingItems = new ArrayList<>();\n \n     public String getConnObjectLink() {\n         return connObjectLink;\n@@ -44,44 +41,9 @@ public void setConnObjectLink(final String connObjectLink) {\n         this.connObjectLink = connObjectLink;\n     }\n \n-    @Override\n-    public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().orElse(null);\n-    }\n-\n-    protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n-        connObjectItem.setMandatoryCondition(\"true\");\n-        connObjectItem.setConnObjectKey(true);\n-\n-        return this.add(connObjectItem);\n-    }\n-\n-    @Override\n-    public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n-        return Optional.ofNullable(connObjectKeyItem)\n-                .map(this::addConnObjectKeyItem).orElseGet(() -> remove(getConnObjectKeyItem()));\n-    }\n-\n-    @JacksonXmlElementWrapper(localName = \"items\")\n-    @JacksonXmlProperty(localName = \"item\")\n-    @Override\n-    public List<ItemTO> getItems() {\n-        return items;\n-    }\n-\n-    @Override\n-    public boolean add(final ItemTO item) {\n-        return Optional.ofNullable(item)\n-                .filter(itemTO -> this.items.contains(itemTO) || this.items.add(itemTO)).isPresent();\n-    }\n-\n-    public boolean remove(final ItemTO item) {\n-        return this.items.remove(item);\n-    }\n-\n     @JacksonXmlElementWrapper(localName = \"linkingItems\")\n     @JacksonXmlProperty(localName = \"linkingItem\")\n-    public List<ItemTO> getLinkingItems() {\n+    public List<Item> getLinkingItems() {\n         return linkingItems;\n     }\n \n@@ -96,19 +58,19 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        MappingTO other = (MappingTO) obj;\n+        Mapping other = (Mapping) obj;\n         return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n                 append(connObjectLink, other.connObjectLink).\n-                append(items, other.items).\n                 append(linkingItems, other.linkingItems).\n                 build();\n     }\n \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n                 append(connObjectLink).\n-                append(items).\n                 append(linkingItems).\n                 build();\n     }","previous_filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java"},{"sha":"d0178830d79dd56c6f9f4b0d38eb4b10543806e2","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/OrgUnit.java","status":"renamed","additions":16,"deletions":72,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnit.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,39 +18,20 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-public class OrgUnitTO implements EntityTO, ItemContainerTO {\n+public class OrgUnit extends ItemContainer {\n \n     private static final long serialVersionUID = -1868877794174953177L;\n \n-    private String key;\n-\n     private String objectClass;\n \n-    private String syncToken;\n-\n-    private boolean ignoreCaseMatch;\n-\n     private String connObjectLink;\n \n-    private final List<ItemTO> items = new ArrayList<>();\n-\n-    @Override\n-    public String getKey() {\n-        return key;\n-    }\n+    private String syncToken;\n \n-    @Override\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n+    private boolean ignoreCaseMatch;\n \n     public String getObjectClass() {\n         return objectClass;\n@@ -60,22 +41,6 @@ public void setObjectClass(final String objectClass) {\n         this.objectClass = objectClass;\n     }\n \n-    public String getSyncToken() {\n-        return syncToken;\n-    }\n-\n-    public void setSyncToken(final String syncToken) {\n-        this.syncToken = syncToken;\n-    }\n-\n-    public boolean isIgnoreCaseMatch() {\n-        return ignoreCaseMatch;\n-    }\n-\n-    public void setIgnoreCaseMatch(final boolean ignoreCaseMatch) {\n-        this.ignoreCaseMatch = ignoreCaseMatch;\n-    }\n-\n     public String getConnObjectLink() {\n         return connObjectLink;\n     }\n@@ -84,39 +49,20 @@ public void setConnObjectLink(final String connObjectLink) {\n         this.connObjectLink = connObjectLink;\n     }\n \n-    @Override\n-    public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().orElse(null);\n-    }\n-\n-    protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n-        connObjectItem.setMandatoryCondition(\"true\");\n-        connObjectItem.setConnObjectKey(true);\n-\n-        return this.add(connObjectItem);\n-    }\n-\n-    @Override\n-    public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n-        return Optional.ofNullable(connObjectKeyItem)\n-                .map(this::addConnObjectKeyItem).orElseGet(() -> remove(getConnObjectKeyItem()));\n+    public String getSyncToken() {\n+        return syncToken;\n     }\n \n-    @JacksonXmlElementWrapper(localName = \"items\")\n-    @JacksonXmlProperty(localName = \"item\")\n-    @Override\n-    public List<ItemTO> getItems() {\n-        return items;\n+    public void setSyncToken(final String syncToken) {\n+        this.syncToken = syncToken;\n     }\n \n-    @Override\n-    public boolean add(final ItemTO item) {\n-        return Optional.ofNullable(item)\n-                .filter(itemTO -> this.items.contains(itemTO) || this.items.add(itemTO)).isPresent();\n+    public boolean isIgnoreCaseMatch() {\n+        return ignoreCaseMatch;\n     }\n \n-    public boolean remove(final ItemTO item) {\n-        return this.items.remove(item);\n+    public void setIgnoreCaseMatch(final boolean ignoreCaseMatch) {\n+        this.ignoreCaseMatch = ignoreCaseMatch;\n     }\n \n     @Override\n@@ -130,26 +76,24 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        OrgUnitTO other = (OrgUnitTO) obj;\n+        OrgUnit other = (OrgUnit) obj;\n         return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n                 append(ignoreCaseMatch, other.ignoreCaseMatch).\n-                append(key, other.key).\n                 append(objectClass, other.objectClass).\n-                append(syncToken, other.syncToken).\n                 append(connObjectLink, other.connObjectLink).\n-                append(items, other.items).\n+                append(syncToken, other.syncToken).\n                 build();\n     }\n \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n-                append(key).\n+                appendSuper(super.hashCode()).\n                 append(objectClass).\n+                append(connObjectLink).\n                 append(syncToken).\n                 append(ignoreCaseMatch).\n-                append(connObjectLink).\n-                append(items).\n                 build();\n     }\n }","previous_filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/OrgUnitTO.java"},{"sha":"8b61a8d508d18bfc8eed16f81e00608da8d02471","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/PagedConnObjectResult.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPagedConnObjectResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPagedConnObjectResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPagedConnObjectResult.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -27,13 +27,13 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.BaseBean;\n \n-public class PagedConnObjectTOResult implements BaseBean {\n+public class PagedConnObjectResult implements BaseBean {\n \n     private static final long serialVersionUID = -2832908019064402976L;\n \n     private URI next;\n \n-    private final List<ConnObjectTO> result = new ArrayList<>();\n+    private final List<ConnObject> result = new ArrayList<>();\n \n     private String pagedResultsCookie;\n \n@@ -109,7 +109,7 @@ public void setAllResultsReturned(final boolean allResultsReturned) {\n \n     @JacksonXmlElementWrapper(localName = \"result\")\n     @JacksonXmlProperty(localName = \"item\")\n-    public List<ConnObjectTO> getResult() {\n+    public List<ConnObject> getResult() {\n         return result;\n     }\n \n@@ -135,7 +135,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final PagedConnObjectTOResult other = (PagedConnObjectTOResult) obj;\n+        final PagedConnObjectResult other = (PagedConnObjectResult) obj;\n         return new EqualsBuilder().\n                 append(next, other.next).\n                 append(result, other.result).","previous_filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/PagedConnObjectTOResult.java"},{"sha":"9e82deaf77ffcc5153ca020a02f09378529c36dc","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/Provision.java","status":"renamed","additions":6,"deletions":19,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvision.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,17 +20,16 @@\n \n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-public class ProvisionTO implements EntityTO {\n+public class Provision implements Serializable {\n \n     private static final long serialVersionUID = 8298910216218007927L;\n \n-    private String key;\n-\n     private String anyType;\n \n     private String objectClass;\n@@ -43,20 +42,10 @@ public class ProvisionTO implements EntityTO {\n \n     private String uidOnCreate;\n \n-    private MappingTO mapping;\n+    private Mapping mapping;\n \n     private final List<String> virSchemas = new ArrayList<>();\n \n-    @Override\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @Override\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n     public String getAnyType() {\n         return anyType;\n     }\n@@ -103,11 +92,11 @@ public void setUidOnCreate(final String uidOnCreate) {\n         this.uidOnCreate = uidOnCreate;\n     }\n \n-    public MappingTO getMapping() {\n+    public Mapping getMapping() {\n         return mapping;\n     }\n \n-    public void setMapping(final MappingTO mapping) {\n+    public void setMapping(final Mapping mapping) {\n         this.mapping = mapping;\n     }\n \n@@ -128,10 +117,9 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        ProvisionTO other = (ProvisionTO) obj;\n+        Provision other = (Provision) obj;\n         return new EqualsBuilder().\n                 append(ignoreCaseMatch, other.ignoreCaseMatch).\n-                append(key, other.key).\n                 append(anyType, other.anyType).\n                 append(objectClass, other.objectClass).\n                 append(auxClasses, other.auxClasses).\n@@ -145,7 +133,6 @@ public boolean equals(final Object obj) {\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n-                append(key).\n                 append(anyType).\n                 append(objectClass).\n                 append(auxClasses).","previous_filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisionTO.java"},{"sha":"de129322557753b1bc93a0c63245e34743eb8663","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ReconStatus.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconStatus.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -38,9 +38,9 @@ public class ReconStatus implements BaseBean {\n \n     private MatchType matchType;\n \n-    private ConnObjectTO onSyncope;\n+    private ConnObject onSyncope;\n \n-    private ConnObjectTO onResource;\n+    private ConnObject onResource;\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public AnyTypeKind getAnyTypeKind() {\n@@ -79,20 +79,20 @@ public void setMatchType(final MatchType matchType) {\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n-    public ConnObjectTO getOnSyncope() {\n+    public ConnObject getOnSyncope() {\n         return onSyncope;\n     }\n \n-    public void setOnSyncope(final ConnObjectTO onSyncope) {\n+    public void setOnSyncope(final ConnObject onSyncope) {\n         this.onSyncope = onSyncope;\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n-    public ConnObjectTO getOnResource() {\n+    public ConnObject getOnResource() {\n         return onResource;\n     }\n \n-    public void setOnResource(final ConnObjectTO onResource) {\n+    public void setOnResource(final ConnObject onResource) {\n         this.onResource = onResource;\n     }\n }"},{"sha":"9cfd0df430a254e2ebf19bc153838ff8ae0c1a52","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -47,9 +47,9 @@ public class ResourceTO implements EntityTO {\n      */\n     private String connectorDisplayName;\n \n-    private final List<ProvisionTO> provisions = new ArrayList<>();\n+    private final List<Provision> provisions = new ArrayList<>();\n \n-    private OrgUnitTO orgUnit;\n+    private OrgUnit orgUnit;\n \n     private Integer propagationPriority;\n \n@@ -229,21 +229,21 @@ public void setAccessPolicy(final String accessPolicy) {\n     }\n \n     @JsonIgnore\n-    public Optional<ProvisionTO> getProvision(final String anyType) {\n+    public Optional<Provision> getProvision(final String anyType) {\n         return provisions.stream().filter(\n                 provision -> anyType != null && anyType.equals(provision.getAnyType())).\n                 findFirst();\n     }\n \n-    public List<ProvisionTO> getProvisions() {\n+    public List<Provision> getProvisions() {\n         return provisions;\n     }\n \n-    public OrgUnitTO getOrgUnit() {\n+    public OrgUnit getOrgUnit() {\n         return orgUnit;\n     }\n \n-    public void setOrgUnit(final OrgUnitTO orgUnit) {\n+    public void setOrgUnit(final OrgUnit orgUnit) {\n         this.orgUnit = orgUnit;\n     }\n "},{"sha":"21ff1101e872bb8cff0d1c4b32fc88f528dcc5c9","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -42,8 +42,8 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.ConnBundleTO;\n-import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.lib.to.ConnIdBundle;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClass;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -66,7 +66,7 @@ public interface ConnectorService extends JAXRSService {\n     @GET\n     @Path(\"bundles\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);\n+    List<ConnIdBundle> getBundles(@QueryParam(\"lang\") String lang);\n \n     /**\n      * Builds the list of ConnId object classes information for the connector bundle matching the given connector\n@@ -84,7 +84,7 @@ public interface ConnectorService extends JAXRSService {\n     @Path(\"{key}/supportedObjectClasses\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<ConnIdObjectClassTO> buildObjectClassInfo(\n+    List<ConnIdObjectClass> buildObjectClassInfo(\n             @NotNull ConnInstanceTO connInstanceTO,\n             @QueryParam(\"includeSpecial\") @DefaultValue(\"false\") boolean includeSpecial);\n "},{"sha":"e0db20a1a3ef47059ba3df48bde287df361aa702","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -42,8 +42,8 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n+import org.apache.syncope.common.lib.to.ConnObject;\n+import org.apache.syncope.common.lib.to.PagedConnObjectResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOQuery;\n@@ -94,7 +94,7 @@ Response getConnObjectKeyValue(\n     @GET\n     @Path(\"{key}/{anyTypeKey}/{value}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    ConnObjectTO readConnObject(\n+    ConnObject readConnObject(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n             @NotNull @PathParam(\"value\") String value);\n@@ -111,7 +111,7 @@ ConnObjectTO readConnObject(\n     @GET\n     @Path(\"{key}/{anyTypeKey}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    PagedConnObjectTOResult searchConnObjects(\n+    PagedConnObjectResult searchConnObjects(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n             @BeanParam ConnObjectTOQuery connObjectTOQuery);"},{"sha":"c26b85937b2e8ca58af0d213a9996588eef60430","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ConnObject.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObject.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.BaseBean;\n \n-public class ConnObjectTO implements BaseBean {\n+public class ConnObject implements BaseBean {\n \n     private static final long serialVersionUID = 5139554911265442497L;\n \n@@ -75,7 +75,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final ConnObjectTO other = (ConnObjectTO) obj;\n+        final ConnObject other = (ConnObject) obj;\n         return new EqualsBuilder().\n                 append(fiql, other.fiql).\n                 append(attrs, other.attrs).","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ConnObjectTO.java"},{"sha":"1cd85207c964b4f47f12894c286ceb6762bce422","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/Item.java","status":"renamed","additions":3,"deletions":16,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItem.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,18 +20,17 @@\n \n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n \n-public class ItemTO implements EntityTO {\n+public class Item implements Serializable {\n \n     private static final long serialVersionUID = 2983498836767176862L;\n \n-    private String key;\n-\n     /**\n      * Attribute schema to be mapped. Consider other we can associate tha same attribute schema more than once, with\n      * different aliases, to different resource attributes.\n@@ -91,16 +90,6 @@ public void setExtAttrName(final String extAttrName) {\n         this.extAttrName = extAttrName;\n     }\n \n-    @Override\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @Override\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n     public String getMandatoryCondition() {\n         return mandatoryCondition;\n     }\n@@ -166,11 +155,10 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        ItemTO other = (ItemTO) obj;\n+        Item other = (Item) obj;\n         return new EqualsBuilder().\n                 append(connObjectKey, other.connObjectKey).\n                 append(password, other.password).\n-                append(key, other.key).\n                 append(intAttrName, other.intAttrName).\n                 append(extAttrName, other.extAttrName).\n                 append(mandatoryCondition, other.mandatoryCondition).\n@@ -184,7 +172,6 @@ public boolean equals(final Object obj) {\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n-                append(key).\n                 append(intAttrName).\n                 append(extAttrName).\n                 append(connObjectKey).","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ItemTO.java"},{"sha":"40d7a776f6963ec2168301bd209537095879a8a8","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ItemContainer.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainer.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+public abstract class ItemContainer implements Serializable {\n+\n+    private static final long serialVersionUID = 3637981417797873343L;\n+\n+    private final List<Item> items = new ArrayList<>();\n+\n+    @JsonIgnore\n+    public Optional<Item> getConnObjectKeyItem() {\n+        return getItems().stream().filter(Item::isConnObjectKey).findFirst();\n+    }\n+\n+    protected boolean addConnObjectKeyItem(final Item connObjectItem) {\n+        connObjectItem.setMandatoryCondition(\"true\");\n+        connObjectItem.setConnObjectKey(true);\n+\n+        return add(connObjectItem);\n+    }\n+\n+    public boolean setConnObjectKeyItem(final Item connObjectKeyItem) {\n+        return Optional.ofNullable(connObjectKeyItem).\n+                map(this::addConnObjectKeyItem).\n+                orElseGet(() -> getConnObjectKeyItem().map(items::remove).orElse(false));\n+    }\n+\n+    @JacksonXmlElementWrapper(localName = \"items\")\n+    @JacksonXmlProperty(localName = \"item\")\n+    public List<Item> getItems() {\n+        return items;\n+    }\n+\n+    public boolean add(final Item item) {\n+        return Optional.ofNullable(item).\n+                filter(itemTO -> items.contains(itemTO) || items.add(itemTO)).isPresent();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final ItemContainer other = (ItemContainer) obj;\n+        return new EqualsBuilder().\n+                append(items, other.items).\n+                build();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(items).\n+                build();\n+    }\n+}"},{"sha":"a8b3ff3c21a2271d84cc18939644b3b629745b2a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ItemContainerTO.java","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainerTO.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,33 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.BaseBean;\n-\n-public interface ItemContainerTO extends BaseBean {\n-\n-    ItemTO getConnObjectKeyItem();\n-\n-    boolean setConnObjectKeyItem(ItemTO connObjectKeyItem);\n-\n-    boolean add(ItemTO item);\n-\n-    List<ItemTO> getItems();\n-}"},{"sha":"14898b7626b26da7e4931f7b0b489a7911db2364","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationStatus.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -33,12 +33,12 @@ public class PropagationStatus implements BaseBean {\n     /**\n      * Object before propagation.\n      */\n-    private ConnObjectTO beforeObj;\n+    private ConnObject beforeObj;\n \n     /**\n      * Object after propagation.\n      */\n-    private ConnObjectTO afterObj;\n+    private ConnObject afterObj;\n \n     /**\n      * Propagated resource name.\n@@ -55,19 +55,19 @@ public class PropagationStatus implements BaseBean {\n      */\n     private String failureReason;\n \n-    public ConnObjectTO getAfterObj() {\n+    public ConnObject getAfterObj() {\n         return afterObj;\n     }\n \n-    public void setAfterObj(final ConnObjectTO afterObj) {\n+    public void setAfterObj(final ConnObject afterObj) {\n         this.afterObj = afterObj;\n     }\n \n-    public ConnObjectTO getBeforeObj() {\n+    public ConnObject getBeforeObj() {\n         return beforeObj;\n     }\n \n-    public void setBeforeObj(final ConnObjectTO beforeObj) {\n+    public void setBeforeObj(final ConnObject beforeObj) {\n         this.beforeObj = beforeObj;\n     }\n "},{"sha":"e804951bf257b48a75fb7b023d38b84e16fdfa24","filename":"common/idrepo/lib/src/test/java/org/apache/syncope/common/lib/SerializationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -144,7 +144,7 @@ public void provisioningResult() throws IOException {\n \n         PropagationStatus status = new PropagationStatus();\n         status.setFailureReason(\"failed\");\n-        status.setBeforeObj(new ConnObjectTO());\n+        status.setBeforeObj(new ConnObject());\n         original.getPropagationStatuses().add(status);\n \n         StringWriter writer = new StringWriter();"},{"sha":"cc9e33d9e390c09d16416601b66724f3409e317f","filename":"core/idm/logic/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fpom.xml?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -81,6 +81,11 @@ under the License.\n       <artifactId>spring-test</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.junit.jupiter</groupId>\n       <artifactId>junit-jupiter</artifactId>"},{"sha":"03c22af78370872d20a8108caa94545d67cfb872","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,8 +29,8 @@\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ConnBundleTO;\n-import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.lib.to.ConnIdBundle;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClass;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -40,7 +40,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n@@ -178,17 +178,17 @@ public ConnInstanceTO read(final String key, final String lang) {\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public List<ConnBundleTO> getBundles(final String lang) {\n+    public List<ConnIdBundle> getBundles(final String lang) {\n         if (StringUtils.isBlank(lang)) {\n             CurrentLocale.set(Locale.ENGLISH);\n         } else {\n             CurrentLocale.set(new Locale(lang));\n         }\n \n-        List<ConnBundleTO> connectorBundleTOs = new ArrayList<>();\n+        List<ConnIdBundle> connectorBundleTOs = new ArrayList<>();\n         connIdBundleManager.getConnInfoManagers().forEach((uri, cim) -> connectorBundleTOs.addAll(\n                 cim.getConnectorInfos().stream().map(bundle -> {\n-                    ConnBundleTO connBundleTO = new ConnBundleTO();\n+                    ConnIdBundle connBundleTO = new ConnIdBundle();\n                     connBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n \n                     connBundleTO.setLocation(uri.toString());\n@@ -211,7 +211,7 @@ public List<ConnBundleTO> getBundles(final String lang) {\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_READ + \"')\")\n \n-    public List<ConnIdObjectClassTO> buildObjectClassInfo(\n+    public List<ConnIdObjectClass> buildObjectClassInfo(\n             final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n         ConnInstanceTO actual = connInstanceTO;\n@@ -225,7 +225,7 @@ public List<ConnIdObjectClassTO> buildObjectClassInfo(\n                 getObjectClassInfo();\n \n         return objectClassInfo.stream().map(info -> {\n-            ConnIdObjectClassTO connIdObjectClassTO = new ConnIdObjectClassTO();\n+            ConnIdObjectClass connIdObjectClassTO = new ConnIdObjectClass();\n             connIdObjectClassTO.setType(info.getType());\n             connIdObjectClassTO.setAuxiliary(info.isAuxiliary());\n             connIdObjectClassTO.setContainer(info.isContainer());"},{"sha":"5223b589ac039eb939d962ed7cce31cb382fe8ae","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":137,"deletions":103,"changes":240,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,11 +29,14 @@\n import java.util.stream.Stream;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -62,11 +65,9 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n@@ -92,6 +93,7 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.SearchResult;\n import org.identityconnectors.framework.common.objects.SyncDeltaBuilder;\n@@ -163,7 +165,9 @@ public ReconciliationLogic(\n         this.connectorManager = connectorManager;\n     }\n \n-    protected Provision getProvision(final String anyTypeKey, final String resourceKey) {\n+    protected Triple<AnyType, ExternalResource, Provision> getProvision(\n+            final String anyTypeKey, final String resourceKey) {\n+\n         AnyType anyType = anyTypeDAO.find(anyTypeKey);\n         if (anyType == null) {\n             throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n@@ -173,22 +177,22 @@ protected Provision getProvision(final String anyTypeKey, final String resourceK\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceKey + \"'\");\n         }\n-        Provision provision = resource.getProvision(anyType).\n+        Provision provision = resource.getProvision(anyType.getKey()).\n                 orElseThrow(() -> new NotFoundException(\n                 \"Provision for \" + anyType + \" on Resource '\" + resourceKey + \"'\"));\n         if (provision.getMapping() == null) {\n             throw new NotFoundException(\"Mapping for \" + anyType + \" on Resource '\" + resourceKey + \"'\");\n         }\n \n-        return provision;\n+        return Triple.of(anyType, resource, provision);\n     }\n \n-    protected ConnObjectTO getOnSyncope(\n-            final MappingItem connObjectKeyItem,\n+    protected ConnObject getOnSyncope(\n+            final Item connObjectKeyItem,\n             final String connObjectKeyValue,\n             final Set<Attribute> attrs) {\n \n-        ConnObjectTO connObjectTO = ConnObjectUtils.getConnObjectTO(null, attrs);\n+        ConnObject connObjectTO = ConnObjectUtils.getConnObjectTO(null, attrs);\n         connObjectTO.getAttrs().add(new Attr.Builder(connObjectKeyItem.getExtAttrName()).\n                 value(connObjectKeyValue).build());\n         connObjectTO.getAttrs().add(new Attr.Builder(Uid.NAME).\n@@ -197,33 +201,34 @@ protected ConnObjectTO getOnSyncope(\n         return connObjectTO;\n     }\n \n-    protected ConnObjectTO getOnSyncope(\n+    protected ConnObject getOnSyncope(\n             final Any<?> any,\n-            final MappingItem connObjectKeyItem,\n+            final Item connObjectKeyItem,\n+            final ExternalResource resource,\n             final Provision provision) {\n \n         Pair<String, Set<Attribute>> prepared = mappingManager.prepareAttrsFromAny(\n-                any, null, false, true, provision);\n+                any, null, false, true, resource, provision);\n         return getOnSyncope(connObjectKeyItem, prepared.getLeft(), prepared.getRight());\n     }\n \n-    protected ConnObjectTO getOnSyncope(\n+    protected ConnObject getOnSyncope(\n             final LinkedAccount account,\n-            final MappingItem connObjectKeyItem,\n+            final Item connObjectKeyItem,\n             final Provision provision) {\n \n         Set<Attribute> attrs = mappingManager.prepareAttrsFromLinkedAccount(\n                 account.getOwner(), account, null, false, provision);\n         return getOnSyncope(connObjectKeyItem, account.getConnObjectKeyValue(), attrs);\n     }\n \n-    protected Any<?> getAny(final Provision provision, final String anyKey) {\n-        AnyDAO<Any<?>> dao = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).dao();\n+    protected Any<?> getAny(final Provision provision, final AnyTypeKind anyTypeKind, final String anyKey) {\n+        AnyDAO<Any<?>> dao = anyUtilsFactory.getInstance(anyTypeKind).dao();\n         Any<?> any = SyncopeConstants.UUID_PATTERN.matcher(anyKey).matches()\n                 ? dao.authFind(anyKey)\n                 : dao.authFind(dao.findKey(anyKey));\n         if (any == null) {\n-            throw new NotFoundException(provision.getAnyType().getKey() + \" '\" + anyKey + \"'\");\n+            throw new NotFoundException(provision.getAnyType() + \" '\" + anyKey + \"'\");\n         }\n         return any;\n     }\n@@ -235,27 +240,32 @@ public ReconStatus status(\n             final String anyKey,\n             final Set<String> moreAttrsToGet) {\n \n-        Provision provision = getProvision(anyTypeKey, resourceKey);\n+        Triple<AnyType, ExternalResource, Provision> triple = getProvision(anyTypeKey, resourceKey);\n \n-        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).\n+        Item connObjectKeyItem = MappingUtils.getConnObjectKeyItem(triple.getRight()).\n                 orElseThrow(() -> new NotFoundException(\n-                \"ConnObjectKey for \" + provision.getAnyType().getKey()\n-                + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n+                \"ConnObjectKey for \" + triple.getLeft().getKey()\n+                + \" on resource '\" + triple.getMiddle().getKey() + \"'\"));\n \n-        Any<?> any = getAny(provision, anyKey);\n+        Any<?> any = getAny(triple.getRight(), triple.getLeft().getKind(), anyKey);\n \n         ReconStatus status = new ReconStatus();\n         status.setMatchType(MatchType.ANY);\n         status.setAnyTypeKind(any.getType().getKind());\n         status.setAnyKey(any.getKey());\n         status.setRealm(any.getRealm().getFullPath());\n-        status.setOnSyncope(getOnSyncope(any, connObjectKeyItem, provision));\n-\n-        List<ConnectorObject> connObjs = outboundMatcher.match(connectorManager.getConnector(\n-                provision.getResource()), any, provision, Optional.of(moreAttrsToGet.toArray(String[]::new)));\n+        status.setOnSyncope(getOnSyncope(any, connObjectKeyItem, triple.getMiddle(), triple.getRight()));\n+\n+        List<ConnectorObject> connObjs = outboundMatcher.match(\n+                connectorManager.getConnector(triple.getMiddle()),\n+                any,\n+                triple.getMiddle(),\n+                triple.getRight(),\n+                Optional.of(moreAttrsToGet.toArray(String[]::new)));\n         if (!connObjs.isEmpty()) {\n             status.setOnResource(ConnObjectUtils.getConnObjectTO(\n-                    outboundMatcher.getFIQL(connObjs.get(0), provision), connObjs.get(0).getAttributes()));\n+                    outboundMatcher.getFIQL(connObjs.get(0), triple.getMiddle(), triple.getRight()),\n+                    connObjs.get(0).getAttributes()));\n \n             if (connObjs.size() > 1) {\n                 LOG.warn(\"Expected single match, found {}\", connObjs);\n@@ -268,21 +278,23 @@ public ReconStatus status(\n     }\n \n     protected SyncDeltaBuilder syncDeltaBuilder(\n+            final AnyType anyType,\n+            final ExternalResource resource,\n             final Provision provision,\n             final Filter filter,\n             final Set<String> moreAttrsToGet) {\n \n-        Stream<MappingItem> mapItems = Stream.concat(\n+        Stream<Item> mapItems = Stream.concat(\n                 provision.getMapping().getItems().stream(),\n-                virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n+                virSchemaDAO.find(resource.getKey(), anyType.getKey()).stream().map(VirSchema::asLinkingMappingItem));\n         OperationOptions options = MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(String[]::new));\n \n         SyncDeltaBuilder syncDeltaBuilder = new SyncDeltaBuilder().\n                 setToken(new SyncToken(\"\")).\n                 setDeltaType(SyncDeltaType.CREATE_OR_UPDATE).\n-                setObjectClass(provision.getObjectClass());\n-        connectorManager.getConnector(provision.getResource()).\n-                search(provision.getObjectClass(), filter, new SearchResultsHandler() {\n+                setObjectClass(new ObjectClass(provision.getObjectClass()));\n+        connectorManager.getConnector(resource).\n+                search(syncDeltaBuilder.getObjectClass(), filter, new SearchResultsHandler() {\n \n                     @Override\n                     public boolean handle(final ConnectorObject connObj) {\n@@ -306,39 +318,47 @@ public ReconStatus status(\n             final Filter filter,\n             final Set<String> moreAttrsToGet) {\n \n-        Provision provision = getProvision(anyTypeKey, resourceKey);\n+        Triple<AnyType, ExternalResource, Provision> triple = getProvision(anyTypeKey, resourceKey);\n \n-        SyncDeltaBuilder syncDeltaBuilder = syncDeltaBuilder(provision, filter, moreAttrsToGet);\n+        SyncDeltaBuilder syncDeltaBuilder = syncDeltaBuilder(\n+                triple.getLeft(), triple.getMiddle(), triple.getRight(), filter, moreAttrsToGet);\n \n         ReconStatus status = new ReconStatus();\n         if (syncDeltaBuilder.getObject() != null) {\n-            MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).\n+            Item connObjectKeyItem = MappingUtils.getConnObjectKeyItem(triple.getRight()).\n                     orElseThrow(() -> new NotFoundException(\n-                    \"ConnObjectKey for \" + provision.getAnyType().getKey()\n-                    + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n-\n-            inboundMatcher.match(syncDeltaBuilder.build(), provision).stream().findFirst().ifPresent(match -> {\n-                if (match.getAny() != null) {\n-                    status.setMatchType(MatchType.ANY);\n-                    status.setAnyTypeKind(match.getAny().getType().getKind());\n-                    status.setAnyKey(match.getAny().getKey());\n-                    status.setRealm(match.getAny().getRealm().getFullPath());\n-                    status.setOnSyncope(getOnSyncope(match.getAny(), connObjectKeyItem, provision));\n-                } else if (match.getLinkedAccount() != null) {\n-                    status.setMatchType(MatchType.LINKED_ACCOUNT);\n-                    status.setAnyTypeKind(AnyTypeKind.USER);\n-                    status.setAnyKey(match.getLinkedAccount().getOwner().getKey());\n-                    status.setRealm(match.getLinkedAccount().getOwner().getRealm().getFullPath());\n-                    status.setOnSyncope(getOnSyncope(match.getLinkedAccount(), connObjectKeyItem, provision));\n-                }\n-            });\n+                    \"ConnObjectKey for \" + triple.getLeft().getKey()\n+                    + \" on resource '\" + triple.getMiddle().getKey() + \"'\"));\n+\n+            inboundMatcher.match(\n+                    syncDeltaBuilder.build(), triple.getMiddle(), triple.getRight(), triple.getLeft().getKind()).\n+                    stream().findFirst().ifPresent(match -> {\n+\n+                        if (match.getAny() != null) {\n+                            status.setMatchType(MatchType.ANY);\n+                            status.setAnyTypeKind(match.getAny().getType().getKind());\n+                            status.setAnyKey(match.getAny().getKey());\n+                            status.setRealm(match.getAny().getRealm().getFullPath());\n+                            status.setOnSyncope(getOnSyncope(\n+                                    match.getAny(), connObjectKeyItem, triple.getMiddle(), triple.getRight()));\n+                        } else if (match.getLinkedAccount() != null) {\n+                            status.setMatchType(MatchType.LINKED_ACCOUNT);\n+                            status.setAnyTypeKind(AnyTypeKind.USER);\n+                            status.setAnyKey(match.getLinkedAccount().getOwner().getKey());\n+                            status.setRealm(match.getLinkedAccount().getOwner().getRealm().getFullPath());\n+                            status.setOnSyncope(getOnSyncope(\n+                                    match.getLinkedAccount(), connObjectKeyItem, triple.getRight()));\n+                        }\n+                    });\n \n             status.setOnResource(ConnObjectUtils.getConnObjectTO(\n-                    outboundMatcher.getFIQL(syncDeltaBuilder.getObject(), provision),\n+                    outboundMatcher.getFIQL(syncDeltaBuilder.getObject(), triple.getMiddle(), triple.getRight()),\n                     syncDeltaBuilder.getObject().getAttributes()));\n \n             if (status.getMatchType() == MatchType.ANY && StringUtils.isNotBlank(status.getAnyKey())) {\n-                virAttrHandler.setValues(getAny(provision, status.getAnyKey()), syncDeltaBuilder.getObject());\n+                virAttrHandler.setValues(\n+                        getAny(triple.getRight(), triple.getLeft().getKind(), status.getAnyKey()),\n+                        syncDeltaBuilder.getObject());\n             }\n         }\n \n@@ -357,15 +377,16 @@ public List<ProvisioningReport> push(\n             final String anyKey,\n             final PushTaskTO pushTask) {\n \n-        Provision provision = getProvision(anyTypeKey, resourceKey);\n+        Triple<AnyType, ExternalResource, Provision> triple = getProvision(anyTypeKey, resourceKey);\n \n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n         List<ProvisioningReport> results = new ArrayList<>();\n         try {\n             results.addAll(singlePushExecutor().push(\n-                    provision,\n-                    connectorManager.getConnector(provision.getResource()),\n-                    getAny(provision, anyKey),\n+                    triple.getMiddle(),\n+                    triple.getRight(),\n+                    connectorManager.getConnector(triple.getMiddle()),\n+                    getAny(triple.getRight(), triple.getLeft().getKind(), anyKey),\n                     pushTask,\n                     AuthContextUtils.getWho()));\n             if (!results.isEmpty() && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n@@ -390,43 +411,51 @@ public List<ProvisioningReport> push(\n             final Set<String> moreAttrsToGet,\n             final PushTaskTO pushTask) {\n \n-        Provision provision = getProvision(anyTypeKey, resourceKey);\n+        Triple<AnyType, ExternalResource, Provision> triple = getProvision(anyTypeKey, resourceKey);\n \n-        SyncDeltaBuilder syncDeltaBuilder = syncDeltaBuilder(provision, filter, moreAttrsToGet);\n+        SyncDeltaBuilder syncDeltaBuilder = syncDeltaBuilder(\n+                triple.getLeft(), triple.getMiddle(), triple.getRight(), filter, moreAttrsToGet);\n \n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n         List<ProvisioningReport> results = new ArrayList<>();\n \n         if (syncDeltaBuilder.getObject() != null) {\n-            inboundMatcher.match(syncDeltaBuilder.build(), provision).stream().findFirst().ifPresent(match -> {\n-                try {\n-                    if (match.getMatchTarget() == MatchType.ANY) {\n-                        results.addAll(singlePushExecutor().push(\n-                                provision,\n-                                connectorManager.getConnector(provision.getResource()),\n-                                match.getAny(),\n-                                pushTask,\n-                                AuthContextUtils.getWho()));\n-                        if (!results.isEmpty() && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n-                            sce.getElements().add(results.get(0).getMessage());\n+            inboundMatcher.match(\n+                    syncDeltaBuilder.build(), triple.getMiddle(), triple.getRight(), triple.getLeft().getKind()).\n+                    stream().findFirst().ifPresent(match -> {\n+\n+                        try {\n+                            if (match.getMatchTarget() == MatchType.ANY) {\n+                                results.addAll(singlePushExecutor().push(\n+                                        triple.getMiddle(),\n+                                        triple.getRight(),\n+                                        connectorManager.getConnector(triple.getMiddle()),\n+                                        match.getAny(),\n+                                        pushTask,\n+                                        AuthContextUtils.getWho()));\n+                                if (!results.isEmpty()\n+                                        && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n+\n+                                    sce.getElements().add(results.get(0).getMessage());\n+                                }\n+                            } else {\n+                                ProvisioningReport result = singlePushExecutor().push(\n+                                        triple.getMiddle(),\n+                                        triple.getRight(),\n+                                        connectorManager.getConnector(triple.getMiddle()),\n+                                        match.getLinkedAccount(),\n+                                        pushTask,\n+                                        AuthContextUtils.getWho());\n+                                if (result.getStatus() == ProvisioningReport.Status.FAILURE) {\n+                                    sce.getElements().add(result.getMessage());\n+                                } else {\n+                                    results.add(result);\n+                                }\n+                            }\n+                        } catch (JobExecutionException e) {\n+                            sce.getElements().add(e.getMessage());\n                         }\n-                    } else {\n-                        ProvisioningReport result = singlePushExecutor().push(\n-                                provision,\n-                                connectorManager.getConnector(provision.getResource()),\n-                                match.getLinkedAccount(),\n-                                pushTask,\n-                                AuthContextUtils.getWho());\n-                        if (result.getStatus() == ProvisioningReport.Status.FAILURE) {\n-                            sce.getElements().add(result.getMessage());\n-                        } else {\n-                            results.add(result);\n-                        }\n-                    }\n-                } catch (JobExecutionException e) {\n-                    sce.getElements().add(e.getMessage());\n-                }\n-            });\n+                    });\n         }\n \n         if (!sce.isEmpty()) {\n@@ -437,6 +466,7 @@ public List<ProvisioningReport> push(\n     }\n \n     protected List<ProvisioningReport> pull(\n+            final ExternalResource resource,\n             final Provision provision,\n             final ReconFilterBuilder reconFilterBuilder,\n             final Set<String> moreAttrsToGet,\n@@ -454,8 +484,9 @@ protected List<ProvisioningReport> pull(\n                             createBean(SinglePullJobDelegate.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n \n             results.addAll(executor.pull(\n+                    resource,\n                     provision,\n-                    connectorManager.getConnector(provision.getResource()),\n+                    connectorManager.getConnector(resource),\n                     reconFilterBuilder,\n                     moreAttrsToGet,\n                     pullTask,\n@@ -483,24 +514,26 @@ public List<ProvisioningReport> pull(\n             final Set<String> moreAttrsToGet,\n             final PullTaskTO pullTask) {\n \n-        Provision provision = getProvision(anyTypeKey, resourceKey);\n+        Triple<AnyType, ExternalResource, Provision> triple = getProvision(anyTypeKey, resourceKey);\n \n-        Any<?> any = getAny(provision, anyKey);\n-\n-        if (provision.getMapping().getConnObjectKeyItem().isEmpty()) {\n+        if (triple.getRight().getMapping().getConnObjectKeyItem().isEmpty()) {\n             throw new NotFoundException(\n-                    \"ConnObjectKey cannot be determined for mapping \" + provision.getMapping().getKey());\n+                    \"ConnObjectKey cannot be determined for mapping \" + anyTypeKey);\n         }\n \n-        String connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, provision).\n+        Any<?> any = getAny(triple.getRight(), triple.getLeft().getKind(), anyKey);\n+\n+        String connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, triple.getMiddle(), triple.getRight()).\n                 orElseThrow(() -> new NotFoundException(\n-                \"ConnObjectKey for \" + provision.getAnyType().getKey()\n-                + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n+                \"ConnObjectKey for \" + triple.getLeft().getKey()\n+                + \" on resource '\" + triple.getMiddle().getKey() + \"'\"));\n \n         return pull(\n-                provision,\n+                triple.getMiddle(),\n+                triple.getRight(),\n                 new KeyValueReconFilterBuilder(\n-                        provision.getMapping().getConnObjectKeyItem().get().getExtAttrName(), connObjectKeyValue),\n+                        triple.getRight().getMapping().getConnObjectKeyItem().get().getExtAttrName(),\n+                        connObjectKeyValue),\n                 moreAttrsToGet,\n                 pullTask);\n     }\n@@ -514,10 +547,11 @@ public List<ProvisioningReport> pull(\n             final Set<String> moreAttrsToGet,\n             final PullTaskTO pullTask) {\n \n-        Provision provision = getProvision(anyTypeKey, resourceKey);\n+        Triple<AnyType, ExternalResource, Provision> triple = getProvision(anyTypeKey, resourceKey);\n \n         return pull(\n-                provision,\n+                triple.getMiddle(),\n+                triple.getRight(),\n                 new ConstantReconFilterBuilder(filter),\n                 moreAttrsToGet,\n                 pullTask);"},{"sha":"5407d591368f599189d48108d4ed1efb663110fc","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":74,"deletions":58,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -28,9 +28,12 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n@@ -45,10 +48,8 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n@@ -181,10 +182,8 @@ public ResourceTO update(final ResourceTO resourceTO) {\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_UPDATE + \"')\")\n     public void setLatestSyncToken(final String key, final String anyTypeKey) {\n-        ExternalResource resource = resourceDAO.authFind(key);\n-        if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + key + '\\'');\n-        }\n+        ExternalResource resource = Optional.ofNullable(resourceDAO.authFind(key)).\n+                orElseThrow(() -> new NotFoundException(\"Resource '\" + key + '\\''));\n \n         Connector connector;\n         try {\n@@ -200,18 +199,19 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n                 throw new NotFoundException(\"Realm provision not enabled for Resource '\" + key + '\\'');\n             }\n \n-            resource.getOrgUnit().setSyncToken(connector.getLatestSyncToken(resource.getOrgUnit().getObjectClass()));\n+            resource.getOrgUnit().setSyncToken(ConnObjectUtils.toString(\n+                    connector.getLatestSyncToken(new ObjectClass(resource.getOrgUnit().getObjectClass()))));\n         } else {\n             AnyType anyType = anyTypeDAO.find(anyTypeKey);\n             if (anyType == null) {\n                 throw new NotFoundException(\"AnyType '\" + anyTypeKey + '\\'');\n             }\n-            Optional<? extends Provision> provision = resource.getProvision(anyType);\n-            if (provision.isEmpty()) {\n-                throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + '\\'');\n-            }\n+            Provision provision = resource.getProvision(anyType.getKey()).\n+                    orElseThrow(() -> new NotFoundException(\n+                    \"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + '\\''));\n \n-            provision.get().setSyncToken(connector.getLatestSyncToken(provision.get().getObjectClass()));\n+            provision.setSyncToken(ConnObjectUtils.toString(\n+                    connector.getLatestSyncToken(new ObjectClass(provision.getObjectClass()))));\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n@@ -239,12 +239,11 @@ public void removeSyncToken(final String key, final String anyTypeKey) {\n             if (anyType == null) {\n                 throw new NotFoundException(\"AnyType '\" + anyTypeKey + '\\'');\n             }\n-            Optional<? extends Provision> provision = resource.getProvision(anyType);\n-            if (provision.isEmpty()) {\n-                throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + '\\'');\n-            }\n+            Provision provision = resource.getProvision(anyType.getKey()).\n+                    orElseThrow(() -> new NotFoundException(\n+                    \"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + '\\''));\n \n-            provision.get().setSyncToken(null);\n+            provision.setSyncToken(null);\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n@@ -291,20 +290,26 @@ public List<ResourceTO> list() {\n         return resourceDAO.findAll().stream().map(binder::getResourceTO).collect(Collectors.toList());\n     }\n \n-    protected Provision getProvision(final String resourceKey, final String anyTypeKey) {\n-        ExternalResource resource = resourceDAO.find(resourceKey);\n-        if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + resourceKey + '\\'');\n-        }\n+    protected Triple<AnyType, ExternalResource, Provision> getProvision(\n+            final String anyTypeKey, final String resourceKey) {\n \n         AnyType anyType = anyTypeDAO.find(anyTypeKey);\n         if (anyType == null) {\n-            throw new NotFoundException(\"AnyType '\" + anyTypeKey + '\\'');\n+            throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n         }\n \n-        return resource.getProvision(anyType).\n+        ExternalResource resource = resourceDAO.find(resourceKey);\n+        if (resource == null) {\n+            throw new NotFoundException(\"Resource '\" + resourceKey + \"'\");\n+        }\n+        Provision provision = resource.getProvision(anyType.getKey()).\n                 orElseThrow(() -> new NotFoundException(\n-                \"Provision on resource '\" + resourceKey + \"' for type '\" + anyTypeKey + \"'\"));\n+                \"Provision for \" + anyType + \" on Resource '\" + resourceKey + \"'\"));\n+        if (provision.getMapping() == null) {\n+            throw new NotFoundException(\"Mapping for \" + anyType + \" on Resource '\" + resourceKey + \"'\");\n+        }\n+\n+        return Triple.of(anyType, resource, provision);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n@@ -314,42 +319,46 @@ public String getConnObjectKeyValue(\n             final String anyTypeKey,\n             final String anyKey) {\n \n-        Provision provision = getProvision(key, anyTypeKey);\n+        Triple<AnyType, ExternalResource, Provision> triple = getProvision(anyTypeKey, key);\n \n         // 1. find any\n-        Any<?> any = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).dao().authFind(anyKey);\n+        Any<?> any = anyUtilsFactory.getInstance(triple.getLeft().getKind()).dao().authFind(anyKey);\n         if (any == null) {\n-            throw new NotFoundException(provision.getAnyType() + \" \" + anyKey);\n+            throw new NotFoundException(triple.getLeft() + \" \" + anyKey);\n         }\n \n         // 2.get ConnObjectKey value\n-        return mappingManager.getConnObjectKeyValue(any, provision).\n+        return mappingManager.getConnObjectKeyValue(any, triple.getMiddle(), triple.getRight()).\n                 orElseThrow(() -> new NotFoundException(\n                 \"No ConnObjectKey value found for \" + anyTypeKey + \" \" + anyKey + \" on resource '\" + key + \"'\"));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n     @Transactional(readOnly = true)\n-    public ConnObjectTO readConnObjectByAnyKey(\n+    public ConnObject readConnObjectByAnyKey(\n             final String key,\n             final String anyTypeKey,\n             final String anyKey) {\n \n-        Provision provision = getProvision(key, anyTypeKey);\n+        Triple<AnyType, ExternalResource, Provision> triple = getProvision(anyTypeKey, key);\n \n         // 1. find any\n-        Any<?> any = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).dao().authFind(anyKey);\n+        Any<?> any = anyUtilsFactory.getInstance(triple.getLeft().getKind()).dao().authFind(anyKey);\n         if (any == null) {\n-            throw new NotFoundException(provision.getAnyType() + \" \" + anyKey);\n+            throw new NotFoundException(triple.getLeft() + \" \" + anyKey);\n         }\n \n         // 2. find on resource\n         List<ConnectorObject> connObjs = outboundMatcher.match(\n-                connectorManager.getConnector(provision.getResource()), any, provision, Optional.empty());\n+                connectorManager.getConnector(triple.getMiddle()),\n+                any,\n+                triple.getMiddle(),\n+                triple.getRight(),\n+                Optional.empty());\n         if (connObjs.isEmpty()) {\n             throw new NotFoundException(\n-                    \"Object \" + any + \" with class \" + provision.getObjectClass()\n-                    + \" not found on resource \" + provision.getResource().getKey());\n+                    \"Object \" + any + \" with class \" + triple.getRight().getObjectClass()\n+                    + \" not found on resource \" + triple.getMiddle().getKey());\n         }\n \n         if (connObjs.size() > 1) {\n@@ -359,40 +368,43 @@ public ConnObjectTO readConnObjectByAnyKey(\n         }\n \n         return ConnObjectUtils.getConnObjectTO(\n-                outboundMatcher.getFIQL(connObjs.get(0), provision), connObjs.get(0).getAttributes());\n+                outboundMatcher.getFIQL(connObjs.get(0), triple.getMiddle(), triple.getRight()),\n+                connObjs.get(0).getAttributes());\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n     @Transactional(readOnly = true)\n-    public ConnObjectTO readConnObjectByConnObjectKeyValue(\n+    public ConnObject readConnObjectByConnObjectKeyValue(\n             final String key,\n             final String anyTypeKey,\n             final String connObjectKeyValue) {\n \n-        Provision provision = getProvision(key, anyTypeKey);\n+        Triple<AnyType, ExternalResource, Provision> triple = getProvision(anyTypeKey, key);\n \n-        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).\n+        Item connObjectKeyItem = MappingUtils.getConnObjectKeyItem(triple.getRight()).\n                 orElseThrow(() -> new NotFoundException(\n-                \"ConnObjectKey mapping for \" + provision.getAnyType().getKey()\n-                + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n+                \"ConnObjectKey mapping for \" + triple.getLeft().getKey()\n+                + \" on resource '\" + triple.getMiddle().getKey() + \"'\"));\n \n         return outboundMatcher.matchByConnObjectKeyValue(\n-                connectorManager.getConnector(provision.getResource()),\n+                connectorManager.getConnector(triple.getMiddle()),\n                 connObjectKeyItem,\n                 connObjectKeyValue,\n-                provision,\n+                triple.getMiddle(),\n+                triple.getRight(),\n                 Optional.empty(),\n                 Optional.empty()).\n                 map(connectorObject -> ConnObjectUtils.getConnObjectTO(\n-                outboundMatcher.getFIQL(connectorObject, provision), connectorObject.getAttributes())).\n+                outboundMatcher.getFIQL(connectorObject, triple.getMiddle(), triple.getRight()),\n+                connectorObject.getAttributes())).\n                 orElseThrow(() -> new NotFoundException(\n-                \"Object \" + connObjectKeyValue + \" with class \" + provision.getObjectClass()\n-                + \" not found on resource \" + provision.getResource().getKey()));\n+                \"Object \" + connObjectKeyValue + \" with class \" + triple.getRight().getObjectClass()\n+                + \" not found on resource \" + triple.getMiddle().getKey()));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_LIST_CONNOBJECT + \"')\")\n     @Transactional(readOnly = true)\n-    public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n+    public Pair<SearchResult, List<ConnObject>> searchConnObjects(\n             final Filter filter,\n             final Set<String> moreAttrsToGet,\n             final String key,\n@@ -415,21 +427,24 @@ public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n             }\n \n             provision = null;\n-            objectClass = resource.getOrgUnit().getObjectClass();\n+            objectClass = new ObjectClass(resource.getOrgUnit().getObjectClass());\n             options = MappingUtils.buildOperationOptions(\n                     resource.getOrgUnit().getItems().stream(), moreAttrsToGet.toArray(String[]::new));\n         } else {\n-            provision = getProvision(key, anyTypeKey);\n-            resource = provision.getResource();\n-            objectClass = provision.getObjectClass();\n+            Triple<AnyType, ExternalResource, Provision> triple = getProvision(anyTypeKey, key);\n+\n+            provision = triple.getRight();\n+            resource = triple.getMiddle();\n+            objectClass = new ObjectClass(provision.getObjectClass());\n \n-            Stream<MappingItem> mapItems = Stream.concat(\n+            Stream<Item> mapItems = Stream.concat(\n                     provision.getMapping().getItems().stream(),\n-                    virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n+                    virSchemaDAO.find(resource.getKey(), triple.getLeft().getKey()).\n+                            stream().map(VirSchema::asLinkingMappingItem));\n             options = MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(String[]::new));\n         }\n \n-        List<ConnObjectTO> connObjects = new ArrayList<>();\n+        List<ConnObject> connObjects = new ArrayList<>();\n         SearchResult searchResult = connectorManager.getConnector(resource).\n                 search(objectClass, filter, new SearchResultsHandler() {\n \n@@ -438,7 +453,8 @@ public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n                     @Override\n                     public boolean handle(final ConnectorObject connectorObject) {\n                         connObjects.add(ConnObjectUtils.getConnObjectTO(\n-                                provision == null ? null : outboundMatcher.getFIQL(connectorObject, provision),\n+                                provision == null\n+                                        ? null : outboundMatcher.getFIQL(connectorObject, resource, provision),\n                                 connectorObject.getAttributes()));\n                         // safety protection against uncontrolled result size\n                         count++;"},{"sha":"248351ac4bf9a0a59a50bffb209143ef916b07e6","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/ReconciliationLogicTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -59,9 +59,8 @@ public void pullFromCSV() {\n         CSVPullSpec spec = new CSVPullSpec.Builder(AnyTypeKind.USER.name(), \"username\").build();\n         InputStream csv = getClass().getResourceAsStream(\"/test1.csv\");\n \n-        List<ProvisioningReport> results = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n-            return reconciliationLogic.pull(spec, csv);\n-        });\n+        List<ProvisioningReport> results =\n+                AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> reconciliationLogic.pull(spec, csv));\n         assertEquals(2, results.size());\n \n         assertEquals(AnyTypeKind.USER.name(), results.get(0).getAnyType());"},{"sha":"3da106ff11fcbfc130d52dddb639532ecb9d91af","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/ResourceLogicTest.java","status":"added","additions":229,"deletions":0,"changes":229,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogicTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class ResourceLogicTest extends AbstractTest {\n+\n+    @BeforeAll\n+    public static void setAuthContext() {\n+        List<GrantedAuthority> authorities = IdMEntitlement.values().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"admin\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(SyncopeConstants.MASTER_DOMAIN, null));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+    }\n+\n+    @AfterAll\n+    public static void unsetAuthContext() {\n+        SecurityContextHolder.getContext().setAuthentication(null);\n+    }\n+\n+    private static ResourceTO buildResourceTO(final String resourceKey) {\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        resourceTO.setKey(resourceKey);\n+        resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n+\n+        Provision provisionTO = new Provision();\n+        provisionTO.setAnyType(AnyTypeKind.USER.name());\n+        provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+        resourceTO.getProvisions().add(provisionTO);\n+\n+        Mapping mapping = new Mapping();\n+        provisionTO.setMapping(mapping);\n+\n+        Item item = new Item();\n+        item.setExtAttrName(\"userId\");\n+        item.setIntAttrName(\"userId\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.add(item);\n+\n+        item = new Item();\n+        item.setExtAttrName(\"username\");\n+        item.setIntAttrName(\"key\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.setConnObjectKeyItem(item);\n+\n+        item = new Item();\n+        item.setExtAttrName(\"fullname\");\n+        item.setIntAttrName(\"cn\");\n+        item.setConnObjectKey(false);\n+        item.setPurpose(MappingPurpose.PROPAGATION);\n+        mapping.add(item);\n+\n+        return resourceTO;\n+    }\n+\n+    @Autowired\n+    private ResourceLogic logic;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Test\n+    public void updateChangePurpose() {\n+        ResourceTO ws1 = logic.read(\"ws-target-resource-1\");\n+        assertNotNull(ws1);\n+\n+        Mapping ws1NewUMapping = ws1.getProvision(AnyTypeKind.USER.name()).get().getMapping();\n+        // change purpose from NONE to BOTH\n+        ws1NewUMapping.getItems().stream().\n+                filter(itemTO -> \"firstname\".equals(itemTO.getIntAttrName())).\n+                forEach(itemTO -> itemTO.setPurpose(MappingPurpose.BOTH));\n+        ws1.getProvision(AnyTypeKind.USER.name()).get().setMapping(ws1NewUMapping);\n+\n+        ws1 = logic.update(ws1);\n+        assertNotNull(ws1);\n+    }\n+\n+    @Test\n+    public void updateChangeOverrideCapabilities() {\n+        ResourceTO ldap = logic.read(\"resource-ldap\");\n+        assertNotNull(ldap);\n+        assertFalse(ldap.isOverrideCapabilities());\n+        assertTrue(ldap.getCapabilitiesOverride().isEmpty());\n+\n+        ldap.getCapabilitiesOverride().add(ConnectorCapability.SEARCH);\n+        ldap = logic.update(ldap);\n+        assertNotNull(ldap);\n+        assertFalse(ldap.isOverrideCapabilities());\n+        assertEquals(1, ldap.getCapabilitiesOverride().size());\n+        assertTrue(ldap.getCapabilitiesOverride().contains(ConnectorCapability.SEARCH));\n+\n+        ldap.setOverrideCapabilities(true);\n+        ldap = logic.update(ldap);\n+        assertNotNull(ldap);\n+        assertTrue(ldap.isOverrideCapabilities());\n+        assertEquals(1, ldap.getCapabilitiesOverride().size());\n+        assertTrue(ldap.getCapabilitiesOverride().contains(ConnectorCapability.SEARCH));\n+\n+        ldap.getCapabilitiesOverride().clear();\n+        ldap.setOverrideCapabilities(false);\n+        logic.update(ldap);\n+    }\n+\n+    @Test\n+    public void orgUnit() {\n+        ResourceTO resourceTO = buildResourceTO(\"ws-orgunit\");\n+        assertNull(resourceTO.getOrgUnit());\n+        assertNull(resourceTO.getPropagationPriority());\n+\n+        resourceTO = logic.create(resourceTO);\n+        entityManager().flush();\n+        assertNull(resourceTO.getOrgUnit());\n+\n+        OrgUnit orgUnit = new OrgUnit();\n+        orgUnit.setConnObjectLink(\"'ou=' + name + ',o=isp'\");\n+        orgUnit.setObjectClass(\"organizationalUnit\");\n+\n+        Item item = new Item();\n+        item.setIntAttrName(\"name\");\n+        item.setExtAttrName(\"ou\");\n+        item.setMandatoryCondition(\"true\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+        orgUnit.setConnObjectKeyItem(item);\n+\n+        resourceTO.setOrgUnit(orgUnit);\n+        logic.update(resourceTO);\n+        entityManager().flush();\n+        assertNull(resourceTO.getPropagationPriority());\n+\n+        resourceTO = logic.read(\"ws-orgunit\");\n+        assertNotNull(resourceTO.getOrgUnit());\n+\n+        resourceTO.setOrgUnit(null);\n+        resourceTO.setPropagationPriority(11);\n+        logic.update(resourceTO);\n+        entityManager().flush();\n+\n+        resourceTO = logic.read(\"ws-orgunit\");\n+        assertNull(resourceTO.getOrgUnit());\n+        assertEquals(11, resourceTO.getPropagationPriority());\n+    }\n+\n+    @Test\n+    public void setLatestSyncToken() {\n+        ConnectorManager connectorManager = mock(ConnectorManager.class);\n+        when(connectorManager.getConnector(any(ExternalResource.class))).thenAnswer(ic -> {\n+            Connector connector = mock(Connector.class);\n+            when(connector.getLatestSyncToken(any(ObjectClass.class))).thenAnswer(ic2 -> new SyncToken(\"tokenValue\"));\n+            return connector;\n+        });\n+\n+        ResourceTO resourceTO = logic.create(buildResourceTO(\"lss\"));\n+        assertNotNull(resourceTO);\n+        assertNull(resourceTO.getProvision(AnyTypeKind.USER.name()).get().getSyncToken());\n+\n+        ResourceLogic resourceLogic = new ResourceLogic(\n+                resourceDAO, anyTypeDAO, null, null, null, null, null, null, null, connectorManager, null);\n+\n+        resourceLogic.setLatestSyncToken(resourceTO.getKey(), AnyTypeKind.USER.name());\n+        entityManager().flush();\n+\n+        resourceTO = logic.read(resourceTO.getKey());\n+        assertNotNull(resourceTO.getProvision(AnyTypeKind.USER.name()).get().getSyncToken());\n+    }\n+}"},{"sha":"e8b268f229074f1a7062fbbb172e4f163bf68c7d","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,8 +21,8 @@\n import java.net.URI;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.ConnBundleTO;\n-import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.lib.to.ConnIdBundle;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClass;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n@@ -53,12 +53,12 @@ public void delete(final String key) {\n     }\n \n     @Override\n-    public List<ConnBundleTO> getBundles(final String lang) {\n+    public List<ConnIdBundle> getBundles(final String lang) {\n         return logic.getBundles(lang);\n     }\n \n     @Override\n-    public List<ConnIdObjectClassTO> buildObjectClassInfo(\n+    public List<ConnIdObjectClass> buildObjectClassInfo(\n             final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n         return logic.buildObjectClassInfo(connInstanceTO, includeSpecial);"},{"sha":"b02a45ab37139b3f9413e05c94322058d9b7b79f","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -33,8 +33,8 @@\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n+import org.apache.syncope.common.lib.to.ConnObject;\n+import org.apache.syncope.common.lib.to.PagedConnObjectResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -101,14 +101,14 @@ public Response getConnObjectKeyValue(final String key, final String anyTypeKey,\n     }\n \n     @Override\n-    public ConnObjectTO readConnObject(final String key, final String anyTypeKey, final String value) {\n+    public ConnObject readConnObject(final String key, final String anyTypeKey, final String value) {\n         return SyncopeConstants.UUID_PATTERN.matcher(value).matches()\n                 ? logic.readConnObjectByAnyKey(key, anyTypeKey, value)\n                 : logic.readConnObjectByConnObjectKeyValue(key, anyTypeKey, value);\n     }\n \n     @Override\n-    public PagedConnObjectTOResult searchConnObjects(\n+    public PagedConnObjectResult searchConnObjects(\n             final String key, final String anyTypeKey, final ConnObjectTOQuery query) {\n \n         Filter filter = null;\n@@ -134,7 +134,7 @@ public PagedConnObjectTOResult searchConnObjects(\n             }\n         }\n \n-        Pair<SearchResult, List<ConnObjectTO>> list = logic.searchConnObjects(\n+        Pair<SearchResult, List<ConnObject>> list = logic.searchConnObjects(\n                 filter,\n                 moreAttrsToGet,\n                 key,\n@@ -143,7 +143,7 @@ public PagedConnObjectTOResult searchConnObjects(\n                 query.getPagedResultsCookie(),\n                 getOrderByClauses(query.getOrderBy()));\n \n-        PagedConnObjectTOResult result = new PagedConnObjectTOResult();\n+        PagedConnObjectResult result = new PagedConnObjectResult();\n         if (list.getLeft() != null) {\n             result.setAllResultsReturned(list.getLeft().isAllResultsReturned());\n             result.setPagedResultsCookie(list.getLeft().getPagedResultsCookie());"},{"sha":"487bb94c42332f9584e6a2c7e0631ef7798fdc2a","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -190,7 +190,7 @@ public void delete(final String type, final String key) {\n                 break;\n \n             case IdRepoImplementationType.ITEM_TRANSFORMER:\n-                inUse = !resourceDAO.findByTransformer(implementation).isEmpty();\n+                inUse = resourceDAO.anyItemHaving(implementation);\n                 break;\n \n             case IdRepoImplementationType.TASKJOB_DELEGATE:"},{"sha":"9e708920983819e4325fb293e5b50b90c248b605","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,9 +21,11 @@\n import java.util.EnumSet;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import javax.validation.ConstraintViolation;\n import javax.validation.ValidationException;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n \n /**\n@@ -53,7 +55,7 @@ public InvalidEntityException(\n \n         this.entityClassSimpleName = entityClass.getSimpleName();\n \n-        entityViolationType.setMessage(message.trim());\n+        entityViolationType.setMessage(Optional.ofNullable(message).map(String::trim).orElse(StringUtils.EMPTY));\n \n         this.violations.put(entityClass, EnumSet.noneOf(EntityViolationType.class));\n         this.violations.get(entityClass).add(entityViolationType);"},{"sha":"da128ed688259c3c4c9cf5f16a3432402a5dbcb0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,11 +25,11 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface AnyDAO<A extends Any<?>> extends DAO<A> {\n "},{"sha":"1b660971a199941c62b5c391dd05fec28b03b3c4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,11 +25,11 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n "},{"sha":"9052401e3ae6d87914591620d681b8ec1102afae","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,6 +25,4 @@\n     void refresh(E entity);\n \n     void detach(E entity);\n-\n-    void clear();\n }"},{"sha":"3242518ab982bbb42cf18af68352f11641224572","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,12 +19,11 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n \n public interface ExternalResourceDAO extends DAO<ExternalResource> {\n \n@@ -36,7 +35,7 @@ public interface ExternalResourceDAO extends DAO<ExternalResource> {\n \n     List<Provision> findProvisionsByAuxClass(AnyTypeClass anyTypeClass);\n \n-    List<MappingItem> findByTransformer(Implementation transformer);\n+    boolean anyItemHaving(Implementation transformer);\n \n     List<ExternalResource> findByPropagationActions(Implementation propagationActions);\n \n@@ -49,5 +48,4 @@ public interface ExternalResourceDAO extends DAO<ExternalResource> {\n     void deleteMapping(String schemaName);\n \n     void delete(String key);\n-\n }"},{"sha":"fd5c2f1c0591d9118d24201e965102e000794d11","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface PolicyDAO extends DAO<Policy> {\n "},{"sha":"4be32ef553fa24191376552be3976693cd32ffe4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPullCorrelationRule.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,10 +20,10 @@\n \n import java.util.Optional;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.MatchType;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n \n /**"},{"sha":"88dd30a971fc560b7927479b2e4270ae8c05dc10","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PushCorrelationRule.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,8 +20,9 @@\n \n import java.util.function.BiFunction;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n@@ -46,10 +47,11 @@ default void setConf(PushCorrelationRuleConf conf) {\n      * the given provision.\n      *\n      * @param any user, group or any object\n+     * @param resource external resource\n      * @param provision resource provision\n      * @return filter.\n      */\n-    Filter getFilter(Any<?> any, Provision provision);\n+    Filter getFilter(Any<?> any, ExternalResource resource, Provision provision);\n \n     /**\n      * Returns a FIQL string to match the given connector object when searching into the external resource identified by"},{"sha":"7a3b5cbaa8c71c68ca4b38508729d87042c1eec4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,10 +20,10 @@\n \n import java.util.List;\n import java.util.regex.Pattern;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface RealmDAO extends DAO<Realm> {\n "},{"sha":"5fe51717af9d8d9b7789053d28e1f8e792884220","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,9 +25,9 @@\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;"},{"sha":"d8827aeeeeda07977d02864a2b6c3a2f5382e3bc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,10 +24,10 @@\n import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;"},{"sha":"da13e59c73b25470ff015ecbafff1469fed9fc2c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,10 +19,12 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n \n public interface VirSchemaDAO extends SchemaDAO<VirSchema> {\n \n-    List<VirSchema> findByProvision(Provision provision);\n+    List<String> find(ExternalResource resource);\n+\n+    List<VirSchema> find(String resource, String anyType);\n }"},{"sha":"b422113ad329bb95064c0710158ac51baa94b66f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,7 +20,6 @@\n \n import java.time.OffsetDateTime;\n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface Any<P extends PlainAttr<?>> extends Attributable<P>, Entity {\n "},{"sha":"4c65c764f5865e38c2a9fa666cf33cdc3fdedae1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface AnyUtils {\n "},{"sha":"57bbda6f060a8ca59b4b594e1dcc18ea5729b7a1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ConnInstance.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,7 +23,6 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface ConnInstance extends Entity {\n "},{"sha":"370c1932cca644dad38ed6071b56bb79f58ad28e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ExternalResource.java","status":"renamed","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExternalResource.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -16,18 +16,16 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.resource;\n+package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n@@ -107,15 +105,11 @@ public interface ExternalResource extends ProvidedKeyEntity {\n \n     void setRandomPwdIfNotProvided(boolean condition);\n \n-    boolean add(Provision provision);\n+    Optional<Provision> getProvision(String anyType);\n \n-    Optional<? extends Provision> getProvision(String anyType);\n+    Optional<Provision> getProvision(ObjectClass objectClass);\n \n-    Optional<? extends Provision> getProvision(AnyType anyType);\n-\n-    Optional<? extends Provision> getProvision(ObjectClass objectClass);\n-\n-    List<? extends Provision> getProvisions();\n+    List<Provision> getProvisions();\n \n     OrgUnit getOrgUnit();\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java"},{"sha":"6689bfcf6697776f4a5887f4969703f0509c8f30","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/LinkingMappingItem.java","status":"removed","additions":0,"deletions":143,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,143 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-\n-/**\n- * {@link MappingItem} implementation for usage within {@link VirSchema#asLinkingMappingItem()} implementations.\n- */\n-public class LinkingMappingItem implements MappingItem {\n-\n-    private static final long serialVersionUID = 327455459536715529L;\n-\n-    private final VirSchema virSchema;\n-\n-    public LinkingMappingItem(final VirSchema virSchema) {\n-        this.virSchema = virSchema;\n-    }\n-\n-    @Override\n-    public String getKey() {\n-        return null;\n-    }\n-\n-    @Override\n-    public Mapping getMapping() {\n-        return virSchema.getProvision().getMapping();\n-    }\n-\n-    @Override\n-    public void setMapping(final Mapping mapping) {\n-        // RO instance, nothing to do\n-    }\n-\n-    @Override\n-    public String getExtAttrName() {\n-        return virSchema.getExtAttrName();\n-    }\n-\n-    @Override\n-    public void setExtAttrName(final String extAttrName) {\n-        // RO instance, nothing to do\n-    }\n-\n-    @Override\n-    public String getIntAttrName() {\n-        return virSchema.getKey();\n-    }\n-\n-    @Override\n-    public void setIntAttrName(final String intAttrName) {\n-        // RO instance, nothing to do\n-    }\n-\n-    @Override\n-    public String getMandatoryCondition() {\n-        return virSchema.getMandatoryCondition();\n-    }\n-\n-    @Override\n-    public void setMandatoryCondition(final String condition) {\n-        // RO instance, nothing to do\n-    }\n-\n-    @Override\n-    public MappingPurpose getPurpose() {\n-        return virSchema.isReadonly() ? MappingPurpose.PULL : MappingPurpose.BOTH;\n-    }\n-\n-    @Override\n-    public void setPurpose(final MappingPurpose purpose) {\n-        // RO instance, nothing to do\n-    }\n-\n-    @Override\n-    public boolean isConnObjectKey() {\n-        return false;\n-    }\n-\n-    @Override\n-    public void setConnObjectKey(final boolean connObjectKey) {\n-        // RO instance, nothing to do\n-    }\n-\n-    @Override\n-    public boolean isPassword() {\n-        return false;\n-    }\n-\n-    @Override\n-    public void setPassword(final boolean password) {\n-        // RO instance, nothing to do\n-    }\n-\n-    @Override\n-    public String getPropagationJEXLTransformer() {\n-        return null;\n-    }\n-\n-    @Override\n-    public void setPropagationJEXLTransformer(final String propagationJEXLTransformer) {\n-        // RO instance, nothing to do\n-    }\n-\n-    @Override\n-    public String getPullJEXLTransformer() {\n-        return null;\n-    }\n-\n-    @Override\n-    public void setPullJEXLTransformer(final String pullJEXLTransformer) {\n-        // RO instance, nothing to do\n-    }\n-\n-    @Override\n-    public boolean add(final Implementation transformer) {\n-        return false;\n-    }\n-\n-    @Override\n-    public List<? extends Implementation> getTransformers() {\n-        return List.of();\n-    }\n-}"},{"sha":"42249ce9a46244d9c2d905255d7d8871d7fd2f05","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface Realm extends Entity {\n "},{"sha":"a16c9947785d675636042f44a803bf47b55b3fed","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/VirSchema.java","status":"modified","additions":18,"deletions":5,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,20 +18,33 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n \n public interface VirSchema extends Schema {\n \n     void setReadonly(boolean readonly);\n \n-    Provision getProvision();\n+    ExternalResource getResource();\n \n-    void setProvision(Provision provision);\n+    void setResource(ExternalResource resource);\n+\n+    AnyType getAnyType();\n+\n+    void setAnyType(AnyType anyType);\n \n     String getExtAttrName();\n \n     void setExtAttrName(String extAttrName);\n \n-    MappingItem asLinkingMappingItem();\n+    default Item asLinkingMappingItem() {\n+        Item item = new Item();\n+        item.setExtAttrName(getExtAttrName());\n+        item.setIntAttrName(getKey());\n+        item.setMandatoryCondition(getMandatoryCondition());\n+        item.setPurpose(isReadonly() ? MappingPurpose.PULL : MappingPurpose.BOTH);\n+        item.setConnObjectKey(false);\n+        item.setPassword(false);\n+        return item;\n+    }\n }"},{"sha":"3fbc53331a68d0e1a9a1abdf693c369e64b0eb56","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/AttrRepo.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepo.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.attr.AttrRepoConf;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AttrRepoState;\n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n \n@@ -41,7 +42,5 @@ public interface AttrRepo extends ProvidedKeyEntity {\n \n     void setConf(AttrRepoConf conf);\n \n-    List<? extends AttrRepoItem> getItems();\n-\n-    boolean add(AttrRepoItem item);\n+    List<Item> getItems();\n }"},{"sha":"43213ef44939e53456b331d92df062d2a2d6fa2c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/AttrRepoItem.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepoItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepoItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepoItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.am;\n-\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-\n-public interface AttrRepoItem extends Item {\n-\n-    AttrRepo getAttrRepo();\n-\n-    void setAttrRepo(AttrRepo attrRepo);\n-}"},{"sha":"62c443cf3b520d5d884ebc9bab7684820c845bf7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/AuthModule.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModule.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AuthModuleState;\n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n \n@@ -41,7 +42,5 @@ public interface AuthModule extends ProvidedKeyEntity {\n \n     void setConf(AuthModuleConf conf);\n \n-    List<? extends AuthModuleItem> getItems();\n-\n-    boolean add(AuthModuleItem item);\n+    List<Item> getItems();\n }"},{"sha":"d7168abd250eac5454b296fc353ba46b6ad75ad7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/AuthModuleItem.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModuleItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModuleItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModuleItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.am;\n-\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-\n-public interface AuthModuleItem extends Item {\n-\n-    AuthModule getAuthModule();\n-\n-    void setAuthModule(AuthModule authModule);\n-}"},{"sha":"b308c5450aa03a43f109bef6c691c59a9da73755","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccountPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,8 +20,8 @@\n \n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface AccountPolicy extends Policy {\n "},{"sha":"353682fe4fb3317be0ce8aed3637b61b3eaa99a9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PullPolicy.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,13 +20,12 @@\n \n import java.util.List;\n import java.util.Optional;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n \n public interface PullPolicy extends ProvisioningPolicy {\n \n     boolean add(PullCorrelationRuleEntity rule);\n \n-    Optional<? extends PullCorrelationRuleEntity> getCorrelationRule(AnyType anyType);\n+    Optional<? extends PullCorrelationRuleEntity> getCorrelationRule(String anyType);\n \n     List<? extends PullCorrelationRuleEntity> getCorrelationRules();\n }"},{"sha":"79c5b12bf5a7bd0f5b13f60c34707e8cd7809ddb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PushPolicy.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,13 +20,12 @@\n \n import java.util.List;\n import java.util.Optional;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n \n public interface PushPolicy extends ProvisioningPolicy {\n \n     boolean add(PushCorrelationRuleEntity rule);\n \n-    Optional<? extends PushCorrelationRuleEntity> getCorrelationRule(AnyType anyType);\n+    Optional<? extends PushCorrelationRuleEntity> getCorrelationRule(String anyType);\n \n     List<? extends PushCorrelationRuleEntity> getCorrelationRules();\n }"},{"sha":"b46cab595221f0a24c9753c18b5d2b85c52026f2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Item.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.resource;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-\n-public interface Item extends Entity {\n-\n-    String getExtAttrName();\n-\n-    void setExtAttrName(String extAttrName);\n-\n-    String getIntAttrName();\n-\n-    void setIntAttrName(String intAttrName);\n-\n-    String getMandatoryCondition();\n-\n-    void setMandatoryCondition(String condition);\n-\n-    MappingPurpose getPurpose();\n-\n-    void setPurpose(MappingPurpose purpose);\n-\n-    boolean isConnObjectKey();\n-\n-    void setConnObjectKey(boolean connObjectKey);\n-\n-    boolean isPassword();\n-\n-    void setPassword(boolean password);\n-\n-    String getPropagationJEXLTransformer();\n-\n-    void setPropagationJEXLTransformer(String propagationJEXLTransformer);\n-\n-    String getPullJEXLTransformer();\n-\n-    void setPullJEXLTransformer(String pullJEXLTransformer);\n-\n-    boolean add(Implementation transformer);\n-\n-    List<? extends Implementation> getTransformers();\n-}"},{"sha":"ce7abaa8aea976231a4ab0036e32ef56b8e8fdc7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Mapping.java","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,42 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.resource;\n-\n-import java.util.List;\n-import java.util.Optional;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n-\n-public interface Mapping extends Entity {\n-\n-    Provision getProvision();\n-\n-    void setProvision(Provision provision);\n-\n-    String getConnObjectLink();\n-\n-    void setConnObjectLink(String connObjectLink);\n-\n-    boolean add(MappingItem item);\n-\n-    Optional<? extends MappingItem> getConnObjectKeyItem();\n-\n-    void setConnObjectKeyItem(MappingItem item);\n-\n-    List<? extends MappingItem> getItems();\n-}"},{"sha":"24dc15df427cfa9295347e30448c78c7fd62cb51","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/MappingItem.java","status":"removed","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,27 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.resource;\n-\n-public interface MappingItem extends Item {\n-\n-    Mapping getMapping();\n-\n-    void setMapping(Mapping mapping);\n-\n-}"},{"sha":"52e209b96ee3c352b5d2f99e6f0d583b4164805f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/OrgUnit.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.resource;\n-\n-import java.util.List;\n-import java.util.Optional;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.SyncToken;\n-\n-public interface OrgUnit extends Entity {\n-\n-    ExternalResource getResource();\n-\n-    void setResource(ExternalResource resource);\n-\n-    ObjectClass getObjectClass();\n-\n-    void setObjectClass(ObjectClass objectClass);\n-\n-    SyncToken getSyncToken();\n-\n-    String getSerializedSyncToken();\n-\n-    void setSyncToken(SyncToken syncToken);\n-\n-    boolean isIgnoreCaseMatch();\n-\n-    void setIgnoreCaseMatch(boolean ignoreCaseMatch);\n-\n-    String getConnObjectLink();\n-\n-    void setConnObjectLink(String connObjectLink);\n-\n-    boolean add(OrgUnitItem item);\n-\n-    Optional<? extends OrgUnitItem> getConnObjectKeyItem();\n-\n-    void setConnObjectKeyItem(OrgUnitItem item);\n-\n-    List<? extends OrgUnitItem> getItems();\n-}"},{"sha":"d25e0bcff3780d299019e2f73dbca26807105258","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/OrgUnitItem.java","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnitItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnitItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnitItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,26 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.resource;\n-\n-public interface OrgUnitItem extends Item {\n-\n-    OrgUnit getOrgUnit();\n-\n-    void setOrgUnit(OrgUnit orgUnit);\n-}"},{"sha":"5dde2015f821d35152ee80ec0cc07103d9384ab9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Provision.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,64 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.resource;\n-\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.SyncToken;\n-\n-public interface Provision extends Entity {\n-\n-    ExternalResource getResource();\n-\n-    void setResource(ExternalResource resource);\n-\n-    AnyType getAnyType();\n-\n-    void setAnyType(AnyType anyType);\n-\n-    ObjectClass getObjectClass();\n-\n-    void setObjectClass(ObjectClass objectClass);\n-\n-    boolean add(AnyTypeClass anyTypeClass);\n-\n-    List<? extends AnyTypeClass> getAuxClasses();\n-\n-    SyncToken getSyncToken();\n-\n-    String getSerializedSyncToken();\n-\n-    void setSyncToken(SyncToken syncToken);\n-\n-    boolean isIgnoreCaseMatch();\n-\n-    void setIgnoreCaseMatch(boolean ignoreCaseMatch);\n-\n-    PlainSchema getUidOnCreate();\n-\n-    void setUidOnCreate(PlainSchema uidOnCreate);\n-\n-    Mapping getMapping();\n-\n-    void setMapping(Mapping mapping);\n-}"},{"sha":"b8b71d1e5dc4e8edd41e4f18d3d77ff56a92c5fb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PropagationTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,7 +21,7 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.identityconnectors.framework.common.objects.Attribute;\n \n public interface PropagationTask extends Task {"},{"sha":"e7f9fd1e335361a8b6abe6b7491f9edfb47ed0b5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/ProvisioningTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,8 +21,8 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface ProvisioningTask extends SchedTask {\n "},{"sha":"7e932de373f05dbfd4d5b2af248dd54a0e11c5a6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PullTask.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,7 +21,6 @@\n import java.util.List;\n import java.util.Optional;\n import org.apache.syncope.common.lib.types.PullMode;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n \n@@ -41,7 +40,7 @@ public interface PullTask extends ProvisioningTask {\n \n     boolean add(AnyTemplatePullTask template);\n \n-    Optional<? extends AnyTemplatePullTask> getTemplate(AnyType anyType);\n+    Optional<? extends AnyTemplatePullTask> getTemplate(String anyType);\n \n     List<? extends AnyTemplatePullTask> getTemplates();\n "},{"sha":"864505b93df74f5c64926ebaeff3a224f6ce6b40","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/LinkedAccount.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLinkedAccount.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,8 +20,8 @@\n \n import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface LinkedAccount extends Account, Attributable<LAPlainAttr> {\n "},{"sha":"c2372307b6bd63db84d8a4689d77178ee86cc8b3","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":73,"deletions":402,"changes":475,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=e702a667035b32585f45ed72cee5dc68a515219d"},{"sha":"c0fd4366bb522ee424232acf507aad55f3acf8d6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -54,14 +54,14 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.transaction.annotation.Propagation;"},{"sha":"bcefd68db7fb414ef894c41899df5742137b1ca6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -53,9 +53,4 @@ public void refresh(final E entity) {\n     public void detach(final E entity) {\n         entityManager().detach(entity);\n     }\n-\n-    @Override\n-    public void clear() {\n-        entityManager().clear();\n-    }\n }"},{"sha":"6d8dad2e0edc9e1f59f9f6e124900374a56632dd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,13 +26,13 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n \n@@ -61,8 +61,8 @@ public SearchCond getSearchCond(final SyncDelta syncDelta, final Provision provi\n \n         conf.getSchemas().forEach(schema -> {\n             Item item = mappingItems.get(schema);\n-            Attribute attr = Optional.ofNullable(item)\n-                .map(item1 -> syncDelta.getObject().getAttributeByName(item1.getExtAttrName())).orElse(null);\n+            Attribute attr = Optional.ofNullable(item).\n+                    map(item1 -> syncDelta.getObject().getAttributeByName(item1.getExtAttrName())).orElse(null);\n             if (attr == null) {\n                 throw new IllegalArgumentException(\n                         \"Connector object does not contains the attributes to perform the search: \" + schema);"},{"sha":"836f4a1cc3207b53d39d536a1dc8a5b0a52151c1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPushCorrelationRule.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -28,11 +28,12 @@\n import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.search.ConnObjectTOFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRuleConfClass;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.provisioning.api.AccountGetter;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.PlainAttrGetter;\n@@ -69,13 +70,14 @@ public void setConf(final PushCorrelationRuleConf conf) {\n     }\n \n     @Override\n-    public Filter getFilter(final Any<?> any, final Provision provision) {\n+    public Filter getFilter(final Any<?> any, final ExternalResource resource, final Provision provision) {\n         List<Filter> filters = new ArrayList<>();\n \n         provision.getMapping().getItems().stream().filter(\n                 item -> conf.getSchemas().contains(item.getIntAttrName()) && item.getPurpose() != MappingPurpose.NONE).\n                 forEach(item -> {\n                     Pair<String, Attribute> attr = mappingManager.prepareAttr(\n+                            resource,\n                             provision,\n                             item,\n                             any,"},{"sha":"48d50dfff12b50e182aeecac4730107d8a4cdf95","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -46,14 +46,14 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;"},{"sha":"531443deccad3d2b46a8c131486755920d3e3b34","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -33,7 +34,6 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n \n public class JPAAnyTypeClassDAO extends AbstractDAO<AnyTypeClass> implements AnyTypeClassDAO {\n@@ -126,10 +126,9 @@ public void delete(final String key) {\n         }\n \n         for (Provision provision : resourceDAO.findProvisionsByAuxClass(anyTypeClass)) {\n-            provision.getAuxClasses().remove(anyTypeClass);\n+            provision.getAuxClasses().remove(anyTypeClass.getKey());\n         }\n \n         entityManager().remove(anyTypeClass);\n     }\n-\n }"},{"sha":"2a80b54a701e9cd5009678ec0b2d489fb43a4a67","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAttrRepoDAO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrRepoDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrRepoDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrRepoDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -43,6 +43,7 @@ public List<AttrRepo> findAll() {\n \n     @Override\n     public AttrRepo save(final AttrRepo attrRepo) {\n+        ((JPAAttrRepo) attrRepo).list2json();\n         return entityManager().merge(attrRepo);\n     }\n "},{"sha":"b21686188904c085327d0a6d917e95529a6ea4e8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAuthModuleDAO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuthModuleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuthModuleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuthModuleDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -52,6 +52,7 @@ public List<AuthModule> findAll() {\n \n     @Override\n     public AuthModule save(final AuthModule authModule) {\n+        ((JPAAuthModule) authModule).list2json();\n         return entityManager().merge(authModule);\n     }\n "},{"sha":"ce892eee363e12a3495c32ceecefcc0682887d15","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -85,6 +85,7 @@ public List<ConnInstance> findAll() {\n \n     @Override\n     public ConnInstance save(final ConnInstance connector) {\n+        ((JPAConnInstance) connector).list2json();\n         return entityManager().merge(connector);\n     }\n "},{"sha":"43f2c402f0d8ae5efea3901b57764ca54e400829","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":33,"deletions":55,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,11 +19,12 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n-import java.util.Objects;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.stream.Collectors;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -35,24 +36,19 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.CollectionUtils;\n \n public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implements ExternalResourceDAO {\n \n@@ -124,22 +120,19 @@ public ExternalResource authFind(final String key) {\n \n     @Override\n     public List<Provision> findProvisionsByAuxClass(final AnyTypeClass anyTypeClass) {\n-        TypedQuery<Provision> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAProvision.class.getSimpleName()\n-                + \" e WHERE :anyTypeClass MEMBER OF e.auxClasses\", Provision.class);\n-        query.setParameter(\"anyTypeClass\", anyTypeClass);\n-\n-        return query.getResultList();\n+        return findAll().stream().\n+                flatMap(resource -> resource.getProvisions().stream()).\n+                filter(provision -> provision.getAuxClasses().contains(anyTypeClass.getKey())).\n+                collect(Collectors.toList());\n     }\n \n     @Override\n-    public List<MappingItem> findByTransformer(final Implementation transformer) {\n-        TypedQuery<MappingItem> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAMappingItem.class.getSimpleName()\n-                + \" e WHERE :transformer MEMBER OF e.transformers\", MappingItem.class);\n-        query.setParameter(\"transformer\", transformer);\n-\n-        return query.getResultList();\n+    public boolean anyItemHaving(final Implementation transformer) {\n+        return findAll().stream().\n+                flatMap(resource -> resource.getProvisions().stream()).\n+                flatMap(provision -> provision.getMapping().getItems().stream()).\n+                filter(item -> item.getTransformers().contains(transformer.getKey())).\n+                count() > 0;\n     }\n \n     @Override\n@@ -184,7 +177,7 @@ public List<ExternalResource> findByPolicy(final Policy policy) {\n     @Override\n     public List<ExternalResource> findAll() {\n         Set<String> authRealms = AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_LIST);\n-        if (authRealms == null || authRealms.isEmpty()) {\n+        if (CollectionUtils.isEmpty(authRealms)) {\n             return List.of();\n         }\n \n@@ -200,29 +193,24 @@ public List<ExternalResource> findAll() {\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public ExternalResource save(final ExternalResource resource) {\n+        ((JPAExternalResource) resource).list2json();\n         return entityManager().merge(resource);\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public void deleteMapping(final String intAttrName) {\n-        TypedQuery<MappingItem> query = entityManager().createQuery(\n-                \"SELECT m FROM \" + JPAMappingItem.class.getSimpleName()\n-                + \" m WHERE m.intAttrName=:intAttrName\", MappingItem.class);\n-        query.setParameter(\"intAttrName\", intAttrName);\n-\n-        query.getResultList().stream().\n-                map(Entity::getKey).\n-                map(itemKey -> entityManager().find(JPAMappingItem.class, itemKey)).filter(Objects::nonNull).\n-                forEach(item -> {\n-                    item.getMapping().getItems().remove(item);\n-                    item.setMapping(null);\n-                    entityManager().remove(item);\n-                });\n-\n-        // Make empty query cache for *MappingItem and related *Mapping\n-        entityManager().getEntityManagerFactory().getCache().evict(JPAMappingItem.class);\n-        entityManager().getEntityManagerFactory().getCache().evict(JPAMapping.class);\n+        findAll().forEach(resource -> {\n+            AtomicBoolean removed = new AtomicBoolean(false);\n+\n+            resource.getProvisions().forEach(provision -> removed.set(\n+                    removed.get()\n+                    || (provision.getMapping() != null\n+                    && provision.getMapping().getItems().removeIf(item -> intAttrName.equals(item.getIntAttrName())))));\n+\n+            if (removed.get()) {\n+                entityManager().merge(resource);\n+            }\n+        });\n     }\n \n     @Override\n@@ -251,20 +239,10 @@ public void delete(final String name) {\n         policyDAO.findByResource(resource).\n                 forEach(policy -> policy.getResources().remove(resource));\n \n-        resource.getProvisions().stream().\n-                peek(provision -> {\n-                    provision.setUidOnCreate(null);\n-                    if (provision.getMapping() != null) {\n-                        provision.getMapping().getItems().forEach(item -> item.setMapping(null));\n-                        provision.getMapping().getItems().clear();\n-                    }\n-                    provision.setMapping(null);\n-                    provision.setResource(null);\n-                }).\n-                forEach(provision -> virSchemaDAO.findByProvision(provision).\n-                forEach(schema -> virSchemaDAO.delete(schema.getKey())));\n-\n-        if (resource.getConnector() != null && resource.getConnector().getResources() != null\n+        virSchemaDAO.find(resource).forEach(virSchemaDAO::delete);\n+\n+        if (resource.getConnector() != null\n+                && resource.getConnector().getResources() != null\n                 && !resource.getConnector().getResources().isEmpty()) {\n \n             resource.getConnector().getResources().remove(resource);"},{"sha":"32ad3121d53e48e152f98c189212137e37390bf7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -69,5 +69,4 @@ public void delete(final String key) {\n         entityManager().remove(implementation);\n         ImplementationManager.purge(key);\n     }\n-\n }"},{"sha":"6e6c3a97bb5202c20a8f316abe5903518ef378b6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n@@ -36,7 +37,6 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccessPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;"},{"sha":"9affc78f080a92d1e741e709bfaa128520647ebe","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n@@ -41,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.ProvisioningPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"6b34d7f7a67403cc0840561b53451b975b567c7b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -38,9 +38,9 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;"},{"sha":"aca6eee89d1027f7efe6e4b416b8955660110fa0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -50,6 +50,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n@@ -58,7 +59,6 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;"},{"sha":"9452c685e5d1d501cfe50a0ca2a3ff644cb0508a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":27,"deletions":39,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,26 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n import org.apache.syncope.core.persistence.jpa.entity.JPAVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n \n public class JPAVirSchemaDAO extends AbstractDAO<VirSchema> implements VirSchemaDAO {\n \n@@ -68,35 +60,31 @@ public List<VirSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTy\n     }\n \n     @Override\n-    public List<VirSchema> findByProvision(final Provision provision) {\n+    public List<String> find(final ExternalResource resource) {\n         Query query = entityManager().createNativeQuery(\n-                \"SELECT t0.id FROM VirSchema t0 \"\n-                + \"LEFT OUTER JOIN \" + JPAAnyTypeClass.TABLE + \" t1 ON t0.ANYTYPECLASS_ID = t1.id \"\n-                + \"LEFT OUTER JOIN \" + JPAProvision.TABLE + \" t2 ON t0.PROVISION_ID = t2.id \"\n-                + \"LEFT OUTER JOIN \" + JPAAnyType.TABLE + \" t3 ON t2.ANYTYPE_ID = t3.id \"\n-                + \"LEFT OUTER JOIN \" + JPAMapping.TABLE + \" t4 ON t2.id = t4.PROVISION_ID \"\n-                + \"LEFT OUTER JOIN \" + JPAExternalResource.TABLE + \" t5 ON t2.RESOURCE_ID = t5.id \"\n-                + \"LEFT OUTER JOIN \" + JPAAccountPolicy.TABLE + \" t6 ON t5.ACCOUNTPOLICY_ID = t6.id \"\n-                + \"LEFT OUTER JOIN \" + JPAConnInstance.TABLE + \" t7 ON t5.CONNECTOR_ID = t7.id \"\n-                + \"LEFT OUTER JOIN \" + JPAPasswordPolicy.TABLE + \" t8 ON t5.PASSWORDPOLICY_ID = t8.id \"\n-                + \"LEFT OUTER JOIN \" + JPAPullPolicy.TABLE + \" t9 ON t5.PULLPOLICY_ID = t9.id \"\n-                + \"WHERE t0.PROVISION_ID = ?1\");\n-        query.setParameter(1, provision.getKey());\n-\n-        List<VirSchema> result = new ArrayList<>();\n-        for (Object key : query.getResultList()) {\n-            String actualKey = key instanceof Object[]\n-                    ? (String) ((Object[]) key)[0]\n-                    : ((String) key);\n-\n-            VirSchema virSchema = find(actualKey);\n-            if (virSchema == null) {\n-                LOG.error(\"Could not find schema with id {}, even though returned by the native query\", actualKey);\n-            } else if (!result.contains(virSchema)) {\n-                result.add(virSchema);\n-            }\n-        }\n-        return result;\n+                \"SELECT id FROM \" + JPAVirSchema.TABLE + \" e WHERE e.resource_id=?\");\n+        query.setParameter(1, resource.getKey());\n+\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object> results = query.getResultList();\n+        return results.stream().\n+                map(Object::toString).\n+                collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public List<VirSchema> find(final String resource, final String anyType) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT id FROM \" + JPAVirSchema.TABLE + \" e WHERE e.resource_id=? AND e.anyType_id=?\");\n+        query.setParameter(1, resource);\n+        query.setParameter(2, anyType);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object> results = query.getResultList();\n+        return results.stream().\n+                map(row -> find(row.toString())).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n     }\n \n     @Override"},{"sha":"9eba1df3520d681768f1cb7d151fc42dfd7f6094","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAnyTemplate.java","status":"renamed","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAnyTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAnyTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAnyTemplate.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.resource;\n+package org.apache.syncope.core.persistence.jpa.entity;\n \n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n@@ -25,8 +25,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractAnyTemplate.java"},{"sha":"a146c6bc4b9334c7e502981223dd2397c4e177ae","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTemplateRealm.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,7 +24,6 @@\n import javax.persistence.UniqueConstraint;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n \n @Entity\n @Table(name = JPAAnyTemplateRealm.TABLE, uniqueConstraints =\n@@ -48,5 +47,4 @@ public void setRealm(final Realm realm) {\n         checkType(realm, JPARealm.class);\n         this.realm = (JPARealm) realm;\n     }\n-\n }"},{"sha":"ae37005b57c866fc618fb97e480bc954c5283f15","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n@@ -61,7 +62,6 @@\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrValue;"},{"sha":"2b0b1d8d563ebeade3362eae6b9287c3803b519b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":40,"deletions":18,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,34 +18,34 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import javax.persistence.CascadeType;\n-import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n-import javax.persistence.JoinColumn;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ConnInstanceCheck;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n@@ -93,16 +93,10 @@ public class JPAConnInstance extends AbstractGeneratedKeyEntity implements ConnI\n     @NotNull\n     private String version;\n \n-    /**\n-     * The set of capabilities supported by this connector instance.\n-     */\n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"capability\")\n-    @CollectionTable(name = \"ConnInstance_capabilities\",\n-            joinColumns =\n-            @JoinColumn(name = \"connInstance_id\", referencedColumnName = \"id\"))\n-    private Set<ConnectorCapability> capabilities = new HashSet<>();\n+    @Lob\n+    private String capabilities;\n+\n+    private final Set<ConnectorCapability> capabilitiesSet = new HashSet<>();\n \n     /**\n      * The main configuration for the connector instance. This is directly implemented by the Configuration bean class\n@@ -220,7 +214,7 @@ public boolean add(final ExternalResource resource) {\n \n     @Override\n     public Set<ConnectorCapability> getCapabilities() {\n-        return capabilities;\n+        return capabilitiesSet;\n     }\n \n     @Override\n@@ -246,4 +240,32 @@ public void setPoolConf(final ConnPoolConf poolConf) {\n         checkType(poolConf, JPAConnPoolConf.class);\n         this.poolConf = (JPAConnPoolConf) poolConf;\n     }\n+\n+    protected void json2list(final boolean clearFirst) {\n+        if (clearFirst) {\n+            getCapabilities().clear();\n+        }\n+        if (capabilities != null) {\n+            getCapabilities().addAll(\n+                    POJOHelper.deserialize(capabilities, new TypeReference<Set<ConnectorCapability>>() {\n+                    }));\n+        }\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        json2list(false);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void postSave() {\n+        json2list(true);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void list2json() {\n+        capabilities = POJOHelper.serialize(getCapabilities());\n+    }\n }"},{"sha":"43a46bdc91f710fa8d9c4a6cf1d4c61b6d46f23b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":32,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.FIQLQuery;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n@@ -52,9 +53,7 @@\n import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n-import org.apache.syncope.core.persistence.api.entity.am.AttrRepoItem;\n import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.am.AuthModuleItem;\n import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.am.OIDCJWKS;\n@@ -85,12 +84,6 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -114,9 +107,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO;\n import org.apache.syncope.core.persistence.jpa.entity.am.JPAAttrRepo;\n-import org.apache.syncope.core.persistence.jpa.entity.am.JPAAttrRepoItem;\n import org.apache.syncope.core.persistence.jpa.entity.am.JPAAuthModule;\n-import org.apache.syncope.core.persistence.jpa.entity.am.JPAAuthModuleItem;\n import org.apache.syncope.core.persistence.jpa.entity.am.JPAAuthProfile;\n import org.apache.syncope.core.persistence.jpa.entity.am.JPACASSPClientApp;\n import org.apache.syncope.core.persistence.jpa.entity.am.JPAOIDCJWKS;\n@@ -147,12 +138,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnitItem;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplatePullTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTask;\n@@ -241,14 +226,10 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAMailTemplate();\n         } else if (reference.equals(Notification.class)) {\n             result = (E) new JPANotification();\n-        } else if (reference.equals(ExternalResource.class)) {\n-            result = (E) new JPAExternalResource();\n-        } else if (reference.equals(Provision.class)) {\n-            result = (E) new JPAProvision();\n-        } else if (reference.equals(OrgUnit.class)) {\n-            result = (E) new JPAOrgUnit();\n         } else if (reference.equals(ConnInstance.class)) {\n             result = (E) new JPAConnInstance();\n+        } else if (reference.equals(ExternalResource.class)) {\n+            result = (E) new JPAExternalResource();\n         } else if (reference.equals(SchemaLabel.class)) {\n             result = (E) new JPASchemaLabel();\n         } else if (reference.equals(PlainSchema.class)) {\n@@ -275,12 +256,6 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPADerSchema();\n         } else if (reference.equals(VirSchema.class)) {\n             result = (E) new JPAVirSchema();\n-        } else if (reference.equals(Mapping.class)) {\n-            result = (E) new JPAMapping();\n-        } else if (reference.equals(MappingItem.class)) {\n-            result = (E) new JPAMappingItem();\n-        } else if (reference.equals(OrgUnitItem.class)) {\n-            result = (E) new JPAOrgUnitItem();\n         } else if (reference.equals(GPlainAttr.class)) {\n             result = (E) new JPAGPlainAttr();\n         } else if (reference.equals(GPlainAttrValue.class)) {\n@@ -335,12 +310,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPASRARoute();\n         } else if (reference.equals(AuthModule.class)) {\n             result = (E) new JPAAuthModule();\n-        } else if (reference.equals(AuthModuleItem.class)) {\n-            result = (E) new JPAAuthModuleItem();\n         } else if (reference.equals(AttrRepo.class)) {\n             result = (E) new JPAAttrRepo();\n-        } else if (reference.equals(AttrRepoItem.class)) {\n-            result = (E) new JPAAttrRepoItem();\n         } else if (reference.equals(AuthPolicy.class)) {\n             result = (E) new JPAAuthPolicy();\n         } else if (reference.equals(AccessPolicy.class)) {"},{"sha":"3ecabb3837ea37bff4cd756abb115a18298d4b5f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAExternalResource.java","status":"renamed","additions":71,"deletions":48,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -16,17 +16,16 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.resource;\n+package org.apache.syncope.core.persistence.jpa.entity;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n-import javax.persistence.CollectionTable;\n-import javax.persistence.Column;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n@@ -36,30 +35,30 @@\n import javax.persistence.Lob;\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n-import javax.persistence.OneToMany;\n-import javax.persistence.OneToOne;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n import javax.persistence.Table;\n+import javax.persistence.Transient;\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPropagationPolicy;\n@@ -75,6 +74,7 @@\n @Entity\n @Table(name = JPAExternalResource.TABLE)\n @ExternalResourceCheck\n+@Cacheable\n public class JPAExternalResource extends AbstractProvidedKeyEntity implements ExternalResource {\n \n     private static final long serialVersionUID = -6937712883512073278L;\n@@ -93,12 +93,6 @@ public class JPAExternalResource extends AbstractProvidedKeyEntity implements Ex\n     @ManyToOne(fetch = FetchType.EAGER, cascade = { CascadeType.MERGE })\n     private JPAConnInstance connector;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY, mappedBy = \"resource\")\n-    private List<JPAProvision> provisions = new ArrayList<>();\n-\n-    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY, mappedBy = \"resource\")\n-    private JPAOrgUnit orgUnit;\n-\n     /**\n      * Priority index for propagation ordering.\n      */\n@@ -145,21 +139,28 @@ public class JPAExternalResource extends AbstractProvidedKeyEntity implements Ex\n     private JPAImplementation provisionSorter;\n \n     /**\n-     * Configuration properties that are overridden from the connector instance.\n+     * Configuration properties that are override from the connector instance.\n      */\n     @Lob\n     private String jsonConf;\n \n     @NotNull\n     private Boolean overrideCapabilities = false;\n \n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"capabilityOverride\")\n-    @CollectionTable(name = \"ExternalResource_capOverride\",\n-            joinColumns =\n-            @JoinColumn(name = \"resource_id\", referencedColumnName = \"id\"))\n-    private Set<ConnectorCapability> capabilitiesOverride = new HashSet<>();\n+    @Lob\n+    private String capabilitiesOverride;\n+\n+    @Transient\n+    private final Set<ConnectorCapability> capabilitiesOverrideSet = new HashSet<>();\n+\n+    @Lob\n+    private String provisions;\n+\n+    @Transient\n+    private final List<Provision> provisionList = new ArrayList<>();\n+\n+    @Lob\n+    private String orgUnit;\n \n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(name = TABLE + \"PropAction\",\n@@ -193,43 +194,30 @@ public void setConnector(final ConnInstance connector) {\n     }\n \n     @Override\n-    public boolean add(final Provision provision) {\n-        checkType(provision, JPAProvision.class);\n-        return this.provisions.add((JPAProvision) provision);\n-    }\n-\n-    @Override\n-    public Optional<? extends Provision> getProvision(final String anyType) {\n-        return getProvisions().stream().\n-                filter(provision -> provision.getAnyType().getKey().equals(anyType)).findFirst();\n-    }\n-\n-    @Override\n-    public Optional<? extends Provision> getProvision(final AnyType anyType) {\n+    public Optional<Provision> getProvision(final String anyType) {\n         return getProvisions().stream().\n                 filter(provision -> provision.getAnyType().equals(anyType)).findFirst();\n     }\n \n     @Override\n-    public Optional<? extends Provision> getProvision(final ObjectClass objectClass) {\n+    public Optional<Provision> getProvision(final ObjectClass objectClass) {\n         return getProvisions().stream().\n-                filter(provision -> provision.getObjectClass().equals(objectClass)).findFirst();\n+                filter(provision -> provision.getObjectClass().equals(objectClass.getObjectClassValue())).findFirst();\n     }\n \n     @Override\n-    public List<? extends Provision> getProvisions() {\n-        return provisions == null ? List.of() : provisions;\n+    public List<Provision> getProvisions() {\n+        return provisionList;\n     }\n \n     @Override\n     public OrgUnit getOrgUnit() {\n-        return orgUnit;\n+        return Optional.ofNullable(orgUnit).map(ou -> POJOHelper.deserialize(ou, OrgUnit.class)).orElse(null);\n     }\n \n     @Override\n     public void setOrgUnit(final OrgUnit orgUnit) {\n-        checkType(orgUnit, JPAOrgUnit.class);\n-        this.orgUnit = (JPAOrgUnit) orgUnit;\n+        this.orgUnit = orgUnit == null ? null : POJOHelper.serialize(orgUnit);\n     }\n \n     @Override\n@@ -387,7 +375,7 @@ public void setOverrideCapabilities(final boolean overrideCapabilities) {\n \n     @Override\n     public Set<ConnectorCapability> getCapabilitiesOverride() {\n-        return capabilitiesOverride;\n+        return capabilitiesOverrideSet;\n     }\n \n     @Override\n@@ -402,4 +390,39 @@ public boolean add(final Implementation propagationAction) {\n     public List<? extends Implementation> getPropagationActions() {\n         return propagationActions;\n     }\n+\n+    protected void json2list(final boolean clearFirst) {\n+        if (clearFirst) {\n+            getCapabilitiesOverride().clear();\n+            getProvisions().clear();\n+        }\n+        if (capabilitiesOverride != null) {\n+            getCapabilitiesOverride().addAll(\n+                    POJOHelper.deserialize(capabilitiesOverride, new TypeReference<Set<ConnectorCapability>>() {\n+                    }));\n+        }\n+        if (provisions != null) {\n+            getProvisions().addAll(\n+                    POJOHelper.deserialize(provisions, new TypeReference<List<Provision>>() {\n+                    }));\n+        }\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        json2list(false);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void postSave() {\n+        json2list(true);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void list2json() {\n+        capabilitiesOverride = POJOHelper.serialize(getCapabilitiesOverride());\n+        provisions = POJOHelper.serialize(getProvisions());\n+    }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java"},{"sha":"43b30c2e8830595e9a1f1e3497f3378e8ce8fcfc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -39,20 +39,19 @@\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccessPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAttrReleasePolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAuthPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.RealmCheck;\n \n @Entity"},{"sha":"905aee8ac8b3cf4f57e4aead50f0a260b0045b74","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAVirSchema.java","status":"modified","additions":23,"deletions":16,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,12 +26,10 @@\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.LinkingMappingItem;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n \n @Entity\n @Table(name = JPAVirSchema.TABLE)\n@@ -49,7 +47,11 @@ public class JPAVirSchema extends AbstractSchema implements VirSchema {\n \n     @NotNull\n     @ManyToOne\n-    private JPAProvision provision;\n+    private JPAExternalResource resource;\n+\n+    @NotNull\n+    @ManyToOne\n+    private JPAAnyType anyType;\n \n     @NotNull\n     private String extAttrName;\n@@ -96,29 +98,34 @@ public void setReadonly(final boolean readonly) {\n     }\n \n     @Override\n-    public Provision getProvision() {\n-        return provision;\n+    public ExternalResource getResource() {\n+        return resource;\n     }\n \n     @Override\n-    public void setProvision(final Provision provision) {\n-        checkType(provision, JPAProvision.class);\n-        this.provision = (JPAProvision) provision;\n+    public void setResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        this.resource = (JPAExternalResource) resource;\n     }\n \n     @Override\n-    public String getExtAttrName() {\n-        return extAttrName;\n+    public AnyType getAnyType() {\n+        return anyType;\n     }\n \n     @Override\n-    public void setExtAttrName(final String extAttrName) {\n-        this.extAttrName = extAttrName;\n+    public void setAnyType(final AnyType anyType) {\n+        checkType(anyType, JPAAnyType.class);\n+        this.anyType = (JPAAnyType) anyType;\n     }\n \n     @Override\n-    public MappingItem asLinkingMappingItem() {\n-        return new LinkingMappingItem(this);\n+    public String getExtAttrName() {\n+        return extAttrName;\n     }\n \n+    @Override\n+    public void setExtAttrName(final String extAttrName) {\n+        this.extAttrName = extAttrName;\n+    }\n }"},{"sha":"9f452b69fc13b03990cfd8fc0373798b65f7516e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAttrRepo.java","status":"modified","additions":43,"deletions":14,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepo.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,23 +18,27 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.am;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n-import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n-import javax.persistence.FetchType;\n import javax.persistence.Lob;\n-import javax.persistence.OneToMany;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n import javax.persistence.Table;\n+import javax.persistence.Transient;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.attr.AttrRepoConf;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AttrRepoState;\n import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n-import org.apache.syncope.core.persistence.api.entity.am.AttrRepoItem;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n@@ -55,8 +59,11 @@ public class JPAAttrRepo extends AbstractProvidedKeyEntity implements AttrRepo {\n     @NotNull\n     private Integer attrRepoOrder = 0;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"attrRepo\")\n-    private List<JPAAttrRepoItem> items = new ArrayList<>();\n+    @Lob\n+    private String items;\n+\n+    @Transient\n+    private final List<Item> itemList = new ArrayList<>();\n \n     @Lob\n     private String jsonConf;\n@@ -92,14 +99,8 @@ public void setOrder(final int order) {\n     }\n \n     @Override\n-    public List<? extends AttrRepoItem> getItems() {\n-        return items;\n-    }\n-\n-    @Override\n-    public boolean add(final AttrRepoItem item) {\n-        checkType(item, JPAAttrRepoItem.class);\n-        return items.contains((JPAAttrRepoItem) item) || items.add((JPAAttrRepoItem) item);\n+    public List<Item> getItems() {\n+        return itemList;\n     }\n \n     @Override\n@@ -116,4 +117,32 @@ public AttrRepoConf getConf() {\n     public void setConf(final AttrRepoConf conf) {\n         jsonConf = POJOHelper.serialize(conf);\n     }\n+\n+    protected void json2list(final boolean clearFirst) {\n+        if (clearFirst) {\n+            getItems().clear();\n+        }\n+        if (items != null) {\n+            getItems().addAll(\n+                    POJOHelper.deserialize(items, new TypeReference<List<Item>>() {\n+                    }));\n+        }\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        json2list(false);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void postSave() {\n+        json2list(true);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void list2json() {\n+        items = POJOHelper.serialize(getItems());\n+    }\n }"},{"sha":"c6d9afa2ebdcdaf89ec8e6a290ac967b7a744673","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAttrRepoItem.java","status":"removed","additions":0,"deletions":94,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepoItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepoItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepoItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,94 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.am;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n-import org.apache.syncope.core.persistence.api.entity.am.AttrRepoItem;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n-\n-@Entity\n-@Table(name = JPAAttrRepoItem.TABLE)\n-@Cacheable\n-public class JPAAttrRepoItem extends AbstractItem implements AttrRepoItem {\n-\n-    public static final String TABLE = \"AttrRepoItem\";\n-\n-    private static final long serialVersionUID = 3165440920144995781L;\n-\n-    @ManyToOne\n-    private JPAAttrRepo attrRepo;\n-\n-    @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(name = TABLE + \"Transformer\",\n-            joinColumns =\n-            @JoinColumn(name = \"item_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"),\n-            uniqueConstraints =\n-            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n-    private final List<JPAImplementation> transformers = new ArrayList<>();\n-\n-    public JPAAttrRepoItem() {\n-        super.setPurpose(MappingPurpose.NONE);\n-    }\n-\n-    @Override\n-    public void setPurpose(final MappingPurpose purpose) {\n-        // cannot be changed\n-    }\n-\n-    @Override\n-    public AttrRepo getAttrRepo() {\n-        return attrRepo;\n-    }\n-\n-    @Override\n-    public void setAttrRepo(final AttrRepo attrRepo) {\n-        checkType(attrRepo, JPAAttrRepo.class);\n-        this.attrRepo = (JPAAttrRepo) attrRepo;\n-    }\n-\n-    @Override\n-    public boolean add(final Implementation transformer) {\n-        checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n-        return transformers.contains((JPAImplementation) transformer)\n-                || this.transformers.add((JPAImplementation) transformer);\n-    }\n-\n-    @Override\n-    public List<? extends Implementation> getTransformers() {\n-        return transformers;\n-    }\n-}"},{"sha":"527fe81de6bfa029acbf753f75b1aac4178ddc51","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAuthModule.java","status":"modified","additions":44,"deletions":14,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModule.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,23 +18,27 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.am;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n-import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n-import javax.persistence.FetchType;\n import javax.persistence.Lob;\n-import javax.persistence.OneToMany;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n import javax.persistence.Table;\n+import javax.persistence.Transient;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AuthModuleState;\n import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.am.AuthModuleItem;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n@@ -55,8 +59,11 @@ public class JPAAuthModule extends AbstractProvidedKeyEntity implements AuthModu\n     @NotNull\n     private Integer authModuleOrder = 0;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"authModule\")\n-    private List<JPAAuthModuleItem> items = new ArrayList<>();\n+    @Lob\n+    private String items;\n+\n+    @Transient\n+    private final List<Item> itemList = new ArrayList<>();\n \n     @Lob\n     private String jsonConf;\n@@ -92,14 +99,8 @@ public void setOrder(final int order) {\n     }\n \n     @Override\n-    public List<? extends AuthModuleItem> getItems() {\n-        return items;\n-    }\n-\n-    @Override\n-    public boolean add(final AuthModuleItem item) {\n-        checkType(item, JPAAuthModuleItem.class);\n-        return items.contains((JPAAuthModuleItem) item) || items.add((JPAAuthModuleItem) item);\n+    public List<Item> getItems() {\n+        return itemList;\n     }\n \n     @Override\n@@ -116,4 +117,33 @@ public AuthModuleConf getConf() {\n     public void setConf(final AuthModuleConf conf) {\n         jsonConf = POJOHelper.serialize(conf);\n     }\n+\n+    protected void json2list(final boolean clearFirst) {\n+        if (clearFirst) {\n+            getItems().clear();\n+        }\n+        if (items != null) {\n+            getItems().addAll(\n+                    POJOHelper.deserialize(items, new TypeReference<List<Item>>() {\n+                    }));\n+        }\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        json2list(false);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void postSave() {\n+        json2list(true);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void list2json() {\n+        items = POJOHelper.serialize(getItems());\n+    }\n+\n }"},{"sha":"c2c6ba76d780addb107b8530ee7ef2f30244faa8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAuthModuleItem.java","status":"removed","additions":0,"deletions":94,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModuleItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModuleItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModuleItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,94 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.am;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.am.AuthModuleItem;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n-\n-@Entity\n-@Table(name = JPAAuthModuleItem.TABLE)\n-@Cacheable\n-public class JPAAuthModuleItem extends AbstractItem implements AuthModuleItem {\n-\n-    public static final String TABLE = \"AuthModuleItem\";\n-\n-    private static final long serialVersionUID = 3165440920144995781L;\n-\n-    @ManyToOne\n-    private JPAAuthModule authModule;\n-\n-    @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(name = TABLE + \"Transformer\",\n-            joinColumns =\n-            @JoinColumn(name = \"item_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"),\n-            uniqueConstraints =\n-            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n-    private final List<JPAImplementation> transformers = new ArrayList<>();\n-\n-    public JPAAuthModuleItem() {\n-        super.setPurpose(MappingPurpose.NONE);\n-    }\n-\n-    @Override\n-    public void setPurpose(final MappingPurpose purpose) {\n-        // cannot be changed\n-    }\n-\n-    @Override\n-    public AuthModule getAuthModule() {\n-        return authModule;\n-    }\n-\n-    @Override\n-    public void setAuthModule(final AuthModule authModule) {\n-        checkType(authModule, JPAAuthModule.class);\n-        this.authModule = (JPAAuthModule) authModule;\n-    }\n-\n-    @Override\n-    public boolean add(final Implementation transformer) {\n-        checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n-        return transformers.contains((JPAImplementation) transformer)\n-                || this.transformers.add((JPAImplementation) transformer);\n-    }\n-\n-    @Override\n-    public List<? extends Implementation> getTransformers() {\n-        return transformers;\n-    }\n-}"},{"sha":"8a3d4b40ef136e923174e9439df294d510f18cda","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -37,16 +37,16 @@\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGroupableRelatable;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.AnyObjectCheck;\n \n @Entity"},{"sha":"474bbea1bc5442ba8aee4794357da64c2fe34526","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -38,17 +38,17 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractAny;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.persistence.jpa.validation.entity.GroupCheck;"},{"sha":"a62aeb92d1919a79c930b200a4e8b8214e901df2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -31,11 +31,11 @@\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n \n @Entity\n @Table(name = JPAAccountPolicy.TABLE)"},{"sha":"abdf6c9cea7cfaab950c6295238cd7045cc728aa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullPolicy.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,7 +26,6 @@\n import javax.persistence.FetchType;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n \n@@ -48,9 +47,9 @@ public boolean add(final PullCorrelationRuleEntity filter) {\n     }\n \n     @Override\n-    public Optional<? extends PullCorrelationRuleEntity> getCorrelationRule(final AnyType anyType) {\n+    public Optional<? extends PullCorrelationRuleEntity> getCorrelationRule(final String anyType) {\n         return correlationRules.stream().\n-                filter(rule -> anyType != null && anyType.equals(rule.getAnyType())).findFirst();\n+                filter(rule -> anyType != null && anyType.equals(rule.getAnyType().getKey())).findFirst();\n     }\n \n     @Override"},{"sha":"ea809985a7955533d38728c9dff47e585e8ecb3a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPushPolicy.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,7 +26,6 @@\n import javax.persistence.FetchType;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n \n@@ -48,9 +47,9 @@ public boolean add(final PushCorrelationRuleEntity filter) {\n     }\n \n     @Override\n-    public Optional<? extends PushCorrelationRuleEntity> getCorrelationRule(final AnyType anyType) {\n+    public Optional<? extends PushCorrelationRuleEntity> getCorrelationRule(final String anyType) {\n         return correlationRules.stream().\n-                filter(rule -> anyType != null && anyType.equals(rule.getAnyType())).findFirst();\n+                filter(rule -> anyType != null && anyType.equals(rule.getAnyType().getKey())).findFirst();\n     }\n \n     @Override"},{"sha":"f252dd3d7e433059d26311004f54c68dac951b8d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractItem.java","status":"removed","additions":0,"deletions":158,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,158 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.resource;\n-\n-import javax.persistence.Column;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n-import javax.persistence.MappedSuperclass;\n-import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-\n-@MappedSuperclass\n-public abstract class AbstractItem extends AbstractGeneratedKeyEntity implements Item {\n-\n-    private static final long serialVersionUID = 5552380143129988272L;\n-\n-    @NotNull\n-    private String intAttrName;\n-\n-    /**\n-     * Target resource's field to be mapped.\n-     */\n-    @NotNull\n-    private String extAttrName;\n-\n-    /**\n-     * Specify if the mapped target resource's field is nullable.\n-     */\n-    @NotNull\n-    private String mandatoryCondition = Boolean.FALSE.toString();\n-\n-    /**\n-     * Specify if the mapped target resource's field is the id.\n-     */\n-    @NotNull\n-    private Boolean connObjectKey = false;\n-\n-    /**\n-     * Specify if the mapped target resource's field is the password.\n-     */\n-    @NotNull\n-    private Boolean password = false;\n-\n-    @NotNull\n-    @Enumerated(EnumType.STRING)\n-    private MappingPurpose purpose;\n-\n-    /**\n-     * (Optional) JEXL expression to apply to values before propagation.\n-     */\n-    @Column(name = \"propJEXL\")\n-    private String propagationJEXLTransformer;\n-\n-    /**\n-     * (Optional) JEXL expression to apply to values before pull.\n-     */\n-    @Column(name = \"pullJEXL\")\n-    private String pullJEXLTransformer;\n-\n-    @Override\n-    public String getExtAttrName() {\n-        return extAttrName;\n-    }\n-\n-    @Override\n-    public void setExtAttrName(final String extAttrName) {\n-        this.extAttrName = extAttrName;\n-    }\n-\n-    @Override\n-    public String getMandatoryCondition() {\n-        return mandatoryCondition;\n-    }\n-\n-    @Override\n-    public void setMandatoryCondition(final String mandatoryCondition) {\n-        this.mandatoryCondition = mandatoryCondition;\n-    }\n-\n-    @Override\n-    public String getIntAttrName() {\n-        return intAttrName;\n-    }\n-\n-    @Override\n-    public void setIntAttrName(final String intAttrName) {\n-        this.intAttrName = intAttrName;\n-    }\n-\n-    @Override\n-    public boolean isConnObjectKey() {\n-        return connObjectKey;\n-    }\n-\n-    @Override\n-    public void setConnObjectKey(final boolean connObjectKey) {\n-        this.connObjectKey = connObjectKey;\n-    }\n-\n-    @Override\n-    public boolean isPassword() {\n-        return password;\n-    }\n-\n-    @Override\n-    public void setPassword(final boolean password) {\n-        this.password = password;\n-    }\n-\n-    @Override\n-    public MappingPurpose getPurpose() {\n-        return purpose;\n-    }\n-\n-    @Override\n-    public void setPurpose(final MappingPurpose purpose) {\n-        this.purpose = purpose;\n-    }\n-\n-    @Override\n-    public String getPropagationJEXLTransformer() {\n-        return propagationJEXLTransformer;\n-    }\n-\n-    @Override\n-    public void setPropagationJEXLTransformer(final String propagationJEXLTransformer) {\n-        this.propagationJEXLTransformer = propagationJEXLTransformer;\n-    }\n-\n-    @Override\n-    public String getPullJEXLTransformer() {\n-        return pullJEXLTransformer;\n-    }\n-\n-    @Override\n-    public void setPullJEXLTransformer(final String pullJEXLTransformer) {\n-        this.pullJEXLTransformer = pullJEXLTransformer;\n-    }\n-\n-}"},{"sha":"d0d6ede63b95ce0fbfd9070cca926055f565d886","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMapping.java","status":"removed","additions":0,"deletions":98,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,98 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.resource;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-import javax.persistence.Cacheable;\n-import javax.persistence.CascadeType;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.OneToMany;\n-import javax.persistence.OneToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-\n-@Entity\n-@Table(name = JPAMapping.TABLE)\n-@Cacheable\n-public class JPAMapping extends AbstractGeneratedKeyEntity implements Mapping {\n-\n-    private static final long serialVersionUID = 4316047254916259158L;\n-\n-    public static final String TABLE = \"Mapping\";\n-\n-    @OneToOne(optional = false)\n-    private JPAProvision provision;\n-\n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"mapping\")\n-    private List<JPAMappingItem> items = new ArrayList<>();\n-\n-    /**\n-     * A JEXL expression for determining how to find the connector object link in external resource's space.\n-     */\n-    private String connObjectLink;\n-\n-    @Override\n-    public Provision getProvision() {\n-        return provision;\n-    }\n-\n-    @Override\n-    public void setProvision(final Provision provision) {\n-        checkType(provision, JPAProvision.class);\n-        this.provision = (JPAProvision) provision;\n-    }\n-\n-    @Override\n-    public boolean add(final MappingItem item) {\n-        checkType(item, JPAMappingItem.class);\n-        return items.contains((JPAMappingItem) item) || items.add((JPAMappingItem) item);\n-    }\n-\n-    @Override\n-    public List<? extends MappingItem> getItems() {\n-        return items;\n-    }\n-\n-    @Override\n-    public Optional<? extends MappingItem> getConnObjectKeyItem() {\n-        return getItems().stream().filter(MappingItem::isConnObjectKey).findFirst();\n-    }\n-\n-    @Override\n-    public void setConnObjectKeyItem(final MappingItem item) {\n-        item.setConnObjectKey(true);\n-        this.add(item);\n-    }\n-\n-    @Override\n-    public String getConnObjectLink() {\n-        return connObjectLink;\n-    }\n-\n-    @Override\n-    public void setConnObjectLink(final String connObjectLink) {\n-        this.connObjectLink = connObjectLink;\n-    }\n-}"},{"sha":"a197e1128e422a8b32d988151dc4606ddbd69d08","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,83 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.resource;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n-\n-@Entity\n-@Table(name = JPAMappingItem.TABLE)\n-@Cacheable\n-public class JPAMappingItem extends AbstractItem implements MappingItem {\n-\n-    private static final long serialVersionUID = 7383601853619332424L;\n-\n-    public static final String TABLE = \"MappingItem\";\n-\n-    @ManyToOne\n-    private JPAMapping mapping;\n-\n-    @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(name = TABLE + \"Transformer\",\n-            joinColumns =\n-            @JoinColumn(name = \"item_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"),\n-            uniqueConstraints =\n-            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n-    private List<JPAImplementation> transformers = new ArrayList<>();\n-\n-    @Override\n-    public Mapping getMapping() {\n-        return mapping;\n-    }\n-\n-    @Override\n-    public void setMapping(final Mapping mapping) {\n-        checkType(mapping, JPAMapping.class);\n-        this.mapping = (JPAMapping) mapping;\n-    }\n-\n-    @Override\n-    public boolean add(final Implementation transformer) {\n-        checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n-        return transformers.contains((JPAImplementation) transformer)\n-                || transformers.add((JPAImplementation) transformer);\n-    }\n-\n-    @Override\n-    public List<? extends Implementation> getTransformers() {\n-        return transformers;\n-    }\n-}"},{"sha":"b7e11de95bc85418aa22ae4cf6853e336725fa80","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnit.java","status":"removed","additions":0,"deletions":146,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,146 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.resource;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-import javax.persistence.Cacheable;\n-import javax.persistence.CascadeType;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.Lob;\n-import javax.persistence.OneToMany;\n-import javax.persistence.OneToOne;\n-import javax.persistence.Table;\n-import javax.validation.constraints.NotNull;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.SyncToken;\n-\n-@Entity\n-@Table(name = JPAOrgUnit.TABLE)\n-@Cacheable\n-public class JPAOrgUnit extends AbstractGeneratedKeyEntity implements OrgUnit {\n-\n-    private static final long serialVersionUID = 8236319635989067603L;\n-\n-    public static final String TABLE = \"OrgUnit\";\n-\n-    @OneToOne\n-    private JPAExternalResource resource;\n-\n-    @NotNull\n-    private String objectClass;\n-\n-    @Lob\n-    private String serializedSyncToken;\n-\n-    @NotNull\n-    private Boolean ignoreCaseMatch = false;\n-\n-    @NotNull\n-    private String connObjectLink;\n-\n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"orgUnit\")\n-    private List<JPAOrgUnitItem> items = new ArrayList<>();\n-\n-    @Override\n-    public ExternalResource getResource() {\n-        return resource;\n-    }\n-\n-    @Override\n-    public void setResource(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        this.resource = (JPAExternalResource) resource;\n-    }\n-\n-    @Override\n-    public ObjectClass getObjectClass() {\n-        return Optional.ofNullable(objectClass).map(ObjectClass::new).orElse(null);\n-    }\n-\n-    @Override\n-    public void setObjectClass(final ObjectClass objectClass) {\n-        this.objectClass = Optional.ofNullable(objectClass).map(ObjectClass::getObjectClassValue).orElse(null);\n-    }\n-\n-    @Override\n-    public SyncToken getSyncToken() {\n-        return Optional.ofNullable(serializedSyncToken)\n-            .map(syncToken -> POJOHelper.deserialize(syncToken, SyncToken.class)).orElse(null);\n-    }\n-\n-    @Override\n-    public String getSerializedSyncToken() {\n-        return this.serializedSyncToken;\n-    }\n-\n-    @Override\n-    public void setSyncToken(final SyncToken syncToken) {\n-        this.serializedSyncToken = Optional.ofNullable(syncToken).map(POJOHelper::serialize).orElse(null);\n-    }\n-\n-    @Override\n-    public boolean isIgnoreCaseMatch() {\n-        return ignoreCaseMatch;\n-    }\n-\n-    @Override\n-    public void setIgnoreCaseMatch(final boolean ignoreCaseMatch) {\n-        this.ignoreCaseMatch = ignoreCaseMatch;\n-    }\n-\n-    @Override\n-    public String getConnObjectLink() {\n-        return connObjectLink;\n-    }\n-\n-    @Override\n-    public void setConnObjectLink(final String connObjectLink) {\n-        this.connObjectLink = connObjectLink;\n-    }\n-\n-    @Override\n-    public boolean add(final OrgUnitItem item) {\n-        checkType(item, JPAOrgUnitItem.class);\n-        return items.contains((JPAOrgUnitItem) item) || items.add((JPAOrgUnitItem) item);\n-    }\n-\n-    @Override\n-    public List<? extends OrgUnitItem> getItems() {\n-        return items;\n-    }\n-\n-    @Override\n-    public Optional<? extends OrgUnitItem> getConnObjectKeyItem() {\n-        return getItems().stream().filter(OrgUnitItem::isConnObjectKey).findFirst();\n-    }\n-\n-    @Override\n-    public void setConnObjectKeyItem(final OrgUnitItem item) {\n-        item.setConnObjectKey(true);\n-        this.add(item);\n-    }\n-}"},{"sha":"1882a13492dafd72fcac1b72c5cd45a59571f1fd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnitItem.java","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,88 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.resource;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n-\n-@Entity\n-@Table(name = JPAOrgUnitItem.TABLE)\n-@Cacheable\n-public class JPAOrgUnitItem extends AbstractItem implements OrgUnitItem {\n-\n-    private static final long serialVersionUID = 7872073846646341777L;\n-\n-    public static final String TABLE = \"OrgUnitItem\";\n-\n-    @ManyToOne\n-    private JPAOrgUnit orgUnit;\n-\n-    @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(name = TABLE + \"Transformer\",\n-            joinColumns =\n-            @JoinColumn(name = \"item_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"),\n-            uniqueConstraints =\n-            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n-    private List<JPAImplementation> transformers = new ArrayList<>();\n-\n-    @Override\n-    public OrgUnit getOrgUnit() {\n-        return orgUnit;\n-    }\n-\n-    @Override\n-    public void setOrgUnit(final OrgUnit mapping) {\n-        checkType(mapping, JPAOrgUnit.class);\n-        this.orgUnit = (JPAOrgUnit) mapping;\n-    }\n-\n-    @Override\n-    public boolean isPassword() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean add(final Implementation transformer) {\n-        checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n-        return transformers.contains((JPAImplementation) transformer)\n-                || transformers.add((JPAImplementation) transformer);\n-    }\n-\n-    @Override\n-    public List<? extends Implementation> getTransformers() {\n-        return transformers;\n-    }\n-}"},{"sha":"34b963b5fe1773bc7e9f94582e8e2f47c07d460e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAProvision.java","status":"removed","additions":0,"deletions":181,"changes":181,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,181 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.resource;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-import javax.persistence.Basic;\n-import javax.persistence.CascadeType;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.Lob;\n-import javax.persistence.ManyToMany;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.OneToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-import javax.validation.constraints.NotNull;\n-import org.apache.commons.lang3.BooleanUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.SyncToken;\n-\n-@Entity\n-@Table(name = JPAProvision.TABLE, uniqueConstraints =\n-        @UniqueConstraint(columnNames = { \"resource_id\", \"anyType_id\" }))\n-public class JPAProvision extends AbstractGeneratedKeyEntity implements Provision {\n-\n-    private static final long serialVersionUID = -1807889487945989443L;\n-\n-    public static final String TABLE = \"Provision\";\n-\n-    @ManyToOne\n-    private JPAExternalResource resource;\n-\n-    @ManyToOne\n-    private JPAAnyType anyType;\n-\n-    @NotNull\n-    private String objectClass;\n-\n-    @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(joinColumns =\n-            @JoinColumn(name = \"provision_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"anyTypeClass_id\"),\n-            uniqueConstraints =\n-            @UniqueConstraint(columnNames = { \"provision_id\", \"anyTypeClass_id\" }))\n-    private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n-\n-    @Lob\n-    private String serializedSyncToken;\n-\n-    @Basic\n-    private Boolean ignoreCaseMatch = false;\n-\n-    @ManyToOne\n-    private JPAPlainSchema uidOnCreate;\n-\n-    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"provision\")\n-    private JPAMapping mapping;\n-\n-    @Override\n-    public ExternalResource getResource() {\n-        return resource;\n-    }\n-\n-    @Override\n-    public void setResource(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        this.resource = (JPAExternalResource) resource;\n-    }\n-\n-    @Override\n-    public AnyType getAnyType() {\n-        return anyType;\n-    }\n-\n-    @Override\n-    public void setAnyType(final AnyType anyType) {\n-        checkType(anyType, JPAAnyType.class);\n-        this.anyType = (JPAAnyType) anyType;\n-    }\n-\n-    @Override\n-    public ObjectClass getObjectClass() {\n-        return Optional.ofNullable(objectClass).map(ObjectClass::new).orElse(null);\n-    }\n-\n-    @Override\n-    public void setObjectClass(final ObjectClass objectClass) {\n-        this.objectClass = Optional.ofNullable(objectClass).map(ObjectClass::getObjectClassValue).orElse(null);\n-    }\n-\n-    @Override\n-    public boolean add(final AnyTypeClass auxClass) {\n-        checkType(auxClass, JPAAnyTypeClass.class);\n-        return auxClasses.contains((JPAAnyTypeClass) auxClass) || auxClasses.add((JPAAnyTypeClass) auxClass);\n-    }\n-\n-    @Override\n-    public List<? extends AnyTypeClass> getAuxClasses() {\n-        return auxClasses;\n-    }\n-\n-    @Override\n-    public SyncToken getSyncToken() {\n-        return Optional.ofNullable(serializedSyncToken)\n-                .map(syncToken -> POJOHelper.deserialize(syncToken, SyncToken.class)).orElse(null);\n-    }\n-\n-    @Override\n-    public String getSerializedSyncToken() {\n-        return this.serializedSyncToken;\n-    }\n-\n-    @Override\n-    public void setSyncToken(final SyncToken syncToken) {\n-        this.serializedSyncToken = Optional.ofNullable(syncToken).map(POJOHelper::serialize).orElse(null);\n-    }\n-\n-    @Override\n-    public boolean isIgnoreCaseMatch() {\n-        return BooleanUtils.isNotFalse(ignoreCaseMatch);\n-    }\n-\n-    @Override\n-    public void setIgnoreCaseMatch(final boolean ignoreCaseMatch) {\n-        this.ignoreCaseMatch = ignoreCaseMatch;\n-    }\n-\n-    @Override\n-    public PlainSchema getUidOnCreate() {\n-        return uidOnCreate;\n-    }\n-\n-    @Override\n-    public void setUidOnCreate(final PlainSchema uidOnCreate) {\n-        checkType(uidOnCreate, JPAPlainSchema.class);\n-        this.uidOnCreate = (JPAPlainSchema) uidOnCreate;\n-    }\n-\n-    @Override\n-    public Mapping getMapping() {\n-        return mapping;\n-    }\n-\n-    @Override\n-    public void setMapping(final Mapping mapping) {\n-        checkType(mapping, JPAMapping.class);\n-        this.mapping = (JPAMapping) mapping;\n-    }\n-}"},{"sha":"c2cd074de23d1105d662ec85009d839105337051","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/AbstractProvisioningTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,9 +25,9 @@\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ProvisioningTaskCheck;\n \n @MappedSuperclass"},{"sha":"7a1e32d493168a009a76d5911b5eec867467ffba","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAAnyTemplatePullTask.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplatePullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplatePullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplatePullTask.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,7 +24,7 @@\n import javax.persistence.UniqueConstraint;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractAnyTemplate;\n \n @Entity\n @Table(name = JPAAnyTemplatePullTask.TABLE, uniqueConstraints =\n@@ -48,5 +48,4 @@ public void setPullTask(final PullTask pullTask) {\n         checkType(pullTask, JPAPullTask.class);\n         this.pullTask = (JPAPullTask) pullTask;\n     }\n-\n }"},{"sha":"518dfd26e664899e20e10ba0776b78c14061f0e4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -30,9 +30,9 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.PropagationTaskCheck;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.identityconnectors.framework.common.objects.Attribute;"},{"sha":"31cc9e21d01bab955b513f26a699d001ad62a9e4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPullTask.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -37,7 +37,6 @@\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.PullMode;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n@@ -129,9 +128,9 @@ public boolean add(final AnyTemplatePullTask template) {\n     }\n \n     @Override\n-    public Optional<? extends AnyTemplatePullTask> getTemplate(final AnyType anyType) {\n+    public Optional<? extends AnyTemplatePullTask> getTemplate(final String anyType) {\n         return templates.stream().\n-                filter(template -> anyType != null && anyType.equals(template.getAnyType())).\n+                filter(template -> anyType != null && anyType.equals(template.getAnyType().getKey())).\n                 findFirst();\n     }\n "},{"sha":"cccd14bc737e77f2557e1de3643ad5fe8006dce7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPALinkedAccount.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -40,14 +40,14 @@\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPrivilege;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.Encryptor;"},{"sha":"edabbfa7d98e7777fb5cee127577855674dea26b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -48,10 +48,10 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n@@ -60,8 +60,8 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGroupableRelatable;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.Encryptor;"},{"sha":"cee63643cfd0118379be6188beca3d9b145b904f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":28,"deletions":15,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,24 +19,37 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.ItemContainer;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n public class ExternalResourceValidator extends AbstractValidator<ExternalResourceCheck, ExternalResource> {\n \n-    private static boolean isValid(final List<? extends Item> items, final ConstraintValidatorContext context) {\n-        long connObjectKeys = items.stream().filter(Item::isConnObjectKey).count();\n-        if (connObjectKeys != 1) {\n+    private static boolean areItemsValid(\n+            final ItemContainer itemContainer,\n+            final ConstraintValidatorContext context) {\n+\n+        if (itemContainer.getItems().stream().\n+                anyMatch(item -> item.getIntAttrName() == null\n+                || item.getExtAttrName() == null\n+                || item.getPurpose() == null)) {\n+\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidMapping,\n+                            \"intAttrName, extAttrName and purpose must be specified for each item\")).\n+                    addPropertyNode(\"items\").addConstraintViolation();\n+            return false;\n+        }\n+\n+        if (itemContainer.getConnObjectKeyItem().isEmpty()) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"Single ConnObjectKey mapping is required\")).\n                     addPropertyNode(\"connObjectKey.size\").addConstraintViolation();\n@@ -51,7 +64,7 @@ private static boolean isValid(final OrgUnit orgUnit, final ConstraintValidatorC\n             return true;\n         }\n \n-        return isValid(orgUnit.getItems(), context);\n+        return areItemsValid(orgUnit, context);\n     }\n \n     private static boolean isValid(final Mapping mapping, final ConstraintValidatorContext context) {\n@@ -61,15 +74,15 @@ private static boolean isValid(final Mapping mapping, final ConstraintValidatorC\n \n         boolean isValid = true;\n \n-        long passwords = mapping.getItems().stream().filter(MappingItem::isPassword).count();\n+        long passwords = mapping.getItems().stream().filter(Item::isPassword).count();\n         if (passwords > 1) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"One password mapping is allowed at most\")).\n                     addPropertyNode(\"password.size\").addConstraintViolation();\n             isValid = false;\n         }\n \n-        return isValid && isValid(mapping.getItems(), context);\n+        return isValid && areItemsValid(mapping, context);\n     }\n \n     @Override\n@@ -83,12 +96,12 @@ public boolean isValid(final ExternalResource resource, final ConstraintValidato\n             return false;\n         }\n \n-        final Set<AnyType> anyTypes = new HashSet<>();\n-        final Set<String> objectClasses = new HashSet<>();\n+        Set<String> anyTypes = new HashSet<>();\n+        Set<String> objectClasses = new HashSet<>();\n         boolean validMappings = resource.getProvisions().stream().allMatch(provision -> {\n             anyTypes.add(provision.getAnyType());\n             if (provision.getObjectClass() != null) {\n-                objectClasses.add(provision.getObjectClass().getObjectClassValue());\n+                objectClasses.add(provision.getObjectClass());\n             }\n             return isValid(provision.getMapping(), context);\n         });"},{"sha":"1da1bc45b71263286eb30d81c38b0326cc51b3b1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,9 +29,11 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n+import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n @SpringJUnitConfig(classes = { PersistenceTestContext.class })\n+@DirtiesContext\n public abstract class AbstractTest {\n \n     @Autowired"},{"sha":"7e5442518a6b4188887daceb346cbff34b275f6f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyConnectorManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorManager.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorManager;\n "},{"sha":"0bf3d16880a31d96c6b0f41697205fd2393d06e6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AttrRepoTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAttrRepoTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAttrRepoTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAttrRepoTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -32,10 +32,10 @@\n import org.apache.syncope.common.lib.attr.LDAPAttrRepoConf;\n import org.apache.syncope.common.lib.attr.StubAttrRepoConf;\n import org.apache.syncope.common.lib.attr.SyncopeAttrRepoConf;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AttrRepoState;\n import org.apache.syncope.core.persistence.api.dao.AttrRepoDAO;\n import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n-import org.apache.syncope.core.persistence.api.entity.am.AttrRepoItem;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -219,19 +219,19 @@ private void saveAttrRepo(final String key, final AttrRepoConf conf) {\n         attrRepo.setState(AttrRepoState.ACTIVE);\n         attrRepo.setConf(conf);\n \n-        AttrRepoItem keyMapping = entityFactory.newEntity(AttrRepoItem.class);\n+        Item keyMapping = new Item();\n         keyMapping.setIntAttrName(\"uid\");\n         keyMapping.setExtAttrName(\"username\");\n-        keyMapping.setAttrRepo(attrRepo);\n-        attrRepo.add(keyMapping);\n+        attrRepo.getItems().add(keyMapping);\n \n-        AttrRepoItem fullnameMapping = entityFactory.newEntity(AttrRepoItem.class);\n+        Item fullnameMapping = new Item();\n         fullnameMapping.setIntAttrName(\"cn\");\n         fullnameMapping.setExtAttrName(\"fullname\");\n-        fullnameMapping.setAttrRepo(attrRepo);\n-        attrRepo.add(fullnameMapping);\n+        attrRepo.getItems().add(fullnameMapping);\n \n         attrRepo = attrRepoDAO.save(attrRepo);\n+        entityManager().flush();\n+\n         assertNotNull(attrRepo);\n         assertNotNull(attrRepo.getKey());\n         assertEquals(attrRepo, attrRepoDAO.find(attrRepo.getKey()));"},{"sha":"fc8299fd192d968ab4870810b1087c5e494106f8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthModuleTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -39,10 +39,10 @@\n import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AuthModuleState;\n import org.apache.syncope.core.persistence.api.dao.AuthModuleDAO;\n import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.am.AuthModuleItem;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -245,7 +245,7 @@ public void saveWithSimpleMfaModule() {\n         conf.setTimeToKillInSeconds(120);\n         saveAuthModule(\"SimpleMfaAuthModuleConf\", conf);\n     }\n-    \n+\n     @Test\n     public void saveWithU2FModule() {\n         U2FAuthModuleConf conf = new U2FAuthModuleConf();\n@@ -438,19 +438,19 @@ private void saveAuthModule(final String key, final AuthModuleConf conf) {\n         module.setState(AuthModuleState.ACTIVE);\n         module.setConf(conf);\n \n-        AuthModuleItem keyMapping = entityFactory.newEntity(AuthModuleItem.class);\n+        Item keyMapping = new Item();\n         keyMapping.setIntAttrName(\"uid\");\n         keyMapping.setExtAttrName(\"username\");\n-        keyMapping.setAuthModule(module);\n-        module.add(keyMapping);\n+        module.getItems().add(keyMapping);\n \n-        AuthModuleItem fullnameMapping = entityFactory.newEntity(AuthModuleItem.class);\n+        Item fullnameMapping = new Item();\n         fullnameMapping.setIntAttrName(\"cn\");\n         fullnameMapping.setExtAttrName(\"fullname\");\n-        fullnameMapping.setAuthModule(module);\n-        module.add(fullnameMapping);\n+        module.getItems().add(fullnameMapping);\n \n         module = authModuleDAO.save(module);\n+        entityManager().flush();\n+\n         assertNotNull(module);\n         assertNotNull(module.getKey());\n         assertEquals(module, authModuleDAO.find(module.getKey()));"},{"sha":"6fa39397fb25ec2d3b13614d0b40788e1dde1f4f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -90,7 +90,7 @@ public void findByKey() {\n         PullPolicy pullPolicy = policyDAO.find(\"880f8553-069b-4aed-9930-2cd53873f544\");\n         assertNotNull(pullPolicy);\n \n-        PullCorrelationRuleEntity pullCR = pullPolicy.getCorrelationRule(anyTypeDAO.findUser()).orElse(null);\n+        PullCorrelationRuleEntity pullCR = pullPolicy.getCorrelationRule(anyTypeDAO.findUser().getKey()).orElse(null);\n         assertNotNull(pullCR);\n         DefaultPullCorrelationRuleConf pullCRConf =\n                 POJOHelper.deserialize(pullCR.getImplementation().getBody(), DefaultPullCorrelationRuleConf.class);\n@@ -102,7 +102,7 @@ public void findByKey() {\n         PushPolicy pushPolicy = policyDAO.find(\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\");\n         assertNotNull(pushPolicy);\n \n-        PushCorrelationRuleEntity pushCR = pushPolicy.getCorrelationRule(anyTypeDAO.findUser()).orElse(null);\n+        PushCorrelationRuleEntity pushCR = pushPolicy.getCorrelationRule(anyTypeDAO.findUser().getKey()).orElse(null);\n         assertNotNull(pushCR);\n         DefaultPushCorrelationRuleConf pushCRConf =\n                 POJOHelper.deserialize(pushCR.getImplementation().getBody(), DefaultPushCorrelationRuleConf.class);\n@@ -214,9 +214,9 @@ public void createPull() {\n \n         assertNotNull(pullPolicy);\n         assertEquals(pullURuleName,\n-                pullPolicy.getCorrelationRule(anyTypeDAO.findUser()).get().getImplementation().getKey());\n+                pullPolicy.getCorrelationRule(anyTypeDAO.findUser().getKey()).get().getImplementation().getKey());\n         assertEquals(pullGRuleName,\n-                pullPolicy.getCorrelationRule(anyTypeDAO.findGroup()).get().getImplementation().getKey());\n+                pullPolicy.getCorrelationRule(anyTypeDAO.findGroup().getKey()).get().getImplementation().getKey());\n     }\n \n     @Test\n@@ -258,9 +258,9 @@ public void createPush() {\n \n         assertNotNull(pushPolicy);\n         assertEquals(pushURuleName,\n-                pushPolicy.getCorrelationRule(anyTypeDAO.findUser()).get().getImplementation().getKey());\n+                pushPolicy.getCorrelationRule(anyTypeDAO.findUser().getKey()).get().getImplementation().getKey());\n         assertEquals(pushGRuleName,\n-                pushPolicy.getCorrelationRule(anyTypeDAO.findGroup()).get().getImplementation().getKey());\n+                pushPolicy.getCorrelationRule(anyTypeDAO.findGroup().getKey()).get().getImplementation().getKey());\n     }\n \n     @Test"},{"sha":"8a9677e4edd380e563a0d090d242e83f2af1e563","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":56,"deletions":69,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,17 +29,17 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n@@ -71,11 +71,11 @@ public void findById() {\n         assertEquals(\"net.tirasa.connid.bundles.soap.WebServiceConnector\", connector.getConnectorName());\n         assertEquals(\"net.tirasa.connid.bundles.soap\", connector.getBundleName());\n \n-        Mapping mapping = resource.getProvision(anyTypeDAO.findUser()).get().getMapping();\n+        Mapping mapping = resource.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping();\n         assertFalse(mapping.getItems().isEmpty());\n \n         assertTrue(mapping.getItems().stream().\n-                anyMatch(item -> \"7f55b09c-b573-41dc-a9eb-ccd80bd3ea7a\".equals(item.getKey())));\n+                anyMatch(item -> \"email\".equals(item.getExtAttrName()) && \"email\".equals(item.getIntAttrName())));\n \n         try {\n             resourceDAO.authFind(\"ws-target-resource-1\");\n@@ -117,7 +117,7 @@ public void findAll() {\n     public void getConnObjectKey() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n         assertNotNull(resource);\n-        assertEquals(\"fullname\", resource.getProvision(anyTypeDAO.findUser()).get().\n+        assertEquals(\"fullname\", resource.getProvision(anyTypeDAO.findUser().getKey()).get().\n                 getMapping().getConnObjectKeyItem().get().getIntAttrName());\n     }\n \n@@ -127,17 +127,15 @@ public void save() {\n         resource.setKey(\"ws-target-resource-basic-save\");\n         resource.setPropagationPriority(2);\n \n-        Provision provision = entityFactory.newEntity(Provision.class);\n-        provision.setAnyType(anyTypeDAO.findUser());\n-        provision.setObjectClass(ObjectClass.ACCOUNT);\n-        provision.setResource(resource);\n-        resource.add(provision);\n+        Provision provision = new Provision();\n+        provision.setAnyType(anyTypeDAO.findUser().getKey());\n+        provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+        resource.getProvisions().add(provision);\n \n-        Mapping mapping = entityFactory.newEntity(Mapping.class);\n-        mapping.setProvision(provision);\n+        Mapping mapping = new Mapping();\n         provision.setMapping(mapping);\n \n-        MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n+        Item connObjectKey = new Item();\n         connObjectKey.setExtAttrName(\"username\");\n         connObjectKey.setIntAttrName(\"fullname\");\n         connObjectKey.setPurpose(MappingPurpose.BOTH);\n@@ -148,11 +146,11 @@ public void save() {\n \n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n-\n+        entityManager().flush();\n         assertNotNull(actual);\n         assertNotNull(actual.getConnector());\n-        assertNotNull(actual.getProvision(anyTypeDAO.findUser()).get().getMapping());\n-        assertFalse(actual.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().isEmpty());\n+        assertNotNull(actual.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping());\n+        assertFalse(actual.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().isEmpty());\n         assertEquals(Integer.valueOf(2), actual.getPropagationPriority());\n     }\n \n@@ -165,17 +163,15 @@ public void saveInvalidMappingIntAttr() {\n             ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n             resource.setConnector(connector);\n \n-            Provision provision = entityFactory.newEntity(Provision.class);\n-            provision.setAnyType(anyTypeDAO.findUser());\n-            provision.setObjectClass(ObjectClass.ACCOUNT);\n-            provision.setResource(resource);\n-            resource.add(provision);\n+            Provision provision = new Provision();\n+            provision.setAnyType(anyTypeDAO.findUser().getKey());\n+            provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+            resource.getProvisions().add(provision);\n \n-            Mapping mapping = entityFactory.newEntity(Mapping.class);\n-            mapping.setProvision(provision);\n+            Mapping mapping = new Mapping();\n             provision.setMapping(mapping);\n \n-            MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n+            Item connObjectKey = new Item();\n             connObjectKey.setConnObjectKey(true);\n             mapping.add(connObjectKey);\n \n@@ -193,22 +189,20 @@ public void saveInvalidMappingExtAttr() {\n             ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n             resource.setConnector(connector);\n \n-            Provision provision = entityFactory.newEntity(Provision.class);\n-            provision.setAnyType(anyTypeDAO.findUser());\n-            provision.setObjectClass(ObjectClass.ACCOUNT);\n-            provision.setResource(resource);\n-            resource.add(provision);\n+            Provision provision = new Provision();\n+            provision.setAnyType(anyTypeDAO.findUser().getKey());\n+            provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+            resource.getProvisions().add(provision);\n \n-            Mapping mapping = entityFactory.newEntity(Mapping.class);\n-            mapping.setProvision(provision);\n+            Mapping mapping = new Mapping();\n             provision.setMapping(mapping);\n \n-            MappingItem item = entityFactory.newEntity(MappingItem.class);\n+            Item item = new Item();\n             item.setConnObjectKey(true);\n             item.setIntAttrName(\"fullname\");\n             mapping.add(item);\n \n-            item = entityFactory.newEntity(MappingItem.class);\n+            item = new Item();\n             item.setIntAttrName(\"userId\");\n             mapping.add(item);\n \n@@ -222,27 +216,24 @@ public void saveInvalidProvision() {\n             ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n             resource.setKey(\"invalidProvision\");\n \n-            Provision provision = entityFactory.newEntity(Provision.class);\n-            provision.setAnyType(anyTypeDAO.findUser());\n-            provision.setObjectClass(ObjectClass.ACCOUNT);\n-            provision.setResource(resource);\n-            resource.add(provision);\n+            Provision provision = new Provision();\n+            provision.setAnyType(anyTypeDAO.findUser().getKey());\n+            provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+            resource.getProvisions().add(provision);\n \n-            Mapping mapping = entityFactory.newEntity(Mapping.class);\n-            mapping.setProvision(provision);\n+            Mapping mapping = new Mapping();\n             provision.setMapping(mapping);\n \n-            MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n+            Item connObjectKey = new Item();\n             connObjectKey.setExtAttrName(\"username\");\n             connObjectKey.setIntAttrName(\"fullname\");\n             connObjectKey.setPurpose(MappingPurpose.BOTH);\n             mapping.setConnObjectKeyItem(connObjectKey);\n \n-            provision = entityFactory.newEntity(Provision.class);\n-            provision.setAnyType(anyTypeDAO.findGroup());\n-            provision.setObjectClass(ObjectClass.ACCOUNT);\n-            provision.setResource(resource);\n-            resource.add(provision);\n+            provision = new Provision();\n+            provision.setAnyType(anyTypeDAO.findGroup().getKey());\n+            provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+            resource.getProvisions().add(provision);\n \n             ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n             resource.setConnector(connector);\n@@ -258,27 +249,24 @@ public void saveVirtualMapping() {\n         resource.setKey(\"ws-target-resource-virtual-mapping\");\n         resource.setPropagationPriority(2);\n \n-        Provision provision = entityFactory.newEntity(Provision.class);\n-        provision.setAnyType(anyTypeDAO.findUser());\n-        provision.setObjectClass(ObjectClass.ACCOUNT);\n-        provision.setResource(resource);\n-        resource.add(provision);\n+        Provision provision = new Provision();\n+        provision.setAnyType(anyTypeDAO.findUser().getKey());\n+        provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+        resource.getProvisions().add(provision);\n \n-        Mapping mapping = entityFactory.newEntity(Mapping.class);\n-        mapping.setProvision(provision);\n+        Mapping mapping = new Mapping();\n         provision.setMapping(mapping);\n \n-        MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n+        Item connObjectKey = new Item();\n         connObjectKey.setExtAttrName(\"username\");\n         connObjectKey.setIntAttrName(\"fullname\");\n         connObjectKey.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(connObjectKey);\n \n-        MappingItem virtualMapItem = entityFactory.newEntity(MappingItem.class);\n+        Item virtualMapItem = new Item();\n         virtualMapItem.setIntAttrName(\"virtualReadOnly\");\n         virtualMapItem.setExtAttrName(\"TEST\");\n         virtualMapItem.setPurpose(MappingPurpose.PROPAGATION);\n-        virtualMapItem.setMapping(mapping);\n         mapping.add(virtualMapItem);\n \n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n@@ -295,39 +283,38 @@ public void saveWithGroupMappingType() {\n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n         resource.setConnector(connector);\n \n-        Provision provision = entityFactory.newEntity(Provision.class);\n-        provision.setAnyType(anyTypeDAO.findUser());\n-        provision.setObjectClass(ObjectClass.ACCOUNT);\n-        provision.setResource(resource);\n-        resource.add(provision);\n+        Provision provision = new Provision();\n+        provision.setAnyType(anyTypeDAO.findUser().getKey());\n+        provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+        resource.getProvisions().add(provision);\n \n-        Mapping mapping = entityFactory.newEntity(Mapping.class);\n-        mapping.setProvision(provision);\n+        Mapping mapping = new Mapping();\n         provision.setMapping(mapping);\n \n-        MappingItem item = entityFactory.newEntity(MappingItem.class);\n+        Item item = new Item();\n         item.setIntAttrName(\"fullname\");\n         item.setExtAttrName(\"fullname\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = entityFactory.newEntity(MappingItem.class);\n+        item = new Item();\n         item.setIntAttrName(\"icon\");\n         item.setExtAttrName(\"icon\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n \n-        item = entityFactory.newEntity(MappingItem.class);\n+        item = new Item();\n         item.setIntAttrName(\"mderiveddata\");\n         item.setExtAttrName(\"mderiveddata\");\n         item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.add(item);\n \n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n+        entityManager().flush();\n         assertNotNull(actual);\n \n-        assertEquals(3, actual.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());\n+        assertEquals(3, actual.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size());\n     }\n \n     @Test"},{"sha":"238a3fd3704217afc4464ee245bd0201e4895bb9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.user.User;"},{"sha":"97ed8059f974fa9547356bc646b2320d38aebafa","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -27,13 +27,11 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -47,6 +45,9 @@ public class VirSchemaTest extends AbstractTest {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Test\n     public void findAll() {\n         List<VirSchema> list = virSchemaDAO.findAll();\n@@ -67,13 +68,10 @@ public void findByName() {\n \n     @Test\n     public void save() {\n-        ExternalResource csv = resourceDAO.find(\"resource-csv\");\n-        Provision provision = csv.getProvision(ObjectClass.ACCOUNT).get();\n-        assertNotNull(provision);\n-\n         VirSchema virSchema = entityFactory.newEntity(VirSchema.class);\n         virSchema.setKey(\"virtual\");\n-        virSchema.setProvision(provision);\n+        virSchema.setResource(resourceDAO.find(\"resource-csv\"));\n+        virSchema.setAnyType(anyTypeDAO.findUser());\n         virSchema.setReadonly(true);\n         virSchema.setExtAttrName(\"EXT_ATTR\");\n "},{"sha":"6aa317109bcfdd852286b6e6d82212f4aa8b8c58","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConnInstanceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"c9c1c7d159f2e54d0230f5eb2b214d349e48eeaf","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -155,12 +155,16 @@ public void createWithInternationalCharacters() {\n \n     @Test\n     public void delete() {\n+        Collection<Group> groups = userDAO.findAllGroups(userDAO.findByUsername(\"verdi\"));\n+        assertTrue(groups.stream().anyMatch(g -> \"b1f7c12d-ec83-441f-a50e-1691daaedf3b\".equals(g.getKey())));\n+        int before = userDAO.findAllGroups(userDAO.findByUsername(\"verdi\")).size();\n+\n         groupDAO.delete(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\");\n \n         entityManager().flush();\n \n         assertNull(groupDAO.find(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\"));\n-        assertEquals(userDAO.findAllGroups(userDAO.findByUsername(\"verdi\")).size(), 2);\n+        assertEquals(before - 1, userDAO.findAllGroups(userDAO.findByUsername(\"verdi\")).size());\n         assertNull(findPlainAttr(\"f82fc61f-8e74-4a4b-9f9e-b8a41f38aad9\", GPlainAttr.class));\n         assertNull(findPlainAttrValue(\"49f35879-2510-4f11-a901-24152f753538\", GPlainAttrValue.class));\n         assertNotNull(plainSchemaDAO.find(\"icon\"));\n@@ -234,8 +238,7 @@ public void udynMembership() {\n         // 3. verify that expected users have the created group dynamically assigned\n         List<String> members = groupDAO.findUDynMembers(actual);\n         assertEquals(2, members.size());\n-        assertEquals(Set.of(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", newUserKey),\n-                new HashSet<>(members));\n+        assertEquals(Set.of(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", newUserKey), new HashSet<>(members));\n \n         user = userDAO.findByUsername(\"bellini\");\n         assertNotNull(user);"},{"sha":"c107d590935819d5285fbec506ba0278b1ff8590","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -28,10 +28,12 @@\n import java.util.List;\n import java.util.UUID;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import javax.persistence.EntityExistsException;\n-import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -40,11 +42,9 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.persistence.jpa.entity.JPASchemaLabel;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.junit.jupiter.api.AfterAll;\n@@ -76,7 +76,8 @@ public class PlainSchemaTest extends AbstractTest {\n \n     @BeforeAll\n     public static void setAuthContext() {\n-        List<GrantedAuthority> authorities = IdRepoEntitlement.values().stream().\n+        List<GrantedAuthority> authorities = Stream.concat(\n+                IdRepoEntitlement.values().stream(), IdMEntitlement.values().stream()).\n                 map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n                 collect(Collectors.toList());\n \n@@ -109,20 +110,20 @@ public void checkIdUniqueness() {\n         }\n     }\n \n-    private List<MappingItem> getMappingItems(final String intAttrName) {\n-        TypedQuery<MappingItem> mapItemsQuery = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAMappingItem.class.getSimpleName() + \" e WHERE e.intAttrName=:intAttrName\",\n-                MappingItem.class);\n-        mapItemsQuery.setParameter(\"intAttrName\", intAttrName);\n-        return mapItemsQuery.getResultList();\n+    private List<Item> getMappingItems(final String intAttrName) {\n+        return resourceDAO.findAll().stream().\n+                flatMap(resource -> resource.getProvisions().stream()).\n+                flatMap(provision -> provision.getMapping().getItems().stream()).\n+                filter(item -> intAttrName.equals(item.getIntAttrName())).\n+                collect(Collectors.toList());\n     }\n \n     @Test\n     public void deleteFullname() {\n         // fullname is mapped as ConnObjectKey for ws-target-resource-2, need to swap it otherwise validation errors \n         // will be raised\n         resourceDAO.find(\"ws-target-resource-2\").\n-                getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().\n+                getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().\n                 forEach(item -> {\n                     if (\"fullname\".equals(item.getIntAttrName())) {\n                         item.setConnObjectKey(false);\n@@ -136,7 +137,7 @@ public void deleteFullname() {\n         assertNotNull(schema);\n \n         // check for associated mappings\n-        List<MappingItem> mapItems = getMappingItems(\"fullname\");\n+        List<Item> mapItems = getMappingItems(\"fullname\");\n         assertFalse(mapItems.isEmpty());\n \n         // delete user schema fullname\n@@ -148,8 +149,6 @@ public void deleteFullname() {\n         schema = plainSchemaDAO.find(\"fullname\");\n         assertNull(schema);\n \n-        plainSchemaDAO.clear();\n-\n         // check for mappings deletion\n         mapItems = getMappingItems(\"fullname\");\n         assertTrue(mapItems.isEmpty());\n@@ -167,7 +166,7 @@ public void deleteSurname() {\n         assertNotNull(schema);\n \n         // check for associated mappings\n-        List<MappingItem> mapItems = getMappingItems(\"surname\");\n+        List<Item> mapItems = getMappingItems(\"surname\");\n         assertFalse(mapItems.isEmpty());\n \n         // check for labels\n@@ -193,12 +192,12 @@ public void deleteSurname() {\n     @Test\n     public void deleteFirstname() {\n         int pre = resourceDAO.find(\"resource-db-pull\").\n-                getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size();\n+                getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size();\n \n         plainSchemaDAO.delete(\"firstname\");\n         assertNull(plainSchemaDAO.find(\"firstname\"));\n \n         assertEquals(pre - 1, resourceDAO.find(\"resource-db-pull\").\n-                getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());\n+                getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size());\n     }\n }"},{"sha":"728a70f1a980d05b52b7bf0f02ef46e982519b53","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":22,"deletions":76,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -27,6 +27,9 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -35,18 +38,12 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -73,9 +70,6 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n     @Test\n     public void createWithPasswordPolicy() {\n         final String resourceName = \"resourceWithPasswordPolicy\";\n@@ -113,46 +107,42 @@ public void save() {\n \n         resource.setConnector(connector);\n \n-        Provision provision = entityFactory.newEntity(Provision.class);\n-        provision.setAnyType(anyTypeDAO.findUser());\n-        provision.setObjectClass(ObjectClass.ACCOUNT);\n-        provision.setResource(resource);\n-        resource.add(provision);\n+        Provision provision = new Provision();\n+        provision.setAnyType(anyTypeDAO.findUser().getKey());\n+        provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+        resource.getProvisions().add(provision);\n \n-        Mapping mapping = entityFactory.newEntity(Mapping.class);\n-        mapping.setProvision(provision);\n+        Mapping mapping = new Mapping();\n         provision.setMapping(mapping);\n \n         // specify mappings\n         for (int i = 0; i < 3; i++) {\n-            MappingItem item = entityFactory.newEntity(MappingItem.class);\n+            Item item = new Item();\n             item.setExtAttrName(\"test\" + i);\n             item.setIntAttrName(\"nonexistent\" + i);\n             item.setMandatoryCondition(\"false\");\n             item.setPurpose(MappingPurpose.PULL);\n             mapping.add(item);\n-            item.setMapping(mapping);\n         }\n-        MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n+        Item connObjectKey = new Item();\n         connObjectKey.setExtAttrName(\"username\");\n         connObjectKey.setIntAttrName(\"username\");\n         connObjectKey.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.setConnObjectKeyItem(connObjectKey);\n-        connObjectKey.setMapping(mapping);\n \n         // map a derived attribute\n-        MappingItem derived = entityFactory.newEntity(MappingItem.class);\n+        Item derived = new Item();\n         derived.setConnObjectKey(false);\n         derived.setExtAttrName(\"fullname\");\n         derived.setIntAttrName(\"cn\");\n         derived.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.add(derived);\n-        derived.setMapping(mapping);\n \n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n+        entityManager().flush();\n         assertNotNull(actual);\n-        assertNotNull(actual.getProvision(anyTypeDAO.findUser()).get().getMapping());\n+        assertNotNull(actual.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping());\n \n         entityManager().flush();\n         resourceDAO.detach(actual);\n@@ -180,7 +170,8 @@ public void save() {\n         assertTrue(resource.getConnector().equals(connector));\n \n         // check mappings\n-        List<? extends MappingItem> items = resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems();\n+        List<Item> items = resource.getProvision(\n+                anyTypeDAO.findUser().getKey()).get().getMapping().getItems();\n         assertNotNull(items);\n         assertEquals(5, items.size());\n \n@@ -244,71 +235,26 @@ public void delete() {\n         propagationTasks.forEach(task -> assertNull(taskDAO.find(task.getKey())));\n     }\n \n-    @Test\n-    public void emptyMapping() {\n-        ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n-        assertNotNull(ldap);\n-        assertNotNull(ldap.getProvision(anyTypeDAO.findUser()).get().getMapping());\n-        assertNotNull(ldap.getProvision(anyTypeDAO.findGroup()).get().getMapping());\n-\n-        // need to avoid any class not defined in this Maven module\n-        ldap.getPropagationActions().clear();\n-\n-        List<? extends MappingItem> items = ldap.getProvision(anyTypeDAO.findGroup()).get().getMapping().getItems();\n-        assertNotNull(items);\n-        assertFalse(items.isEmpty());\n-        List<String> itemKeys = items.stream().map(MappingItem::getKey).collect(Collectors.toList());\n-\n-        Provision groupProvision = ldap.getProvision(anyTypeDAO.findGroup()).get();\n-        virSchemaDAO.findByProvision(groupProvision).\n-                forEach(schema -> virSchemaDAO.delete(schema.getKey()));\n-        ldap.getProvisions().remove(groupProvision);\n-\n-        resourceDAO.save(ldap);\n-        entityManager().flush();\n-\n-        itemKeys.forEach(itemKey -> assertNull(entityManager().find(JPAMappingItem.class, itemKey)));\n-    }\n-\n-    @Test\n-    public void updateRemoveOrgUnit() {\n-        ExternalResource resource = resourceDAO.find(\"resource-ldap-orgunit\");\n-        assertNotNull(resource);\n-        assertNotNull(resource.getOrgUnit());\n-\n-        String orgUnitKey = resource.getOrgUnit().getKey();\n-        assertNotNull(entityManager().find(JPAOrgUnit.class, orgUnitKey));\n-\n-        resource.getOrgUnit().setResource(null);\n-        resource.setOrgUnit(null);\n-\n-        resourceDAO.save(resource);\n-        entityManager().flush();\n-\n-        resource = resourceDAO.find(\"resource-ldap-orgunit\");\n-        assertNull(resource.getOrgUnit());\n-\n-        assertNull(entityManager().find(JPAOrgUnit.class, orgUnitKey));\n-    }\n-\n     @Test\n     public void issue243() {\n         ExternalResource csv = resourceDAO.find(\"resource-csv\");\n         assertNotNull(csv);\n \n-        int origMapItems = csv.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size();\n+        int origMapItems = csv.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size();\n \n-        MappingItem newMapItem = entityFactory.newEntity(MappingItem.class);\n+        Item newMapItem = new Item();\n         newMapItem.setIntAttrName(\"TEST\");\n         newMapItem.setExtAttrName(\"TEST\");\n         newMapItem.setPurpose(MappingPurpose.PROPAGATION);\n-        csv.getProvision(anyTypeDAO.findUser()).get().getMapping().add(newMapItem);\n+        csv.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().add(newMapItem);\n \n         resourceDAO.save(csv);\n         entityManager().flush();\n \n         csv = resourceDAO.find(\"resource-csv\");\n         assertNotNull(csv);\n-        assertEquals(origMapItems + 1, csv.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());\n+        assertEquals(\n+                origMapItems + 1,\n+                csv.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size());\n     }\n }"},{"sha":"402860d27b403d6021d26bf24cf31d28bd43611f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,7 +26,6 @@\n import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -143,9 +142,7 @@ public void dynMembership() {\n         // 3. verify that expected users have the created role dynamically assigned\n         List<String> members = roleDAO.findDynMembers(actual);\n         assertEquals(2, members.size());\n-        assertEquals(\n-                Set.of(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", newUserKey),\n-                new HashSet<>(members));\n+        assertEquals(Set.of(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", newUserKey), new HashSet<>(members));\n \n         user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n         assertNotNull(user);\n@@ -227,7 +224,7 @@ public void deleteCascadeOnDelegations() {\n \n         delegation = delegationDAO.find(delegation.getKey());\n \n-        assertEquals(Collections.singletonList(delegation), delegationDAO.findByRole(reviewer));\n+        assertEquals(List.of(delegation), delegationDAO.findByRole(reviewer));\n \n         roleDAO.delete(reviewer.getKey());\n "},{"sha":"c3d7218f389e5e0f12a3945c850226f8f61fb096","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -47,8 +47,8 @@\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;"},{"sha":"8f5c75a8f5de4c325614dc9a3cf21398e4f23999","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -119,9 +119,7 @@ public void ships() {\n         User user = userDAO.findByUsername(\"bellini\");\n         assertNotNull(user);\n         assertEquals(1, user.getMemberships().size());\n-        assertEquals(\n-                \"bf825fe1-7320-4a54-bd64-143b5c18ab97\",\n-                user.getMemberships().get(0).getRightEnd().getKey());\n+        assertEquals(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\", user.getMemberships().get(0).getRightEnd().getKey());\n \n         user.remove(user.getMemberships().get(0));\n \n@@ -158,9 +156,7 @@ public void ships() {\n \n         user = userDAO.findByUsername(\"bellini\");\n         assertEquals(1, user.getRelationships().size());\n-        assertEquals(\n-                \"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\",\n-                user.getRelationships().get(0).getRightEnd().getKey());\n+        assertEquals(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\", user.getRelationships().get(0).getRightEnd().getKey());\n     }\n \n     @Test\n@@ -244,6 +240,7 @@ private LinkedAccount newLinkedAccount(final String connObjectKeyValue) {\n         User user = userDAO.findByUsername(\"vivaldi\");\n         user.getLinkedAccounts().stream().filter(Objects::nonNull).forEach(account -> account.setOwner(null));\n         user.getLinkedAccounts().clear();\n+        entityManager().flush();\n \n         LinkedAccount account = entityFactory.newEntity(LinkedAccount.class);\n         account.setOwner(user);"},{"sha":"7fab7be0c319d1fb749d9a868c1121143e272ff0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/VirSchemaTest.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,12 +23,12 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -48,15 +48,17 @@ public class VirSchemaTest extends AbstractTest {\n \n     @Test\n     public void deal() {\n-        Provision provision = resourceDAO.find(\"ws-target-resource-1\").getProvision(anyTypeDAO.findUser()).get();\n-        assertNotNull(provision);\n-        assertTrue(virSchemaDAO.findByProvision(provision).isEmpty());\n+        ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertNotNull(resource);\n+        assertTrue(virSchemaDAO.find(resource).isEmpty());\n+        assertTrue(virSchemaDAO.find(resource.getKey(), anyTypeDAO.findUser().getKey()).isEmpty());\n \n         VirSchema virSchema = entityFactory.newEntity(VirSchema.class);\n         virSchema.setKey(\"vSchema\");\n         virSchema.setReadonly(true);\n         virSchema.setExtAttrName(\"EXT_ATTR\");\n-        virSchema.setProvision(provision);\n+        virSchema.setResource(resource);\n+        virSchema.setAnyType(anyTypeDAO.findUser());\n \n         virSchemaDAO.save(virSchema);\n         entityManager().flush();\n@@ -66,12 +68,13 @@ public void deal() {\n         assertTrue(virSchema.isReadonly());\n         assertEquals(\"EXT_ATTR\", virSchema.getExtAttrName());\n \n-        provision = resourceDAO.find(\"ws-target-resource-1\").getProvision(anyTypeDAO.findUser()).get();\n-        assertNotNull(provision);\n-        assertFalse(virSchemaDAO.findByProvision(provision).isEmpty());\n-        assertTrue(virSchemaDAO.findByProvision(provision).contains(virSchema));\n+        assertFalse(virSchemaDAO.find(resource).isEmpty());\n+        assertTrue(virSchemaDAO.find(resource).contains(virSchema.getKey()));\n \n-        MappingItem item = virSchema.asLinkingMappingItem();\n+        assertFalse(virSchemaDAO.find(resource.getKey(), anyTypeDAO.findUser().getKey()).isEmpty());\n+        assertTrue(virSchemaDAO.find(resource.getKey(), anyTypeDAO.findUser().getKey()).contains(virSchema));\n+\n+        Item item = virSchema.asLinkingMappingItem();\n         assertNotNull(item);\n         assertEquals(virSchema.getKey(), item.getIntAttrName());\n     }"},{"sha":"5d4325c9bbc22675ba116b1e1568eb632a7b15c7","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":73,"deletions":403,"changes":476,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=e702a667035b32585f45ed72cee5dc68a515219d"},{"sha":"68ac4bda91ade975350e9a9b5e018641daeea6d4","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -99,10 +99,7 @@ we are happy to inform you that the password request was successfully executed f\n                 location=\"${connid.location}\"\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" \n-                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"truemaintainLdapGroupMembership\"]}]'/>\n-  <ConnInstance_capabilities connInstance_id=\"b7ea96c3-c633-488b-98a0-b52ac35850f7\" capability=\"CREATE\"/>\n-  <ConnInstance_capabilities connInstance_id=\"b7ea96c3-c633-488b-98a0-b52ac35850f7\" capability=\"UPDATE\"/>\n-  <ConnInstance_capabilities connInstance_id=\"b7ea96c3-c633-488b-98a0-b52ac35850f7\" capability=\"DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"b7ea96c3-c633-488b-98a0-b52ac35850f7\" capability=\"SEARCH\"/>\n+                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"truemaintainLdapGroupMembership\"]}]'\n+                capabilities='[\"CREATE\",\"UPDATE\",\"DELETE\",\"SEARCH\"]'/>\n   \n </dataset>"},{"sha":"080bb41afe78d83de04af41bf33c8c9ae4ebf307","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorManager.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n \n /**\n  * Entry point for creating and destroying connectors for external resources."},{"sha":"e25d893136319d60ebf0a3f492a0f5b550ace60e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":19,"deletions":6,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,14 +23,15 @@\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -41,10 +42,11 @@ public interface MappingManager {\n      * Get connObjectKey internal value.\n      *\n      * @param any any object\n+     * @param resource resource information\n      * @param provision provision information\n      * @return connObjectKey internal value\n      */\n-    Optional<String> getConnObjectKeyValue(Any<?> any, Provision provision);\n+    Optional<String> getConnObjectKeyValue(Any<?> any, ExternalResource resource, Provision provision);\n \n     /**\n      * Get connObjectKey internal value.\n@@ -58,6 +60,7 @@ public interface MappingManager {\n     /**\n      * Get attribute values for the given {@link Item} and any object.\n      *\n+     * @param resource resource information\n      * @param provision provision information\n      * @param mapItem mapping item\n      * @param intAttrName int attr name\n@@ -68,6 +71,7 @@ public interface MappingManager {\n      * @return attribute values and their type\n      */\n     Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n+            ExternalResource resource,\n             Provision provision,\n             Item mapItem,\n             IntAttrName intAttrName,\n@@ -79,6 +83,7 @@ Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n     /**\n      * Prepare attribute for sending to a connector instance.\n      *\n+     * @param resource resource information\n      * @param provision provision information\n      * @param item mapping item\n      * @param any given any object\n@@ -89,8 +94,10 @@ Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n      * @return connObjectLink (if it is the case) + prepared attribute\n      */\n     Pair<String, Attribute> prepareAttr(\n+            ExternalResource resource,\n             Provision provision,\n-            Item item, Any<?> any,\n+            Item item,\n+            Any<?> any,\n             String password,\n             AccountGetter usernameAccountGetter,\n             AccountGetter passwordAccountGetter,\n@@ -103,11 +110,17 @@ Pair<String, Attribute> prepareAttr(\n      * @param password clear-text password\n      * @param changePwd whether password should be included for propagation attributes or not\n      * @param enable whether any object must be enabled or not\n+     * @param resource resource information\n      * @param provision provision information\n      * @return connObjectLink + prepared attributes\n      */\n     Pair<String, Set<Attribute>> prepareAttrsFromAny(\n-            Any<?> any, String password, boolean changePwd, Boolean enable, Provision provision);\n+            Any<?> any,\n+            String password,\n+            boolean changePwd,\n+            Boolean enable,\n+            ExternalResource resource,\n+            Provision provision);\n \n     /**\n      * Prepare attributes for sending to a connector instance."},{"sha":"7cbba896e09658b84b470482373366bf02525ee7","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ProvisionSorter.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisionSorter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisionSorter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisionSorter.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,9 +19,8 @@\n package org.apache.syncope.core.provisioning.api;\n \n import java.util.Comparator;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.common.lib.to.Provision;\n \n @FunctionalInterface\n public interface ProvisionSorter extends Comparator<Provision> {\n-\n }"},{"sha":"49353d5a98ce6a06dcd3b222ce84fecf2a93b2d2","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ItemTransformer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,10 +21,10 @@\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n \n /**\n  * Transforms values to be propagated to (or pulling from) external resources right before they leave (or enter)"},{"sha":"eb72ae70a62ee5805bc9cf61439d87a0b88aba22","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ResourceDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n \n public interface ResourceDataBinder {\n "},{"sha":"3077c5fe6832d3d1a0852b78915f0fa3a8f57ae1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,8 +20,8 @@\n \n import java.util.Optional;\n import java.util.Set;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.identityconnectors.framework.common.objects.ConnectorObject;"},{"sha":"98a73a6218c1d8746130c08288fcbf989b1eb963","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,13 +25,13 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n@@ -148,7 +148,7 @@ PropagationTaskInfo newTask(\n             ExternalResource resource,\n             ResourceOperation operation,\n             Provision provision,\n-            Stream<? extends Item> mappingItems,\n+            Stream<Item> mappingItems,\n             Pair<String, Set<Attribute>> preparedAttrs);\n \n     /**"},{"sha":"bebdbf8cfe114b76cbe5db872d6384bc91fd0c4d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskInfo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,7 +24,7 @@\n import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n "},{"sha":"5e3e82501a49fcae222e8f7311c35a6ca2beff46","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,10 +23,10 @@\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n@@ -262,7 +262,7 @@ default void beforeDelete(\n      * Action to be executed after each local entity pull.\n      *\n      * @param profile profile of the pull being executed.\n-     * @param delta retrieved pull information (may be modified by beforeProvision / beforeUpdate /\n+     * @param delta retrieved pull information (may be modified by beforeProvisionTO / beforeUpdate /\n      * beforeDelete)\n      * @param entity entity\n      * @param result global pull results at the current pull step\n@@ -281,7 +281,7 @@ default void after(\n      * Action to be executed in case an exception is thrown during pull.\n      *\n      * @param profile profile of the pull being executed.\n-     * @param delta retrieved pull information (may be modified by beforeProvision / beforeUpdate /\n+     * @param delta retrieved pull information (may be modified by beforeProvisionTO / beforeUpdate /\n      * beforeDelete)\n      * @param e the exception thrown\n      * @return an instance of the given exception type is that is to be thrown; {@code NULL} otherwise"},{"sha":"5290c3598e56f29a72e2bb2f24154f12dad1eec3","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopePullExecutor.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopePullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopePullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopePullExecutor.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,14 +19,13 @@\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n import org.identityconnectors.framework.common.objects.Name;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SyncToken;\n \n public interface SyncopePullExecutor {\n \n-    void setLatestSyncToken(ObjectClass objectClass, SyncToken latestSyncToken);\n+    void setLatestSyncToken(String objectClass, SyncToken latestSyncToken);\n \n-    void reportHandled(ObjectClass objectClass, Name name);\n+    void reportHandled(String objectClass, Name name);\n \n     boolean wasInterruptRequested();\n "},{"sha":"a7e0311876fd10239006ff583763193ba549f9ee","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePullExecutor.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,16 +20,18 @@\n \n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.quartz.JobExecutionException;\n \n @FunctionalInterface\n public interface SyncopeSinglePullExecutor {\n \n     List<ProvisioningReport> pull(\n+            ExternalResource resource,\n             Provision provision,\n             Connector connector,\n             ReconFilterBuilder reconFilterBuilder,"},{"sha":"2a367e3fdd40720d6f87626a3e735066cd8d6b3a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePushExecutor.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,24 +19,27 @@\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.quartz.JobExecutionException;\n \n public interface SyncopeSinglePushExecutor {\n \n     List<ProvisioningReport> push(\n+            ExternalResource resource,\n             Provision provision,\n             Connector connector,\n             Any<?> any,\n             PushTaskTO pushTaskTO,\n             String executor) throws JobExecutionException;\n \n     ProvisioningReport push(\n+            ExternalResource resource,\n             Provision provision,\n             Connector connector,\n             LinkedAccount account,"},{"sha":"fde3e6cbc807221097746b62c9187a558008d09b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/UserPushResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FUserPushResultHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n \n public interface UserPushResultHandler extends SyncopePushResultHandler {"},{"sha":"74137f77baea8ce19e216000fe2ee8d7db055e4d","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskInfoTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfoTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfoTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfoTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,7 +25,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Optional;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.provisioning.api.AbstractTest;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.identityconnectors.framework.common.objects.ConnectorObject;"},{"sha":"e1560cbb1a75bb88ef0599c8720c61efe9b4776d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultConnectorManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnectorManager.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorManager;"},{"sha":"b6d02a277801b01bed5a840e143f6a7631c6ecb0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultMappingManager.java","status":"modified","additions":69,"deletions":39,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -39,7 +39,11 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -48,6 +52,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -58,7 +63,9 @@\n import org.apache.syncope.core.persistence.api.entity.Application;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n@@ -69,12 +76,6 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.Account;\n import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n@@ -126,6 +127,8 @@ public class DefaultMappingManager implements MappingManager {\n \n     protected final ApplicationDAO applicationDAO;\n \n+    protected final ImplementationDAO implementationDAO;\n+\n     protected final DerAttrHandler derAttrHandler;\n \n     protected final VirAttrHandler virAttrHandler;\n@@ -146,6 +149,7 @@ public DefaultMappingManager(\n             final RelationshipTypeDAO relationshipTypeDAO,\n             final RealmDAO realmDAO,\n             final ApplicationDAO applicationDAO,\n+            final ImplementationDAO implementationDAO,\n             final DerAttrHandler derAttrHandler,\n             final VirAttrHandler virAttrHandler,\n             final VirAttrCache virAttrCache,\n@@ -160,6 +164,7 @@ public DefaultMappingManager(\n         this.relationshipTypeDAO = relationshipTypeDAO;\n         this.realmDAO = realmDAO;\n         this.applicationDAO = applicationDAO;\n+        this.implementationDAO = implementationDAO;\n         this.derAttrHandler = derAttrHandler;\n         this.virAttrHandler = virAttrHandler;\n         this.virAttrCache = virAttrCache;\n@@ -168,6 +173,13 @@ public DefaultMappingManager(\n         this.intAttrNameParser = intAttrNameParser;\n     }\n \n+    protected List<Implementation> getTransformers(final Item item) {\n+        return item.getTransformers().stream().\n+                map(implementationDAO::find).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n+    }\n+\n     protected String processPreparedAttr(final Pair<String, Attribute> preparedAttr, final Set<Attribute> attributes) {\n         String connObjectKey = null;\n \n@@ -233,7 +245,7 @@ protected static Name getName(final String evalConnObjectLink, final String conn\n     protected Name evaluateNAME(final Any<?> any, final Provision provision, final String connObjectKey) {\n         if (StringUtils.isBlank(connObjectKey)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n-            LOG.warn(\"Missing ConnObjectKey value for {}: \", provision.getResource());\n+            LOG.warn(\"Missing ConnObjectKey value for {}: \", any.getType().getKey());\n         }\n \n         // Evaluate connObjectKey expression\n@@ -265,7 +277,7 @@ protected Name evaluateNAME(final Any<?> any, final Provision provision, final S\n     protected Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final String connObjectKey) {\n         if (StringUtils.isBlank(connObjectKey)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n-            LOG.warn(\"Missing ConnObjectKey value for {}: \", orgUnit.getResource());\n+            LOG.warn(\"Missing ConnObjectKey value for Realms\");\n         }\n \n         // Evaluate connObjectKey expression\n@@ -287,6 +299,7 @@ public Pair<String, Set<Attribute>> prepareAttrsFromAny(\n             final String password,\n             final boolean changePwd,\n             final Boolean enable,\n+            final ExternalResource resource,\n             final Provision provision) {\n \n         LOG.debug(\"Preparing resource attributes for {} with provision {} for attributes {}\",\n@@ -301,6 +314,7 @@ public Pair<String, Set<Attribute>> prepareAttrsFromAny(\n             try {\n                 String processedConnObjectKeyValue = processPreparedAttr(\n                         prepareAttr(\n+                                resource,\n                                 provision,\n                                 mapItem,\n                                 any,\n@@ -366,6 +380,7 @@ public Set<Attribute> prepareAttrsFromLinkedAccount(\n             try {\n                 processPreparedAttr(\n                         prepareAttr(\n+                                account.getResource(),\n                                 provision,\n                                 mapItem,\n                                 user,\n@@ -475,7 +490,7 @@ public Pair<String, Set<Attribute>> prepareAttrsFromRealm(final Realm realm, fin\n             }\n         });\n \n-        Optional<? extends OrgUnitItem> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n+        Optional<Item> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n         if (connObjectKeyItem.isPresent()) {\n             Attribute connObjectKeyAttr = AttributeUtil.find(connObjectKeyItem.get().getExtAttrName(), attributes);\n             if (connObjectKeyAttr != null) {\n@@ -497,7 +512,9 @@ protected String decodePassword(final Account account) {\n         }\n     }\n \n-    protected String getPasswordAttrValue(final Provision provision, final Account account, final String defaultValue) {\n+    protected String getPasswordAttrValue(\n+            final ExternalResource resource, final Account account, final String defaultValue) {\n+\n         String passwordAttrValue;\n         if (account instanceof LinkedAccount) {\n             if (account.getPassword() != null) {\n@@ -515,15 +532,16 @@ protected String getPasswordAttrValue(final Provision provision, final Account a\n             }\n         }\n \n-        if (passwordAttrValue == null && provision.getResource().isRandomPwdIfNotProvided()) {\n-            passwordAttrValue = passwordGenerator.generate(provision.getResource());\n+        if (passwordAttrValue == null && resource.isRandomPwdIfNotProvided()) {\n+            passwordAttrValue = passwordGenerator.generate(resource);\n         }\n \n         return passwordAttrValue;\n     }\n \n     @Override\n     public Pair<String, Attribute> prepareAttr(\n+            final ExternalResource resource,\n             final Provision provision,\n             final Item item,\n             final Any<?> any,\n@@ -534,7 +552,7 @@ public Pair<String, Attribute> prepareAttr(\n \n         IntAttrName intAttrName;\n         try {\n-            intAttrName = intAttrNameParser.parse(item.getIntAttrName(), provision.getAnyType().getKind());\n+            intAttrName = intAttrNameParser.parse(item.getIntAttrName(), any.getType().getKind());\n         } catch (ParseException e) {\n             LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", item.getIntAttrName(), e);\n             return null;\n@@ -547,8 +565,8 @@ public Pair<String, Attribute> prepareAttr(\n                 ? intAttrName.getSchema().isReadonly()\n                 : false;\n \n-        Pair<AttrSchemaType, List<PlainAttrValue>> intValues =\n-                getIntValues(provision, item, intAttrName, schemaType, any, usernameAccountGetter, plainAttrGetter);\n+        Pair<AttrSchemaType, List<PlainAttrValue>> intValues = getIntValues(\n+                resource, provision, item, intAttrName, schemaType, any, usernameAccountGetter, plainAttrGetter);\n         schemaType = intValues.getLeft();\n         List<PlainAttrValue> values = intValues.getRight();\n \n@@ -587,7 +605,7 @@ public Pair<String, Attribute> prepareAttr(\n                 result = Pair.of(objValues.isEmpty() ? null : objValues.iterator().next().toString(), null);\n             } else if (item.isPassword() && any instanceof User) {\n                 String passwordAttrValue =\n-                        getPasswordAttrValue(provision, passwordAccountGetter.apply((User) any), password);\n+                        getPasswordAttrValue(resource, passwordAccountGetter.apply((User) any), password);\n                 if (passwordAttrValue == null) {\n                     result = null;\n                 } else {\n@@ -607,6 +625,7 @@ public Pair<String, Attribute> prepareAttr(\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n+            final ExternalResource resource,\n             final Provision provision,\n             final Item mapItem,\n             final IntAttrName intAttrName,\n@@ -615,7 +634,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n             final AccountGetter usernameAccountGetter,\n             final PlainAttrGetter plainAttrGetter) {\n \n-        LOG.debug(\"Get internal values for {} as '{}' on {}\", any, mapItem.getIntAttrName(), provision.getResource());\n+        LOG.debug(\"Get internal values for {} as '{}' on {}\", any, mapItem.getIntAttrName(), resource);\n \n         List<Any<?>> references = new ArrayList<>();\n         Membership<?> membership = null;\n@@ -717,21 +736,21 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n \n                     case \"userOwner\":\n                     case \"groupOwner\":\n-                        Mapping uMapping = provision.getAnyType().equals(anyTypeDAO.findUser())\n+                        Mapping uMappingTO = provision.getAnyType().equals(anyTypeDAO.findUser().getKey())\n                                 ? provision.getMapping()\n                                 : null;\n-                        Mapping gMapping = provision.getAnyType().equals(anyTypeDAO.findGroup())\n+                        Mapping gMappingTO = provision.getAnyType().equals(anyTypeDAO.findGroup().getKey())\n                                 ? provision.getMapping()\n                                 : null;\n \n                         if (ref instanceof Group) {\n                             Group group = (Group) ref;\n                             String groupOwnerValue = null;\n-                            if (group.getUserOwner() != null && uMapping != null) {\n-                                groupOwnerValue = getGroupOwnerValue(provision, group.getUserOwner());\n+                            if (group.getUserOwner() != null && uMappingTO != null) {\n+                                groupOwnerValue = getGroupOwnerValue(resource, provision, group.getUserOwner());\n                             }\n-                            if (group.getGroupOwner() != null && gMapping != null) {\n-                                groupOwnerValue = getGroupOwnerValue(provision, group.getGroupOwner());\n+                            if (group.getGroupOwner() != null && gMappingTO != null) {\n+                                groupOwnerValue = getGroupOwnerValue(resource, provision, group.getGroupOwner());\n                             }\n \n                             if (StringUtils.isNotBlank(groupOwnerValue)) {\n@@ -851,7 +870,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n \n         Pair<AttrSchemaType, List<PlainAttrValue>> transformed = Pair.of(schemaType, values);\n         if (transform) {\n-            for (ItemTransformer transformer : MappingUtils.getItemTransformers(mapItem)) {\n+            for (ItemTransformer transformer : MappingUtils.getItemTransformers(mapItem, getTransformers(mapItem))) {\n                 transformed = transformer.beforePropagation(\n                         mapItem, any, transformed.getLeft(), transformed.getRight());\n             }\n@@ -863,12 +882,17 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n         return transformed;\n     }\n \n-    protected String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n-        Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n+    protected String getGroupOwnerValue(\n+            final ExternalResource resource,\n+            final Provision provision,\n+            final Any<?> any) {\n+\n+        Optional<Item> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n \n         Pair<String, Attribute> preparedAttr = null;\n         if (connObjectKeyItem.isPresent()) {\n             preparedAttr = prepareAttr(\n+                    resource,\n                     provision,\n                     connObjectKeyItem.get(),\n                     any,\n@@ -884,18 +908,24 @@ protected String getGroupOwnerValue(final Provision provision, final Any<?> any)\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Optional<String> getConnObjectKeyValue(final Any<?> any, final Provision provision) {\n-        Optional<? extends MappingItem> connObjectKeyItem = provision.getMapping().getConnObjectKeyItem();\n+    public Optional<String> getConnObjectKeyValue(\n+            final Any<?> any,\n+            final ExternalResource resource,\n+            final Provision provision) {\n+\n+        Optional<Item> connObjectKeyItem = provision.getMapping().getConnObjectKeyItem();\n         if (connObjectKeyItem.isEmpty()) {\n-            LOG.error(\"Unable to locate conn object key item for \" + provision.getMapping().getKey());\n+            LOG.error(\"Unable to locate conn object key item for {}\", any.getType().getKey());\n             return Optional.empty();\n         }\n-        MappingItem mapItem = connObjectKeyItem.get();\n+        Item mapItem = connObjectKeyItem.get();\n         Pair<AttrSchemaType, List<PlainAttrValue>> intValues;\n         try {\n-            intValues = getIntValues(provision,\n+            intValues = getIntValues(\n+                    resource,\n+                    provision,\n                     mapItem,\n-                    intAttrNameParser.parse(mapItem.getIntAttrName(), provision.getAnyType().getKind()),\n+                    intAttrNameParser.parse(mapItem.getIntAttrName(), any.getType().getKind()),\n                     AttrSchemaType.String,\n                     any,\n                     AccountGetter.DEFAULT,\n@@ -912,9 +942,9 @@ public Optional<String> getConnObjectKeyValue(final Any<?> any, final Provision\n     @Transactional(readOnly = true)\n     @Override\n     public Optional<String> getConnObjectKeyValue(final Realm realm, final OrgUnit orgUnit) {\n-        Optional<? extends OrgUnitItem> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n+        Optional<Item> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n         if (connObjectKeyItem.isEmpty()) {\n-            LOG.error(\"Unable to locate conn object key item for \" + orgUnit.getKey());\n+            LOG.error(\"Unable to locate conn object key item for Realms\");\n             return Optional.empty();\n         }\n         return Optional.ofNullable(getIntValue(realm, connObjectKeyItem.get()));\n@@ -926,7 +956,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n         List<Object> values = null;\n         if (attr != null) {\n             values = attr.getValue();\n-            for (ItemTransformer transformer : MappingUtils.getItemTransformers(mapItem)) {\n+            for (ItemTransformer transformer : MappingUtils.getItemTransformers(mapItem, getTransformers(mapItem))) {\n                 values = transformer.beforePull(mapItem, anyTO, values);\n             }\n         }\n@@ -1079,17 +1109,17 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n     }\n \n     @Override\n-    public void setIntValues(final Item orgUnitItem, final Attribute attr, final RealmTO realmTO) {\n+    public void setIntValues(final Item item, final Attribute attr, final RealmTO realmTO) {\n         List<Object> values = null;\n         if (attr != null) {\n             values = attr.getValue();\n-            for (ItemTransformer transformer : MappingUtils.getItemTransformers(orgUnitItem)) {\n-                values = transformer.beforePull(orgUnitItem, realmTO, values);\n+            for (ItemTransformer transformer : MappingUtils.getItemTransformers(item, getTransformers(item))) {\n+                values = transformer.beforePull(item, realmTO, values);\n             }\n         }\n \n         if (values != null && !values.isEmpty() && values.get(0) != null) {\n-            switch (orgUnitItem.getIntAttrName()) {\n+            switch (item.getIntAttrName()) {\n                 case \"name\":\n                     realmTO.setName(values.get(0).toString());\n                     break;"},{"sha":"bd578a9a1b6c2a9c641890f4a21ca1ea0106f05d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultVirAttrHandler.java","status":"modified","additions":21,"deletions":17,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultVirAttrHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -25,14 +25,15 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.LinkingMappingItem;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n@@ -102,34 +103,37 @@ protected Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<Vir\n \n         Map<VirSchema, List<String>> result = new HashMap<>();\n \n-        Map<Provision, Set<VirSchema>> toRead = new HashMap<>();\n+        Map<Pair<ExternalResource, Provision>, Set<VirSchema>> toRead = new HashMap<>();\n \n-        schemas.stream().filter(schema -> resources.contains(schema.getProvision().getResource())).forEach(schema -> {\n+        schemas.stream().filter(schema -> resources.contains(schema.getResource())).forEach(schema -> {\n             VirAttrCacheKey cacheKey = new VirAttrCacheKey(any.getType().getKey(), any.getKey(), schema.getKey());\n             VirAttrCacheValue cacheValue = virAttrCache.get(cacheKey);\n \n             if (cacheValue != null) {\n                 LOG.debug(\"Found in cache: {}={}\", cacheKey, cacheValue);\n                 result.put(schema, cacheValue.getValues());\n-            } else if (schema.getProvision().getAnyType().equals(any.getType())) {\n-                Set<VirSchema> schemasToRead = toRead.get(schema.getProvision());\n-                if (schemasToRead == null) {\n-                    schemasToRead = new HashSet<>();\n-                    toRead.put(schema.getProvision(), schemasToRead);\n-                }\n-                schemasToRead.add(schema);\n+            } else if (schema.getAnyType().equals(any.getType())) {\n+                schema.getResource().getProvision(schema.getAnyType().getKey()).ifPresent(provision -> {\n+                    Set<VirSchema> schemasToRead = toRead.get(Pair.of(schema.getResource(), provision));\n+                    if (schemasToRead == null) {\n+                        schemasToRead = new HashSet<>();\n+                        toRead.put(Pair.of(schema.getResource(), provision), schemasToRead);\n+                    }\n+                    schemasToRead.add(schema);\n+                });\n             }\n         });\n \n-        toRead.forEach((provision, schemasToRead) -> {\n-            LOG.debug(\"About to read from {}: {}\", provision, schemasToRead);\n+        toRead.forEach((pair, schemasToRead) -> {\n+            LOG.debug(\"About to read from {}: {}\", pair, schemasToRead);\n \n             outboundMatcher.match(\n-                    connectorManager.getConnector(provision.getResource()),\n+                    connectorManager.getConnector(pair.getLeft()),\n                     any,\n-                    provision,\n+                    pair.getLeft(),\n+                    pair.getRight(),\n                     Optional.empty(),\n-                    schemasToRead.stream().map(VirSchema::asLinkingMappingItem).toArray(LinkingMappingItem[]::new)).\n+                    schemasToRead.stream().map(VirSchema::asLinkingMappingItem).toArray(Item[]::new)).\n                     forEach(connObj -> schemasToRead.forEach(schema -> {\n \n                 Attribute attr = connObj.getAttributeByName(schema.getExtAttrName());"},{"sha":"ecf80419c7905db01c0f7796b5ae7710db22109e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -459,6 +459,7 @@ public InboundMatcher inboundMatcher(\n             final AnySearchDAO anySearchDAO,\n             final RealmDAO realmDAO,\n             final VirSchemaDAO virSchemaDAO,\n+            final ImplementationDAO implementationDAO,\n             final VirAttrHandler virAttrHandler,\n             final IntAttrNameParser intAttrNameParser) {\n \n@@ -469,6 +470,7 @@ public InboundMatcher inboundMatcher(\n                 anySearchDAO,\n                 realmDAO,\n                 virSchemaDAO,\n+                implementationDAO,\n                 virAttrHandler,\n                 intAttrNameParser,\n                 anyUtilsFactory);\n@@ -515,6 +517,7 @@ public MappingManager mappingManager(\n             final RelationshipTypeDAO relationshipTypeDAO,\n             final RealmDAO realmDAO,\n             final ApplicationDAO applicationDAO,\n+            final ImplementationDAO implementationDAO,\n             final DerAttrHandler derAttrHandler,\n             final VirAttrHandler virAttrHandler,\n             final VirAttrCache virAttrCache,\n@@ -528,6 +531,7 @@ public MappingManager mappingManager(\n                 relationshipTypeDAO,\n                 realmDAO,\n                 applicationDAO,\n+                implementationDAO,\n                 derAttrHandler,\n                 virAttrHandler,\n                 virAttrCache,\n@@ -616,6 +620,7 @@ public PropagationTaskExecutor propagationTaskExecutor(\n             final AnyObjectDAO anyObjectDAO,\n             final TaskDAO taskDAO,\n             final ExternalResourceDAO resourceDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n             final NotificationManager notificationManager,\n             final AuditManager auditManager,\n             final TaskDataBinder taskDataBinder,\n@@ -629,6 +634,7 @@ public PropagationTaskExecutor propagationTaskExecutor(\n                 anyObjectDAO,\n                 taskDAO,\n                 resourceDAO,\n+                plainSchemaDAO,\n                 notificationManager,\n                 auditManager,\n                 taskDataBinder,"},{"sha":"bd20ef6ce487d8bdf1649650b14602626d5b0485","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":38,"deletions":33,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,6 +24,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -37,8 +38,9 @@\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -64,6 +66,7 @@\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.GroupablePlainAttr;\n import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n@@ -73,8 +76,6 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.AccountGetter;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n@@ -186,38 +187,39 @@ protected void setRealm(final Any<?> any, final AnyUR anyUR) {\n         }\n     }\n \n-    protected Map<String, ConnObjectTO> onResources(\n+    protected Map<String, ConnObject> onResources(\n             final Any<?> any,\n             final Collection<String> resources,\n             final String password,\n             final boolean changePwd) {\n \n-        Map<String, ConnObjectTO> onResources = new HashMap<>();\n+        Map<String, ConnObject> onResources = new HashMap<>();\n \n-        resources.stream().map(resourceDAO::find).map(resource -> resource.getProvision(any.getType())).\n-                filter(Optional::isPresent).map(Optional::get).\n-                forEach(provision -> MappingUtils.getConnObjectKeyItem(provision).ifPresent(connObjectKeyItem -> {\n+        resources.stream().map(resourceDAO::find).filter(Objects::nonNull).forEach(resource -> {\n+            resource.getProvision(any.getType().getKey()).\n+                    ifPresent(provision -> MappingUtils.getConnObjectKeyItem(provision).ifPresent(keyItem -> {\n \n-            Pair<String, Set<Attribute>> prepared = mappingManager.prepareAttrsFromAny(\n-                    any, password, changePwd, true, provision);\n+                Pair<String, Set<Attribute>> prepared = mappingManager.prepareAttrsFromAny(\n+                        any, password, changePwd, true, resource, provision);\n \n-            ConnObjectTO connObjectTO;\n-            if (StringUtils.isBlank(prepared.getLeft())) {\n-                connObjectTO = ConnObjectUtils.getConnObjectTO(null, prepared.getRight());\n-            } else {\n-                ConnectorObject connectorObject = new ConnectorObjectBuilder().\n-                        addAttributes(prepared.getRight()).\n-                        addAttribute(new Uid(prepared.getLeft())).\n-                        addAttribute(AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), prepared.getLeft())).\n-                        build();\n-\n-                connObjectTO = ConnObjectUtils.getConnObjectTO(\n-                        outboundMatcher.getFIQL(connectorObject, provision),\n-                        connectorObject.getAttributes());\n-            }\n+                ConnObject connObjectTO;\n+                if (StringUtils.isBlank(prepared.getLeft())) {\n+                    connObjectTO = ConnObjectUtils.getConnObjectTO(null, prepared.getRight());\n+                } else {\n+                    ConnectorObject connectorObject = new ConnectorObjectBuilder().\n+                            addAttributes(prepared.getRight()).\n+                            addAttribute(new Uid(prepared.getLeft())).\n+                            addAttribute(AttributeBuilder.build(keyItem.getExtAttrName(), prepared.getLeft())).\n+                            build();\n+\n+                    connObjectTO = ConnObjectUtils.getConnObjectTO(\n+                            outboundMatcher.getFIQL(connectorObject, resource, provision),\n+                            connectorObject.getAttributes());\n+                }\n \n-            onResources.put(provision.getResource().getKey(), connObjectTO);\n-        }));\n+                onResources.put(resource.getKey(), connObjectTO);\n+            }));\n+        });\n \n         return onResources;\n     }\n@@ -272,13 +274,15 @@ protected void fillAttr(\n         });\n     }\n \n-    private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?> any) {\n+    protected List<String> evaluateMandatoryCondition(\n+            final ExternalResource resource, final Provision provision, final Any<?> any) {\n+\n         List<String> missingAttrNames = new ArrayList<>();\n \n         MappingUtils.getPropagationItems(provision.getMapping().getItems().stream()).forEach(mapItem -> {\n             IntAttrName intAttrName = null;\n             try {\n-                intAttrName = intAttrNameParser.parse(mapItem.getIntAttrName(), provision.getAnyType().getKind());\n+                intAttrName = intAttrNameParser.parse(mapItem.getIntAttrName(), any.getType().getKind());\n             } catch (ParseException e) {\n                 LOG.error(\"Invalid intAttrName '{}', ignoring\", mapItem.getIntAttrName(), e);\n             }\n@@ -288,6 +292,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n                         : AttrSchemaType.String;\n \n                 Pair<AttrSchemaType, List<PlainAttrValue>> intValues = mappingManager.getIntValues(\n+                        resource,\n                         provision,\n                         mapItem,\n                         intAttrName,\n@@ -312,9 +317,9 @@ private SyncopeClientException checkMandatoryOnResources(\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         resources.forEach(resource -> {\n-            Optional<? extends Provision> provision = resource.getProvision(any.getType());\n+            Optional<Provision> provision = resource.getProvision(any.getType().getKey());\n             if (resource.isEnforceMandatoryCondition() && provision.isPresent()) {\n-                List<String> missingAttrNames = evaluateMandatoryCondition(provision.get(), any);\n+                List<String> missingAttrNames = evaluateMandatoryCondition(resource, provision.get(), any);\n                 if (!missingAttrNames.isEmpty()) {\n                     LOG.error(\"Mandatory schemas {} not provided with values\", missingAttrNames);\n \n@@ -493,14 +498,14 @@ protected void fill(\n     }\n \n     protected PropagationByResource<String> propByRes(\n-            final Map<String, ConnObjectTO> before,\n-            final Map<String, ConnObjectTO> after) {\n+            final Map<String, ConnObject> before,\n+            final Map<String, ConnObject> after) {\n \n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n \n         after.forEach((resource, connObject) -> {\n             if (before.containsKey(resource)) {\n-                ConnObjectTO beforeObject = before.get(resource);\n+                ConnObject beforeObject = before.get(resource);\n                 if (!beforeObject.equals(connObject)) {\n                     propByRes.add(ResourceOperation.UPDATE, resource);\n "},{"sha":"11f9b1d433dcaff6e85739e9ea1b1a7e548af713","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -316,7 +316,7 @@ public PropagationByResource<String> update(final AnyObject toBeUpdated, final A\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n \n         // Save projection on Resources (before update)\n-        Map<String, ConnObjectTO> beforeOnResources =\n+        Map<String, ConnObject> beforeOnResources =\n                 onResources(anyObject, anyObjectDAO.findAllResourceKeys(anyObject.getKey()), null, false);\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();"},{"sha":"be8566aacba07fdc8d63030d439ed6bd08c84bb1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AttrRepoDataBinderImpl.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAttrRepoDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAttrRepoDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAttrRepoDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,12 +21,11 @@\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrRepoTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n-import org.apache.syncope.core.persistence.api.entity.am.AttrRepoItem;\n import org.apache.syncope.core.provisioning.api.data.AttrRepoDataBinder;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.slf4j.Logger;\n@@ -51,8 +50,8 @@ protected void populateItems(final AttrRepoTO attrRepoTO, final AttrRepo attrRep\n \n         attrRepoTO.getItems().forEach(itemTO -> {\n             if (itemTO == null) {\n-                LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n-                invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n+                LOG.error(\"Null {}\", Item.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + Item.class.getSimpleName());\n             } else if (itemTO.getIntAttrName() == null) {\n                 requiredValuesMissing.getElements().add(\"intAttrName\");\n                 scce.addException(requiredValuesMissing);\n@@ -67,16 +66,15 @@ protected void populateItems(final AttrRepoTO attrRepoTO, final AttrRepo attrRep\n                     scce.addException(invalidMandatoryCondition);\n                 }\n \n-                AttrRepoItem item = entityFactory.newEntity(AttrRepoItem.class);\n+                Item item = new Item();\n                 item.setIntAttrName(itemTO.getIntAttrName());\n                 item.setExtAttrName(itemTO.getExtAttrName());\n                 item.setMandatoryCondition(itemTO.getMandatoryCondition());\n                 item.setConnObjectKey(itemTO.isConnObjectKey());\n                 item.setPassword(itemTO.isPassword());\n                 item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n                 item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n-                item.setAttrRepo(attrRepo);\n-                attrRepo.add(item);\n+                attrRepo.getItems().add(item);\n             }\n         });\n \n@@ -110,8 +108,7 @@ public AttrRepo update(final AttrRepo attrRepo, final AttrRepoTO attrRepoTO) {\n \n     protected void populateItems(final AttrRepo attrRepo, final AttrRepoTO attrRepoTO) {\n         attrRepo.getItems().forEach(item -> {\n-            ItemTO itemTO = new ItemTO();\n-            itemTO.setKey(item.getKey());\n+            Item itemTO = new Item();\n             itemTO.setIntAttrName(item.getIntAttrName());\n             itemTO.setExtAttrName(item.getExtAttrName());\n             itemTO.setMandatoryCondition(item.getMandatoryCondition());"},{"sha":"49a3ef8c2e0681484e5a92701efeff3d57cef40d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthModuleDataBinderImpl.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,12 +21,11 @@\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.am.AuthModuleItem;\n import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.slf4j.Logger;\n@@ -51,8 +50,8 @@ protected void populateItems(final AuthModuleTO authModuleTO, final AuthModule a\n \n         authModuleTO.getItems().forEach(itemTO -> {\n             if (itemTO == null) {\n-                LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n-                invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n+                LOG.error(\"Null {}\", Item.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + Item.class.getSimpleName());\n             } else if (itemTO.getIntAttrName() == null) {\n                 requiredValuesMissing.getElements().add(\"intAttrName\");\n                 scce.addException(requiredValuesMissing);\n@@ -67,16 +66,15 @@ protected void populateItems(final AuthModuleTO authModuleTO, final AuthModule a\n                     scce.addException(invalidMandatoryCondition);\n                 }\n \n-                AuthModuleItem item = entityFactory.newEntity(AuthModuleItem.class);\n+                Item item = new Item();\n                 item.setIntAttrName(itemTO.getIntAttrName());\n                 item.setExtAttrName(itemTO.getExtAttrName());\n                 item.setMandatoryCondition(itemTO.getMandatoryCondition());\n                 item.setConnObjectKey(itemTO.isConnObjectKey());\n                 item.setPassword(itemTO.isPassword());\n                 item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n                 item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n-                item.setAuthModule(authModule);\n-                authModule.add(item);\n+                authModule.getItems().add(item);\n             }\n         });\n \n@@ -110,8 +108,7 @@ public AuthModule update(final AuthModule authModule, final AuthModuleTO authMod\n \n     protected void populateItems(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n         authModule.getItems().forEach(item -> {\n-            ItemTO itemTO = new ItemTO();\n-            itemTO.setKey(item.getKey());\n+            Item itemTO = new Item();\n             itemTO.setIntAttrName(item.getIntAttrName());\n             itemTO.setExtAttrName(item.getExtAttrName());\n             itemTO.setMandatoryCondition(item.getMandatoryCondition());"},{"sha":"e6b7e0313c7a027f9cd3c9abe6a21d5665f7fac0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -248,7 +248,7 @@ public PropagationByResource<String> update(final Group toBeUpdated, final Group\n         Group group = groupDAO.save(toBeUpdated);\n \n         // Save projection on Resources (before update)\n-        Map<String, ConnObjectTO> beforeOnResources =\n+        Map<String, ConnObject> beforeOnResources =\n                 onResources(group, groupDAO.findAllResourceKeys(group.getKey()), null, false);\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();"},{"sha":"d59324efed1830adff6fd8b100fd92dc6eaa16da","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -28,11 +28,11 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.data.JEXLItemTransformer;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;"},{"sha":"86a191e625ca8d1e4060dbe31838726abd699b87","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n@@ -49,7 +50,6 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -167,7 +167,8 @@ protected <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO\n                 if (anyType == null) {\n                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n                 } else {\n-                    PullCorrelationRuleEntity correlationRule = pullPolicy.getCorrelationRule(anyType).orElse(null);\n+                    PullCorrelationRuleEntity correlationRule = pullPolicy.\n+                            getCorrelationRule(anyType.getKey()).orElse(null);\n                     if (correlationRule == null) {\n                         correlationRule = entityFactory.newEntity(PullCorrelationRuleEntity.class);\n                         correlationRule.setAnyType(anyType);\n@@ -200,7 +201,8 @@ protected <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO\n                 if (anyType == null) {\n                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n                 } else {\n-                    PushCorrelationRuleEntity correlationRule = pushPolicy.getCorrelationRule(anyType).orElse(null);\n+                    PushCorrelationRuleEntity correlationRule = pushPolicy.\n+                            getCorrelationRule(anyType.getKey()).orElse(null);\n                     if (correlationRule == null) {\n                         correlationRule = entityFactory.newEntity(PushCorrelationRuleEntity.class);\n                         correlationRule.setAnyType(anyType);"},{"sha":"7c89e0c794a7696530d5bb4ce1c5d25f21d9e33e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n@@ -38,7 +39,6 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;"},{"sha":"c6010e891d097014158b9ff15d74a20915c93744","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":93,"deletions":121,"changes":214,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -30,12 +30,13 @@\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.ItemContainerTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n-import org.apache.syncope.common.lib.to.OrgUnitTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.ItemContainer;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -49,8 +50,9 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n@@ -59,13 +61,6 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n@@ -154,33 +149,32 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                 LOG.debug(\"Invalid {} specified {}, ignoring...\",\n                         AnyType.class.getSimpleName(), provisionTO.getAnyType());\n             } else {\n-                Provision provision = resource.getProvision(anyType).orElse(null);\n+                Provision provision = resource.getProvision(anyType.getKey()).orElse(null);\n                 if (provision == null) {\n-                    provision = entityFactory.newEntity(Provision.class);\n-                    provision.setResource(resource);\n-                    resource.add(provision);\n-                    provision.setAnyType(anyType);\n+                    provision = new Provision();\n+                    provision.setAnyType(anyType.getKey());\n+                    resource.getProvisions().add(provision);\n                 }\n \n                 if (provisionTO.getObjectClass() == null) {\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidProvision);\n                     sce.getElements().add(\"Null \" + ObjectClass.class.getSimpleName());\n                     throw sce;\n                 }\n-                provision.setObjectClass(new ObjectClass(provisionTO.getObjectClass()));\n+                provision.setObjectClass(provisionTO.getObjectClass());\n \n                 // add all classes contained in the TO\n                 for (String name : provisionTO.getAuxClasses()) {\n                     AnyTypeClass anyTypeClass = anyTypeClassDAO.find(name);\n                     if (anyTypeClass == null) {\n                         LOG.warn(\"Ignoring invalid {}: {}\", AnyTypeClass.class.getSimpleName(), name);\n                     } else {\n-                        provision.add(anyTypeClass);\n+                        provision.getAuxClasses().add(anyTypeClass.getKey());\n                     }\n                 }\n                 // remove all classes not contained in the TO\n                 provision.getAuxClasses().\n-                        removeIf(anyTypeClass -> !provisionTO.getAuxClasses().contains(anyTypeClass.getKey()));\n+                        removeIf(anyTypeClass -> !provisionTO.getAuxClasses().contains(anyTypeClass));\n \n                 provision.setIgnoreCaseMatch(provisionTO.isIgnoreCaseMatch());\n \n@@ -192,7 +186,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                         LOG.warn(\"Ignoring invalid schema for uidOnCreate: {}\", provisionTO.getUidOnCreate());\n                         provision.setUidOnCreate(null);\n                     } else {\n-                        provision.setUidOnCreate(uidOnCreate);\n+                        provision.setUidOnCreate(uidOnCreate.getKey());\n                     }\n                 }\n \n@@ -201,34 +195,35 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                 } else {\n                     Mapping mapping = provision.getMapping();\n                     if (mapping == null) {\n-                        mapping = entityFactory.newEntity(Mapping.class);\n-                        mapping.setProvision(provision);\n+                        mapping = new Mapping();\n                         provision.setMapping(mapping);\n                     } else {\n                         mapping.getItems().clear();\n                     }\n \n                     AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n                     Stream.concat(\n-                            provision.getAnyType().getClasses().stream(),\n-                            provision.getAuxClasses().stream()).forEach(anyTypeClass -> {\n+                            anyType.getClasses().stream(),\n+                            provision.getAuxClasses().stream().map(anyTypeClassDAO::find)).forEach(anyTypeClass -> {\n \n                         allowedSchemas.getPlainSchemas().addAll(anyTypeClass.getPlainSchemas().stream().\n-                                map(Entity::getKey).collect(Collectors.toList()));\n+                                map(PlainSchema::getKey).collect(Collectors.toList()));\n                         allowedSchemas.getDerSchemas().addAll(anyTypeClass.getDerSchemas().stream().\n-                                map(Entity::getKey).collect(Collectors.toList()));\n+                                map(DerSchema::getKey).collect(Collectors.toList()));\n                         allowedSchemas.getVirSchemas().addAll(anyTypeClass.getVirSchemas().stream().\n-                                map(Entity::getKey).collect(Collectors.toList()));\n+                                map(VirSchema::getKey).collect(Collectors.toList()));\n                     });\n \n                     populateMapping(\n+                            resource,\n                             provisionTO.getMapping(),\n                             mapping,\n+                            anyType.getKind(),\n                             allowedSchemas);\n                 }\n \n                 if (provisionTO.getVirSchemas().isEmpty()) {\n-                    for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+                    for (VirSchema schema : virSchemaDAO.find(resource.getKey(), anyType.getKey())) {\n                         virSchemaDAO.delete(schema.getKey());\n                     }\n                 } else {\n@@ -238,43 +233,39 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                             LOG.debug(\"Invalid {} specified: {}, ignoring...\",\n                                     VirSchema.class.getSimpleName(), schemaName);\n                         } else {\n-                            schema.setProvision(provision);\n+                            schema.setResource(resource);\n+                            schema.setAnyType(anyTypeDAO.find(provision.getAnyType()));\n                         }\n                     }\n                 }\n             }\n         });\n \n         // 2. remove all provisions not contained in the TO\n-        for (Iterator<? extends Provision> itor = resource.getProvisions().iterator(); itor.hasNext();) {\n+        for (Iterator<Provision> itor = resource.getProvisions().iterator(); itor.hasNext();) {\n             Provision provision = itor.next();\n-            if (resourceTO.getProvision(provision.getAnyType().getKey()).isEmpty()) {\n-                virSchemaDAO.findByProvision(provision).forEach(schema -> virSchemaDAO.delete(schema.getKey()));\n+            if (resourceTO.getProvision(provision.getAnyType()).isEmpty()) {\n+                virSchemaDAO.find(resource.getKey(), provision.getAnyType()).\n+                        forEach(schema -> virSchemaDAO.delete(schema.getKey()));\n \n                 itor.remove();\n             }\n         }\n \n         // 3. orgUnit\n         if (resourceTO.getOrgUnit() == null && resource.getOrgUnit() != null) {\n-            resource.getOrgUnit().setResource(null);\n             resource.setOrgUnit(null);\n         } else if (resourceTO.getOrgUnit() != null) {\n-            OrgUnitTO orgUnitTO = resourceTO.getOrgUnit();\n+            OrgUnit orgUnitTO = resourceTO.getOrgUnit();\n \n-            OrgUnit orgUnit = resource.getOrgUnit();\n-            if (orgUnit == null) {\n-                orgUnit = entityFactory.newEntity(OrgUnit.class);\n-                orgUnit.setResource(resource);\n-                resource.setOrgUnit(orgUnit);\n-            }\n+            OrgUnit orgUnit = Optional.ofNullable(resource.getOrgUnit()).orElseGet(() -> new OrgUnit());\n \n             if (orgUnitTO.getObjectClass() == null) {\n                 SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidOrgUnit);\n                 sce.getElements().add(\"Null \" + ObjectClass.class.getSimpleName());\n                 throw sce;\n             }\n-            orgUnit.setObjectClass(new ObjectClass(orgUnitTO.getObjectClass()));\n+            orgUnit.setObjectClass(orgUnitTO.getObjectClass());\n \n             orgUnit.setIgnoreCaseMatch(orgUnitTO.isIgnoreCaseMatch());\n \n@@ -292,10 +283,10 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                     ClientExceptionType.RequiredValuesMissing);\n \n             orgUnit.getItems().clear();\n-            for (ItemTO itemTO : orgUnitTO.getItems()) {\n+            for (Item itemTO : orgUnitTO.getItems()) {\n                 if (itemTO == null) {\n-                    LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n-                    invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n+                    LOG.error(\"Null {}\", Item.class.getSimpleName());\n+                    invalidMapping.getElements().add(\"Null \" + Item.class.getSimpleName());\n                 } else if (itemTO.getIntAttrName() == null) {\n                     requiredValuesMissing.getElements().add(\"intAttrName\");\n                     scce.addException(requiredValuesMissing);\n@@ -314,7 +305,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                             scce.addException(invalidMandatoryCondition);\n                         }\n \n-                        OrgUnitItem item = entityFactory.newEntity(OrgUnitItem.class);\n+                        Item item = new Item();\n                         item.setIntAttrName(itemTO.getIntAttrName());\n                         item.setExtAttrName(itemTO.getExtAttrName());\n                         item.setPurpose(itemTO.getPurpose());\n@@ -323,25 +314,25 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                         item.setPassword(itemTO.isPassword());\n                         item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n                         item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n-                        item.setOrgUnit(orgUnit);\n-                        if (item.isConnObjectKey()) {\n-                            orgUnit.setConnObjectKeyItem(item);\n-                        } else {\n-                            orgUnit.add(item);\n-                        }\n \n                         itemTO.getTransformers().forEach(transformerKey -> {\n                             Implementation transformer = implementationDAO.find(transformerKey);\n                             if (transformer == null) {\n                                 LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n                                         transformerKey);\n                             } else {\n-                                item.add(transformer);\n+                                item.getTransformers().add(transformer.getKey());\n                             }\n                         });\n                         // remove all implementations not contained in the TO\n                         item.getTransformers().\n-                                removeIf(implementation -> !itemTO.getTransformers().contains(implementation.getKey()));\n+                                removeIf(implementation -> !itemTO.getTransformers().contains(implementation));\n+\n+                        if (item.isConnObjectKey()) {\n+                            orgUnit.setConnObjectKeyItem(item);\n+                        } else {\n+                            orgUnit.add(item);\n+                        }\n                     }\n                 }\n             }\n@@ -351,6 +342,8 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n             if (scce.hasExceptions()) {\n                 throw scce;\n             }\n+\n+            resource.setOrgUnit(orgUnit);\n         }\n \n         resource.setCreateTraceLevel(resourceTO.getCreateTraceLevel());\n@@ -412,8 +405,10 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n     }\n \n     protected void populateMapping(\n-            final MappingTO mappingTO,\n+            final ExternalResource resource,\n+            final Mapping mappingTO,\n             final Mapping mapping,\n+            final AnyTypeKind anyTypeKind,\n             final AnyTypeClassTO allowedSchemas) {\n \n         mapping.setConnObjectLink(mappingTO.getConnObjectLink());\n@@ -423,18 +418,17 @@ protected void populateMapping(\n         SyncopeClientException requiredValuesMissing = SyncopeClientException.build(\n                 ClientExceptionType.RequiredValuesMissing);\n \n-        for (ItemTO itemTO : mappingTO.getItems()) {\n+        for (Item itemTO : mappingTO.getItems()) {\n             if (itemTO == null) {\n-                LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n-                invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n+                LOG.error(\"Null {}\", Item.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + Item.class.getSimpleName());\n             } else if (itemTO.getIntAttrName() == null) {\n                 requiredValuesMissing.getElements().add(\"intAttrName\");\n                 scce.addException(requiredValuesMissing);\n             } else {\n                 IntAttrName intAttrName = null;\n                 try {\n-                    intAttrName = intAttrNameParser.parse(\n-                            itemTO.getIntAttrName(), mapping.getProvision().getAnyType().getKind());\n+                    intAttrName = intAttrNameParser.parse(itemTO.getIntAttrName(), anyTypeKind);\n                 } catch (ParseException e) {\n                     LOG.error(\"Invalid intAttrName '{}'\", itemTO.getIntAttrName(), e);\n                 }\n@@ -481,7 +475,7 @@ protected void populateMapping(\n                             scce.addException(invalidMandatoryCondition);\n                         }\n \n-                        MappingItem item = entityFactory.newEntity(MappingItem.class);\n+                        Item item = new Item();\n                         item.setIntAttrName(itemTO.getIntAttrName());\n                         item.setExtAttrName(itemTO.getExtAttrName());\n                         item.setPurpose(itemTO.getPurpose());\n@@ -490,7 +484,19 @@ protected void populateMapping(\n                         item.setPassword(itemTO.isPassword());\n                         item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n                         item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n-                        item.setMapping(mapping);\n+\n+                        itemTO.getTransformers().forEach(transformerKey -> {\n+                            Implementation transformer = implementationDAO.find(transformerKey);\n+                            if (transformer == null) {\n+                                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                                        transformerKey);\n+                            } else {\n+                                item.getTransformers().add(transformer.getKey());\n+                            }\n+                        });\n+                        // remove all implementations not contained in the TO\n+                        item.getTransformers().\n+                                removeIf(implementation -> !itemTO.getTransformers().contains(implementation));\n \n                         if (item.isConnObjectKey()) {\n                             if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n@@ -507,19 +513,6 @@ protected void populateMapping(\n                             mapping.add(item);\n                         }\n \n-                        itemTO.getTransformers().forEach(transformerKey -> {\n-                            Implementation transformer = implementationDAO.find(transformerKey);\n-                            if (transformer == null) {\n-                                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n-                                        transformerKey);\n-                            } else {\n-                                item.add(transformer);\n-                            }\n-                        });\n-                        // remove all implementations not contained in the TO\n-                        item.getTransformers().\n-                                removeIf(implementation -> !itemTO.getTransformers().contains(implementation.getKey()));\n-\n                         if (intAttrName.getEnclosingGroup() != null\n                                 && item.getPurpose() != MappingPurpose.PROPAGATION) {\n \n@@ -554,7 +547,7 @@ protected void populateMapping(\n                             }\n \n                             VirSchema schema = virSchemaDAO.find(item.getIntAttrName());\n-                            if (schema != null && schema.getProvision().equals(item.getMapping().getProvision())) {\n+                            if (schema != null && schema.getResource().equals(resource)) {\n                                 invalidMapping.getElements().add(\n                                         \"No need to map virtual schema on linking resource\");\n                             }\n@@ -590,10 +583,9 @@ protected void populateMapping(\n         }\n     }\n \n-    protected static void populateItems(final List<? extends Item> items, final ItemContainerTO containerTO) {\n+    protected void populateItems(final List<Item> items, final ItemContainer containerTO) {\n         items.forEach(item -> {\n-            ItemTO itemTO = new ItemTO();\n-            itemTO.setKey(item.getKey());\n+            Item itemTO = new Item();\n             itemTO.setIntAttrName(item.getIntAttrName());\n             itemTO.setExtAttrName(item.getExtAttrName());\n             itemTO.setPurpose(item.getPurpose());\n@@ -602,15 +594,13 @@ protected static void populateItems(final List<? extends Item> items, final Item\n             itemTO.setPassword(item.isPassword());\n             itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());\n             itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());\n+            itemTO.getTransformers().addAll(item.getTransformers());\n \n             if (itemTO.isConnObjectKey()) {\n                 containerTO.setConnObjectKeyItem(itemTO);\n             } else {\n                 containerTO.add(itemTO);\n             }\n-\n-            itemTO.getTransformers().addAll(item.getTransformers().stream().\n-                    map(Entity::getKey).collect(Collectors.toSet()));\n         });\n     }\n \n@@ -624,60 +614,42 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         // set the connector instance\n         ConnInstance connector = resource.getConnector();\n \n-        resourceTO.setConnector(Optional.ofNullable(connector).map(Entity::getKey).orElse(null));\n-        resourceTO.setConnectorDisplayName(Optional.ofNullable(connector)\n-                .map(ConnInstance::getDisplayName).orElse(null));\n+        resourceTO.setConnector(Optional.ofNullable(connector).map(ConnInstance::getKey).orElse(null));\n+        resourceTO.setConnectorDisplayName(Optional.ofNullable(connector).\n+                map(ConnInstance::getDisplayName).orElse(null));\n \n         // set the provision information\n         resource.getProvisions().forEach(provision -> {\n-            ProvisionTO provisionTO = new ProvisionTO();\n-            provisionTO.setKey(provision.getKey());\n-            provisionTO.setAnyType(provision.getAnyType().getKey());\n-            provisionTO.setObjectClass(provision.getObjectClass().getObjectClassValue());\n-            provisionTO.getAuxClasses().addAll(provision.getAuxClasses().stream().\n-                    map(Entity::getKey).collect(Collectors.toList()));\n-            provisionTO.setSyncToken(provision.getSerializedSyncToken());\n+            Provision provisionTO = new Provision();\n+            provisionTO.setAnyType(provision.getAnyType());\n+            provisionTO.setObjectClass(provision.getObjectClass());\n+            provisionTO.getAuxClasses().addAll(provision.getAuxClasses());\n+            provisionTO.setSyncToken(provision.getSyncToken());\n             provisionTO.setIgnoreCaseMatch(provision.isIgnoreCaseMatch());\n-            if (provision.getUidOnCreate() != null) {\n-                provisionTO.setUidOnCreate(provision.getUidOnCreate().getKey());\n-            }\n+            provisionTO.setUidOnCreate(provision.getUidOnCreate());\n \n             if (provision.getMapping() != null) {\n-                MappingTO mappingTO = new MappingTO();\n+                Mapping mappingTO = new Mapping();\n                 provisionTO.setMapping(mappingTO);\n                 mappingTO.setConnObjectLink(provision.getMapping().getConnObjectLink());\n                 populateItems(provision.getMapping().getItems(), mappingTO);\n             }\n \n-            virSchemaDAO.findByProvision(provision).forEach(virSchema -> {\n-                provisionTO.getVirSchemas().add(virSchema.getKey());\n-\n-                MappingItem linkingMappingItem = virSchema.asLinkingMappingItem();\n-\n-                ItemTO itemTO = new ItemTO();\n-                itemTO.setKey(linkingMappingItem.getKey());\n-                itemTO.setIntAttrName(linkingMappingItem.getIntAttrName());\n-                itemTO.setExtAttrName(linkingMappingItem.getExtAttrName());\n-                itemTO.setPurpose(linkingMappingItem.getPurpose());\n-                itemTO.setMandatoryCondition(linkingMappingItem.getMandatoryCondition());\n-                itemTO.setConnObjectKey(linkingMappingItem.isConnObjectKey());\n-                itemTO.setPassword(linkingMappingItem.isPassword());\n-                itemTO.setPropagationJEXLTransformer(linkingMappingItem.getPropagationJEXLTransformer());\n-                itemTO.setPullJEXLTransformer(linkingMappingItem.getPullJEXLTransformer());\n-\n-                provisionTO.getMapping().getLinkingItems().add(itemTO);\n-            });\n-\n             resourceTO.getProvisions().add(provisionTO);\n         });\n+        resourceTO.getProvisions().\n+                forEach(provisionTO -> virSchemaDAO.find(resource.getKey(), provisionTO.getAnyType()).\n+                forEach(virSchema -> {\n+                    provisionTO.getVirSchemas().add(virSchema.getKey());\n+                    provisionTO.getMapping().getLinkingItems().add(virSchema.asLinkingMappingItem());\n+                }));\n \n         if (resource.getOrgUnit() != null) {\n             OrgUnit orgUnit = resource.getOrgUnit();\n \n-            OrgUnitTO orgUnitTO = new OrgUnitTO();\n-            orgUnitTO.setKey(orgUnit.getKey());\n-            orgUnitTO.setObjectClass(orgUnit.getObjectClass().getObjectClassValue());\n-            orgUnitTO.setSyncToken(orgUnit.getSerializedSyncToken());\n+            OrgUnit orgUnitTO = new OrgUnit();\n+            orgUnitTO.setObjectClass(orgUnit.getObjectClass());\n+            orgUnitTO.setSyncToken(orgUnit.getSyncToken());\n             orgUnitTO.setIgnoreCaseMatch(orgUnit.isIgnoreCaseMatch());\n             orgUnitTO.setConnObjectLink(orgUnit.getConnObjectLink());\n             populateItems(orgUnit.getItems(), orgUnitTO);\n@@ -721,7 +693,7 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         resourceTO.getCapabilitiesOverride().addAll(resource.getCapabilitiesOverride());\n \n         resourceTO.getPropagationActions().addAll(\n-                resource.getPropagationActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                resource.getPropagationActions().stream().map(Implementation::getKey).collect(Collectors.toList()));\n \n         return resourceTO;\n     }"},{"sha":"131ed2483ddca8371823cc53be577e49637bb15b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -42,13 +43,12 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.slf4j.Logger;\n@@ -356,14 +356,15 @@ protected VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n             sce.getElements().add(\"AnyType \" + schemaTO.getAnyType() + \" not found\");\n             throw sce;\n         }\n-        Provision provision = resource.getProvision(anyType).orElse(null);\n+        Provision provision = resource.getProvision(anyType.getKey()).orElse(null);\n         if (provision == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSchemaDefinition);\n             sce.getElements().add(\"Provision for AnyType\" + schemaTO.getAnyType()\n                     + \" not found in \" + schemaTO.getResource());\n             throw sce;\n         }\n-        schema.setProvision(provision);\n+        schema.setResource(resource);\n+        schema.setAnyType(anyType);\n \n         return virSchemaDAO.save(schema);\n     }\n@@ -393,8 +394,8 @@ public VirSchemaTO getVirSchemaTO(final String key) {\n         labels(schema, schemaTO);\n \n         schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n-        schemaTO.setResource(schema.getProvision().getResource().getKey());\n-        schemaTO.setAnyType(schema.getProvision().getAnyType().getKey());\n+        schemaTO.setResource(schema.getResource().getKey());\n+        schemaTO.setAnyType(schema.getAnyType().getKey());\n \n         return schemaTO;\n     }"},{"sha":"4dbf8b62eaa6a60ac49e07e5eb03fe2823bf40a5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -46,8 +46,8 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -205,7 +205,7 @@ protected void fill(final ProvisioningTask provisioningTask, final ProvisioningT\n                 if (anyType == null) {\n                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n                 } else {\n-                    AnyTemplatePullTask anyTemplate = pullTask.getTemplate(anyType).orElse(null);\n+                    AnyTemplatePullTask anyTemplate = pullTask.getTemplate(anyType.getKey()).orElse(null);\n                     if (anyTemplate == null) {\n                         anyTemplate = entityFactory.newEntity(AnyTemplatePullTask.class);\n                         anyTemplate.setAnyType(anyType);"},{"sha":"719c650cfb47ec007454d832ea7f06a9975c1e3e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,6 +21,7 @@\n import java.time.OffsetDateTime;\n import java.util.HashSet;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.function.Supplier;\n@@ -37,7 +38,8 @@\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -67,15 +69,14 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Delegation;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n@@ -438,7 +439,7 @@ public void create(final User user, final UserCR userCR) {\n     }\n \n     private boolean isPasswordMapped(final ExternalResource resource) {\n-        return resource.getProvision(anyTypeDAO.findUser()).\n+        return resource.getProvision(anyTypeDAO.findUser().getKey()).\n                 filter(provision -> provision.getMapping() != null).\n                 map(provision -> provision.getMapping().getItems().stream().anyMatch(Item::isPassword)).\n                 orElse(false);\n@@ -482,7 +483,7 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n         }\n \n         // Save projection on Resources (before update)\n-        Map<String, ConnObjectTO> beforeOnResources =\n+        Map<String, ConnObject> beforeOnResources =\n                 onResources(user, userDAO.findAllResourceKeys(user.getKey()), password, changePwd);\n \n         // realm\n@@ -732,7 +733,7 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n         User saved = userDAO.save(user);\n \n         // Build final information for next stage (propagation)\n-        Map<String, ConnObjectTO> afterOnResources =\n+        Map<String, ConnObject> afterOnResources =\n                 onResources(user, userDAO.findAllResourceKeys(user.getKey()), password, changePwd);\n         propByRes.merge(propByRes(beforeOnResources, afterOnResources));\n \n@@ -742,11 +743,12 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n             propByRes.addAll(\n                     ResourceOperation.UPDATE,\n                     anyUtils.getAllResources(saved).stream().\n-                            map(resource -> resource.getProvision(saved.getType())).\n-                            filter(Optional::isPresent).map(Optional::get).\n+                            map(resource -> resource.getProvision(saved.getType().getKey()).\n                             filter(mappingManager::hasMustChangePassword).\n-                            map(provision -> provision.getResource().getKey()).\n-                            collect(Collectors.toSet()));\n+                            map(provision -> resource.getKey()).\n+                            orElse(null)).\n+                            filter(Objects::nonNull).\n+                            collect(Collectors.toList()));\n         }\n \n         return Pair.of(propByRes, propByLinkedAccount);"},{"sha":"c9392752593986d233dc7345aca7aa3818759e28","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -33,6 +33,8 @@\n import org.apache.syncope.common.lib.report.ReconciliationReportletConf;\n import org.apache.syncope.common.lib.report.ReconciliationReportletConf.Feature;\n import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n@@ -48,8 +50,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n@@ -61,6 +61,7 @@\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -284,16 +285,16 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n \n             AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n             anyUtils.getAllResources(any).forEach(resource -> {\n-                Provision provision = resource.getProvision(any.getType()).orElse(null);\n-                Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n-                final String connObjectKeyValue = connObjectKeyItem.isPresent()\n-                        ? mappingManager.getConnObjectKeyValue(any, provision).get()\n+                Provision provision = resource.getProvision(any.getType().getKey()).orElse(null);\n+                Optional<Item> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n+                String connObjectKeyValue = connObjectKeyItem.isPresent()\n+                        ? mappingManager.getConnObjectKeyValue(any, resource, provision).get()\n                         : StringUtils.EMPTY;\n                 if (provision != null && connObjectKeyItem.isPresent() && StringUtils.isNotBlank(connObjectKeyValue)) {\n                     // 1. read from the underlying connector\n                     Connector connector = connectorManager.getConnector(resource);\n                     ConnectorObject connectorObject = connector.getObject(\n-                            provision.getObjectClass(),\n+                            new ObjectClass(provision.getObjectClass()),\n                             AttributeBuilder.build(connObjectKeyItem.get().getExtAttrName(), connObjectKeyValue),\n                             provision.isIgnoreCaseMatch(),\n                             MappingUtils.buildOperationOptions(provision.getMapping().getItems().stream()));\n@@ -307,7 +308,7 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n                     } else {\n                         // 3. found but misaligned?\n                         Pair<String, Set<Attribute>> preparedAttrs =\n-                                mappingManager.prepareAttrsFromAny(any, null, false, null, provision);\n+                                mappingManager.prepareAttrsFromAny(any, null, false, null, resource, provision);\n                         preparedAttrs.getRight().add(AttributeBuilder.build(\n                                 Uid.NAME, preparedAttrs.getLeft()));\n                         preparedAttrs.getRight().add(AttributeBuilder.build("},{"sha":"0d30f69b1b09ddbdb7920920fcbc5762cc207660","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -32,6 +32,9 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.ExecStatus;\n@@ -40,14 +43,12 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n@@ -108,6 +109,8 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n \n     protected final ExternalResourceDAO resourceDAO;\n \n+    protected final PlainSchemaDAO plainSchemaDAO;\n+\n     protected final NotificationManager notificationManager;\n \n     protected final AuditManager auditManager;\n@@ -130,6 +133,7 @@ public AbstractPropagationTaskExecutor(\n             final AnyObjectDAO anyObjectDAO,\n             final TaskDAO taskDAO,\n             final ExternalResourceDAO resourceDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n             final NotificationManager notificationManager,\n             final AuditManager auditManager,\n             final TaskDataBinder taskDataBinder,\n@@ -145,6 +149,7 @@ public AbstractPropagationTaskExecutor(\n         this.anyObjectDAO = anyObjectDAO;\n         this.taskDAO = taskDAO;\n         this.resourceDAO = resourceDAO;\n+        this.plainSchemaDAO = plainSchemaDAO;\n         this.notificationManager = notificationManager;\n         this.auditManager = auditManager;\n         this.taskDataBinder = taskDataBinder;\n@@ -212,8 +217,8 @@ protected Uid createOrUpdate(\n \n             task.getResource().getProvision(task.getAnyType()).ifPresent(provision -> {\n                 if (provision.getUidOnCreate() != null) {\n-                    anyUtilsFactory.getInstance(task.getAnyTypeKind()).\n-                            addAttr(task.getEntityKey(), provision.getUidOnCreate(), result.getUidValue());\n+                    anyUtilsFactory.getInstance(task.getAnyTypeKind()).addAttr(\n+                            task.getEntityKey(), plainSchemaDAO.find(provision.getUidOnCreate()), result.getUidValue());\n                 }\n             });\n         } else {\n@@ -562,9 +567,9 @@ protected TaskExec doExecute(\n             String fiql = provision == null\n                     ? null\n                     : afterObj != null\n-                            ? outboundMatcher.getFIQL(afterObj, provision)\n+                            ? outboundMatcher.getFIQL(afterObj, task.getResource(), provision)\n                             : beforeObj != null\n-                                    ? outboundMatcher.getFIQL(beforeObj, provision)\n+                                    ? outboundMatcher.getFIQL(beforeObj, task.getResource(), provision)\n                                     : null;\n             reporter.onSuccessOrNonPriorityResourceFailures(taskInfo,\n                     ExecStatus.valueOf(exec.getStatus()),\n@@ -754,7 +759,7 @@ protected ConnectorObject getRemoteObject(\n         actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(Optional.of(task), orgUnit)));\n \n         ConnectorObject obj = null;\n-        Optional<? extends OrgUnitItem> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n+        Optional<Item> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n         if (connObjectKeyItem.isPresent()) {\n             try {\n                 obj = connector.getObject("},{"sha":"3bba93d833d830295b5714f26c8c3f10b83e9d0b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationManager.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -33,19 +33,19 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.request.AbstractPatchItem;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n@@ -357,11 +357,11 @@ public PropagationTaskInfo newTask(\n             final ExternalResource resource,\n             final ResourceOperation operation,\n             final Provision provision,\n-            final Stream<? extends Item> mappingItems,\n+            final Stream<Item> mappingItems,\n             final Pair<String, Set<Attribute>> preparedAttrs) {\n \n         PropagationTaskInfo task = new PropagationTaskInfo(resource);\n-        task.setObjectClassName(provision.getObjectClass().getObjectClassValue());\n+        task.setObjectClassName(provision.getObjectClass());\n         task.setAnyTypeKind(any.getType().getKind());\n         task.setAnyType(any.getType().getKey());\n         task.setEntityKey(any.getKey());\n@@ -440,21 +440,20 @@ protected List<PropagationTaskInfo> createTasks(\n                     LOG.warn(\"Ignoring read-only {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n                 } else if (anyUtilsFactory.getInstance(any).dao().\n                         findAllowedSchemas(any, VirSchema.class).contains(schema)\n-                        && virtualResources.contains(schema.getProvision().getResource().getKey())) {\n+                        && virtualResources.contains(schema.getResource().getKey())) {\n \n-                    Set<Attribute> values = vAttrMap.get(schema.getProvision().getResource().getKey());\n+                    Set<Attribute> values = vAttrMap.get(schema.getResource().getKey());\n                     if (values == null) {\n                         values = new HashSet<>();\n-                        vAttrMap.put(schema.getProvision().getResource().getKey(), values);\n+                        vAttrMap.put(schema.getResource().getKey(), values);\n                     }\n                     values.add(AttributeBuilder.build(schema.getExtAttrName(), vAttr.getValues()));\n \n-                    if (!propByRes.contains(ResourceOperation.CREATE, schema.getProvision().getResource().getKey())) {\n-                        propByRes.add(ResourceOperation.UPDATE, schema.getProvision().getResource().getKey());\n+                    if (!propByRes.contains(ResourceOperation.CREATE, schema.getResource().getKey())) {\n+                        propByRes.add(ResourceOperation.UPDATE, schema.getResource().getKey());\n                     }\n                 } else {\n-                    LOG.warn(\"{} not owned by or {} not allowed for {}\",\n-                            schema.getProvision().getResource(), schema, any);\n+                    LOG.warn(\"{} not owned by or {} not allowed for {}\", schema.getResource(), schema, any);\n                 }\n             });\n         }\n@@ -465,8 +464,8 @@ protected List<PropagationTaskInfo> createTasks(\n         propByRes.asMap().forEach((resourceKey, operation) -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             Provision provision = Optional.ofNullable(resource).\n-                    flatMap(externalResource -> externalResource.getProvision(any.getType())).orElse(null);\n-            Stream<? extends Item> mappingItems = provision == null\n+                    flatMap(externalResource -> externalResource.getProvision(any.getType().getKey())).orElse(null);\n+            Stream<Item> mappingItems = provision == null\n                     ? Stream.empty()\n                     : MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n \n@@ -480,7 +479,7 @@ protected List<PropagationTaskInfo> createTasks(\n                         any.getType(), resource);\n             } else {\n                 Pair<String, Set<Attribute>> preparedAttrs =\n-                        mappingManager.prepareAttrsFromAny(any, password, changePwd, enable, provision);\n+                        mappingManager.prepareAttrsFromAny(any, password, changePwd, enable, resource, provision);\n                 if (vAttrMap.containsKey(resourceKey)) {\n                     preparedAttrs.getRight().addAll(vAttrMap.get(resourceKey));\n                 }\n@@ -512,7 +511,7 @@ protected List<PropagationTaskInfo> createTasks(\n                 Provision provision = account == null || account.getResource() == null\n                         ? null\n                         : account.getResource().getProvision(AnyTypeKind.USER.name()).orElse(null);\n-                Stream<? extends Item> mappingItems = provision == null\n+                Stream<Item> mappingItems = provision == null\n                         ? Stream.empty()\n                         : MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n \n@@ -580,7 +579,7 @@ public List<PropagationTaskInfo> createTasks(\n                         realm.getFullPath(), resource);\n             } else {\n                 PropagationTaskInfo task = new PropagationTaskInfo(resource);\n-                task.setObjectClassName(orgUnit.getObjectClass().getObjectClassValue());\n+                task.setObjectClassName(orgUnit.getObjectClass());\n                 task.setEntityKey(realm.getKey());\n                 task.setOperation(operation);\n                 task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));"},{"sha":"f9141931ca12b13cc6543d16339bdd3198a330ed","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DeletingLinkedAccount.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,8 +24,8 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;"},{"sha":"b601ad7d0a421779291fde4ce669c41b138b67ba","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -27,13 +27,13 @@\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n@@ -82,7 +82,7 @@ protected static String getGroupMembershipAttrName() {\n     @Transactional(readOnly = true)\n     @Override\n     public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n-        Optional<? extends Provision> provision = task.getResource().getProvision(anyTypeDAO.findGroup());\n+        Optional<Provision> provision = task.getResource().getProvision(anyTypeDAO.findGroup().getKey());\n         if (AnyTypeKind.USER == task.getAnyTypeKind()\n                 && provision.isPresent() && provision.get().getMapping() != null\n                 && StringUtils.isNotBlank(provision.get().getMapping().getConnObjectLink())) {\n@@ -117,7 +117,7 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                     if (beforeObj != null && beforeObj.getAttributeByName(getGroupMembershipAttrName()) != null) {\n                         Set<String> connObjectLinks = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n                         buildManagedGroupConnObjectLinks(\n-                                provision.get().getResource(),\n+                                task.getResource(),\n                                 provision.get().getMapping().getConnObjectLink(),\n                                 connObjectLinks);\n \n@@ -149,9 +149,12 @@ private String evaluateGroupConnObjectLink(final String connObjectLinkTemplate,\n         return JexlUtils.evaluate(connObjectLinkTemplate, jexlContext).toString();\n     }\n \n-    private void buildManagedGroupConnObjectLinks(final ExternalResource externalResource,\n-            final String connObjectLinkTemplate, final Set<String> connObjectLinks) {\n-        List<Group> managedGroups = groupDAO.findByResource(externalResource);\n+    private void buildManagedGroupConnObjectLinks(\n+            final ExternalResource resource,\n+            final String connObjectLinkTemplate,\n+            final Set<String> connObjectLinks) {\n+\n+        List<Group> managedGroups = groupDAO.findByResource(resource);\n         managedGroups.forEach(group -> connObjectLinks.add(evaluateGroupConnObjectLink(connObjectLinkTemplate, group)));\n     }\n }"},{"sha":"650b8c8cef59288a285c3950d5723c9114ff5be1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n@@ -93,6 +94,7 @@ public PriorityPropagationTaskExecutor(\n             final AnyObjectDAO anyObjectDAO,\n             final TaskDAO taskDAO,\n             final ExternalResourceDAO resourceDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n             final NotificationManager notificationManager,\n             final AuditManager auditManager,\n             final TaskDataBinder taskDataBinder,\n@@ -109,6 +111,7 @@ public PriorityPropagationTaskExecutor(\n                 anyObjectDAO,\n                 taskDAO,\n                 resourceDAO,\n+                plainSchemaDAO,\n                 notificationManager,\n                 auditManager,\n                 taskDataBinder,"},{"sha":"fe113c6558211612d743e407380d143bef9e424f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractProvisioningJobDelegate.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,15 +24,14 @@\n import java.util.List;\n import java.util.Objects;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -377,10 +376,11 @@ protected String createReport(\n         }\n \n         // Summary, also to be included for FAILURE and ALL, so create it anyway.\n-        boolean includeUser = resource.getProvision(anyTypeDAO.findUser()) != null;\n-        boolean includeGroup = resource.getProvision(anyTypeDAO.findGroup()) != null;\n+        boolean includeUser = resource.getProvision(anyTypeDAO.findUser().getKey()).isPresent();\n+        boolean includeGroup = resource.getProvision(anyTypeDAO.findGroup().getKey()).isPresent();\n         boolean includeAnyObject = resource.getProvisions().stream().anyMatch(\n-                provision -> provision.getAnyType().getKind() == AnyTypeKind.ANY_OBJECT);\n+                provision -> !provision.getAnyType().equals(anyTypeDAO.findUser().getKey())\n+                && !provision.getAnyType().equals(anyTypeDAO.findGroup().getKey()));\n         boolean includeRealm = resource.getOrgUnit() != null;\n \n         if (includeUser) {"},{"sha":"03fe521fe9fd9b337fbfd48115951c774750ae6f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":94,"deletions":75,"changes":169,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -48,10 +49,8 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -139,8 +138,8 @@ public boolean handle(final SyncDelta delta) {\n                     \"No provision found on \" + profile.getTask().getResource()\n                     + \" for \" + delta.getObject().getObjectClass()));\n \n-            doHandle(delta, provision);\n-            executor.reportHandled(delta.getObjectClass(), delta.getObject().getName());\n+            doHandle(delta, provision, anyTypeDAO.find(provision.getAnyType()).getKind());\n+            executor.reportHandled(delta.getObjectClass().getObjectClassValue(), delta.getObject().getName());\n \n             LOG.debug(\"Successfully handled {}\", delta);\n \n@@ -159,7 +158,7 @@ public boolean handle(final SyncDelta delta) {\n                 this.latestResult = null;\n             }\n             if (shouldContinue) {\n-                executor.setLatestSyncToken(delta.getObjectClass(), delta.getToken());\n+                executor.setLatestSyncToken(delta.getObjectClass().getObjectClassValue(), delta.getToken());\n             }\n             if (executor.wasInterruptRequested()) {\n                 LOG.debug(\"Pull interrupted\");\n@@ -171,7 +170,7 @@ public boolean handle(final SyncDelta delta) {\n             ProvisioningReport ignoreResult = new ProvisioningReport();\n             ignoreResult.setOperation(ResourceOperation.NONE);\n             ignoreResult.setAnyType(provision == null\n-                    ? getAnyUtils().anyTypeKind().name() : provision.getAnyType().getKey());\n+                    ? getAnyUtils().anyTypeKind().name() : provision.getAnyType());\n             ignoreResult.setStatus(ProvisioningReport.Status.IGNORE);\n             ignoreResult.setMessage(e.getMessage());\n             ignoreResult.setKey(null);\n@@ -181,8 +180,8 @@ public boolean handle(final SyncDelta delta) {\n \n             LOG.warn(\"Ignoring during pull\", e);\n \n-            executor.setLatestSyncToken(delta.getObjectClass(), delta.getToken());\n-            executor.reportHandled(delta.getObjectClass(), delta.getObject().getName());\n+            executor.setLatestSyncToken(delta.getObjectClass().getObjectClassValue(), delta.getToken());\n+            executor.reportHandled(delta.getObjectClass().getObjectClassValue(), delta.getObject().getName());\n \n             return true;\n         } catch (JobExecutionException e) {\n@@ -195,29 +194,35 @@ public boolean handle(final SyncDelta delta) {\n     protected List<ProvisioningReport> provision(\n             final UnmatchingRule rule,\n             final SyncDelta delta,\n+            final AnyTypeKind anyTypeKind,\n             final Provision provision) throws JobExecutionException {\n \n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"PullTask not configured for create\");\n-            end(provision.getAnyType().getKind(), UnmatchingRule.toEventName(rule), Result.SUCCESS, null, null, delta);\n+            end(provision.getAnyType(), UnmatchingRule.toEventName(rule), Result.SUCCESS, null, null, delta);\n             return List.of();\n         }\n \n-        AnyCR anyCR = connObjectUtils.getAnyCR(delta.getObject(), profile.getTask(), provision, true);\n+        AnyCR anyCR = connObjectUtils.getAnyCR(\n+                delta.getObject(),\n+                profile.getTask(),\n+                anyTypeKind,\n+                provision,\n+                true);\n         if (rule == UnmatchingRule.ASSIGN) {\n             anyCR.getResources().add(profile.getTask().getResource().getKey());\n         }\n \n         ProvisioningReport result = new ProvisioningReport();\n         result.setOperation(ResourceOperation.CREATE);\n-        result.setAnyType(provision.getAnyType().getKey());\n+        result.setAnyType(provision.getAnyType());\n         result.setStatus(ProvisioningReport.Status.SUCCESS);\n         result.setName(getName(anyCR));\n         result.setUidValue(delta.getUid().getUidValue());\n \n         if (profile.isDryRun()) {\n             result.setKey(null);\n-            end(provision.getAnyType().getKind(), UnmatchingRule.toEventName(rule), Result.SUCCESS, null, null, delta);\n+            end(provision.getAnyType(), UnmatchingRule.toEventName(rule), Result.SUCCESS, null, null, delta);\n         } else {\n             Object output;\n             Result resultStatus;\n@@ -246,15 +251,15 @@ protected List<ProvisioningReport> provision(\n                 // A propagation failure doesn't imply a pull failure.\n                 // The propagation exception status will be reported into the propagation task execution.\n                 LOG.error(\"Could not propagate {} {}\",\n-                        provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n+                        provision.getAnyType(), delta.getUid().getUidValue(), e);\n                 output = e;\n                 resultStatus = Result.FAILURE;\n             } catch (Exception e) {\n                 throwIgnoreProvisionException(delta, e);\n \n                 result.setStatus(ProvisioningReport.Status.FAILURE);\n                 result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                LOG.error(\"Could not create {} {} \", provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n+                LOG.error(\"Could not create {} {} \", provision.getAnyType(), delta.getUid().getUidValue(), e);\n                 output = e;\n \n                 if (profile.getTask().isRemediation()) {\n@@ -274,7 +279,7 @@ protected List<ProvisioningReport> provision(\n                 }\n             }\n \n-            end(provision.getAnyType().getKind(), UnmatchingRule.toEventName(rule), resultStatus, null, output, delta);\n+            end(provision.getAnyType(), UnmatchingRule.toEventName(rule), resultStatus, null, output, delta);\n         }\n \n         return List.of(result);\n@@ -305,7 +310,7 @@ protected List<ProvisioningReport> update(\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"PullTask not configured for update\");\n-            end(provision.getAnyType().getKind(),\n+            end(provision.getAnyType(),\n                     MatchingRule.toEventName(MatchingRule.UPDATE), Result.SUCCESS, null, null, delta);\n             return List.of();\n         }\n@@ -319,15 +324,15 @@ protected List<ProvisioningReport> update(\n \n             ProvisioningReport result = new ProvisioningReport();\n             result.setOperation(ResourceOperation.UPDATE);\n-            result.setAnyType(provision.getAnyType().getKey());\n+            result.setAnyType(provision.getAnyType());\n             result.setStatus(ProvisioningReport.Status.SUCCESS);\n             result.setKey(match.getAny().getKey());\n             result.setUidValue(delta.getUid().getUidValue());\n \n             AnyTO before = getAnyTO(match.getAny());\n             if (before == null) {\n                 result.setStatus(ProvisioningReport.Status.FAILURE);\n-                result.setMessage(String.format(\"Any '%s(%s)' not found\", provision.getAnyType().getKey(), match));\n+                result.setMessage(String.format(\"Any '%s(%s)' not found\", provision.getAnyType(), match));\n             } else {\n                 result.setName(getName(before));\n             }\n@@ -348,6 +353,7 @@ protected List<ProvisioningReport> update(\n                                 delta.getObject(),\n                                 before,\n                                 profile.getTask(),\n+                                match.getAny().getType().getKind(),\n                                 provision);\n \n                         for (PullActions action : profile.getActions()) {\n@@ -365,12 +371,12 @@ protected List<ProvisioningReport> update(\n                         resultStatus = Result.SUCCESS;\n                         result.setName(getName(updated));\n \n-                        LOG.debug(\"{} {} successfully updated\", provision.getAnyType().getKey(), match);\n+                        LOG.debug(\"{} {} successfully updated\", provision.getAnyType(), match);\n                     } catch (PropagationException e) {\n                         // A propagation failure doesn't imply a pull failure.\n                         // The propagation exception status will be reported into the propagation task execution.\n                         LOG.error(\"Could not propagate {} {}\",\n-                                provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n+                                provision.getAnyType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     } catch (Exception e) {\n@@ -379,7 +385,7 @@ protected List<ProvisioningReport> update(\n                         result.setStatus(ProvisioningReport.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n                         LOG.error(\"Could not update {} {}\",\n-                                provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n+                                provision.getAnyType(), delta.getUid().getUidValue(), e);\n                         output = e;\n \n                         if (profile.getTask().isRemediation()) {\n@@ -397,7 +403,7 @@ protected List<ProvisioningReport> update(\n                         }\n                     }\n                 }\n-                end(provision.getAnyType().getKind(),\n+                end(provision.getAnyType(),\n                         MatchingRule.toEventName(MatchingRule.UPDATE),\n                         resultStatus, before, output, delta, effectiveReq);\n             }\n@@ -415,7 +421,7 @@ protected List<ProvisioningReport> deprovision(\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"PullTask not configured for update\");\n-            end(provision.getAnyType().getKind(),\n+            end(provision.getAnyType(),\n                     MatchingRule.toEventName(matchingRule), Result.SUCCESS, null, null, delta);\n             return List.of();\n         }\n@@ -429,7 +435,7 @@ protected List<ProvisioningReport> deprovision(\n \n             ProvisioningReport result = new ProvisioningReport();\n             result.setOperation(ResourceOperation.DELETE);\n-            result.setAnyType(provision.getAnyType().getKey());\n+            result.setAnyType(provision.getAnyType());\n             result.setStatus(ProvisioningReport.Status.SUCCESS);\n             result.setKey(match.getAny().getKey());\n             result.setUidValue(delta.getUid().getUidValue());\n@@ -438,7 +444,7 @@ protected List<ProvisioningReport> deprovision(\n \n             if (before == null) {\n                 result.setStatus(ProvisioningReport.Status.FAILURE);\n-                result.setMessage(String.format(\"Any '%s(%s)' not found\", provision.getAnyType().getKey(), match));\n+                result.setMessage(String.format(\"Any '%s(%s)' not found\", provision.getAnyType(), match));\n             }\n \n             if (!profile.isDryRun()) {\n@@ -463,10 +469,10 @@ protected List<ProvisioningReport> deprovision(\n                         }\n \n                         PropagationByResource<String> propByRes = new PropagationByResource<>();\n-                        propByRes.add(ResourceOperation.DELETE, provision.getResource().getKey());\n+                        propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n \n                         taskExecutor.execute(propagationManager.getDeleteTasks(\n-                                provision.getAnyType().getKind(),\n+                                match.getAny().getType().getKind(),\n                                 match.getAny().getKey(),\n                                 propByRes,\n                                 null,\n@@ -493,12 +499,12 @@ protected List<ProvisioningReport> deprovision(\n \n                         resultStatus = Result.SUCCESS;\n \n-                        LOG.debug(\"{} {} successfully updated\", provision.getAnyType().getKey(), match);\n+                        LOG.debug(\"{} {} successfully updated\", provision.getAnyType(), match);\n                     } catch (PropagationException e) {\n                         // A propagation failure doesn't imply a pull failure.\n                         // The propagation exception status will be reported into the propagation task execution.\n                         LOG.error(\"Could not propagate {} {}\",\n-                                provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n+                                provision.getAnyType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     } catch (Exception e) {\n@@ -507,12 +513,12 @@ protected List<ProvisioningReport> deprovision(\n                         result.setStatus(ProvisioningReport.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n                         LOG.error(\"Could not update {} {}\",\n-                                provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n+                                provision.getAnyType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     }\n                 }\n-                end(provision.getAnyType().getKind(),\n+                end(provision.getAnyType(),\n                         MatchingRule.toEventName(matchingRule), resultStatus, before, output, delta);\n             }\n             results.add(result);\n@@ -530,7 +536,7 @@ protected List<ProvisioningReport> link(\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"PullTask not configured for update\");\n-            end(provision.getAnyType().getKind(),\n+            end(provision.getAnyType(),\n                     unlink\n                             ? MatchingRule.toEventName(MatchingRule.UNLINK)\n                             : MatchingRule.toEventName(MatchingRule.LINK),\n@@ -547,7 +553,7 @@ protected List<ProvisioningReport> link(\n \n             ProvisioningReport result = new ProvisioningReport();\n             result.setOperation(ResourceOperation.NONE);\n-            result.setAnyType(provision.getAnyType().getKey());\n+            result.setAnyType(provision.getAnyType());\n             result.setStatus(ProvisioningReport.Status.SUCCESS);\n             result.setKey(match.getAny().getKey());\n             result.setUidValue(delta.getUid().getUidValue());\n@@ -556,7 +562,7 @@ protected List<ProvisioningReport> link(\n \n             if (before == null) {\n                 result.setStatus(ProvisioningReport.Status.FAILURE);\n-                result.setMessage(String.format(\"Any '%s(%s)' not found\", provision.getAnyType().getKey(), match));\n+                result.setMessage(String.format(\"Any '%s(%s)' not found\", provision.getAnyType(), match));\n             }\n \n             if (!profile.isDryRun()) {\n@@ -595,12 +601,12 @@ protected List<ProvisioningReport> link(\n \n                         resultStatus = Result.SUCCESS;\n \n-                        LOG.debug(\"{} {} successfully updated\", provision.getAnyType().getKey(), match);\n+                        LOG.debug(\"{} {} successfully updated\", provision.getAnyType(), match);\n                     } catch (PropagationException e) {\n                         // A propagation failure doesn't imply a pull failure.\n                         // The propagation exception status will be reported into the propagation task execution.\n                         LOG.error(\"Could not propagate {} {}\",\n-                                provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n+                                provision.getAnyType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     } catch (Exception e) {\n@@ -609,12 +615,12 @@ protected List<ProvisioningReport> link(\n                         result.setStatus(ProvisioningReport.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n                         LOG.error(\"Could not update {} {}\",\n-                                provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n+                                provision.getAnyType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     }\n                 }\n-                end(provision.getAnyType().getKind(),\n+                end(provision.getAnyType(),\n                         unlink\n                                 ? MatchingRule.toEventName(MatchingRule.UNLINK)\n                                 : MatchingRule.toEventName(MatchingRule.LINK),\n@@ -634,7 +640,7 @@ protected List<ProvisioningReport> delete(\n \n         if (!profile.getTask().isPerformDelete()) {\n             LOG.debug(\"PullTask not configured for delete\");\n-            end(provision.getAnyType().getKind(),\n+            end(provision.getAnyType(),\n                     ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);\n             return List.of();\n         }\n@@ -655,7 +661,7 @@ protected List<ProvisioningReport> delete(\n                 result.setKey(match.getAny().getKey());\n                 result.setName(getName(before));\n                 result.setOperation(ResourceOperation.DELETE);\n-                result.setAnyType(provision.getAnyType().getKey());\n+                result.setAnyType(provision.getAnyType());\n                 result.setStatus(ProvisioningReport.Status.SUCCESS);\n                 result.setUidValue(delta.getUid().getUidValue());\n \n@@ -682,7 +688,7 @@ protected List<ProvisioningReport> delete(\n \n                         result.setStatus(ProvisioningReport.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                        LOG.error(\"Could not delete {} {}\", provision.getAnyType().getKey(), match, e);\n+                        LOG.error(\"Could not delete {} {}\", provision.getAnyType(), match, e);\n                         output = e;\n \n                         if (profile.getTask().isRemediation()) {\n@@ -700,17 +706,17 @@ protected List<ProvisioningReport> delete(\n                         }\n                     }\n \n-                    end(provision.getAnyType().getKind(),\n+                    end(provision.getAnyType(),\n                             ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, delta);\n                 }\n \n                 results.add(result);\n             } catch (NotFoundException e) {\n-                LOG.error(\"Could not find {} {}\", provision.getAnyType().getKey(), match, e);\n+                LOG.error(\"Could not find {} {}\", provision.getAnyType(), match, e);\n             } catch (DelegatedAdministrationException e) {\n-                LOG.error(\"Not allowed to read {} {}\", provision.getAnyType().getKey(), match, e);\n+                LOG.error(\"Not allowed to read {} {}\", provision.getAnyType(), match, e);\n             } catch (Exception e) {\n-                LOG.error(\"Could not delete {} {}\", provision.getAnyType().getKey(), match, e);\n+                LOG.error(\"Could not delete {} {}\", provision.getAnyType(), match, e);\n             }\n         });\n \n@@ -734,7 +740,7 @@ protected List<ProvisioningReport> ignore(\n             report.setKey(null);\n             report.setName(delta.getObject().getUid().getUidValue());\n             report.setOperation(ResourceOperation.NONE);\n-            report.setAnyType(provision.getAnyType().getKey());\n+            report.setAnyType(provision.getAnyType());\n             report.setStatus(ProvisioningReport.Status.SUCCESS);\n             report.setUidValue(delta.getUid().getUidValue());\n             if (message != null && message.length >= 1) {\n@@ -748,7 +754,7 @@ protected List<ProvisioningReport> ignore(\n                 report.setKey(match.getAny().getKey());\n                 report.setName(delta.getObject().getUid().getUidValue());\n                 report.setOperation(ResourceOperation.NONE);\n-                report.setAnyType(provision.getAnyType().getKey());\n+                report.setAnyType(provision.getAnyType());\n                 report.setStatus(ProvisioningReport.Status.SUCCESS);\n                 report.setUidValue(delta.getUid().getUidValue());\n                 if (message != null && message.length >= 1) {\n@@ -759,7 +765,7 @@ protected List<ProvisioningReport> ignore(\n             });\n         }\n \n-        end(provision.getAnyType().getKind(),\n+        end(provision.getAnyType(),\n                 matching\n                         ? MatchingRule.toEventName(MatchingRule.IGNORE)\n                         : UnmatchingRule.toEventName(UnmatchingRule.IGNORE), Result.SUCCESS, null, null, delta);\n@@ -770,6 +776,7 @@ protected List<ProvisioningReport> ignore(\n     protected void handleAnys(\n             final SyncDelta delta,\n             final List<PullMatch> matches,\n+            final AnyTypeKind anyTypeKind,\n             final Provision provision) throws JobExecutionException {\n \n         if (matches.isEmpty()) {\n@@ -783,7 +790,7 @@ protected void handleAnys(\n                     case ASSIGN:\n                     case PROVISION:\n                         profile.getResults().addAll(\n-                                provision(profile.getTask().getUnmatchingRule(), delta, provision));\n+                                provision(profile.getTask().getUnmatchingRule(), delta, anyTypeKind, provision));\n                         break;\n \n                     case IGNORE:\n@@ -795,19 +802,20 @@ protected void handleAnys(\n                     }\n             } else {\n                 // update VirAttrCache\n-                virSchemaDAO.findByProvision(provision).forEach(schema -> {\n-                    Attribute attr = delta.getObject().getAttributeByName(schema.getExtAttrName());\n-                    matches.forEach(match -> {\n-                        VirAttrCacheKey cacheKey = new VirAttrCacheKey(\n-                                provision.getAnyType().getKey(), match.getAny().getKey(),\n-                                schema.getKey());\n-                        if (attr == null) {\n-                            virAttrCache.expire(cacheKey);\n-                        } else {\n-                            virAttrCache.put(cacheKey, new VirAttrCacheValue(attr.getValue()));\n-                        }\n-                    });\n-                });\n+                virSchemaDAO.find(profile.getTask().getResource().getKey(), matches.get(0).getAny().getType().getKey()).\n+                        forEach(vs -> {\n+                            Attribute attr = delta.getObject().getAttributeByName(vs.getExtAttrName());\n+                            matches.forEach(match -> {\n+                                VirAttrCacheKey cacheKey = new VirAttrCacheKey(\n+                                        provision.getAnyType(), match.getAny().getKey(),\n+                                        vs.getKey());\n+                                if (attr == null) {\n+                                    virAttrCache.expire(cacheKey);\n+                                } else {\n+                                    virAttrCache.put(cacheKey, new VirAttrCacheValue(attr.getValue()));\n+                                }\n+                            });\n+                        });\n \n                 switch (profile.getTask().getMatchingRule()) {\n                     case UPDATE:\n@@ -852,17 +860,22 @@ protected void handleLinkedAccounts(\n         }\n \n         // nothing to do in the general case\n-        LOG.warn(\"Unexpected linked accounts found for {}: {}\", provision.getAnyType().getKind(), matches);\n+        LOG.warn(\"Unexpected linked accounts found for {}: {}\", provision.getAnyType(), matches);\n     }\n \n     /**\n      * Look into SyncDelta and take necessary profile.getActions() (create / update / delete) on any object(s).\n      *\n      * @param delta returned by the underlying profile.getConnector()\n      * @param provision provisioning info\n+     * @param anyTypeKind any type kind\n      * @throws JobExecutionException in case of pull failure.\n      */\n-    protected void doHandle(final SyncDelta delta, final Provision provision) throws JobExecutionException {\n+    protected void doHandle(\n+            final SyncDelta delta,\n+            final Provision provision,\n+            final AnyTypeKind anyTypeKind) throws JobExecutionException {\n+\n         LOG.debug(\"Process {} for {} as {}\",\n                 delta.getDeltaType(), delta.getUid().getUidValue(), delta.getObject().getObjectClass());\n \n@@ -875,7 +888,11 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                 finalDelta.getDeltaType(), finalDelta.getUid().getUidValue(), finalDelta.getObject().getObjectClass());\n \n         try {\n-            List<PullMatch> matches = inboundMatcher.match(finalDelta, provision);\n+            List<PullMatch> matches = inboundMatcher.match(\n+                    finalDelta,\n+                    profile.getTask().getResource(),\n+                    provision,\n+                    anyTypeKind);\n             LOG.debug(\"Match(es) found for {} as {}: {}\",\n                     finalDelta.getUid().getUidValue(), finalDelta.getObject().getObjectClass(), matches);\n \n@@ -903,7 +920,9 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                     finalDelta,\n                     matches.stream().\n                             filter(match -> match.getMatchTarget() == MatchType.ANY).\n-                            collect(Collectors.toList()), provision);\n+                            collect(Collectors.toList()),\n+                    anyTypeKind,\n+                    provision);\n \n             // linked accounts\n             handleLinkedAccounts(\n@@ -917,7 +936,7 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n     }\n \n     protected void end(\n-            final AnyTypeKind anyTypeKind,\n+            final String anyType,\n             final String event,\n             final Result result,\n             final Object before,\n@@ -932,7 +951,7 @@ protected void end(\n         notificationManager.createTasks(\n                 profile.getExecutor(),\n                 AuditElements.EventCategoryType.PULL,\n-                anyTypeKind.name().toLowerCase(),\n+                anyType,\n                 profile.getTask().getResource().getKey(),\n                 event,\n                 result,\n@@ -944,7 +963,7 @@ protected void end(\n         auditManager.audit(\n                 profile.getExecutor(),\n                 AuditElements.EventCategoryType.PULL,\n-                anyTypeKind.name().toLowerCase(),\n+                anyType,\n                 profile.getTask().getResource().getKey(),\n                 event,\n                 result,\n@@ -961,7 +980,7 @@ protected void createRemediationIfNeeded(\n \n         if (ProvisioningReport.Status.FAILURE == result.getStatus() && profile.getTask().isRemediation()) {\n             createRemediation(\n-                    anyTypeDAO.find(result.getAnyType()),\n+                    result.getAnyType(),\n                     null,\n                     null,\n                     anyUR,\n@@ -972,7 +991,7 @@ protected void createRemediationIfNeeded(\n     }\n \n     protected void createRemediation(\n-            final AnyType anyType,\n+            final String anyType,\n             final AnyCR anyCR,\n             final PullTask pullTask,\n             final ProvisioningReport result,\n@@ -982,7 +1001,7 @@ protected void createRemediation(\n     }\n \n     protected void createRemediation(\n-            final AnyType anyType,\n+            final String anyType,\n             final AnyUR anyUR,\n             final PullTask pullTask,\n             final ProvisioningReport result,\n@@ -992,7 +1011,7 @@ protected void createRemediation(\n     }\n \n     protected void createRemediation(\n-            final AnyType anyType,\n+            final String anyType,\n             final String anyKey,\n             final AnyCR anyCR,\n             final AnyUR anyUR,\n@@ -1002,7 +1021,7 @@ protected void createRemediation(\n \n         Remediation remediation = entityFactory.newEntity(Remediation.class);\n \n-        remediation.setAnyType(anyType);\n+        remediation.setAnyType(anyTypeDAO.find(anyType));\n         remediation.setOperation(anyUR == null ? ResourceOperation.CREATE : ResourceOperation.UPDATE);\n         if (StringUtils.isNotBlank(anyKey)) {\n             remediation.setPayload(anyKey);\n@@ -1020,7 +1039,7 @@ protected void createRemediation(\n \n         ProvisioningReport remediationResult = new ProvisioningReport();\n         remediationResult.setOperation(remediation.getOperation());\n-        remediationResult.setAnyType(anyType.getKey());\n+        remediationResult.setAnyType(anyType);\n         remediationResult.setStatus(ProvisioningReport.Status.FAILURE);\n         remediationResult.setMessage(remediation.getError());\n         if (StringUtils.isNotBlank(anyKey)) {"},{"sha":"15b556e133a18b11ed9e81aa804172e6fec684dd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n@@ -41,7 +42,6 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n@@ -212,7 +212,7 @@ public boolean handle(final String anyKey) {\n         try {\n             any = getAnyUtils().dao().authFind(anyKey);\n \n-            Provision provision = profile.getTask().getResource().getProvision(any.getType()).orElse(null);\n+            Provision provision = profile.getTask().getResource().getProvision(any.getType().getKey()).orElse(null);\n             if (provision == null) {\n                 throw new JobExecutionException(\"No provision found on \" + profile.getTask().getResource() + \" for \"\n                         + any.getType().getKey());\n@@ -258,9 +258,13 @@ protected void doHandle(final Any<?> any, final Provision provision) throws JobE\n \n         // Try to read remote object BEFORE any actual operation\n         Set<String> moreAttrsToGet = new HashSet<>();\n-        profile.getActions().forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, provision)));\n+        profile.getActions().forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, any)));\n         List<ConnectorObject> connObjs = outboundMatcher.match(\n-                profile.getConnector(), any, provision, Optional.of(moreAttrsToGet.toArray(String[]::new)));\n+                profile.getConnector(),\n+                any,\n+                profile.getTask().getResource(),\n+                provision,\n+                Optional.of(moreAttrsToGet.toArray(String[]::new)));\n         LOG.debug(\"Match(es) found for {} as {}: {}\", any, provision.getObjectClass(), connObjs);\n \n         if (connObjs.size() > 1) {\n@@ -454,7 +458,11 @@ protected void doHandle(final Any<?> any, final Provision provision) throws JobE\n                 if (notificationsAvailable || auditRequested) {\n                     resultStatus = AuditElements.Result.SUCCESS;\n                     output = outboundMatcher.match(\n-                            profile.getConnector(), any, provision, Optional.of(moreAttrsToGet.toArray(String[]::new)));\n+                            profile.getConnector(),\n+                            any,\n+                            profile.getTask().getResource(),\n+                            provision,\n+                            Optional.of(moreAttrsToGet.toArray(String[]::new)));\n                 }\n             } catch (IgnoreProvisionException e) {\n                 throw e;"},{"sha":"ca58d6120059c7009520928cf351ffc349714000","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultProvisionSorter.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultProvisionSorter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultProvisionSorter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultProvisionSorter.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,26 +19,26 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import org.apache.commons.lang3.ObjectUtils;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.ProvisionSorter;\n \n public class DefaultProvisionSorter implements ProvisionSorter {\n \n     @Override\n     public int compare(final Provision provision1, final Provision provision2) {\n-        if (provision1.getAnyType().getKind() == AnyTypeKind.USER) {\n+        if (AnyTypeKind.USER.name().equals(provision1.getAnyType())) {\n             return -1;\n         }\n-        if (provision2.getAnyType().getKind() == AnyTypeKind.USER) {\n+        if (AnyTypeKind.USER.name().equals(provision2.getAnyType())) {\n             return 1;\n         }\n-        if (provision1.getAnyType().getKind() == AnyTypeKind.GROUP) {\n+        if (AnyTypeKind.GROUP.name().equals(provision1.getAnyType())) {\n             return -1;\n         }\n-        if (provision2.getAnyType().getKind() == AnyTypeKind.GROUP) {\n+        if (AnyTypeKind.GROUP.name().equals(provision2.getAnyType())) {\n             return 1;\n         }\n-        return ObjectUtils.compare(provision1.getAnyType().getKey(), provision2.getAnyType().getKey());\n+        return ObjectUtils.compare(provision1.getAnyType(), provision2.getAnyType());\n     }\n }"},{"sha":"5743b6b6da396045e3cd75b39bf6e723a51b1309","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,6 +24,7 @@\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -39,7 +40,6 @@\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n@@ -90,7 +90,7 @@ public boolean handle(final SyncDelta delta) {\n             }\n \n             doHandle(delta, orgUnit);\n-            executor.reportHandled(delta.getObjectClass(), delta.getObject().getName());\n+            executor.reportHandled(delta.getObjectClass().getObjectClassValue(), delta.getObject().getName());\n \n             LOG.debug(\"Successfully handled {}\", delta);\n \n@@ -104,7 +104,7 @@ public boolean handle(final SyncDelta delta) {\n                 this.latestResult = null;\n             }\n             if (shouldContinue) {\n-                executor.setLatestSyncToken(delta.getObjectClass(), delta.getToken());\n+                executor.setLatestSyncToken(delta.getObjectClass().getObjectClassValue(), delta.getToken());\n             }\n             return shouldContinue;\n         } catch (IgnoreProvisionException e) {\n@@ -118,8 +118,8 @@ public boolean handle(final SyncDelta delta) {\n \n             LOG.warn(\"Ignoring during pull\", e);\n \n-            executor.setLatestSyncToken(delta.getObjectClass(), delta.getToken());\n-            executor.reportHandled(delta.getObjectClass(), delta.getObject().getName());\n+            executor.setLatestSyncToken(delta.getObjectClass().getObjectClassValue(), delta.getToken());\n+            executor.reportHandled(delta.getObjectClass().getObjectClassValue(), delta.getObject().getName());\n \n             return true;\n         } catch (JobExecutionException e) {\n@@ -129,7 +129,9 @@ public boolean handle(final SyncDelta delta) {\n         }\n     }\n \n-    private List<ProvisioningReport> assign(final SyncDelta delta, final OrgUnit orgUnit) throws JobExecutionException {\n+    private List<ProvisioningReport> assign(final SyncDelta delta, final OrgUnit orgUnit)\n+            throws JobExecutionException {\n+\n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"PullTask not configured for create\");\n             finalize(UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), Result.SUCCESS, null, null, delta);"},{"sha":"be9977813b120eb396f36e9bd5504556e24b93bc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,6 +26,8 @@\n import java.util.stream.Stream;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -35,9 +37,6 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -177,7 +176,7 @@ protected ConnectorObject getRemoteObject(\n             final String connObjectKey,\n             final String connObjectKeyValue,\n             final boolean ignoreCaseMatch,\n-            final Stream<? extends Item> mapItems) {\n+            final Stream<Item> mapItems) {\n \n         ConnectorObject obj = null;\n         try {\n@@ -211,13 +210,13 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n         // Try to read remote object BEFORE any actual operation\n         OrgUnit orgUnit = profile.getTask().getResource().getOrgUnit();\n-        Optional<? extends OrgUnitItem> connObjectKey = orgUnit.getConnObjectKeyItem();\n+        Optional<Item> connObjectKey = orgUnit.getConnObjectKeyItem();\n         Optional<String> connObjecKeyValue = mappingManager.getConnObjectKeyValue(realm, orgUnit);\n \n         ConnectorObject beforeObj = null;\n         if (connObjectKey.isPresent() && connObjecKeyValue.isPresent()) {\n             beforeObj = getRemoteObject(\n-                    orgUnit.getObjectClass(),\n+                    new ObjectClass(orgUnit.getObjectClass()),\n                     connObjectKey.get().getExtAttrName(),\n                     connObjecKeyValue.get(),\n                     orgUnit.isIgnoreCaseMatch(),\n@@ -399,7 +398,7 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                     resultStatus = AuditElements.Result.SUCCESS;\n                     if (connObjectKey.isPresent() && connObjecKeyValue.isPresent()) {\n                         output = getRemoteObject(\n-                                orgUnit.getObjectClass(),\n+                                new ObjectClass(orgUnit.getObjectClass()),\n                                 connObjectKey.get().getExtAttrName(),\n                                 connObjecKeyValue.get(),\n                                 orgUnit.isIgnoreCaseMatch(),"},{"sha":"e1baf555114f21756620e7da8a51d074e92e88f9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":19,"deletions":17,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -48,7 +49,6 @@\n import org.apache.syncope.core.persistence.api.dao.PullMatch;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -154,7 +154,7 @@ protected void handleLinkedAccounts(\n             }\n \n             Optional<? extends LinkedAccount> found =\n-                    user.getLinkedAccount(provision.getResource().getKey(), delta.getUid().getUidValue());\n+                    user.getLinkedAccount(profile.getTask().getResource().getKey(), delta.getUid().getUidValue());\n             if (found.isPresent()) {\n                 LinkedAccount account = found.get();\n \n@@ -190,7 +190,7 @@ protected void handleLinkedAccounts(\n                 if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n                     LinkedAccountTO accountTO = new LinkedAccountTO();\n                     accountTO.setConnObjectKeyValue(delta.getUid().getUidValue());\n-                    accountTO.setResource(provision.getResource().getKey());\n+                    accountTO.setResource(profile.getTask().getResource().getKey());\n \n                     switch (profile.getTask().getUnmatchingRule()) {\n                         case ASSIGN:\n@@ -207,8 +207,7 @@ protected void handleLinkedAccounts(\n                         // do nothing\n                     }\n                 } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n-                    end(\n-                            AnyTypeKind.USER,\n+                    end(AnyTypeKind.USER.name(),\n                             ResourceOperation.DELETE.name().toLowerCase(),\n                             AuditElements.Result.SUCCESS,\n                             null,\n@@ -227,7 +226,7 @@ protected Optional<ProvisioningReport> deprovision(\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"PullTask not configured for update\");\n-            end(AnyTypeKind.USER,\n+            end(AnyTypeKind.USER.name(),\n                     MatchingRule.toEventName(MatchingRule.UPDATE), Result.SUCCESS, null, null, delta);\n             return Optional.empty();\n         }\n@@ -294,7 +293,7 @@ protected Optional<ProvisioningReport> deprovision(\n                 resultStatus = Result.FAILURE;\n             }\n \n-            end(AnyTypeKind.USER, MatchingRule.toEventName(matchingRule), resultStatus, before, output, delta);\n+            end(AnyTypeKind.USER.name(), MatchingRule.toEventName(matchingRule), resultStatus, before, output, delta);\n         }\n \n         return Optional.of(report);\n@@ -310,7 +309,7 @@ protected Optional<ProvisioningReport> provision(\n \n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"PullTask not configured for create\");\n-            end(AnyTypeKind.USER, UnmatchingRule.toEventName(rule), Result.SUCCESS, null, null, delta);\n+            end(AnyTypeKind.USER.name(), UnmatchingRule.toEventName(rule), Result.SUCCESS, null, null, delta);\n             return Optional.empty();\n         }\n \n@@ -325,11 +324,11 @@ protected Optional<ProvisioningReport> provision(\n \n         if (profile.isDryRun()) {\n             report.setKey(null);\n-            end(AnyTypeKind.USER, UnmatchingRule.toEventName(rule), Result.SUCCESS, null, null, delta);\n+            end(AnyTypeKind.USER.name(), UnmatchingRule.toEventName(rule), Result.SUCCESS, null, null, delta);\n         } else {\n             UserTO owner = userDataBinder.getUserTO(user, false);\n             UserCR connObject = connObjectUtils.getAnyCR(\n-                    delta.getObject(), profile.getTask(), provision, false);\n+                    delta.getObject(), profile.getTask(), AnyTypeKind.USER, provision, false);\n \n             if (connObject.getUsername().equals(owner.getUsername())) {\n                 accountTO.setUsername(null);\n@@ -412,7 +411,7 @@ protected Optional<ProvisioningReport> provision(\n                 }\n             }\n \n-            end(AnyTypeKind.USER, UnmatchingRule.toEventName(rule), resultStatus, null, output, delta);\n+            end(AnyTypeKind.USER.name(), UnmatchingRule.toEventName(rule), resultStatus, null, output, delta);\n         }\n \n         return Optional.of(report);\n@@ -426,7 +425,8 @@ protected Optional<ProvisioningReport> update(\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"PullTask not configured for update\");\n-            end(AnyTypeKind.USER, MatchingRule.toEventName(MatchingRule.UPDATE), Result.SUCCESS, null, null, delta);\n+            end(AnyTypeKind.USER.name(),\n+                    MatchingRule.toEventName(MatchingRule.UPDATE), Result.SUCCESS, null, null, delta);\n             return Optional.empty();\n         }\n \n@@ -445,7 +445,7 @@ protected Optional<ProvisioningReport> update(\n \n             UserTO owner = userDataBinder.getUserTO(account.getOwner(), false);\n             UserCR connObject = connObjectUtils.getAnyCR(\n-                    delta.getObject(), profile.getTask(), provision, false);\n+                    delta.getObject(), profile.getTask(), AnyTypeKind.USER, provision, false);\n \n             LinkedAccountTO update = userDataBinder.getLinkedAccountTO(account);\n \n@@ -530,7 +530,8 @@ protected Optional<ProvisioningReport> update(\n                 }\n             }\n \n-            end(AnyTypeKind.USER, MatchingRule.toEventName(MatchingRule.UPDATE), resultStatus, before, output, delta);\n+            end(AnyTypeKind.USER.name(),\n+                    MatchingRule.toEventName(MatchingRule.UPDATE), resultStatus, before, output, delta);\n         }\n \n         return Optional.of(report);\n@@ -544,7 +545,8 @@ protected Optional<ProvisioningReport> delete(\n \n         if (!profile.getTask().isPerformDelete()) {\n             LOG.debug(\"PullTask not configured for delete\");\n-            end(AnyTypeKind.USER, ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);\n+            end(AnyTypeKind.USER.name(),\n+                    ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);\n             return Optional.empty();\n         }\n \n@@ -604,7 +606,7 @@ protected Optional<ProvisioningReport> delete(\n                     }\n                 }\n \n-                end(AnyTypeKind.USER,\n+                end(AnyTypeKind.USER.name(),\n                         ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, delta);\n             }\n         } catch (Exception e) {\n@@ -636,7 +638,7 @@ protected ProvisioningReport ignore(\n             report.setKey(account.getKey());\n         }\n \n-        end(AnyTypeKind.USER,\n+        end(AnyTypeKind.USER.name(),\n                 matching\n                         ? MatchingRule.toEventName(MatchingRule.IGNORE)\n                         : UnmatchingRule.toEventName(UnmatchingRule.IGNORE),"},{"sha":"9630ad4aae97e8354198d9f5f7ddac8ef8f6c123","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MatchType;\n@@ -37,7 +38,6 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -228,6 +228,7 @@ protected void doHandle(final LinkedAccount account, final Provision provision)\n                 profile.getConnector(),\n                 connObjectKeyItem,\n                 account.getConnObjectKeyValue(),\n+                profile.getTask().getResource(),\n                 provision,\n                 Optional.empty(),\n                 Optional.empty()));"},{"sha":"8ca7faeb212bab0dd095403ea4bc3be72f65a728","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":52,"deletions":31,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,15 +21,20 @@\n import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MatchType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PullMatch;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -43,16 +48,14 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n@@ -64,6 +67,7 @@\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SearchResult;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncDeltaBuilder;\n@@ -94,6 +98,8 @@ public class InboundMatcher {\n \n     protected final VirSchemaDAO virSchemaDAO;\n \n+    protected final ImplementationDAO implementationDAO;\n+\n     protected final VirAttrHandler virAttrHandler;\n \n     protected final IntAttrNameParser intAttrNameParser;\n@@ -107,6 +113,7 @@ public InboundMatcher(\n             final AnySearchDAO anySearchDAO,\n             final RealmDAO realmDAO,\n             final VirSchemaDAO virSchemaDAO,\n+            final ImplementationDAO implementationDAO,\n             final VirAttrHandler virAttrHandler,\n             final IntAttrNameParser intAttrNameParser,\n             final AnyUtilsFactory anyUtilsFactory) {\n@@ -117,30 +124,39 @@ public InboundMatcher(\n         this.anySearchDAO = anySearchDAO;\n         this.realmDAO = realmDAO;\n         this.virSchemaDAO = virSchemaDAO;\n+        this.implementationDAO = implementationDAO;\n         this.virAttrHandler = virAttrHandler;\n         this.intAttrNameParser = intAttrNameParser;\n         this.anyUtilsFactory = anyUtilsFactory;\n     }\n \n+    protected List<Implementation> getTransformers(final Item item) {\n+        return item.getTransformers().stream().\n+                map(implementationDAO::find).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n+    }\n+\n     public Optional<PullMatch> match(\n             final AnyType anyType,\n             final String nameValue,\n             final ExternalResource resource,\n             final Connector connector) {\n \n-        Optional<? extends Provision> provision = resource.getProvision(anyType);\n+        Optional<Provision> provision = resource.getProvision(anyType.getKey());\n         if (provision.isEmpty()) {\n             return Optional.empty();\n         }\n \n         Stream<Item> mapItems = Stream.concat(\n                 provision.get().getMapping().getItems().stream(),\n-                virSchemaDAO.findByProvision(provision.get()).stream().map(VirSchema::asLinkingMappingItem));\n+                virSchemaDAO.find(resource.getKey(), anyType.getKey()).stream().map(VirSchema::asLinkingMappingItem));\n \n         List<ConnectorObject> found = new ArrayList<>();\n \n         Name nameAttr = new Name(nameValue);\n-        connector.search(provision.get().getObjectClass(),\n+        connector.search(\n+                new ObjectClass(provision.get().getObjectClass()),\n                 provision.get().isIgnoreCaseMatch()\n                 ? FilterBuilder.equalsIgnoreCase(nameAttr)\n                 : FilterBuilder.equalTo(nameAttr),\n@@ -175,7 +191,9 @@ public boolean handle(final ConnectorObject connectorObject) {\n                                 setDeltaType(SyncDeltaType.CREATE_OR_UPDATE).\n                                 setObject(connObj).\n                                 build(),\n-                        provision.get());\n+                        resource,\n+                        provision.get(),\n+                        anyType.getKind());\n                 if (matches.isEmpty()) {\n                     LOG.debug(\"No matching {} found for {}, aborting\", anyType.getKind(), connObj);\n                 } else {\n@@ -194,19 +212,6 @@ public boolean handle(final ConnectorObject connectorObject) {\n         return result;\n     }\n \n-    public List<PullMatch> matchByConnObjectKeyValue(\n-            final Item connObjectKeyItem,\n-            final String connObjectKeyValue,\n-            final Provision provision) {\n-\n-        return matchByConnObjectKeyValue(\n-                connObjectKeyItem,\n-                connObjectKeyValue,\n-                provision.getAnyType().getKind(),\n-                provision.isIgnoreCaseMatch(),\n-                provision.getResource());\n-    }\n-\n     public List<PullMatch> matchByConnObjectKeyValue(\n             final Item connObjectKeyItem,\n             final String connObjectKeyValue,\n@@ -215,7 +220,9 @@ public List<PullMatch> matchByConnObjectKeyValue(\n             final ExternalResource resource) {\n \n         String finalConnObjectKeyValue = connObjectKeyValue;\n-        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n+        for (ItemTransformer transformer\n+                : MappingUtils.getItemTransformers(connObjectKeyItem, getTransformers(connObjectKeyItem))) {\n+\n             List<Object> output = transformer.beforePull(\n                     connObjectKeyItem,\n                     null,\n@@ -350,13 +357,20 @@ protected List<PullMatch> matchByCorrelationRule(\n      * Finds internal entities based on external attributes and mapping.\n      *\n      * @param syncDelta change operation, including external attributes\n+     * @param resource external resource\n      * @param provision mapping\n+     * @param anyTypeKind type kind\n      * @return list of matching users' / groups' / any objects' keys\n      */\n-    public List<PullMatch> match(final SyncDelta syncDelta, final Provision provision) {\n-        Optional<? extends PullCorrelationRuleEntity> correlationRule = provision.getResource().getPullPolicy() == null\n+    public List<PullMatch> match(\n+            final SyncDelta syncDelta,\n+            final ExternalResource resource,\n+            final Provision provision,\n+            final AnyTypeKind anyTypeKind) {\n+\n+        Optional<? extends PullCorrelationRuleEntity> correlationRule = resource.getPullPolicy() == null\n                 ? Optional.empty()\n-                : provision.getResource().getPullPolicy().getCorrelationRule(provision.getAnyType());\n+                : resource.getPullPolicy().getCorrelationRule(provision.getAnyType());\n \n         Optional<PullCorrelationRule> rule = Optional.empty();\n         if (correlationRule.isPresent()) {\n@@ -370,11 +384,11 @@ public List<PullMatch> match(final SyncDelta syncDelta, final Provision provisio\n         List<PullMatch> result = List.of();\n         try {\n             if (rule.isPresent()) {\n-                result = matchByCorrelationRule(syncDelta, provision, rule.get(), provision.getAnyType().getKind());\n+                result = matchByCorrelationRule(syncDelta, provision, rule.get(), anyTypeKind);\n             } else {\n                 String connObjectKeyValue = null;\n \n-                Optional<? extends Item> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n+                Optional<Item> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n                 if (connObjectKeyItem.isPresent()) {\n                     Attribute connObjectKeyAttr = syncDelta.getObject().\n                             getAttributeByName(connObjectKeyItem.get().getExtAttrName());\n@@ -389,11 +403,16 @@ public List<PullMatch> match(final SyncDelta syncDelta, final Provision provisio\n                 if (connObjectKeyValue == null) {\n                     result = List.of(PullCorrelationRule.NO_MATCH);\n                 } else {\n-                    result = matchByConnObjectKeyValue(connObjectKeyItem.get(), connObjectKeyValue, provision);\n+                    result = matchByConnObjectKeyValue(\n+                            connObjectKeyItem.get(),\n+                            connObjectKeyValue,\n+                            anyTypeKind,\n+                            provision.isIgnoreCaseMatch(),\n+                            resource);\n                 }\n             }\n         } catch (RuntimeException e) {\n-            LOG.error(\"Could not match {} with any existing {}\", syncDelta, provision.getAnyType().getKey(), e);\n+            LOG.error(\"Could not match {} with any existing {}\", syncDelta, provision.getAnyType(), e);\n         }\n \n         if (result.size() == 1 && result.get(0).getMatchTarget() == MatchType.ANY) {\n@@ -414,7 +433,7 @@ public List<PullMatch> match(final SyncDelta syncDelta, final Provision provisio\n     public List<Realm> match(final SyncDelta syncDelta, final OrgUnit orgUnit) {\n         String connObjectKey = null;\n \n-        Optional<? extends Item> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n+        Optional<Item> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n         if (connObjectKeyItem.isPresent()) {\n             Attribute connObjectKeyAttr = syncDelta.getObject().\n                     getAttributeByName(connObjectKeyItem.get().getExtAttrName());\n@@ -426,7 +445,9 @@ public List<Realm> match(final SyncDelta syncDelta, final OrgUnit orgUnit) {\n             return List.of();\n         }\n \n-        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem.get())) {\n+        for (ItemTransformer transformer\n+                : MappingUtils.getItemTransformers(connObjectKeyItem.get(), getTransformers(connObjectKeyItem.get()))) {\n+\n             List<Object> output = transformer.beforePull(\n                     connObjectKeyItem.get(),\n                     null,"},{"sha":"3815d16729d92bcb31a8dc55812002c1ddc88781","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -27,11 +27,11 @@\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PullMatch;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n@@ -164,8 +164,8 @@ public void after(\n             super.after(profile, delta, entity, result);\n         }\n \n-        Optional<? extends Provision> provision = profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).\n-                filter(p -> p.getMapping() != null);\n+        Optional<Provision> provision = profile.getTask().getResource().\n+                getProvision(anyTypeDAO.findUser().getKey()).filter(p -> p.getMapping() != null);\n         if (provision.isEmpty()) {\n             super.after(profile, delta, entity, result);\n         }"},{"sha":"d4a9c054599ebe8e67408c98ae7bb8da3ae54fe8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,12 +24,12 @@\n import javax.xml.bind.DatatypeConverter;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n@@ -57,7 +57,7 @@ public class LDAPPasswordPullActions implements PullActions {\n \n     @Override\n     public Set<String> moreAttrsToGet(final ProvisioningProfile<?, ?> profile, final Provision provision) {\n-        if (AnyTypeKind.USER == provision.getAnyType().getKind()) {\n+        if (AnyTypeKind.USER.name().equals(provision.getAnyType())) {\n             return Set.of(OperationalAttributes.PASSWORD_NAME);\n         }\n         return PullActions.super.moreAttrsToGet(profile, provision);"},{"sha":"39bee97727b6333f139a880c6d209c3c8a0d4513","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":39,"deletions":25,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,17 +26,17 @@\n import java.util.Set;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.LinkingMappingItem;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n@@ -47,6 +47,7 @@\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SearchResult;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.spi.SearchResultsHandler;\n@@ -82,10 +83,10 @@ public OutboundMatcher(\n         this.virAttrHandler = virAttrHandler;\n     }\n \n-    protected Optional<PushCorrelationRule> rule(final Provision provision) {\n-        Optional<? extends PushCorrelationRuleEntity> correlationRule = provision.getResource().getPushPolicy() == null\n+    protected Optional<PushCorrelationRule> rule(final ExternalResource resource, final Provision provision) {\n+        Optional<? extends PushCorrelationRuleEntity> correlationRule = resource.getPushPolicy() == null\n                 ? Optional.empty()\n-                : provision.getResource().getPushPolicy().getCorrelationRule(provision.getAnyType());\n+                : resource.getPushPolicy().getCorrelationRule(provision.getAnyType());\n \n         Optional<PushCorrelationRule> rule = Optional.empty();\n         if (correlationRule.isPresent()) {\n@@ -99,8 +100,12 @@ protected Optional<PushCorrelationRule> rule(final Provision provision) {\n         return rule;\n     }\n \n-    public String getFIQL(final ConnectorObject connectorObject, final Provision provision) {\n-        return rule(provision).\n+    public String getFIQL(\n+            final ConnectorObject connectorObject,\n+            final ExternalResource resource,\n+            final Provision provision) {\n+\n+        return rule(resource, provision).\n                 map(rule -> rule.getFIQL(connectorObject, provision)).\n                 orElseGet(() -> PushCorrelationRule.DEFAULT_FIQL_BUILDER.apply(connectorObject, provision));\n     }\n@@ -112,7 +117,7 @@ public List<ConnectorObject> match(\n             final List<PropagationActions> actions,\n             final String connObjectKeyValue) {\n \n-        Optional<PushCorrelationRule> rule = rule(provision);\n+        Optional<PushCorrelationRule> rule = rule(task.getResource(), provision);\n \n         boolean isLinkedAccount = task.getAnyTypeKind() == AnyTypeKind.USER\n                 && userDAO.linkedAccountExists(task.getEntityKey(), connObjectKeyValue);\n@@ -129,7 +134,8 @@ public List<ConnectorObject> match(\n             if (any != null && rule.isPresent()) {\n                 result.addAll(matchByCorrelationRule(\n                         connector,\n-                        rule.get().getFilter(any, provision),\n+                        rule.get().getFilter(any, task.getResource(), provision),\n+                        task.getResource(),\n                         provision,\n                         Optional.of(moreAttrsToGet.toArray(String[]::new)),\n                         Optional.empty()));\n@@ -138,6 +144,7 @@ public List<ConnectorObject> match(\n                         connector,\n                         connObjectKeyItem,\n                         connObjectKeyValue,\n+                        task.getResource(),\n                         provision,\n                         Optional.of(moreAttrsToGet.toArray(String[]::new)),\n                         Optional.empty())).ifPresent(result::add);\n@@ -157,12 +164,13 @@ public List<ConnectorObject> match(\n     public List<ConnectorObject> match(\n             final Connector connector,\n             final Any<?> any,\n+            final ExternalResource resource,\n             final Provision provision,\n             final Optional<String[]> moreAttrsToGet,\n-            final LinkingMappingItem... linkingItems) {\n+            final Item... linkingItems) {\n \n         Set<String> matgFromPropagationActions = new HashSet<>();\n-        provision.getResource().getPropagationActions().forEach(impl -> {\n+        resource.getPropagationActions().forEach(impl -> {\n             try {\n                 matgFromPropagationActions.addAll(\n                         ImplementationManager.<PropagationActions>build(impl).\n@@ -175,27 +183,29 @@ public List<ConnectorObject> match(\n                 moreAttrsToGet.stream().flatMap(Stream::of),\n                 matgFromPropagationActions.stream()).toArray(String[]::new));\n \n-        Optional<PushCorrelationRule> rule = rule(provision);\n+        Optional<PushCorrelationRule> rule = rule(resource, provision);\n \n         List<ConnectorObject> result = new ArrayList<>();\n         try {\n             if (rule.isPresent()) {\n                 result.addAll(matchByCorrelationRule(\n                         connector,\n-                        rule.get().getFilter(any, provision),\n+                        rule.get().getFilter(any, resource, provision),\n+                        resource,\n                         provision,\n                         effectiveMATG,\n                         ArrayUtils.isEmpty(linkingItems)\n                         ? Optional.empty() : Optional.of(List.of(linkingItems))));\n             } else {\n-                Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n-                Optional<String> connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, provision);\n+                Optional<Item> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n+                Optional<String> connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, resource, provision);\n \n                 if (connObjectKeyItem.isPresent() && connObjectKeyValue.isPresent()) {\n                     matchByConnObjectKeyValue(\n                             connector,\n                             connObjectKeyItem.get(),\n                             connObjectKeyValue.get(),\n+                            resource,\n                             provision,\n                             effectiveMATG,\n                             ArrayUtils.isEmpty(linkingItems)\n@@ -217,19 +227,21 @@ public List<ConnectorObject> match(\n     protected List<ConnectorObject> matchByCorrelationRule(\n             final Connector connector,\n             final Filter filter,\n+            final ExternalResource resource,\n             final Provision provision,\n             final Optional<String[]> moreAttrsToGet,\n-            final Optional<Collection<LinkingMappingItem>> linkingItems) {\n+            final Optional<Collection<Item>> linkingItems) {\n \n-        Stream<MappingItem> items = Stream.concat(\n+        Stream<Item> items = Stream.concat(\n                 provision.getMapping().getItems().stream(),\n                 linkingItems.isPresent()\n                 ? linkingItems.get().stream()\n-                : virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n+                : virSchemaDAO.find(resource.getKey(), provision.getAnyType()).stream().\n+                        map(VirSchema::asLinkingMappingItem));\n \n         List<ConnectorObject> objs = new ArrayList<>();\n         try {\n-            connector.search(provision.getObjectClass(), filter, new SearchResultsHandler() {\n+            connector.search(new ObjectClass(provision.getObjectClass()), filter, new SearchResultsHandler() {\n \n                 @Override\n                 public void handleResult(final SearchResult result) {\n@@ -255,22 +267,24 @@ public boolean handle(final ConnectorObject connectorObject) {\n     @Transactional(readOnly = true)\n     public Optional<ConnectorObject> matchByConnObjectKeyValue(\n             final Connector connector,\n-            final MappingItem connObjectKeyItem,\n+            final Item connObjectKeyItem,\n             final String connObjectKeyValue,\n+            final ExternalResource resource,\n             final Provision provision,\n             final Optional<String[]> moreAttrsToGet,\n-            final Optional<Collection<LinkingMappingItem>> linkingItems) {\n+            final Optional<Collection<Item>> linkingItems) {\n \n-        Stream<MappingItem> items = Stream.concat(\n+        Stream<Item> items = Stream.concat(\n                 provision.getMapping().getItems().stream(),\n                 linkingItems.isPresent()\n                 ? linkingItems.get().stream()\n-                : virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n+                : virSchemaDAO.find(resource.getKey(), provision.getAnyType()).stream().\n+                        map(VirSchema::asLinkingMappingItem));\n \n         ConnectorObject obj = null;\n         try {\n             obj = connector.getObject(\n-                    provision.getObjectClass(),\n+                    new ObjectClass(provision.getObjectClass()),\n                     AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKeyValue),\n                     provision.isIgnoreCaseMatch(),\n                     MappingUtils.buildOperationOptions(items, moreAttrsToGet.orElse(null)));"},{"sha":"8dd27604a2d27d9963ba4a4438d0da249fbedf79","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":46,"deletions":32,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,19 +29,21 @@\n import java.util.stream.Stream;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.MutablePair;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PullMatch;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -55,6 +57,7 @@\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullExecutor;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPullResultHandler;\n+import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.ImplementationManager;\n@@ -72,6 +75,9 @@ public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> i\n     @Autowired\n     protected GroupDAO groupDAO;\n \n+    @Autowired\n+    protected PlainSchemaDAO plainSchemaDAO;\n+\n     @Autowired\n     protected VirSchemaDAO virSchemaDAO;\n \n@@ -81,19 +87,19 @@ public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> i\n     @Autowired\n     protected AnyUtilsFactory anyUtilsFactory;\n \n-    protected final Map<ObjectClass, SyncToken> latestSyncTokens = new HashMap<>();\n+    protected final Map<String, SyncToken> latestSyncTokens = new HashMap<>();\n \n-    protected final Map<ObjectClass, MutablePair<Integer, String>> handled = new HashMap<>();\n+    protected final Map<String, MutablePair<Integer, String>> handled = new HashMap<>();\n \n     protected ProvisioningProfile<PullTask, PullActions> profile;\n \n     @Override\n-    public void setLatestSyncToken(final ObjectClass objectClass, final SyncToken latestSyncToken) {\n+    public void setLatestSyncToken(final String objectClass, final SyncToken latestSyncToken) {\n         latestSyncTokens.put(objectClass, latestSyncToken);\n     }\n \n     @Override\n-    public void reportHandled(final ObjectClass objectClass, final Name name) {\n+    public void reportHandled(final String objectClass, final Name name) {\n         MutablePair<Integer, String> pair = Optional.ofNullable(handled.get(objectClass)).orElseGet(() -> {\n             MutablePair<Integer, String> p = MutablePair.of(0, null);\n             handled.put(objectClass, p);\n@@ -119,7 +125,7 @@ public String currentStatus() {\n             if (!handled.isEmpty()) {\n                 StringBuilder builder = new StringBuilder(\"Processed:\\n\");\n                 handled.forEach((key, value) -> builder.append(' ').append(value.getLeft()).append('\\t').\n-                        append(key.getObjectClassValue()).\n+                        append(key).\n                         append(\" / latest: \").append(value.getRight()).\n                         append('\\n'));\n                 status.set(builder.toString());\n@@ -233,7 +239,7 @@ protected String doExecuteProvisioning(\n \n         // First realms...\n         if (pullTask.getResource().getOrgUnit() != null) {\n-            status.set(\"Pulling \" + pullTask.getResource().getOrgUnit().getObjectClass().getObjectClassValue());\n+            status.set(\"Pulling \" + pullTask.getResource().getOrgUnit().getObjectClass());\n \n             OrgUnit orgUnit = pullTask.getResource().getOrgUnit();\n \n@@ -250,32 +256,35 @@ protected String doExecuteProvisioning(\n                 switch (pullTask.getPullMode()) {\n                     case INCREMENTAL:\n                         if (!dryRun) {\n-                            latestSyncTokens.put(orgUnit.getObjectClass(), orgUnit.getSyncToken());\n+                            latestSyncTokens.put(\n+                                    orgUnit.getObjectClass(),\n+                                    ConnObjectUtils.toSyncToken(orgUnit.getSyncToken()));\n                         }\n \n-                        connector.sync(\n-                                orgUnit.getObjectClass(),\n-                                orgUnit.getSyncToken(),\n+                        connector.sync(new ObjectClass(orgUnit.getObjectClass()),\n+                                ConnObjectUtils.toSyncToken(orgUnit.getSyncToken()),\n                                 handler,\n                                 options);\n \n                         if (!dryRun) {\n-                            orgUnit.setSyncToken(latestSyncTokens.get(orgUnit.getObjectClass()));\n-                            resourceDAO.save(orgUnit.getResource());\n+                            orgUnit.setSyncToken(\n+                                    ConnObjectUtils.toString(latestSyncTokens.get(orgUnit.getObjectClass())));\n+                            resourceDAO.save(pullTask.getResource());\n                         }\n                         break;\n \n                     case FILTERED_RECONCILIATION:\n                         connector.filteredReconciliation(\n-                                orgUnit.getObjectClass(),\n+                                new ObjectClass(orgUnit.getObjectClass()),\n                                 buildReconFilterBuilder(pullTask),\n                                 handler,\n                                 options);\n                         break;\n \n                     case FULL_RECONCILIATION:\n                     default:\n-                        connector.fullReconciliation(orgUnit.getObjectClass(),\n+                        connector.fullReconciliation(\n+                                new ObjectClass(orgUnit.getObjectClass()),\n                                 handler,\n                                 options);\n                         break;\n@@ -300,10 +309,12 @@ protected String doExecuteProvisioning(\n                 filter(provision -> provision.getMapping() != null).sorted(provisionSorter).\n                 collect(Collectors.toList())) {\n \n-            status.set(\"Pulling \" + provision.getObjectClass().getObjectClassValue());\n+            status.set(\"Pulling \" + provision.getObjectClass());\n+\n+            AnyType anyType = anyTypeDAO.find(provision.getAnyType());\n \n             SyncopePullResultHandler handler;\n-            switch (provision.getAnyType().getKind()) {\n+            switch (anyType.getKind()) {\n                 case USER:\n                     handler = buildUserHandler();\n                     break;\n@@ -322,33 +333,37 @@ protected String doExecuteProvisioning(\n             try {\n                 Set<String> moreAttrsToGet = new HashSet<>();\n                 actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, provision)));\n-                Stream<? extends Item> mapItems = Stream.concat(\n+                Stream<Item> mapItems = Stream.concat(\n                         MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n-                        virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n+                        virSchemaDAO.find(pullTask.getResource().getKey(), anyType.getKey()).stream().\n+                                map(VirSchema::asLinkingMappingItem));\n                 OperationOptions options = MappingUtils.buildOperationOptions(\n                         mapItems, moreAttrsToGet.toArray(String[]::new));\n \n                 switch (pullTask.getPullMode()) {\n                     case INCREMENTAL:\n                         if (!dryRun) {\n-                            latestSyncTokens.put(provision.getObjectClass(), provision.getSyncToken());\n+                            latestSyncTokens.put(\n+                                    provision.getObjectClass(),\n+                                    ConnObjectUtils.toSyncToken(provision.getSyncToken()));\n                         }\n \n                         connector.sync(\n-                                provision.getObjectClass(),\n-                                provision.getSyncToken(),\n+                                new ObjectClass(provision.getObjectClass()),\n+                                ConnObjectUtils.toSyncToken(provision.getSyncToken()),\n                                 handler,\n                                 options);\n \n                         if (!dryRun) {\n-                            provision.setSyncToken(latestSyncTokens.get(provision.getObjectClass()));\n-                            resourceDAO.save(provision.getResource());\n+                            provision.setSyncToken(\n+                                    ConnObjectUtils.toString(latestSyncTokens.get(provision.getObjectClass())));\n+                            resourceDAO.save(pullTask.getResource());\n                         }\n                         break;\n \n                     case FILTERED_RECONCILIATION:\n                         connector.filteredReconciliation(\n-                                provision.getObjectClass(),\n+                                new ObjectClass(provision.getObjectClass()),\n                                 buildReconFilterBuilder(pullTask),\n                                 handler,\n                                 options);\n@@ -357,25 +372,24 @@ protected String doExecuteProvisioning(\n                     case FULL_RECONCILIATION:\n                     default:\n                         connector.fullReconciliation(\n-                                provision.getObjectClass(),\n+                                new ObjectClass(provision.getObjectClass()),\n                                 handler,\n                                 options);\n                         break;\n                 }\n \n                 if (provision.getUidOnCreate() != null) {\n-                    AnyUtils anyUtils = anyUtilsFactory.getInstance(provision.getAnyType().getKind());\n+                    AnyUtils anyUtils = anyUtilsFactory.getInstance(anyType.getKind());\n                     profile.getResults().stream().\n                             filter(result -> result.getUidValue() != null && result.getKey() != null\n                             && result.getOperation() == ResourceOperation.CREATE\n-                            && result.getAnyType().equals(provision.getAnyType().getKey())).\n+                            && result.getAnyType().equals(provision.getAnyType())).\n                             forEach(result -> anyUtils.addAttr(\n-                            result.getKey(), provision.getUidOnCreate(), result.getUidValue()));\n+                            result.getKey(), plainSchemaDAO.find(provision.getUidOnCreate()), result.getUidValue()));\n                 }\n             } catch (Throwable t) {\n                 throw new JobExecutionException(\"While pulling from connector\", t);\n             }\n-\n         }\n         try {\n             setGroupOwners(ghandler);"},{"sha":"b6dcf6932d9d5f86e3c245e35ce4e430cf1d9c11","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -28,18 +28,19 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.MutablePair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTaskAnyFilter;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -220,12 +221,14 @@ protected String doExecuteProvisioning(\n                 filter(provision -> provision.getMapping() != null).sorted(provisionSorter).\n                 collect(Collectors.toList())) {\n \n-            status.set(\"Pushing \" + provision.getAnyType().getKey());\n+            status.set(\"Pushing \" + provision.getAnyType());\n \n-            AnyDAO<?> anyDAO = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).dao();\n+            AnyType anyType = anyTypeDAO.find(provision.getAnyType());\n+\n+            AnyDAO<?> anyDAO = anyUtilsFactory.getInstance(anyType.getKind()).dao();\n \n             SyncopePushResultHandler handler;\n-            switch (provision.getAnyType().getKind()) {\n+            switch (anyType.getKind()) {\n                 case USER:\n                     handler = buildUserHandler();\n                     break;\n@@ -240,7 +243,7 @@ protected String doExecuteProvisioning(\n             }\n             handler.setProfile(profile);\n \n-            Optional<? extends PushTaskAnyFilter> anyFilter = pushTask.getFilter(provision.getAnyType());\n+            Optional<? extends PushTaskAnyFilter> anyFilter = pushTask.getFilter(anyType);\n             String filter = anyFilter.map(PushTaskAnyFilter::getFIQLCond).orElse(null);\n             SearchCond cond = StringUtils.isBlank(filter)\n                     ? anyDAO.getAllMatchingCond()\n@@ -250,7 +253,7 @@ protected String doExecuteProvisioning(\n                     true,\n                     Set.of(profile.getTask().getSourceRealm().getFullPath()),\n                     cond,\n-                    provision.getAnyType().getKind());\n+                    anyType.getKind());\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1 && !interrupt; page++) {\n                 List<? extends Any<?>> anys = searchDAO.search(\n                         profile.getTask().getSourceRealm(),\n@@ -260,7 +263,7 @@ protected String doExecuteProvisioning(\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n                         List.of(),\n-                        provision.getAnyType().getKind());\n+                        anyType.getKind());\n                 doHandle(anys, handler, pushTask.getResource());\n             }\n         }"},{"sha":"390dcbcd8d020d150c0dac985bdbbab05069a1fa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":17,"deletions":11,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,6 +23,8 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Stream;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -34,10 +36,9 @@\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -50,27 +51,29 @@\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n \n public class SinglePullJobDelegate extends PullJobDelegate implements SyncopeSinglePullExecutor {\n \n     @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected ImplementationDAO implementationDAO;\n \n     @Autowired\n-    private RealmDAO realmDAO;\n+    protected RealmDAO realmDAO;\n \n     @Override\n     public List<ProvisioningReport> pull(\n+            final ExternalResource resource,\n             final Provision provision,\n             final Connector connector,\n             final ReconFilterBuilder reconFilterBuilder,\n             final Set<String> moreAttrsToGet,\n             final PullTaskTO pullTaskTO,\n             final String executor) throws JobExecutionException {\n \n-        LOG.debug(\"Executing pull on {}\", provision.getResource());\n+        LOG.debug(\"Executing pull on {}\", resource);\n \n         List<PullActions> actions = new ArrayList<>();\n         pullTaskTO.getActions().forEach(key -> {\n@@ -88,7 +91,7 @@ public List<ProvisioningReport> pull(\n \n         try {\n             PullTask pullTask = entityFactory.newEntity(PullTask.class);\n-            pullTask.setResource(provision.getResource());\n+            pullTask.setResource(resource);\n             pullTask.setMatchingRule(pullTaskTO.getMatchingRule() == null\n                     ? MatchingRule.UPDATE : pullTaskTO.getMatchingRule());\n             pullTask.setUnmatchingRule(pullTaskTO.getUnmatchingRule() == null\n@@ -107,7 +110,7 @@ public List<ProvisioningReport> pull(\n                 if (anyType == null) {\n                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n                 } else {\n-                    AnyTemplatePullTask anyTemplate = pullTask.getTemplate(anyType).orElse(null);\n+                    AnyTemplatePullTask anyTemplate = pullTask.getTemplate(anyType.getKey()).orElse(null);\n                     if (anyTemplate == null) {\n                         anyTemplate = entityFactory.newEntity(AnyTemplatePullTask.class);\n                         anyTemplate.setAnyType(anyType);\n@@ -129,9 +132,11 @@ public List<ProvisioningReport> pull(\n                 action.beforeAll(profile);\n             }\n \n+            AnyType anyType = anyTypeDAO.find(provision.getAnyType());\n+\n             SyncopePullResultHandler handler;\n             GroupPullResultHandler ghandler = buildGroupHandler();\n-            switch (provision.getAnyType().getKind()) {\n+            switch (anyType.getKind()) {\n                 case USER:\n                     handler = buildUserHandler();\n                     break;\n@@ -151,12 +156,13 @@ public List<ProvisioningReport> pull(\n             Set<String> matg = new HashSet<>(moreAttrsToGet);\n             actions.forEach(action -> matg.addAll(action.moreAttrsToGet(profile, provision)));\n \n-            Stream<? extends Item> mapItems = Stream.concat(\n+            Stream<Item> mapItems = Stream.concat(\n                     MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n-                    virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n+                    virSchemaDAO.find(pullTask.getResource().getKey(), anyType.getKey()).stream().\n+                            map(VirSchema::asLinkingMappingItem));\n \n             connector.filteredReconciliation(\n-                    provision.getObjectClass(),\n+                    new ObjectClass(provision.getObjectClass()),\n                     reconFilterBuilder,\n                     handler,\n                     MappingUtils.buildOperationOptions(mapItems, matg.toArray(String[]::new)));"},{"sha":"6c8685ec5913d560fb3143530cce4f6a17576923","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n@@ -28,8 +29,9 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -45,15 +47,15 @@\n public class SinglePushJobDelegate extends PushJobDelegate implements SyncopeSinglePushExecutor {\n \n     @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected ImplementationDAO implementationDAO;\n \n-    private List<PushActions> before(\n-            final Provision provision,\n+    protected List<PushActions> before(\n+            final ExternalResource resource,\n             final Connector connector,\n             final PushTaskTO pushTaskTO,\n             final String executor) throws JobExecutionException {\n \n-        LOG.debug(\"Executing push on {}\", provision.getResource());\n+        LOG.debug(\"Executing push on {}\", resource);\n \n         List<PushActions> actions = new ArrayList<>();\n         pushTaskTO.getActions().forEach(key -> {\n@@ -70,7 +72,7 @@ private List<PushActions> before(\n         });\n \n         PushTask pushTask = entityFactory.newEntity(PushTask.class);\n-        pushTask.setResource(provision.getResource());\n+        pushTask.setResource(resource);\n         pushTask.setMatchingRule(pushTaskTO.getMatchingRule() == null\n                 ? MatchingRule.LINK : pushTaskTO.getMatchingRule());\n         pushTask.setUnmatchingRule(pushTaskTO.getUnmatchingRule() == null\n@@ -94,17 +96,20 @@ private List<PushActions> before(\n \n     @Override\n     public List<ProvisioningReport> push(\n+            final ExternalResource resource,\n             final Provision provision,\n             final Connector connector,\n             final Any<?> any,\n             final PushTaskTO pushTaskTO,\n             final String executor) throws JobExecutionException {\n \n         try {\n-            List<PushActions> actions = before(provision, connector, pushTaskTO, executor);\n+            List<PushActions> actions = before(resource, connector, pushTaskTO, executor);\n+\n+            AnyType anyType = anyTypeDAO.find(provision.getAnyType());\n \n             SyncopePushResultHandler handler;\n-            switch (provision.getAnyType().getKind()) {\n+            switch (anyType.getKind()) {\n                 case USER:\n                     handler = buildUserHandler();\n                     break;\n@@ -119,7 +124,7 @@ public List<ProvisioningReport> push(\n             }\n             handler.setProfile(profile);\n \n-            doHandle(List.of(any), handler, provision.getResource());\n+            doHandle(List.of(any), handler, resource);\n \n             for (PushActions action : actions) {\n                 action.afterAll(profile);\n@@ -135,14 +140,15 @@ public List<ProvisioningReport> push(\n \n     @Override\n     public ProvisioningReport push(\n+            final ExternalResource resource,\n             final Provision provision,\n             final Connector connector,\n             final LinkedAccount account,\n             final PushTaskTO pushTaskTO,\n             final String executor) throws JobExecutionException {\n \n         try {\n-            List<PushActions> actions = before(provision, connector, pushTaskTO, executor);\n+            List<PushActions> actions = before(resource, connector, pushTaskTO, executor);\n \n             UserPushResultHandler handler = buildUserHandler();\n             handler.setProfile(profile);"},{"sha":"39146e5ea77a78db2427dd9f1355f65f41cc4caa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamAnyObjectPushResultHandler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,11 +21,11 @@\n import java.util.Set;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n@@ -44,10 +44,10 @@ public class StreamAnyObjectPushResultHandler extends DefaultAnyObjectPushResult\n     protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n         Provision provision = profile.getTask().getResource().getProvisions().get(0);\n \n-        Stream<? extends Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n+        Stream<Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n \n         Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromAny(\n-                any, null, false, enabled, provision);\n+                any, null, false, enabled, profile.getTask().getResource(), provision);\n \n         PropagationTaskInfo propagationTask = propagationManager.newTask(\n                 derAttrHandler,"},{"sha":"19c3202533ace29a414eb0f05b7afd7091b49b76","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamGroupPushResultHandler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,11 +21,11 @@\n import java.util.Set;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n@@ -44,10 +44,10 @@ public class StreamGroupPushResultHandler extends DefaultGroupPushResultHandler\n     protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n         Provision provision = profile.getTask().getResource().getProvisions().get(0);\n \n-        Stream<? extends Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n+        Stream<Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n \n         Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromAny(\n-                any, null, false, enabled, provision);\n+                any, null, false, enabled, profile.getTask().getResource(), provision);\n \n         PropagationTaskInfo propagationTask = propagationManager.newTask(\n                 derAttrHandler,"},{"sha":"b7cb57ac5012164425dd42a7c0a52ceb3d56fe5c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPullJobDelegate.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,6 +23,9 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Stream;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n@@ -34,16 +37,12 @@\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.GroupPullResultHandler;\n@@ -103,13 +102,12 @@ private Provision provision(\n             final String keyColumn,\n             final List<String> columns) throws JobExecutionException {\n \n-        Provision provision = entityFactory.newEntity(Provision.class);\n-        provision.setAnyType(anyType);\n-        provision.setObjectClass(new ObjectClass(anyType.getKey()));\n+        Provision provision = new Provision();\n+        provision.setAnyType(anyType.getKey());\n+        provision.setObjectClass(anyType.getKey());\n \n-        Mapping mapping = entityFactory.newEntity(Mapping.class);\n+        Mapping mapping = new Mapping();\n         provision.setMapping(mapping);\n-        mapping.setProvision(provision);\n \n         AnyUtils anyUtils = anyUtilsFactory.getInstance(anyType.getKind());\n         if (anyUtils.getField(keyColumn) == null) {\n@@ -119,7 +117,7 @@ private Provision provision(\n             }\n         }\n \n-        MappingItem connObjectKeyItem = entityFactory.newEntity(MappingItem.class);\n+        Item connObjectKeyItem = new Item();\n         connObjectKeyItem.setExtAttrName(keyColumn);\n         connObjectKeyItem.setIntAttrName(keyColumn);\n         connObjectKeyItem.setPurpose(MappingPurpose.PULL);\n@@ -129,7 +127,7 @@ private Provision provision(\n                 filter(column -> anyUtils.getField(column) != null\n                 || plainSchemaDAO.find(column) != null || virSchemaDAO.find(column) != null).\n                 map(column -> {\n-                    MappingItem item = entityFactory.newEntity(MappingItem.class);\n+                    Item item = new Item();\n                     item.setExtAttrName(column);\n                     item.setIntAttrName(column);\n                     item.setPurpose(MappingPurpose.PULL);\n@@ -151,8 +149,7 @@ private ExternalResource externalResource(\n \n         ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"StreamPull_\" + SecureRandomUtils.generateRandomUUID().toString());\n-        resource.add(provision);\n-        provision.setResource(resource);\n+        resource.getProvisions().add(provision);\n \n         resource.setPullPolicy(pullPolicy(anyType, conflictResolutionAction, pullCorrelationRule));\n \n@@ -233,12 +230,13 @@ public List<ProvisioningReport> pull(\n             Set<String> moreAttrsToGet = new HashSet<>();\n             actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, provision)));\n \n-            Stream<? extends Item> mapItems = Stream.concat(\n+            Stream<Item> mapItems = Stream.concat(\n                     MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n-                    virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n+                    virSchemaDAO.find(resource.getKey(), anyType.getKey()).stream().\n+                            map(VirSchema::asLinkingMappingItem));\n \n             connector.fullReconciliation(\n-                    provision.getObjectClass(),\n+                    new ObjectClass(provision.getObjectClass()),\n                     handler,\n                     MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(String[]::new)));\n "},{"sha":"14bf80104fd8314ce99504afd201465728cd5edc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPushJobDelegate.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,6 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n@@ -28,11 +31,8 @@\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPushResultHandler;\n@@ -46,7 +46,6 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n@@ -79,22 +78,21 @@ private ExternalResource externalResource(\n             final List<String> columns,\n             final List<String> propagationActions) throws JobExecutionException {\n \n-        Provision provision = entityFactory.newEntity(Provision.class);\n-        provision.setAnyType(anyType);\n-        provision.setObjectClass(new ObjectClass(anyType.getKey()));\n+        Provision provision = new Provision();\n+        provision.setAnyType(anyType.getKey());\n+        provision.setObjectClass(anyType.getKey());\n \n-        Mapping mapping = entityFactory.newEntity(Mapping.class);\n+        Mapping mapping = new Mapping();\n         provision.setMapping(mapping);\n-        mapping.setProvision(provision);\n \n-        MappingItem connObjectKeyItem = entityFactory.newEntity(MappingItem.class);\n+        Item connObjectKeyItem = new Item();\n         connObjectKeyItem.setExtAttrName(\"key\");\n         connObjectKeyItem.setIntAttrName(\"key\");\n         connObjectKeyItem.setPurpose(MappingPurpose.NONE);\n         mapping.setConnObjectKeyItem(connObjectKeyItem);\n \n         columns.stream().map(column -> {\n-            MappingItem item = entityFactory.newEntity(MappingItem.class);\n+            Item item = new Item();\n             item.setExtAttrName(column);\n             item.setIntAttrName(column);\n             item.setPurpose(MappingPurpose.PROPAGATION);\n@@ -104,8 +102,7 @@ private ExternalResource externalResource(\n \n         ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"StreamPush_\" + SecureRandomUtils.generateRandomUUID().toString());\n-        resource.add(provision);\n-        provision.setResource(resource);\n+        resource.getProvisions().add(provision);\n \n         propagationActions.forEach(key -> {\n             Implementation impl = implementationDAO.find(key);\n@@ -147,7 +144,6 @@ public List<ProvisioningReport> push(\n \n         try {\n             ExternalResource resource = externalResource(anyType, columns, propagationActions);\n-            Provision provision = resource.getProvisions().get(0);\n \n             PushTask pushTask = entityFactory.newEntity(PushTask.class);\n             pushTask.setResource(resource);\n@@ -168,7 +164,7 @@ public List<ProvisioningReport> push(\n             }\n \n             SyncopePushResultHandler handler;\n-            switch (provision.getAnyType().getKind()) {\n+            switch (anyType.getKind()) {\n                 case USER:\n                     handler = buildUserHandler();\n                     break;\n@@ -183,7 +179,7 @@ public List<ProvisioningReport> push(\n             }\n             handler.setProfile(profile);\n \n-            doHandle(anys, handler, provision.getResource());\n+            doHandle(anys, handler, resource);\n \n             for (PushActions action : pushActions) {\n                 action.afterAll(profile);"},{"sha":"e60eefef9e59eefb3a3823d0252c48c4ad6cd727","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamUserPushResultHandler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,11 +21,11 @@\n import java.util.Set;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n@@ -44,10 +44,10 @@ public class StreamUserPushResultHandler extends DefaultUserPushResultHandler {\n     protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n         Provision provision = profile.getTask().getResource().getProvisions().get(0);\n \n-        Stream<? extends Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n+        Stream<Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n \n         Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromAny(\n-                any, null, false, enabled, provision);\n+                any, null, false, enabled, profile.getTask().getResource(), provision);\n \n         PropagationTaskInfo propagationTask = propagationManager.newTask(\n                 derAttrHandler,"},{"sha":"cdca6314175f99af1d3218553256fce2ed4c4c85","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":44,"deletions":29,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,6 +23,7 @@\n import java.util.Base64;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -34,29 +35,31 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.common.security.SecurityUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Transactional;\n@@ -68,6 +71,14 @@ public class ConnObjectUtils {\n \n     protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n+    public static SyncToken toSyncToken(final String syncToken) {\n+        return Optional.ofNullable(syncToken).map(st -> POJOHelper.deserialize(st, SyncToken.class)).orElse(null);\n+    }\n+\n+    public static String toString(final SyncToken syncToken) {\n+        return Optional.ofNullable(syncToken).map(POJOHelper::serialize).orElse(null);\n+    }\n+\n     /**\n      * Extract password value from passed value (if instance of GuardedString or GuardedByteArray).\n      *\n@@ -91,14 +102,14 @@ public static String getPassword(final Object pwd) {\n     }\n \n     /**\n-     * Builds {@link ConnObjectTO} out of a collection of {@link Attribute} instances.\n+     * Builds {@link ConnObject} out of a collection of {@link Attribute} instances.\n      *\n      * @param fiql FIQL expression to uniquely identify the given Connector Object\n      * @param attrs attributes\n      * @return transfer object\n      */\n-    public static ConnObjectTO getConnObjectTO(final String fiql, final Set<Attribute> attrs) {\n-        ConnObjectTO connObjectTO = new ConnObjectTO();\n+    public static ConnObject getConnObjectTO(final String fiql, final Set<Attribute> attrs) {\n+        ConnObject connObjectTO = new ConnObject();\n         connObjectTO.setFiql(fiql);\n \n         if (!CollectionUtils.isEmpty(attrs)) {\n@@ -162,6 +173,7 @@ public ConnObjectUtils(\n      *\n      * @param obj connector object\n      * @param pullTask pull task\n+     * @param anyTypeKind any type kind\n      * @param provision provision information\n      * @param generatePasswordIfPossible whether password value shall be generated, in case not found from\n      * connector object and allowed by resource configuration\n@@ -172,17 +184,18 @@ public ConnObjectUtils(\n     public <C extends AnyCR> C getAnyCR(\n             final ConnectorObject obj,\n             final PullTask pullTask,\n+            final AnyTypeKind anyTypeKind,\n             final Provision provision,\n             final boolean generatePasswordIfPossible) {\n \n-        AnyTO anyTO = getAnyTOFromConnObject(obj, pullTask, provision);\n-        C anyCR = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).newAnyCR();\n+        AnyTO anyTO = getAnyTOFromConnObject(obj, pullTask, anyTypeKind, provision);\n+        C anyCR = anyUtilsFactory.getInstance(anyTypeKind).newAnyCR();\n         EntityTOUtils.toAnyCR(anyTO, anyCR);\n \n         // (for users) if password was not set above, generate if resource is configured for that\n         if (anyCR instanceof UserCR\n                 && StringUtils.isBlank(((UserCR) anyCR).getPassword())\n-                && generatePasswordIfPossible && provision.getResource().isRandomPwdIfNotProvided()) {\n+                && generatePasswordIfPossible && pullTask.getResource().isRandomPwdIfNotProvided()) {\n \n             UserCR userCR = (UserCR) anyCR;\n             List<PasswordPolicy> passwordPolicies = new ArrayList<>();\n@@ -195,9 +208,9 @@ public <C extends AnyCR> C getAnyCR(\n             }\n \n             userCR.getResources().stream().\n-                    map(resource -> resourceDAO.find(resource)).\n-                    filter(resource -> resource != null && resource.getPasswordPolicy() != null).\n-                    forEach(resource -> passwordPolicies.add(resource.getPasswordPolicy()));\n+                    map(resourceDAO::find).\n+                    filter(r -> r != null && r.getPasswordPolicy() != null).\n+                    forEach(r -> passwordPolicies.add(r.getPasswordPolicy()));\n \n             userCR.setPassword(passwordGenerator.generate(passwordPolicies));\n         }\n@@ -208,8 +221,9 @@ public <C extends AnyCR> C getAnyCR(\n     public RealmTO getRealmTO(final ConnectorObject obj, final OrgUnit orgUnit) {\n         RealmTO realmTO = new RealmTO();\n \n-        MappingUtils.getPullItems(orgUnit.getItems().stream()).forEach(item\n-                -> mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), realmTO));\n+        MappingUtils.getPullItems(orgUnit.getItems().stream()).\n+                forEach(item -> mappingManager.setIntValues(\n+                item, obj.getAttributeByName(item.getExtAttrName()), realmTO));\n \n         return realmTO;\n     }\n@@ -221,6 +235,7 @@ public RealmTO getRealmTO(final ConnectorObject obj, final OrgUnit orgUnit) {\n      * @param obj connector object\n      * @param original any object to get diff from\n      * @param pullTask pull task\n+     * @param anyTypeKind any type kind\n      * @param provision provision information\n      * @param <U> any object\n      * @return modifications for the any object to be updated\n@@ -232,14 +247,15 @@ public <U extends AnyUR> U getAnyUR(\n             final ConnectorObject obj,\n             final AnyTO original,\n             final PullTask pullTask,\n+            final AnyTypeKind anyTypeKind,\n             final Provision provision) {\n \n-        AnyTO updated = getAnyTOFromConnObject(obj, pullTask, provision);\n+        AnyTO updated = getAnyTOFromConnObject(obj, pullTask, anyTypeKind, provision);\n         updated.setKey(key);\n \n-        U anyUR = null;\n-        switch (provision.getAnyType().getKind()) {\n-            case USER:\n+        U anyUR;\n+        switch (provision.getAnyType()) {\n+            case \"USER\":\n                 UserTO originalUser = (UserTO) original;\n                 UserTO updatedUser = (UserTO) updated;\n \n@@ -265,7 +281,7 @@ public <U extends AnyUR> U getAnyUR(\n                 anyUR = (U) AnyOperations.diff(updatedUser, originalUser, true);\n                 break;\n \n-            case GROUP:\n+            case \"GROUP\":\n                 GroupTO originalGroup = (GroupTO) original;\n                 GroupTO updatedGroup = (GroupTO) updated;\n \n@@ -281,7 +297,7 @@ public <U extends AnyUR> U getAnyUR(\n                 anyUR = (U) AnyOperations.diff(updatedGroup, originalGroup, true);\n                 break;\n \n-            case ANY_OBJECT:\n+            default:\n                 AnyObjectTO originalAnyObject = (AnyObjectTO) original;\n                 AnyObjectTO updatedAnyObject = (AnyObjectTO) updated;\n \n@@ -290,9 +306,6 @@ public <U extends AnyUR> U getAnyUR(\n                 }\n \n                 anyUR = (U) AnyOperations.diff(updatedAnyObject, originalAnyObject, true);\n-                break;\n-\n-            default:\n         }\n \n         if (anyUR != null) {\n@@ -306,12 +319,14 @@ public <U extends AnyUR> U getAnyUR(\n     }\n \n     protected <T extends AnyTO> T getAnyTOFromConnObject(\n-            final ConnectorObject obj, final PullTask pullTask, final Provision provision) {\n+            final ConnectorObject obj,\n+            final PullTask pullTask,\n+            final AnyTypeKind anyTypeKind,\n+            final Provision provision) {\n \n-        T anyTO = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).newAnyTO();\n-        anyTO.setType(provision.getAnyType().getKey());\n-        anyTO.getAuxClasses().addAll(provision.getAuxClasses().stream().\n-                map(AnyTypeClass::getKey).collect(Collectors.toList()));\n+        T anyTO = anyUtilsFactory.getInstance(anyTypeKind).newAnyTO();\n+        anyTO.setType(provision.getAnyType());\n+        anyTO.getAuxClasses().addAll(provision.getAuxClasses());\n \n         // 1. fill with data from connector object\n         anyTO.setRealm(pullTask.getDestinationRealm().getFullPath());"},{"sha":"bf48dc0a2ac6e889e50a9a57d187856fb4fb3512","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,11 +26,11 @@\n import java.util.stream.Stream;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.data.JEXLItemTransformer;\n import org.apache.syncope.core.provisioning.java.data.JEXLItemTransformerImpl;\n@@ -49,7 +49,7 @@ public final class MappingUtils {\n \n     private static final Logger LOG = LoggerFactory.getLogger(MappingUtils.class);\n \n-    public static Optional<? extends MappingItem> getConnObjectKeyItem(final Provision provision) {\n+    public static Optional<Item> getConnObjectKeyItem(final Provision provision) {\n         Mapping mapping = null;\n         if (provision != null) {\n             mapping = provision.getMapping();\n@@ -60,17 +60,20 @@ public static Optional<? extends MappingItem> getConnObjectKeyItem(final Provisi\n                 : mapping.getConnObjectKeyItem();\n     }\n \n-    public static Stream<? extends Item> getPropagationItems(final Stream<? extends Item> items) {\n+    public static Stream<Item> getPropagationItems(final Stream<Item> items) {\n         return items.filter(\n                 item -> item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH);\n     }\n \n-    public static Stream<? extends Item> getPullItems(final Stream<? extends Item> items) {\n+    public static Stream<Item> getPullItems(final Stream<Item> items) {\n         return items.filter(\n                 item -> item.getPurpose() == MappingPurpose.PULL || item.getPurpose() == MappingPurpose.BOTH);\n     }\n \n-    public static List<ItemTransformer> getItemTransformers(final Item item) {\n+    public static List<ItemTransformer> getItemTransformers(\n+            final Item item,\n+            final List<Implementation> transformers) {\n+\n         List<ItemTransformer> result = new ArrayList<>();\n \n         // First consider the JEXL transformation expressions\n@@ -86,7 +89,7 @@ public static List<ItemTransformer> getItemTransformers(final Item item) {\n         }\n \n         // Then other custom transformers\n-        item.getTransformers().forEach(impl -> {\n+        transformers.forEach(impl -> {\n             try {\n                 result.add(ImplementationManager.build(impl));\n             } catch (Exception e) {\n@@ -106,7 +109,7 @@ public static List<ItemTransformer> getItemTransformers(final Item item) {\n      * @see OperationOptions\n      */\n     public static OperationOptions buildOperationOptions(\n-            final Stream<? extends Item> items,\n+            final Stream<Item> items,\n             final String... moreAttrsToGet) {\n \n         OperationOptionsBuilder builder = new OperationOptionsBuilder();"},{"sha":"86f038a4b4d5cd46d36d5c9e61dcf850257fa153","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DefaultMappingManagerTest.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -27,6 +27,7 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n@@ -37,9 +38,8 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n@@ -98,6 +98,7 @@ public void prepareAttrsForUser() {\n                 \"Password123\",\n                 true,\n                 Boolean.TRUE,\n+                ldap,\n                 provision);\n         assertEquals(\"bellini\", attrs.getLeft());\n         assertEquals(\n@@ -111,6 +112,7 @@ public void prepareAttrsForUser() {\n                 \"Password123\",\n                 false,\n                 Boolean.TRUE,\n+                ldap,\n                 provision);\n         assertNull(AttributeUtil.getPasswordValue(attrs.getRight()));\n \n@@ -125,6 +127,7 @@ public void prepareAttrsForUser() {\n                 null,\n                 true,\n                 Boolean.TRUE,\n+                ldap,\n                 provision);\n         assertNotEquals(encPassword, SecurityUtil.decrypt(AttributeUtil.getPasswordValue(attrs.getRight())));\n \n@@ -138,6 +141,7 @@ public void prepareAttrsForUser() {\n                 null,\n                 true,\n                 Boolean.TRUE,\n+                ldap,\n                 provision);\n         assertNull(AttributeUtil.getPasswordValue(attrs.getRight()));\n \n@@ -154,6 +158,7 @@ public void prepareAttrsForUser() {\n                 null,\n                 true,\n                 Boolean.TRUE,\n+                ldap,\n                 provision);\n         assertEquals(\"newPassword123\", SecurityUtil.decrypt(AttributeUtil.getPasswordValue(attrs.getRight())));\n     }\n@@ -280,6 +285,7 @@ public void issueSYNCOPE1583() {\n                 null,\n                 false,\n                 Boolean.TRUE,\n+                csv,\n                 provision);\n         assertTrue(attrs.getRight().stream().anyMatch(\n                 attr -> \"theirgroup\".equals(attr.getName()) && List.of(\"sx-dx\").equals(attr.getValue())));"},{"sha":"14f08b61d34ac49c5f936a5a84c88e771ca49cb6","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderTest.java","status":"modified","additions":19,"deletions":20,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -26,19 +26,18 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n import org.apache.syncope.core.provisioning.java.AbstractTest;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n@@ -90,12 +89,12 @@ public static void unsetAuthContext() {\n     public void issue42() {\n         PlainSchema userId = plainSchemaDAO.find(\"userId\");\n \n-        Set<MappingItem> beforeUserIdMappings = new HashSet<>();\n+        Set<Item> beforeUserIdMappings = new HashSet<>();\n         for (ExternalResource res : resourceDAO.findAll()) {\n-            if (res.getProvision(anyTypeDAO.findUser()).isPresent()\n-                    && res.getProvision(anyTypeDAO.findUser()).get().getMapping() != null) {\n+            if (res.getProvision(anyTypeDAO.findUser().getKey()).isPresent()\n+                    && res.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping() != null) {\n \n-                for (MappingItem mapItem : res.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n+                for (Item mapItem : res.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems()) {\n                     if (userId.getKey().equals(mapItem.getIntAttrName())) {\n                         beforeUserIdMappings.add(mapItem);\n                     }\n@@ -108,15 +107,15 @@ public void issue42() {\n         resourceTO.setConnector(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\");\n         resourceTO.setEnforceMandatoryCondition(true);\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n+        Provision provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n         provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setIntAttrName(\"userId\");\n         item.setExtAttrName(\"campo1\");\n         item.setConnObjectKey(true);\n@@ -126,24 +125,24 @@ public void issue42() {\n \n         ExternalResource resource = resourceDataBinder.create(resourceTO);\n         resource = resourceDAO.save(resource);\n-        assertNotNull(resource);\n-        assertNotNull(resource.getProvision(anyTypeDAO.findUser()).get().getMapping());\n-        assertEquals(1, resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());\n-\n         entityManager().flush();\n+        assertNotNull(resource);\n+        assertNotNull(resource.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping());\n+        assertEquals(1, resource.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size());\n \n         ExternalResource actual = resourceDAO.find(\"resource-issue42\");\n+        entityManager().flush();\n         assertNotNull(actual);\n         assertEquals(resource, actual);\n \n         userId = plainSchemaDAO.find(\"userId\");\n \n-        Set<MappingItem> afterUserIdMappings = new HashSet<>();\n+        Set<Item> afterUserIdMappings = new HashSet<>();\n         for (ExternalResource res : resourceDAO.findAll()) {\n-            if (res.getProvision(anyTypeDAO.findUser()).isPresent()\n-                    && res.getProvision(anyTypeDAO.findUser()).get().getMapping() != null) {\n+            if (res.getProvision(anyTypeDAO.findUser().getKey()).isPresent()\n+                    && res.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping() != null) {\n \n-                for (MappingItem mapItem : res.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n+                for (Item mapItem : res.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems()) {\n                     if (userId.getKey().equals(mapItem.getIntAttrName())) {\n                         afterUserIdMappings.add(mapItem);\n                     }"},{"sha":"3e4e55f4cf68006bcdfd3af59578c452adb1435d","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActionsTest.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -39,8 +39,10 @@\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.MatchType;\n@@ -50,8 +52,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -151,7 +152,11 @@ public void initTest() {\n \n         lenient().when(profile.getTask()).thenReturn(provisioningTask);\n         lenient().when(provisioningTask.getResource()).thenReturn(externalResource);\n-        lenient().when(anyTypeDAO.findUser()).thenReturn(entityFactory.newEntity(AnyType.class));\n+        lenient().when(anyTypeDAO.findUser()).thenAnswer(ic -> {\n+            AnyType userAnyType = mock(AnyType.class);\n+            lenient().when(userAnyType.getKey()).thenReturn(AnyTypeKind.USER.name());\n+            return userAnyType;\n+        });\n \n         lenient().when(profile.getConnector()).thenReturn(connector);\n         lenient().when(syncDelta.getObject()).thenReturn(connectorObj);\n@@ -192,7 +197,7 @@ public void afterWithEmptyAttributes(final @Mock Attribute attribute) throws Job\n         entity = new GroupTO();\n \n         when(connectorObj.getAttributeByName(anyString())).thenReturn(attribute);\n-        when(externalResource.getProvision(any(AnyType.class))).thenAnswer(ic -> Optional.of(mock(Provision.class)));\n+        when(externalResource.getProvision(anyString())).thenAnswer(ic -> Optional.of(mock(Provision.class)));\n \n         ldapMembershipPullActions.after(profile, syncDelta, entity, result);\n \n@@ -207,7 +212,7 @@ public void after() throws JobExecutionException {\n         List<String> expected = List.of(expectedUid);\n \n         when(connectorObj.getAttributeByName(anyString())).thenReturn(attribute);\n-        when(externalResource.getProvision(any(AnyType.class))).thenAnswer(ic -> Optional.empty());\n+        when(externalResource.getProvision(anyString())).thenAnswer(ic -> Optional.empty());\n         when(inboundMatcher.match(any(AnyType.class), anyString(), any(ExternalResource.class), any(Connector.class))).\n                 thenReturn(Optional.of(new PullMatch(MatchType.ANY, user)));\n "},{"sha":"437a1abbc1af2b7267ec32bc32ad483277abb066","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -35,6 +35,7 @@\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.EntitlementsHolder;\n@@ -54,10 +55,9 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Delegation;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnectorManager;\n@@ -290,10 +290,10 @@ protected boolean authenticate(final User user, final String password) {\n             String connObjectKey = null;\n             try {\n                 AnyType userType = anyTypeDAO.findUser();\n-                Provision provision = resource.getProvision(userType).\n+                Provision provision = resource.getProvision(userType.getKey()).\n                         orElseThrow(() -> new AccountNotFoundException(\n                         \"Unable to locate provision for user type \" + userType.getKey()));\n-                connObjectKey = mappingManager.getConnObjectKeyValue(user, provision).\n+                connObjectKey = mappingManager.getConnObjectKeyValue(user, resource, provision).\n                         orElseThrow(() -> new AccountNotFoundException(\n                         \"Unable to locate conn object key value for \" + userType.getKey()));\n                 Uid uid = connectorManager.getConnector(resource).authenticate(connObjectKey, password, null);"},{"sha":"3499bea17e5352f73e37bdf8bf6ac44efd583db5","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DefaultPasswordGenerator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -22,8 +22,8 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.apache.syncope.core.spring.policy.DefaultPasswordRule;\n import org.passay.CharacterRule;"},{"sha":"f271036f4867a3b0a0aab80473ed19973b2acb37","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/PasswordGenerator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.spring.security;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface PasswordGenerator {\n "},{"sha":"ad2f2aa6ba37d202b2b2a46279a8be68738823aa","filename":"ext/oidcc4ui/common-lib/src/main/java/org/apache/syncope/common/lib/to/OIDCC4UIProviderTO.java","status":"modified","additions":1,"deletions":39,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCC4UIProviderTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCC4UIProviderTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCC4UIProviderTO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -22,10 +22,9 @@\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n import javax.ws.rs.PathParam;\n \n-public class OIDCC4UIProviderTO implements EntityTO, ItemContainerTO {\n+public class OIDCC4UIProviderTO extends ItemContainer implements EntityTO {\n \n     private static final long serialVersionUID = -1229802774546135794L;\n \n@@ -59,8 +58,6 @@ public class OIDCC4UIProviderTO implements EntityTO, ItemContainerTO {\n \n     private boolean selfRegUnmatching;\n \n-    private final List<ItemTO> items = new ArrayList<>();\n-\n     private final List<String> actions = new ArrayList<>();\n \n     @Override\n@@ -186,41 +183,6 @@ public void setSelfRegUnmatching(final boolean selfRegUnmatching) {\n         this.selfRegUnmatching = selfRegUnmatching;\n     }\n \n-    @Override\n-    public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().orElse(null);\n-    }\n-\n-    protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n-        connObjectItem.setMandatoryCondition(\"true\");\n-        connObjectItem.setConnObjectKey(true);\n-\n-        return this.add(connObjectItem);\n-    }\n-\n-    @Override\n-    public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n-        return Optional.ofNullable(connObjectKeyItem).\n-                map(this::addConnObjectKeyItem).orElseGet(() -> remove(getConnObjectKeyItem()));\n-    }\n-\n-    @JacksonXmlElementWrapper(localName = \"items\")\n-    @JacksonXmlProperty(localName = \"item\")\n-    @Override\n-    public List<ItemTO> getItems() {\n-        return items;\n-    }\n-\n-    @Override\n-    public boolean add(final ItemTO item) {\n-        return Optional.ofNullable(item).\n-                filter(itemTO -> this.items.contains(itemTO) || this.items.add(itemTO)).isPresent();\n-    }\n-\n-    public boolean remove(final ItemTO item) {\n-        return this.items.remove(item);\n-    }\n-\n     @JacksonXmlElementWrapper(localName = \"actions\")\n     @JacksonXmlProperty(localName = \"action\")\n     public List<String> getActions() {"},{"sha":"e29b5c7def37dd3982dd1d40ce0a7a0be716b185","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UILogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.oidc.OIDCLoginResponse;\n import org.apache.syncope.common.lib.oidc.OIDCRequest;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -46,7 +47,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.OIDCC4UIProviderDAO;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProvider;\n-import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProviderItem;\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -161,7 +161,7 @@ public OIDCLoginResponse login(final String redirectURI, final String authorizat\n \n         // 3a. find matching user (if any) and return the received attributes\n         String keyValue = idToken.getSubject();\n-        for (OIDCC4UIProviderItem item : op.getItems()) {\n+        for (Item item : op.getItems()) {\n             Attr attrTO = new Attr();\n             attrTO.setSchema(item.getExtAttrName());\n "},{"sha":"7b3203d03decbda96e74c26b27e84b7826e1a2d7","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UILogicContext.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogicContext.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.core.logic.init.OIDCC4UILoader;\n import org.apache.syncope.core.logic.oidc.OIDCClientCache;\n import org.apache.syncope.core.logic.oidc.OIDCUserManager;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.OIDCC4UIProviderDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n@@ -55,6 +56,7 @@ public OIDCC4UILoader oidcc4UILoader() {\n     public OIDCUserManager oidcUserManager(\n             final InboundMatcher inboundMatcher,\n             final UserDAO userDAO,\n+            final ImplementationDAO implementationDAO,\n             final IntAttrNameParser intAttrNameParser,\n             final TemplateUtils templateUtils,\n             final UserProvisioningManager provisioningManager,\n@@ -63,6 +65,7 @@ public OIDCUserManager oidcUserManager(\n         return new OIDCUserManager(\n                 inboundMatcher,\n                 userDAO,\n+                implementationDAO,\n                 intAttrNameParser,\n                 templateUtils,\n                 provisioningManager,\n@@ -79,7 +82,7 @@ public OIDCC4UILogic oidcc4UILogic(\n             final OIDCUserManager userManager) {\n \n         return new OIDCC4UILogic(oidcClientCache, authDataAccessor,\n-            accessTokenDataBinder, opDAO, userManager);\n+                accessTokenDataBinder, opDAO, userManager);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"695c37bdba7f407370f50583dc8ceb171596befb","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UIProviderLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UIProviderLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UIProviderLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UIProviderLogic.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,7 +23,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.OIDCC4UIProviderTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.OIDC4UIEntitlement;\n@@ -63,13 +63,13 @@ public String createFromDiscovery(final OIDCC4UIProviderTO opTO) {\n     @PreAuthorize(\"hasRole('\" + OIDC4UIEntitlement.OP_CREATE + \"')\")\n     public String create(final OIDCC4UIProviderTO opTO) {\n         if (opTO.getConnObjectKeyItem() == null) {\n-            ItemTO connObjectKeyItem = new ItemTO();\n+            Item connObjectKeyItem = new Item();\n             connObjectKeyItem.setIntAttrName(\"username\");\n             connObjectKeyItem.setExtAttrName(\"email\");\n             opTO.setConnObjectKeyItem(connObjectKeyItem);\n         }\n \n-        OIDCC4UIProvider provider = opDAO.save(binder.create(opTO));\n+        OIDCC4UIProvider provider = binder.create(opTO);\n \n         return provider.getKey();\n     }\n@@ -106,7 +106,7 @@ public void update(final OIDCC4UIProviderTO opTO) {\n         }\n         String opName = op.getName();\n \n-        opDAO.save(binder.update(op, opTO));\n+        binder.update(op, opTO);\n         oidcClientClientCache.removeAll(opName);\n     }\n "},{"sha":"6d1f8a41b03e9fb2d8f7e92e2d9e632fc4202861","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCUserManager.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,6 +21,7 @@\n import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n@@ -32,12 +33,14 @@\n import org.apache.syncope.common.lib.oidc.OIDCLoginResponse;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProvider;\n-import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProviderItem;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n@@ -64,6 +67,8 @@ public class OIDCUserManager {\n \n     protected final UserDAO userDAO;\n \n+    protected final ImplementationDAO implementationDAO;\n+\n     protected final IntAttrNameParser intAttrNameParser;\n \n     protected final TemplateUtils templateUtils;\n@@ -75,13 +80,15 @@ public class OIDCUserManager {\n     public OIDCUserManager(\n             final InboundMatcher inboundMatcher,\n             final UserDAO userDAO,\n+            final ImplementationDAO implementationDAO,\n             final IntAttrNameParser intAttrNameParser,\n             final TemplateUtils templateUtils,\n             final UserProvisioningManager provisioningManager,\n             final UserDataBinder binder) {\n \n         this.inboundMatcher = inboundMatcher;\n         this.userDAO = userDAO;\n+        this.implementationDAO = implementationDAO;\n         this.intAttrNameParser = intAttrNameParser;\n         this.templateUtils = templateUtils;\n         this.provisioningManager = provisioningManager;\n@@ -91,7 +98,7 @@ public OIDCUserManager(\n     @Transactional(readOnly = true)\n     public List<String> findMatchingUser(\n             final String connObjectKeyValue,\n-            final OIDCC4UIProviderItem connObjectKeyItem) {\n+            final Item connObjectKeyItem) {\n \n         return inboundMatcher.matchByConnObjectKeyValue(\n                 connObjectKeyItem, connObjectKeyValue, AnyTypeKind.USER, false, null).stream().\n@@ -113,6 +120,13 @@ protected List<OIDCC4UIProviderActions> getActions(final OIDCC4UIProvider op) {\n         return actions;\n     }\n \n+    protected List<Implementation> getTransformers(final Item item) {\n+        return item.getTransformers().stream().\n+                map(implementationDAO::find).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n+    }\n+\n     public void fill(final OIDCC4UIProvider op, final OIDCLoginResponse loginResponse, final UserTO userTO) {\n         op.getItems().forEach(item -> {\n             List<String> values = new ArrayList<>();\n@@ -121,7 +135,7 @@ public void fill(final OIDCC4UIProvider op, final OIDCLoginResponse loginRespons\n                 values.addAll(oidcAttr.get().getValues());\n \n                 List<Object> transformed = new ArrayList<>(values);\n-                for (ItemTransformer transformer : MappingUtils.getItemTransformers(item)) {\n+                for (ItemTransformer transformer : MappingUtils.getItemTransformers(item, getTransformers(item))) {\n                     transformed = transformer.beforePull(null, userTO, transformed);\n                 }\n                 values.clear();"},{"sha":"325ec18beeb325ca6a4bde36b168f167bed74061","filename":"ext/oidcc4ui/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/OIDCC4UIProvider.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCC4UIProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCC4UIProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCC4UIProvider.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import java.util.Optional;\n+import org.apache.syncope.common.lib.to.Item;\n \n public interface OIDCC4UIProvider extends Entity {\n \n@@ -79,13 +80,11 @@ public interface OIDCC4UIProvider extends Entity {\n \n     void setUserTemplate(OIDCC4UIUserTemplate userTemplate);\n \n-    List<? extends OIDCC4UIProviderItem> getItems();\n+    Optional<Item> getConnObjectKeyItem();\n \n-    Optional<? extends OIDCC4UIProviderItem> getConnObjectKeyItem();\n+    void setConnObjectKeyItem(Item item);\n \n-    void setConnObjectKeyItem(OIDCC4UIProviderItem item);\n-\n-    boolean add(OIDCC4UIProviderItem item);\n+    List<Item> getItems();\n \n     boolean add(Implementation action);\n "},{"sha":"8f87121562fba39ab7efedfa57c6ad91d7766913","filename":"ext/oidcc4ui/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/OIDCC4UIProviderItem.java","status":"removed","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/ext%2Foidcc4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCC4UIProviderItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/ext%2Foidcc4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCC4UIProviderItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCC4UIProviderItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,29 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-\n-public interface OIDCC4UIProviderItem extends Item {\n-\n-    OIDCC4UIProvider getOP();\n-\n-    void setOP(OIDCC4UIProvider op);\n-\n-}"},{"sha":"cb7c5e38a106c58f11379f648daa0a53c516e300","filename":"ext/oidcc4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAOIDCC4UIProviderDAO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCC4UIProviderDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCC4UIProviderDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCC4UIProviderDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -62,6 +62,7 @@ public List<OIDCC4UIProvider> findAll() {\n \n     @Override\n     public OIDCC4UIProvider save(final OIDCC4UIProvider op) {\n+        ((JPAOIDCC4UIProvider) op).list2json();\n         return entityManager().merge(op);\n     }\n "},{"sha":"1beb7846f004d73b51abc15ee94bd9aa2de21ac9","filename":"ext/oidcc4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCC4UIEntityFactory.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIEntityFactory.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,7 +21,6 @@\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIEntityFactory;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProvider;\n-import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProviderItem;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIUserTemplate;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n@@ -34,8 +33,6 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n \n         if (reference.equals(OIDCC4UIProvider.class)) {\n             result = (E) new JPAOIDCC4UIProvider();\n-        } else if (reference.equals(OIDCC4UIProviderItem.class)) {\n-            result = (E) new JPAOIDCC4UIProviderItem();\n         } else if (reference.equals(OIDCC4UIUserTemplate.class)) {\n             result = (E) new JPAOIDCC4UIUserTemplate();\n         } else {"},{"sha":"152c277b6ead87fd9e63fd4a96fb9ec5ec37d049","filename":"ext/oidcc4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCC4UIProvider.java","status":"modified","additions":48,"deletions":16,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIProvider.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n@@ -28,18 +29,24 @@\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n import javax.persistence.JoinTable;\n+import javax.persistence.Lob;\n import javax.persistence.ManyToMany;\n-import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n import javax.persistence.Table;\n+import javax.persistence.Transient;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.OIDCClientImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProvider;\n-import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProviderItem;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIUserTemplate;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.jpa.validation.entity.OIDCC4UIProviderCheck;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n @Entity\n @Table(name = JPAOIDCC4UIProvider.TABLE)\n@@ -84,8 +91,11 @@ public class JPAOIDCC4UIProvider extends AbstractGeneratedKeyEntity implements O\n     @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"op\")\n     private JPAOIDCC4UIUserTemplate userTemplate;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"op\")\n-    private List<JPAOIDCC4UIProviderItem> items = new ArrayList<>();\n+    @Lob\n+    private String items;\n+\n+    @Transient\n+    private final List<Item> itemList = new ArrayList<>();\n \n     @NotNull\n     private Boolean createUnmatching = false;\n@@ -246,25 +256,19 @@ public void setUserTemplate(final OIDCC4UIUserTemplate userTemplate) {\n     }\n \n     @Override\n-    public boolean add(final OIDCC4UIProviderItem item) {\n-        checkType(item, JPAOIDCC4UIProviderItem.class);\n-        return items.contains((JPAOIDCC4UIProviderItem) item) || items.add((JPAOIDCC4UIProviderItem) item);\n-    }\n-\n-    @Override\n-    public List<? extends OIDCC4UIProviderItem> getItems() {\n-        return items;\n+    public List<Item> getItems() {\n+        return itemList;\n     }\n \n     @Override\n-    public Optional<? extends OIDCC4UIProviderItem> getConnObjectKeyItem() {\n+    public Optional<Item> getConnObjectKeyItem() {\n         return getItems().stream().filter(Item::isConnObjectKey).findFirst();\n     }\n \n     @Override\n-    public void setConnObjectKeyItem(final OIDCC4UIProviderItem item) {\n+    public void setConnObjectKeyItem(final Item item) {\n         item.setConnObjectKey(true);\n-        this.add(item);\n+        getItems().add(item);\n     }\n \n     @Override\n@@ -278,4 +282,32 @@ public boolean add(final Implementation action) {\n     public List<? extends Implementation> getActions() {\n         return actions;\n     }\n+\n+    protected void json2list(final boolean clearFirst) {\n+        if (clearFirst) {\n+            getItems().clear();\n+        }\n+        if (items != null) {\n+            getItems().addAll(\n+                    POJOHelper.deserialize(items, new TypeReference<List<Item>>() {\n+                    }));\n+        }\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        json2list(false);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void postSave() {\n+        json2list(true);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void list2json() {\n+        items = POJOHelper.serialize(getItems());\n+    }\n }"},{"sha":"7344426f0e9722dfb3a0e387eb631393fb7b3c70","filename":"ext/oidcc4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCC4UIProviderItem.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIProviderItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIProviderItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIProviderItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,83 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProvider;\n-import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProviderItem;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n-\n-@Entity\n-@Table(name = JPAOIDCC4UIProviderItem.TABLE)\n-@Cacheable\n-public class JPAOIDCC4UIProviderItem extends AbstractItem implements OIDCC4UIProviderItem {\n-\n-    public static final String TABLE = \"OIDCProviderItem\";\n-\n-    private static final long serialVersionUID = -6903418265811089724L;\n-\n-    @ManyToOne\n-    private JPAOIDCC4UIProvider op;\n-\n-    @Override\n-    public OIDCC4UIProvider getOP() {\n-        return op;\n-    }\n-\n-    @Override\n-    public void setOP(final OIDCC4UIProvider op) {\n-        checkType(op, JPAOIDCC4UIProvider.class);\n-        this.op = (JPAOIDCC4UIProvider) op;\n-    }\n-\n-    @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(name = TABLE + \"Transformer\",\n-            joinColumns =\n-            @JoinColumn(name = \"item_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"),\n-            uniqueConstraints =\n-            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n-    private List<JPAImplementation> transformers = new ArrayList<>();\n-\n-    @Override\n-    public boolean add(final Implementation transformer) {\n-        checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n-        return transformers.contains((JPAImplementation) transformer)\n-                || this.transformers.add((JPAImplementation) transformer);\n-    }\n-\n-    @Override\n-    public List<? extends Implementation> getTransformers() {\n-        return transformers;\n-    }\n-}"},{"sha":"c63908e7f33ec11448ce45645b5c75f70bcb7238","filename":"ext/oidcc4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCC4UIUserTemplate.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIUserTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIUserTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCC4UIUserTemplate.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,7 +24,6 @@\n import javax.persistence.UniqueConstraint;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProvider;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIUserTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n \n @Entity\n @Table(name = JPAOIDCC4UIUserTemplate.TABLE, uniqueConstraints ="},{"sha":"9e450363f8c9828306253df0e356fee7708257a3","filename":"ext/oidcc4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/OIDCC4UIProviderValidator.java","status":"modified","additions":1,"deletions":24,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCC4UIProviderValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCC4UIProviderValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCC4UIProviderValidator.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,11 +19,9 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProvider;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class OIDCC4UIProviderValidator extends AbstractValidator<OIDCC4UIProviderCheck, OIDCC4UIProvider> {\n \n@@ -67,27 +65,6 @@ public boolean isValid(final OIDCC4UIProvider oidcProvider, final ConstraintVali\n             isValid[0] = false;\n         }\n \n-        oidcProvider.getItems().forEach(item -> item.getTransformers().stream().\n-                filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).\n-                forEach(transformer -> {\n-                    Class<?> actionsClass = null;\n-                    boolean isAssignable = false;\n-                    try {\n-                        actionsClass = Class.forName(transformer.getBody());\n-                        isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Invalid ItemTransformer specified: {}\", transformer.getBody(), e);\n-                    }\n-\n-                    if (actionsClass == null || !isAssignable) {\n-                        context.buildConstraintViolationWithTemplate(\n-                                getTemplate(EntityViolationType.InvalidMapping,\n-                                        \"Invalid item trasformer class name\")).\n-                                addPropertyNode(\"itemTransformers\").addConstraintViolation();\n-                        isValid[0] = false;\n-                    }\n-                }));\n-\n         return isValid[0];\n     }\n }"},{"sha":"38e9494c482b4644c54d7cb25da1fd815b0fce05","filename":"ext/oidcc4ui/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCC4UIProviderDataBinderImpl.java","status":"modified","additions":25,"deletions":14,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCC4UIProviderDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Foidcc4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCC4UIProviderDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCC4UIProviderDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -22,7 +22,7 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.OIDCC4UIProviderTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -36,7 +36,6 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIEntityFactory;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProvider;\n-import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProviderItem;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIUserTemplate;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n@@ -47,7 +46,7 @@\n \n public class OIDCC4UIProviderDataBinderImpl implements OIDCC4UIProviderDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(OIDCC4UIProviderDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(OIDCC4UIProviderDataBinder.class);\n \n     protected final AnyTypeDAO anyTypeDAO;\n \n@@ -78,7 +77,7 @@ public OIDCC4UIProvider create(final OIDCC4UIProviderTO opTO) {\n         return update(entityFactory.newEntity(OIDCC4UIProvider.class), opTO);\n     }\n \n-    private void populateItems(final OIDCC4UIProviderTO opTO, final OIDCC4UIProvider op) {\n+    protected void populateItems(final OIDCC4UIProviderTO opTO, final OIDCC4UIProvider op) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n         SyncopeClientException invalidMapping =\n                 SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n@@ -87,8 +86,8 @@ private void populateItems(final OIDCC4UIProviderTO opTO, final OIDCC4UIProvider\n \n         opTO.getItems().forEach(itemTO -> {\n             if (itemTO == null) {\n-                LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n-                invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n+                LOG.error(\"Null {}\", Item.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + Item.class.getSimpleName());\n             } else if (itemTO.getIntAttrName() == null) {\n                 requiredValuesMissing.getElements().add(\"intAttrName\");\n                 scce.addException(requiredValuesMissing);\n@@ -114,16 +113,29 @@ private void populateItems(final OIDCC4UIProviderTO opTO, final OIDCC4UIProvider\n                         scce.addException(invalidMandatoryCondition);\n                     }\n \n-                    OIDCC4UIProviderItem item = entityFactory.newEntity(OIDCC4UIProviderItem.class);\n+                    Item item = new Item();\n                     item.setIntAttrName(itemTO.getIntAttrName());\n                     item.setExtAttrName(itemTO.getExtAttrName());\n                     item.setMandatoryCondition(itemTO.getMandatoryCondition());\n                     item.setConnObjectKey(itemTO.isConnObjectKey());\n                     item.setPassword(itemTO.isPassword());\n                     item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n                     item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n-                    item.setOP(op);\n                     item.setPurpose(MappingPurpose.NONE);\n+\n+                    itemTO.getTransformers().forEach(transformerKey -> {\n+                        Implementation transformer = implementationDAO.find(transformerKey);\n+                        if (transformer == null) {\n+                            LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                                    transformerKey);\n+                        } else {\n+                            item.getTransformers().add(transformer.getKey());\n+                        }\n+                        // remove all implementations not contained in the TO\n+                        item.getTransformers().\n+                                removeIf(implementation -> !itemTO.getTransformers().contains(implementation));\n+                    });\n+\n                     if (item.isConnObjectKey()) {\n                         if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n                             invalidMapping.getElements().\n@@ -136,7 +148,7 @@ private void populateItems(final OIDCC4UIProviderTO opTO, final OIDCC4UIProvider\n \n                         op.setConnObjectKeyItem(item);\n                     } else {\n-                        op.add(item);\n+                        op.getItems().add(item);\n                     }\n                 }\n             }\n@@ -196,17 +208,17 @@ public OIDCC4UIProvider update(final OIDCC4UIProvider op, final OIDCC4UIProvider\n         return oidcOPDAO.save(op);\n     }\n \n-    private static void populateItems(final OIDCC4UIProvider op, final OIDCC4UIProviderTO opTO) {\n+    protected static void populateItems(final OIDCC4UIProvider op, final OIDCC4UIProviderTO opTO) {\n         op.getItems().forEach(item -> {\n-            ItemTO itemTO = new ItemTO();\n-            itemTO.setKey(item.getKey());\n+            Item itemTO = new Item();\n             itemTO.setIntAttrName(item.getIntAttrName());\n             itemTO.setExtAttrName(item.getExtAttrName());\n             itemTO.setMandatoryCondition(item.getMandatoryCondition());\n             itemTO.setConnObjectKey(item.isConnObjectKey());\n             itemTO.setPassword(item.isPassword());\n             itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());\n             itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());\n+            itemTO.getTransformers().addAll(item.getTransformers());\n             itemTO.setPurpose(MappingPurpose.NONE);\n \n             if (itemTO.isConnObjectKey()) {\n@@ -242,8 +254,7 @@ public OIDCC4UIProviderTO getOIDCProviderTO(final OIDCC4UIProvider op) {\n \n         populateItems(op, opTO);\n \n-        opTO.getActions().addAll(\n-                op.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n+        opTO.getActions().addAll(op.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n \n         return opTO;\n     }"},{"sha":"a2e0cd59b987e996bacccb40f07a2546ca6301f2","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizardBuilder;\n import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.SAML2SP4UIIdPTO;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.common.lib.types.SAML2SP4UIImplementationType;\n@@ -208,7 +208,7 @@ private static final class Mapping extends WizardStep {\n \n     @Override\n     protected Serializable onApplyInternal(final SAML2SP4UIIdPTO modelObject) {\n-        long connObjectKeyCount = modelObject.getItems().stream().filter(ItemTO::isConnObjectKey).count();\n+        long connObjectKeyCount = modelObject.getItems().stream().filter(Item::isConnObjectKey).count();\n         if (connObjectKeyCount != 1) {\n             throw new IllegalArgumentException(\n                     new StringResourceModel(\"connObjectKeyValidation\", directoryPanel).getString());"},{"sha":"a9d62eec69a96369f98c6c55855f1d16d232f0b4","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SP4UIIdPTO.java","status":"modified","additions":1,"deletions":34,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SP4UIIdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SP4UIIdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SP4UIIdPTO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -22,11 +22,10 @@\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n import javax.ws.rs.PathParam;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n-public class SAML2SP4UIIdPTO implements EntityTO, ItemContainerTO {\n+public class SAML2SP4UIIdPTO extends ItemContainer implements EntityTO {\n \n     private static final long serialVersionUID = 4426527052873779881L;\n \n@@ -50,8 +49,6 @@ public class SAML2SP4UIIdPTO implements EntityTO, ItemContainerTO {\n \n     private UserTO userTemplate;\n \n-    private final List<ItemTO> items = new ArrayList<>();\n-\n     private final List<String> actions = new ArrayList<>();\n \n     private String requestedAuthnContextProvider;\n@@ -139,36 +136,6 @@ public void setUserTemplate(final UserTO userTemplate) {\n         this.userTemplate = userTemplate;\n     }\n \n-    @Override\n-    public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().orElse(null);\n-    }\n-\n-    protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n-        connObjectItem.setMandatoryCondition(\"true\");\n-        connObjectItem.setConnObjectKey(true);\n-\n-        return this.add(connObjectItem);\n-    }\n-\n-    @Override\n-    public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n-        return Optional.ofNullable(connObjectKeyItem).\n-                map(this::addConnObjectKeyItem).orElseGet(() -> items.remove(getConnObjectKeyItem()));\n-    }\n-\n-    @JacksonXmlElementWrapper(localName = \"items\")\n-    @JacksonXmlProperty(localName = \"item\")\n-    @Override\n-    public List<ItemTO> getItems() {\n-        return items;\n-    }\n-\n-    @Override\n-    public boolean add(final ItemTO item) {\n-        return Optional.ofNullable(item).filter(itemTO -> items.contains(itemTO) || items.add(itemTO)).isPresent();\n-    }\n-\n     @JacksonXmlElementWrapper(localName = \"actions\")\n     @JacksonXmlProperty(localName = \"action\")\n     public List<String> getActions() {"},{"sha":"6047a3313458aec451dd87811a0e842dafda34bd","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/SAML2SP4UIIdPLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UIIdPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UIIdPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UIIdPLogic.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -79,7 +79,7 @@ public SAML2SP4UIIdPTO read(final String key) {\n     public String importFromMetadata(final InputStream input) {\n         try {\n             SAML2SP4UIIdPTO idpTO = SAML2ClientCache.importMetadata(input, loader.newSAML2Configuration());\n-            SAML2SP4UIIdP idp = idpDAO.save(binder.create(idpTO));\n+            SAML2SP4UIIdP idp = binder.create(idpTO);\n \n             return idp.getKey();\n         } catch (SyncopeClientException e) {\n@@ -99,7 +99,7 @@ public void update(final SAML2SP4UIIdPTO saml2IdpTO) {\n             throw new NotFoundException(\"SAML 2.0 IdP '\" + saml2IdpTO.getKey() + '\\'');\n         }\n \n-        idp = idpDAO.save(binder.update(idp, saml2IdpTO));\n+        idp = binder.update(idp, saml2IdpTO);\n         saml2ClientCache.removeAll(idp.getEntityID());\n     }\n "},{"sha":"735317b628c66a3788fc5900b1a4ea519050fbe1","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/SAML2SP4UILogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.common.lib.saml2.SAML2Request;\n import org.apache.syncope.common.lib.saml2.SAML2Response;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -53,7 +54,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.SAML2SP4UIIdPDAO;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdPItem;\n import org.apache.syncope.core.provisioning.api.RequestedAuthnContextProvider;\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -332,7 +332,7 @@ public SAML2LoginResponse validateLoginResponse(final SAML2Response saml2Respons\n \n         SAML2Credentials.SAMLNameID nameID = credentials.getNameId();\n \n-        SAML2SP4UIIdPItem connObjectKeyItem = idp.getConnObjectKeyItem().orElse(null);\n+        Item connObjectKeyItem = idp.getConnObjectKeyItem().orElse(null);\n \n         String keyValue = null;\n         if (StringUtils.isNotBlank(nameID.getValue())"},{"sha":"f2b838ea28ccd5ef8f54fecb242a19cf72b61285","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/SAML2SP4UILogicContext.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogicContext.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.core.logic.init.SAML2SP4UILoader;\n import org.apache.syncope.core.logic.saml2.SAML2ClientCache;\n import org.apache.syncope.core.logic.saml2.SAML2SP4UIUserManager;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2SP4UIIdPDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n@@ -50,7 +51,7 @@ public SAML2ClientCache saml2ClientCache() {\n     @ConditionalOnMissingBean\n     @Bean\n     public SAML2SP4UILoader saml2SP4UILoader(final ResourcePatternResolver resourceResolver,\n-                                             final SAML2SP4UIProperties props) {\n+            final SAML2SP4UIProperties props) {\n         return new SAML2SP4UILoader(props, resourceResolver);\n     }\n \n@@ -71,6 +72,7 @@ public SAML2SP4UIUserManager saml2SP4UIUserManager(\n             final SAML2SP4UIIdPDAO idpDAO,\n             final InboundMatcher inboundMatcher,\n             final UserDAO userDAO,\n+            final ImplementationDAO implementationDAO,\n             final IntAttrNameParser intAttrNameParser,\n             final TemplateUtils templateUtils,\n             final UserProvisioningManager provisioningManager,\n@@ -80,6 +82,7 @@ public SAML2SP4UIUserManager saml2SP4UIUserManager(\n                 idpDAO,\n                 inboundMatcher,\n                 userDAO,\n+                implementationDAO,\n                 intAttrNameParser,\n                 templateUtils,\n                 provisioningManager,"},{"sha":"945d2587f6e68db85500948b4a7de5fa7685a69a","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ClientCache.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -29,7 +29,7 @@\n import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.helpers.IOUtils;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.SAML2SP4UIIdPTO;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n@@ -114,7 +114,7 @@ public static SAML2SP4UIIdPTO importMetadata(\n \n         idpTO.setMetadata(Base64.getEncoder().encodeToString(metadataResolver.getMetadata().getBytes()));\n \n-        ItemTO connObjectKeyItem = new ItemTO();\n+        Item connObjectKeyItem = new Item();\n         connObjectKeyItem.setIntAttrName(\"username\");\n         connObjectKeyItem.setExtAttrName(NameID.DEFAULT_ELEMENT_LOCAL_NAME);\n         idpTO.setConnObjectKeyItem(connObjectKeyItem);"},{"sha":"91f09b1117e657709c8d09e16d17555ad2e1d717","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2SP4UIUserManager.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIUserManager.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n@@ -33,11 +34,14 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.saml2.SAML2LoginResponse;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2SP4UIIdPDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n@@ -67,6 +71,8 @@ public class SAML2SP4UIUserManager {\n \n     protected final UserDAO userDAO;\n \n+    protected final ImplementationDAO implementationDAO;\n+\n     protected final IntAttrNameParser intAttrNameParser;\n \n     protected final TemplateUtils templateUtils;\n@@ -79,6 +85,7 @@ public SAML2SP4UIUserManager(\n             final SAML2SP4UIIdPDAO idpDAO,\n             final InboundMatcher inboundMatcher,\n             final UserDAO userDAO,\n+            final ImplementationDAO implementationDAO,\n             final IntAttrNameParser intAttrNameParser,\n             final TemplateUtils templateUtils,\n             final UserProvisioningManager provisioningManager,\n@@ -87,6 +94,7 @@ public SAML2SP4UIUserManager(\n         this.idpDAO = idpDAO;\n         this.inboundMatcher = inboundMatcher;\n         this.userDAO = userDAO;\n+        this.implementationDAO = implementationDAO;\n         this.intAttrNameParser = intAttrNameParser;\n         this.templateUtils = templateUtils;\n         this.provisioningManager = provisioningManager;\n@@ -111,7 +119,7 @@ public List<String> findMatchingUser(final String connObjectKeyValue, final Stri\n                 collect(Collectors.toList());\n     }\n \n-    private List<SAML2SP4UIIdPActions> getActions(final SAML2SP4UIIdP idp) {\n+    protected List<SAML2SP4UIIdPActions> getActions(final SAML2SP4UIIdP idp) {\n         List<SAML2SP4UIIdPActions> actions = new ArrayList<>();\n         idp.getActions().forEach(impl -> {\n             try {\n@@ -124,6 +132,13 @@ private List<SAML2SP4UIIdPActions> getActions(final SAML2SP4UIIdP idp) {\n         return actions;\n     }\n \n+    protected List<Implementation> getTransformers(final Item item) {\n+        return item.getTransformers().stream().\n+                map(implementationDAO::find).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n+    }\n+\n     public void fill(final String idpKey, final SAML2LoginResponse loginResponse, final UserTO userTO) {\n         SAML2SP4UIIdP idp = idpDAO.find(idpKey);\n         if (idp == null) {\n@@ -138,7 +153,7 @@ public void fill(final String idpKey, final SAML2LoginResponse loginResponse, fi\n                 values = samlAttr.get().getValues();\n \n                 List<Object> transformed = new ArrayList<>(values);\n-                for (ItemTransformer transformer : MappingUtils.getItemTransformers(item)) {\n+                for (ItemTransformer transformer : MappingUtils.getItemTransformers(item, getTransformers(item))) {\n                     transformed = transformer.beforePull(null, userTO, transformed);\n                 }\n                 values.clear();"},{"sha":"d1d93332d786c7365cfc63a4a3c5d6d1aca51568","filename":"ext/saml2sp4ui/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2SP4UIIdP.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdP.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import java.util.Optional;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n public interface SAML2SP4UIIdP extends Entity {\n@@ -60,13 +61,11 @@ public interface SAML2SP4UIIdP extends Entity {\n \n     void setUserTemplate(SAML2SP4UIUserTemplate userTemplate);\n \n-    Optional<? extends SAML2SP4UIIdPItem> getConnObjectKeyItem();\n+    Optional<Item> getConnObjectKeyItem();\n \n-    void setConnObjectKeyItem(SAML2SP4UIIdPItem item);\n+    void setConnObjectKeyItem(Item item);\n \n-    boolean add(SAML2SP4UIIdPItem item);\n-\n-    List<? extends SAML2SP4UIIdPItem> getItems();\n+    List<Item> getItems();\n \n     boolean add(Implementation action);\n "},{"sha":"7370a5727d3baeab0c62236bd304de6d2049ad96","filename":"ext/saml2sp4ui/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2SP4UIIdPItem.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdPItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-\n-public interface SAML2SP4UIIdPItem extends Item {\n-\n-    SAML2SP4UIIdP getIdP();\n-\n-    void setIdP(SAML2SP4UIIdP idp);\n-}"},{"sha":"f58dfbb1d79364e61b05ec7bbd6b90d9a01da973","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASAML2SP4UIIdPDAO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SP4UIIdPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SP4UIIdPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SP4UIIdPDAO.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -62,6 +62,7 @@ public List<SAML2SP4UIIdP> findAll() {\n \n     @Override\n     public SAML2SP4UIIdP save(final SAML2SP4UIIdP idp) {\n+        ((JPASAML2SP4UIIdP) idp).list2json();\n         return entityManager().merge(idp);\n     }\n "},{"sha":"7502765a6cdb8f6ea6303863b026ec14cda34510","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIEntityFactory.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIEntityFactory.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -21,7 +21,6 @@\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIEntityFactory;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdPItem;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIUserTemplate;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n@@ -34,8 +33,6 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n \n         if (reference.equals(SAML2SP4UIIdP.class)) {\n             result = (E) new JPASAML2SP4UIIdP();\n-        } else if (reference.equals(SAML2SP4UIIdPItem.class)) {\n-            result = (E) new JPASAML2SP4UIIdPItem();\n         } else if (reference.equals(SAML2SP4UIUserTemplate.class)) {\n             result = (E) new JPASAML2SP4UIUserTemplate();\n         } else {"},{"sha":"778f31ca2400df2423c2600f1707464d5e401676","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIIdP.java","status":"modified","additions":47,"deletions":16,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n@@ -31,19 +32,24 @@\n import javax.persistence.JoinTable;\n import javax.persistence.Lob;\n import javax.persistence.ManyToMany;\n-import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n import javax.persistence.Table;\n+import javax.persistence.Transient;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.common.lib.types.SAML2SP4UIImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdPItem;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIUserTemplate;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SAML2SP4UIIdPCheck;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n @Entity\n @Table(name = JPASAML2SP4UIIdP.TABLE)\n@@ -68,8 +74,11 @@ public class JPASAML2SP4UIIdP extends AbstractGeneratedKeyEntity implements SAML\n     @NotNull\n     private Boolean logoutSupported = false;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"idp\")\n-    private List<JPASAML2SP4UIIdPItem> items = new ArrayList<>();\n+    @Lob\n+    private String items;\n+\n+    @Transient\n+    private final List<Item> itemList = new ArrayList<>();\n \n     @NotNull\n     private Boolean createUnmatching = false;\n@@ -189,25 +198,19 @@ public void setUserTemplate(final SAML2SP4UIUserTemplate userTemplate) {\n     }\n \n     @Override\n-    public boolean add(final SAML2SP4UIIdPItem item) {\n-        checkType(item, JPASAML2SP4UIIdPItem.class);\n-        return items.contains((JPASAML2SP4UIIdPItem) item) || items.add((JPASAML2SP4UIIdPItem) item);\n+    public List<Item> getItems() {\n+        return itemList;\n     }\n \n     @Override\n-    public List<? extends SAML2SP4UIIdPItem> getItems() {\n-        return items;\n-    }\n-\n-    @Override\n-    public Optional<? extends SAML2SP4UIIdPItem> getConnObjectKeyItem() {\n+    public Optional<Item> getConnObjectKeyItem() {\n         return getItems().stream().filter(Item::isConnObjectKey).findFirst();\n     }\n \n     @Override\n-    public void setConnObjectKeyItem(final SAML2SP4UIIdPItem item) {\n+    public void setConnObjectKeyItem(final Item item) {\n         item.setConnObjectKey(true);\n-        this.add(item);\n+        getItems().add(item);\n     }\n \n     @Override\n@@ -234,4 +237,32 @@ public void setRequestedAuthnContextProvider(final Implementation requestedAuthn\n                 SAML2SP4UIImplementationType.REQUESTED_AUTHN_CONTEXT_PROVIDER);\n         this.requestedAuthnContextProvider = (JPAImplementation) requestedAuthnContextProvider;\n     }\n+\n+    protected void json2list(final boolean clearFirst) {\n+        if (clearFirst) {\n+            getItems().clear();\n+        }\n+        if (items != null) {\n+            getItems().addAll(\n+                    POJOHelper.deserialize(items, new TypeReference<List<Item>>() {\n+                    }));\n+        }\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        json2list(false);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void postSave() {\n+        json2list(true);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void list2json() {\n+        items = POJOHelper.serialize(getItems());\n+    }\n }"},{"sha":"a8b998acc96b995fe47e52f9d0fce7eb5037d5ec","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIIdPItem.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/703803cc8ed2fc721a5e6c080ed231b9d1bce2d9/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdPItem.java?ref=703803cc8ed2fc721a5e6c080ed231b9d1bce2d9","patch":"@@ -1,83 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdPItem;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n-\n-@Entity\n-@Table(name = JPASAML2SP4UIIdPItem.TABLE)\n-@Cacheable\n-public class JPASAML2SP4UIIdPItem extends AbstractItem implements SAML2SP4UIIdPItem {\n-\n-    private static final long serialVersionUID = -597417734910639991L;\n-\n-    public static final String TABLE = \"SAML2SP4UIIdPItem\";\n-\n-    @ManyToOne\n-    private JPASAML2SP4UIIdP idp;\n-\n-    @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(name = TABLE + \"Transformer\",\n-            joinColumns =\n-            @JoinColumn(name = \"item_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"),\n-            uniqueConstraints =\n-            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n-    private List<JPAImplementation> transformers = new ArrayList<>();\n-\n-    @Override\n-    public SAML2SP4UIIdP getIdP() {\n-        return idp;\n-    }\n-\n-    @Override\n-    public void setIdP(final SAML2SP4UIIdP idp) {\n-        checkType(idp, JPASAML2SP4UIIdP.class);\n-        this.idp = (JPASAML2SP4UIIdP) idp;\n-    }\n-\n-    @Override\n-    public boolean add(final Implementation transformer) {\n-        checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n-        return transformers.contains((JPAImplementation) transformer)\n-                || this.transformers.add((JPAImplementation) transformer);\n-    }\n-\n-    @Override\n-    public List<? extends Implementation> getTransformers() {\n-        return transformers;\n-    }\n-}"},{"sha":"a6caaaae390eb472259d5006f5c74f98b1de0231","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIUserTemplate.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIUserTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIUserTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIUserTemplate.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -24,7 +24,6 @@\n import javax.persistence.UniqueConstraint;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIUserTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n \n @Entity\n @Table(name = JPASAML2SP4UIUserTemplate.TABLE, uniqueConstraints ="},{"sha":"5f882d19df4bfefdd061f0bc782937bfe44f46ff","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2SP4UIIdPValidator.java","status":"modified","additions":2,"deletions":25,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2SP4UIIdPValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2SP4UIIdPValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2SP4UIIdPValidator.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,11 +19,9 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class SAML2SP4UIIdPValidator extends AbstractValidator<SAML2SP4UIIdPCheck, SAML2SP4UIIdP> {\n \n@@ -58,7 +56,7 @@ public boolean isValid(final SAML2SP4UIIdP saml2IdP, final ConstraintValidatorCo\n             return false;\n         }\n \n-        final boolean[] isValid = new boolean[] { true };\n+        boolean[] isValid = new boolean[] { true };\n \n         long passwords = saml2IdP.getItems().stream().filter(Item::isPassword).count();\n         if (passwords > 0) {\n@@ -68,27 +66,6 @@ public boolean isValid(final SAML2SP4UIIdP saml2IdP, final ConstraintValidatorCo\n             isValid[0] = false;\n         }\n \n-        saml2IdP.getItems().forEach(item -> item.getTransformers().stream().\n-                filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).\n-                forEach(transformer -> {\n-                    Class<?> actionsClass = null;\n-                    boolean isAssignable = false;\n-                    try {\n-                        actionsClass = Class.forName(transformer.getBody());\n-                        isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Invalid ItemTransformer specified: {}\", transformer.getBody(), e);\n-                    }\n-\n-                    if (actionsClass == null || !isAssignable) {\n-                        context.buildConstraintViolationWithTemplate(\n-                                getTemplate(EntityViolationType.InvalidMapping,\n-                                        \"Invalid item trasformer class name\")).\n-                                addPropertyNode(\"itemTransformers\").addConstraintViolation();\n-                        isValid[0] = false;\n-                    }\n-                }));\n-\n         return isValid[0];\n     }\n }"},{"sha":"206fe83e083ffebfa317f78d2d69cdb57158f910","filename":"ext/saml2sp4ui/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2SP4UIIdPDataBinderImpl.java","status":"modified","additions":22,"deletions":10,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SP4UIIdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SP4UIIdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SP4UIIdPDataBinderImpl.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -23,7 +23,7 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.SAML2SP4UIIdPTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -37,7 +37,6 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIEntityFactory;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdPItem;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIUserTemplate;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n@@ -88,8 +87,8 @@ protected void populateItems(final SAML2SP4UIIdPTO idpTO, final SAML2SP4UIIdP id\n \n         idpTO.getItems().forEach(itemTO -> {\n             if (itemTO == null) {\n-                LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n-                invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n+                LOG.error(\"Null {}\", Item.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + Item.class.getSimpleName());\n             } else if (itemTO.getIntAttrName() == null) {\n                 requiredValuesMissing.getElements().add(\"intAttrName\");\n                 scce.addException(requiredValuesMissing);\n@@ -115,16 +114,29 @@ protected void populateItems(final SAML2SP4UIIdPTO idpTO, final SAML2SP4UIIdP id\n                         scce.addException(invalidMandatoryCondition);\n                     }\n \n-                    SAML2SP4UIIdPItem item = entityFactory.newEntity(SAML2SP4UIIdPItem.class);\n+                    Item item = new Item();\n                     item.setIntAttrName(itemTO.getIntAttrName());\n                     item.setExtAttrName(itemTO.getExtAttrName());\n                     item.setMandatoryCondition(itemTO.getMandatoryCondition());\n                     item.setConnObjectKey(itemTO.isConnObjectKey());\n                     item.setPassword(itemTO.isPassword());\n                     item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n                     item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n-                    item.setIdP(idp);\n                     item.setPurpose(MappingPurpose.NONE);\n+\n+                    itemTO.getTransformers().forEach(transformerKey -> {\n+                        Implementation transformer = implementationDAO.find(transformerKey);\n+                        if (transformer == null) {\n+                            LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                                    transformerKey);\n+                        } else {\n+                            item.getTransformers().add(transformer.getKey());\n+                        }\n+                        // remove all implementations not contained in the TO\n+                        item.getTransformers().\n+                                removeIf(implementation -> !itemTO.getTransformers().contains(implementation));\n+                    });\n+\n                     if (item.isConnObjectKey()) {\n                         if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n                             invalidMapping.getElements().\n@@ -137,7 +149,7 @@ protected void populateItems(final SAML2SP4UIIdPTO idpTO, final SAML2SP4UIIdP id\n \n                         idp.setConnObjectKeyItem(item);\n                     } else {\n-                        idp.add(item);\n+                        idp.getItems().add(item);\n                     }\n                 }\n             }\n@@ -204,17 +216,17 @@ public SAML2SP4UIIdP update(final SAML2SP4UIIdP idp, final SAML2SP4UIIdPTO idpTO\n         return idapDAO.save(idp);\n     }\n \n-    protected static void populateItems(final SAML2SP4UIIdP idp, final SAML2SP4UIIdPTO idpTO) {\n+    protected void populateItems(final SAML2SP4UIIdP idp, final SAML2SP4UIIdPTO idpTO) {\n         idp.getItems().forEach(item -> {\n-            ItemTO itemTO = new ItemTO();\n-            itemTO.setKey(item.getKey());\n+            Item itemTO = new Item();\n             itemTO.setIntAttrName(item.getIntAttrName());\n             itemTO.setExtAttrName(item.getExtAttrName());\n             itemTO.setMandatoryCondition(item.getMandatoryCondition());\n             itemTO.setConnObjectKey(item.isConnObjectKey());\n             itemTO.setPassword(item.isPassword());\n             itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());\n             itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());\n+            itemTO.getTransformers().addAll(item.getTransformers());\n             itemTO.setPurpose(MappingPurpose.NONE);\n \n             if (itemTO.isConnObjectKey()) {"},{"sha":"894e03c36e339d96936ad4fd742a6a0a69accdb5","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DateToDateItemTransformer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,10 +20,10 @@\n \n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class DateToDateItemTransformer implements ItemTransformer {"},{"sha":"00a9152a34d2ab61d8eb82be2f81161e76dcc399","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DateToLongItemTransformer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -20,10 +20,10 @@\n \n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class DateToLongItemTransformer implements ItemTransformer {"},{"sha":"5c8cfd84cd617aa6209b9b5761574060a4dd3b6f","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPullCorrelationRule.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n \n @PullCorrelationRuleConfClass(DummyPullCorrelationRuleConf.class)"},{"sha":"94ad5c5e0821dfc23fbb2d6c929f00773275415b","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPushCorrelationRule.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPushCorrelationRule.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRuleConfClass;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n@@ -30,7 +31,7 @@\n public class DummyPushCorrelationRule implements PushCorrelationRule {\n \n     @Override\n-    public Filter getFilter(final Any<?> any, final Provision provision) {\n+    public Filter getFilter(final Any<?> any, final ExternalResource resource, final Provision provision) {\n         return FilterBuilder.equalTo(new Uid(null));\n     }\n }"},{"sha":"19544aa588f4afbed0493050f50b895451dbb79b","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/LinkedAccountSamplePullCorrelationRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLinkedAccountSamplePullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLinkedAccountSamplePullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLinkedAccountSamplePullCorrelationRule.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.fit.core.reference;\n \n import java.util.Optional;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.MatchType;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRuleConfClass;\n@@ -27,7 +28,6 @@\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"5a6c17d32b8ddac163e3fd54ca560907a54fb23e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n@@ -66,7 +66,7 @@ public void create() {\n         assertEquals(\"REST\", anyObjectTO.getCreationContext());\n         assertEquals(\"REST\", anyObjectTO.getLastChangeContext());\n \n-        ConnObjectTO connObjectTO =\n+        ConnObject connObjectTO =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_DBSCRIPTED, anyObjectTO.getType(), anyObjectTO.getKey());\n         assertNotNull(connObjectTO);\n         assertNotNull(connObjectTO.getAttr(\"LOCATION\"));"},{"sha":"e00e0927eafba7c7f3e213dcfd1dbfb251ba6029","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AttrRepoITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAttrRepoITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAttrRepoITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAttrRepoITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.attr.StubAttrRepoConf;\n import org.apache.syncope.common.lib.attr.SyncopeAttrRepoConf;\n import org.apache.syncope.common.lib.to.AttrRepoTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.AttrRepoState;\n import org.apache.syncope.common.rest.api.service.AttrRepoService;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -105,12 +105,12 @@ private static AttrRepoTO buildAttrRepoTO(final AttrRepoSupportedType type) {\n         }\n         attrRepoTO.setConf(conf);\n \n-        ItemTO keyMapping = new ItemTO();\n+        Item keyMapping = new Item();\n         keyMapping.setIntAttrName(\"uid\");\n         keyMapping.setExtAttrName(\"username\");\n         attrRepoTO.getItems().add(keyMapping);\n \n-        ItemTO fullnameMapping = new ItemTO();\n+        Item fullnameMapping = new Item();\n         fullnameMapping.setIntAttrName(\"cn\");\n         fullnameMapping.setExtAttrName(\"fullname\");\n         attrRepoTO.getItems().add(fullnameMapping);"},{"sha":"1620329e2b5a95e7ff6cb0ede8458da2cfe49cd4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -45,7 +45,7 @@\n import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n@@ -163,12 +163,12 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n         }\n         authModuleTO.setConf(conf);\n \n-        ItemTO keyMapping = new ItemTO();\n+        Item keyMapping = new Item();\n         keyMapping.setIntAttrName(\"uid\");\n         keyMapping.setExtAttrName(\"username\");\n         authModuleTO.getItems().add(keyMapping);\n \n-        ItemTO fullnameMapping = new ItemTO();\n+        Item fullnameMapping = new Item();\n         fullnameMapping.setIntAttrName(\"cn\");\n         fullnameMapping.setExtAttrName(\"fullname\");\n         authModuleTO.getItems().add(fullnameMapping);"},{"sha":"3e63f28e510f25c715f8892bd9b6adc0a98ab1cc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConnectorITCase.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -42,13 +42,13 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ConnBundleTO;\n-import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.lib.to.ConnIdBundle;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClass;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -318,7 +318,7 @@ public void read() {\n \n     @Test\n     public void getBundles() {\n-        List<ConnBundleTO> bundles = CONNECTOR_SERVICE.getBundles(Locale.ENGLISH.getLanguage());\n+        List<ConnIdBundle> bundles = CONNECTOR_SERVICE.getBundles(Locale.ENGLISH.getLanguage());\n         assertNotNull(bundles);\n         assertFalse(bundles.isEmpty());\n         bundles.forEach(Assertions::assertNotNull);\n@@ -472,7 +472,7 @@ public void buildObjectClassInfo() {\n                 \"5aa5b8be-7521-481a-9651-c557aea078c1\", Locale.ENGLISH.getLanguage());\n         assertNotNull(db);\n \n-        List<ConnIdObjectClassTO> objectClassInfo = CONNECTOR_SERVICE.buildObjectClassInfo(db, true);\n+        List<ConnIdObjectClass> objectClassInfo = CONNECTOR_SERVICE.buildObjectClassInfo(db, true);\n         assertNotNull(objectClassInfo);\n         assertEquals(1, objectClassInfo.size());\n         assertEquals(ObjectClass.ACCOUNT_NAME, objectClassInfo.get(0).getType());\n@@ -486,7 +486,7 @@ public void buildObjectClassInfo() {\n         assertNotNull(objectClassInfo);\n \n         Collection<String> objectClasses = objectClassInfo.stream().\n-                map(ConnIdObjectClassTO::getType).collect(Collectors.toSet());\n+                map(ConnIdObjectClass::getType).collect(Collectors.toSet());\n         assertTrue(objectClasses.contains(ObjectClass.ACCOUNT_NAME));\n         assertTrue(objectClasses.contains(ObjectClass.GROUP_NAME));\n     }\n@@ -698,15 +698,15 @@ public void issueSYNCOPE112() {\n \n             resourceTO.getConfOverride().addAll(conf);\n \n-            ProvisionTO provisionTO = new ProvisionTO();\n+            Provision provisionTO = new Provision();\n             provisionTO.setAnyType(AnyTypeKind.USER.name());\n             provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n             resourceTO.getProvisions().add(provisionTO);\n \n-            MappingTO mapping = new MappingTO();\n+            Mapping mapping = new Mapping();\n             provisionTO.setMapping(mapping);\n \n-            ItemTO mapItem = new ItemTO();\n+            Item mapItem = new Item();\n             mapItem.setExtAttrName(\"uid\");\n             mapItem.setIntAttrName(\"userId\");\n             mapItem.setConnObjectKey(true);"},{"sha":"fdcb5b7587b9d78e6e6edbf54d17955fe781203e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ExceptionMapperITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -191,7 +191,7 @@ public void invalidRequests() {\n \n         try {\n             ResourceTO ldap = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n-            ItemTO mapping = ldap.getProvisions().get(0).getMapping().getItems().get(0);\n+            Item mapping = ldap.getProvisions().get(0).getMapping().getItems().get(0);\n             mapping.setIntAttrName(\"memberships.cn\");\n             RESOURCE_SERVICE.update(ldap);\n             fail(\"This should not happen\");"},{"sha":"11af0a7669b05ea89eb16bbbb8393428262e84d5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -65,17 +65,17 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n@@ -133,7 +133,7 @@ public void create() {\n \n         assertTrue(groupTO.getResources().contains(RESOURCE_NAME_LDAP));\n \n-        ConnObjectTO connObjectTO =\n+        ConnObject connObjectTO =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n         assertNotNull(connObjectTO);\n         assertNotNull(connObjectTO.getAttr(\"owner\"));\n@@ -992,7 +992,7 @@ public void provisionMembers() throws InterruptedException {\n             assertEquals(TaskJob.Status.SUCCESS.name(), execs.get().get(0).getStatus());\n \n             // 6. verify that the user above is now fond on LDAP\n-            ConnObjectTO userOnLdap =\n+            ConnObject userOnLdap =\n                     RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n             assertNotNull(userOnLdap);\n         } finally {\n@@ -1047,19 +1047,19 @@ public void issueSYNCOPE632() {\n             newLDAP.setKey(\"new-ldap\");\n             newLDAP.setPropagationPriority(0);\n \n-            for (ProvisionTO provision : newLDAP.getProvisions()) {\n+            for (Provision provision : newLDAP.getProvisions()) {\n                 provision.getVirSchemas().clear();\n             }\n \n-            MappingTO mapping = newLDAP.getProvision(AnyTypeKind.GROUP.name()).get().getMapping();\n+            Mapping mapping = newLDAP.getProvision(AnyTypeKind.GROUP.name()).get().getMapping();\n \n-            ItemTO connObjectKey = mapping.getConnObjectKeyItem();\n+            Item connObjectKey = mapping.getConnObjectKeyItem().get();\n             connObjectKey.setIntAttrName(\"displayProperty\");\n             connObjectKey.setPurpose(MappingPurpose.PROPAGATION);\n             mapping.setConnObjectKeyItem(connObjectKey);\n             mapping.setConnObjectLink(\"'cn=' + displayProperty + ',ou=groups,o=isp'\");\n \n-            ItemTO description = new ItemTO();\n+            Item description = new Item();\n             description.setIntAttrName(\"key\");\n             description.setExtAttrName(\"description\");\n             description.setPurpose(MappingPurpose.PROPAGATION);\n@@ -1196,7 +1196,7 @@ public void issueSYNCOPE1467() {\n             assertNotNull(groupTO);\n             assertTrue(groupTO.getResources().contains(RESOURCE_NAME_LDAP));\n \n-            ConnObjectTO connObjectTO =\n+            ConnObject connObjectTO =\n                     RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n             assertNotNull(connObjectTO);\n             assertEquals(\"issueSYNCOPE1467\", connObjectTO.getAttr(\"cn\").get().getValues().get(0));"},{"sha":"b257aec88ada99fdcbcd3ded76bb39c17f1c9138","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LinkedAccountITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -42,7 +42,7 @@\n import org.apache.syncope.common.lib.request.LinkedAccountUR;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n@@ -101,7 +101,7 @@ public void createWithLinkedAccountThenUpdateThenRemove() throws NamingException\n         assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n         assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n \n-        ConnObjectTO ldapObj = RESOURCE_SERVICE.readConnObject(\n+        ConnObject ldapObj = RESOURCE_SERVICE.readConnObject(\n                 RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), connObjectKeyValue);\n         assertNotNull(ldapObj);\n         assertEquals(user.getPlainAttr(\"email\").get().getValues(), ldapObj.getAttr(\"mail\").get().getValues());\n@@ -230,7 +230,7 @@ public void createWithoutLinkedAccountThenAdd() throws NamingException {\n         assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n         assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n \n-        ConnObjectTO ldapObj = RESOURCE_SERVICE.readConnObject(\n+        ConnObject ldapObj = RESOURCE_SERVICE.readConnObject(\n                 RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), connObjectKeyValue);\n         assertNotNull(ldapObj);\n         assertEquals(user.getPlainAttr(\"email\").get().getValues(), ldapObj.getAttr(\"mail\").get().getValues());"},{"sha":"accc21204da6822150bd9546d89b9d17ddb78b91","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n@@ -219,7 +219,7 @@ public void pull() {\n         ResourceTO newResource = RESOURCE_SERVICE.read(RESOURCE_NAME_DBPULL);\n         newResource.setKey(getUUIDString());\n \n-        ItemTO item = newResource.getProvision(\"USER\").get().getMapping().getItems().stream().\n+        Item item = newResource.getProvision(\"USER\").get().getMapping().getItems().stream().\n                 filter(object -> \"firstname\".equals(object.getIntAttrName())).findFirst().get();\n         assertNotNull(item);\n         assertEquals(\"ID\", item.getExtAttrName());"},{"sha":"1760969d11a78ee8749ce88a2d4737f9819d6b50","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -38,10 +38,10 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -141,37 +141,37 @@ public void createResourceAndPull() {\n         resource.setConnector(conn.getKey());\n \n         try {\n-            ProvisionTO provisionTO = new ProvisionTO();\n+            Provision provisionTO = new Provision();\n             provisionTO.setAnyType(AnyTypeKind.USER.name());\n             provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n             resource.getProvisions().add(provisionTO);\n \n-            MappingTO mapping = new MappingTO();\n+            Mapping mapping = new Mapping();\n             mapping.setConnObjectLink(\"'uid=' + username + ',ou=people,o=isp'\");\n             provisionTO.setMapping(mapping);\n \n-            ItemTO item = new ItemTO();\n+            Item item = new Item();\n             item.setIntAttrName(\"username\");\n             item.setExtAttrName(\"cn\");\n             item.setPurpose(MappingPurpose.BOTH);\n             mapping.setConnObjectKeyItem(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setPassword(true);\n             item.setIntAttrName(\"password\");\n             item.setExtAttrName(\"userPassword\");\n             item.setPurpose(MappingPurpose.BOTH);\n             item.setMandatoryCondition(\"true\");\n             mapping.add(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setIntAttrName(\"key\");\n             item.setPurpose(MappingPurpose.BOTH);\n             item.setExtAttrName(\"sn\");\n             item.setMandatoryCondition(\"true\");\n             mapping.add(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setIntAttrName(\"email\");\n             item.setPurpose(MappingPurpose.BOTH);\n             item.setExtAttrName(\"mail\");"},{"sha":"ad8b4476572e4481c587d003ff0738468b30e1ef","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -60,16 +60,16 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -207,10 +207,10 @@ public void propagationJEXLTransformer() {\n         // 0. Set propagation JEXL MappingItemTransformer\n         ResourceTO resource = RESOURCE_SERVICE.read(RESOURCE_NAME_DBSCRIPTED);\n         ResourceTO originalResource = SerializationUtils.clone(resource);\n-        ProvisionTO provision = resource.getProvision(PRINTER).get();\n+        Provision provision = resource.getProvision(PRINTER).get();\n         assertNotNull(provision);\n \n-        Optional<ItemTO> mappingItem = provision.getMapping().getItems().stream().\n+        Optional<Item> mappingItem = provision.getMapping().getItems().stream().\n                 filter(item -> \"location\".equals(item.getIntAttrName())).findFirst();\n         assertTrue(mappingItem.isPresent());\n         assertTrue(mappingItem.get().getTransformers().isEmpty());\n@@ -231,7 +231,7 @@ public void propagationJEXLTransformer() {\n \n             // 2. verify that JEXL MappingItemTransformer was applied during propagation\n             // (location ends with given suffix on external resource)\n-            ConnObjectTO connObjectTO = RESOURCE_SERVICE.\n+            ConnObject connObjectTO = RESOURCE_SERVICE.\n                     readConnObject(RESOURCE_NAME_DBSCRIPTED, anyObjectTO.getType(), anyObjectTO.getKey());\n             assertFalse(anyObjectTO.getPlainAttr(\"location\").get().getValues().get(0).endsWith(suffix));\n             assertTrue(connObjectTO.getAttr(\"LOCATION\").get().getValues().get(0).endsWith(suffix));\n@@ -245,14 +245,14 @@ public void privileges() {\n         ResourceTO ldap = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n         ldap.setKey(\"ldapWithPrivileges\");\n \n-        ProvisionTO provision = ldap.getProvision(AnyTypeKind.USER.name()).orElse(null);\n+        Provision provision = ldap.getProvision(AnyTypeKind.USER.name()).orElse(null);\n         provision.getMapping().getItems().removeIf(item -> \"mail\".equals(item.getIntAttrName()));\n         provision.getVirSchemas().clear();\n \n         ldap.getProvisions().clear();\n         ldap.getProvisions().add(provision);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setIntAttrName(\"privileges[mightyApp]\");\n         item.setExtAttrName(\"businessCategory\");\n         item.setPurpose(MappingPurpose.PROPAGATION);\n@@ -468,21 +468,21 @@ public void issueSYNCOPE1430() throws ParseException {\n         ResourceTO ldap = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n         try {\n             // 1. clone the LDAP resource and add some sensible mappings\n-            ProvisionTO provision = ldap.getProvision(AnyTypeKind.USER.name()).orElse(null);\n+            Provision provision = ldap.getProvision(AnyTypeKind.USER.name()).orElse(null);\n             assertNotNull(provision);\n             provision.getMapping().getItems().removeIf(item -> \"mail\".equals(item.getExtAttrName()));\n             provision.getVirSchemas().clear();\n \n             // Date -> long (JEXL expression) -> string\n-            ItemTO loginDateForJexlAsLong = new ItemTO();\n+            Item loginDateForJexlAsLong = new Item();\n             loginDateForJexlAsLong.setPurpose(MappingPurpose.PROPAGATION);\n             loginDateForJexlAsLong.setIntAttrName(\"loginDate\");\n             loginDateForJexlAsLong.setExtAttrName(\"employeeNumber\");\n             loginDateForJexlAsLong.setPropagationJEXLTransformer(\"value.toInstant().toEpochMilli()\");\n             provision.getMapping().add(loginDateForJexlAsLong);\n \n             // Date -> string (JEXL expression)\n-            ItemTO loginDateForJexlAsString = new ItemTO();\n+            Item loginDateForJexlAsString = new Item();\n             loginDateForJexlAsString.setPurpose(MappingPurpose.PROPAGATION);\n             loginDateForJexlAsString.setIntAttrName(\"loginDate\");\n             loginDateForJexlAsString.setExtAttrName(\"street\");\n@@ -491,15 +491,15 @@ public void issueSYNCOPE1430() throws ParseException {\n             provision.getMapping().add(loginDateForJexlAsString);\n \n             // Date -> long\n-            ItemTO loginDateForJavaToLong = new ItemTO();\n+            Item loginDateForJavaToLong = new Item();\n             loginDateForJavaToLong.setPurpose(MappingPurpose.PROPAGATION);\n             loginDateForJavaToLong.setIntAttrName(\"loginDate\");\n             loginDateForJavaToLong.setExtAttrName(\"st\");\n             loginDateForJavaToLong.getTransformers().add(DateToLongItemTransformer.class.getSimpleName());\n             provision.getMapping().add(loginDateForJavaToLong);\n \n             // Date -> date\n-            ItemTO loginDateForJavaToDate = new ItemTO();\n+            Item loginDateForJavaToDate = new Item();\n             loginDateForJavaToDate.setPurpose(MappingPurpose.PROPAGATION);\n             loginDateForJavaToDate.setIntAttrName(\"loginDate\");\n             loginDateForJavaToDate.setExtAttrName(\"carLicense\");\n@@ -575,18 +575,18 @@ public void issueSYNCOPE1473() throws ParseException {\n         UserTO userTO = null;\n         try {\n             // 1. clone the LDAP resource and add some sensible mappings\n-            ProvisionTO provisionGroup =\n+            Provision provisionGroup =\n                     SerializationUtils.clone(ldap.getProvision(AnyTypeKind.GROUP.name()).orElse(null));\n             assertNotNull(provisionGroup);\n             provisionGroup.getVirSchemas().clear();\n \n-            ProvisionTO provisionUser =\n+            Provision provisionUser =\n                     SerializationUtils.clone(ldap.getProvision(AnyTypeKind.USER.name()).orElse(null));\n             assertNotNull(provisionUser);\n             provisionUser.getMapping().getItems().removeIf(item -> \"mail\".equals(item.getExtAttrName()));\n             provisionUser.getVirSchemas().clear();\n \n-            ItemTO ldapGroups = new ItemTO();\n+            Item ldapGroups = new Item();\n             ldapGroups.setPurpose(MappingPurpose.PROPAGATION);\n             ldapGroups.setIntAttrName(schemaTO.getKey());\n             ldapGroups.setExtAttrName(\"ldapGroups\");\n@@ -642,7 +642,7 @@ public void issueSYNCOPE1473() throws ParseException {\n                     new MembershipUR.Builder(newGroupTO.getKey()).operation(PatchOperation.ADD_REPLACE).build());\n             USER_SERVICE.update(userUR);\n \n-            ConnObjectTO connObject =\n+            ConnObject connObject =\n                     RESOURCE_SERVICE.readConnObject(ldap.getKey(), AnyTypeKind.USER.name(), userTO.getKey());\n             assertNotNull(connObject);\n             assertTrue(connObject.getAttr(\"ldapGroups\").isPresent());\n@@ -665,12 +665,12 @@ public void issueSYNCOPE1567() {\n         ResourceTO ldap = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n         try {\n             // 1. clone the LDAP resource and add the relationships mapping\n-            ProvisionTO provisionUser =\n+            Provision provisionUser =\n                     SerializationUtils.clone(ldap.getProvision(AnyTypeKind.USER.name()).orElse(null));\n             assertNotNull(provisionUser);\n             provisionUser.getVirSchemas().clear();\n \n-            ItemTO relationships = new ItemTO();\n+            Item relationships = new Item();\n             relationships.setPurpose(MappingPurpose.PROPAGATION);\n             relationships.setIntAttrName(\"relationships[neighborhood][PRINTER].model\");\n             relationships.setExtAttrName(\"l\");\n@@ -707,7 +707,7 @@ public void issueSYNCOPE1567() {\n             assertEquals(\"Canon MFC8030\", attr.getValue().get(0).toString());\n \n             // 3. check propagated value\n-            ConnObjectTO connObject =\n+            ConnObject connObject =\n                     RESOURCE_SERVICE.readConnObject(ldap.getKey(), AnyTypeKind.USER.name(), userTO.getKey());\n             assertNotNull(connObject);\n             assertTrue(connObject.getAttr(\"l\").isPresent());\n@@ -726,13 +726,13 @@ public void issueSYNCOPE1605() throws ParseException {\n         ResourceTO ldap = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n         try {\n             // 1. clone the LDAP resource and add some sensible mappings\n-            ProvisionTO provisionGroup =\n+            Provision provisionGroup =\n                     SerializationUtils.clone(ldap.getProvision(AnyTypeKind.GROUP.name()).orElse(null));\n             assertNotNull(provisionGroup);\n             provisionGroup.getVirSchemas().clear();\n             provisionGroup.getMapping().getItems().clear();\n \n-            ItemTO item = new ItemTO();\n+            Item item = new Item();\n             item.setConnObjectKey(true);\n             item.setIntAttrName(\"name\");\n             item.setExtAttrName(\"description\");\n@@ -766,7 +766,7 @@ public void issueSYNCOPE1605() throws ParseException {\n             assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n             assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n \n-            ConnObjectTO beforeConnObject =\n+            ConnObject beforeConnObject =\n                     RESOURCE_SERVICE.readConnObject(ldap.getKey(), AnyTypeKind.GROUP.name(), groupTO.getKey());\n \n             GroupUR groupUR = new GroupUR();\n@@ -782,7 +782,7 @@ public void issueSYNCOPE1605() throws ParseException {\n             assertEquals(ResourceOperation.UPDATE, tasks.getResult().get(0).getOperation());\n             assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n \n-            ConnObjectTO afterConnObject =\n+            ConnObject afterConnObject =\n                     RESOURCE_SERVICE.readConnObject(ldap.getKey(), AnyTypeKind.GROUP.name(), groupTO.getKey());\n             assertNotEquals(afterConnObject.getAttr(Name.NAME).get().getValues().get(0),\n                     beforeConnObject.getAttr(Name.NAME).get().getValues().get(0));"},{"sha":"cab56ca412e2479e2c6128c47de86730f7f96fb8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -69,14 +69,14 @@\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.RemediationTO;\n@@ -430,7 +430,7 @@ public void reconcileFromLDAP() {\n         assertEquals(matchingUsers.getResult().get(0).getKey(), groupTO.getUserOwner());\n         assertNull(groupTO.getGroupOwner());\n         // SYNCOPE-1343, set value title to null on LDAP\n-        ConnObjectTO userConnObject = RESOURCE_SERVICE.readConnObject(\n+        ConnObject userConnObject = RESOURCE_SERVICE.readConnObject(\n                 RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), matchingUsers.getResult().get(0).getKey());\n         assertNotNull(userConnObject);\n         assertEquals(\"odd\", userConnObject.getAttr(\"title\").get().getValues().get(0));\n@@ -467,7 +467,7 @@ public void reconcileFromLDAP() {\n         assertNull(matchingUsers.getResult().get(0).getPlainAttr(\"title\").orElse(null));\n \n         // SYNCOPE-1356 remove group membership from LDAP, pull and check in Syncope\n-        ConnObjectTO groupConnObject = RESOURCE_SERVICE.readConnObject(\n+        ConnObject groupConnObject = RESOURCE_SERVICE.readConnObject(\n                 RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), matchingGroups.getResult().get(0).getKey());\n         assertNotNull(groupConnObject);\n         Attr groupDn = groupConnObject.getAttr(Name.NAME).get();\n@@ -494,7 +494,7 @@ public void reconcileFromScriptedSQL() throws IOException {\n         // 0. reset sync token and set MappingItemTransformer\n         ResourceTO resource = RESOURCE_SERVICE.read(RESOURCE_NAME_DBSCRIPTED);\n         ResourceTO originalResource = SerializationUtils.clone(resource);\n-        ProvisionTO provision = resource.getProvision(PRINTER).get();\n+        Provision provision = resource.getProvision(PRINTER).get();\n         assertNotNull(provision);\n \n         ImplementationTO transformer = null;\n@@ -517,7 +517,7 @@ public void reconcileFromScriptedSQL() throws IOException {\n         }\n         assertNotNull(transformer);\n \n-        ItemTO mappingItem = provision.getMapping().getItems().stream().\n+        Item mappingItem = provision.getMapping().getItems().stream().\n                 filter(object -> \"location\".equals(object.getIntAttrName())).findFirst().get();\n         assertNotNull(mappingItem);\n         mappingItem.getTransformers().clear();\n@@ -544,7 +544,7 @@ public void reconcileFromScriptedSQL() throws IOException {\n \n             // 2. verify that PrefixMappingItemTransformer was applied during propagation\n             // (location starts with given prefix on external resource)\n-            ConnObjectTO connObjectTO = RESOURCE_SERVICE.readConnObject(\n+            ConnObject connObjectTO = RESOURCE_SERVICE.readConnObject(\n                     RESOURCE_NAME_DBSCRIPTED, anyObjectTO.getType(), anyObjectTO.getKey());\n             assertFalse(anyObjectTO.getPlainAttr(\"location\").get().getValues().get(0).startsWith(prefix));\n             assertTrue(connObjectTO.getAttr(\"LOCATION\").get().getValues().get(0).startsWith(prefix));\n@@ -746,7 +746,7 @@ public void remediation() {\n         ResourceTO ldap = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n         ldap.setKey(\"ldapForRemediation\");\n \n-        ProvisionTO provision = ldap.getProvision(AnyTypeKind.USER.name()).get();\n+        Provision provision = ldap.getProvision(AnyTypeKind.USER.name()).get();\n         provision.getMapping().getItems().removeIf(item -> \"userId\".equals(item.getIntAttrName()));\n         provision.getMapping().getItems().removeIf(item -> \"mail\".equals(item.getIntAttrName()));\n         provision.getVirSchemas().clear();\n@@ -832,7 +832,7 @@ public void remediationSinglePull() throws IOException {\n         ResourceTO ldap = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n         ldap.setKey(\"ldapForRemediationSinglePull\");\n \n-        ProvisionTO provision = ldap.getProvision(AnyTypeKind.USER.name()).get();\n+        Provision provision = ldap.getProvision(AnyTypeKind.USER.name()).get();\n         provision.getMapping().getItems().removeIf(item -> \"userId\".equals(item.getIntAttrName()));\n         provision.getMapping().getItems().removeIf(item -> \"email\".equals(item.getIntAttrName()));\n         provision.getVirSchemas().clear();\n@@ -1224,7 +1224,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             assertNotNull(self);\n \n             // 4. Check that the LDAP resource has the old password\n-            ConnObjectTO connObject =\n+            ConnObject connObject =\n                     RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n             assertNotNull(getLdapRemoteObject(\n                     connObject.getAttr(Name.NAME).get().getValues().get(0),\n@@ -1338,7 +1338,7 @@ public void issueSYNCOPE1062() {\n             group = GROUP_SERVICE.read(\"testLDAPGroup\");\n             assertNotNull(group);\n \n-            ConnObjectTO connObject =\n+            ConnObject connObject =\n                     RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n             assertNotNull(connObject);\n             assertEquals(\"pullFromLDAP@syncope.apache.org\", connObject.getAttr(\"mail\").get().getValues().get(0));\n@@ -1433,7 +1433,7 @@ public void issueSYNCOPE1656() throws NamingException {\n             assertEquals(\"pullFromLDAP_issue1656@syncope.apache.org\",\n                     pullFromLDAP4issue1656.getPlainAttr(\"email\").get().getValues().get(0));\n             // 2. Edit mail attribute directly on the resource in order to have a not valid email\n-            ConnObjectTO connObject = RESOURCE_SERVICE.readConnObject(\n+            ConnObject connObject = RESOURCE_SERVICE.readConnObject(\n                     RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), pullFromLDAP4issue1656.getKey());\n             assertNotNull(connObject);\n             assertEquals(\"pullFromLDAP_issue1656@syncope.apache.org\","},{"sha":"842c3b46dfdb6376b1519b3fcbb858ea91a1cb9b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -35,13 +35,13 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -388,16 +388,16 @@ public void issueSYNCOPE598() {\n             resourceTO.setKey(resourceName);\n             resourceTO.setConnector(\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\");\n \n-            ProvisionTO provisionTO = new ProvisionTO();\n+            Provision provisionTO = new Provision();\n             provisionTO.setAnyType(AnyTypeKind.GROUP.name());\n             provisionTO.setObjectClass(ObjectClass.GROUP_NAME);\n             provisionTO.getAuxClasses().add(typeClass.getKey());\n             resourceTO.getProvisions().add(provisionTO);\n \n-            MappingTO mapping = new MappingTO();\n+            Mapping mapping = new Mapping();\n             provisionTO.setMapping(mapping);\n \n-            ItemTO item = new ItemTO();\n+            Item item = new Item();\n             item.setExtAttrName(\"cn\");\n             item.setIntAttrName(schemaTO.getKey());\n             item.setConnObjectKey(true);"},{"sha":"9cf43483ee9b7463a755661455cdd5738819e931","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":68,"deletions":63,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -35,10 +35,10 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n-import org.apache.syncope.common.lib.to.OrgUnitTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n+import org.apache.syncope.common.lib.to.OrgUnit;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -62,27 +62,27 @@ private static ResourceTO buildResourceTO(final String resourceKey) {\n         resourceTO.setKey(resourceKey);\n         resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n+        Provision provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n         provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setExtAttrName(\"userId\");\n         item.setIntAttrName(\"userId\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setExtAttrName(\"username\");\n         item.setIntAttrName(\"key\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setExtAttrName(\"fullname\");\n         item.setIntAttrName(\"cn\");\n         item.setConnObjectKey(false);\n@@ -119,28 +119,28 @@ public void createOverridingProps() {\n         String resourceKey = \"overriding-conn-conf-target-resource-create\";\n         ResourceTO resourceTO = new ResourceTO();\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n+        Provision provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n         provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setExtAttrName(\"uid\");\n         item.setIntAttrName(\"userId\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setExtAttrName(\"username\");\n         item.setIntAttrName(\"key\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setExtAttrName(\"fullname\");\n         item.setIntAttrName(\"cn\");\n         item.setConnObjectKey(false);\n@@ -178,29 +178,29 @@ public void createWithSingleMappingItem() {\n         resourceTO.setKey(resourceKey);\n         resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n+        Provision provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n         provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.setConnObjectKeyItem(item);\n \n-        provisionTO = new ProvisionTO();\n+        provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.GROUP.name());\n         provisionTO.setObjectClass(ObjectClass.GROUP_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        mapping = new MappingTO();\n+        mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n-        item = new ItemTO();\n+        item = new Item();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"groupId\");\n         item.setConnObjectKey(true);\n@@ -215,10 +215,14 @@ public void createWithSingleMappingItem() {\n         assertNotNull(actual.getProvision(AnyTypeKind.USER.name()).get().getMapping().getItems());\n         assertNotNull(actual.getProvision(AnyTypeKind.GROUP.name()).get().getMapping());\n         assertNotNull(actual.getProvision(AnyTypeKind.GROUP.name()).get().getMapping().getItems());\n-        assertEquals(MappingPurpose.PULL,\n-                actual.getProvision(AnyTypeKind.GROUP.name()).get().getMapping().getConnObjectKeyItem().getPurpose());\n-        assertEquals(MappingPurpose.PROPAGATION,\n-                actual.getProvision(AnyTypeKind.USER.name()).get().getMapping().getConnObjectKeyItem().getPurpose());\n+        assertEquals(\n+                MappingPurpose.PULL,\n+                actual.getProvision(AnyTypeKind.GROUP.name()).get().getMapping().\n+                        getConnObjectKeyItem().get().getPurpose());\n+        assertEquals(\n+                MappingPurpose.PROPAGATION,\n+                actual.getProvision(AnyTypeKind.USER.name()).get().getMapping().\n+                        getConnObjectKeyItem().get().getPurpose());\n     }\n \n     @Test\n@@ -228,21 +232,21 @@ public void createWithInvalidMapping() {\n         resourceTO.setKey(resourceKey);\n         resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n+        Provision provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n         provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setExtAttrName(\"email\");\n         // missing intAttrName ...\n         mapping.add(item);\n@@ -264,21 +268,21 @@ public void createWithoutExtAttr() {\n             resourceTO.setKey(resourceKey);\n             resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n \n-            ProvisionTO provisionTO = new ProvisionTO();\n+            Provision provisionTO = new Provision();\n             provisionTO.setAnyType(AnyTypeKind.USER.name());\n             provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n             resourceTO.getProvisions().add(provisionTO);\n \n-            MappingTO mapping = new MappingTO();\n+            Mapping mapping = new Mapping();\n             provisionTO.setMapping(mapping);\n \n-            ItemTO item = new ItemTO();\n+            Item item = new Item();\n             item.setIntAttrName(\"key\");\n             item.setExtAttrName(\"userId\");\n             item.setConnObjectKey(true);\n             mapping.setConnObjectKeyItem(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setIntAttrName(\"usernane\");\n             // missing extAttrName ...\n             mapping.add(item);\n@@ -295,15 +299,15 @@ public void createWithPasswordPolicy() {\n         resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n         resourceTO.setPasswordPolicy(\"986d1236-3ac5-4a19-810c-5ab21d79cba1\");\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n+        Provision provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n         provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setExtAttrName(\"userId\");\n         item.setIntAttrName(\"userId\");\n         item.setConnObjectKey(true);\n@@ -341,31 +345,30 @@ public void update() {\n         resourceTO.setKey(resourceKey);\n         resourceTO.setConnector(\"5aa5b8be-7521-481a-9651-c557aea078c1\");\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n+        Provision provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n         provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n \n         // Update with an existing and already assigned mapping\n-        ItemTO item = new ItemTO();\n-        item.setKey(\"cc973ed6-d031-4790-adab-fc059ac0c818\");\n+        Item item = new Item();\n         item.setExtAttrName(\"test3\");\n         item.setIntAttrName(\"fullname\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n \n         // Update defining new mappings\n         for (int i = 4; i < 6; i++) {\n-            item = new ItemTO();\n+            item = new Item();\n             item.setExtAttrName(\"test\" + i);\n             item.setIntAttrName(\"fullname\");\n             item.setPurpose(MappingPurpose.BOTH);\n             mapping.add(item);\n         }\n-        item = new ItemTO();\n+        item = new Item();\n         item.setExtAttrName(\"username\");\n         item.setIntAttrName(\"key\");\n         item.setConnObjectKey(true);\n@@ -377,7 +380,7 @@ public void update() {\n         assertNotNull(actual);\n \n         // check for existence\n-        Collection<ItemTO> mapItems = actual.getProvision(AnyTypeKind.USER.name()).get().getMapping().getItems();\n+        Collection<Item> mapItems = actual.getProvision(AnyTypeKind.USER.name()).get().getMapping().getItems();\n         assertNotNull(mapItems);\n         assertEquals(4, mapItems.size());\n     }\n@@ -460,11 +463,11 @@ public void orgUnit() {\n         assertNotNull(resourceTO);\n         assertNull(resourceTO.getOrgUnit());\n \n-        OrgUnitTO orgUnit = new OrgUnitTO();\n+        OrgUnit orgUnit = new OrgUnit();\n         orgUnit.setConnObjectLink(\"'ou=' + name + ',o=isp'\");\n         orgUnit.setObjectClass(\"organizationalUnit\");\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setIntAttrName(\"name\");\n         item.setExtAttrName(\"ou\");\n         item.setMandatoryCondition(\"true\");\n@@ -484,7 +487,7 @@ public void orgUnit() {\n \n         resourceTO = RESOURCE_SERVICE.read(resourceKey);\n         assertNull(resourceTO.getOrgUnit());\n-        assertEquals(Integer.valueOf(11), resourceTO.getPropagationPriority());\n+        assertEquals(11, resourceTO.getPropagationPriority());\n     }\n \n     @Test\n@@ -500,7 +503,7 @@ public void read() {\n         ResourceTO resource = RESOURCE_SERVICE.read(RESOURCE_NAME_DBVIRATTR);\n         assertNotNull(resource);\n \n-        Optional<ProvisionTO> provision = resource.getProvision(AnyTypeKind.USER.name());\n+        Optional<Provision> provision = resource.getProvision(AnyTypeKind.USER.name());\n         assertTrue(provision.isPresent());\n         assertFalse(provision.get().getMapping().getItems().isEmpty());\n         assertFalse(provision.get().getMapping().getLinkingItems().isEmpty());\n@@ -585,21 +588,21 @@ public void issueSYNCOPE368() {\n         resourceTO.setKey(name);\n         resourceTO.setConnector(\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\");\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n+        Provision provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.GROUP.name());\n         provisionTO.setObjectClass(ObjectClass.GROUP_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setIntAttrName(\"name\");\n         item.setExtAttrName(\"cn\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setIntAttrName(\"userOwner\");\n         item.setExtAttrName(\"owner\");\n         item.setPurpose(MappingPurpose.BOTH);\n@@ -630,22 +633,22 @@ public void issueSYNCOPE493() {\n         resourceTO.setKey(resourceKey);\n         resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n+        Provision provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n         provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.setConnObjectKeyItem(item);\n \n-        ItemTO item2 = new ItemTO();\n+        Item item2 = new Item();\n         item2.setConnObjectKey(false);\n         item2.setIntAttrName(\"gender\");\n         item2.setExtAttrName(\"gender\");\n@@ -658,8 +661,10 @@ public void issueSYNCOPE493() {\n         assertNotNull(actual);\n         assertNotNull(actual.getProvision(AnyTypeKind.USER.name()).get().getMapping());\n         assertNotNull(actual.getProvision(AnyTypeKind.USER.name()).get().getMapping().getItems());\n-        assertEquals(MappingPurpose.PROPAGATION,\n-                actual.getProvision(AnyTypeKind.USER.name()).get().getMapping().getConnObjectKeyItem().getPurpose());\n+        assertEquals(\n+                MappingPurpose.PROPAGATION,\n+                actual.getProvision(AnyTypeKind.USER.name()).get().getMapping().\n+                        getConnObjectKeyItem().get().getPurpose());\n         actual.getProvision(AnyTypeKind.USER.name()).get().getMapping().getItems().stream().\n                 filter(itemTO -> (\"gender\".equals(itemTO.getIntAttrName()))).\n                 forEach(itemTO -> assertEquals(MappingPurpose.NONE, itemTO.getPurpose()));\n@@ -672,15 +677,15 @@ public static void issueSYNCOPE645() {\n         String connector = RESOURCE_SERVICE.read(\"ws-target-resource-1\").getConnector();\n         resource.setConnector(connector);\n \n-        ProvisionTO provision = new ProvisionTO();\n+        Provision provision = new Provision();\n         provision.setAnyType(AnyTypeKind.USER.name());\n         provision.setObjectClass(\"__ACCOUNT__\");\n         resource.getProvisions().add(provision);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provision.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setIntAttrName(\"icon\");\n         item.setExtAttrName(\"icon\");\n         item.setPurpose(MappingPurpose.BOTH);\n@@ -702,23 +707,23 @@ public void issueSYNCOPE888() {\n         resourceTO.setKey(resourceKey);\n         resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n+        Provision provisionTO = new Provision();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n         provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n+        Mapping mapping = new Mapping();\n         provisionTO.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n         // Add mapping for a not existing internal attribute\n-        item = new ItemTO();\n+        item = new Item();\n         item.setIntAttrName(\"locatio\");\n         item.setExtAttrName(\"location\");\n         item.setPurpose(MappingPurpose.BOTH);"},{"sha":"4ac8ce9f8b68d8ff64f38d591628bbf793329836","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -49,7 +49,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n+import org.apache.syncope.common.lib.to.PagedConnObjectResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -524,7 +524,7 @@ public void searchConnObjectsBrowsePagedResult() {\n         try {\n             // 1. first search with no filters\n             ConnObjectTOQuery.Builder builder = new ConnObjectTOQuery.Builder().size(10);\n-            PagedConnObjectTOResult matches;\n+            PagedConnObjectResult matches;\n             do {\n                 matches = null;\n \n@@ -564,7 +564,7 @@ public void searchConnObjectsBrowsePagedResult() {\n \n     @Test\n     public void searchConnObjectsWithFilter() {\n-        PagedConnObjectTOResult matches = RESOURCE_SERVICE.searchConnObjects(\n+        PagedConnObjectResult matches = RESOURCE_SERVICE.searchConnObjects(\n                 RESOURCE_NAME_LDAP,\n                 AnyTypeKind.USER.name(),\n                 new ConnObjectTOQuery.Builder().size(100).fiql("},{"sha":"fec1043d0702059290a1de9402b0e580a6d89239","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -60,7 +60,7 @@\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -99,7 +99,7 @@\n \n public class UserITCase extends AbstractITCase {\n \n-    private static boolean getBooleanAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n+    private static boolean getBooleanAttribute(final ConnObject connObjectTO, final String attrName) {\n         return Boolean.parseBoolean(connObjectTO.getAttr(attrName).get().getValues().get(0));\n     }\n \n@@ -790,7 +790,7 @@ public void suspendReactivateOnResource() {\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        ConnObjectTO connObjectTO =\n+        ConnObject connObjectTO =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userKey);\n         assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n \n@@ -920,7 +920,7 @@ public void groupAttrPropagation() {\n         assertNotNull(userTO);\n         assertNotNull(userTO.getDerAttr(\"csvuserid\"));\n \n-        ConnObjectTO connObjectTO =\n+        ConnObject connObjectTO =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObjectTO);\n         assertEquals(\"sx-dx\", connObjectTO.getAttr(\"THEIRGROUP\").get().getValues().get(0));\n@@ -1007,7 +1007,7 @@ public void mappingPurpose() {\n         UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n-        ConnObjectTO connObjectTO =\n+        ConnObject connObjectTO =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n         assertFalse(connObjectTO.getAttr(\"email\").isPresent());\n     }"},{"sha":"83e9471953ebee193a2bae34d183357cab18a5c2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":22,"deletions":24,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -54,11 +54,11 @@\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -273,7 +273,7 @@ public void issueSYNCOPE108() {\n         assertEquals(2, userTO.getMemberships().size());\n         assertEquals(1, userTO.getResources().size());\n \n-        ConnObjectTO connObjectTO =\n+        ConnObject connObjectTO =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObjectTO);\n \n@@ -395,7 +395,7 @@ public void issueSYNCOPE267() {\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         UserTO userTO = result.getEntity();\n \n-        ConnObjectTO connObjectTO =\n+        ConnObject connObjectTO =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_DBVIRATTR, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObjectTO);\n         assertEquals(\"virtualvalue\", connObjectTO.getAttr(\"USERNAME\").get().getValues().get(0));\n@@ -454,15 +454,15 @@ public void issueSYNCOPE122() {\n \n         String pwdOnSyncope = userTO.getPassword();\n \n-        ConnObjectTO userOnDb = RESOURCE_SERVICE.readConnObject(\n+        ConnObject userOnDb = RESOURCE_SERVICE.readConnObject(\n                 RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userTO.getKey());\n         Attr pwdOnTestDbAttr = userOnDb.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n         assertNotNull(pwdOnTestDbAttr);\n         assertNotNull(pwdOnTestDbAttr.getValues());\n         assertFalse(pwdOnTestDbAttr.getValues().isEmpty());\n         String pwdOnTestDb = pwdOnTestDbAttr.getValues().get(0);\n \n-        ConnObjectTO userOnDb2 = RESOURCE_SERVICE.readConnObject(\n+        ConnObject userOnDb2 = RESOURCE_SERVICE.readConnObject(\n                 RESOURCE_NAME_TESTDB2, AnyTypeKind.USER.name(), userTO.getKey());\n         Attr pwdOnTestDb2Attr = userOnDb2.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n         assertNotNull(pwdOnTestDb2Attr);\n@@ -626,7 +626,7 @@ public void issueSYNCOPE354() {\n         assertNotNull(RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey()));\n \n         // 3. read group on resource, check that user DN is included in uniqueMember\n-        ConnObjectTO connObj = RESOURCE_SERVICE.readConnObject(\n+        ConnObject connObj = RESOURCE_SERVICE.readConnObject(\n                 RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n         assertNotNull(connObj);\n         assertTrue(connObj.getAttr(\"uniqueMember\").get().getValues().\n@@ -683,7 +683,7 @@ public void issueSYNCOPE357() throws IOException {\n         assertNotNull(userTO.getPlainAttr(\"photo\"));\n \n         // 3. read user on resource\n-        ConnObjectTO connObj = RESOURCE_SERVICE.readConnObject(\n+        ConnObject connObj = RESOURCE_SERVICE.readConnObject(\n                 RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObj);\n         Attr registeredAddress = connObj.getAttr(\"registeredAddress\").get();\n@@ -862,7 +862,7 @@ public void issueSYNCOPE454() throws NamingException {\n         assertNotNull(userTO);\n \n         // 2. read resource configuration for LDAP binding\n-        ConnObjectTO connObject =\n+        ConnObject connObject =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n \n         // 3. try (and succeed) to perform simple LDAP binding with provided password ('password123')\n@@ -897,7 +897,7 @@ public void issueSYNCOPE493() {\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         UserTO userTO = result.getEntity();\n \n-        ConnObjectTO actual =\n+        ConnObject actual =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(actual);\n         // check if mapping attribute with purpose NONE really hasn't been propagated\n@@ -907,13 +907,11 @@ public void issueSYNCOPE493() {\n         ResourceTO ws1 = RESOURCE_SERVICE.read(RESOURCE_NAME_WS1);\n         assertNotNull(ws1);\n \n-        MappingTO ws1NewUMapping = ws1.getProvision(AnyTypeKind.USER.name()).get().getMapping();\n+        Mapping ws1NewUMapping = ws1.getProvision(AnyTypeKind.USER.name()).get().getMapping();\n         // change purpose from NONE to BOTH\n-        for (ItemTO itemTO : ws1NewUMapping.getItems()) {\n-            if (\"firstname\".equals(itemTO.getIntAttrName())) {\n-                itemTO.setPurpose(MappingPurpose.BOTH);\n-            }\n-        }\n+        ws1NewUMapping.getItems().stream().\n+                filter(itemTO -> \"firstname\".equals(itemTO.getIntAttrName())).\n+                forEach(itemTO -> itemTO.setPurpose(MappingPurpose.BOTH));\n \n         ws1.getProvision(AnyTypeKind.USER.name()).get().setMapping(ws1NewUMapping);\n \n@@ -922,7 +920,7 @@ public void issueSYNCOPE493() {\n         assertNotNull(newWs1);\n \n         // check for existence\n-        Collection<ItemTO> mapItems = newWs1.getProvision(AnyTypeKind.USER.name()).get().getMapping().getItems();\n+        Collection<Item> mapItems = newWs1.getProvision(AnyTypeKind.USER.name()).get().getMapping().getItems();\n         assertNotNull(mapItems);\n         assertEquals(7, mapItems.size());\n \n@@ -938,7 +936,7 @@ public void issueSYNCOPE493() {\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         userTO = result.getEntity();\n \n-        ConnObjectTO newUser =\n+        ConnObject newUser =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n \n         assertNotNull(newUser.getAttr(\"NAME\"));\n@@ -947,7 +945,7 @@ public void issueSYNCOPE493() {\n         // 4.  restore resource ws-target-resource-1 mapping\n         ws1NewUMapping = newWs1.getProvision(AnyTypeKind.USER.name()).get().getMapping();\n         // restore purpose from BOTH to NONE\n-        for (ItemTO itemTO : ws1NewUMapping.getItems()) {\n+        for (Item itemTO : ws1NewUMapping.getItems()) {\n             if (\"firstname\".equals(itemTO.getIntAttrName())) {\n                 itemTO.setPurpose(MappingPurpose.NONE);\n             }\n@@ -1047,7 +1045,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         assertEquals(1, user.getResources().size());\n \n         // 4. Check that the LDAP resource has the correct password\n-        ConnObjectTO connObject =\n+        ConnObject connObject =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n \n         assertNotNull(getLdapRemoteObject(\n@@ -1094,7 +1092,7 @@ public void issueSYNCOPE391() {\n         userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n-        ConnObjectTO connObjectTO =\n+        ConnObject connObjectTO =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObjectTO);\n \n@@ -1191,7 +1189,7 @@ public void issueSYNCOPE647() {\n         assertNotNull(actual);\n         assertNotNull(actual.getDerAttr(\"csvuserid\"));\n \n-        ConnObjectTO connObjectTO =\n+        ConnObject connObjectTO =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), actual.getKey());\n         assertNotNull(connObjectTO);\n         assertEquals(\"postalAddress\", connObjectTO.getAttr(\"postalAddress\").get().getValues().get(0));\n@@ -1354,7 +1352,7 @@ public void issueSYNCOPE881() {\n         assertNotNull(user);\n \n         // 3. verify that user is in LDAP\n-        ConnObjectTO connObject =\n+        ConnObject connObject =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n         assertNotNull(connObject);\n         Attr userDn = connObject.getAttr(Name.NAME).get();"},{"sha":"ce1fb035b342993ad943fbffc0b7cc75b009c290","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -39,12 +39,12 @@\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -99,7 +99,7 @@ public void issueSYNCOPE16() {\n     public void issueSYNCOPE260() {\n         // create new virtual schema for the resource below\n         ResourceTO ws2 = RESOURCE_SERVICE.read(RESOURCE_NAME_WS2);\n-        ProvisionTO provision = ws2.getProvision(AnyTypeKind.USER.name()).get();\n+        Provision provision = ws2.getProvision(AnyTypeKind.USER.name()).get();\n         assertNotNull(provision);\n \n         VirSchemaTO virSchema = new VirSchemaTO();\n@@ -132,7 +132,7 @@ public void issueSYNCOPE260() {\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         UserTO userTO = result.getEntity();\n \n-        ConnObjectTO connObjectTO =\n+        ConnObject connObjectTO =\n                 RESOURCE_SERVICE.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n         assertEquals(\"virtualvalue\", connObjectTO.getAttr(\"COMPANYNAME\").get().getValues().get(0));\n         // ----------------------------------\n@@ -256,10 +256,10 @@ public void issueSYNCOPE397() {\n         ResourceTO csv = RESOURCE_SERVICE.read(RESOURCE_NAME_CSV);\n \n         // change mapping of resource-csv\n-        MappingTO origMapping = SerializationUtils.clone(csv.getProvisions().get(0).getMapping());\n+        Mapping origMapping = SerializationUtils.clone(csv.getProvisions().get(0).getMapping());\n         try {\n             // remove this mapping\n-            Optional<ItemTO> email = csv.getProvisions().get(0).getMapping().getItems().stream().\n+            Optional<Item> email = csv.getProvisions().get(0).getMapping().getItems().stream().\n                     filter(item -> \"email\".equals(item.getIntAttrName())).findFirst();\n             if (email.isPresent()) {\n                 csv.getProvisions().get(0).getMapping().getItems().remove(email.get());\n@@ -270,7 +270,7 @@ public void issueSYNCOPE397() {\n             assertNotNull(csv.getProvisions().get(0).getMapping());\n \n             // create new virtual schema for the resource below\n-            ProvisionTO provision = csv.getProvision(AnyTypeKind.USER.name()).get();\n+            Provision provision = csv.getProvision(AnyTypeKind.USER.name()).get();\n             assertNotNull(provision);\n \n             VirSchemaTO virSchema = new VirSchemaTO();\n@@ -481,28 +481,28 @@ public void issueSYNCOPE453() {\n             resourceTO.setKey(resourceName);\n             resourceTO.setConnector(\"be24b061-019d-4e3e-baf0-0a6d0a45cb9c\");\n \n-            ProvisionTO provisionTO = new ProvisionTO();\n+            Provision provisionTO = new Provision();\n             provisionTO.setAnyType(AnyTypeKind.USER.name());\n             provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n             resourceTO.getProvisions().add(provisionTO);\n \n-            MappingTO mapping = new MappingTO();\n+            Mapping mapping = new Mapping();\n             provisionTO.setMapping(mapping);\n \n-            ItemTO item = new ItemTO();\n+            Item item = new Item();\n             item.setIntAttrName(\"fullname\");\n             item.setExtAttrName(\"ID\");\n             item.setPurpose(MappingPurpose.PROPAGATION);\n             item.setConnObjectKey(true);\n             mapping.setConnObjectKeyItem(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setIntAttrName(\"username\");\n             item.setExtAttrName(\"USERNAME\");\n             item.setPurpose(MappingPurpose.PROPAGATION);\n             mapping.getItems().add(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setIntAttrName(\"groups[\" + groupName + \"].rvirtualdata\");\n             item.setExtAttrName(\"EMAIL\");\n             item.setPurpose(MappingPurpose.PROPAGATION);\n@@ -613,7 +613,7 @@ public void issueSYNCOPE501() {\n     public void issueSYNCOPE691() {\n         ResourceTO ldap = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n         try {\n-            ProvisionTO provision = ldap.getProvision(AnyTypeKind.USER.name()).orElse(null);\n+            Provision provision = ldap.getProvision(AnyTypeKind.USER.name()).orElse(null);\n             assertNotNull(provision);\n             provision.getMapping().getItems().removeIf(item -> \"mail\".equals(item.getExtAttrName()));\n             provision.getVirSchemas().clear();"},{"sha":"24f801b2819b41a13e70c97235645f88cc25175d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/WAClientAppITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n@@ -131,12 +131,12 @@ public void readWithPolicies() {\n     private void addItems() {\n         AuthModuleTO authModuleTO = AUTH_MODULE_SERVICE.read(AUTH_MODULE);\n \n-        ItemTO keyMapping = new ItemTO();\n+        Item keyMapping = new Item();\n         keyMapping.setIntAttrName(\"uid\");\n         keyMapping.setExtAttrName(\"username\");\n         authModuleTO.getItems().add(keyMapping);\n \n-        ItemTO fullnameMapping = new ItemTO();\n+        Item fullnameMapping = new Item();\n         fullnameMapping.setIntAttrName(\"cn\");\n         fullnameMapping.setExtAttrName(\"fullname\");\n         authModuleTO.getItems().add(fullnameMapping);"},{"sha":"ca2b2da4bf696e106b4cba4857e77676849b842c","filename":"fit/core-reference/src/test/resources/PrefixItemTransformer.groovy","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -22,10 +22,10 @@ import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair\n import org.apache.syncope.common.lib.to.EntityTO\n+import org.apache.syncope.common.lib.to.Item\n import org.apache.syncope.common.lib.types.AttrSchemaType\n import org.apache.syncope.core.persistence.api.entity.Any\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue\n-import org.apache.syncope.core.persistence.api.entity.resource.Item\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n @CompileStatic"},{"sha":"93112cf00bc19687d000c749188863c2c793cd82","filename":"fit/core-reference/src/test/resources/TestPullRule.groovy","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -18,10 +18,10 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n+import org.apache.syncope.common.lib.to.Provision\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule\n-import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n-import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond\n import org.identityconnectors.framework.common.objects.SyncDelta\n \n /**"},{"sha":"f83a85017745bd1d17b481ba9c522a1dd119cb9a","filename":"fit/core-reference/src/test/resources/TestPushRule.groovy","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPushRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPushRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPushRule.groovy?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -17,13 +17,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-import groovy.transform.CompileStatic;\n-import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.identityconnectors.framework.common.objects.AttributeBuilder;\n-import org.identityconnectors.framework.common.objects.filter.Filter;\n-import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+import groovy.transform.CompileStatic\n+import org.apache.syncope.common.lib.to.Provision\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule\n+import org.apache.syncope.core.persistence.api.entity.Any\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource\n+import org.identityconnectors.framework.common.objects.AttributeBuilder\n+import org.identityconnectors.framework.common.objects.filter.Filter\n+import org.identityconnectors.framework.common.objects.filter.FilterBuilder\n \n /**\n  * Test push rule relying on {@code email} attribute value.\n@@ -32,7 +33,7 @@ import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n class TestPushRule implements PushCorrelationRule {\n \n   @Override\n-  Filter getFilter(final Any<?> any, final Provision provision) {\n+  Filter getFilter(final Any<?> any, final ExternalResource resource, final Provision provision) {\n     return FilterBuilder.equalTo(\n       AttributeBuilder.build(\"email\", any.getPlainAttr(\"email\").get().getValuesAsStrings().get(0)));\n   }"},{"sha":"b797b39d74e69dcb1d835bc80ad9b2357d27a0c6","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/OIDC4UIITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -44,7 +44,7 @@\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n import org.apache.syncope.client.ui.commons.panels.OIDCC4UIConstants;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.OIDCC4UIProviderTO;\n import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n@@ -132,33 +132,33 @@ private static void oidcSetup(\n             cas.setCreateUnmatching(createUnmatching);\n             cas.setSelfRegUnmatching(selfRegUnmatching);\n \n-            ItemTO item = new ItemTO();\n+            Item item = new Item();\n             item.setIntAttrName(\"username\");\n             item.setExtAttrName(\"preferred_username\");\n             item.setConnObjectKey(true);\n             cas.setConnObjectKeyItem(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setIntAttrName(\"email\");\n             item.setExtAttrName(\"mail\");\n             cas.add(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setIntAttrName(\"userId\");\n             item.setExtAttrName(\"mail\");\n             cas.add(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setIntAttrName(\"firstname\");\n             item.setExtAttrName(\"givenName\");\n             cas.add(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setIntAttrName(\"surname\");\n             item.setExtAttrName(\"sn\");\n             cas.add(item);\n \n-            item = new ItemTO();\n+            item = new Item();\n             item.setIntAttrName(\"fullname\");\n             item.setExtAttrName(\"cn\");\n             cas.add(item);"},{"sha":"a755e2d056aa2dd5698eb215395934241c568169","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/SAML2SP4UIITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e702a667035b32585f45ed72cee5dc68a515219d/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java?ref=e702a667035b32585f45ed72cee5dc68a515219d","patch":"@@ -48,7 +48,7 @@\n import org.apache.http.util.EntityUtils;\n import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.SAML2SP4UIIdPTO;\n import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n@@ -126,33 +126,33 @@ public static void idpSetup() {\n         cas.setSelfRegUnmatching(false);\n         cas.getItems().clear();\n \n-        ItemTO item = new ItemTO();\n+        Item item = new Item();\n         item.setIntAttrName(\"username\");\n         item.setExtAttrName(\"NameID\");\n         item.setConnObjectKey(true);\n         cas.setConnObjectKeyItem(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setIntAttrName(\"email\");\n         item.setExtAttrName(\"mail\");\n         cas.add(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setIntAttrName(\"userId\");\n         item.setExtAttrName(\"mail\");\n         cas.add(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setIntAttrName(\"firstname\");\n         item.setExtAttrName(\"givenName\");\n         cas.add(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setIntAttrName(\"surname\");\n         item.setExtAttrName(\"sn\");\n         cas.add(item);\n \n-        item = new ItemTO();\n+        item = new Item();\n         item.setIntAttrName(\"fullname\");\n         item.setExtAttrName(\"cn\");\n         cas.add(item);"}]}