{"sha":"4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQxMzNjMjQwMmU0OTEzNDJkMGMzMmExYTZjNWE5YmI3ZDVhODg3MGI=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T16:20:09Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T16:20:09Z"},"message":"added info and help command, some bugfix and code improvements, SYNCOPE-158","tree":{"sha":"eed4257da4af323ed65ac7ff0b6b357416563505","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/eed4257da4af323ed65ac7ff0b6b357416563505"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"ae88f405f78aac4553db390c82982b858f459859","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ae88f405f78aac4553db390c82982b858f459859","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ae88f405f78aac4553db390c82982b858f459859"}],"stats":{"total":935,"additions":770,"deletions":165},"files":[{"sha":"926b4dd30702aa6b19978fd10df5a644e7d08690","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/ArgsManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FArgsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FArgsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FArgsManager.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -25,7 +25,7 @@ public final class ArgsManager {\n \n     public static void validator(final String[] args) throws IllegalArgumentException {\n         if (args.length == 0) {\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"Syntax error: no options\");\n         } else if (!\"install\".equalsIgnoreCase(args[0])) {\n             final File configFile = new File(InstallConfigFileTemplate.FILE_PATH);\n             if (!configFile.exists()) {"},{"sha":"6e2aeeb667328f170807b85c2d897f65f254b1e4","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/Input.java","status":"modified","additions":3,"deletions":34,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -18,21 +18,11 @@\n  */\n package org.apache.syncope.client.cli;\n \n-import java.util.List;\n import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n \n public class Input {\n \n-    private boolean ssl = false;\n-\n-    private String host = \"localhost\";\n-\n-    private String port = \"9080\";\n-\n-    private String username = \"admin\";\n-\n-    private String password = \"password\";\n-\n     private final AbstractCommand command;\n \n     private String option;\n@@ -42,7 +32,7 @@ public class Input {\n     public Input(final String[] args)\n             throws InstantiationException, IllegalAccessException, IllegalArgumentException {\n \n-        command = fromArgs(args[0]);\n+        command = CommandUtils.fromArgs(args[0]);\n \n         if (args.length > 1) {\n             option = args[1];\n@@ -77,7 +67,7 @@ public String[] getParameters() {\n     public String firstParameter() {\n         return parameters[0];\n     }\n-    \n+\n     public String lastParameter() {\n         return parameters[parameters.length - 1];\n     }\n@@ -90,27 +80,6 @@ public PairParameter toPairParameter(final String parameter) throws IllegalArgum\n         return new PairParameter(pairParameterArray[0], pairParameterArray[1]);\n     }\n \n-    private AbstractCommand fromArgs(final String arg)\n-            throws InstantiationException, IllegalAccessException, IllegalArgumentException {\n-\n-        final CommandClassScanner ccs = new CommandClassScanner();\n-        final List<Class<? extends AbstractCommand>> commands = ccs.getComponentClasses();\n-\n-        Class<? extends AbstractCommand> commandClass = null;\n-        for (Class<? extends AbstractCommand> cmd : commands) {\n-            if (arg.equals(cmd.getAnnotation(Command.class).name())) {\n-                commandClass = cmd;\n-            }\n-        }\n-\n-        if (commandClass == null) {\n-            throw new IllegalArgumentException();\n-        }\n-\n-        return commandClass.newInstance();\n-\n-    }\n-\n     public class PairParameter {\n \n         private final String key;"},{"sha":"034004351e82e9fcc5ab392488074b1c48f9059e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeAdm.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.cli;\n \n import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.messages.Messages;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -34,7 +35,10 @@ public final class SyncopeAdm {\n             + \"    report --help \\n\"\n             + \"    policy --help \\n\"\n             + \"    entitlement --help \\n\"\n-            + \"    schema --help \\n\";\n+            + \"    schema --help \\n\"\n+            + \"    install --help \\n\"\n+            + \"    info --help\\n\"\n+            + \"    help\\n\";\n \n     public static void main(final String[] args) {\n         LOG.debug(\"Starting with args \\n\");\n@@ -45,14 +49,11 @@ public static void main(final String[] args) {\n             final AbstractCommand command = input.getCommand();\n             command.execute(input);\n         } catch (final IllegalAccessException | InstantiationException e) {\n-            LOG.error(\"Error in main\", e);\n-            e.printStackTrace();\n             System.out.println(HELP_MESSAGE);\n         } catch (final IllegalArgumentException ex) {\n             LOG.error(\"Error in main\", ex);\n-            if (ex.getMessage().startsWith(\"It seems you need to setup\")) {\n-                System.out.println(ex.getMessage());\n-            } else {\n+            Messages.printMessage(ex.getMessage());\n+            if (!ex.getMessage().startsWith(\"It seems you\")) {\n                 System.out.println(HELP_MESSAGE);\n             }\n         }"},{"sha":"7f272fee205fdbd84f916c74e33e2cb6d08e5ca9","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/AbstractCommand.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -18,9 +18,21 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n+import java.util.List;\n import org.apache.syncope.client.cli.Input;\n \n public abstract class AbstractCommand {\n \n     public abstract void execute(final Input input);\n+\n+    protected String helpMessage(final String command, final List<String> options) {\n+        final StringBuilder helpMessageBuilder = new StringBuilder(String.format(\"Usage: %s [options]\\n\", command));\n+        helpMessageBuilder.append(\"  Options:\\n\");\n+        for (final String option : options) {\n+            helpMessageBuilder.append(\"    \").append(option).append(\"\\n\");\n+        }\n+        return helpMessageBuilder.toString();\n+    }\n+\n+    public abstract String getHelpMessage();\n }"},{"sha":"51e7cb8c8a2817c60f1f78e1bed2b33801e80f7e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ConfigurationCommand.java","status":"modified","additions":42,"deletions":27,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -21,6 +21,8 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.SequenceInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.parsers.ParserConfigurationException;\n import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerException;\n@@ -29,7 +31,7 @@\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.UsageMessages;\n+import org.apache.syncope.client.cli.messages.Messages;\n import org.apache.syncope.client.cli.util.XMLUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -46,7 +48,7 @@ public class ConfigurationCommand extends AbstractCommand {\n \n     private static final String EXPORT_FILE_NAME = \"/content.xml\";\n \n-    private static final String HELP_MESSAGE = \"Usage: config [options]\\n\"\n+    private static final String HELP_MESSAGE = \"Usage: configuration [options]\\n\"\n             + \"  Options:\\n\"\n             + \"    --help \\n\"\n             + \"    --list \\n\"\n@@ -105,12 +107,12 @@ public void execute(final Input input) {\n                     }\n                     System.out.println(\"\");\n                 } catch (final Exception ex) {\n-                    UsageMessages.printErrorMessage(ex.getMessage());\n+                    Messages.printMessage(ex.getMessage());\n                     break;\n                 }\n                 break;\n             case READ:\n-                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                final String readErrorMessage = Messages.optionCommandMessage(\n                         \"configuration --read {CONF-NAME} {CONF-NAME} [...]\");\n                 if (parameters.length >= 1) {\n                     AttrTO attrTO;\n@@ -123,11 +125,11 @@ public void execute(final Input input) {\n                             System.out.println(\"\");\n                         } catch (final SyncopeClientException | WebServiceException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\"Configuration \" + parameters[0] + \" doesn't exist!\");\n+                                Messages.printMessage(\"Configuration \" + parameters[0] + \" doesn't exist!\");\n                             } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                                UsageMessages.printErrorMessage(\"You cannot delete configuration \" + parameters[0]);\n+                                Messages.printMessage(\"You cannot delete configuration \" + parameters[0]);\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                             break;\n                         }\n@@ -137,7 +139,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case UPDATE:\n-                final String updateErrorMessage = UsageMessages.optionCommandMessage(\n+                final String updateErrorMessage = Messages.optionCommandMessage(\n                         \"configuration --update {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\");\n                 if (parameters.length >= 1) {\n                     Input.PairParameter pairParameter = null;\n@@ -154,20 +156,20 @@ public void execute(final Input input) {\n                             System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n                             System.out.println(\"\");\n                         } catch (final IllegalArgumentException ex) {\n-                            UsageMessages.printErrorMessage(ex.getMessage(), updateErrorMessage);\n+                            Messages.printMessage(ex.getMessage(), updateErrorMessage);\n                             break;\n                         } catch (final SyncopeClientException | WebServiceException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\n+                                Messages.printMessage(\n                                         \"Configuration \" + pairParameter.getKey() + \" doesn't exist!\");\n                             } else if (ex.getMessage().startsWith(\"InvalidValues\")) {\n-                                UsageMessages.printErrorMessage(\n+                                Messages.printMessage(\n                                         pairParameter.getValue() + \" is not a valid value for \"\n                                         + pairParameter.getKey());\n                             } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                                UsageMessages.printErrorMessage(\"You cannot delete configuration \" + parameters[0]);\n+                                Messages.printMessage(\"You cannot delete configuration \" + parameters[0]);\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                             break;\n                         }\n@@ -177,7 +179,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case CREATE:\n-                final String createErrorMessage = UsageMessages.optionCommandMessage(\n+                final String createErrorMessage = Messages.optionCommandMessage(\n                         \"configuration --create {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\");\n                 if (parameters.length >= 1) {\n                     Input.PairParameter pairParameter = null;\n@@ -194,15 +196,15 @@ public void execute(final Input input) {\n                             System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n                             System.out.println(\"\");\n                         } catch (final IllegalArgumentException ex) {\n-                            UsageMessages.printErrorMessage(ex.getMessage(), createErrorMessage);\n+                            Messages.printMessage(ex.getMessage(), createErrorMessage);\n                             break;\n                         } catch (final SyncopeClientException | WebServiceException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\n+                                Messages.printMessage(\n                                         \"Configuration schema \"\n                                         + pairParameter.getKey() + \" doesn't exist! Create it before.\");\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                             break;\n                         }\n@@ -212,7 +214,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case DELETE:\n-                final String deleteErrorMessage = UsageMessages.optionCommandMessage(\n+                final String deleteErrorMessage = Messages.optionCommandMessage(\n                         \"configuration --delete {CONF-NAME} {CONF-NAME} [...]\");\n                 if (parameters.length >= 1) {\n                     for (final String parameter : parameters) {\n@@ -221,11 +223,11 @@ public void execute(final Input input) {\n                             System.out.println(\"\\n - Conf \" + parameter + \" deleted!\\n\");\n                         } catch (final SyncopeClientException | WebServiceException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\"Configuration \" + parameter + \" doesn't exist!\");\n+                                Messages.printMessage(\"Configuration \" + parameter + \" doesn't exist!\");\n                             } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                                UsageMessages.printErrorMessage(\"You cannot delete configuration\", parameter);\n+                                Messages.printMessage(\"You cannot delete configuration\", parameter);\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                             break;\n                         }\n@@ -235,32 +237,32 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case EXPORT:\n-                final String exportErrorMessage = UsageMessages.optionCommandMessage(\n+                final String exportErrorMessage = Messages.optionCommandMessage(\n                         \"configuration --export {WHERE-DIR}\");\n                 if (parameters.length == 1) {\n                     try {\n                         XMLUtils.createXMLFile((SequenceInputStream) configurationService.export().getEntity(),\n                                 parameters[0] + EXPORT_FILE_NAME);\n                         System.out.println(\" - \" + parameters[0] + EXPORT_FILE_NAME + \" successfully created\");\n                     } catch (final IOException ex) {\n-                        UsageMessages.printErrorMessage(ex.getMessage());\n+                        Messages.printMessage(ex.getMessage());\n                     } catch (ParserConfigurationException | SAXException | TransformerConfigurationException ex) {\n                         LOG.error(\"Error creating content.xml file in {} directory\", parameters[0], ex);\n-                        UsageMessages.printErrorMessage(\n+                        Messages.printMessage(\n                                 \"Error creating \" + parameters[0] + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n                         break;\n                     } catch (final TransformerException ex) {\n                         LOG.error(\"Error creating content.xml file in {} directory\", parameters[0], ex);\n                         if (ex.getCause() instanceof FileNotFoundException) {\n-                            UsageMessages.printErrorMessage(\"Permission denied on \" + parameters[0]);\n+                            Messages.printMessage(\"Permission denied on \" + parameters[0]);\n                         } else {\n-                            UsageMessages.printErrorMessage(\n+                            Messages.printMessage(\n                                     \"Error creating \" + parameters[0] + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n                         }\n                         break;\n                     } catch (final SyncopeClientException ex) {\n                         LOG.error(\"Error calling configuration service\", ex);\n-                        UsageMessages.printErrorMessage(\"Error calling configuration service \" + ex.getMessage());\n+                        Messages.printMessage(\"Error calling configuration service \" + ex.getMessage());\n                         break;\n                     }\n                 } else {\n@@ -277,6 +279,11 @@ public void execute(final Input input) {\n                 break;\n         }\n     }\n+    \n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n \n     private enum Options {\n \n@@ -311,5 +318,13 @@ public static Options fromName(final String name) {\n             }\n             return optionToReturn;\n         }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n     }\n }"},{"sha":"c4008ebe4ceca4acc9016929c37fcc32d75831fa","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/HelpCommand.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FHelpCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FHelpCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FHelpCommand.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Command(name = \"help\")\n+public class HelpCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(HelpCommand.class);\n+\n+    @Override\n+    public void execute(final Input input) {\n+        LOG.debug(\"Option: {}\", input.getOption());\n+        LOG.debug(\"Parameters:\");\n+        for (final String parameter : input.getParameters()) {\n+            LOG.debug(\"   > \" + parameter);\n+        }\n+\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case HELP:\n+                final StringBuilder generalHelpBuilder = new StringBuilder(\"General help\\n\");\n+                try {\n+                    for (final AbstractCommand command : CommandUtils.commands()) {\n+                        generalHelpBuilder.append(\"Command: \")\n+                                .append(command.getClass().getAnnotation(Command.class).name())\n+                                .append(\"\\n\")\n+                                .append(command.getHelpMessage())\n+                                .append(\"\\n\")\n+                                .append(\" \\n\");\n+                    }\n+                    System.out.println(generalHelpBuilder.toString());\n+                } catch (final IllegalAccessException | IllegalArgumentException | InstantiationException e) {\n+                    Messages.printMessage(e.getMessage());\n+                }\n+                break;\n+            default:\n+                System.out.println(input.getOption() + \" is not a valid option.\");\n+                System.out.println(\"\");\n+                System.out.println(helpMessage(\"help\", Options.toList()));\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return helpMessage(\"help\", Options.toList());\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--print\");\n+\n+        private final String optionName;\n+\n+        private Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+\n+}"},{"sha":"e6e1378aaa67f1f9e1b57843b2e6333ffb88a518","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/InfoCommand.java","status":"added","additions":340,"deletions":0,"changes":340,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -0,0 +1,340 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Command(name = \"info\")\n+public class InfoCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(InfoCommand.class);\n+\n+    @Override\n+    public void execute(final Input input) {\n+        LOG.debug(\"Option: {}\", input.getOption());\n+        LOG.debug(\"Parameters:\");\n+        for (final String parameter : input.getParameters()) {\n+            LOG.debug(\"   > \" + parameter);\n+        }\n+\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        final SyncopeService syncopeService = SyncopeServices.get(SyncopeService.class);\n+        final SyncopeTO syncopeTO = syncopeService.info();\n+        switch (Options.fromName(input.getOption())) {\n+            case VERSION:\n+                try {\n+                    Messages.printMessage(\"Syncope version: \" + syncopeTO.getVersion());\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case PWD_RESET_ALLOWED:\n+                try {\n+                    Messages.printMessage(\"Password reset allowed: \" + syncopeTO.isPwdResetAllowed());\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case PWD_RESET_WITH_SECURITY_QUESTION:\n+                try {\n+                    Messages.printMessage(\"Password reset requiring security question: \"\n+                            + syncopeTO.isPwdResetRequiringSecurityQuestions());\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case SELF_REG_ALLOWED:\n+                try {\n+                    Messages.printMessage(\"Self registration allowed: \" + syncopeTO.isSelfRegAllowed());\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case PROVISIONING_MANAGER:\n+                try {\n+                    Messages.printMessage(\n+                            \"Any object provisioning manager class: \" + syncopeTO.getAnyObjectProvisioningManager(),\n+                            \"User       provisioning manager class: \" + syncopeTO.getUserProvisioningManager(),\n+                            \"Group      provisioning manager class: \" + syncopeTO.getGroupProvisioningManager());\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case WORKFLOW_ADAPTER:\n+                try {\n+                    Messages.printMessage(\n+                            \"Any object workflow adapter class: \" + syncopeTO.getAnyObjectWorkflowAdapter(),\n+                            \"User       workflow adapter class: \" + syncopeTO.getUserWorkflowAdapter(),\n+                            \"Group      workflow adapter class: \" + syncopeTO.getGroupWorkflowAdapter());\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case ACCOUNT_RULES:\n+                try {\n+                    for (final String accountRule : syncopeTO.getAccountRules()) {\n+                        Messages.printMessage(\"Account rule: \" + accountRule);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case CONNID_LOCATION:\n+                try {\n+                    for (final String location : syncopeTO.getConnIdLocations()) {\n+                        Messages.printMessage(\"ConnId location: \" + location);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case LOGIC_ACTIONS:\n+                try {\n+                    for (final String logic : syncopeTO.getLogicActions()) {\n+                        Messages.printMessage(\"Logic action: \" + logic);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case MAIL_TEMPLATES:\n+                try {\n+                    for (final String template : syncopeTO.getMailTemplates()) {\n+                        Messages.printMessage(\"Mail template: \" + template);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case MAPPING_ITEM_TRANSFORMERS:\n+                try {\n+                    for (final String tranformer : syncopeTO.getMappingItemTransformers()) {\n+                        Messages.printMessage(\"Mapping item tranformer: \" + tranformer);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case PASSWORD_RULES:\n+                try {\n+                    for (final String rules : syncopeTO.getPasswordRules()) {\n+                        Messages.printMessage(\"Password rule: \" + rules);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case PROPAGATION_ACTIONS:\n+                try {\n+                    for (final String action : syncopeTO.getPropagationActions()) {\n+                        Messages.printMessage(\"Propagation action: \" + action);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case PUSH_ACTIONS:\n+                try {\n+                    for (final String action : syncopeTO.getPushActions()) {\n+                        Messages.printMessage(\"Push action: \" + action);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case PUSH_CORRELATION_ACTIONS:\n+                try {\n+                    for (final String rule : syncopeTO.getPushCorrelationRules()) {\n+                        Messages.printMessage(\"Push correlation rule: \" + rule);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case REPORTLETS:\n+                try {\n+                    for (final String reportlet : syncopeTO.getReportlets()) {\n+                        Messages.printMessage(\"Reportlet: \" + reportlet);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case SYNC_ACTIONS:\n+                try {\n+                    for (final String action : syncopeTO.getSyncActions()) {\n+                        Messages.printMessage(\"Sync action: \" + action);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case SYNC_CORRELATION_RULES:\n+                try {\n+                    for (final String rule : syncopeTO.getSyncCorrelationRules()) {\n+                        Messages.printMessage(\"Sync correlation rule: \" + rule);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case TASK_JOBS:\n+                try {\n+                    for (final String job : syncopeTO.getTaskJobs()) {\n+                        Messages.printMessage(\"Task job: \" + job);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case VALIDATORS:\n+                try {\n+                    for (final String validator : syncopeTO.getValidators()) {\n+                        Messages.printMessage(\"Validator: \" + validator);\n+                    }\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case PASSWORD_GENERATOR:\n+                try {\n+                    Messages.printMessage(\n+                            \"Password generator class: \" + syncopeTO.getPasswordGenerator());\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case VIR_ATTR_CACHE:\n+                try {\n+                    Messages.printMessage(\n+                            \"Virtual attribute cache class: \" + syncopeTO.getVirAttrCache());\n+                } catch (final Exception ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                    break;\n+                }\n+                break;\n+            case HELP:\n+                System.out.println(helpMessage(\"info\", Options.toList()));\n+                break;\n+            default:\n+                System.out.println(input.getOption() + \" is not a valid option.\");\n+                System.out.println(\"\");\n+                System.out.println(helpMessage(\"info\", Options.toList()));\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return helpMessage(\"info\", Options.toList());\n+    }\n+\n+    private enum Options {\n+\n+        VERSION(\"--version\"),\n+        PWD_RESET_ALLOWED(\"--pwd-reset-allowed\"),\n+        PWD_RESET_WITH_SECURITY_QUESTION(\"--pwd-reset-with-question\"),\n+        SELF_REG_ALLOWED(\"--self-reg-allowed\"),\n+        PROVISIONING_MANAGER(\"--provisioning-manager-classes\"),\n+        WORKFLOW_ADAPTER(\"--workflow-adapter-classes\"),\n+        ACCOUNT_RULES(\"--account-rules-classes\"),\n+        CONNID_LOCATION(\"--connid-locations\"),\n+        LOGIC_ACTIONS(\"--logic-actions\"),\n+        MAIL_TEMPLATES(\"--mail-templates\"),\n+        MAPPING_ITEM_TRANSFORMERS(\"--mapping-item-transformers\"),\n+        PASSWORD_RULES(\"--password-rules\"),\n+        PROPAGATION_ACTIONS(\"--propagation-actions\"),\n+        PUSH_ACTIONS(\"--push-actions\"),\n+        PUSH_CORRELATION_ACTIONS(\"--push-correlation-actions\"),\n+        REPORTLETS(\"--reportlets\"),\n+        SYNC_ACTIONS(\"--sync-actions\"),\n+        SYNC_CORRELATION_RULES(\"--sync-correlation-rules\"),\n+        TASK_JOBS(\"--task-jobs\"),\n+        VALIDATORS(\"--validators\"),\n+        PASSWORD_GENERATOR(\"--password-generator\"),\n+        VIR_ATTR_CACHE(\"--vir-attr-cache\"),\n+        HELP(\"--help\");\n+\n+        private final String optionName;\n+\n+        private Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"e1ab7467b4808baa60849eec19bee7373b0e6314","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/LoggerCommand.java","status":"modified","additions":34,"deletions":19,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -18,12 +18,14 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.UsageMessages;\n+import org.apache.syncope.client.cli.messages.Messages;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n@@ -76,11 +78,11 @@ public void execute(final Input input) {\n                         System.out.println(\"\");\n                     }\n                 } catch (final SyncopeClientException ex) {\n-                    UsageMessages.printErrorMessage(\"Error: \" + ex.getMessage());\n+                    Messages.printMessage(\"Error: \" + ex.getMessage());\n                 }\n                 break;\n             case READ:\n-                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                final String readErrorMessage = Messages.optionCommandMessage(\n                         \"logger --read {LOG-NAME} {LOG-NAME} [...]\");\n                 if (parameters.length >= 1) {\n                     for (final String parameter : parameters) {\n@@ -92,10 +94,10 @@ public void execute(final Input input) {\n                             System.out.println(\"\");\n                         } catch (final SyncopeClientException | WebServiceException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\n+                                Messages.printMessage(\n                                         \"Logger \" + parameter + \" doesn't exist!\");\n                             } else {\n-                                UsageMessages.printErrorMessage(\"Error: \" + ex.getMessage());\n+                                Messages.printMessage(\"Error: \" + ex.getMessage());\n                             }\n                         }\n                     }\n@@ -104,7 +106,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case UPDATE:\n-                final String updateErrorMessage = UsageMessages.optionCommandMessage(\n+                final String updateErrorMessage = Messages.optionCommandMessage(\n                         \"logger --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\");\n \n                 if (parameters.length >= 1) {\n@@ -121,19 +123,19 @@ public void execute(final Input input) {\n                             System.out.println(\"\");\n                         } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n                             if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                                 System.out.println(\"Try with:\");\n                                 for (final LoggerLevel level : LoggerLevel.values()) {\n                                     System.out.println(\"  *** \" + level.name());\n                                 }\n                                 System.out.println(\"\");\n                             } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n-                                UsageMessages.printErrorMessage(ex.getMessage(), updateErrorMessage);\n+                                Messages.printMessage(ex.getMessage(), updateErrorMessage);\n                             } else if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\n+                                Messages.printMessage(\n                                         \"Logger \" + pairParameter.getKey() + \" doesn't exists!\");\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage(), updateErrorMessage);\n+                                Messages.printMessage(ex.getMessage(), updateErrorMessage);\n                             }\n                             break;\n                         }\n@@ -143,7 +145,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case UPDATE_ALL:\n-                final String updateAllErrorMessage = UsageMessages.optionCommandMessage(\n+                final String updateAllErrorMessage = Messages.optionCommandMessage(\n                         \"logger --update-all {LOG-LEVEL}\");\n \n                 if (parameters.length == 1) {\n@@ -157,14 +159,14 @@ public void execute(final Input input) {\n                             System.out.println(\"\");\n                         } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n                             if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                                 System.out.println(\"Try with:\");\n                                 for (final LoggerLevel level : LoggerLevel.values()) {\n                                     System.out.println(\"  *** \" + level.name());\n                                 }\n                                 System.out.println(\"\");\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage(), updateAllErrorMessage);\n+                                Messages.printMessage(ex.getMessage(), updateAllErrorMessage);\n                             }\n                             break;\n                         }\n@@ -174,7 +176,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case CREATE:\n-                final String createErrorMessage = UsageMessages.optionCommandMessage(\n+                final String createErrorMessage = Messages.optionCommandMessage(\n                         \"logger --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\");\n \n                 if (parameters.length >= 1) {\n@@ -193,14 +195,14 @@ public void execute(final Input input) {\n                             System.out.println(\"\");\n                         } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n                             if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                                 System.out.println(\"Try with:\");\n                                 for (final LoggerLevel level : LoggerLevel.values()) {\n                                     System.out.println(\"  *** \" + level.name());\n                                 }\n                                 System.out.println(\"\");\n                             } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n-                                UsageMessages.printErrorMessage(ex.getMessage(), createErrorMessage);\n+                                Messages.printMessage(ex.getMessage(), createErrorMessage);\n                             }\n                             break;\n                         }\n@@ -210,7 +212,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case DELETE:\n-                final String deleteErrorMessage = UsageMessages.optionCommandMessage(\n+                final String deleteErrorMessage = Messages.optionCommandMessage(\n                         \"logger --delete {LOG-NAME} {LOG-NAME} [...]\");\n \n                 if (parameters.length >= 1) {\n@@ -220,10 +222,10 @@ public void execute(final Input input) {\n                             System.out.println(\"\\n - Logger \" + parameter + \" deleted!\\n\");\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\n+                                Messages.printMessage(\n                                         \"Logger \" + parameter + \" doesn't exists!\");\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                         }\n                     }\n@@ -240,6 +242,11 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n         }\n     }\n+    \n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n \n     private enum Options {\n \n@@ -274,6 +281,14 @@ public static Options fromName(final String name) {\n             }\n             return optionToReturn;\n         }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n     }\n \n }"},{"sha":"a9032687314e5481c06b753c4c9df8cdb55a83c6","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/NotificationCommand.java","status":"modified","additions":24,"deletions":9,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -18,12 +18,14 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.UsageMessages;\n+import org.apache.syncope.client.cli.messages.Messages;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n@@ -66,11 +68,11 @@ public void execute(final Input input) {\n                         System.out.println(notificationTO);\n                     }\n                 } catch (final SyncopeClientException ex) {\n-                    UsageMessages.printErrorMessage(ex.getMessage());\n+                    Messages.printMessage(ex.getMessage());\n                 }\n                 break;\n             case READ:\n-                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                final String readErrorMessage = Messages.optionCommandMessage(\n                         \"notification --read {NOTIFICATION-ID} {NOTIFICATION-ID} [...]\");\n                 if (parameters.length >= 1) {\n                     for (final String parameter : parameters) {\n@@ -80,9 +82,9 @@ public void execute(final Input input) {\n                             System.out.println(\"Error reading \" + parameter + \". It isn't a valid notification id\");\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\"Notification \" + parameter + \" doesn't exists!\");\n+                                Messages.printMessage(\"Notification \" + parameter + \" doesn't exists!\");\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                         }\n                     }\n@@ -91,7 +93,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case DELETE:\n-                final String deleteErrorMessage = UsageMessages.optionCommandMessage(\n+                final String deleteErrorMessage = Messages.optionCommandMessage(\n                         \"notification --delete {NOTIFICATION-ID} {NOTIFICATION-ID} [...]\");\n \n                 if (parameters.length >= 1) {\n@@ -101,12 +103,12 @@ public void execute(final Input input) {\n                             System.out.println(\"\\n - Notification \" + parameter + \" deleted!\\n\");\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\"Notification \" + parameter + \" doesn't exists!\");\n+                                Messages.printMessage(\"Notification \" + parameter + \" doesn't exists!\");\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                         } catch (final NumberFormatException ex) {\n-                            UsageMessages.printErrorMessage(\n+                            Messages.printMessage(\n                                     \"Error reading \" + parameter + \". It isn't a valid notification id\");\n                         }\n                     }\n@@ -123,6 +125,11 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n         }\n     }\n+    \n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n \n     private enum Options {\n \n@@ -154,6 +161,14 @@ public static Options fromName(final String name) {\n             }\n             return optionToReturn;\n         }\n+        \n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n     }\n \n }"},{"sha":"11d59b81437161a3652d1883db11a519d4911f1b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/PolicyCommand.java","status":"modified","additions":28,"deletions":13,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -18,12 +18,14 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.UsageMessages;\n+import org.apache.syncope.client.cli.messages.Messages;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -64,7 +66,7 @@ public void execute(final Input input) {\n         final PolicyService policyService = SyncopeServices.get(PolicyService.class);\n         switch (Options.fromName(input.getOption())) {\n             case LIST_POLICY:\n-                final String listPolicyErrorMessage = UsageMessages.optionCommandMessage(\n+                final String listPolicyErrorMessage = Messages.optionCommandMessage(\n                         \"Usage: policy --list-policy {POLICY-TYPE}\\n\"\n                         + \"   Policy type: ACCOUNT / PASSWORD / SYNC / PUSH\");\n                 if (parameters.length == 1) {\n@@ -73,9 +75,9 @@ public void execute(final Input input) {\n                             System.out.println(policyTO);\n                         }\n                     } catch (final SyncopeClientException ex) {\n-                        UsageMessages.printErrorMessage(ex.getMessage());\n+                        Messages.printMessage(ex.getMessage());\n                     } catch (final IllegalArgumentException ex) {\n-                        UsageMessages.printErrorMessage(\n+                        Messages.printMessage(\n                                 \"Error: \" + parameters[0] + \" isn't a valid policy type, try with:\");\n                         for (final PolicyType type : PolicyType.values()) {\n                             System.out.println(\"  *** \" + type.name());\n@@ -87,20 +89,20 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case READ:\n-                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                final String readErrorMessage = Messages.optionCommandMessage(\n                         \"Usage: policy --read {POLICY-ID} {POLICY-ID} [...]\");\n                 if (parameters.length >= 1) {\n                     for (final String parameter : parameters) {\n                         try {\n                             System.out.println(policyService.read(Long.valueOf(parameter)));\n                         } catch (final NumberFormatException ex) {\n-                            UsageMessages.printErrorMessage(\n+                            Messages.printMessage(\n                                     \"Error reading \" + parameter + \". It isn't a valid policy id\");\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\"Policy \" + parameter + \" doesn't exists!\");\n+                                Messages.printMessage(\"Policy \" + parameter + \" doesn't exists!\");\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                         }\n                     }\n@@ -109,7 +111,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case DELETE:\n-                final String deleteErrorMessage = UsageMessages.optionCommandMessage(\n+                final String deleteErrorMessage = Messages.optionCommandMessage(\n                         \"Usage: policy --delete {POLICY-ID} {POLICY-ID} [...]\");\n \n                 if (parameters.length >= 1) {\n@@ -120,14 +122,14 @@ public void execute(final Input input) {\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             System.out.println(\"Error:\");\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\"Policy \" + parameter + \" doesn't exists!\");\n+                                Messages.printMessage(\"Policy \" + parameter + \" doesn't exists!\");\n                             } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                                UsageMessages.printErrorMessage(\"You cannot delete policy \" + parameter);\n+                                Messages.printMessage(\"You cannot delete policy \" + parameter);\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                         } catch (final NumberFormatException ex) {\n-                            UsageMessages.printErrorMessage(\n+                            Messages.printMessage(\n                                     \"Error reading \" + parameter + \". It isn't a valid policy id\");\n                         }\n                     }\n@@ -144,6 +146,11 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n         }\n     }\n+    \n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n \n     private enum Options {\n \n@@ -175,6 +182,14 @@ public static Options fromName(final String name) {\n             }\n             return optionToReturn;\n         }\n+        \n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n     }\n \n }"},{"sha":"dfd8d46192c0011ce75515e2704f5e822f79bd0a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"modified","additions":45,"deletions":31,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.io.SequenceInputStream;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import javax.xml.parsers.ParserConfigurationException;\n@@ -29,7 +30,7 @@\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.UsageMessages;\n+import org.apache.syncope.client.cli.messages.Messages;\n import org.apache.syncope.client.cli.util.XMLUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n@@ -87,7 +88,7 @@ public void execute(final Input input) {\n                         System.out.println(reportTO);\n                     }\n                 } catch (final SyncopeClientException ex) {\n-                    UsageMessages.printErrorMessage(ex.getMessage());\n+                    Messages.printMessage(ex.getMessage());\n                 }\n                 break;\n             case LIST_JOBS:\n@@ -104,24 +105,24 @@ public void execute(final Input input) {\n                         }\n                     }\n                 } catch (final SyncopeClientException ex) {\n-                    UsageMessages.printErrorMessage(ex.getMessage());\n+                    Messages.printMessage(ex.getMessage());\n                 }\n                 break;\n             case READ:\n-                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                final String readErrorMessage = Messages.optionCommandMessage(\n                         \"Usage: report --read {REPORT-ID} {REPORT-ID} [...]\");\n                 if (parameters.length >= 1) {\n                     for (final String parameter : parameters) {\n                         try {\n                             System.out.println(reportService.read(Long.valueOf(parameter)));\n                         } catch (final NumberFormatException ex) {\n-                            UsageMessages.printErrorMessage(\n+                            Messages.printMessage(\n                                     \"Error reading \" + parameter + \". It isn't a valid report id\");\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\"Report \" + parameter + \" doesn't exists!\");\n+                                Messages.printMessage(\"Report \" + parameter + \" doesn't exists!\");\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                         }\n                     }\n@@ -130,7 +131,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case DELETE:\n-                final String deleteErrorMessage = UsageMessages.optionCommandMessage(\n+                final String deleteErrorMessage = Messages.optionCommandMessage(\n                         \"Usage: report --execute {REPORT-ID}\");\n \n                 if (parameters.length == 1) {\n@@ -140,14 +141,14 @@ public void execute(final Input input) {\n                             System.out.println(\" - Report \" + parameter + \" deleted!\");\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\"Report \" + parameter + \" doesn't exists!\");\n+                                Messages.printMessage(\"Report \" + parameter + \" doesn't exists!\");\n                             } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                                UsageMessages.printErrorMessage(\"You cannot delete report \" + parameter);\n+                                Messages.printMessage(\"You cannot delete report \" + parameter);\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                         } catch (final NumberFormatException ex) {\n-                            UsageMessages.printErrorMessage(\n+                            Messages.printMessage(\n                                     \"Error reading \" + parameter + \". It isn't a valid report id\");\n                         }\n                     }\n@@ -156,7 +157,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case EXECUTE:\n-                final String executeErrorMessage = UsageMessages.optionCommandMessage(\n+                final String executeErrorMessage = Messages.optionCommandMessage(\n                         \"Usage: report --execute {REPORT-ID}\");\n \n                 if (parameters.length == 1) {\n@@ -173,22 +174,22 @@ public void execute(final Input input) {\n                     } catch (final WebServiceException | SyncopeClientException ex) {\n                         System.out.println(\"Error:\");\n                         if (ex.getMessage().startsWith(\"NotFound\")) {\n-                            UsageMessages.printErrorMessage(\"Report \" + parameters[0] + \" doesn't exists!\");\n+                            Messages.printMessage(\"Report \" + parameters[0] + \" doesn't exists!\");\n                         } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                            UsageMessages.printErrorMessage(\"You cannot delete report \" + parameters[0]);\n+                            Messages.printMessage(\"You cannot delete report \" + parameters[0]);\n                         } else {\n-                            UsageMessages.printErrorMessage(ex.getMessage());\n+                            Messages.printMessage(ex.getMessage());\n                         }\n                     } catch (final NumberFormatException ex) {\n-                        UsageMessages.printErrorMessage(\n+                        Messages.printMessage(\n                                 \"Error reading \" + parameters[0] + \". It isn't a valid report id\");\n                     }\n                 } else {\n                     System.out.println(executeErrorMessage);\n                 }\n                 break;\n             case READ_EXECUTION:\n-                final String readExecutionErrorMessage = UsageMessages.optionCommandMessage(\n+                final String readExecutionErrorMessage = Messages.optionCommandMessage(\n                         \"Usage: report --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\");\n \n                 if (parameters.length >= 1) {\n@@ -203,14 +204,14 @@ public void execute(final Input input) {\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             System.out.println(\"Error:\");\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\" - Report \" + parameter + \" doesn't exists!\");\n+                                Messages.printMessage(\" - Report \" + parameter + \" doesn't exists!\");\n                             } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                                UsageMessages.printErrorMessage(\"You cannot delete report \" + parameter);\n+                                Messages.printMessage(\"You cannot delete report \" + parameter);\n                             } else {\n-                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                Messages.printMessage(ex.getMessage());\n                             }\n                         } catch (final NumberFormatException ex) {\n-                            UsageMessages.printErrorMessage(\n+                            Messages.printMessage(\n                                     \"Error reading \" + parameter + \". It isn't a valid report id\");\n                         }\n                     }\n@@ -219,7 +220,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case DELETE_EXECUTION:\n-                final String deleteExecutionErrorMessage = UsageMessages.optionCommandMessage(\n+                final String deleteExecutionErrorMessage = Messages.optionCommandMessage(\n                         \"Usage: report --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\");\n \n                 if (parameters.length >= 1) {\n@@ -246,7 +247,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case EXPORT_EXECUTION_RESULT:\n-                final String exportExecutionErrorMessage = UsageMessages.optionCommandMessage(\n+                final String exportExecutionErrorMessage = Messages.optionCommandMessage(\n                         \"Usage: report --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n                         + \"          Format: CSV / HTML / PDF / XML / RTF\");\n \n@@ -262,28 +263,28 @@ public void execute(final Input input) {\n                                 case XML:\n                                     final String xmlFinalName = \"export_\" + exportId + \".xml\";\n                                     XMLUtils.createXMLFile(report, xmlFinalName);\n-                                    UsageMessages.printErrorMessage(xmlFinalName + \" successfully created\");\n+                                    Messages.printMessage(xmlFinalName + \" successfully created\");\n                                     break;\n                                 case CSV:\n-                                    UsageMessages.printErrorMessage(format + \" doesn't supported\");\n+                                    Messages.printMessage(format + \" doesn't supported\");\n                                     break;\n                                 case PDF:\n-                                    UsageMessages.printErrorMessage(format + \" doesn't supported\");\n+                                    Messages.printMessage(format + \" doesn't supported\");\n                                     break;\n                                 case HTML:\n-                                    UsageMessages.printErrorMessage(format + \" doesn't supported\");\n+                                    Messages.printMessage(format + \" doesn't supported\");\n                                     break;\n                                 case RTF:\n-                                    UsageMessages.printErrorMessage(format + \" doesn't supported\");\n+                                    Messages.printMessage(format + \" doesn't supported\");\n                                     break;\n                                 default:\n-                                    UsageMessages.printErrorMessage(format + \" doesn't supported\");\n+                                    Messages.printMessage(format + \" doesn't supported\");\n                                     break;\n                             }\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             System.out.println(\"Error:\");\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                UsageMessages.printErrorMessage(\"Report \" + parameter + \" doesn't exists!\");\n+                                Messages.printMessage(\"Report \" + parameter + \" doesn't exists!\");\n                             } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n                                 System.out.println(\" - You cannot delete report \" + parameter);\n                             } else {\n@@ -317,6 +318,11 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n         }\n     }\n+    \n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n \n     private enum Options {\n \n@@ -353,5 +359,13 @@ public static Options fromName(final String name) {\n             }\n             return optionToReturn;\n         }\n+        \n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n     }\n }"},{"sha":"3b9cf18e099b8cc335ed759cf51e1df9a79bd1f9","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/SchemaCommand.java","status":"modified","additions":32,"deletions":17,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -18,13 +18,15 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.UsageMessages;\n+import org.apache.syncope.client.cli.messages.Messages;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n@@ -67,7 +69,7 @@ public void execute(final Input input) {\n         final SchemaService schemaService = SyncopeServices.get(SchemaService.class);\n         switch (Options.fromName(input.getOption())) {\n             case LIST:\n-                final String listErrorMessage = UsageMessages.optionCommandMessage(\n+                final String listErrorMessage = Messages.optionCommandMessage(\n                         \"schema --list {SCHEMA-TYPE}\\n\"\n                         + \"   Schema type: PLAIN / DERIVED / VIRTUAL\");\n                 if (parameters.length == 1) {\n@@ -95,9 +97,9 @@ public void execute(final Input input) {\n                         }\n                         System.out.println(\"\");\n                     } catch (final SyncopeClientException ex) {\n-                        UsageMessages.printErrorMessage(ex.getMessage());\n+                        Messages.printMessage(ex.getMessage());\n                     } catch (final IllegalArgumentException ex) {\n-                        UsageMessages.printErrorMessage(\n+                        Messages.printMessage(\n                                 input.firstParameter() + \" isn't a valid schema type, try with:\");\n                         for (final SchemaType type : SchemaType.values()) {\n                             System.out.println(\"  *** \" + type.name());\n@@ -120,7 +122,7 @@ public void execute(final Input input) {\n                         System.out.println(\"\");\n                     }\n                 } catch (final SyncopeClientException | WebServiceException ex) {\n-                    UsageMessages.printErrorMessage(ex.getMessage());\n+                    Messages.printMessage(ex.getMessage());\n                 }\n                 break;\n             case LIST_PLAIN:\n@@ -134,7 +136,7 @@ public void execute(final Input input) {\n                     }\n                     System.out.println(\"\");\n                 } catch (final SyncopeClientException | WebServiceException ex) {\n-                    UsageMessages.printErrorMessage(ex.getMessage());\n+                    Messages.printMessage(ex.getMessage());\n                 }\n                 break;\n             case LIST_DERIVED:\n@@ -146,7 +148,7 @@ public void execute(final Input input) {\n                     }\n                     System.out.println(\"\");\n                 } catch (final SyncopeClientException | WebServiceException ex) {\n-                    UsageMessages.printErrorMessage(ex.getMessage());\n+                    Messages.printMessage(ex.getMessage());\n                 }\n                 break;\n             case LIST_VIRTUAL:\n@@ -157,11 +159,11 @@ public void execute(final Input input) {\n                     }\n                     System.out.println(\"\");\n                 } catch (final SyncopeClientException | WebServiceException ex) {\n-                    UsageMessages.printErrorMessage(ex.getMessage());\n+                    Messages.printMessage(ex.getMessage());\n                 }\n                 break;\n             case READ:\n-                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                final String readErrorMessage = Messages.optionCommandMessage(\n                         \"schema --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n                         + \"   Schema type: PLAIN / DERIVED / VIRTUAL\");\n                 if (parameters.length >= 2) {\n@@ -212,15 +214,15 @@ public void execute(final Input input) {\n                         }\n                     } catch (final SyncopeClientException | WebServiceException ex) {\n                         if (ex.getMessage().startsWith(\"NotFound\")) {\n-                            UsageMessages.printErrorMessage(\n+                            Messages.printMessage(\n                                     \"Schema \" + parameters[0] + \" doesn't exists!\");\n                         } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                            UsageMessages.printErrorMessage(\"You cannot delete schema \" + parameters[0]);\n+                            Messages.printMessage(\"You cannot delete schema \" + parameters[0]);\n                         } else {\n-                            UsageMessages.printErrorMessage(ex.getMessage());\n+                            Messages.printMessage(ex.getMessage());\n                         }\n                     } catch (final IllegalArgumentException ex) {\n-                        UsageMessages.printErrorMessage(\n+                        Messages.printMessage(\n                                 parameters[0] + \" isn't a valid schema type, try with:\");\n                         for (final SchemaType type : SchemaType.values()) {\n                             System.out.println(\"  *** \" + type.name());\n@@ -243,16 +245,16 @@ public void execute(final Input input) {\n                         }\n                     } catch (final SyncopeClientException | WebServiceException ex) {\n                         if (ex.getMessage().startsWith(\"NotFound\")) {\n-                            UsageMessages.printErrorMessage(\n+                            Messages.printMessage(\n                                     \"Schema \" + parameters[0] + \" doesn't exists!\");\n                         } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                            UsageMessages.printErrorMessage(\n+                            Messages.printMessage(\n                                     \"You cannot delete schema \" + parameters[0]);\n                         } else {\n-                            UsageMessages.printErrorMessage(ex.getMessage());\n+                            Messages.printMessage(ex.getMessage());\n                         }\n                     } catch (final IllegalArgumentException ex) {\n-                        UsageMessages.printErrorMessage(\n+                        Messages.printMessage(\n                                 parameters[0] + \" isn't a valid schema type, try with:\");\n                         for (final SchemaType type : SchemaType.values()) {\n                             System.out.println(\"  *** \" + type.name());\n@@ -273,6 +275,11 @@ public void execute(final Input input) {\n         }\n     }\n \n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n     private enum Options {\n \n         HELP(\"--help\"),\n@@ -307,5 +314,13 @@ public static Options fromName(final String name) {\n             }\n             return optionToReturn;\n         }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n     }\n }"},{"sha":"e049a28c6cb5f6401969641d288ef4e9f35e4aea","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallCommand.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -41,7 +41,7 @@ public class InstallCommand extends AbstractCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(LoggerCommand.class);\n \n-    private static final String HELP_MESSAGE = \"Usage: logger [options]\\n\"\n+    private static final String HELP_MESSAGE = \"Usage: install [options]\\n\"\n             + \"  Options:\\n\"\n             + \"    --help \\n\"\n             + \"    --setup\";\n@@ -265,6 +265,11 @@ public void execute(final Input input) {\n         }\n     }\n \n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n     private enum Options {\n \n         HELP(\"--help\"),"},{"sha":"9be3813131f6b12793d740cc1a8638735f48f99e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/Messages.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -18,23 +18,23 @@\n  */\n package org.apache.syncope.client.cli.messages;\n \n-public final class UsageMessages {\n+public final class Messages {\n \n     private static final String OPTION_COMMAND_MESSAGE_TEMPLATE = \"\\n - Usage: %s\\n\";\n \n     public static String optionCommandMessage(final String message) {\n         return String.format(OPTION_COMMAND_MESSAGE_TEMPLATE, message);\n     }\n \n-    public static void printErrorMessage(final String... errors) {\n-        final StringBuilder errorMessage = new StringBuilder(\"\\n\").append(\" - \");\n-        for (final String error : errors) {\n-            errorMessage.append(error).append(\"\\n\");\n+    public static void printMessage(final String... messages) {\n+        final StringBuilder messageBuilder = new StringBuilder(\"\\n\");\n+        for (final String message : messages) {\n+            messageBuilder.append(\" - \").append(message).append(\"\\n\");\n         }\n-        System.out.println(errorMessage.toString());\n+        System.out.println(messageBuilder.toString());\n     }\n \n-    private UsageMessages() {\n+    private Messages() {\n \n     }\n }","previous_filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/UsageMessages.java"},{"sha":"20077438a28b4b52a17ee770321c6abd65e42d7c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/util/CommandUtils.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4133c2402e491342d0c32a1a6c5a9bb7d5a8870b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java?ref=4133c2402e491342d0c32a1a6c5a9bb7d5a8870b","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.CommandClassScanner;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+public final class CommandUtils {\n+\n+    public static AbstractCommand fromArgs(final String arg)\n+            throws InstantiationException, IllegalAccessException, IllegalArgumentException {\n+\n+        final CommandClassScanner ccs = new CommandClassScanner();\n+        final List<Class<? extends AbstractCommand>> commands = ccs.getComponentClasses();\n+\n+        Class<? extends AbstractCommand> commandClass = null;\n+        for (final Class<? extends AbstractCommand> cmd : commands) {\n+            if (arg.equals(cmd.getAnnotation(Command.class).name())) {\n+                commandClass = cmd;\n+            }\n+        }\n+\n+        if (commandClass == null) {\n+            throw new IllegalArgumentException(arg + \" is not a valid command\");\n+        }\n+\n+        return commandClass.newInstance();\n+\n+    }\n+\n+    public static List<AbstractCommand> commands()\n+            throws InstantiationException, IllegalAccessException, IllegalArgumentException {\n+\n+        final List<AbstractCommand> listCommands = new ArrayList<>();\n+\n+        final CommandClassScanner ccs = new CommandClassScanner();\n+        final List<Class<? extends AbstractCommand>> commands = ccs.getComponentClasses();\n+\n+        Class<? extends AbstractCommand> commandClass = null;\n+        for (final Class<? extends AbstractCommand> cmd : commands) {\n+            commandClass = cmd;\n+            if (commandClass == null) {\n+                throw new IllegalArgumentException();\n+            }\n+            listCommands.add(commandClass.newInstance());\n+        }\n+\n+        return listCommands;\n+    }\n+\n+    private CommandUtils() {\n+\n+    }\n+\n+}"}]}