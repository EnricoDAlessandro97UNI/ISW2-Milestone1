{"sha":"cb88d8a55dcd28656886e11e3159624047aa71b1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNiODhkOGE1NWRjZDI4NjU2ODg2ZTExZTMxNTk2MjQwNDdhYTcxYjE=","commit":{"author":{"name":"Davide Cortellucci","email":"davide.cor94@gmail.com","date":"2020-01-30T15:56:52Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2020-01-30T16:45:57Z"},"message":"[provisioning-api] Reach at least 80% of Sonarqube coverage (#160)","tree":{"sha":"90cab3c7a55cdd93ed0f6571b76c1f67852e6ffd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/90cab3c7a55cdd93ed0f6571b76c1f67852e6ffd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cb88d8a55dcd28656886e11e3159624047aa71b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb88d8a55dcd28656886e11e3159624047aa71b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cb88d8a55dcd28656886e11e3159624047aa71b1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb88d8a55dcd28656886e11e3159624047aa71b1/comments","author":{"login":"Dodoveloper","id":17781050,"node_id":"MDQ6VXNlcjE3NzgxMDUw","avatar_url":"https://avatars.githubusercontent.com/u/17781050?v=4","gravatar_id":"","url":"https://api.github.com/users/Dodoveloper","html_url":"https://github.com/Dodoveloper","followers_url":"https://api.github.com/users/Dodoveloper/followers","following_url":"https://api.github.com/users/Dodoveloper/following{/other_user}","gists_url":"https://api.github.com/users/Dodoveloper/gists{/gist_id}","starred_url":"https://api.github.com/users/Dodoveloper/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Dodoveloper/subscriptions","organizations_url":"https://api.github.com/users/Dodoveloper/orgs","repos_url":"https://api.github.com/users/Dodoveloper/repos","events_url":"https://api.github.com/users/Dodoveloper/events{/privacy}","received_events_url":"https://api.github.com/users/Dodoveloper/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d06fd3fd6398746b232f7024fd03c874f524a0f3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d06fd3fd6398746b232f7024fd03c874f524a0f3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d06fd3fd6398746b232f7024fd03c874f524a0f3"}],"stats":{"total":2148,"additions":2023,"deletions":125},"files":[{"sha":"6da0358c1b19772725f73fa0fca8cf2f313d01ce","filename":"core/provisioning-api/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fpom.xml?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -60,6 +60,10 @@ under the License.\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-context</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-tx</artifactId>"},{"sha":"815b57722a1b03e982a26815031818ae236f52a3","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AccountGetter.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAccountGetter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAccountGetter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAccountGetter.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -21,6 +21,7 @@\n import java.util.function.Function;\n import org.apache.syncope.core.persistence.api.entity.user.Account;\n \n+@SuppressWarnings(\"squid:S1214\")\n public interface AccountGetter extends Function<Account, Account> {\n \n     AccountGetter DEFAULT = account -> account;"},{"sha":"0036c85cd797ae0c149380a872143f6a1b69a275","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AnyObjectProvisioningManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -24,10 +24,9 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n \n-public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectTO, AnyObjectCR, AnyObjectUR> {\n+public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectCR, AnyObjectUR> {\n \n     Pair<String, List<PropagationStatus>> create(\n             AnyObjectCR anyObjectCR, Set<String> excludedResources, boolean nullPriorityAsync);"},{"sha":"3d6b949c56225a9bc3997dc71d763c9d0f441c06","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditEntryImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n \n+@SuppressWarnings({ \"squid:S1450\", \"squid:S1948\" })\n public class AuditEntryImpl implements AuditEntry {\n \n     private static final long serialVersionUID = -2299082316063743582L;"},{"sha":"70835c2c0dbd9df7823ad7aa47fd8f89cfce6b1b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditManager.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -60,6 +60,7 @@ boolean auditRequested(\n      * @param output object(s) produced by the event\n      * @param input object(s) provided to the event\n      */\n+    @SuppressWarnings(\"squid:S00107\")\n     void audit(\n             String who,\n             AuditElements.EventCategoryType type,"},{"sha":"9569105183080d4c066afe0f9e1735a5429caa33","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/GroupProvisioningManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -26,9 +26,8 @@\n import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.GroupTO;\n \n-public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, GroupCR, GroupUR> {\n+public interface GroupProvisioningManager extends ProvisioningManager<GroupCR, GroupUR> {\n \n     Pair<String, List<PropagationStatus>> create(\n             GroupCR groupCR,"},{"sha":"cf5bff51139a8f137c41b22f39516c4ef533ea6a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrNameParser.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -33,26 +33,29 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n+@SuppressWarnings({ \"squid:S4784\", \"squid:S3776\" })\n public class IntAttrNameParser {\n+    \n+    private static final String END_PATTERN = \")\\\\]\\\\.(.+)\";\n \n     private static final Pattern PRIVILEGE_PATTERN = Pattern.compile(\n             \"^privileges\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\");\n \n     private static final Pattern ENCLOSING_GROUP_PATTERN = Pattern.compile(\n-            \"^groups\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n+            \"^groups\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n \n     private static final Pattern RELATED_USER_PATTERN = Pattern.compile(\n-            \"^users\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n+            \"^users\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n \n     private static final Pattern RELATED_ANY_OBJECT_PATTERN = Pattern.compile(\n-            \"^anyObjects\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n+            \"^anyObjects\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n \n     private static final Pattern MEMBERSHIP_PATTERN = Pattern.compile(\n-            \"^memberships\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n+            \"^memberships\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n \n     private static final Pattern RELATIONSHIP_PATTERN = Pattern.compile(\n             \"^relationships\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\"\n-            + \"\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n+            + \"\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n \n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;"},{"sha":"de0d30656b85bf54824bc190d9fea25e051f14a7","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/PlainAttrGetter.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPlainAttrGetter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPlainAttrGetter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPlainAttrGetter.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n \n+@SuppressWarnings(\"squid:S1214\")\n public interface PlainAttrGetter extends BiFunction<Attributable<? extends PlainAttr<?>>, String, PlainAttr<?>> {\n \n     PlainAttrGetter DEFAULT = (attributable, schema) -> attributable.getPlainAttr(schema).orElse(null);"},{"sha":"9c71d67f0c91d6028927131dfd23154378a962e6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/PropagationByResource.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -198,8 +198,8 @@ public boolean removeAll(final ResourceOperation type, final Set<T> keys) {\n      */\n     public boolean removeAll(final Collection<T> keys) {\n         return toBeCreated.removeAll(keys)\n-                | toBeUpdated.removeAll(keys)\n-                | toBeDeleted.removeAll(keys);\n+                || toBeUpdated.removeAll(keys)\n+                || toBeDeleted.removeAll(keys);\n     }\n \n     /**\n@@ -212,8 +212,8 @@ public boolean removeAll(final Collection<T> keys) {\n      */\n     public boolean retainAll(final Collection<T> keys) {\n         return toBeCreated.retainAll(keys)\n-                | toBeUpdated.retainAll(keys)\n-                | toBeDeleted.retainAll(keys);\n+                || toBeUpdated.retainAll(keys)\n+                || toBeDeleted.retainAll(keys);\n     }\n \n     public boolean contains(final ResourceOperation type, final T key) {"},{"sha":"b4e8935f60654eb8891a70e3eddd1655690fc404","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ProvisioningManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -24,10 +24,9 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n \n-public interface ProvisioningManager<T extends AnyTO, C extends AnyCR, U extends AnyUR> {\n+public interface ProvisioningManager<C extends AnyCR, U extends AnyUR> {\n \n     Pair<String, List<PropagationStatus>> create(C anyCR, boolean nullPriorityAsync);\n "},{"sha":"72e4fc986c51bd3009de1f253653751713d44e71","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -27,9 +27,8 @@\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n-import org.apache.syncope.common.lib.to.UserTO;\n \n-public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserCR, UserUR> {\n+public interface UserProvisioningManager extends ProvisioningManager<UserCR, UserUR> {\n \n     Pair<String, List<PropagationStatus>> activate(StatusR statusR, boolean nullPriorityAsync);\n "},{"sha":"dd394f3ad5ae9fff188c764b4985bc9527a1208d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheKey.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheKey.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheKey.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheKey.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -23,6 +23,7 @@\n /**\n  * Cache entry key.\n  */\n+@SuppressWarnings(\"squid:S2065\")\n public class VirAttrCacheKey {\n \n     /**"},{"sha":"4be816b340d56f00424a26fe05447ee3f537c096","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/AfterHandlingEvent.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAfterHandlingEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAfterHandlingEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAfterHandlingEvent.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import org.apache.syncope.common.lib.types.AuditElements;\n \n+@SuppressWarnings({ \"squid:S00107\", \"squid:S1948\" })\n public class AfterHandlingEvent implements Serializable {\n \n     private static final long serialVersionUID = 5950986229089263378L;"},{"sha":"05c9c0f2001610d6cd1f991c52e582867685b34b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/JexlUtils.java","status":"modified","additions":27,"deletions":17,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -52,10 +52,12 @@\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.util.ReflectionUtils;\n \n /**\n  * JEXL <a href=\"http://commons.apache.org/jexl/reference/index.html\">reference</a> is available.\n  */\n+@SuppressWarnings({ \"squid:S3008\", \"squid:S3776\", \"squid:S1141\" })\n public final class JexlUtils {\n \n     private static final Logger LOG = LoggerFactory.getLogger(JexlUtils.class);\n@@ -74,7 +76,7 @@ private static JexlEngine getEngine() {\n                 JEXL_ENGINE = new JexlBuilder().\n                         uberspect(new ClassFreeUberspect()).\n                         loader(new EmptyClassLoader()).\n-                        namespaces(Collections.<String, Object>singletonMap(\"syncope\", new SyncopeJexlFunctions())).\n+                        namespaces(Map.of(\"syncope\", new SyncopeJexlFunctions())).\n                         cache(512).\n                         silent(false).\n                         strict(false).\n@@ -164,17 +166,19 @@ public static void addFieldsToContext(final Object object, final JexlContext jex\n                 Object fieldValue = null;\n                 if (fd.getLeft().getReadMethod() == null) {\n                     if (fd.getRight() != null) {\n-                        fd.getRight().setAccessible(true);\n+                        ReflectionUtils.makeAccessible(fd.getRight());\n                         fieldValue = fd.getRight().get(object);\n                     }\n                 } else {\n                     fieldValue = fd.getLeft().getReadMethod().invoke(object);\n                 }\n-                fieldValue = fieldValue == null\n-                        ? StringUtils.EMPTY\n-                        : (fieldType.equals(Date.class)\n-                        ? FormatUtils.format((Date) fieldValue, false)\n-                        : fieldValue);\n+                if (fieldValue == null) {\n+                    fieldValue = StringUtils.EMPTY;\n+                } else {\n+                    fieldValue = fieldType.equals(Date.class)\n+                            ? FormatUtils.format((Date) fieldValue, false)\n+                            : fieldValue;\n+                }\n \n                 jexlContext.set(fieldName, fieldValue);\n \n@@ -197,11 +201,14 @@ public static void addFieldsToContext(final Object object, final JexlContext jex\n \n     public static void addAttrsToContext(final Collection<Attr> attrs, final JexlContext jexlContext) {\n         attrs.stream().filter(attr -> attr.getSchema() != null).forEach(attr -> {\n-            Object value = attr.getValues().isEmpty()\n-                    ? StringUtils.EMPTY\n-                    : attr.getValues().size() == 1\n-                    ? attr.getValues().get(0)\n-                    : attr.getValues();\n+            Object value;\n+            if (attr.getValues().isEmpty()) {\n+                value = StringUtils.EMPTY;\n+            } else {\n+                value = attr.getValues().size() == 1\n+                        ? attr.getValues().get(0)\n+                        : attr.getValues();\n+            }\n \n             LOG.debug(\"Add attribute {} with value {}\", attr.getSchema(), value);\n \n@@ -214,11 +221,14 @@ public static void addPlainAttrsToContext(\n \n         attrs.stream().filter(attr -> attr.getSchema() != null).forEach(attr -> {\n             List<String> attrValues = attr.getValuesAsStrings();\n-            Object value = attrValues.isEmpty()\n-                    ? StringUtils.EMPTY\n-                    : attrValues.size() == 1\n-                    ? attrValues.get(0)\n-                    : attrValues;\n+            Object value;\n+            if (attrValues.isEmpty()) {\n+                value = StringUtils.EMPTY;\n+            } else {\n+                value = attrValues.size() == 1\n+                        ? attrValues.get(0)\n+                        : attrValues;\n+            }\n \n             LOG.debug(\"Add attribute {} with value {}\", attr.getSchema().getKey(), value);\n "},{"sha":"b2a566af6174a3f9497eb651f8a6ad945c5e646a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/SyncopeJexlFunctions.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSyncopeJexlFunctions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSyncopeJexlFunctions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSyncopeJexlFunctions.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -28,9 +28,6 @@\n  */\n public class SyncopeJexlFunctions {\n \n-    protected SyncopeJexlFunctions() {\n-    }\n-\n     /**\n      * Converts realm's full path into the equivalent DN.\n      *\n@@ -40,7 +37,7 @@ protected SyncopeJexlFunctions() {\n      * @param attr attribute name for DN\n      * @return DN equivalent of the provided full path\n      */\n-    public static String fullPath2Dn(final String fullPath, final String attr) {\n+    public String fullPath2Dn(final String fullPath, final String attr) {\n         return fullPath2Dn(fullPath, attr, StringUtils.EMPTY);\n     }\n \n@@ -55,7 +52,7 @@ public static String fullPath2Dn(final String fullPath, final String attr) {\n      * @param prefix result's prefix\n      * @return DN equivalent of the provided full path\n      */\n-    public static String fullPath2Dn(final String fullPath, final String attr, final String prefix) {\n+    public String fullPath2Dn(final String fullPath, final String attr, final String prefix) {\n         String[] fullPathSplitted = fullPath.split(\"/\");\n         if (fullPathSplitted.length <= 1) {\n             return StringUtils.EMPTY;"},{"sha":"6d8fa28622993c454c7d5c860bb4b7cb648d982c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -27,6 +27,7 @@\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n \n+@SuppressWarnings(\"squid:S1214\")\n public interface JobManager {\n \n     String DOMAIN_KEY = \"domain\";"},{"sha":"f1305365a30f412d90dcff936343c83ecd17f71d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/notification/NotificationManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationManager.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -76,6 +76,7 @@ boolean notificationsAvailable(\n      * @param input object(s) provided to the event\n      * @return created notification tasks\n      */\n+    @SuppressWarnings(\"squid:S00107\")\n     List<NotificationTask> createTasks(\n             String who,\n             AuditElements.EventCategoryType type,"},{"sha":"dec9af30ce716a3a3d256ea6cb226f1f2a6f8609","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.identityconnectors.framework.common.objects.Attribute;\n \n+@SuppressWarnings(\"squid:S00107\")\n public interface PropagationManager {\n \n     /**"},{"sha":"3140378be2daed84054cec7093942784b687bc3a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -27,6 +27,7 @@\n  *\n  * @see PropagationTaskTO\n  */\n+@SuppressWarnings(\"squid:S1214\")\n public interface PropagationTaskExecutor {\n \n     /**"},{"sha":"ca5a33fe6ababaad352fa4ffee549b25c37f25e8","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskInfo.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n+@SuppressWarnings(\"squid:S1948\")\n public class PropagationTaskInfo extends PropagationTaskTO {\n \n     private static final long serialVersionUID = -2879861567335503099L;"},{"sha":"50bc90f22f21ab25bd800fce51fb08e615a6e2dc","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ReconFilterBuilder.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FReconFilterBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FReconFilterBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FReconFilterBuilder.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -28,10 +28,8 @@\n  */\n public interface ReconFilterBuilder {\n \n-    FilteredResultsHandler.PassThroughFilter PASS_THROUGH = new FilteredResultsHandler.PassThroughFilter();\n-\n     default Filter build() {\n-        return PASS_THROUGH;\n+        return new FilteredResultsHandler.PassThroughFilter();\n     }\n \n     default OperationOptions build(final OperationOptions initialOptions) {"},{"sha":"2f050b759e0144bb8f49405eada59a8d8c8dfa77","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AttributeDeserializer.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -34,6 +34,7 @@\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.Uid;\n \n+@SuppressWarnings(\"squid:S3776\")\n class AttributeDeserializer extends JsonDeserializer<Attribute> {\n \n     @Override\n@@ -71,11 +72,15 @@ public Attribute deserialize(final JsonParser jp, final DeserializationContext c\n             }\n         }\n \n-        return Uid.NAME.equals(name)\n-                ? new Uid(values.isEmpty() || values.get(0) == null ? null : values.get(0).toString())\n-                : Name.NAME.equals(name)\n-                ? new Name(values.isEmpty() || values.get(0) == null ? null : values.get(0).toString())\n-                : AttributeBuilder.build(name, values);\n+        if (Uid.NAME.equals(name)) {\n+            return new Uid(values.isEmpty() || values.get(0) == null ? null : values.get(0).toString());\n+        } else {\n+            if (Name.NAME.equals(name)) {\n+                return new Name(values.isEmpty() || values.get(0) == null ? null : values.get(0).toString());\n+            } else {\n+                return AttributeBuilder.build(name, values);\n+            }\n+        }\n     }\n \n }"},{"sha":"d69a2f46a66d5c0266110c795d59fca549a69438","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/GuardedStringDeserializer.java","status":"modified","additions":31,"deletions":20,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializer.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -29,61 +29,72 @@\n import org.identityconnectors.common.security.GuardedString;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.util.ReflectionUtils;\n \n class GuardedStringDeserializer extends JsonDeserializer<GuardedString> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(GuardedStringDeserializer.class);\n \n+    private static final String READONLY = \"readOnly\";\n+\n+    private static final String DISPOSED = \"disposed\";\n+\n+    private static final String ENCRYPTED_BYTES = \"encryptedBytes\";\n+\n+    private static final String BASE64_SHA1_HASH = \"base64SHA1Hash\";\n+\n+    private static final String LOG_ERROR_MESSAGE = \"Could not set field value to {}\";\n+    \n     @Override\n     public GuardedString deserialize(final JsonParser jp, final DeserializationContext ctx)\n             throws IOException {\n \n         ObjectNode tree = jp.readValueAsTree();\n \n         boolean readOnly = false;\n-        if (tree.has(\"readOnly\")) {\n-            readOnly = tree.get(\"readOnly\").asBoolean();\n+        if (tree.has(READONLY)) {\n+            readOnly = tree.get(READONLY).asBoolean();\n         }\n         boolean disposed = false;\n-        if (tree.has(\"disposed\")) {\n-            disposed = tree.get(\"disposed\").asBoolean();\n+        if (tree.has(DISPOSED)) {\n+            disposed = tree.get(DISPOSED).asBoolean();\n         }\n         byte[] encryptedBytes = null;\n-        if (tree.has(\"encryptedBytes\")) {\n-            encryptedBytes = Base64.getDecoder().decode(tree.get(\"encryptedBytes\").asText());\n+        if (tree.has(ENCRYPTED_BYTES)) {\n+            encryptedBytes = Base64.getDecoder().decode(tree.get(ENCRYPTED_BYTES).asText());\n         }\n         String base64SHA1Hash = null;\n-        if (tree.has(\"base64SHA1Hash\")) {\n-            base64SHA1Hash = tree.get(\"base64SHA1Hash\").asText();\n+        if (tree.has(BASE64_SHA1_HASH)) {\n+            base64SHA1Hash = tree.get(BASE64_SHA1_HASH).asText();\n         }\n \n         final byte[] clearBytes = EncryptorFactory.getInstance().getDefaultEncryptor().decrypt(encryptedBytes);\n \n         GuardedString dest = new GuardedString(new String(clearBytes).toCharArray());\n \n         try {\n-            Field field = GuardedString.class.getDeclaredField(\"readOnly\");\n-            field.setAccessible(true);\n-            field.setBoolean(dest, readOnly);\n+            Field field = GuardedString.class.getDeclaredField(READONLY);\n+            ReflectionUtils.makeAccessible(field);\n+            ReflectionUtils.setField(field, dest, readOnly);\n         } catch (Exception e) {\n-            LOG.error(\"Could not set field value to {}\", readOnly, e);\n+            LOG.error(LOG_ERROR_MESSAGE, readOnly, e);\n         }\n \n         try {\n-            Field field = GuardedString.class.getDeclaredField(\"disposed\");\n-            field.setAccessible(true);\n-            field.setBoolean(dest, disposed);\n+            Field field = GuardedString.class.getDeclaredField(DISPOSED);\n+            ReflectionUtils.makeAccessible(field);\n+            ReflectionUtils.setField(field, dest, disposed);\n         } catch (Exception e) {\n-            LOG.error(\"Could not set field value to {}\", disposed, e);\n+            LOG.error(LOG_ERROR_MESSAGE, disposed, e);\n         }\n \n         if (base64SHA1Hash != null) {\n             try {\n-                Field field = GuardedString.class.getDeclaredField(\"base64SHA1Hash\");\n-                field.setAccessible(true);\n-                field.set(dest, base64SHA1Hash);\n+                Field field = GuardedString.class.getDeclaredField(BASE64_SHA1_HASH);\n+                ReflectionUtils.makeAccessible(field);\n+                ReflectionUtils.setField(field, dest, base64SHA1Hash);\n             } catch (Exception e) {\n-                LOG.error(\"Could not set field value to {}\", base64SHA1Hash, e);\n+                LOG.error(LOG_ERROR_MESSAGE, base64SHA1Hash, e);\n             }\n         }\n "},{"sha":"df576084935bdca602d9b1d71e304c013f9093eb","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/GuardedStringSerializer.java","status":"modified","additions":24,"deletions":13,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializer.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -29,11 +29,22 @@\n import org.identityconnectors.common.security.SecurityUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.util.ReflectionUtils;\n \n class GuardedStringSerializer extends JsonSerializer<GuardedString> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(GuardedStringSerializer.class);\n \n+    private static final String READONLY = \"readOnly\";\n+\n+    private static final String DISPOSED = \"disposed\";\n+\n+    private static final String ENCRYPTED_BYTES = \"encryptedBytes\";\n+\n+    private static final String BASE64_SHA1_HASH = \"base64SHA1Hash\";\n+\n+    private static final String LOG_ERROR_MESSAGE = \"Could not get field value\";\n+\n     @Override\n     public void serialize(final GuardedString source, final JsonGenerator jgen, final SerializerProvider sp)\n             throws IOException {\n@@ -42,38 +53,38 @@ public void serialize(final GuardedString source, final JsonGenerator jgen, fina\n \n         boolean readOnly = false;\n         try {\n-            Field field = GuardedString.class.getDeclaredField(\"readOnly\");\n-            field.setAccessible(true);\n+            Field field = GuardedString.class.getDeclaredField(READONLY);\n+            ReflectionUtils.makeAccessible(field);\n             readOnly = field.getBoolean(source);\n         } catch (Exception e) {\n-            LOG.error(\"Could not get field value\", e);\n+            LOG.error(LOG_ERROR_MESSAGE, e);\n         }\n-        jgen.writeBooleanField(\"readOnly\", readOnly);\n+        jgen.writeBooleanField(READONLY, readOnly);\n \n         boolean disposed = false;\n         try {\n-            Field field = GuardedString.class.getDeclaredField(\"disposed\");\n-            field.setAccessible(true);\n+            Field field = GuardedString.class.getDeclaredField(DISPOSED);\n+            ReflectionUtils.makeAccessible(field);\n             disposed = field.getBoolean(source);\n         } catch (Exception e) {\n-            LOG.error(\"Could not get field value\", e);\n+            LOG.error(LOG_ERROR_MESSAGE, e);\n         }\n-        jgen.writeBooleanField(\"disposed\", disposed);\n+        jgen.writeBooleanField(DISPOSED, disposed);\n \n         byte[] encryptedBytes =\n                 EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(SecurityUtil.decrypt(source).getBytes());\n-        jgen.writeStringField(\"encryptedBytes\", Base64.getEncoder().encodeToString(encryptedBytes));\n+        jgen.writeStringField(ENCRYPTED_BYTES, Base64.getEncoder().encodeToString(encryptedBytes));\n \n         String base64SHA1Hash = null;\n         try {\n-            Field field = GuardedString.class.getDeclaredField(\"base64SHA1Hash\");\n-            field.setAccessible(true);\n+            Field field = GuardedString.class.getDeclaredField(BASE64_SHA1_HASH);\n+            ReflectionUtils.makeAccessible(field);\n             base64SHA1Hash = field.get(source).toString();\n         } catch (Exception e) {\n-            LOG.error(\"Could not get field value\", e);\n+            LOG.error(LOG_ERROR_MESSAGE, e);\n         }\n         if (base64SHA1Hash != null) {\n-            jgen.writeStringField(\"base64SHA1Hash\", base64SHA1Hash);\n+            jgen.writeStringField(BASE64_SHA1_HASH, base64SHA1Hash);\n         }\n \n         jgen.writeEndObject();"},{"sha":"fdf7fb066408845ecc53a8a7e08c6bec53be3928","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/SyncTokenDeserializer.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializer.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -40,17 +40,17 @@ public SyncToken deserialize(final JsonParser jp, final DeserializationContext c\n         Object value = null;\n         if (tree.has(\"value\")) {\n             JsonNode node = tree.get(\"value\");\n-            value = node.isNull()\n-                    ? null\n-                    : node.isBoolean()\n-                    ? node.asBoolean()\n-                    : node.isDouble()\n-                    ? node.asDouble()\n-                    : node.isLong()\n-                    ? node.asLong()\n-                    : node.isInt()\n-                    ? node.asInt()\n-                    : node.asText();\n+            if (node.isBoolean()) {\n+                value = node.asBoolean();\n+            } else if (node.isDouble()) {\n+                value = node.asDouble();\n+            } else if (node.isLong()) {\n+                value = node.asLong();\n+            } else if (node.isInt()) {\n+                value = node.asInt();\n+            } else {\n+                value = node.asText();\n+            }\n \n             if (value instanceof String) {\n                 String base64 = (String) value;"},{"sha":"5210084eb12427590450e504143b947c8b161564","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/FormatUtils.java","status":"modified","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtils.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -32,18 +32,13 @@\n  */\n public final class FormatUtils {\n \n-    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT =\n-        ThreadLocal.withInitial(() -> new SimpleDateFormat());\n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = ThreadLocal.withInitial(SimpleDateFormat::new);\n \n-    private static final ThreadLocal<DecimalFormat> DECIMAL_FORMAT = new ThreadLocal<DecimalFormat>() {\n-\n-        @Override\n-        protected DecimalFormat initialValue() {\n-            DecimalFormat df = new DecimalFormat();\n-            df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n-            return df;\n-        }\n-    };\n+    private static final ThreadLocal<DecimalFormat> DECIMAL_FORMAT = ThreadLocal.withInitial(() -> {\n+        DecimalFormat df = new DecimalFormat();\n+        df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n+        return df;\n+    });\n \n     public static String format(final Date date) {\n         return format(date, true);"},{"sha":"9993be080a3302a505cdd43b83c678c2585cf379","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/AbstractTest.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAbstractTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.WARN)\n+@SuppressWarnings(\"squid:S2187\")\n+public class AbstractTest {\n+\n+    @BeforeEach\n+    public void init() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+}"},{"sha":"42aff674868f3a3c06399adff3942e9b98c16fa6","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/AuditEntryImplTest.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImplTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImplTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImplTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+public class AuditEntryImplTest extends AbstractTest {\n+\n+    @Mock\n+    private AuditLoggerName logger;\n+\n+    private final String who = \"testUser\";\n+\n+    private final Object before = \"before\";\n+\n+    private final String output = \"output\";\n+\n+    private final String[] input = { \"test1\", \"test2\" };\n+\n+    private final String throwable = \"throwable\";\n+\n+    private final String key = UUID.randomUUID().toString();\n+\n+    private final Date date = new Date();\n+\n+    @Test\n+    public void AuditEntryImpl() {\n+        AuditEntryImpl auditEntryImpl = new AuditEntryImpl(who, logger, before, output, input);\n+        AuditEntryImpl auditEntryImpl2 = AuditEntryImpl.builder().\n+                who(who).\n+                before(before).\n+                logger(logger).\n+                output(output).\n+                input(null).\n+                date(date).\n+                key(key).\n+                throwable(throwable).\n+                build();\n+\n+        assertEquals(auditEntryImpl2.getWho(), auditEntryImpl.getWho());\n+        assertEquals(auditEntryImpl2.getLogger(), auditEntryImpl.getLogger());\n+        assertNotEquals(auditEntryImpl2.getInput(), auditEntryImpl.getInput().length);\n+        assertEquals(auditEntryImpl2.getDate(), auditEntryImpl2.getDate());\n+        assertEquals(auditEntryImpl2.getThrowable(), auditEntryImpl2.getThrowable());\n+    }\n+\n+    @Test\n+    public void AuditEntryImplWithUserTO(@Mock UserTO userTO) {\n+        AuditEntryImpl auditEntryImpl = new AuditEntryImpl(who, logger, before, userTO, input);\n+        assertTrue(EqualsBuilder.reflectionEquals(SerializationUtils.clone(userTO), auditEntryImpl.getOutput()));\n+\n+        ReflectionTestUtils.setField(userTO, \"password\", \"testP4ssw0rd!\");\n+        ReflectionTestUtils.setField(userTO, \"securityAnswer\", \"42\");\n+        AuditEntryImpl auditEntryImpl2 = new AuditEntryImpl(who, logger, before, userTO, input);\n+        assertFalse(EqualsBuilder.reflectionEquals(SerializationUtils.clone(userTO), auditEntryImpl2.getOutput()));\n+    }\n+\n+    @Test\n+    public void AuditEntryImplWithUserPatch(@Mock UserUR userUR) {\n+        AuditEntryImpl auditEntryImpl = new AuditEntryImpl(who, logger, userUR, output, input);\n+        assertTrue(EqualsBuilder.reflectionEquals(SerializationUtils.clone(userUR), auditEntryImpl.getBefore()));\n+    }\n+}"},{"sha":"f9806b06a7a98d4f578ab35bb2fe68801908268d","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/IntAttrNameParserTest.java","status":"modified","additions":27,"deletions":19,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -19,19 +19,22 @@\n package org.apache.syncope.core.provisioning.api;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.lenient;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import java.text.ParseException;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -45,18 +48,11 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.MockitoAnnotations;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-import org.mockito.junit.jupiter.MockitoSettings;\n-import org.mockito.quality.Strictness;\n import org.springframework.util.ReflectionUtils;\n \n-@ExtendWith(MockitoExtension.class)\n-@MockitoSettings(strictness = Strictness.WARN)\n-public class IntAttrNameParserTest {\n+public class IntAttrNameParserTest extends AbstractTest {\n \n     private static final Map<AnyTypeKind, List<String>> FIELDS = new HashMap<>();\n \n@@ -86,51 +82,49 @@ public class IntAttrNameParserTest {\n \n     @BeforeEach\n     public void initMocks() throws NoSuchFieldException {\n-        MockitoAnnotations.initMocks(this);\n-\n-        when(anyUtilsFactory.getInstance(any(AnyTypeKind.class))).thenAnswer(ic -> {\n+        lenient().when(anyUtilsFactory.getInstance(any(AnyTypeKind.class))).thenAnswer(ic -> {\n             when(anyUtils.anyTypeKind()).thenReturn(ic.getArgument(0));\n             return anyUtils;\n         });\n-        when(anyUtils.getField(anyString())).thenAnswer(ic -> {\n+        lenient().when(anyUtils.getField(anyString())).thenAnswer(ic -> {\n             String field = ic.getArgument(0);\n             return FIELDS.get(anyUtils.anyTypeKind()).contains(field)\n                     ? ReflectionUtils.findField(getClass(), \"anyUtils\")\n                     : null;\n         });\n-        when(plainSchemaDAO.find(anyString())).thenAnswer(ic -> {\n+        lenient().when(plainSchemaDAO.find(anyString())).thenAnswer(ic -> {\n             String schemaName = ic.getArgument(0);\n             switch (schemaName) {\n                 case \"email\":\n                 case \"firstname\":\n                 case \"location\":\n                     PlainSchema schema = mock(PlainSchema.class);\n-                    when(schema.getKey()).thenReturn(schemaName);\n-                    when(schema.getType()).thenReturn(AttrSchemaType.String);\n+                    lenient().when(schema.getKey()).thenReturn(schemaName);\n+                    lenient().when(schema.getType()).thenReturn(AttrSchemaType.String);\n                     return schema;\n \n                 default:\n                     return null;\n             }\n         });\n-        when(derSchemaDAO.find(anyString())).thenAnswer(ic -> {\n+        lenient().when(derSchemaDAO.find(anyString())).thenAnswer(ic -> {\n             String schemaName = ic.getArgument(0);\n             switch (schemaName) {\n                 case \"cn\":\n                     DerSchema schema = mock(DerSchema.class);\n-                    when(schema.getKey()).thenReturn(ic.getArgument(0));\n+                    lenient().when(schema.getKey()).thenReturn(ic.getArgument(0));\n                     return schema;\n \n                 default:\n                     return null;\n             }\n         });\n-        when(virSchemaDAO.find(anyString())).thenAnswer(ic -> {\n+        lenient().when(virSchemaDAO.find(anyString())).thenAnswer(ic -> {\n             String schemaName = ic.getArgument(0);\n             switch (schemaName) {\n                 case \"rvirtualdata\":\n                     VirSchema schema = mock(VirSchema.class);\n-                    when(schema.getKey()).thenReturn(ic.getArgument(0));\n+                    lenient().when(schema.getKey()).thenReturn(ic.getArgument(0));\n                     return schema;\n \n                 default:\n@@ -190,6 +184,20 @@ public void ownFields() throws ParseException {\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.USER, intAttrName.getAnyTypeKind());\n         assertNull(intAttrName.getField());\n+\n+        Object nullObj = null;\n+        int expected = new HashCodeBuilder().\n+                append(AnyTypeKind.USER).append(nullObj).append(nullObj).append(nullObj).append(nullObj).\n+                append(nullObj).append(nullObj).append(nullObj).append(nullObj).append(nullObj).append(nullObj).\n+                build();\n+        assertEquals(expected, intAttrName.hashCode());\n+        IntAttrName intAttrName2 = intAttrNameParser.parse(\"email\", AnyTypeKind.USER);\n+        assertFalse(intAttrName.equals(intAttrName2));\n+        assertFalse(intAttrName.equals(nullObj));\n+        assertTrue(intAttrName.equals(intAttrName));\n+        String toString = intAttrName.toString();\n+        assertTrue(toString.startsWith(\"org.apache.syncope.core.provisioning.api.IntAttrName\"));\n+        assertTrue(toString.endsWith(\"[USER,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>]\"));\n     }\n \n     @Test"},{"sha":"5671b3206691e63ddcfda7e10bf2a9ababa43b44","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/PropagationByResourceTest.java","status":"added","additions":185,"deletions":0,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResourceTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+public class PropagationByResourceTest extends AbstractTest {\n+\n+    private final String key = \"testKey\";\n+\n+    private final PropagationByResource<String> propagationByResource = new PropagationByResource<>();\n+\n+    @Test\n+    public void voidMethods(\n+            @Mock Set<String> toBeCreated,\n+            @Mock Set<String> toBeUpdated,\n+            @Mock Set<String> toBeDeleted,\n+            @Mock Map<String, String> oldConnObjectKeys,\n+            @Mock PropagationByResource<String> propByRes) {\n+        ReflectionTestUtils.setField(propagationByResource, \"toBeCreated\", toBeCreated);\n+        ReflectionTestUtils.setField(propagationByResource, \"toBeUpdated\", toBeUpdated);\n+        ReflectionTestUtils.setField(propagationByResource, \"toBeDeleted\", toBeDeleted);\n+        ReflectionTestUtils.setField(propagationByResource, \"oldConnObjectKeys\", oldConnObjectKeys);\n+\n+        propagationByResource.purge();\n+        verify(toBeCreated).removeAll(toBeDeleted);\n+        verify(toBeCreated).removeAll(toBeUpdated);\n+        verify(toBeUpdated).removeAll(toBeDeleted);\n+\n+        propagationByResource.clear();\n+        verify(toBeCreated).clear();\n+        verify(toBeCreated).clear();\n+        verify(toBeUpdated).clear();\n+\n+        propagationByResource.merge(null);\n+        verify(toBeCreated, times(0)).addAll(any());\n+        verify(toBeUpdated, times(0)).addAll(any());\n+        verify(toBeDeleted, times(0)).addAll(any());\n+        verify(oldConnObjectKeys, times(0)).putAll(any());\n+\n+        propagationByResource.merge(propByRes);\n+        verify(toBeCreated).addAll(any());\n+        verify(toBeUpdated).addAll(any());\n+        verify(toBeDeleted).addAll(any());\n+\n+        String oldConnObjectKey = \"oldConnObjectKey\";\n+        propagationByResource.addOldConnObjectKey(key, oldConnObjectKey);\n+        verify(oldConnObjectKeys).put(key, oldConnObjectKey);\n+        propagationByResource.addOldConnObjectKey(key, null);\n+        verify(oldConnObjectKeys, times(0)).put(key, null);\n+        propagationByResource.addOldConnObjectKey(null, null);\n+        verify(oldConnObjectKeys, times(0)).put(null, null);\n+    }\n+\n+    @Test\n+    public void add() {\n+        assertTrue(propagationByResource.add(ResourceOperation.CREATE, key));\n+        assertTrue(propagationByResource.add(ResourceOperation.UPDATE, key));\n+        assertTrue(propagationByResource.add(ResourceOperation.DELETE, key));\n+        assertFalse(propagationByResource.add(ResourceOperation.NONE, key));\n+    }\n+\n+    @Test\n+    public void addAll() {\n+        List<String> keys = new ArrayList<>();\n+        keys.add(\"testKey1\");\n+        keys.add(\"testKey2\");\n+\n+        assertTrue(propagationByResource.addAll(ResourceOperation.CREATE, keys));\n+        assertTrue(propagationByResource.addAll(ResourceOperation.UPDATE, keys));\n+        assertTrue(propagationByResource.addAll(ResourceOperation.DELETE, keys));\n+        assertFalse(propagationByResource.addAll(ResourceOperation.NONE, keys));\n+    }\n+\n+    @Test\n+    public void remove() {\n+        assertFalse(propagationByResource.remove(ResourceOperation.CREATE, key));\n+        assertFalse(propagationByResource.remove(ResourceOperation.UPDATE, key));\n+        assertFalse(propagationByResource.remove(ResourceOperation.DELETE, key));\n+        assertFalse(propagationByResource.remove(ResourceOperation.NONE, key));\n+    }\n+\n+    @Test\n+    public void removeAll() {\n+        Set<String> keys = new HashSet<>();\n+        keys.add(\"testKey1\");\n+        keys.add(\"testKey2\");\n+\n+        assertFalse(propagationByResource.removeAll(ResourceOperation.CREATE, keys));\n+        assertFalse(propagationByResource.removeAll(ResourceOperation.UPDATE, keys));\n+        assertFalse(propagationByResource.removeAll(ResourceOperation.DELETE, keys));\n+        assertFalse(propagationByResource.removeAll(ResourceOperation.NONE, keys));\n+    }\n+\n+    @Test\n+    public void removeAndRetainAll() {\n+        List<String> keys = new ArrayList<>();\n+        keys.add(\"testKey1\");\n+        keys.add(\"testKey2\");\n+\n+        assertFalse(propagationByResource.removeAll(keys));\n+        assertFalse(propagationByResource.retainAll(keys));\n+    }\n+\n+    @Test\n+    public void contains() {\n+        assertFalse(propagationByResource.contains(ResourceOperation.CREATE, key));\n+        assertFalse(propagationByResource.contains(ResourceOperation.UPDATE, key));\n+        assertFalse(propagationByResource.contains(ResourceOperation.DELETE, key));\n+        assertFalse(propagationByResource.contains(ResourceOperation.NONE, key));\n+\n+        Set<String> matchingList = new HashSet<>();\n+        matchingList.add(key);\n+        assertFalse(propagationByResource.contains(key));\n+\n+        ReflectionTestUtils.setField(propagationByResource, \"toBeDeleted\", matchingList);\n+        assertTrue(propagationByResource.contains(key));\n+    }\n+\n+    @Test\n+    public void get() {\n+        Set<String> matchingList = new HashSet<>();\n+        matchingList.add(key);\n+\n+        ReflectionTestUtils.setField(propagationByResource, \"toBeDeleted\", matchingList);\n+        assertEquals(matchingList, propagationByResource.get(ResourceOperation.DELETE));\n+        assertEquals(Collections.<String>emptySet(), propagationByResource.get(ResourceOperation.CREATE));\n+        assertEquals(Collections.<String>emptySet(), propagationByResource.get(ResourceOperation.UPDATE));\n+        assertEquals(Collections.<String>emptySet(), propagationByResource.get(ResourceOperation.NONE));\n+\n+    }\n+\n+    @Test\n+    public void asMap() {\n+        assertEquals(Collections.emptyMap(), propagationByResource.asMap());\n+    }\n+\n+    @Test\n+    public void set() {\n+        Set<String> keys = new HashSet<>();\n+        keys.add(\"testKey1\");\n+        keys.add(\"testKey2\");\n+\n+        propagationByResource.set(ResourceOperation.CREATE, Collections.<String>emptySet());\n+        assertEquals(Collections.emptySet(), ReflectionTestUtils.getField(propagationByResource, \"toBeCreated\"));\n+        propagationByResource.set(ResourceOperation.CREATE, keys);\n+        assertEquals(keys, ReflectionTestUtils.getField(propagationByResource, \"toBeCreated\"));\n+        propagationByResource.set(ResourceOperation.UPDATE, keys);\n+        assertEquals(keys, ReflectionTestUtils.getField(propagationByResource, \"toBeUpdated\"));\n+        propagationByResource.set(ResourceOperation.DELETE, keys);\n+        assertEquals(keys, ReflectionTestUtils.getField(propagationByResource, \"toBeDeleted\"));\n+    }\n+}"},{"sha":"bf2abfc0952beed819a52500cb957a4a80f69d24","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/UserWorkflowResultTest.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserWorkflowResultTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserWorkflowResultTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserWorkflowResultTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+\n+public class UserWorkflowResultTest extends AbstractTest {\n+\n+    @Test\n+    public void test() {\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+        UserWorkflowResult<String> userWorkflowResult;\n+        UserWorkflowResult<String> userWorkflowResult2;\n+        String result = \"true\";\n+        String performedTask = \"testTask\";\n+        Set<String> performedTasks = new HashSet<>();\n+        performedTasks.add(\"testTask1\");\n+        performedTasks.add(\"testTask2\");\n+        performedTasks.add(\"testTask3\");\n+        Object nullObj = null;\n+\n+        userWorkflowResult = new UserWorkflowResult<>(result, propByRes, propByLinkedAccount, performedTask);\n+        userWorkflowResult2 = new UserWorkflowResult<>(result, propByRes, propByLinkedAccount, performedTasks);\n+\n+        assertNotEquals(userWorkflowResult.hashCode(), userWorkflowResult2.hashCode());\n+        assertFalse(userWorkflowResult.equals(Object.class));\n+        assertFalse(userWorkflowResult.equals(nullObj));\n+        assertTrue(userWorkflowResult.equals(userWorkflowResult2));\n+        assertTrue(userWorkflowResult2.equals(userWorkflowResult2));\n+        assertNotEquals(userWorkflowResult.toString(), userWorkflowResult2.toString());\n+        assertEquals(performedTasks, userWorkflowResult2.getPerformedTasks());\n+    }\n+}"},{"sha":"7a4663a4ff84146044e0f2f8a36699f249678433","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/WorkflowResultTest.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FWorkflowResultTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FWorkflowResultTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FWorkflowResultTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+public class WorkflowResultTest extends AbstractTest {\n+    \n+    @Test\n+    public void test(@Mock PropagationByResource<String> propByRes) {\n+        String result = \"result\";\n+        Set<String> performedTasks = new HashSet<>();\n+        performedTasks.add(\"TEST\");\n+        WorkflowResult<String> workflowResult = new WorkflowResult<>(result, propByRes, performedTasks);\n+        WorkflowResult<String> workflowResult2 = new WorkflowResult<>(result, propByRes, performedTasks);\n+        \n+        assertTrue(workflowResult.equals(workflowResult));\n+        assertTrue(workflowResult.equals(workflowResult2));\n+        assertFalse(workflowResult.equals(null));\n+        assertFalse(workflowResult.equals(String.class));\n+        \n+        result = \"newResult\";\n+        workflowResult.setResult(result);\n+        assertEquals(result, workflowResult.getResult());\n+        \n+        assertEquals(propByRes, workflowResult2.getPropByRes());\n+    }\n+}"},{"sha":"8004c168e7d5761f0c3ad84f22ab5e4f4e4a54fa","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheKeyTest.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheKeyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheKeyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheKeyTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.cache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+\n+public class VirAttrCacheKeyTest extends AbstractTest {\n+\n+    @Test\n+    public void test() {\n+        String type = \"type\";\n+        String key = \"key\";\n+        String virSchema = \"virSchema\";\n+        VirAttrCacheKey cacheKey = new VirAttrCacheKey(type, key, virSchema);\n+        VirAttrCacheKey cacheKey2 = new VirAttrCacheKey(type, key, virSchema);\n+        VirAttrCacheKey cacheKey3 = new VirAttrCacheKey(type, String.format(type, \"3\"), String.format(virSchema, \"3\"));\n+        Object nullObj = null;\n+\n+        assertEquals(type, cacheKey.getKind());\n+        assertEquals(key, cacheKey.getKey());\n+        assertEquals(virSchema, cacheKey.getVirSchema());\n+\n+        assertEquals(cacheKey.hashCode(), cacheKey2.hashCode());\n+        assertFalse(cacheKey.equals(nullObj));\n+        assertFalse(cacheKey.equals(String.class));\n+        assertTrue(cacheKey.equals(cacheKey));\n+        assertTrue(cacheKey.equals(cacheKey2));\n+        assertFalse(cacheKey.equals(cacheKey3));\n+\n+        assertEquals(cacheKey.toString(), cacheKey2.toString());\n+    }\n+}"},{"sha":"c4ee199b91781a4c2a7e7415f0d0759079691b0b","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValueTest.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValueTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValueTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValueTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.cache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Collections;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+\n+public class VirAttrCacheValueTest extends AbstractTest {\n+\n+    @Test\n+    public void test() {\n+        Object nullObj = null;\n+        VirAttrCacheValue cacheValue = new VirAttrCacheValue(Collections.singletonList(\"testValue\"));\n+        VirAttrCacheValue cacheValue2 = new VirAttrCacheValue(Collections.emptyList());\n+\n+        cacheValue.forceExpiring();\n+        cacheValue2.forceExpiring();\n+        assertEquals(cacheValue.getCreationDate(), cacheValue2.getCreationDate());\n+        assertNotEquals(cacheValue.getValues(), cacheValue2.getValues());\n+        assertEquals(cacheValue.getLastAccessDate(), cacheValue2.getLastAccessDate());\n+        assertNotEquals(cacheValue.hashCode(), cacheValue2.hashCode());\n+        assertFalse(cacheValue.equals(cacheValue2));\n+        assertTrue(cacheValue.equals(cacheValue));\n+        assertFalse(cacheValue2.equals(nullObj));\n+        assertFalse(cacheValue2.equals(String.class));\n+        assertNotEquals(cacheValue.toString(), cacheValue2.toString());\n+    }\n+}"},{"sha":"547ac7afe9a4c4dbb40ac7a3618c5721aacf3abf","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/event/AfterHandlingEventTest.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAfterHandlingEventTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAfterHandlingEventTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAfterHandlingEventTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.event;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.UUID;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+\n+public class AfterHandlingEventTest extends AbstractTest {\n+\n+    @Test\n+    public void test() {\n+     String who = \"testUser\";\n+        AuditElements.EventCategoryType type = AuditElements.EventCategoryType.CUSTOM;\n+        String category = SyncopeConstants.REALM_ANYTYPE.toLowerCase();\n+        String subcategory = UUID.randomUUID().toString();\n+        String event = \"testEvent\";\n+        AuditElements.Result condition = AuditElements.Result.SUCCESS;\n+        Object before = \"before\";\n+        Object output = \"output\";\n+        Object[] input = new String[] { \"value1\", \"value2\" };\n+        AfterHandlingEvent afterHandlingEvent = new AfterHandlingEvent(\n+                who,\n+                type,\n+                category,\n+                subcategory, \n+                event,\n+                condition,\n+                before, \n+                output, \n+                input);\n+        \n+        assertEquals(who, afterHandlingEvent.getWho());\n+        assertEquals(type, afterHandlingEvent.getType());\n+        assertEquals(category, afterHandlingEvent.getCategory());\n+        assertEquals(subcategory, afterHandlingEvent.getSubcategory());\n+        assertEquals(event, afterHandlingEvent.getEvent());\n+        assertEquals(condition, afterHandlingEvent.getCondition());\n+        assertEquals(before, afterHandlingEvent.getBefore());\n+        assertEquals(output, afterHandlingEvent.getOutput());\n+        assertEquals(input, afterHandlingEvent.getInput());\n+    }\n+}"},{"sha":"4d8a878154dfc4c35fd08f8414b4080e080c9f0f","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/job/JobNamerTest.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamerTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.job;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.UUID;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.syncope.core.persistence.api.entity.Report;\n+import org.apache.syncope.core.persistence.api.entity.task.Task;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.quartz.JobKey;\n+import org.quartz.Scheduler;\n+\n+public class JobNamerTest extends AbstractTest {\n+\n+    private String name;\n+\n+    @Test\n+    public void getTaskKeyFromJobName() {\n+        name = \"testName\";\n+        assertNull(JobNamer.getTaskKeyFromJobName(name));\n+\n+        String uuid = UUID.randomUUID().toString();\n+        name = String.format(\"taskJob%s\", uuid);\n+        assertEquals(uuid, JobNamer.getTaskKeyFromJobName(name));\n+    }\n+\n+    @Test\n+    public void getReportKeyFromJobName() {\n+        name = \"testName\";\n+        assertNull(JobNamer.getTaskKeyFromJobName(name));\n+\n+        String uuid = UUID.randomUUID().toString();\n+        name = String.format(\"reportJob%s\", uuid);\n+        assertEquals(uuid, JobNamer.getReportKeyFromJobName(name));\n+    }\n+\n+    @Test\n+    public void getJobKey(@Mock Task task) {\n+        String uuid = UUID.randomUUID().toString();\n+        when(task.getKey()).thenReturn(uuid);\n+        assertTrue(EqualsBuilder.reflectionEquals(new JobKey(\"taskJob\" + task.getKey(), Scheduler.DEFAULT_GROUP),\n+                JobNamer.getJobKey(task)));\n+    }\n+    \n+    @Test\n+    public void getJobKey(@Mock Report report) {\n+        String uuid = UUID.randomUUID().toString();\n+        when(report.getKey()).thenReturn(uuid);\n+        assertTrue(EqualsBuilder.reflectionEquals(new JobKey(\"reportJob\" + report.getKey(), Scheduler.DEFAULT_GROUP),\n+                JobNamer.getJobKey(report)));\n+    }\n+    \n+    @Test\n+    public void getTriggerName() {\n+        String jobName = \"testJobName\";\n+        assertEquals(\"Trigger_\" + jobName, JobNamer.getTriggerName(jobName));\n+    }\n+}"},{"sha":"8e34e323912ae59000abf71966eb60a1d6ed676e","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskInfoTest.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfoTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfoTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfoTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.propagation;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Optional;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+public class PropagationTaskInfoTest extends AbstractTest {\n+\n+    @Mock\n+    private ExternalResource externalResource;\n+\n+    @Mock\n+    private transient Connector connector;\n+\n+    @InjectMocks\n+    private PropagationTaskInfo propagationTaskInfo;\n+\n+    @Test\n+    public void test(@Mock Optional<ConnectorObject> beforeObj) {\n+        PropagationTaskInfo propagationTaskInfo2 = new PropagationTaskInfo(externalResource);\n+        Object nullObj = null;\n+\n+        assertTrue(propagationTaskInfo2.equals(propagationTaskInfo2));\n+        assertTrue(propagationTaskInfo2.equals(propagationTaskInfo));\n+        assertFalse(propagationTaskInfo.equals(nullObj));\n+        assertFalse(propagationTaskInfo.equals(String.class));\n+        assertEquals(propagationTaskInfo.hashCode(), propagationTaskInfo2.hashCode());\n+        assertEquals(connector, propagationTaskInfo.getConnector());\n+\n+        propagationTaskInfo2.setConnector(connector);\n+        assertEquals(connector, propagationTaskInfo2.getConnector());\n+        assertEquals(externalResource.getClass(), propagationTaskInfo.getExternalResource().getClass());\n+\n+        IllegalArgumentException exception =\n+                assertThrows(IllegalArgumentException.class, () -> propagationTaskInfo.setResource(\"testResource\"));\n+        assertEquals(exception.getClass(), IllegalArgumentException.class);\n+        assertNull(propagationTaskInfo2.getResource());\n+        \n+        propagationTaskInfo.setBeforeObj(beforeObj);\n+        assertEquals(beforeObj, propagationTaskInfo.getBeforeObj());\n+    }\n+}"},{"sha":"3220d0fdb403f75c81023fc1183bf0effdd563ad","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningProfileTest.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningProfileTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.pushpull;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.ArrayList;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+public class ProvisioningProfileTest extends AbstractTest {\n+\n+\n+    @Test\n+    public void test(\n+            @Mock Connector connector,\n+            @Mock PushTask pushTask) {\n+        boolean dryRun = false;\n+        ConflictResolutionAction conflictResolutionAction = ConflictResolutionAction.FIRSTMATCH;\n+        ProvisioningProfile<PushTask, PushActions> profile;\n+        profile = new ProvisioningProfile<>(connector, pushTask);\n+\n+        assertEquals(connector, profile.getConnector());\n+        assertEquals(pushTask, profile.getTask());\n+        assertEquals(new ArrayList<>(), profile.getResults());\n+        assertEquals(new ArrayList<>(), profile.getActions());\n+\n+        profile.setDryRun(dryRun);\n+        assertFalse(profile.isDryRun());\n+\n+        profile.setConflictResolutionAction(conflictResolutionAction);\n+        assertEquals(conflictResolutionAction, profile.getConflictResolutionAction());\n+    }\n+}"},{"sha":"4d8c57814dfd0ccc9f3f9480157cd239a7d1def6","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/AttributeDeserializerTest.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializerTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.Collections;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+public class AttributeDeserializerTest extends AbstractTest {\n+\n+    @Mock\n+    private JsonParser jp;\n+\n+    @Mock\n+    private DeserializationContext ct;\n+\n+    @Mock\n+    private JsonNode node;\n+\n+    @Mock\n+    private JsonNode node2;\n+\n+    @Mock\n+    private ObjectNode tree;\n+\n+    private final AttributeDeserializer deserializer = new AttributeDeserializer();\n+\n+    private String name;\n+\n+    private Attribute attr;\n+\n+    @BeforeEach\n+    public void initTest() throws IOException {\n+        name = \"__NAME__\";\n+        when(jp.readValueAsTree()).thenReturn(tree);\n+        when(tree.get(\"name\")).thenReturn(node2);\n+        when(tree.get(\"value\")).thenReturn(node);\n+        when(node.iterator()).thenReturn(Collections.singletonList(node).iterator());\n+    }\n+\n+    @Test\n+    public void deserializeIsNull() throws IOException {\n+        when(node2.asText()).thenReturn(name);\n+        when(node.isNull()).thenReturn(Boolean.TRUE);\n+        attr = deserializer.deserialize(jp, ct);\n+        assertEquals(name, attr.getName());\n+        assertEquals(Collections.singletonList(null), attr.getValue());\n+    }\n+\n+    @Test\n+    public void deserializeIsBoolean() throws IOException {\n+        when(node2.asText()).thenReturn(name);\n+        when(node.isBoolean()).thenReturn(Boolean.TRUE);\n+        when(node.asBoolean()).thenReturn(Boolean.TRUE);\n+        attr = deserializer.deserialize(jp, ct);\n+        assertEquals(name, attr.getName());\n+        assertEquals(Collections.singletonList(Boolean.TRUE.toString()).get(0), attr.getValue().get(0));\n+    }\n+\n+    @Test\n+    public void deserializeIsDouble() throws IOException {\n+        Double number = 9000.1;\n+        name = \"__TEST__\";\n+        when(node2.asText()).thenReturn(name);\n+        when(node.isDouble()).thenReturn(Boolean.TRUE);\n+        when(node.asDouble()).thenReturn(number);\n+        attr = deserializer.deserialize(jp, ct);\n+        assertEquals(name, attr.getName());\n+        assertEquals(Collections.singletonList(number).get(0), attr.getValue().get(0));\n+    }\n+\n+    @Test\n+    public void deserializeIsLong() throws IOException {\n+        Long number = 9000L;\n+        name = \"__UID__\";\n+        when(node2.asText()).thenReturn(name);\n+        when(node.isLong()).thenReturn(Boolean.TRUE);\n+        when(node.asLong()).thenReturn(number);\n+        attr = deserializer.deserialize(jp, ct);\n+        assertEquals(name, attr.getName());\n+        assertEquals(Collections.singletonList(number.toString()).get(0), attr.getValue().get(0));\n+    }\n+\n+    @Test\n+    public void deserializeIsInt() throws IOException {\n+        Integer number = 9000;\n+        when(node2.asText()).thenReturn(name);\n+        when(node.isInt()).thenReturn(Boolean.TRUE);\n+        when(node.asInt()).thenReturn(number);\n+        attr = deserializer.deserialize(jp, ct);\n+        assertEquals(attr.getName(), name);\n+        assertEquals(Collections.singletonList(number.toString()).get(0), attr.getValue().get(0));\n+    }\n+\n+    @Test\n+    public void deserializeIsText() throws IOException {\n+        String text = \"<binary>test\";\n+        when(node2.asText()).thenReturn(name);\n+        when(node.asText()).thenReturn(text);\n+        attr = deserializer.deserialize(jp, ct);\n+        assertEquals(attr.getName(), name);\n+        assertEquals(Collections.singletonList(text).get(0), attr.getValue().get(0));\n+    }\n+}"},{"sha":"36f25a44469f2dbfe76e39ba718fed5c83b03141","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/AttributeSerializerTest.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializerTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyDouble;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import java.io.IOException;\n+import java.util.Collections;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+public class AttributeSerializerTest extends AbstractTest {\n+\n+    @Test\n+    public void serialize(@Mock Attribute source, @Mock JsonGenerator jgen, @Mock SerializerProvider sp)\n+            throws IOException {\n+        AttributeSerializer serializer = new AttributeSerializer();\n+        when(source.getValue()).thenReturn(null);\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeStartObject();\n+        verify(jgen).writeFieldName(\"value\");\n+        verify(jgen).writeNull();\n+\n+        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(new GuardedString()));\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeObject(any(GuardedString.class));\n+\n+        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(9000));\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeNumber(anyInt());\n+\n+        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(9000L));\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeNumber(anyLong());\n+\n+        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(9000.1));\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeNumber(anyDouble());\n+\n+        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(Boolean.TRUE));\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeBoolean(anyBoolean());\n+\n+        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(new byte[] { 9, 0, 0, 0 }));\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeString(anyString());\n+\n+        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(\"test\"));\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeString(eq(\"test\"));\n+    }\n+}"},{"sha":"8004ca3bbe0448af3d7688096dd8c1f6aba2e665","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/GuardedStringDeserializerTest.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializerTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.identityconnectors.common.security.EncryptorFactory;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+public class GuardedStringDeserializerTest extends AbstractTest {\n+\n+    private static final String READONLY = \"readOnly\";\n+\n+    private static final String DISPOSED = \"disposed\";\n+\n+    private static final String ENCRYPTED_BYTES = \"encryptedBytes\";\n+\n+    private static final String BASE64_SHA1_HASH = \"base64SHA1Hash\";\n+\n+    private final GuardedStringDeserializer deserializer = new GuardedStringDeserializer();\n+\n+    @Mock\n+    private JsonParser jp;\n+\n+    @Mock\n+    private DeserializationContext ctx;\n+\n+    @Mock\n+    private JsonNode node;\n+\n+    @Test\n+    public void deserialize() throws IOException {\n+        Map<String, JsonNode> kids = new HashMap<>();\n+        kids.put(READONLY, node);\n+        kids.put(DISPOSED, node);\n+        kids.put(ENCRYPTED_BYTES, node);\n+        kids.put(BASE64_SHA1_HASH, node);\n+        ObjectNode tree = new ObjectNode(JsonNodeFactory.instance, kids);\n+        String testString = \"randomTestString\";\n+        byte[] encryptedBytes = EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(testString.getBytes());\n+        String encryptedString = Base64.getEncoder().encodeToString(encryptedBytes);\n+\n+        when(jp.readValueAsTree()).thenReturn(tree);\n+        when(node.asText()).thenReturn(encryptedString);\n+        assertEquals(Boolean.FALSE, ReflectionTestUtils.getField(deserializer.deserialize(jp, ctx), READONLY));\n+        kids.remove(READONLY);\n+        assertEquals(Boolean.FALSE, ReflectionTestUtils.getField(deserializer.deserialize(jp, ctx), DISPOSED));\n+        kids.remove(DISPOSED);\n+        assertEquals(encryptedString, \n+                ReflectionTestUtils.getField(deserializer.deserialize(jp, ctx), BASE64_SHA1_HASH));\n+\n+        kids.remove(BASE64_SHA1_HASH);\n+        GuardedString expected = new GuardedString(new String(testString.getBytes()).toCharArray());\n+        assertTrue(EqualsBuilder.reflectionEquals(ReflectionTestUtils.getField(expected, ENCRYPTED_BYTES),\n+                ReflectionTestUtils.getField(deserializer.deserialize(jp, ctx), ENCRYPTED_BYTES)));\n+    }\n+}"},{"sha":"eca9489aaec81a5e3c96c3e169552ed8996274b6","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/GuardedStringSerializerTest.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializerTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import java.io.IOException;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+public class GuardedStringSerializerTest extends AbstractTest {\n+\n+    private static final String READONLY = \"readOnly\";\n+\n+    private static final String DISPOSED = \"disposed\";\n+\n+    private static final String ENCRYPTED_BYTES = \"encryptedBytes\";\n+\n+    private static final String BASE64_SHA1_HASH = \"base64SHA1Hash\";\n+    \n+    private final GuardedStringSerializer serializer = new GuardedStringSerializer();\n+    \n+    @Test\n+    public void serialize(\n+            @Mock JsonGenerator jgen, \n+            @Mock SerializerProvider sp) throws IOException {\n+        serializer.serialize(new GuardedString(), jgen, sp);\n+        verify(jgen).writeBooleanField(READONLY, false);\n+        verify(jgen).writeBooleanField(DISPOSED, false);\n+        verify(jgen).writeStringField(eq(ENCRYPTED_BYTES), anyString());\n+        verify(jgen).writeStringField(eq(BASE64_SHA1_HASH), anyString());\n+        verify(jgen).writeEndObject();\n+    }\n+}"},{"sha":"d94a87e2a8b2c8585f3f822f03d94eab1bfdddca","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/POJOHelperTest.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelperTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+public class POJOHelperTest extends AbstractTest {\n+\n+    @Test\n+    public void serialize() {\n+        Object object = 9001;\n+\n+        assertEquals(String.valueOf(object), POJOHelper.serialize(object));\n+    }\n+\n+    @Test\n+    public void serializeWithDefaultPrettyPrinter() {\n+        Object object = 9001;\n+\n+        assertEquals(String.valueOf(object), POJOHelper.serializeWithDefaultPrettyPrinter(object));\n+    }\n+\n+    @Test\n+    public void deserializeWithClassReference() {\n+        String serialized = \"false\";\n+\n+        assertEquals(Boolean.valueOf(serialized), POJOHelper.deserialize(serialized, Object.class));\n+    }\n+\n+    @Test\n+    public void deserializeWithTypeReference(@Mock TypeReference<? extends Object> reference) {\n+        String serialized = \"false\";\n+\n+        assertNull(POJOHelper.deserialize(serialized, reference));\n+    }\n+}"},{"sha":"59ff396774c5b2024ff83bebe4dd13e11b965fab","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/SyncTokenDeserializerTest.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializerTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+public class SyncTokenDeserializerTest extends AbstractTest {\n+\n+    @Mock\n+    private JsonParser jp;\n+\n+    @Mock\n+    private DeserializationContext ct;\n+\n+    @Mock\n+    private JsonNode node;\n+\n+    @Mock\n+    private ObjectNode tree;\n+\n+    private final SyncTokenDeserializer deserializer = new SyncTokenDeserializer();\n+\n+    @BeforeEach\n+    public void initTest() throws IOException {\n+        when(jp.readValueAsTree()).thenReturn(tree);\n+        when(tree.has(\"value\")).thenReturn(Boolean.TRUE);\n+        when(tree.get(\"value\")).thenReturn(node);\n+    }\n+\n+    @Test\n+    public void deserializeIsBoolean() throws IOException {\n+        Boolean value = Boolean.TRUE;\n+        when(node.isBoolean()).thenReturn(value);\n+        when(node.asBoolean()).thenReturn(value);\n+        assertEquals(value, deserializer.deserialize(jp, ct).getValue());\n+    }\n+\n+    @Test\n+    public void deserializeIsDouble() throws IOException {\n+        Double value = 9000.1;\n+        when(node.isDouble()).thenReturn(Boolean.TRUE);\n+        when(node.asDouble()).thenReturn(value);\n+        assertEquals(value, deserializer.deserialize(jp, ct).getValue());\n+    }\n+\n+    @Test\n+    public void deserializeIsLong() throws IOException {\n+        Long value = 9000L;\n+        when(node.isLong()).thenReturn(Boolean.TRUE);\n+        when(node.asLong()).thenReturn(value);\n+        assertEquals(value, deserializer.deserialize(jp, ct).getValue());\n+    }\n+\n+    @Test\n+    public void deserializeIsInt() throws IOException {\n+        Integer value = 9000;\n+        when(node.isInt()).thenReturn(Boolean.TRUE);\n+        when(node.asInt()).thenReturn(value);\n+        assertEquals(value, deserializer.deserialize(jp, ct).getValue());\n+    }\n+\n+    @Test\n+    public void deserializeIsString() throws IOException {\n+        String value = \"testValue\";\n+        when(node.asText()).thenReturn(value);\n+        assertEquals(value, deserializer.deserialize(jp, ct).getValue());\n+\n+        value = Base64.getEncoder().encodeToString(value.getBytes(StandardCharsets.ISO_8859_1));\n+        when(node.asText()).thenReturn(value);\n+        assertTrue(EqualsBuilder.reflectionEquals(Base64.getDecoder().decode(value),\n+                deserializer.deserialize(jp, ct).getValue()));\n+    }\n+}"},{"sha":"842366803bd84989814e4d35bd53676dbed9af97","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/SyncTokenSerializerTest.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenSerializerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenSerializerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenSerializerTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import java.io.IOException;\n+import java.util.UUID;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+public class SyncTokenSerializerTest extends AbstractTest {\n+\n+    @Test\n+    public void SyncTokenSerializer(\n+            @Mock JsonGenerator jgen,\n+            @Mock SerializerProvider sp) throws IOException {\n+        SyncTokenSerializer serializer = new SyncTokenSerializer();\n+        SyncToken source = new SyncToken(UUID.randomUUID().toString());\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeStartObject();\n+        verify(jgen).writeFieldName(\"value\");\n+        verify(jgen).writeEndObject();\n+\n+        boolean bool = false;\n+        source = new SyncToken(bool);\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeBoolean(bool);\n+\n+        double doubleNum = 9000.1;\n+        source = new SyncToken(doubleNum);\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeNumber(doubleNum);\n+\n+        long longNum = 9001;\n+        source = new SyncToken(longNum);\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeNumber(longNum);\n+\n+        int intNum = 9000;\n+        source = new SyncToken(intNum);\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen).writeNumber(intNum);\n+\n+        byte[] bytes = new byte[] { 9, 0, 0, 1 };\n+        source = new SyncToken(bytes);\n+        serializer.serialize(source, jgen, sp);\n+        verify(jgen, times(2)).writeString(anyString());\n+    }\n+}"},{"sha":"12f77bdb03052deb60945d08a9f232bdb8d7ca01","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/utils/ConnPoolConfUtilsTest.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FConnPoolConfUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FConnPoolConfUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FConnPoolConfUtilsTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.utils;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.verify;\n+\n+import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n+import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.identityconnectors.common.pooling.ObjectPoolConfiguration;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+public class ConnPoolConfUtilsTest extends AbstractTest {\n+\n+    @Mock\n+    private ConnPoolConf cpc;\n+\n+    @Test\n+    public void getConnPoolConf() {\n+        ConnPoolConfTO cpcto = new ConnPoolConfTO();\n+        ConnPoolConfUtils.getConnPoolConf(cpcto, cpc);\n+        verify(cpc).setMaxIdle(anyInt());\n+        verify(cpc).setMaxObjects(anyInt());\n+        verify(cpc).setMaxWait(anyLong());\n+        verify(cpc).setMinEvictableIdleTimeMillis(anyLong());\n+        verify(cpc).setMinIdle(anyInt());\n+    }\n+\n+    @Test\n+    public void updateObjectPoolConfiguration(@Mock ObjectPoolConfiguration opc) {\n+        ConnPoolConfUtils.updateObjectPoolConfiguration(opc, cpc);\n+        verify(opc).setMaxIdle(anyInt());\n+        verify(opc).setMaxObjects(anyInt());\n+        verify(opc).setMaxWait(anyLong());\n+        verify(opc).setMinEvictableIdleTimeMillis(anyLong());\n+        verify(opc).setMinIdle(anyInt());\n+    }\n+}"},{"sha":"61c2657a429ab914e48f9d12b3aaf5446479e113","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/utils/FormatUtilsTest.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtilsTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.utils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.text.DecimalFormat;\n+import java.text.DecimalFormatSymbols;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+\n+public class FormatUtilsTest extends AbstractTest {\n+\n+    private final Calendar calendar = Calendar.getInstance();\n+\n+    private final Date date = calendar.getTime();\n+\n+    private String conversionPattern;\n+\n+    @Test\n+    public void formatDate() {\n+        assertEquals(new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN).format(date),\n+                FormatUtils.format(date));\n+\n+        conversionPattern = \"dd/MM/yyyy\";\n+        assertEquals(new SimpleDateFormat(conversionPattern).format(date),\n+                FormatUtils.format(date, false, conversionPattern));\n+    }\n+\n+    @Test\n+    public void formatLongNumber() {\n+        long number = date.getTime();\n+        DecimalFormat df = new DecimalFormat();\n+        df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n+        assertEquals(df.format(number), FormatUtils.format(number));\n+\n+        conversionPattern = \"###,###\";\n+        df = new DecimalFormat(conversionPattern);\n+        df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n+        assertEquals(df.format(number), FormatUtils.format(number, conversionPattern));\n+    }\n+\n+    @Test\n+    public void formatDoubleNumber() {\n+        double number = date.getTime();\n+        DecimalFormat df = new DecimalFormat();\n+        df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n+        assertEquals(df.format(number), FormatUtils.format(number));\n+\n+        conversionPattern = \"###,###\";\n+        df = new DecimalFormat(conversionPattern);\n+        df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n+        assertEquals(df.format(number), FormatUtils.format(number, conversionPattern));\n+    }\n+\n+    @Test\n+    public void parseDate() throws ParseException {\n+        String source = new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN).format(date);\n+        assertEquals(DateUtils.parseDate(source, SyncopeConstants.DATE_PATTERNS),\n+                FormatUtils.parseDate(source));\n+\n+        conversionPattern = \"dd-MM-yyyy\";\n+        source = new SimpleDateFormat(conversionPattern).format(date);\n+        assertEquals(DateUtils.parseDate(source, conversionPattern),\n+                FormatUtils.parseDate(source, conversionPattern));\n+    }\n+\n+    @Test\n+    public void parseNumber() throws ParseException {\n+        String source = String.valueOf(date.getTime());\n+        conversionPattern = \"###,###\";\n+        assertEquals(Long.valueOf(source), FormatUtils.parseNumber(source, conversionPattern));\n+    }\n+}"},{"sha":"cb71c91221c0bbd34e0923befb6bbe7a91daadc2","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/utils/JexlUtilsTest.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FJexlUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FJexlUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FJexlUtilsTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.utils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.jexl3.JexlContext;\n+import org.apache.commons.jexl3.JxltEngine;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+public class JexlUtilsTest extends AbstractTest {\n+\n+    @Mock\n+    JexlContext context;\n+\n+    private String expression;\n+\n+    @Test\n+    public void newJxltEngine() {\n+        JxltEngine engine = JexlUtils.newJxltEngine();\n+        assertNotNull(engine);\n+    }\n+\n+    @Test\n+    public void isExpressionValid() {\n+        expression = \"6 * 12 + 5 / 2.6\";\n+        assertTrue(JexlUtils.isExpressionValid(expression));\n+\n+        expression = \"@inv4lid expression!\";\n+        assertFalse(JexlUtils.isExpressionValid(expression));\n+    }\n+\n+    @Test\n+    public void evaluate() {\n+        String result = StringUtils.EMPTY;\n+        assertEquals(result, JexlUtils.evaluate(expression, context));\n+\n+        expression = \"6 * 12 + 5 / 2.6\";\n+        result = \"73.92307692307692\";\n+        assertEquals(result, JexlUtils.evaluate(expression, context));\n+    }\n+\n+    @Test\n+    public void addFieldsToContext(\n+            @Mock Any<?> any,\n+            @Mock AnyTO anyTO,\n+            @Mock Realm realm,\n+            @Mock RealmTO realmTO) {\n+        JexlUtils.addFieldsToContext(new Exception(), context);\n+        verify(context, times(2)).set(eq(\"cause\"), any());\n+\n+        String testFullPath = \"testFullPath\";\n+        when(any.getRealm()).thenReturn(realm);\n+        when(realm.getFullPath()).thenReturn(testFullPath);\n+        JexlUtils.addFieldsToContext(any, context);\n+        verify(context).set(\"realm\", testFullPath);\n+\n+        String testRealm = \"testRealm\";\n+        when(anyTO.getRealm()).thenReturn(testRealm);\n+        JexlUtils.addFieldsToContext(anyTO, context);\n+        verify(context, times(3)).set(\"realm\", testRealm);\n+\n+        String fullPath = \"test/full/path\";\n+        when(realm.getFullPath()).thenReturn(fullPath);\n+        JexlUtils.addFieldsToContext(realm, context);\n+        verify(context, times(2)).set(\"fullPath\", fullPath);\n+\n+        fullPath = \"test/full/path2\";\n+        when(realmTO.getFullPath()).thenReturn(fullPath);\n+        JexlUtils.addFieldsToContext(realmTO, context);\n+        verify(context, times(2)).set(\"fullPath\", fullPath);\n+    }\n+\n+    @Test\n+    public void addAttrTOsToContext() {\n+        String schemaName = \"testSchema\";\n+        String value = \"testValue\";\n+        Collection<Attr> attrs = new ArrayList<>();\n+        Attr attr = new Attr.Builder(schemaName).build();\n+        attrs.add(attr);\n+\n+        JexlUtils.addAttrsToContext(attrs, context);\n+        verify(context).set(schemaName, StringUtils.EMPTY);\n+\n+        attr = new Attr.Builder(schemaName).value(value).build();\n+        attrs.clear();\n+        attrs.add(attr);\n+\n+        JexlUtils.addAttrsToContext(attrs, context);\n+        verify(context).set(schemaName, value);\n+    }\n+\n+    @Test\n+    public void addPlainAttrsToContext(@Mock Collection<? extends PlainAttr<?>> attrs) {\n+        JexlUtils.addPlainAttrsToContext(attrs, context);\n+        verify(context, times(0)).set(anyString(), any());\n+    }\n+\n+    @Test\n+    public void addDerAttrsToContext(\n+            @Mock DerAttrHandler derAttrHandler,\n+            @Mock Any<?> any,\n+            @Mock DerSchema derSchema) {\n+        Map<DerSchema, String> derAttrs = new HashMap<>();\n+        derAttrs.put(derSchema, expression);\n+\n+        when(derAttrHandler.getValues(any())).thenReturn(derAttrs);\n+        JexlUtils.addDerAttrsToContext(any, derAttrHandler, context);\n+        verify(context).set(derAttrs.get(derSchema), expression);\n+    }\n+\n+    @Test\n+    public void evaluateMandatoryCondition(\n+            @Mock DerAttrHandler derAttrHandler,\n+            @Mock Any<?> any,\n+            @Mock DerSchema derSchema,\n+            @Mock Collection<? extends PlainAttr<?>> plainAttrs) {\n+        Map<DerSchema, String> derAttrs = new HashMap<>();\n+        derAttrs.put(derSchema, expression);\n+\n+        when(any.getPlainAttrs()).thenReturn(new ArrayList<>());\n+        when(derAttrHandler.getValues(any())).thenReturn(derAttrs);\n+\n+        assertTrue(JexlUtils.evaluateMandatoryCondition(\"true\", any, derAttrHandler));\n+        assertFalse(JexlUtils.evaluateMandatoryCondition(\"false\", any, derAttrHandler));\n+    }\n+}"},{"sha":"700dc95103c474dc5497c1e5571ca1493aef21b3","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/utils/RealmUtilsTest.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtilsTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.utils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+\n+public class RealmUtilsTest extends AbstractTest {\n+\n+    @Test\n+    public void getGroupOwnerRealm() {\n+        String realmPath = \"realmPath\";\n+        String groupKey = \"groupKey\";\n+        assertEquals(realmPath + \"@\" + groupKey, RealmUtils.getGroupOwnerRealm(realmPath, groupKey));\n+    }\n+\n+    @Test\n+    public void normalizingAddTo() {\n+        Set<String> realms = new HashSet<>();\n+        realms.add(\"realm1\");\n+        realms.add(\"realm2\");\n+        String newRealm = \"realm123\";\n+        assertFalse(RealmUtils.normalizingAddTo(realms, newRealm));\n+        assertEquals(2, realms.size());\n+\n+        realms.clear();\n+        realms.add(\"testRealm1\");\n+        realms.add(\"realm2\");\n+        newRealm = \"test\";\n+        assertTrue(RealmUtils.normalizingAddTo(realms, newRealm));\n+        assertEquals(2, realms.size());\n+    }\n+    \n+    @Test\n+    public void getEffective() {\n+        Set<String> allowedRealms = new HashSet<>();\n+        String requestedRealm = \"requestedRealm\";\n+        allowedRealms.add(\"testRealm1\");\n+        allowedRealms.add(\"testRealm2\");\n+        allowedRealms.add(\"testRealm3\");\n+        allowedRealms.add(\"requestedRealm\");\n+        Set<String> effective = RealmUtils.getEffective(allowedRealms, requestedRealm);\n+        assertEquals(allowedRealms, effective);\n+    }\n+}"},{"sha":"39db5247cadc2a6a29f61746a4e42048e34678bc","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/utils/URIUtilsTest.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FURIUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FURIUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FURIUtilsTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.utils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+\n+public class URIUtilsTest extends AbstractTest {\n+\n+    @Test\n+    public void buildForConnId() throws URISyntaxException, MalformedURLException {\n+        AtomicReference<String> location = new AtomicReference<>();\n+        location.set(\"www.tirasa.net\");\n+        IllegalArgumentException exception =\n+                assertThrows(IllegalArgumentException.class, () -> URIUtils.buildForConnId(location.get()));\n+        assertEquals(exception.getClass(), IllegalArgumentException.class);\n+\n+        location.set(\"connid:test/location\");\n+        URI expectedURI = new URI(location.get().trim());\n+        assertEquals(expectedURI, URIUtils.buildForConnId(location.get()));\n+    }\n+}"},{"sha":"5895d206007323a27bd4667f236415c60cb74db6","filename":"core/provisioning-api/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fresources%2Fmockito-extensions%2Forg.mockito.plugins.MockMaker","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fresources%2Fmockito-extensions%2Forg.mockito.plugins.MockMaker","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fresources%2Fmockito-extensions%2Forg.mockito.plugins.MockMaker?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+mock-maker-inline"},{"sha":"172e24ccaa7e4f51385799c5f553826f493987a4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -108,7 +108,7 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan\n \n     protected abstract String getName(AnyCR anyCR);\n \n-    protected abstract ProvisioningManager<?, ?, ?> getProvisioningManager();\n+    protected abstract ProvisioningManager<?, ?> getProvisioningManager();\n \n     protected abstract AnyTO doCreate(AnyCR anyCR, SyncDelta delta);\n "},{"sha":"765495bedf143ade32198ad4df1cb285c29ec8bc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultAnyObjectPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -63,7 +63,7 @@ protected String getName(final AnyCR anyCR) {\n     }\n \n     @Override\n-    protected ProvisioningManager<?, ?, ?> getProvisioningManager() {\n+    protected ProvisioningManager<?, ?> getProvisioningManager() {\n         return anyObjectProvisioningManager;\n     }\n "},{"sha":"538b786405c034f540b95388922a9d91bed98dce","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultGroupPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -73,7 +73,7 @@ protected String getName(final AnyCR anyCR) {\n     }\n \n     @Override\n-    protected ProvisioningManager<?, ?, ?> getProvisioningManager() {\n+    protected ProvisioningManager<?, ?> getProvisioningManager() {\n         return groupProvisioningManager;\n     }\n "},{"sha":"3bf70cf6151d6cbd955c9cf669b81d6e228cde48","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -88,7 +88,7 @@ protected String getName(final AnyCR anyCR) {\n     }\n \n     @Override\n-    protected ProvisioningManager<?, ?, ?> getProvisioningManager() {\n+    protected ProvisioningManager<?, ?> getProvisioningManager() {\n         return userProvisioningManager;\n     }\n "},{"sha":"cd5372e18af87cc4fe9fba37eaf843c2c38387fc","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActionsTest.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActionsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb88d8a55dcd28656886e11e3159624047aa71b1/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActionsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActionsTest.java?ref=cb88d8a55dcd28656886e11e3159624047aa71b1","patch":"@@ -116,6 +116,11 @@ public void beforeProvision() throws JobExecutionException {\n         connConfProperty.getValues().clear();\n         connConfProperty.getValues().add(digest);\n \n+        dBPasswordPullActions.beforeProvision(profile, syncDelta, userCR);\n+        userTO.setPassword(password);\n+        connConfProperty.getValues().clear();\n+        connConfProperty.getValues().add(digest);\n+\n         dBPasswordPullActions.beforeProvision(profile, syncDelta, userCR);\n \n         assertEquals(CipherAlgorithm.valueOf(digest), ReflectionTestUtils.getField(dBPasswordPullActions, \"cipher\"));\n@@ -129,7 +134,10 @@ public void beforeUpdate() throws JobExecutionException {\n                 build();\n \n         dBPasswordPullActions.beforeUpdate(profile, syncDelta, userTO, userUR);\n+        userUR = new UserUR();\n+        userUR.setPassword(new PasswordPatch.Builder().value(\"an0therTestP4ss\").build());\n \n+        dBPasswordPullActions.beforeUpdate(profile, syncDelta, userTO, userUR);\n         assertEquals(cipher, ReflectionTestUtils.getField(dBPasswordPullActions, \"cipher\"));\n         assertEquals(encodedPassword, ReflectionTestUtils.getField(dBPasswordPullActions, \"encodedPassword\"));\n     }"}]}