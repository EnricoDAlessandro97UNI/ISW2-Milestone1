{"sha":"485ddef93383d473d2c189b3a5987bceeb00815c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ4NWRkZWY5MzM4M2Q0NzNkMmMxODliM2E1OTg3YmNlZWIwMDgxNWM=","commit":{"author":{"name":"Matteo Alessandroni","email":"skylark17@apache.org","date":"2020-04-09T11:43:15Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@users.noreply.github.com","date":"2020-04-10T08:27:53Z"},"message":"[SYNCOPE-160] Access, Auth and AttrRelease policies","tree":{"sha":"015eb248e6bf48ed0a3687fe56852134343c5535","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/015eb248e6bf48ed0a3687fe56852134343c5535"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/485ddef93383d473d2c189b3a5987bceeb00815c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/485ddef93383d473d2c189b3a5987bceeb00815c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/485ddef93383d473d2c189b3a5987bceeb00815c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/485ddef93383d473d2c189b3a5987bceeb00815c/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9a4a1783e9ddae070ed55ef42eafe6be83ee0056","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a4a1783e9ddae070ed55ef42eafe6be83ee0056","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9a4a1783e9ddae070ed55ef42eafe6be83ee0056"}],"stats":{"total":1869,"additions":1819,"deletions":50},"files":[{"sha":"653fe11bd50c898a4e922c2e28ad7a5bb334ec53","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAccessPolicyConf.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import java.io.Serializable;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+\n+@XmlType\n+@XmlSeeAlso({ DefaultAccessPolicyConf.class })\n+public abstract class AbstractAccessPolicyConf implements Serializable, AccessPolicyConf {\n+\n+    private static final long serialVersionUID = 1153200197344709778L;\n+\n+    private String name;\n+\n+    private boolean enabled = true;\n+\n+    private boolean ssoEnabled = true;\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    private final Map<String, Set<String>> requiredAttributes = new LinkedHashMap<>();\n+\n+    public AbstractAccessPolicyConf() {\n+        setName(getClass().getName());\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    public void setEnabled(final boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    @Override\n+    public boolean isSsoEnabled() {\n+        return this.ssoEnabled;\n+    }\n+\n+    public void setSsoEnabled(final boolean ssoEnabled) {\n+        this.ssoEnabled = ssoEnabled;\n+    }\n+\n+    @XmlElementWrapper(name = \"requiredAttributes\")\n+    @XmlElement(name = \"requiredAttribute\")\n+    @JsonProperty(\"requiredAttributes\")\n+    @Override\n+    public Map<String, Set<String>> getRequiredAttributes() {\n+        return requiredAttributes;\n+    }\n+\n+}"},{"sha":"e3a82063d705b873a4cf578a97591ec85daf7a8b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAttrReleasePolicyConf.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAttrReleasePolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAttrReleasePolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAttrReleasePolicyConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import java.io.Serializable;\n+\n+@XmlType\n+@XmlSeeAlso({ AllowedAttrReleasePolicyConf.class })\n+public abstract class AbstractAttrReleasePolicyConf implements Serializable, AttrReleasePolicyConf {\n+\n+    private static final long serialVersionUID = 1153200197344709778L;\n+\n+    private String name;\n+\n+    public AbstractAttrReleasePolicyConf() {\n+        setName(getClass().getName());\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"ac19f37c628f59ba458a62cb491b840657051ef7","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAuthPolicyConf.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import java.io.Serializable;\n+\n+@XmlType\n+@XmlSeeAlso({ DefaultAuthPolicyConf.class })\n+public abstract class AbstractAuthPolicyConf implements Serializable, AuthPolicyConf {\n+\n+    private static final long serialVersionUID = 9185127128182430142L;\n+\n+    private String name;\n+\n+    private AuthPolicyCriteriaConf criteria;\n+\n+    public AbstractAuthPolicyConf() {\n+        setName(getClass().getName());\n+    }\n+\n+    public AbstractAuthPolicyConf(final String name) {\n+        setName(name);\n+    }\n+\n+    @Override\n+    public AuthPolicyCriteriaConf getCriteria() {\n+        return criteria;\n+    }\n+\n+    public void setCriteria(final AuthPolicyCriteriaConf criteria) {\n+        this.criteria = criteria;\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"1f497decc04ea30cc9d04479cbc022819479df5e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAuthPolicyCriteriaConf.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyCriteriaConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import java.io.Serializable;\n+\n+@XmlType\n+@XmlSeeAlso({ DefaultAuthPolicyCriteriaConf.class })\n+public abstract class AbstractAuthPolicyCriteriaConf implements AuthPolicyCriteriaConf, Serializable {\n+\n+    private static final long serialVersionUID = -6882164291962510245L;\n+\n+    private String name;\n+\n+    public AbstractAuthPolicyCriteriaConf() {\n+        setName(getClass().getName());\n+    }\n+\n+    public AbstractAuthPolicyCriteriaConf(final String name) {\n+        setName(name);\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+}"},{"sha":"3cb05059e7dde25781d8639a0303042993ac2774","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AccessPolicyConf.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public interface AccessPolicyConf extends Serializable {\n+\n+    /**\n+     * Give name of related access policy.\n+     *\n+     * @return name of this access policy\n+     */\n+    String getName();\n+\n+    boolean isEnabled();\n+\n+    boolean isSsoEnabled();\n+\n+    Map<String, Set<String>> getRequiredAttributes();\n+}"},{"sha":"3bcccd019d4d699bfb279c482ca219ffe4abded4","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AllowedAttrReleasePolicyConf.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+\n+@XmlRootElement(name = \"AllowedAttrReleasePolicyConf\")\n+@XmlType\n+public class AllowedAttrReleasePolicyConf extends AbstractAttrReleasePolicyConf implements AttrReleasePolicyConf {\n+\n+    private static final long serialVersionUID = -1969836661359025380L;\n+\n+    /**\n+     * Specify the list of allowed attribute to release.\n+     * Use the special {@code *} to release everything.\n+     */\n+    private final List<String> allowedAttributes = new ArrayList<>();\n+\n+    @XmlElementWrapper(name = \"allowedAttributes\")\n+    @XmlElement(name = \"allowedAttribute\")\n+    @JsonProperty(\"allowedAttributes\")\n+    public List<String> getAllowedAttributes() {\n+        return allowedAttributes;\n+    }\n+\n+}"},{"sha":"0a3e1d12390a8e413c5f7a7531e9d3da2a675fd1","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AttrReleasePolicyConf.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.io.Serializable;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public interface AttrReleasePolicyConf extends Serializable {\n+\n+    /**\n+     * Give name of related attr release policy.\n+     *\n+     * @return name of this attr release policy\n+     */\n+    String getName();\n+}"},{"sha":"7740d3c45e774dee2ce7649198d13165714d2fcf","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AuthPolicyConf.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.io.Serializable;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public interface AuthPolicyConf extends Serializable {\n+\n+    /**\n+     * Give name of related authentication policy instance.\n+     *\n+     * @return name of this authentication policy instance\n+     */\n+    String getName();\n+\n+    /**\n+     * Gets the policy criteria linked to this policy\n+     * to establish criteria for success.\n+     *\n+     * @return the criteria\n+     */\n+    AuthPolicyCriteriaConf getCriteria();\n+}"},{"sha":"1847fc43151383d3cf747330dbf993db96167dbb","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AuthPolicyCriteriaConf.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.io.Serializable;\n+\n+/**\n+ * Determine the criteria by which the authentication policy\n+ * should conduct itself. Typically, this translates to how\n+ * the policy should execute the modules to establish a success\n+ * criteria. Examples would include \"all modules should validate the user\"\n+ * or \"any module can validate the user\" before the policy can consider it\n+ * a success.\n+ */\n+@FunctionalInterface\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public interface AuthPolicyCriteriaConf extends Serializable {\n+\n+    /**\n+     * Describe the name of the authentication policy criteria.\n+     *\n+     * @return name of this authentication policy instance\n+     */\n+    String getName();\n+}"},{"sha":"d12c98bc006361020dfe501cd23625b2b8216218","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccessPolicyConf.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"DefaultAccessPolicyConf\")\n+@XmlType\n+public class DefaultAccessPolicyConf extends AbstractAccessPolicyConf implements AccessPolicyConf {\n+\n+    private static final long serialVersionUID = -1969836600059025380L;\n+\n+}"},{"sha":"3076d39d8a819da4cf78fafb730754cb7a29223d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAuthPolicyConf.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+\n+@XmlRootElement(name = \"DefaultAuthPolicyConf\")\n+@XmlType\n+public class DefaultAuthPolicyConf extends AbstractAuthPolicyConf implements AuthPolicyConf {\n+\n+    private static final long serialVersionUID = -2969836600059025380L;\n+\n+    private final List<String> authModules = new ArrayList<>();\n+\n+    @XmlElementWrapper(name = \"authModules\")\n+    @XmlElement(name = \"authModule\")\n+    @JsonProperty(\"authModules\")\n+    public List<String> getAuthModules() {\n+        return authModules;\n+    }\n+}"},{"sha":"8bcb84bda1c6563e1a724d5ed1d4a688fa74d878","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAuthPolicyCriteriaConf.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"AnyAuthPolicyCriteriaConf\")\n+@XmlType\n+public class DefaultAuthPolicyCriteriaConf extends AbstractAuthPolicyCriteriaConf {\n+\n+    private static final long serialVersionUID = 3928807032588105869L;\n+\n+    private boolean all;\n+\n+    public boolean isAll() {\n+        return all;\n+    }\n+\n+    public void setAll(final boolean all) {\n+        this.all = all;\n+    }\n+}"},{"sha":"d3c7ee739d986a98f687a3f54ebee7e0b842b502","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/package-info.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2Fpackage-info.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+@XmlSchema(namespace = SyncopeConstants.NS)\n+@XmlJavaTypeAdapters({ @XmlJavaTypeAdapter(type = Date.class, value = DateAdapter.class), })\n+package org.apache.syncope.common.lib.policy;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.jaxb.DateAdapter;\n+\n+import javax.xml.bind.annotation.XmlSchema;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapters;\n+\n+import java.util.Date;"},{"sha":"f134fb6bbd09cb1db7d4d40c88211e1daaa1610b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AccessPolicyTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessPolicyTO.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,53 @@\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"accessPolicy\")\n+@XmlType\n+public class AccessPolicyTO extends PolicyTO {\n+\n+    private static final long serialVersionUID = -6711411162433533300L;\n+\n+    private String configuration;\n+\n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.AccessPolicyTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    public String getConfiguration() {\n+        return configuration;\n+    }\n+\n+    public void setConfiguration(final String configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+}"},{"sha":"a5ca38441898649ca6ae851cede5a5828feb7ed5","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AttrReleasePolicyTO.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrReleasePolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrReleasePolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrReleasePolicyTO.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"attrReleasePolicy\")\n+@XmlType\n+public class AttrReleasePolicyTO extends PolicyTO {\n+\n+    private static final long serialVersionUID = -1432411162433533300L;\n+\n+    private String configuration;\n+\n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.AttrReleasePolicyTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    public String getConfiguration() {\n+        return configuration;\n+    }\n+\n+    public void setConfiguration(final String configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+}"},{"sha":"e18cd934c24f8dc3f09d9352237099c7d9abb057","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AuthPolicyTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthPolicyTO.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"authPolicy\")\n+@XmlType\n+public class AuthPolicyTO extends PolicyTO {\n+\n+    private static final long serialVersionUID = -6711411162433533300L;\n+\n+    private String configuration;\n+\n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true,\n+            example = \"org.apache.syncope.common.lib.to.AuthPolicyTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    public String getConfiguration() {\n+        return configuration;\n+    }\n+\n+    public void setConfiguration(final String configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+}"},{"sha":"44b26676d1d34583145e0a7ddd56542af3b2fe26","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/PolicyType.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -31,6 +31,18 @@ public enum PolicyType {\n      * How password values should look like.\n      */\n     PASSWORD,\n+    /**\n+     * How authentication policies should look like.\n+     */\n+    AUTH,\n+    /**\n+     * How attribute release policies should look like.\n+     */\n+    ATTR_RELEASE,\n+    /**\n+     * How access policies should be defined.\n+     */\n+    ACCESS,\n     /**\n      * For handling conflicts resolution during pull.\n      */"},{"sha":"d391d713fdb1bd011d13f1bb50f4fb59e1906710","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -65,6 +65,9 @@ public <T extends PolicyTO> T create(final PolicyType type, final T policyTO) {\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.POLICY_UPDATE + \"')\")\n     public PolicyTO update(final PolicyType type, final PolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n+        if (policy == null) {\n+            throw new NotFoundException(\"Policy \" + policyTO.getKey() + \" not found\");\n+        }\n \n         PolicyUtils policyUtils = policyUtilsFactory.getInstance(policy);\n         if (policyUtils.getType() != type) {"},{"sha":"6fb6f24b737746ea84523ff0963327fb29068814","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -20,12 +20,15 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n public interface PolicyDAO extends DAO<Policy> {\n \n@@ -39,6 +42,12 @@ public interface PolicyDAO extends DAO<Policy> {\n \n     List<PullPolicy> findByPullCorrelationRule(Implementation correlationRule);\n \n+    List<AuthPolicy> findByAuthPolicy(Implementation policy);\n+\n+    List<AccessPolicy> findByAccessPolicy(Implementation policy);\n+\n+    List<AttrReleasePolicy> findByAttrReleasePolicy(Implementation policy);\n+\n     List<PushPolicy> findByPushCorrelationRule(Implementation correlationRule);\n \n     List<AccountPolicy> findByResource(ExternalResource resource);"},{"sha":"02944434a8da7108f013ad6a245b5c16d6e11a4e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccessPolicy.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+\n+public interface AccessPolicy extends Policy {\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    Implementation getConfiguration();\n+\n+    void setConfiguration(Implementation configuration);\n+\n+}"},{"sha":"3b3b5dba23e27df27592fd0ab329731957f03dfb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AttrReleasePolicy.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAttrReleasePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAttrReleasePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAttrReleasePolicy.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+\n+public interface AttrReleasePolicy extends Policy {\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    Implementation getConfiguration();\n+\n+    void setConfiguration(Implementation configuration);\n+}"},{"sha":"d7c4a9a6382e1cecd1cbaddd7e3b8ff49ac70331","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AuthPolicy.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAuthPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAuthPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAuthPolicy.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+\n+public interface AuthPolicy extends Policy {\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    Implementation getConfiguration();\n+\n+    void setConfiguration(Implementation configuration);\n+\n+}"},{"sha":"1e8b9bd03b89ea53e0b897a23821d1f8e2fc4690","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":62,"deletions":13,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -24,16 +24,22 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccessPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAttrReleasePolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAuthPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n@@ -61,6 +67,12 @@ private static <T extends Policy> Class<? extends AbstractPolicy> getEntityRefer\n                 ? JPAPullPolicy.class\n                 : PushPolicy.class.isAssignableFrom(reference)\n                 ? JPAPushPolicy.class\n+                : AuthPolicy.class.isAssignableFrom(reference)\n+                ? JPAAuthPolicy.class\n+                : AccessPolicy.class.isAssignableFrom(reference)\n+                ? JPAAccessPolicy.class\n+                : AttrReleasePolicy.class.isAssignableFrom(reference)\n+                ? JPAAttrReleasePolicy.class\n                 : null;\n     }\n \n@@ -108,6 +120,33 @@ public List<PullPolicy> findByPullCorrelationRule(final Implementation correlati\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<AuthPolicy> findByAuthPolicy(final Implementation configuration) {\n+        TypedQuery<AuthPolicy> query = entityManager().createQuery(\"SELECT e FROM \" + JPAAuthPolicy.class.\n+                getSimpleName() + \" e \"\n+                + \"WHERE e.configuration=:configuration\", AuthPolicy.class);\n+        query.setParameter(\"configuration\", configuration);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<AccessPolicy> findByAccessPolicy(final Implementation configuration) {\n+        TypedQuery<AccessPolicy> query = entityManager().createQuery(\"SELECT e FROM \" + JPAAccessPolicy.class.\n+                getSimpleName() + \" e \"\n+                + \"WHERE  e.configuration=:configuration\", AccessPolicy.class);\n+        query.setParameter(\"configuration\", configuration);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<AttrReleasePolicy> findByAttrReleasePolicy(final Implementation configuration) {\n+        TypedQuery<AttrReleasePolicy> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAAttrReleasePolicy.class.getSimpleName() + \" e \"\n+                + \"WHERE e.configuration=:configuration\", AttrReleasePolicy.class);\n+        query.setParameter(\"configuration\", configuration);\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<PushPolicy> findByPushCorrelationRule(final Implementation correlationRule) {\n         TypedQuery<PushPolicy> query = entityManager().createQuery(\n@@ -147,20 +186,30 @@ public <T extends Policy> void delete(final T policy) {\n                 realm.setAccountPolicy(null);\n             } else if (policy instanceof PasswordPolicy) {\n                 realm.setPasswordPolicy(null);\n+            } else if (policy instanceof AuthPolicy) {\n+                realm.setAuthPolicy(null);\n+            } else if (policy instanceof AccessPolicy) {\n+                realm.setAccessPolicy(null);\n+            } else if (policy instanceof AttrReleasePolicy) {\n+                realm.setAttrReleasePolicy(null);\n             }\n         });\n \n-        resourceDAO.findByPolicy(policy).forEach(resource -> {\n-            if (policy instanceof AccountPolicy) {\n-                resource.setAccountPolicy(null);\n-            } else if (policy instanceof PasswordPolicy) {\n-                resource.setPasswordPolicy(null);\n-            } else if (policy instanceof PullPolicy) {\n-                resource.setPullPolicy(null);\n-            } else if (policy instanceof PushPolicy) {\n-                resource.setPushPolicy(null);\n-            }\n-        });\n+        if (!(policy instanceof AuthPolicy)\n+                && !(policy instanceof AttrReleasePolicy)\n+                && !(policy instanceof AccessPolicy)) {\n+            resourceDAO.findByPolicy(policy).forEach(resource -> {\n+                if (policy instanceof AccountPolicy) {\n+                    resource.setAccountPolicy(null);\n+                } else if (policy instanceof PasswordPolicy) {\n+                    resource.setPasswordPolicy(null);\n+                } else if (policy instanceof PullPolicy) {\n+                    resource.setPullPolicy(null);\n+                } else if (policy instanceof PushPolicy) {\n+                    resource.setPushPolicy(null);\n+                }\n+            });\n+        }\n \n         entityManager().remove(policy);\n     }"},{"sha":"261c176859a4fc90b92dcee9e210b9cb2bed9bf9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccessPolicy.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Table;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+@Table(name = JPAAccessPolicy.TABLE)\n+public class JPAAccessPolicy extends AbstractPolicy implements AccessPolicy {\n+\n+    public static final String TABLE = \"AccessPolicy\";\n+\n+    private static final long serialVersionUID = -4190607009908888884L;\n+\n+    @Column(unique = true, nullable = false)\n+    private String name;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAImplementation configuration;\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public Implementation getConfiguration() {\n+        return configuration;\n+    }\n+\n+    @Override\n+    public void setConfiguration(final Implementation configuration) {\n+        checkType(configuration, JPAImplementation.class);\n+        checkImplementationType(configuration, AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+        this.configuration = (JPAImplementation) configuration;\n+    }\n+\n+}"},{"sha":"6a21edc80f722139ea534cda6c267d54705c59c3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAttrReleasePolicy.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAttrReleasePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAttrReleasePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAttrReleasePolicy.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Table;\n+\n+import javax.persistence.ManyToOne;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+\n+@Entity\n+@Table(name = JPAAttrReleasePolicy.TABLE)\n+public class JPAAttrReleasePolicy extends AbstractPolicy implements AttrReleasePolicy {\n+\n+    public static final String TABLE = \"AttrReleasePolicy\";\n+\n+    private static final long serialVersionUID = -4190607669908888884L;\n+\n+    @Column(unique = true, nullable = false)\n+    private String name;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAImplementation configuration;\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public Implementation getConfiguration() {\n+        return configuration;\n+    }\n+\n+    @Override\n+    public void setConfiguration(final Implementation configuration) {\n+        checkType(configuration, JPAImplementation.class);\n+        checkImplementationType(configuration, AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+        this.configuration = (JPAImplementation) configuration;\n+    }\n+}"},{"sha":"b36715288559a554691abc614142eca5b9736a6e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAuthPolicy.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAuthPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAuthPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAuthPolicy.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Table;\n+import javax.persistence.ManyToOne;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+\n+@Entity\n+@Table(name = JPAAuthPolicy.TABLE)\n+public class JPAAuthPolicy extends AbstractPolicy implements AuthPolicy {\n+\n+    public static final String TABLE = \"AuthPolicy\";\n+\n+    private static final long serialVersionUID = -4190607009908888884L;\n+\n+    @Column(unique = true, nullable = false)\n+    private String name;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAImplementation configuration;\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public Implementation getConfiguration() {\n+        return configuration;\n+    }\n+\n+    @Override\n+    public void setConfiguration(final Implementation configuration) {\n+        checkType(configuration, JPAImplementation.class);\n+        checkImplementationType(configuration, AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+        this.configuration = (JPAImplementation) configuration;\n+    }\n+\n+}"},{"sha":"c694eca9ca9997a6f7c86b97ff434694d03558a9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPolicyUtils.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtils.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -19,12 +19,15 @@\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtils;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n public class JPAPolicyUtils implements PolicyUtils {\n \n@@ -51,10 +54,18 @@ public Class<? extends Policy> policyClass() {\n             case PULL:\n                 return PullPolicy.class;\n \n+            case AUTH:\n+                return AuthPolicy.class;\n+\n+            case ATTR_RELEASE:\n+                return AttrReleasePolicy.class;\n+\n+            case ACCESS:\n+                return AccessPolicy.class;\n+\n             case PUSH:\n             default:\n                 return PushPolicy.class;\n         }\n     }\n-\n }"},{"sha":"1db66e911a5dbf96963289e9a19c8a1510fcd620","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPolicyUtilsFactory.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -18,20 +18,26 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n+import org.apache.syncope.common.lib.to.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.policy.PushPolicyTO;\n+import org.apache.syncope.common.lib.to.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.to.AuthPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtils;\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n @Component\n public class JPAPolicyUtilsFactory implements PolicyUtilsFactory {\n@@ -52,6 +58,12 @@ public PolicyUtils getInstance(final Policy policy) {\n             type = PolicyType.PULL;\n         } else if (policy instanceof PushPolicy) {\n             type = PolicyType.PUSH;\n+        } else if (policy instanceof AuthPolicy) {\n+            type = PolicyType.AUTH;\n+        } else if (policy instanceof AccessPolicy) {\n+            type = PolicyType.ACCESS;\n+        } else if (policy instanceof AttrReleasePolicy) {\n+            type = PolicyType.ATTR_RELEASE;\n         } else {\n             throw new IllegalArgumentException(\"Invalid policy: \" + policy);\n         }\n@@ -70,6 +82,12 @@ public PolicyUtils getInstance(final Class<? extends PolicyTO> policyClass) {\n             type = PolicyType.PULL;\n         } else if (policyClass == PushPolicyTO.class) {\n             type = PolicyType.PUSH;\n+        } else if (policyClass == AuthPolicyTO.class) {\n+            type = PolicyType.AUTH;\n+        } else if (policyClass == AccessPolicyTO.class) {\n+            type = PolicyType.ACCESS;\n+        } else if (policyClass == AttrReleasePolicyTO.class) {\n+            type = PolicyType.ATTR_RELEASE;\n         } else {\n             throw new IllegalArgumentException(\"Invalid PolicyTO class: \" + policyClass.getName());\n         }"},{"sha":"3e7cdaf767aa46e6c607e4715eacb38e41471902","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":169,"deletions":17,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -18,37 +18,45 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-import java.util.List;\n-import java.util.UUID;\n+import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n-import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n-import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n-import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n-import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.util.Set;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n @Transactional(\"Master\")\n public class PolicyTest extends AbstractTest {\n@@ -93,13 +101,61 @@ public void findByKey() {\n         assertNotNull(pushCRConf);\n         assertEquals(1, pushCRConf.getSchemas().size());\n         assertTrue(pushCRConf.getSchemas().contains(\"surname\"));\n+\n+        AccessPolicy accessPolicy = policyDAO.find(\"617735c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNull(accessPolicy);\n+        accessPolicy = policyDAO.find(\"419935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNotNull(accessPolicy);\n+        accessPolicy = policyDAO.find(UUID.randomUUID().toString());\n+        assertNull(accessPolicy);\n+\n+        AuthPolicy authPolicy = policyDAO.find(\"b912a0d4-a890-416f-9ab8-84ab077eb028\");\n+        assertNotNull(authPolicy);\n+        authPolicy = policyDAO.find(\"659b9906-4b6e-4bc0-aca0-6809dff346d4\");\n+        assertNotNull(authPolicy);\n+        authPolicy = policyDAO.find(UUID.randomUUID().toString());\n+        assertNull(authPolicy);\n+\n+        AttrReleasePolicy attrReleasePolicy = policyDAO.find(\"019935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNull(attrReleasePolicy);\n+        attrReleasePolicy = policyDAO.find(\"319935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNotNull(attrReleasePolicy);\n+        attrReleasePolicy = policyDAO.find(UUID.randomUUID().toString());\n+        assertNull(attrReleasePolicy);\n+\n+    }\n+\n+    @Test\n+    public void findByPolicyImpl() {\n+        AccessPolicy accessPolicy = policyDAO.find(\"419935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNotNull(accessPolicy);\n+        AuthPolicy authPolicy = policyDAO.find(\"b912a0d4-a890-416f-9ab8-84ab077eb028\");\n+        assertNotNull(authPolicy);\n+        AttrReleasePolicy attrReleasePolicy = policyDAO.find(\"319935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNotNull(attrReleasePolicy);\n+\n+        assertFalse(policyDAO.findByAccessPolicy(accessPolicy.getConfiguration()).isEmpty());\n+        assertFalse(policyDAO.findByAuthPolicy(authPolicy.getConfiguration()).isEmpty());\n+        assertFalse(policyDAO.findByAttrReleasePolicy(attrReleasePolicy.getConfiguration()).isEmpty());\n     }\n \n     @Test\n     public void findByType() {\n-        List<PullPolicy> policies = policyDAO.find(PullPolicy.class);\n-        assertNotNull(policies);\n-        assertFalse(policies.isEmpty());\n+        List<PullPolicy> pullPolicies = policyDAO.find(PullPolicy.class);\n+        assertNotNull(pullPolicies);\n+        assertFalse(pullPolicies.isEmpty());\n+\n+        List<AccessPolicy> accessPolicies = policyDAO.find(AccessPolicy.class);\n+        assertNotNull(accessPolicies);\n+        assertEquals(1, accessPolicies.size());\n+\n+        List<AuthPolicy> authPolicies = policyDAO.find(AuthPolicy.class);\n+        assertNotNull(authPolicies);\n+        assertEquals(2, authPolicies.size());\n+\n+        List<AttrReleasePolicy> attrReleasePolicies = policyDAO.find(AttrReleasePolicy.class);\n+        assertNotNull(attrReleasePolicies);\n+        assertEquals(2, attrReleasePolicies.size());\n     }\n \n     @Test\n@@ -144,6 +200,84 @@ public void create() {\n                 policy.getCorrelationRule(anyTypeDAO.findUser()).get().getImplementation().getKey());\n         assertEquals(pullGRuleName,\n                 policy.getCorrelationRule(anyTypeDAO.findGroup()).get().getImplementation().getKey());\n+\n+        int beforeCount = policyDAO.findAll().size();\n+        AccessPolicy accessPolicy = entityFactory.newEntity(AccessPolicy.class);\n+        accessPolicy.setName(\"AttrReleasePolicyAllowEverything\");\n+        accessPolicy.setDescription(\"This is a sample attr release policy that releases everything\");\n+\n+        DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n+        conf.getRequiredAttributes().putAll(Map.of(\"cn\", Set.of(\"syncope\")));\n+        conf.setName(\"AttrReleasePolicyAllowEverything\");\n+\n+        Implementation type = entityFactory.newEntity(Implementation.class);\n+        type.setKey(\"AttrReleasePolicyAllowEverything\");\n+        type.setEngine(ImplementationEngine.JAVA);\n+        type.setType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+        type.setBody(POJOHelper.serialize(conf));\n+        type = implementationDAO.save(type);\n+\n+        accessPolicy.setConfiguration(type);\n+        accessPolicy = policyDAO.save(accessPolicy);\n+\n+        assertNotNull(accessPolicy);\n+        assertNotNull(accessPolicy.getKey());\n+\n+        int afterCount = policyDAO.findAll().size();\n+        assertEquals(afterCount, beforeCount + 1);\n+\n+        beforeCount = policyDAO.findAll().size();\n+        AuthPolicy authPolicy = entityFactory.newEntity(AuthPolicy.class);\n+        authPolicy.setName(\"AuthPolicyTest\");\n+        authPolicy.setDescription(\"This is a sample authentication policy\");\n+\n+        DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n+        authPolicyConf.getAuthModules().addAll(List.of(\"LdapAuthentication1\", \"DatabaseAuthentication2\"));\n+        DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n+        criteria.setName(\"DefaultConf\");\n+        criteria.setAll(true);\n+        authPolicyConf.setCriteria(criteria);\n+        Implementation authPolicyType = entityFactory.newEntity(Implementation.class);\n+        authPolicyType.setKey(\"AuthPolicyConfKey\");\n+        authPolicyType.setEngine(ImplementationEngine.JAVA);\n+        authPolicyType.setType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+        authPolicyType.setBody(POJOHelper.serialize(authPolicyConf));\n+        authPolicyType = implementationDAO.save(authPolicyType);\n+\n+        authPolicy.setConfiguration(authPolicyType);\n+        authPolicy = policyDAO.save(authPolicy);\n+\n+        assertNotNull(authPolicy);\n+        assertNotNull(authPolicy.getKey());\n+\n+        afterCount = policyDAO.findAll().size();\n+        assertEquals(afterCount, beforeCount + 1);\n+\n+        beforeCount = policyDAO.findAll().size();\n+        AttrReleasePolicy attrReleasepolicy = entityFactory.newEntity(AttrReleasePolicy.class);\n+        attrReleasepolicy.setName(\"AttrReleasePolicyAllowEverything\");\n+        attrReleasepolicy.setDescription(\"This is a sample attr release policy that releases everything\");\n+\n+        AllowedAttrReleasePolicyConf attrReleasePolicyConf = new AllowedAttrReleasePolicyConf();\n+        attrReleasePolicyConf.getAllowedAttributes().addAll(List.of(\"*\"));\n+        attrReleasePolicyConf.setName(\"AttrReleasePolicyAllowEverything\");\n+\n+        Implementation attrReleasePolicyType = entityFactory.newEntity(Implementation.class);\n+        attrReleasePolicyType.setKey(\"AttrReleasePolicyAllowEverything\");\n+        attrReleasePolicyType.setEngine(ImplementationEngine.JAVA);\n+        attrReleasePolicyType.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+        attrReleasePolicyType.setBody(POJOHelper.serialize(attrReleasePolicyConf));\n+        attrReleasePolicyType = implementationDAO.save(attrReleasePolicyType);\n+\n+        attrReleasepolicy.setConfiguration(attrReleasePolicyType);\n+        attrReleasepolicy = policyDAO.save(attrReleasepolicy);\n+\n+        assertNotNull(attrReleasepolicy);\n+        assertNotNull(attrReleasepolicy.getKey());\n+\n+        afterCount = policyDAO.findAll().size();\n+        assertEquals(afterCount, beforeCount + 1);\n+\n     }\n \n     @Test\n@@ -185,5 +319,23 @@ public void delete() {\n \n         Policy actual = policyDAO.find(\"66691e96-285f-4464-bc19-e68384ea4c85\");\n         assertNull(actual);\n+\n+        AccessPolicy accessPolicy = policyDAO.find(\"419935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNotNull(accessPolicy);\n+        policyDAO.delete(accessPolicy);\n+        accessPolicy = policyDAO.find(\"419935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNull(accessPolicy);\n+\n+        AuthPolicy authPolicy = policyDAO.find(\"b912a0d4-a890-416f-9ab8-84ab077eb028\");\n+        assertNotNull(authPolicy);\n+        policyDAO.delete(authPolicy);\n+        authPolicy = policyDAO.find(\"b912a0d4-a890-416f-9ab8-84ab077eb028\");\n+        assertNull(authPolicy);\n+\n+        AttrReleasePolicy attrReleasepolicy = policyDAO.find(\"319935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNotNull(attrReleasepolicy);\n+        policyDAO.delete(attrReleasepolicy);\n+        attrReleasepolicy = policyDAO.find(\"319935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNull(attrReleasepolicy);\n     }\n }"},{"sha":"b9e73e14958aae44999193d2de0900058f0e1cc2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PolicyTest.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.outer;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.apache.syncope.core.persistence.jpa.inner.AbstractClientAppTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import javax.persistence.PersistenceException;\n+import java.util.UUID;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@Transactional(\"Master\")\n+public class PolicyTest extends AbstractClientAppTest {\n+\n+    @Autowired\n+    private OIDCRPDAO oidcRelyingPartyDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Test\n+    public void policyCannotBeRemovedForApps() {\n+        // Create new policy\n+        AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n+        AuthPolicy authPolicy = buildAndSaveAuthPolicy();\n+\n+        // Create new client app and assign policy\n+        OIDCRP rp = entityFactory.newEntity(OIDCRP.class);\n+        rp.setName(\"OIDC\");\n+        rp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n+        rp.setDescription(\"This is a sample OIDC RP\");\n+        rp.setClientId(UUID.randomUUID().toString());\n+        rp.setClientSecret(\"secret\");\n+        rp.setAccessPolicy(accessPolicy);\n+        rp.setAuthPolicy(authPolicy);\n+\n+        rp = oidcRelyingPartyDAO.save(rp);\n+        assertNotNull(rp);\n+\n+        assertThrows(PersistenceException.class, () -> {\n+            this.policyDAO.delete(accessPolicy);\n+            entityManager().flush();\n+        });\n+        assertThrows(PersistenceException.class, () -> {\n+            this.policyDAO.delete(authPolicy);\n+            entityManager().flush();\n+        });\n+    }\n+\n+    @Test\n+    public void authPolicyCanBeNull() {\n+        Realm realm = realmDAO.findByFullPath(\"/odd\");\n+        assertNotNull(realm);\n+\n+        // Create new client app and assign policy\n+        OIDCRP rp = entityFactory.newEntity(OIDCRP.class);\n+        rp.setName(\"OIDC\");\n+        rp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n+        rp.setDescription(\"This is a sample OIDC RP\");\n+        rp.setClientId(UUID.randomUUID().toString());\n+        rp.setClientSecret(\"secret\");\n+        rp.setRealm(realm);\n+\n+        assertDoesNotThrow(() -> {\n+            oidcRelyingPartyDAO.save(rp);\n+            entityManager().flush();\n+        });\n+    }\n+\n+    @Test\n+    public void policyForRealmsCanBeRemoved() {\n+        AuthPolicy authPolicy = buildAndSaveAuthPolicy();\n+        AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n+        AttrReleasePolicy attrPolicy = buildAndSaveAttrRelPolicy();\n+\n+        Realm realm = realmDAO.findByFullPath(SyncopeConstants.ROOT_REALM);\n+        assertNotNull(realm);\n+        realm.setAuthPolicy(authPolicy);\n+        realm.setAccessPolicy(accessPolicy);\n+        realm.setAttrReleasePolicy(attrPolicy);\n+        realm = realmDAO.save(realm);\n+\n+        assertNotNull(realm);\n+\n+        this.policyDAO.delete(authPolicy);\n+        this.policyDAO.delete(accessPolicy);\n+        this.policyDAO.delete(attrPolicy);\n+        entityManager().flush();\n+        assertNull(this.policyDAO.find(authPolicy.getKey()));\n+        assertNull(this.policyDAO.find(accessPolicy.getKey()));\n+        assertNull(this.policyDAO.find(attrPolicy.getKey()));\n+    }\n+}"},{"sha":"01093b28a07487dd527d5ec69df84ed37e3d5ab5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":82,"deletions":8,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -18,36 +18,43 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.util.stream.Collectors;\n-import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n-import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.policy.PushPolicyTO;\n+import org.apache.syncope.common.lib.to.AccessPolicyTO;\n+import org.apache.syncope.common.lib.to.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.to.AuthPolicyTO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import java.util.stream.Collectors;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+\n @Component\n public class PolicyDataBinderImpl implements PolicyDataBinder {\n \n@@ -192,6 +199,54 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n             // remove all rules not contained in the TO\n             pushPolicy.getCorrelationRules().removeIf(anyFilter\n                     -> !pushPolicyTO.getCorrelationRules().containsKey(anyFilter.getAnyType().getKey()));\n+        } else if (policyTO instanceof AuthPolicyTO) {\n+            if (result == null) {\n+                result = (T) entityFactory.newEntity(AuthPolicy.class);\n+            }\n+\n+            AuthPolicy authPolicy = AuthPolicy.class.cast(result);\n+            AuthPolicyTO authPolicyTO = AuthPolicyTO.class.cast(policyTO);\n+\n+            authPolicy.setName(authPolicyTO.getKey());\n+            Implementation configuration = implementationDAO.find(authPolicyTO.getConfiguration());\n+            if (configuration == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                        authPolicyTO.getConfiguration());\n+            } else {\n+                authPolicy.setConfiguration(configuration);\n+            }\n+        } else if (policyTO instanceof AccessPolicyTO) {\n+            if (result == null) {\n+                result = (T) entityFactory.newEntity(AccessPolicy.class);\n+            }\n+\n+            AccessPolicy accessPolicy = AccessPolicy.class.cast(result);\n+            AccessPolicyTO accessPolicyTO = AccessPolicyTO.class.cast(policyTO);\n+\n+            accessPolicy.setName(accessPolicyTO.getKey());\n+            Implementation configuration = implementationDAO.find(accessPolicyTO.getConfiguration());\n+            if (configuration == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                        accessPolicyTO.getConfiguration());\n+            } else {\n+                accessPolicy.setConfiguration(configuration);\n+            }\n+        } else if (policyTO instanceof AttrReleasePolicyTO) {\n+            if (result == null) {\n+                result = (T) entityFactory.newEntity(AttrReleasePolicy.class);\n+            }\n+\n+            AttrReleasePolicy attrReleasePolicy = AttrReleasePolicy.class.cast(result);\n+            AttrReleasePolicyTO attrReleasePolicyTO = AttrReleasePolicyTO.class.cast(policyTO);\n+\n+            attrReleasePolicy.setName(attrReleasePolicyTO.getKey());\n+            Implementation configuration = implementationDAO.find(attrReleasePolicyTO.getConfiguration());\n+            if (configuration == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                        attrReleasePolicyTO.getConfiguration());\n+            } else {\n+                attrReleasePolicy.setConfiguration(configuration);\n+            }\n         }\n \n         if (result != null) {\n@@ -257,14 +312,33 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             pushPolicy.getCorrelationRules().\n                     forEach(rule -> pushPolicyTO.getCorrelationRules().\n                     put(rule.getAnyType().getKey(), rule.getImplementation().getKey()));\n+        } else if (policy instanceof AuthPolicy) {\n+            AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n+            authPolicyTO.setConfiguration(((AuthPolicy) policy).getConfiguration() == null\n+                    ? null : ((AuthPolicy) policy).getConfiguration().getKey());\n+            policyTO = (T) authPolicyTO;\n+        } else if (policy instanceof AccessPolicy) {\n+            AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n+            accessPolicyTO.setConfiguration(((AccessPolicy) policy).getConfiguration() == null\n+                    ? null : ((AccessPolicy) policy).getConfiguration().getKey());\n+            policyTO = (T) accessPolicyTO;\n+        } else if (policy instanceof AttrReleasePolicy) {\n+            AttrReleasePolicyTO attrReleasePolicyTO = new AttrReleasePolicyTO();\n+            attrReleasePolicyTO.setConfiguration(((AttrReleasePolicy) policy).getConfiguration() == null\n+                    ? null : ((AttrReleasePolicy) policy).getConfiguration().getKey());\n+            policyTO = (T) attrReleasePolicyTO;\n         }\n \n         if (policyTO != null) {\n             policyTO.setKey(policy.getKey());\n             policyTO.setDescription(policy.getDescription());\n \n-            for (ExternalResource resource : resourceDAO.findByPolicy(policy)) {\n-                policyTO.getUsedByResources().add(resource.getKey());\n+            if (!(policy instanceof AuthPolicy)\n+                    && !(policy instanceof AccessPolicy)\n+                    && !(policy instanceof AttrReleasePolicy)) {\n+                for (ExternalResource resource : resourceDAO.findByPolicy(policy)) {\n+                    policyTO.getUsedByResources().add(resource.getKey());\n+                }\n             }\n             for (Realm realm : realmDAO.findByPolicy(policy)) {\n                 policyTO.getUsedByRealms().add(realm.getFullPath());"},{"sha":"4b65c75a19d331ad8191afb1ba6c801396802359","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":280,"deletions":11,"changes":291,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/485ddef93383d473d2c189b3a5987bceeb00815c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/485ddef93383d473d2c189b3a5987bceeb00815c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=485ddef93383d473d2c189b3a5987bceeb00815c","patch":"@@ -20,40 +20,147 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.List;\n-import java.util.Set;\n-import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n-import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.policy.PushPolicyTO;\n-import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.to.AccessPolicyTO;\n+import org.apache.syncope.common.lib.to.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.DummyPullCorrelationRule;\n import org.apache.syncope.fit.core.reference.DummyPushCorrelationRule;\n import org.junit.jupiter.api.Test;\n+import org.junit.platform.commons.util.StringUtils;\n+import javax.ws.rs.core.Response;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.to.AuthPolicyTO;\n \n public class PolicyITCase extends AbstractITCase {\n \n+    private static AuthPolicyTO buildAuthPolicyTO() {\n+        String authPolicyName = \"TestAuthPolicy\" + getUUIDString();\n+        ImplementationTO implementationTO = null;\n+        try {\n+            implementationTO = implementationService.read(\n+                    AMImplementationType.AUTH_POLICY_CONFIGURATIONS, authPolicyName);\n+        } catch (SyncopeClientException e) {\n+            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n+                implementationTO = new ImplementationTO();\n+                implementationTO.setKey(authPolicyName);\n+                implementationTO.setEngine(ImplementationEngine.JAVA);\n+                implementationTO.setType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+\n+                DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n+                conf.getAuthModules().addAll(List.of(\"LdapAuthentication1\"));\n+                implementationTO.setBody(POJOHelper.serialize(conf));\n+\n+                Response response = implementationService.create(implementationTO);\n+                implementationTO = implementationService.read(\n+                        implementationTO.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                assertNotNull(implementationTO);\n+            }\n+        }\n+        assertNotNull(implementationTO);\n+\n+        AuthPolicyTO policy = new AuthPolicyTO();\n+        policy.setDescription(\"Test Authentication policy\");\n+        policy.setKey(implementationTO.getKey());\n+\n+        return policy;\n+    }\n+\n+    private static AttrReleasePolicyTO buildAttributeReleasePolicyTO(final String policyName) {\n+        ImplementationTO implementationTO = null;\n+        try {\n+            implementationTO = implementationService.read(\n+                    AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS, policyName);\n+        } catch (SyncopeClientException e) {\n+            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n+                implementationTO = new ImplementationTO();\n+                implementationTO.setKey(policyName);\n+                implementationTO.setEngine(ImplementationEngine.JAVA);\n+                implementationTO.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+\n+                AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n+                conf.setName(\"MyDefaultAttrReleasePolicyConf\");\n+                conf.getAllowedAttributes().addAll(List.of(\"cn\", \"givenName\"));\n+                implementationTO.setBody(POJOHelper.serialize(conf));\n+\n+                Response response = implementationService.create(implementationTO);\n+                implementationTO = implementationService.read(\n+                        implementationTO.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                assertNotNull(implementationTO);\n+            }\n+        }\n+        assertNotNull(implementationTO);\n+\n+        AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n+        policy.setDescription(\"Test Attribute Release policy\");\n+        policy.setKey(implementationTO.getKey());\n+\n+        return policy;\n+    }\n+\n+    private static AccessPolicyTO buildAccessPolicyTO() {\n+        final String accessPolicyName = \"TestAccessPolicy\" + getUUIDString();\n+\n+        ImplementationTO implementationTO = null;\n+        try {\n+            implementationTO = implementationService.read(\n+                    AMImplementationType.ACCESS_POLICY_CONFIGURATIONS, accessPolicyName);\n+        } catch (SyncopeClientException e) {\n+            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n+                implementationTO = new ImplementationTO();\n+                implementationTO.setKey(accessPolicyName);\n+                implementationTO.setEngine(ImplementationEngine.JAVA);\n+                implementationTO.setType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+\n+                DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n+                conf.setEnabled(true);\n+                conf.setName(\"TestAccessPolicyConf\");\n+                conf.getRequiredAttributes().put(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n+                implementationTO.setBody(POJOHelper.serialize(conf));\n+\n+                Response response = implementationService.create(implementationTO);\n+                implementationTO = implementationService.read(\n+                        implementationTO.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                assertNotNull(implementationTO);\n+            }\n+        }\n+        assertNotNull(implementationTO);\n+\n+        AccessPolicyTO policy = new AccessPolicyTO();\n+        policy.setDescription(\"Test Access policy\");\n+        policy.setKey(implementationTO.getKey());\n+\n+        return policy;\n+    }\n+\n     private PullPolicyTO buildPullPolicyTO() throws IOException {\n         ImplementationTO corrRule = null;\n         try {\n@@ -142,6 +249,33 @@ public void getPullPolicy() {\n         assertTrue(policyTO.getUsedByRealms().isEmpty());\n     }\n \n+    @Test\n+    public void getAuthPolicy() {\n+        AuthPolicyTO policyTO =\n+                policyService.read(PolicyType.AUTH, \"659b9906-4b6e-4bc0-aca0-6809dff346d4\");\n+\n+        assertNotNull(policyTO);\n+        assertTrue(policyTO.getUsedByRealms().isEmpty());\n+    }\n+\n+    @Test\n+    public void getAccessPolicy() {\n+        AccessPolicyTO policyTO =\n+                policyService.read(PolicyType.ACCESS, \"419935c7-deb3-40b3-8a9a-683037e523a2\");\n+\n+        assertNotNull(policyTO);\n+        assertTrue(policyTO.getUsedByRealms().isEmpty());\n+    }\n+\n+    @Test\n+    public void getAttributeReleasePolicy() {\n+        AttrReleasePolicyTO policyTO =\n+                policyService.read(PolicyType.ATTR_RELEASE, \"319935c7-deb3-40b3-8a9a-683037e523a2\");\n+\n+        assertNotNull(policyTO);\n+        assertTrue(policyTO.getUsedByRealms().isEmpty());\n+    }\n+\n     @Test\n     public void create() throws IOException {\n         PullPolicyTO pullPolicyTO = createPolicy(PolicyType.PULL, buildPullPolicyTO());\n@@ -151,10 +285,19 @@ public void create() throws IOException {\n         PushPolicyTO pushPolicyTO = createPolicy(PolicyType.PUSH, buildPushPolicyTO());\n         assertNotNull(pushPolicyTO);\n         assertEquals(\"TestPushRule\", pushPolicyTO.getCorrelationRules().get(AnyTypeKind.USER.name()));\n+\n+        AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH,\n+                buildAuthPolicyTO());\n+        assertNotNull(authPolicyTO);\n+        assertEquals(\"Test Authentication policy\", authPolicyTO.getDescription());\n+\n+        AccessPolicyTO accessPolicyTO = createPolicy(PolicyType.ACCESS, buildAccessPolicyTO());\n+        assertNotNull(accessPolicyTO);\n+        assertEquals(\"Test Access policy\", accessPolicyTO.getDescription());\n     }\n \n     @Test\n-    public void update() {\n+    public void updatePasswordPolicy() {\n         PasswordPolicyTO globalPolicy = policyService.read(PolicyType.PASSWORD, \"ce93fcda-dc3a-4369-a7b0-a6108c261c85\");\n \n         PasswordPolicyTO policy = SerializationUtils.clone(globalPolicy);\n@@ -183,6 +326,104 @@ public void update() {\n         assertEquals(8, ruleConf.getMinLength());\n     }\n \n+    @Test\n+    public void updateAuthPolicy() {\n+        AuthPolicyTO newAuthPolicyTO = buildAuthPolicyTO();\n+        assertNotNull(newAuthPolicyTO);\n+        newAuthPolicyTO = createPolicy(PolicyType.AUTH, newAuthPolicyTO);\n+\n+        ImplementationTO authPolicyImplementationTO = implementationService.read(\n+                AMImplementationType.AUTH_POLICY_CONFIGURATIONS, \"MyDefaultAuthPolicyConf\");\n+        assertNotNull(authPolicyImplementationTO);\n+        assertFalse(StringUtils.isBlank(authPolicyImplementationTO.getBody()));\n+\n+        DefaultAuthPolicyConf authPolicyConf =\n+                POJOHelper.deserialize(authPolicyImplementationTO.getBody(), DefaultAuthPolicyConf.class);\n+        assertNotNull(authPolicyConf);\n+        authPolicyConf.getAuthModules().add(\"LdapAuthentication\");\n+        authPolicyImplementationTO.setBody(POJOHelper.serialize(authPolicyConf));\n+\n+        // update new authentication policy\n+        policyService.update(PolicyType.AUTH, newAuthPolicyTO);\n+        newAuthPolicyTO = policyService.read(PolicyType.AUTH, newAuthPolicyTO.getKey());\n+        assertNotNull(newAuthPolicyTO);\n+\n+        authPolicyConf = POJOHelper.deserialize(authPolicyImplementationTO.getBody(),\n+                DefaultAuthPolicyConf.class);\n+        assertNotNull(authPolicyConf);\n+        assertEquals(2, authPolicyConf.getAuthModules().size());\n+        assertTrue(authPolicyConf.getAuthModules().contains(\"LdapAuthentication\"));\n+    }\n+\n+    @Test\n+    public void updateAccessPolicy() {\n+        AccessPolicyTO globalAccessPolicyTO =\n+                policyService.read(PolicyType.ACCESS, \"419935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNotNull(globalAccessPolicyTO);\n+\n+        AccessPolicyTO newAccessPolicyTO = buildAccessPolicyTO();\n+        newAccessPolicyTO = createPolicy(PolicyType.ACCESS, newAccessPolicyTO);\n+        assertNotNull(newAccessPolicyTO);\n+\n+        ImplementationTO accessPolicyImplementationTO = implementationService.read(\n+                AMImplementationType.ACCESS_POLICY_CONFIGURATIONS, \"MyDefaultAccessPolicyConf\");\n+        assertNotNull(accessPolicyImplementationTO);\n+        assertFalse(StringUtils.isBlank(accessPolicyImplementationTO.getBody()));\n+\n+        DefaultAccessPolicyConf accessPolicyConf =\n+                POJOHelper.deserialize(accessPolicyImplementationTO.getBody(), DefaultAccessPolicyConf.class);\n+        assertNotNull(accessPolicyConf);\n+        accessPolicyConf.getRequiredAttributes().put(\"ou\", Set.of(\"test\"));\n+        accessPolicyConf.getRequiredAttributes().put(\"cn\", Set.of(\"admin\", \"Admin\"));\n+        accessPolicyImplementationTO.setBody(POJOHelper.serialize(accessPolicyConf));\n+\n+        // update new authentication policy\n+        policyService.update(PolicyType.ACCESS, newAccessPolicyTO);\n+        newAccessPolicyTO = policyService.read(PolicyType.ACCESS, newAccessPolicyTO.getKey());\n+        assertNotNull(newAccessPolicyTO);\n+\n+        accessPolicyConf = POJOHelper.deserialize(accessPolicyImplementationTO.getBody(), DefaultAccessPolicyConf.class);\n+        assertEquals(2, accessPolicyConf.getRequiredAttributes().size());\n+        assertNotNull(accessPolicyConf.getRequiredAttributes().get(\"cn\"));\n+        assertNotNull(accessPolicyConf.getRequiredAttributes().get(\"ou\"));\n+\n+    }\n+\n+    @Test\n+    public void updateAttrReleasePolicy() {\n+        AttrReleasePolicyTO policyTO =\n+                policyService.read(PolicyType.ATTR_RELEASE, \"319935c7-deb3-40b3-8a9a-683037e523a2\");\n+        assertNotNull(policyTO);\n+\n+        final String policyName = \"TestAttrReleasePolicy\" + getUUIDString();\n+        AttrReleasePolicyTO newPolicyTO = buildAttributeReleasePolicyTO(policyName);\n+        newPolicyTO = createPolicy(PolicyType.ATTR_RELEASE, newPolicyTO);\n+        assertNotNull(newPolicyTO);\n+\n+        ImplementationTO implementationTO = implementationService.read(\n+                AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS, policyName);\n+        assertNotNull(implementationTO);\n+        assertFalse(StringUtils.isBlank(implementationTO.getBody()));\n+\n+        AllowedAttrReleasePolicyConf policyConf =\n+                POJOHelper.deserialize(implementationTO.getBody(), AllowedAttrReleasePolicyConf.class);\n+        assertNotNull(policyConf);\n+        policyConf.getAllowedAttributes().add(\"postalCode\");\n+        implementationTO.setBody(POJOHelper.serialize(policyConf));\n+\n+        // update new policy\n+        policyService.update(PolicyType.ATTR_RELEASE, newPolicyTO);\n+        newPolicyTO = policyService.read(PolicyType.ATTR_RELEASE, newPolicyTO.getKey());\n+        assertNotNull(newPolicyTO);\n+\n+        policyConf = POJOHelper.deserialize(implementationTO.getBody(), AllowedAttrReleasePolicyConf.class);\n+        assertEquals(3, policyConf.getAllowedAttributes().size());\n+        assertTrue(policyConf.getAllowedAttributes().contains(\"cn\"));\n+        assertTrue(policyConf.getAllowedAttributes().contains(\"postalCode\"));\n+        assertTrue(policyConf.getAllowedAttributes().contains(\"givenName\"));\n+\n+    }\n+\n     @Test\n     public void delete() throws IOException {\n         PullPolicyTO policy = buildPullPolicyTO();\n@@ -198,6 +439,34 @@ public void delete() throws IOException {\n         } catch (SyncopeClientException e) {\n             assertNotNull(e);\n         }\n+\n+        AuthPolicyTO authPolicy = buildAuthPolicyTO();\n+\n+        AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH, authPolicy);\n+        assertNotNull(authPolicyTO);\n+\n+        policyService.delete(PolicyType.AUTH, authPolicyTO.getKey());\n+\n+        try {\n+            policyService.read(PolicyType.AUTH, authPolicyTO.getKey());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+\n+        AccessPolicyTO accessPolicy = buildAccessPolicyTO();\n+\n+        AccessPolicyTO accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicy);\n+        assertNotNull(accessPolicyTO);\n+\n+        policyService.delete(PolicyType.ACCESS, accessPolicyTO.getKey());\n+\n+        try {\n+            policyService.read(PolicyType.ACCESS, accessPolicyTO.getKey());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n     }\n \n     @Test"}]}