{"sha":"11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjExZDhmYmM1ZjdhZjg1ZmM4YzEzNjM5MmYwN2Y0ZTVhOGJlM2YxZDI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-09T13:11:26Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-09T13:11:26Z"},"message":"Various (small) bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e40e5e678b8cfd01ea6184e64ec892aefb807ebb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e40e5e678b8cfd01ea6184e64ec892aefb807ebb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/comments","author":null,"committer":null,"parents":[{"sha":"0455468053b71224c276978cb585647f95d71275","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0455468053b71224c276978cb585647f95d71275","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0455468053b71224c276978cb585647f95d71275"}],"stats":{"total":382,"additions":208,"deletions":174},"files":[{"sha":"c81d7f4546f0397504895f794d6041367247dfff","filename":"core/pom.xml","status":"modified","additions":6,"deletions":40,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -40,10 +40,6 @@\n         <logfile.persistence>/tmp/syncope-core-persistence.log</logfile.persistence>\n         <logfile.rest>/tmp/syncope-core-rest.log</logfile.rest>\n         <logfile.test>/tmp/syncope-core-test.log</logfile.test>\n-\n-        <!-- Ugly having this version number defined here and not in the\n-             parent POM, but needed for integration tests -->\n-        <hsqldb.version>1.8.0.10</hsqldb.version>\n     </properties>\n \n     <dependencies>\n@@ -57,20 +53,23 @@\n         <dependency>\n             <groupId>javax.servlet</groupId>\n             <artifactId>servlet-api</artifactId>\n-            <scope>provided</scope>\n         </dependency>\n \n         <dependency>\n             <groupId>javax.servlet.jsp</groupId>\n             <artifactId>jsp-api</artifactId>\n-            <scope>provided</scope>\n         </dependency>\n \n         <dependency>\n             <groupId>javax.servlet</groupId>\n             <artifactId>jstl</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>bouncycastle</groupId>\n+            <artifactId>bcprov-jdk16</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>org.apache.commons</groupId>\n             <artifactId>commons-jexl</artifactId>\n@@ -151,10 +150,6 @@\n             <groupId>org.hibernate</groupId>\n             <artifactId>hibernate-entitymanager</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>org.jasypt</groupId>\n-            <artifactId>jasypt</artifactId>\n-        </dependency>\n \n         <dependency>\n             <groupId>com.forgerock.openam</groupId>\n@@ -377,13 +372,6 @@\n                                         <include>integration-test.jar</include>\n                                     </includes>\n                                 </resource>\n-                                <resource>\n-                                    <directory>${settings.localRepository}/hsqldb/hsqldb/${hsqldb.version}</directory>\n-                                    <targetPath>WEB-INF/lib</targetPath>\n-                                    <includes>\n-                                        <include>hsqldb-${hsqldb.version}.jar</include>\n-                                    </includes>\n-                                </resource>\n                             </webResources>\n                         </configuration>\n                     </execution>\n@@ -395,8 +383,7 @@\n                         </goals>\n                         <configuration>\n                             <packagingExcludes>\n-                                WEB-INF/lib/integration-test.jar,\n-                                WEB-INF/lib/hsqldb-${hsqldb.version}.jar\n+                                WEB-INF/lib/integration-test.jar\n                             </packagingExcludes>\n                         </configuration>\n                     </execution>\n@@ -470,13 +457,6 @@\n                         </goals>\n                     </execution>\n                 </executions>\n-                <dependencies>\n-                    <dependency>\n-                        <groupId>hsqldb</groupId>\n-                        <artifactId>hsqldb</artifactId>\n-                        <version>${hsqldb.version}</version>\n-                    </dependency>\n-                </dependencies>\n             </plugin>\n \n             <plugin>\n@@ -522,20 +502,6 @@\n                         </systemProperty>\n                     </systemProperties>\n                 </configuration>\n-               <!--<dependencies>\n-                    <dependency>\n-                        <groupId>commons-logging</groupId>\n-                        <artifactId>commons-logging</artifactId>\n-                    </dependency>\n-                    <dependency>\n-                        <groupId>org.slf4j</groupId>\n-                        <artifactId>slf4j-jcl</artifactId>\n-                    </dependency>\n-                    <dependency>\n-                        <groupId>log4j</groupId>\n-                        <artifactId>log4j</artifactId>\n-                    </dependency>\n-                </dependencies>-->\n                 <executions>\n                     <execution>\n                         <id>start-jetty</id>"},{"sha":"0a632343fcb562eefef5fcf4fc53dfb533fa944e","filename":"core/src/main/java/org/syncope/core/persistence/AsymmetricCipher.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAsymmetricCipher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAsymmetricCipher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAsymmetricCipher.java?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -0,0 +1,74 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.SecureRandom;\n+import javax.crypto.Cipher;\n+\n+public class AsymmetricCipher {\n+\n+    final private static String xform = \"RSA/NONE/PKCS1PADDING\";\n+    final private static String algorithm = \"RSA\";\n+\n+    public static byte[] encrypt(byte[] inpBytes, PublicKey key)\n+            throws Exception {\n+\n+        Cipher cipher = Cipher.getInstance(xform);\n+        cipher.init(Cipher.ENCRYPT_MODE, key);\n+        return cipher.doFinal(inpBytes);\n+    }\n+\n+    public static byte[] decrypt(byte[] inpBytes, PrivateKey key)\n+            throws Exception {\n+\n+        Cipher cipher = Cipher.getInstance(xform);\n+        cipher.init(Cipher.DECRYPT_MODE, key);\n+        return cipher.doFinal(inpBytes);\n+    }\n+\n+    public static KeyPair generateKeyPair() throws NoSuchAlgorithmException {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(algorithm);\n+        kpg.initialize(2048, new SecureRandom());\n+\n+        return kpg.generateKeyPair();\n+    }\n+\n+    public static byte[] serializeKeyPair(KeyPair keyPair) throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(keyPair);\n+        oos.close();\n+\n+        return baos.toByteArray();\n+    }\n+\n+    public static KeyPair deserializeKeyPair(byte[] serializedKeyPair)\n+            throws IOException, ClassNotFoundException {\n+\n+        ByteArrayInputStream bais = new ByteArrayInputStream(serializedKeyPair);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        return (KeyPair) ois.readObject();\n+    }\n+}"},{"sha":"fe6831cc385720c02d94424b4f3e7e3745d21cb5","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":3,"deletions":14,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -14,26 +14,17 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.util.HashSet;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n import java.util.Set;\n import javax.persistence.FetchType;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n import javax.persistence.ManyToMany;\n import javax.persistence.MappedSuperclass;\n-import org.syncope.core.persistence.beans.Resource;\n \n @MappedSuperclass\n public abstract class AbstractAttributable extends AbstractBaseBean {\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.AUTO)\n-    private Long id;\n-\n     /**\n      * Provisioning target resources.\n      */\n@@ -44,10 +35,6 @@ public AbstractAttributable() {\n         resources = new HashSet<Resource>();\n     }\n \n-    public Long getId() {\n-        return id;\n-    }\n-\n     public <T extends AbstractAttribute> T getAttribute(String schemaName) {\n         T result = null;\n         T attribute = null;\n@@ -94,7 +81,9 @@ public boolean removeResource(Resource resource) {\n     }\n \n     public Set<Resource> getResources() {\n-        if (this.resources == null) this.resources = new HashSet<Resource>();\n+        if (this.resources == null) {\n+            this.resources = new HashSet<Resource>();\n+        }\n         return this.resources;\n     }\n "},{"sha":"3698cf8502698d4c376c4c86262a1e91ca3431a0","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -20,6 +20,9 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n@@ -34,20 +37,18 @@\n @UniqueConstraint(columnNames = {\"name\", \"parent\"}))\n public class SyncopeRole extends AbstractAttributable {\n \n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n     private String name;\n-\n     private String parent;\n-\n     @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"roles\")\n     private Set<SyncopeUser> users;\n-\n     @ManyToMany(fetch = FetchType.LAZY)\n     private Set<Entitlement> entitlements;\n-\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n     private Set<RoleAttribute> attributes;\n-\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n     private Set<RoleDerivedAttribute> derivedAttributes;\n@@ -59,6 +60,10 @@ public SyncopeRole() {\n         derivedAttributes = new HashSet<RoleDerivedAttribute>();\n     }\n \n+    public Long getId() {\n+        return id;\n+    }\n+\n     public String getName() {\n         return name;\n     }"},{"sha":"5cf9ce05824d58e8f75eecb05c6c664660303de1","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":46,"deletions":13,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -14,23 +14,28 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n+import java.security.KeyPair;\n+import java.security.Security;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n+import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n-import javax.persistence.Transient;\n import org.apache.commons.lang.RandomStringUtils;\n-import org.jasypt.util.password.PasswordEncryptor;\n-import org.jasypt.util.password.StrongPasswordEncryptor;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.syncope.core.persistence.AsymmetricCipher;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n@@ -39,10 +44,21 @@\n @Entity\n public class SyncopeUser extends AbstractAttributable {\n \n-    @Transient\n-    final private static PasswordEncryptor passwordEncryptor =\n-            new StrongPasswordEncryptor();\n-    private String password;\n+    static {\n+        BouncyCastleProvider securityProvider = new BouncyCastleProvider();\n+        if (Security.getProvider(securityProvider.getName()) == null) {\n+            Security.addProvider(securityProvider);\n+        }\n+    }\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+    @Basic\n+    @Lob\n+    private byte[] passwordKeyPair;\n+    @Basic\n+    @Lob\n+    private byte[] password;\n     @ManyToMany(fetch = FetchType.EAGER)\n     private Set<SyncopeRole> roles;\n     @OneToMany(cascade = CascadeType.ALL,\n@@ -66,6 +82,10 @@ public SyncopeUser() {\n         derivedAttributes = new HashSet<UserDerivedAttribute>();\n     }\n \n+    public Long getId() {\n+        return id;\n+    }\n+\n     public boolean addRole(SyncopeRole role) {\n         return roles.add(role);\n     }\n@@ -85,20 +105,33 @@ public void setRoles(Set<SyncopeRole> roles) {\n         this.roles = roles;\n     }\n \n-    public boolean checkPassword(String cleanPassword) {\n-        return passwordEncryptor.checkPassword(cleanPassword, password);\n-    }\n-\n     public String getPassword() {\n-        return password;\n+        String result = null;\n+\n+        try {\n+            KeyPair kp = AsymmetricCipher.deserializeKeyPair(passwordKeyPair);\n+            result = new String(AsymmetricCipher.decrypt(password,\n+                    kp.getPrivate()));\n+        } catch (Throwable t) {\n+            log.error(\"Could not get the key pair and the password\", t);\n+        }\n+\n+        return result;\n     }\n \n     /**\n      * TODO: password policies\n      * @param password\n      */\n     public void setPassword(String password) {\n-        this.password = passwordEncryptor.encryptPassword(password);\n+        try {\n+            KeyPair kp = AsymmetricCipher.generateKeyPair();\n+            this.password = AsymmetricCipher.encrypt(password.getBytes(),\n+                    kp.getPublic());\n+            this.passwordKeyPair = AsymmetricCipher.serializeKeyPair(kp);\n+        } catch (Throwable t) {\n+            log.error(\"Could not set the password and the key pair\", t);\n+        }\n     }\n \n     @Override"},{"sha":"13aabbccb3dbe487a2e08a771b15cfbf6811b420","filename":"core/src/main/java/org/syncope/core/persistence/dao/WorkflowEntryDAO.java","status":"removed","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0455468053b71224c276978cb585647f95d71275/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FWorkflowEntryDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0455468053b71224c276978cb585647f95d71275/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FWorkflowEntryDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FWorkflowEntryDAO.java?ref=0455468053b71224c276978cb585647f95d71275","patch":"@@ -1,24 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.dao;\n-\n-import com.opensymphony.workflow.spi.hibernate.HibernateWorkflowEntry;\n-\n-public interface WorkflowEntryDAO extends DAO {\n-\n-    HibernateWorkflowEntry find(Long id);\n-\n-    void delete(Long id);\n-}"},{"sha":"78ab1f895b6db03c946b8072fcd1b70e0ba15b78","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/WorkflowEntryDAOImpl.java","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0455468053b71224c276978cb585647f95d71275/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FWorkflowEntryDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0455468053b71224c276978cb585647f95d71275/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FWorkflowEntryDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FWorkflowEntryDAOImpl.java?ref=0455468053b71224c276978cb585647f95d71275","patch":"@@ -1,39 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.dao.impl;\n-\n-import com.opensymphony.workflow.spi.hibernate.HibernateWorkflowEntry;\n-import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.dao.WorkflowEntryDAO;\n-\n-@Repository\n-public class WorkflowEntryDAOImpl extends AbstractDAOImpl\n-        implements WorkflowEntryDAO {\n-\n-    @Override\n-    public HibernateWorkflowEntry find(Long id) {\n-        return entityManager.find(HibernateWorkflowEntry.class, id);\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void delete(Long id) {\n-        HibernateWorkflowEntry workflowEntry = find(id);\n-        if (workflowEntry != null) {\n-            entityManager.remove(workflowEntry);\n-        }\n-    }\n-}"},{"sha":"4063a5a89c1ce0eccef8691194b96e9f3d5e0d98","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -47,8 +47,8 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n-import org.syncope.core.persistence.dao.WorkflowEntryDAO;\n import org.syncope.core.workflow.Constants;\n+import org.syncope.core.workflow.SpringHibernateJPAWorkflowStore;\n import org.syncope.core.workflow.WorkflowInitException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -64,8 +64,8 @@ public class UserController extends AbstractController {\n     private UserDataBinder userDataBinder;\n     @Autowired\n     private Workflow userWorkflow;\n-    @Autowired\n-    private WorkflowEntryDAO workflowEntryDAO;\n+    @Autowired(required = false)\n+    private SpringHibernateJPAWorkflowStore workflowStore;\n \n     @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n@@ -139,18 +139,8 @@ public UserTO create(HttpServletRequest request,\n             wie = e;\n \n             // Removing dirty workflow entry\n-            if (e.getWorkflowEntry() != null) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Removing dirty workflow entry \"\n-                            + e.getWorkflowEntry());\n-                }\n-\n-                workflowEntryDAO.delete(e.getWorkflowEntry().getId());\n-\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Removed dirty workflow entry \"\n-                            + e.getWorkflowEntry());\n-                }\n+            if (workflowStore != null && e.getWorkflowEntryId() != null) {\n+                workflowStore.delete(e.getWorkflowEntryId());\n             }\n         } catch (WorkflowException e) {\n             log.error(\"Unexpected workflow exception\", e);\n@@ -183,6 +173,12 @@ public UserTO create(HttpServletRequest request,\n             syncopeUser = userDataBinder.createSyncopeUser(userTO);\n         } catch (SyncopeClientCompositeErrorException e) {\n             log.error(\"Could not create for \" + userTO, e);\n+\n+            // Removing dirty workflow entry\n+            if (workflowStore != null) {\n+                workflowStore.delete(workflowId);\n+            }\n+\n             return throwCompositeException(e, response);\n         }\n         syncopeUser.setWorkflowEntryId(workflowId);\n@@ -245,8 +241,8 @@ public void delete(HttpServletResponse response,\n             log.error(\"Could not find user '\" + userId + \"'\");\n             throwNotFoundException(String.valueOf(userId), response);\n         } else {\n-            if (user.getWorkflowEntryId() != null) {\n-                workflowEntryDAO.delete(user.getWorkflowEntryId());\n+            if (workflowStore != null && user.getWorkflowEntryId() != null) {\n+                workflowStore.delete(user.getWorkflowEntryId());\n             }\n \n             syncopeUserDAO.delete(userId);"},{"sha":"c05d1ecd006b6ae4267f0afbfc8c5506d22568c6","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -52,9 +52,8 @@ public class UserDataBinder {\n     private static final Logger log = LoggerFactory.getLogger(\n             UserDataBinder.class);\n     private static final String[] ignoreProperties = {\n-        \"attributes\", \"derivedAttributes\", \"roles\", \"resources\",\n-        \"workflowEntryId\"\n-    };\n+        \"password\", \"passwordKeyPair\", \"attributes\", \"derivedAttributes\",\n+        \"roles\", \"resources\", \"workflowEntryId\"};\n     private SchemaDAO schemaDAO;\n     private AttributeValueDAO attributeValueDAO;\n     private DerivedSchemaDAO derivedSchemaDAO;\n@@ -109,6 +108,8 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n         if (userTO.getPassword() == null || userTO.getPassword().length() == 0) {\n             invalidPassword.addElement(\"Null password\");\n             compositeErrorException.addException(invalidPassword);\n+        } else {\n+            syncopeUser.setPassword(userTO.getPassword());\n         }\n \n         // 1. attributes\n@@ -256,6 +257,7 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n     public UserTO getUserTO(SyncopeUser user) {\n         UserTO userTO = new UserTO();\n         BeanUtils.copyProperties(user, userTO, ignoreProperties);\n+        userTO.setPassword(user.getPassword());\n \n         AttributeTO attributeTO = null;\n         for (AbstractAttribute attribute : user.getAttributes()) {"},{"sha":"f8114a6532ecd24ff9a9829ef35f58e14f2dd5bd","filename":"core/src/main/java/org/syncope/core/workflow/SpringHibernateJPAWorkflowStore.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSpringHibernateJPAWorkflowStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSpringHibernateJPAWorkflowStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSpringHibernateJPAWorkflowStore.java?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -15,6 +15,7 @@\n package org.syncope.core.workflow;\n \n import com.opensymphony.workflow.StoreException;\n+import com.opensymphony.workflow.spi.hibernate.HibernateWorkflowEntry;\n import com.opensymphony.workflow.spi.hibernate3.AbstractHibernateWorkflowStore;\n import java.util.Map;\n import javax.persistence.EntityManager;\n@@ -38,4 +39,12 @@ public void init(Map props) throws StoreException {\n     protected Object execute(InternalCallback action) throws StoreException {\n         return action.doInHibernate((Session) entityManager.getDelegate());\n     }\n+\n+    public void delete(Long entryId) {\n+        HibernateWorkflowEntry entry =\n+                entityManager.find(HibernateWorkflowEntry.class, entryId);\n+        if (entry != null) {\n+            entityManager.remove(entry);\n+        }\n+    }\n }"},{"sha":"08a9d31ac546c3c56e81cab3934692bb920fe28f","filename":"core/src/main/java/org/syncope/core/workflow/WorkflowInitException.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowInitException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowInitException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowInitException.java?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -15,7 +15,6 @@\n package org.syncope.core.workflow;\n \n import com.opensymphony.workflow.InvalidInputException;\n-import com.opensymphony.workflow.spi.WorkflowEntry;\n \n public class WorkflowInitException extends InvalidInputException {\n \n@@ -25,20 +24,20 @@ public enum ExceptionOperation {\n     };\n     private ExceptionOperation exceptionOperation;\n     private Long syncopeUserId;\n-    private WorkflowEntry workflowEntry;\n+    private Long workflowEntryId;\n \n     public WorkflowInitException() {\n         super();\n     }\n \n     public WorkflowInitException(ExceptionOperation exceptionOperation,\n-            Long syncopeUserId, WorkflowEntry workflowEntry) {\n+            Long syncopeUserId, Long workflowEntryId) {\n \n         super();\n \n         this.exceptionOperation = exceptionOperation;\n         this.syncopeUserId = syncopeUserId;\n-        this.workflowEntry = workflowEntry;\n+        this.workflowEntryId = workflowEntryId;\n     }\n \n     public ExceptionOperation getExceptionOperation() {\n@@ -57,19 +56,19 @@ public void setSyncopeUserId(Long syncopeUserId) {\n         this.syncopeUserId = syncopeUserId;\n     }\n \n-    public WorkflowEntry getWorkflowEntry() {\n-        return workflowEntry;\n+    public Long getWorkflowEntryId() {\n+        return workflowEntryId;\n     }\n \n-    public void setWorkflowEntry(WorkflowEntry workflowEntry) {\n-        this.workflowEntry = workflowEntry;\n+    public void setWorkflowEntryId(Long workflowEntryId) {\n+        this.workflowEntryId = workflowEntryId;\n     }\n \n     @Override\n     public String toString() {\n         return \"WorkflowInitException{\"\n                 + \"exceptionOperation=\" + exceptionOperation + \",\"\n                 + \"syncopeUserId=\" + syncopeUserId + \",\"\n-                + \"workflowEntry=\" + workflowEntry.getId() + '}';\n+                + \"workflowEntry=\" + workflowEntryId + '}';\n     }\n }"},{"sha":"34708c91b06df0390124ea380c32b97c7ed7452b","filename":"core/src/main/java/org/syncope/core/workflow/prcsiam/CheckIfUserIdAlreadyExists.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fprcsiam%2FCheckIfUserIdAlreadyExists.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fprcsiam%2FCheckIfUserIdAlreadyExists.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fprcsiam%2FCheckIfUserIdAlreadyExists.java?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -52,8 +52,8 @@ public void validate(Map transientVars, Map args, PropertySet ps)\n         List<Long> entries = workflow.query(query);\n         if (!entries.isEmpty()) {\n             WorkflowInitException initException = new WorkflowInitException();\n-            initException.setWorkflowEntry((WorkflowEntry) transientVars.get(\n-                    Constants.ENTRY));\n+            initException.setWorkflowEntryId(((WorkflowEntry) transientVars.get(\n+                    Constants.ENTRY)).getId());\n \n             // Find SyncopeUser involved in ther other worklfow instance\n             SyncopeUserDAO syncopeUserDAO = (SyncopeUserDAO) context.getBean("},{"sha":"a75119120695068a2129d8c754280bb14c6cda52","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -37,6 +37,13 @@\n     <UserSchema name=\"activationDate\" type=\"Date\" virtual=\"false\"\n                 mandatory=\"false\" multivalue=\"false\" uniquevalue=\"false\"\n                 conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n+    <UserSchema name=\"treatmentAuth\" type=\"Boolean\" virtual=\"false\"\n+                mandatory=\"true\" multivalue=\"false\" uniquevalue=\"false\"\n+                validatorClass=\"org.syncope.core.persistence.validation.AlwaysTrueValidator\"/>\n+    <UserSchema name=\"promoRCSAuth\" type=\"Boolean\" virtual=\"false\"\n+                mandatory=\"true\" multivalue=\"false\" uniquevalue=\"false\"/>\n+    <UserSchema name=\"promoThirdPartyAuth\" type=\"Boolean\" virtual=\"false\"\n+                mandatory=\"true\" multivalue=\"false\" uniquevalue=\"false\"/>\n \n     <UserDerivedSchema name=\"username\" expression=\"firstname + '.' + surname\"/>\n "},{"sha":"846d29ccbd31b4a5ebccb0d4b5f105fa172cd153","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -81,7 +81,6 @@ public void create() {\n         UserTO newUserTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n                 userTO, UserTO.class);\n         userTO.setId(newUserTO.getId());\n-        userTO.setPassword(newUserTO.getPassword());\n         userTO.setCreationTime(newUserTO.getCreationTime());\n         userTO.setToken(newUserTO.getToken());\n         userTO.setTokenExpireTime(newUserTO.getTokenExpireTime());"},{"sha":"696ffe2e181927ee56025b78e2fcafbcb1022865","filename":"pom.xml","status":"modified","additions":25,"deletions":7,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","patch":"@@ -100,6 +100,8 @@\n         <jsp-api.version>2.1</jsp-api.version>\n         <jstl.version>1.2</jstl.version>\n \n+        <bouncycastle.version>140</bouncycastle.version>\n+\n         <commons-jexl.version>2.0.1</commons-jexl.version>\n         <commons-lang.version>2.5</commons-lang.version>\n         <commons-email.version>1.2</commons-email.version>\n@@ -116,7 +118,6 @@\n         <xstream.version>1.3.1</xstream.version>\n \n         <hibernate.version>3.4.0.GA</hibernate.version>\n-        <jasypt.version>1.6</jasypt.version>\n \n         <wicket.version>1.4.7</wicket.version>\n \n@@ -162,6 +163,12 @@\n                 <version>${jstl.version}</version>\n             </dependency>\n \n+            <dependency>\n+                <groupId>bouncycastle</groupId>\n+                <artifactId>bcprov-jdk16</artifactId>\n+                <version>${bouncycastle.version}</version>\n+            </dependency>\n+\n             <dependency>\n                 <groupId>org.apache.commons</groupId>\n                 <artifactId>commons-jexl</artifactId>\n@@ -208,12 +215,6 @@\n                 <version>${hibernate.version}</version>\n             </dependency>\n \n-            <dependency>\n-                <groupId>org.jasypt</groupId>\n-                <artifactId>jasypt</artifactId>\n-                <version>${jasypt.version}</version>\n-            </dependency>\n-\n             <dependency>\n                 <groupId>org.dbunit</groupId>\n                 <artifactId>dbunit</artifactId>\n@@ -423,11 +424,28 @@\n                         </execution>\n                     </executions>\n                 </plugin>\n+                <plugin>\n+                    <groupId>org.codehaus.mojo</groupId>\n+                    <artifactId>hibernate3-maven-plugin</artifactId>\n+                    <version>2.2</version>\n+                    <dependencies>\n+                        <dependency>\n+                            <groupId>hsqldb</groupId>\n+                            <artifactId>hsqldb</artifactId>\n+                            <version>${hsqldb.version}</version>\n+                        </dependency>\n+                    </dependencies>\n+                </plugin>\n                 <plugin>\n                     <groupId>org.mortbay.jetty</groupId>\n                     <artifactId>maven-jetty-plugin</artifactId>\n                     <version>${jetty.version}</version>\n                     <dependencies>\n+                        <dependency>\n+                            <groupId>hsqldb</groupId>\n+                            <artifactId>hsqldb</artifactId>\n+                            <version>${hsqldb.version}</version>\n+                        </dependency>\n                         <dependency>\n                             <groupId>commons-logging</groupId>\n                             <artifactId>commons-logging</artifactId>"}]}