{"sha":"0bc3ee08eca1217f546a2d00ab949e6840ec1071","node_id":"C_kwDOJfYA1toAKDBiYzNlZTA4ZWNhMTIxN2Y1NDZhMmQwMGFiOTQ5ZTY4NDBlYzEwNzE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-12-16T09:40:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-12-16T09:40:00Z"},"message":"[SYNCOPE-1715] Invoking AuditService#delete to remove events","tree":{"sha":"891f2f8dbd66cb5cc00b3e19f350be7f28337201","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/891f2f8dbd66cb5cc00b3e19f350be7f28337201"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0bc3ee08eca1217f546a2d00ab949e6840ec1071","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0bc3ee08eca1217f546a2d00ab949e6840ec1071","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0bc3ee08eca1217f546a2d00ab949e6840ec1071","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0bc3ee08eca1217f546a2d00ab949e6840ec1071/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9f3c1ee5fecb2bf592302c32376454159a9c1db7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9f3c1ee5fecb2bf592302c32376454159a9c1db7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9f3c1ee5fecb2bf592302c32376454159a9c1db7"}],"stats":{"total":62,"additions":33,"deletions":29},"files":[{"sha":"f42968e23b316e16137c87633bd83759b173ca8e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0bc3ee08eca1217f546a2d00ab949e6840ec1071/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0bc3ee08eca1217f546a2d00ab949e6840ec1071/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java?ref=0bc3ee08eca1217f546a2d00ab949e6840ec1071","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.console.pages;\n \n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -33,25 +34,42 @@\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n public class Audit extends BasePage {\n \n     private static final long serialVersionUID = -1100228004207271271L;\n \n+    private final LoadableDetachableModel<List<EventCategory>> eventCategories =\n+            new LoadableDetachableModel<List<EventCategory>>() {\n+\n+        private static final long serialVersionUID = 4659376149825914247L;\n+\n+        @Override\n+        protected List<EventCategory> load() {\n+            return AuditRestClient.listEvents();\n+        }\n+    };\n+\n     public Audit(final PageParameters parameters) {\n         super(parameters);\n \n         body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n \n         List<String> events = AuditRestClient.list().stream().\n+                filter(audit -> eventCategories.getObject().stream().\n+                anyMatch(c -> audit.getType() == c.getType()\n+                && Objects.equals(audit.getCategory(), c.getCategory())\n+                && Objects.equals(audit.getSubcategory(), c.getSubcategory()))).\n                 map(audit -> AuditLoggerName.buildEvent(\n                 audit.getType(),\n                 audit.getCategory(),\n                 audit.getSubcategory(),\n                 audit.getEvent(),\n                 audit.getResult())).\n+                sorted().\n                 collect(Collectors.toList());\n \n         WebMarkupContainer content = new WebMarkupContainer(\"content\");\n@@ -62,7 +80,7 @@ public Audit(final PageParameters parameters) {\n \n         form.add(new EventCategoryPanel(\n                 \"auditPanel\",\n-                AuditRestClient.listEvents(),\n+                eventCategories.getObject(),\n                 new ListModel<>(events)) {\n \n             private static final long serialVersionUID = 6113164334533550277L;\n@@ -80,7 +98,7 @@ protected List<String> getChangeAuthRoles() {\n             @Override\n             public void onEventAction(final IEvent<?> event) {\n                 if (event.getPayload() instanceof SelectedEventsPanel.EventSelectionChanged) {\n-                    final SelectedEventsPanel.EventSelectionChanged eventSelectionChanged =\n+                    SelectedEventsPanel.EventSelectionChanged eventSelectionChanged =\n                             (SelectedEventsPanel.EventSelectionChanged) event.getPayload();\n \n                     eventSelectionChanged.getToBeRemoved().forEach(toBeRemoved -> {"},{"sha":"45477ade8298fd5e748767a6fc0379960744f4e2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AuditRestClient.java","status":"modified","additions":9,"deletions":21,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0bc3ee08eca1217f546a2d00ab949e6840ec1071/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuditRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0bc3ee08eca1217f546a2d00ab949e6840ec1071/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuditRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuditRestClient.java?ref=0bc3ee08eca1217f546a2d00ab949e6840ec1071","patch":"@@ -18,18 +18,16 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Objects;\n-import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.audit.EventCategory;\n import org.apache.syncope.common.lib.to.AuditConfTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.beans.AuditQuery;\n import org.apache.syncope.common.rest.api.service.AuditService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -52,19 +50,6 @@ public static List<AuditLoggerName> list() {\n                 collect(Collectors.toList());\n     }\n \n-    public static Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n-        Map<String, Set<AuditLoggerName>> result = new HashMap<>();\n-        list().forEach(audit -> {\n-            if (!result.containsKey(audit.getCategory())) {\n-                result.put(audit.getCategory(), new HashSet<>());\n-            }\n-\n-            result.get(audit.getCategory()).add(audit);\n-        });\n-\n-        return result;\n-    }\n-\n     public static void enableAudit(final AuditLoggerName auditLoggerName) {\n         AuditConfTO audit = new AuditConfTO();\n         audit.setKey(auditLoggerName.toAuditKey());\n@@ -73,10 +58,13 @@ public static void enableAudit(final AuditLoggerName auditLoggerName) {\n     }\n \n     public static void disableAudit(final AuditLoggerName auditLoggerName) {\n-        AuditConfTO audit = new AuditConfTO();\n-        audit.setKey(auditLoggerName.toAuditKey());\n-        audit.setActive(false);\n-        getService(AuditService.class).set(audit);\n+        try {\n+            getService(AuditService.class).delete(auditLoggerName.toAuditKey());\n+        } catch (SyncopeClientException e) {\n+            if (e.getType() != ClientExceptionType.NotFound) {\n+                LOG.error(\"Unexpected error when deleting {}\", auditLoggerName.toAuditKey(), e);\n+            }\n+        }\n     }\n \n     public static List<EventCategory> listEvents() {"},{"sha":"40858082c8109e4f5e8d410a4f3a83d77ae73a0f","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AuditLogic.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0bc3ee08eca1217f546a2d00ab949e6840ec1071/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0bc3ee08eca1217f546a2d00ab949e6840ec1071/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java?ref=0bc3ee08eca1217f546a2d00ab949e6840ec1071","patch":"@@ -120,16 +120,14 @@ public AuditConfTO read(final String key) {\n     public void set(final AuditConfTO auditTO) {\n         AuditConf audit = Optional.ofNullable(auditConfDAO.find(auditTO.getKey())).\n                 orElseGet(() -> {\n-                    AuditConf a = entityFactory.newEntity(AuditConf.class);\n-                    a.setKey(auditTO.getKey());\n-                    return a;\n+                    AuditConf ac = entityFactory.newEntity(AuditConf.class);\n+                    ac.setKey(auditTO.getKey());\n+                    return ac;\n                 });\n         audit.setActive(auditTO.isActive());\n         audit = auditConfDAO.save(audit);\n \n-        if (audit.isActive()) {\n-            setLevel(audit.getKey(), Level.OFF);\n-        }\n+        setLevel(audit.getKey(), audit.isActive() ? Level.DEBUG : Level.OFF);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_DELETE + \"')\")"}]}