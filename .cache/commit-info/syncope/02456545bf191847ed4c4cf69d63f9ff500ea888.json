{"sha":"02456545bf191847ed4c4cf69d63f9ff500ea888","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAyNDU2NTQ1YmYxOTE4NDdlZDRjNGNmNjlkNjNmOWZmNTAwZWE4ODg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-11T12:52:46Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-11T12:52:46Z"},"message":"[SYNCOPE-693][SYNCOPE-692] Changing search to work only in paginated mode and adding support for external resource browsing","tree":{"sha":"f37dd446e30388366ac3657498a65b571f256ff3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f37dd446e30388366ac3657498a65b571f256ff3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/02456545bf191847ed4c4cf69d63f9ff500ea888","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/02456545bf191847ed4c4cf69d63f9ff500ea888","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/02456545bf191847ed4c4cf69d63f9ff500ea888","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/02456545bf191847ed4c4cf69d63f9ff500ea888/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"00988759750f53f6737ef7d50e7faf63192257fa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/00988759750f53f6737ef7d50e7faf63192257fa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/00988759750f53f6737ef7d50e7faf63192257fa"}],"stats":{"total":732,"additions":623,"deletions":109},"files":[{"sha":"afc0f69560c9f9150e9c775f1b6453baf18a4842","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -71,7 +71,10 @@ public Exception fromResponse(final Response response) {\n                     : message);\n         } else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n             // 3. Map SC_BAD_REQUEST\n-            ex = new BadRequestException();\n+            String message = response.getHeaderString(RESTHeaders.ERROR_INFO);\n+            ex = StringUtils.isBlank(message)\n+                    ? new BadRequestException()\n+                    : new BadRequestException(message);\n         } else {\n             // 4. All other codes are mapped to runtime exception with HTTP code information\n             ex = new WebServiceException(String.format(\"Remote exception with status code: %s\","},{"sha":"683c0a7b3f6a80743f920fad556a197961c75467","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.client.lib.builders.ListQueryBuilder;\n import org.apache.syncope.client.lib.builders.AnyListQueryBuilder;\n import org.apache.syncope.client.lib.builders.AnySearchQueryBuilder;\n+import org.apache.syncope.client.lib.builders.ConnObjectTOListQueryBuilder;\n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n@@ -137,6 +138,16 @@ public static AnySearchQueryBuilder getAnySearchQueryBuilder() {\n         return new AnySearchQueryBuilder();\n     }\n \n+    /**\n+     * Returns a new instance of {@link ConnObjectTOListQueryBuilder}, for assisted building of some service's\n+     * {@code list()} arguments.\n+     *\n+     * @return default instance of {@link ConnObjectTOListQueryBuilder}\n+     */\n+    public static ConnObjectTOListQueryBuilder getConnObjectTOListQueryBuilder() {\n+        return new ConnObjectTOListQueryBuilder();\n+    }\n+\n     /**\n      * Creates an instance of the given service class, with configured content type and authentication.\n      *"},{"sha":"619f391213fb9fc72f256a340ad9f768f930b8e1","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/ConnObjectTOListQueryBuilder.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FConnObjectTOListQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FConnObjectTOListQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FConnObjectTOListQueryBuilder.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.builders;\n+\n+import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n+\n+public class ConnObjectTOListQueryBuilder {\n+\n+    private final ConnObjectTOListQuery instance = new ConnObjectTOListQuery();\n+\n+    public ConnObjectTOListQueryBuilder size(final Integer size) {\n+        instance.setSize(size);\n+\n+        return this;\n+    }\n+\n+    public ConnObjectTOListQueryBuilder pagedResultsCookie(final String pagedResultsCookie) {\n+        instance.setPagedResultsCookie(pagedResultsCookie);\n+\n+        return this;\n+    }\n+\n+    public ConnObjectTOListQueryBuilder orderBy(final String orderBy) {\n+        instance.setOrderBy(orderBy);\n+\n+        return this;\n+    }\n+\n+    public ConnObjectTOListQuery build() {\n+        return instance;\n+    }\n+}"},{"sha":"33e4c5df108add96b8cb7401a3db657c320cebb6","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PagedConnObjectTOResult.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPagedConnObjectTOResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPagedConnObjectTOResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPagedConnObjectTOResult.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"pagedConnObjectResult\")\n+@XmlType\n+public class PagedConnObjectTOResult extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -2832908019064402976L;\n+\n+    private URI next;\n+\n+    private final List<ConnObjectTO> result = new ArrayList<>();\n+\n+    private String pagedResultsCookie;\n+\n+    private int remainingPagedResults = -1;\n+\n+    private boolean allResultsReturned = true;\n+\n+    public URI getNext() {\n+        return next;\n+    }\n+\n+    public void setNext(final URI next) {\n+        this.next = next;\n+    }\n+\n+    /**\n+     * Returns the opaque cookie which should be used with the next paged results search request.\n+     *\n+     * @return The opaque cookie which should be used with the next paged results search request, or {@code null} if\n+     * paged results were not requested, or if there are not more pages to be returned.\n+     */\n+    public String getPagedResultsCookie() {\n+        return pagedResultsCookie;\n+    }\n+\n+    /**\n+     * @param pagedResultsCookie The opaque cookie which should be used with the next paged results search request, or\n+     * {@code null} if paged results were not requested, or if there are not more pages to be returned.\n+     */\n+    public void setPagedResultsCookie(final String pagedResultsCookie) {\n+        this.pagedResultsCookie = pagedResultsCookie;\n+    }\n+\n+    /**\n+     * Returns an estimate of the total number of remaining results to be returned in subsequent paged results search\n+     * requests.\n+     *\n+     * @return An estimate of the total number of remaining results to be returned in subsequent paged results search\n+     * requests, or {@code -1} if paged results were not requested, or if the total number of remaining results is\n+     * unknown.\n+     */\n+    public int getRemainingPagedResults() {\n+        return remainingPagedResults;\n+    }\n+\n+    /**\n+     * @param remainingPagedResults An estimate of the total number of remaining results to be returned in subsequent\n+     * paged results search requests, or {@code -1} if paged results were not requested, or if the total number of\n+     * remaining results is unknown.\n+     */\n+    public void setRemainingPagedResults(final int remainingPagedResults) {\n+        this.remainingPagedResults = remainingPagedResults;\n+    }\n+\n+    /**\n+     * Returns a flag indicating whether all the results that match a search query were returned.\n+     *\n+     * @return true if the search returned all the results that match the query, false if the returned\n+     * result is not complete, e.g. if the server returned only part of the results due to server limits, errors, etc.\n+     */\n+    public boolean isAllResultsReturned() {\n+        return allResultsReturned;\n+    }\n+\n+    /**\n+     * @param allResultsReturned Set to true if the search returned all the results that match the query. Set to false\n+     * if the returned result is not complete, e.g. if the server returned only part of the results due to server\n+     * limits, errors, etc.\n+     */\n+    public void setAllResultsReturned(final boolean allResultsReturned) {\n+        this.allResultsReturned = allResultsReturned;\n+    }\n+\n+    @XmlElementWrapper(name = \"result\")\n+    @XmlElement(name = \"item\")\n+    @JsonProperty(\"result\")\n+    public List<ConnObjectTO> getResult() {\n+        return result;\n+    }\n+\n+}"},{"sha":"406b8055d9201d671766298a3742f629e600a14a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -140,7 +140,9 @@ public final class Entitlement {\n \n     public static final String RESOURCE_DELETE = \"RESOURCE_DELETE\";\n \n-    public static final String RESOURCE_GETCONNECTOROBJECT = \"RESOURCE_GETCONNECTOROBJECT\";\n+    public static final String RESOURCE_GET_CONNOBJECT = \"RESOURCE_GET_CONNOBJECT\";\n+\n+    public static final String RESOURCE_LIST_CONNOBJECT = \"RESOURCE_LIST_CONNOBJECT\";\n \n     public static final String CONNECTOR_LIST = \"CONNECTOR_LIST\";\n "},{"sha":"32a735929224d85585431b3d90615632ca895ef2","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ConnObjectTOListQuery.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import java.io.Serializable;\n+import javax.validation.constraints.Min;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.QueryParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+public class ConnObjectTOListQuery implements Serializable {\n+\n+    private static final long serialVersionUID = -371488230250055359L;\n+\n+    private Integer size;\n+\n+    private String pagedResultsCookie;\n+\n+    private String orderBy;\n+\n+    public Integer getSize() {\n+        return size;\n+    }\n+\n+    @Min(1)\n+    @QueryParam(JAXRSService.PARAM_SIZE)\n+    @DefaultValue(\"25\")\n+    public void setSize(final Integer size) {\n+        this.size = size;\n+    }\n+\n+    public String getPagedResultsCookie() {\n+        return pagedResultsCookie;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_CONNID_PAGED_RESULTS_COOKIE)\n+    public void setPagedResultsCookie(final String pagedResultsCookie) {\n+        this.pagedResultsCookie = pagedResultsCookie;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_ORDERBY)\n+    public String getOrderBy() {\n+        return orderBy;\n+    }\n+\n+    public void setOrderBy(final String orderBy) {\n+        this.orderBy = orderBy;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"fb9cec0d224468ce97635bbb3aa556f11bcde3cc","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -30,4 +30,6 @@ public interface JAXRSService {\n \n     String PARAM_DETAILS = \"details\";\n \n+    String PARAM_CONNID_PAGED_RESULTS_COOKIE = \"connIdPagedResultsCookie\";\n+\n }"},{"sha":"14bb19f13d8b6b27625b653ea310032f55c7bce0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":25,"deletions":3,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n@@ -33,10 +34,12 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.AnyKey;\n import org.apache.syncope.common.lib.wrap.BooleanWrap;\n+import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n \n /**\n  * REST operations for external resources.\n@@ -47,16 +50,35 @@ public interface ResourceService extends JAXRSService {\n     /**\n      * Returns connector object from the external resource, for the given type and key.\n      *\n-     * @param key Name of resource to read connector object from\n+     * @param key name of resource to read connector object from\n      * @param anyTypeKey any object type\n      * @param anyKey any object key\n      * @return connector object from the external resource, for the given type and key\n      */\n     @GET\n     @Path(\"{key}/{anyTypeKey}/{anyKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ConnObjectTO readConnObject(@NotNull @PathParam(\"key\") String key,\n-            @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey, @NotNull @PathParam(\"anyKey\") Long anyKey);\n+    ConnObjectTO readConnObject(\n+            @NotNull @PathParam(\"key\") String key,\n+            @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n+            @NotNull @PathParam(\"anyKey\") Long anyKey);\n+\n+    /**\n+     * Returns a paged list of connector objects from external resource, for the given type, matching\n+     * page/size conditions.\n+     *\n+     * @param key name of resource to read connector object from\n+     * @param anyTypeKey any object type\n+     * @param listQuery query conditions\n+     * @return connector objects from the external resource, for the given type\n+     */\n+    @GET\n+    @Path(\"{key}/{anyTypeKey}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedConnObjectTOResult listConnObjects(\n+            @NotNull @PathParam(\"key\") String key,\n+            @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n+            @BeanParam ConnObjectTOListQuery listQuery);\n \n     /**\n      * Returns the resource with matching name."},{"sha":"ce2fb2ec329c0a1f20f3caea458a2ef553469753","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":63,"deletions":18,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -26,6 +26,10 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.ImmutableTriple;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -48,14 +52,17 @@\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.SearchResult;\n import org.identityconnectors.framework.common.objects.Uid;\n+import org.identityconnectors.framework.spi.SearchResultsHandler;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -172,9 +179,9 @@ public ResourceTO transform(final ExternalResource input) {\n         }, new ArrayList<ResourceTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_GETCONNECTOROBJECT + \"')\")\n-    @Transactional(readOnly = true)\n-    public ConnObjectTO readConnObject(final String resourceKey, final String anyTypeKey, final Long key) {\n+    private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n+            final String resourceKey, final String anyTypeKey) {\n+\n         ExternalResource resource = resourceDAO.find(resourceKey);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceKey + \"'\");\n@@ -188,31 +195,41 @@ public ConnObjectTO readConnObject(final String resourceKey, final String anyTyp\n             throw new NotFoundException(\"Provision on resource '\" + resourceKey + \"' for type '\" + anyTypeKey + \"'\");\n         }\n \n-        Any<?, ?, ?> any = anyType.getKind() == AnyTypeKind.USER\n-                ? userDAO.find(key)\n-                : anyType.getKind() == AnyTypeKind.ANY_OBJECT\n-                        ? anyObjectDAO.find(key)\n-                        : groupDAO.find(key);\n+        return ImmutableTriple.of(resource, anyType, provision);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n+    @Transactional(readOnly = true)\n+    public ConnObjectTO readConnObject(final String key, final String anyTypeKey, final Long anyKey) {\n+        Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n+\n+        Any<?, ?, ?> any = init.getMiddle().getKind() == AnyTypeKind.USER\n+                ? userDAO.find(anyKey)\n+                : init.getMiddle().getKind() == AnyTypeKind.ANY_OBJECT\n+                        ? anyObjectDAO.find(anyKey)\n+                        : groupDAO.find(anyKey);\n         if (any == null) {\n-            throw new NotFoundException(anyType + \" \" + key);\n+            throw new NotFoundException(init.getMiddle() + \" \" + anyKey);\n         }\n-        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n+        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(init.getRight());\n         if (connObjectKeyItem == null) {\n             throw new NotFoundException(\n-                    \"ConnObjectKey mapping for \" + anyType + \" \" + key + \" on resource '\" + resourceKey + \"'\");\n+                    \"ConnObjectKey mapping for \" + init.getMiddle() + \" \" + anyKey + \" on resource '\" + key + \"'\");\n         }\n-        String connObjectKeyValue = MappingUtils.getConnObjectKeyValue(any, provision);\n+        String connObjectKeyValue = MappingUtils.getConnObjectKeyValue(any, init.getRight());\n \n-        Connector connector = connFactory.getConnector(resource);\n+        Connector connector = connFactory.getConnector(init.getLeft());\n         ConnectorObject connectorObject = connector.getObject(\n-                provision.getObjectClass(), new Uid(connObjectKeyValue),\n-                connector.getOperationOptions(MappingUtils.getMappingItems(provision, MappingPurpose.BOTH)));\n+                init.getRight().getObjectClass(),\n+                new Uid(connObjectKeyValue),\n+                connector.getOperationOptions(MappingUtils.getMappingItems(init.getRight(), MappingPurpose.BOTH)));\n         if (connectorObject == null) {\n-            throw new NotFoundException(\"Object \" + connObjectKeyValue + \" with class \" + provision.getObjectClass()\n-                    + \" not found on resource \" + resourceKey);\n+            throw new NotFoundException(\n+                    \"Object \" + connObjectKeyValue + \" with class \" + init.getRight().getObjectClass()\n+                    + \" not found on resource \" + key);\n         }\n \n-        final Set<Attribute> attributes = connectorObject.getAttributes();\n+        Set<Attribute> attributes = connectorObject.getAttributes();\n         if (AttributeUtil.find(Uid.NAME, attributes) == null) {\n             attributes.add(connectorObject.getUid());\n         }\n@@ -223,6 +240,34 @@ public ConnObjectTO readConnObject(final String resourceKey, final String anyTyp\n         return connObjectUtils.getConnObjectTO(connectorObject);\n     }\n \n+    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_LIST_CONNOBJECT + \"')\")\n+    @Transactional(readOnly = true)\n+    public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key, final String anyTypeKey,\n+            final Integer size, final String pagedResultsCookie, final List<OrderByClause> orderBy) {\n+\n+        Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n+\n+        Connector connector = connFactory.getConnector(init.getLeft());\n+\n+        final SearchResult[] searchResult = new SearchResult[1];\n+        final List<ConnObjectTO> connObjects = new ArrayList<>();\n+        connector.search(init.getRight().getObjectClass(), null, new SearchResultsHandler() {\n+\n+            @Override\n+            public void handleResult(final SearchResult result) {\n+                searchResult[0] = result;\n+            }\n+\n+            @Override\n+            public boolean handle(final ConnectorObject connectorObject) {\n+                connObjects.add(connObjectUtils.getConnObjectTO(connectorObject));\n+                return true;\n+            }\n+        }, size, pagedResultsCookie, orderBy);\n+\n+        return ImmutablePair.of(searchResult[0], connObjects);\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public boolean check(final ResourceTO resourceTO) {"},{"sha":"5c61a22a679b00d304fa3a4f8de1b9a27cf1cdd5","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -558,7 +558,7 @@ under the License.\n                 location=\"${connid.location}\"\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" \n-                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"blockSize\",\"displayName\":\"Block Size\",\"helpMessage\":\"The maximum number of accounts that can be in a block when retrieving accounts in blocks.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"useBlocks\",\"displayName\":\"Use Blocks\",\"helpMessage\":\"When performing operations on large numbers of accounts, the accounts are processed in blocks to reduce the amount of memory used by the operation. Select this option to process accounts in blocks.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[false]},{\"schema\":{\"name\":\"usePagedResultControl\",\"displayName\":\"Use Paged Result Control\",\"helpMessage\":\"When enabled, the LDAP Paged Results control is preferred over the VLV control when retrieving accounts.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]}]'/>\n+                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]}]'/>\n   <ConnInstance_capabilities ConnInstance_id=\"105\" capability=\"ONE_PHASE_CREATE\"/>\n   <ConnInstance_capabilities ConnInstance_id=\"105\" capability=\"ONE_PHASE_UPDATE\"/>\n   <ConnInstance_capabilities ConnInstance_id=\"105\" capability=\"ONE_PHASE_DELETE\"/>"},{"sha":"023b840307a8d4d8b1f19d5b870296156b7ded5f","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -111,7 +111,7 @@ under the License.\n                 location=\"${connid.location}\"\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" \n-                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"blockSize\",\"displayName\":\"Block Size\",\"helpMessage\":\"The maximum number of accounts that can be in a block when retrieving accounts in blocks.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"useBlocks\",\"displayName\":\"Use Blocks\",\"helpMessage\":\"When performing operations on large numbers of accounts, the accounts are processed in blocks to reduce the amount of memory used by the operation. Select this option to process accounts in blocks.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[false]},{\"schema\":{\"name\":\"usePagedResultControl\",\"displayName\":\"Use Paged Result Control\",\"helpMessage\":\"When enabled, the LDAP Paged Results control is preferred over the VLV control when retrieving accounts.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"truemaintainLdapGroupMembership\"]}]'/>\n+                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"truemaintainLdapGroupMembership\"]}]'/>\n   <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"ONE_PHASE_CREATE\"/>\n   <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"ONE_PHASE_UPDATE\"/>\n   <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"ONE_PHASE_DELETE\"/>"},{"sha":"1fdbcb53166629355dcaf0689bbc21bd36a07043","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java","status":"modified","additions":41,"deletions":12,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -23,12 +23,14 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.ResultsHandler;\n import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.identityconnectors.framework.common.objects.Uid;\n@@ -91,7 +93,16 @@ void delete(PropagationMode propagationMode, ObjectClass objectClass,\n             Uid uid, OperationOptions options, Set<String> propagationAttempted);\n \n     /**\n-     * Sync users / groups from a connector instance.\n+     * Fetches all remote objects (for use during full reconciliation).\n+     *\n+     * @param objectClass ConnId's object class.\n+     * @param handler to be used to handle deltas.\n+     * @param options ConnId's OperationOptions.\n+     */\n+    void getAllObjects(ObjectClass objectClass, SyncResultsHandler handler, OperationOptions options);\n+\n+    /**\n+     * Sync remote objects from a connector instance.\n      *\n      * @param objectClass ConnId's object class\n      * @param token to be passed to the underlying connector\n@@ -129,28 +140,46 @@ void delete(PropagationMode propagationMode, ObjectClass objectClass,\n      * @param options ConnId's OperationOptions\n      * @return ConnId's connector object for given uid\n      */\n-    ConnectorObject getObject(PropagationMode propagationMode, ResourceOperation operationType, ObjectClass objectClass,\n-            Uid uid, OperationOptions options);\n+    ConnectorObject getObject(\n+            PropagationMode propagationMode,\n+            ResourceOperation operationType,\n+            ObjectClass objectClass,\n+            Uid uid,\n+            OperationOptions options);\n \n     /**\n      * Search for remote objects.\n      *\n      * @param objectClass ConnId's object class\n      * @param filter search filter\n+     * @param handler class responsible for working with the objects returned from the search; may be null.\n      * @param options ConnId's OperationOptions\n-     * @return ConnId's connector objects matching the given filter\n      */\n-    List<ConnectorObject> search(ObjectClass objectClass, Filter filter, OperationOptions options);\n+    void search(\n+            ObjectClass objectClass,\n+            Filter filter,\n+            ResultsHandler handler,\n+            OperationOptions options);\n \n     /**\n-     * Get remote object used by the propagation manager in order to choose for a create (object doesn't exist) or an\n-     * update (object exists).\n+     * Search for remote objects.\n      *\n-     * @param objectClass ConnId's object class.\n-     * @param handler to be used to handle deltas.\n-     * @param options ConnId's OperationOptions.\n-     */\n-    void getAllObjects(ObjectClass objectClass, SyncResultsHandler handler, OperationOptions options);\n+     * @param objectClass ConnId's object class\n+     * @param filter search filter\n+     * @param handler class responsible for working with the objects returned from the search; may be null.\n+     * @param pageSize requested page results page size\n+     * @param pagedResultsCookie an opaque cookie which is used by the connector to track its position in the set of\n+     * query results\n+     * @param orderBy the sort keys which should be used for ordering the {@link ConnectorObject} returned by\n+     * search request\n+     */\n+    void search(\n+            ObjectClass objectClass,\n+            Filter filter,\n+            ResultsHandler handler,\n+            int pageSize,\n+            String pagedResultsCookie,\n+            List<OrderByClause> orderBy);\n \n     /**\n      * Read attribute for a given connector object."},{"sha":"40ff43284af0a9f64346c55761df573446bcbcb4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnIdBundleManagerImpl.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -267,13 +267,10 @@ public ConfigurationProperties getConfigurationProperties(final ConnectorInfo in\n         }\n \n         // create default configuration\n-        final APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n-        if (apiConfig == null) {\n-            throw new NotFoundException(\"Default API configuration\");\n-        }\n+        APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n \n         // retrieve the ConfigurationProperties.\n-        final ConfigurationProperties properties = apiConfig.getConfigurationProperties();\n+        ConfigurationProperties properties = apiConfig.getConfigurationProperties();\n         if (properties == null) {\n             throw new NotFoundException(\"Configuration properties\");\n         }"},{"sha":"3f53f2bc057ce1d608a1dfa0b369f904a7cb4e55","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":86,"deletions":47,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -27,7 +27,8 @@\n import java.util.Set;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n-import javax.ws.rs.NotFoundException;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.PropagationMode;\n@@ -38,6 +39,7 @@\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n@@ -54,12 +56,15 @@\n import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.ResultsHandler;\n+import org.identityconnectors.framework.common.objects.SearchResult;\n+import org.identityconnectors.framework.common.objects.SortKey;\n import org.identityconnectors.framework.common.objects.SyncDeltaBuilder;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.spi.SearchResultsHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -69,6 +74,8 @@ public class ConnectorFacadeProxy implements Connector {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ConnectorFacadeProxy.class);\n \n+    private static final Integer DEFAULT_PAGE_SIZE = 100;\n+\n     /**\n      * Connector facade wrapped instance.\n      */\n@@ -100,6 +107,8 @@ public ConnectorFacadeProxy(final ConnInstance connInstance) {\n \n         // create default configuration\n         APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n+        // enable filtered results handler in validation mode\n+        apiConfig.getResultsHandlerConfiguration().setFilteredResultsHandlerInValidationMode(true);\n \n         // set connector configuration according to conninstance's\n         ConfigurationProperties properties = apiConfig.getConfigurationProperties();\n@@ -122,9 +131,6 @@ public ConnectorFacadeProxy(final ConnInstance connInstance) {\n \n         // gets new connector, with the given configuration\n         connector = ConnectorFacadeFactory.getInstance().newInstance(apiConfig);\n-        if (connector == null) {\n-            throw new NotFoundException(\"Connector\");\n-        }\n \n         // make sure we have set up the Configuration properly\n         connector.validate();\n@@ -308,37 +314,34 @@ public ConnectorObject getObject(final ObjectClass objectClass, final Uid uid, f\n     public ConnectorObject getObject(final PropagationMode propagationMode, final ResourceOperation operationType,\n             final ObjectClass objectClass, final Uid uid, final OperationOptions options) {\n \n-        Future<ConnectorObject> future = null;\n+        boolean hasCapablities = false;\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n             if (operationType == null) {\n-                future = asyncFacade.getObject(connector, objectClass, uid, options);\n+                hasCapablities = true;\n             } else {\n                 switch (operationType) {\n                     case CREATE:\n-                        if (propagationMode == null || (propagationMode == PropagationMode.ONE_PHASE\n-                                ? activeConnInstance.getCapabilities().\n-                                contains(ConnectorCapability.ONE_PHASE_CREATE)\n-                                : activeConnInstance.getCapabilities().\n-                                contains(ConnectorCapability.TWO_PHASES_CREATE))) {\n-\n-                            future = asyncFacade.getObject(connector, objectClass, uid, options);\n-                        }\n+                        hasCapablities = propagationMode == null || (propagationMode == PropagationMode.ONE_PHASE\n+                                ? activeConnInstance.getCapabilities().contains(ConnectorCapability.ONE_PHASE_CREATE)\n+                                : activeConnInstance.getCapabilities().contains(ConnectorCapability.TWO_PHASES_CREATE));\n                         break;\n-                    case UPDATE:\n-                        if (propagationMode == null || (propagationMode == PropagationMode.ONE_PHASE\n-                                ? activeConnInstance.getCapabilities().\n-                                contains(ConnectorCapability.ONE_PHASE_UPDATE)\n-                                : activeConnInstance.getCapabilities().\n-                                contains(ConnectorCapability.TWO_PHASES_UPDATE))) {\n \n-                            future = asyncFacade.getObject(connector, objectClass, uid, options);\n-                        }\n+                    case UPDATE:\n+                        hasCapablities = propagationMode == null || (propagationMode == PropagationMode.ONE_PHASE\n+                                ? activeConnInstance.getCapabilities().contains(ConnectorCapability.ONE_PHASE_UPDATE)\n+                                : activeConnInstance.getCapabilities().contains(ConnectorCapability.TWO_PHASES_UPDATE));\n                         break;\n+\n                     default:\n-                        future = asyncFacade.getObject(connector, objectClass, uid, options);\n+                        hasCapablities = true;\n                 }\n             }\n+        }\n+\n+        Future<ConnectorObject> future = null;\n+        if (hasCapablities) {\n+            future = asyncFacade.getObject(connector, objectClass, uid, options);\n         } else {\n             LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n                     activeConnInstance.getCapabilities());\n@@ -361,23 +364,6 @@ public ConnectorObject getObject(final PropagationMode propagationMode, final Re\n         }\n     }\n \n-    @Override\n-    public List<ConnectorObject> search(\n-            final ObjectClass objectClass, final Filter filter, final OperationOptions options) {\n-\n-        final List<ConnectorObject> result = new ArrayList<>();\n-\n-        search(objectClass, filter, new ResultsHandler() {\n-\n-            @Override\n-            public boolean handle(final ConnectorObject obj) {\n-                return result.add(obj);\n-            }\n-        }, options);\n-\n-        return result;\n-    }\n-\n     @Override\n     public void getAllObjects(\n             final ObjectClass objectClass, final SyncResultsHandler handler, final OperationOptions options) {\n@@ -509,20 +495,73 @@ public void test() {\n         }\n     }\n \n-    private void search(\n+    @Override\n+    public void search(\n             final ObjectClass objectClass,\n             final Filter filter,\n             final ResultsHandler handler,\n             final OperationOptions options) {\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n-            connector.search(objectClass, filter, handler, options);\n+            if (options.getPageSize() == null && options.getPagedResultsCookie() == null) {\n+                OperationOptionsBuilder builder = new OperationOptionsBuilder(options);\n+                builder.setPageSize(DEFAULT_PAGE_SIZE);\n+\n+                final String[] cookies = new String[] { null };\n+                do {\n+                    if (cookies[0] != null) {\n+                        builder.setPagedResultsCookie(cookies[0]);\n+                    }\n+\n+                    connector.search(objectClass, filter, new SearchResultsHandler() {\n+\n+                        @Override\n+                        public void handleResult(final SearchResult result) {\n+                            if (handler instanceof SearchResultsHandler) {\n+                                SearchResultsHandler.class.cast(handler).handleResult(result);\n+                            }\n+                            cookies[0] = result.getPagedResultsCookie();\n+                        }\n+\n+                        @Override\n+                        public boolean handle(final ConnectorObject connectorObject) {\n+                            return handler.handle(connectorObject);\n+                        }\n+                    }, builder.build());\n+                } while (cookies[0] != null);\n+            } else {\n+                connector.search(objectClass, filter, handler, options);\n+            }\n         } else {\n             LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n                     activeConnInstance.getCapabilities());\n         }\n     }\n \n+    @Override\n+    public void search(\n+            final ObjectClass objectClass,\n+            final Filter filter,\n+            final ResultsHandler handler,\n+            final int pageSize,\n+            final String pagedResultsCookie,\n+            final List<OrderByClause> orderBy) {\n+\n+        OperationOptionsBuilder builder = new OperationOptionsBuilder().setPageSize(pageSize);\n+        if (pagedResultsCookie != null) {\n+            builder.setPagedResultsCookie(pagedResultsCookie);\n+        }\n+        builder.setSortKeys(CollectionUtils.collect(orderBy, new Transformer<OrderByClause, SortKey>() {\n+\n+            @Override\n+            public SortKey transform(final OrderByClause clause) {\n+                return new SortKey(clause.getField(), clause.getDirection() == OrderByClause.Direction.ASC);\n+            }\n+        }, new ArrayList<SortKey>(orderBy.size())));\n+\n+        search(objectClass, filter, handler, builder.build());\n+    }\n+\n     @Override\n     public ConnInstance getActiveConnInstance() {\n         return activeConnInstance;\n@@ -533,9 +572,9 @@ public OperationOptions getOperationOptions(final Collection<? extends MappingIt\n         // -------------------------------------\n         // Ask just for mapped attributes\n         // -------------------------------------\n-        final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n+        OperationOptionsBuilder builder = new OperationOptionsBuilder();\n \n-        final Set<String> attrsToGet = new HashSet<>();\n+        Set<String> attrsToGet = new HashSet<>();\n         attrsToGet.add(Name.NAME);\n         attrsToGet.add(Uid.NAME);\n         attrsToGet.add(OperationalAttributes.ENABLE_NAME);\n@@ -544,17 +583,17 @@ public OperationOptions getOperationOptions(final Collection<? extends MappingIt\n             attrsToGet.add(item.getExtAttrName());\n         }\n \n-        oob.setAttributesToGet(attrsToGet);\n+        builder.setAttributesToGet(attrsToGet);\n         // -------------------------------------\n \n-        return oob.build();\n+        return builder.build();\n     }\n \n     private Object getPropertyValue(final String propType, final List<?> values) {\n         Object value = null;\n \n         try {\n-            final Class<?> propertySchemaClass = ClassUtils.forName(propType, ClassUtils.getDefaultClassLoader());\n+            Class<?> propertySchemaClass = ClassUtils.forName(propType, ClassUtils.getDefaultClassLoader());\n \n             if (GuardedString.class.equals(propertySchemaClass)) {\n                 value = new GuardedString(values.get(0).toString().toCharArray());"},{"sha":"6fe699b3591e56fdc60ebe30b3aaff64ccca3968","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -55,6 +55,7 @@\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.identityconnectors.framework.common.objects.ResultsHandler;\n import org.identityconnectors.framework.common.objects.filter.EqualsFilter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -116,9 +117,18 @@ public Long findMatchingAnyKey(\n \n         AnyUtils anyUtils = anyUtilsFactory.getInstance(anyType.getKind());\n \n-        List<ConnectorObject> found = connector.search(provision.getObjectClass(),\n-                new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                        MappingUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)));\n+        final List<ConnectorObject> found = new ArrayList<>();\n+        connector.search(\n+                provision.getObjectClass(),\n+                new EqualsFilter(new Name(name)),\n+                new ResultsHandler() {\n+\n+                    @Override\n+                    public boolean handle(final ConnectorObject obj) {\n+                        return found.add(obj);\n+                    }\n+                },\n+                connector.getOperationOptions(MappingUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", provision.getObjectClass(), resource, name);"},{"sha":"408fb04744fdb0da3e51aff95962d315589b1e8e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -21,24 +21,32 @@\n import java.net.URI;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.AnyKey;\n import org.apache.syncope.common.lib.wrap.BooleanWrap;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.core.logic.AbstractResourceAssociator;\n import org.apache.syncope.core.logic.AnyObjectLogic;\n import org.apache.syncope.core.logic.ResourceLogic;\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.logic.UserLogic;\n+import org.identityconnectors.framework.common.objects.SearchResult;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n@@ -91,6 +99,36 @@ public ConnObjectTO readConnObject(final String key, final String anyTypeKey, fi\n         return logic.readConnObject(key, anyTypeKey, anyKey);\n     }\n \n+    @Override\n+    public PagedConnObjectTOResult listConnObjects(\n+            final String key, final String anyTypeKey, final ConnObjectTOListQuery listQuery) {\n+\n+        Pair<SearchResult, List<ConnObjectTO>> list = logic.listConnObjects(key, anyTypeKey,\n+                listQuery.getSize(), listQuery.getPagedResultsCookie(), getOrderByClauses(listQuery.getOrderBy()));\n+\n+        PagedConnObjectTOResult result = new PagedConnObjectTOResult();\n+        if (list.getLeft() != null) {\n+            result.setAllResultsReturned(list.getLeft().isAllResultsReturned());\n+            result.setPagedResultsCookie(list.getLeft().getPagedResultsCookie());\n+            result.setRemainingPagedResults(list.getLeft().getRemainingPagedResults());\n+        }\n+        result.getResult().addAll(list.getRight());\n+\n+        UriBuilder builder = uriInfo.getAbsolutePathBuilder();\n+        MultivaluedMap<String, String> queryParams = uriInfo.getQueryParameters();\n+        for (Map.Entry<String, List<String>> queryParam : queryParams.entrySet()) {\n+            builder = builder.queryParam(queryParam.getKey(), queryParam.getValue().toArray());\n+        }\n+\n+        if (StringUtils.isNotBlank(result.getPagedResultsCookie())) {\n+            result.setNext(builder.\n+                    replaceQueryParam(PARAM_CONNID_PAGED_RESULTS_COOKIE, result.getPagedResultsCookie()).\n+                    build());\n+        }\n+\n+        return result;\n+    }\n+\n     @Override\n     public BooleanWrap check(final ResourceTO resourceTO) {\n         BooleanWrap result = new BooleanWrap();"},{"sha":"99aa93bb4717a65ffa9af034fb33ee878027944c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ResourceITCase.java","status":"modified","additions":79,"deletions":15,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -26,16 +26,24 @@\n import static org.junit.Assert.fail;\n \n import java.security.AccessControlException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.builders.ConnObjectTOListQueryBuilder;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -501,6 +509,77 @@ public void bulkAction() {\n         }\n     }\n \n+    @Test\n+    public void anonymous() {\n+        ResourceService unauthenticated = clientFactory.createAnonymous().getService(ResourceService.class);\n+        try {\n+            unauthenticated.list();\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        ResourceService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).\n+                getService(ResourceService.class);\n+        assertFalse(anonymous.list().isEmpty());\n+    }\n+\n+    @Test\n+    public void listConnObjects() {\n+        List<Long> groupKeys = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            GroupTO group = GroupITCase.getSampleTO(\"group\");\n+            group.getResources().add(RESOURCE_NAME_LDAP);\n+            group = createGroup(group);\n+            groupKeys.add(group.getKey());\n+        }\n+\n+        int totalRead = 0;\n+        Set<String> read = new HashSet<>();\n+        try {\n+            ConnObjectTOListQueryBuilder builder = SyncopeClient.getConnObjectTOListQueryBuilder().size(10);\n+            PagedConnObjectTOResult list;\n+            do {\n+                list = null;\n+\n+                boolean succeeded = false;\n+                // needed because ApacheDS seems to randomly fail when searching with cookie\n+                for (int i = 0; i < 5 && !succeeded; i++) {\n+                    try {\n+                        list = resourceService.listConnObjects(\n+                                RESOURCE_NAME_LDAP,\n+                                AnyTypeKind.GROUP.name(),\n+                                builder.build());\n+                        succeeded = true;\n+                    } catch (SyncopeClientException e) {\n+                        assertEquals(ClientExceptionType.ConnectorException, e.getType());\n+                    }\n+                }\n+                assertNotNull(list);\n+\n+                totalRead += list.getResult().size();\n+                CollectionUtils.collect(list.getResult(), new Transformer<ConnObjectTO, String>() {\n+\n+                    @Override\n+                    public String transform(final ConnObjectTO input) {\n+                        return input.getPlainAttrMap().get(\"__NAME__\").getValues().get(0);\n+                    }\n+                }, read);\n+\n+                if (list.getPagedResultsCookie() != null) {\n+                    builder.pagedResultsCookie(list.getPagedResultsCookie());\n+                }\n+            } while (list.getPagedResultsCookie() != null);\n+            \n+            assertEquals(totalRead, read.size());\n+            assertTrue(totalRead >= 10);\n+        } finally {\n+            for (Long key : groupKeys) {\n+                groupService.delete(key);\n+            }\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE360() {\n         final String name = \"SYNCOPE360-\" + getUUIDString();\n@@ -565,21 +644,6 @@ public void issueSYNCOPE418() {\n         }\n     }\n \n-    @Test\n-    public void anonymous() {\n-        ResourceService unauthenticated = clientFactory.createAnonymous().getService(ResourceService.class);\n-        try {\n-            unauthenticated.list();\n-            fail();\n-        } catch (AccessControlException e) {\n-            assertNotNull(e);\n-        }\n-\n-        ResourceService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).\n-                getService(ResourceService.class);\n-        assertFalse(anonymous.list().isEmpty());\n-    }\n-\n     @Test\n     public void issueSYNCOPE493() {\n         // create resource with attribute mapping set to NONE and check its propagation"},{"sha":"a1e03ed09067a6203be154a9aa130393f1ed95a5","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02456545bf191847ed4c4cf69d63f9ff500ea888/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02456545bf191847ed4c4cf69d63f9ff500ea888/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=02456545bf191847ed4c4cf69d63f9ff500ea888","patch":"@@ -319,11 +319,11 @@ under the License.\n   <properties>\n     <syncope.version>${project.version}</syncope.version>\n \n-    <connid.version>1.4.1.0</connid.version>\n+    <connid.version>1.4.2.0-SNAPSHOT</connid.version>\n     <connid.soap.version>1.4.0-SNAPSHOT</connid.soap.version>\n     <connid.database.version>2.2.3-SNAPSHOT</connid.database.version>\n     <connid.csvdir.version>0.8.2</connid.csvdir.version>\n-    <connid.ldap.version>1.4.0</connid.ldap.version>\n+    <connid.ldap.version>1.5.0-SNAPSHOT</connid.ldap.version>\n     <connid.ad.version>1.2.3</connid.ad.version>\n \n     <cxf.version>3.1.3-SNAPSHOT</cxf.version>"}]}