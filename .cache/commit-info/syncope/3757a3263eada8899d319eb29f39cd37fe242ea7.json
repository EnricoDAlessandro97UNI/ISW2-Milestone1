{"sha":"3757a3263eada8899d319eb29f39cd37fe242ea7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM3NTdhMzI2M2VhZGE4ODk5ZDMxOWViMjlmMzljZDM3ZmUyNDJlYTc=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-09-23T15:16:37Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-09-23T15:16:37Z"},"message":"Into ConnInstanceLoader I modified properties overriding to correct a little bug about skipping existing properties.\nI made some modification into the console: overridden property is required if property schema is required.\nFurther, bean registration is required just for resources. Schema names retrieving is performed just instantiating a ConnectorFacadeProxy ad-hoc.\n\nFixes issue 153\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247120 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"59a420fdf3e896ab3834934200c0be146f3343c4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/59a420fdf3e896ab3834934200c0be146f3343c4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3757a3263eada8899d319eb29f39cd37fe242ea7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3757a3263eada8899d319eb29f39cd37fe242ea7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3757a3263eada8899d319eb29f39cd37fe242ea7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3757a3263eada8899d319eb29f39cd37fe242ea7/comments","author":null,"committer":null,"parents":[{"sha":"02c3fe813742aec8694c1cdb354cd1bbfbd84490","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/02c3fe813742aec8694c1cdb354cd1bbfbd84490","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/02c3fe813742aec8694c1cdb354cd1bbfbd84490"}],"stats":{"total":1221,"additions":948,"deletions":273},"files":[{"sha":"6ff8b644997eaab7dd5043d835c5780afe630910","filename":"client/src/main/java/org/syncope/client/to/ResourceTO.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -15,13 +15,19 @@\n package org.syncope.client.to;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+\n import org.syncope.client.AbstractBaseBean;\n+import org.syncope.types.ConnConfProperty;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.TraceLevel;\n \n public class ResourceTO extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -9193551354041698963L;\n+\n     /**\n      * The resource identifier is the name.\n      */\n@@ -57,8 +63,11 @@ public class ResourceTO extends AbstractBaseBean {\n \n     private Long passwordPolicy;\n \n+    private Set<ConnConfProperty> connectorConfigurationProperties;\n+\n     public ResourceTO() {\n         mappings = new ArrayList<SchemaMappingTO>();\n+        connectorConfigurationProperties = new HashSet<ConnConfProperty>();\n         optionalPropagationMode = PropagationMode.ASYNC;\n         createTraceLevel = TraceLevel.ALL;\n         deleteTraceLevel = TraceLevel.ALL;\n@@ -154,4 +163,14 @@ public Long getPasswordPolicy() {\n     public void setPasswordPolicy(Long passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n+\n+    public Set<ConnConfProperty> getConnectorConfigurationProperties() {\n+        return connectorConfigurationProperties;\n+    }\n+\n+    public void setConnectorConfigurationProperties(\n+            final Set<ConnConfProperty> connectorConfigurationProperties) {\n+        this.connectorConfigurationProperties =\n+                connectorConfigurationProperties;\n+    }\n }"},{"sha":"c5bfc0eea4c3112c73727829109030a73b476cbd","filename":"client/src/main/java/org/syncope/types/ConnConfProperty.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConnConfProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConnConfProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConnConfProperty.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -18,10 +18,14 @@\n \n public class ConnConfProperty extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -8391413960221862238L;\n+\n     private ConnConfPropSchema schema;\n \n     private String value;\n \n+    private boolean overridable;\n+\n     public ConnConfPropSchema getSchema() {\n         return schema;\n     }\n@@ -37,4 +41,12 @@ public String getValue() {\n     public void setValue(String value) {\n         this.value = value;\n     }\n+\n+    public boolean isOverridable() {\n+        return overridable;\n+    }\n+\n+    public void setOverridable(boolean overridable) {\n+        this.overridable = overridable;\n+    }\n }"},{"sha":"199e7c09262bb925e4ae83faa510addb9de1b372","filename":"console/src/main/java/org/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -21,6 +21,7 @@\n import java.util.EnumSet;\n import java.util.HashSet;\n import java.util.List;\n+\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n@@ -43,13 +44,13 @@\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.types.ConnConfProperty;\n import org.syncope.console.rest.ConnectorRestClient;\n import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.syncope.console.wicket.markup.html.form.FieldPanel;\n import org.syncope.types.ConnConfPropSchema;\n+import org.syncope.types.ConnConfProperty;\n import org.syncope.types.ConnectorCapability;\n \n /**\n@@ -112,7 +113,7 @@ protected List<ConnConfProperty> load() {\n                             selectedBundleTO.setBundleName(\n                                     connectorTO.getBundleName());\n                             selectedBundleTO.setVersion(connectorTO.getVersion());\n-                            result = new ArrayList(\n+                            result = new ArrayList<ConnConfProperty>(\n                                     connectorTO.getConfiguration());\n                         }\n                         return result;\n@@ -251,13 +252,18 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                         new PropertyModel<String>(property, \"value\"),\n                         true).setRequired(property.getSchema().isRequired()).\n                         setTitle(property.getSchema().getHelpMessage());\n-\n                 if (property.getSchema().isRequired()) {\n                     field.addRequiredLabel();\n                 }\n \n                 item.add(field);\n \n+                item.add(new AjaxCheckBoxPanel(\n+                        \"connPropAttrOverridable\",\n+                        \"Overridable\",\n+                        new PropertyModel<Boolean>(property, \"overridable\"),\n+                        true).setTitle(\"Overridable\"));\n+\n                 connectorTO.getConfiguration().add(property);\n             }\n         };"},{"sha":"3edc0b24be62c065175cf43d27a2a6857cc8810f","filename":"console/src/main/java/org/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":111,"deletions":5,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -16,9 +16,13 @@\n  */\n package org.syncope.console.pages;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.IAjaxCallDecorator;\n import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n@@ -28,6 +32,7 @@\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.ChoiceRenderer;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.list.ListItem;\n@@ -51,6 +56,7 @@\n import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.syncope.console.wicket.markup.html.form.FieldPanel;\n+import org.syncope.types.ConnConfProperty;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.SourceMappingType;\n import org.syncope.types.TraceLevel;\n@@ -79,6 +85,10 @@ public class ResourceModalPage extends BaseModalPage {\n \n     private WebMarkupContainer mappingContainer;\n \n+    private WebMarkupContainer connectorPropertiesContainer;\n+\n+    private Set<ConnConfProperty> overridableConnectorProperties;\n+\n     private List<String> resourceSchemaNames;\n \n     public ResourceModalPage(final Resources basePage, final ModalWindow window,\n@@ -116,8 +126,26 @@ protected List<SourceMappingType> load() {\n                         return Arrays.asList(SourceMappingType.values());\n                     }\n                 };\n+        final IModel<List<ConnConfProperty>> connectorPropertiesModel =\n+                new LoadableDetachableModel<List<ConnConfProperty>>() {\n+\n+                    private static final long serialVersionUID =\n+                            5275935387613157437L;\n \n-        updateResourceSchemaNames(resourceTO.getConnectorId());\n+                    @Override\n+                    protected List<ConnConfProperty> load() {\n+                        Set<ConnConfProperty> props =\n+                                resourceTO.getConnectorConfigurationProperties();\n+\n+                        if (props == null || props.isEmpty() || createFlag) {\n+                            props = overridableConnectorProperties;\n+                        }\n+                        return new ArrayList<ConnConfProperty>(props);\n+                    }\n+                };\n+\n+        updateResourceSchemaNames(resourceTO);\n+        updateConnectorProperties(resourceTO.getConnectorId());\n \n         final ConnInstanceTO connectorTO = new ConnInstanceTO();\n         if (!createFlag) {\n@@ -184,6 +212,11 @@ protected List<SourceMappingType> load() {\n         mappingContainer.setOutputMarkupId(true);\n         form.add(mappingContainer);\n \n+        connectorPropertiesContainer =\n+                new WebMarkupContainer(\"connectorPropertiesContainer\");\n+        connectorPropertiesContainer.setOutputMarkupId(true);\n+        form.add(connectorPropertiesContainer);\n+\n         final AjaxDropDownChoicePanel<ConnInstanceTO> connector =\n                 new AjaxDropDownChoicePanel<ConnInstanceTO>(\"connector\",\n                 getString(\"connector\"),\n@@ -454,6 +487,61 @@ protected void onError(AjaxRequestTarget target, Form<?> form) {\n         addSchemaMappingBtn.setEnabled(!createFlag);\n         mappingContainer.add(addSchemaMappingBtn);\n \n+        /*\n+         * the list of overridable connector properties \n+         */\n+        connectorPropertiesContainer.add(new ListView<ConnConfProperty>(\n+                \"connectorProperties\", connectorPropertiesModel) {\n+\n+            private static final long serialVersionUID = 9101744072914090143L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<ConnConfProperty> item) {\n+                final ConnConfProperty property = item.getModelObject();\n+\n+                final Label label = new Label(\"connPropAttrSchema\",\n+                        property.getSchema().getDisplayName() == null\n+                        || property.getSchema().getDisplayName().isEmpty()\n+                        ? property.getSchema().getName()\n+                        : property.getSchema().getDisplayName());\n+\n+                item.add(label);\n+\n+                final FieldPanel field = new AjaxTextFieldPanel(\n+                        \"connPropAttrValue\",\n+                        label.getDefaultModelObjectAsString(),\n+                        new PropertyModel<String>(property, \"value\"),\n+                        false).setRequired(property.getSchema().isRequired()).\n+                        setTitle(property.getSchema().getHelpMessage());\n+\n+                if (property.getSchema().isRequired()) {\n+                    field.addRequiredLabel();\n+                }\n+\n+                field.getField().add(\n+                        new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+                            private static final long serialVersionUID =\n+                                    -1107858522700306810L;\n+\n+                            @Override\n+                            protected void onUpdate(AjaxRequestTarget target) {\n+                                mappings.removeAll();\n+                                addSchemaMappingBtn.setEnabled(\n+                                        resourceTO.getConnectorId() != null\n+                                        && resourceTO.getConnectorId() > 0);\n+\n+                                updateResourceSchemaNames(resourceTO);\n+\n+                                target.addComponent(mappingContainer);\n+                            }\n+                        });\n+\n+                item.add(field);\n+                resourceTO.getConnectorConfigurationProperties().add(property);\n+            }\n+        });\n+\n         connector.getField().add(\n                 new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n@@ -467,9 +555,11 @@ protected void onUpdate(AjaxRequestTarget target) {\n                                 resourceTO.getConnectorId() != null\n                                 && resourceTO.getConnectorId() > 0);\n \n-                        updateResourceSchemaNames(resourceTO.getConnectorId());\n+                        updateResourceSchemaNames(resourceTO);\n+                        updateConnectorProperties(resourceTO.getConnectorId());\n \n                         target.addComponent(mappingContainer);\n+                        target.addComponent(connectorPropertiesContainer);\n                     }\n                 });\n \n@@ -589,13 +679,29 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         }\n     }\n \n-    public final void updateResourceSchemaNames(Long connectorId) {\n-        if (connectorId != null && connectorId > 0) {\n+    public final void updateResourceSchemaNames(final ResourceTO resourceTO) {\n+        if (resourceTO != null && resourceTO.getConnectorId() != null) {\n             resourceSchemaNames =\n-                    connectorRestClient.getSchemaNames(connectorId);\n+                    connectorRestClient.getSchemaNames(resourceTO);\n         } else {\n             resourceSchemaNames =\n                     Collections.EMPTY_LIST;\n         }\n     }\n+\n+    public final void updateConnectorProperties(final Long connectorId) {\n+        if (connectorId != null && connectorId > 0) {\n+            Set<ConnConfProperty> overridableProperties =\n+                    new HashSet<ConnConfProperty>();\n+            for (ConnConfProperty p :\n+                    connectorRestClient.getConnectorProperties(connectorId)) {\n+                if (p.isOverridable()) {\n+                    overridableProperties.add(p);\n+                }\n+            }\n+            overridableConnectorProperties = overridableProperties;\n+        } else {\n+            overridableConnectorProperties = Collections.emptySet();\n+        }\n+    }\n }"},{"sha":"cdfe8f6d88bfe27ff944ccd3ee1db8c2d0d56a58","filename":"console/src/main/java/org/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":32,"deletions":11,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -19,7 +19,9 @@\n import org.springframework.stereotype.Component;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n+import org.syncope.client.to.ResourceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.types.ConnConfProperty;\n \n /**\n  * Console client for invoking Rest Connectors services.\n@@ -49,21 +51,21 @@ public void create(ConnInstanceTO connectorTO) {\n \n     /**\n      * Load an already existent connector by its name.\n-     * @param name (e.g.:surname)\n-     * @return schemaTO\n+     * @param connectorInstanceId the id\n+     * @return ConnInstanceTO\n      */\n-    public ConnInstanceTO read(String name) {\n-        ConnInstanceTO schema = null;\n+    public ConnInstanceTO read(final Long connectorInstanceId) {\n+        ConnInstanceTO connectorTO = null;\n \n         try {\n-            schema = restTemplate.getForObject(\n-                    baseURL + \"connector/read/\" + name + \".json\",\n+            connectorTO = restTemplate.getForObject(\n+                    baseURL + \"connector/read/\" + connectorInstanceId,\n                     ConnInstanceTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a connector\", e);\n         }\n \n-        return schema;\n+        return connectorTO;\n     }\n \n     /**\n@@ -101,17 +103,36 @@ public List<ConnBundleTO> getAllBundles() {\n         return bundles;\n     }\n \n-    public List<String> getSchemaNames(final Long connectorId) {\n+    public List<String> getSchemaNames(final ResourceTO resourceTO) {\n         List<String> schemaNames = null;\n \n         try {\n-            schemaNames = Arrays.asList(restTemplate.getForObject(\n-                    baseURL + \"connector/{connectorId}/schema/list\",\n-                    String[].class, connectorId));\n+            schemaNames = Arrays.asList(restTemplate.postForObject(\n+                    baseURL + \"connector/schema/list\",\n+                    resourceTO, String[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting resource schema names\", e);\n         }\n \n         return schemaNames;\n     }\n+\n+    /**\n+     * Get all configuration properties for the given connector instance.\n+     * @param connectorId the connector id\n+     * @return List of ConnConfProperty, or an empty list in case none found\n+     */\n+    public List<ConnConfProperty> getConnectorProperties(\n+            final Long connectorId) {\n+        List<ConnConfProperty> properties = null;\n+        try {\n+            properties = Arrays.asList(restTemplate.getForObject(baseURL\n+                    + \"connector/{connectorId}/configurationProperty/list\",\n+                    ConnConfProperty[].class, connectorId));\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            LOG.error(\"While getting connector configuration properties\", e);\n+        }\n+\n+        return properties;\n+    }\n }"},{"sha":"d24e8e784e67ce919c1575655d603962ff139e6e","filename":"console/src/main/resources/org/syncope/console/pages/ConnectorModalPage.html","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.html?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -85,6 +85,10 @@\n                             </div>\n                             <div class=\"tablecolumn_field medium_dynamicsize\">\n                                 <span wicket:id=\"connPropAttrValue\">[connPropAttrValue]</span>\n+\n+                            </div>\n+                            <div>\n+                                <span wicket:id=\"connPropAttrOverridable\">[connPropAttrOverridable]</span>\n                             </div>\n                         </div>\n "},{"sha":"5a6c24d00a7c04974885d7f71c9a20504ce04dc7","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage.html","status":"modified","additions":30,"deletions":5,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -46,6 +46,7 @@\n                 <ul>\n                     <li  class=\"tabs-selected\"><a href=\"#resource\"><span><wicket:message key=\"resource\"/></span></a></li>\n                     <li><a href=\"#mappings\"><span><wicket:message key=\"mappings\"/></span></a></li>\n+                    <li><a href=\"#connectorProperties\"><span><wicket:message key=\"connectorProperties\"/></span></a></li>\n                 </ul>\n                 <div id=\"resource\">\n                     <div id=\"formtable\">\n@@ -112,6 +113,11 @@\n                             </div>\n                         </div>\n                     </div>\n+                    <script type=\"text/javascript\">\n+                        $(function() {\n+                            $('div#resource div#formtable div.tablerow:even').addClass(\"alt\");\n+                        });\n+                    </script>\n                 </div>\n                 <div id=\"mappings\">\n                     <div id=\"formtable\">\n@@ -177,13 +183,32 @@\n                             </div>\n                         </div>\n                     </div>\n+                    <script type=\"text/javascript\">\n+                        $(function() {\n+                            $('div#mappings div#formtable div.tablerow:even').addClass(\"alt\");\n+                        });\n+                    </script>\n                 </div>\n+                <div id=\"connectorProperties\">\n+                    <span wicket:id=\"connectorPropertiesContainer\">\n+                        <div id=\"formtable\">\n+                            <div class=\"tablerow\" wicket:id=\"connectorProperties\">\n+                                <div class=\"tablecolumn_label medium_fixedsize\">\n+                                    <span wicket:id=\"connPropAttrSchema\">[connPropAttrSchema]</span>\n+                                </div>\n+                                <div class=\"tablecolumn_field medium_dynamicsize\">\n+                                    <span wicket:id=\"connPropAttrValue\">[connPropAttrValue]</span>\n+                                </div>\n+                            </div>\n+                        </div>\n \n-                <script type=\"text/javascript\">\n-                    $(function() {\n-                        $('#formtable div.tablerow:even').addClass(\"alt\");\n-                    });\n-                </script>\n+                        <script type=\"text/javascript\">\n+                            $(function() {\n+                                $('div#connectorProperties div#formtable div.tablerow:even').addClass(\"alt\");\n+                            });\n+                        </script>\n+                    </span>\n+                </div>\n             </div>\n             <div style=\"margin: 20px 10px 0\">\n                 <input type=\"submit\""},{"sha":"c218948b85e569a9cf39a16d86c1107815501953","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -1,5 +1,6 @@\n resource=Resource Details\n mappings=Schema Mappings\n+connectorProperties=Connector properties\n create_attribute=Create new resource\n required_alert=All form fields are required\n name=Name"},{"sha":"420fc2adffb992eac5f7bce07028473fab5d9772","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -1,6 +1,7 @@\n resource=Dettagli Risorsa\n mappings=Schema Mapping\n \n+connectorProperties=Proprietà Connettore\n create_attribute=Crea nuova risorsa\n required_alert=Tutti i campi sono richiesti\n name=Nome"},{"sha":"17b1f012e55504c52e9be0bbd1d4047292597754","filename":"core/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -293,6 +293,10 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>\n+        \t<groupId>org.mockito</groupId>\n+        \t<artifactId>mockito-core</artifactId>\n+        </dependency>\n         <!-- /TEST -->\n     </dependencies>\n "},{"sha":"f010dbfff04fe96c9b6c58e50d70e862b6402896","filename":"core/src/main/java/org/syncope/core/init/AbstractLoader.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FAbstractLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FAbstractLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FAbstractLoader.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -13,20 +13,12 @@\n  */\n package org.syncope.core.init;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.syncope.core.util.ApplicationContextManager;\n \n public abstract class AbstractLoader {\n \n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(\n-            AbstractLoader.class);\n-\n     protected DefaultListableBeanFactory getBeanFactory() {\n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();"},{"sha":"dcfe00fba2a202f51d01a36dddd8abf5794e3b76","filename":"core/src/main/java/org/syncope/core/init/ConnInstanceLoader.java","status":"modified","additions":78,"deletions":74,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -13,108 +13,105 @@\n  */\n package org.syncope.core.init;\n \n-import java.io.File;\n-import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.List;\n+import org.syncope.core.util.ConnBundleManager;\n+import java.util.HashSet;\n import java.util.Locale;\n+import java.util.Set;\n+\n import javassist.NotFoundException;\n-import org.identityconnectors.common.IOUtil;\n+\n import org.identityconnectors.common.l10n.CurrentLocale;\n-import org.identityconnectors.framework.api.ConnectorInfoManager;\n-import org.identityconnectors.framework.api.ConnectorInfoManagerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.ConnInstance;\n-import org.syncope.core.persistence.beans.SyncopeConf;\n-import org.syncope.core.persistence.dao.ConfDAO;\n-import org.syncope.core.persistence.dao.ConnInstanceDAO;\n-import org.syncope.core.persistence.dao.MissingConfKeyException;\n+import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n+import org.syncope.types.ConnConfProperty;\n \n /**\n  * Load ConnId connector instances.\n  */\n @Component\n public class ConnInstanceLoader extends AbstractLoader {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            ConnInstanceLoader.class);\n+\n     @Autowired\n-    private ConnInstanceDAO connInstanceDAO;\n+    private ResourceDAO resourceDAO;\n \n     @Autowired\n-    private ConfDAO confDAO;\n+    private ConnBundleManager connBundleManager;\n \n-    public static String getBeanName(final Long connInstanceId) {\n-        return \"connInstance\" + connInstanceId;\n+    private String getBeanName(final TargetResource resource) {\n+        return String.format(\"connInstance-%d-%s\",\n+                resource.getConnector().getId(), resource.getName());\n     }\n \n-    public ConnectorInfoManager getConnectorManager()\n-            throws NotFoundException, MissingConfKeyException {\n+    /**\n+     * Get a live connector bean that is registered with the given resource.\n+     * \n+     * @param resource the resource.\n+     * \n+     * @throws BeansException in case the connector is not registered in the\n+     * context.\n+     */\n+    public ConnectorFacadeProxy getConnector(final TargetResource resource)\n+            throws BeansException {\n \n-        // 1. Bundles directory\n-        SyncopeConf connectorBundleDir =\n-                confDAO.find(\"connid.bundles.directory\");\n+        return (ConnectorFacadeProxy) getBeanFactory().getBean(\n+                getBeanName(resource));\n+    }\n \n-        // 2. Find bundles inside that directory\n-        File bundleDirectory = new File(connectorBundleDir.getValue());\n-        String[] bundleFiles = bundleDirectory.list();\n-        if (bundleFiles == null) {\n-            throw new NotFoundException(\"Bundles from dir \"\n-                    + connectorBundleDir.getValue());\n-        }\n+    public ConnectorFacadeProxy createConnectorBean(\n+            final TargetResource resource) throws NotFoundException {\n \n-        List<URL> bundleFileURLs = new ArrayList<URL>();\n-        for (String file : bundleFiles) {\n-            try {\n-                bundleFileURLs.add(IOUtil.makeURL(bundleDirectory, file));\n-            } catch (Exception ignore) {\n-                // ignore exception and don't add bundle\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(bundleDirectory.toString() + \"/\" + file + \"\\\"\"\n-                            + \" is not a valid connector bundle.\", ignore);\n-                }\n+        final ConnInstance connInstanceClone =\n+                new ConnInstance(resource.getConnector());\n+\n+        final Set<ConnConfProperty> configuration =\n+                new HashSet<ConnConfProperty>();\n+\n+        final Set<String> propertyNames = new HashSet<String>();\n+\n+        for (ConnConfProperty prop : resource.getConfiguration()) {\n+            if (!propertyNames.contains(prop.getSchema().getName())) {\n+                configuration.add(prop);\n+                propertyNames.add(prop.getSchema().getName());\n             }\n         }\n-        if (bundleFileURLs.isEmpty()) {\n-            throw new NotFoundException(\"Bundles from dir \"\n-                    + connectorBundleDir.getValue());\n-        }\n-        LOG.debug(\"Bundle file URLs: {}\", bundleFileURLs);\n-\n-        // 3. Get connector info manager\n-        ConnectorInfoManager manager =\n-                ConnectorInfoManagerFactory.getInstance().getLocalManager(\n-                bundleFileURLs.toArray(new URL[0]));\n-        if (manager == null) {\n-            throw new NotFoundException(\"Connector Info Manager\");\n-        }\n \n-        return manager;\n-    }\n+        for (ConnConfProperty prop : connInstanceClone.getConfiguration()) {\n+            if (!propertyNames.contains(prop.getSchema().getName())) {\n+                configuration.add(prop);\n+                propertyNames.add(prop.getSchema().getName());\n+            }\n+        }\n \n-    public ConnectorFacadeProxy getConnector(final String id)\n-            throws BeansException {\n+        connInstanceClone.setConfiguration(configuration);\n \n-        return (ConnectorFacadeProxy) getBeanFactory().getBean(id);\n+        return new ConnectorFacadeProxy(connInstanceClone, connBundleManager);\n     }\n \n-    public void registerConnector(final ConnInstance instance)\n+    public void registerConnector(final TargetResource resource)\n             throws NotFoundException {\n \n-        if (getBeanFactory().containsSingleton(getBeanName(instance.getId()))) {\n-            unregisterConnector(getBeanName(instance.getId()));\n-        }\n-\n-        ConnectorFacadeProxy connector =\n-                new ConnectorFacadeProxy(instance, this);\n+        final ConnectorFacadeProxy connector = createConnectorBean(resource);\n         LOG.debug(\"Connector to be registered: {}\", connector);\n \n-        getBeanFactory().registerSingleton(getBeanName(instance.getId()),\n-                connector);\n-        LOG.debug(\"Successfully registered bean {}\",\n-                getBeanName(instance.getId()));\n+        final String beanName = getBeanName(resource);\n+\n+        if (getBeanFactory().containsSingleton(beanName)) {\n+            unregisterConnector(beanName);\n+        }\n+\n+        getBeanFactory().registerSingleton(beanName, connector);\n+        LOG.debug(\"Successfully registered bean {}\", beanName);\n     }\n \n     public void unregisterConnector(final String id) {\n@@ -128,18 +125,25 @@ public void load() {\n         // messages via REST\n         CurrentLocale.set(Locale.ENGLISH);\n \n-        List<ConnInstance> instances = connInstanceDAO.findAll();\n-        for (ConnInstance instance : instances) {\n+        // Next load all resource-specific connectors.\n+        for (TargetResource resource : resourceDAO.findAll()) {\n             try {\n-                LOG.info(\"Registering connector {}\", instance);\n-                registerConnector(instance);\n+                LOG.info(\"Registering resource-connector pair {}-{}\",\n+                        resource, resource.getConnector());\n+                registerConnector(resource);\n             } catch (NotFoundException e) {\n-                LOG.error(\"While loading connector bundle for instance \"\n-                        + instance, e);\n+                LOG.error(String.format(\n+                        \"While registering resource-connector pair %s-%s\",\n+                        resource, resource.getConnector()), e);\n             } catch (RuntimeException e) {\n-                LOG.error(\"While validating connector bundle for instance \"\n-                        + instance, e);\n+                LOG.error(String.format(\n+                        \"While registering resource-connector pair %s-%s\",\n+                        resource, resource.getConnector()), e);\n             }\n         }\n+\n+        LOG.debug(\"Done loading {} connectors.\",\n+                getBeanFactory().getBeansOfType(\n+                ConnectorFacadeProxy.class).size());\n     }\n }"},{"sha":"7b87ac71c6939314a7fcf909c75a16b114a10ae9","filename":"core/src/main/java/org/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -17,6 +17,8 @@\n import org.quartz.JobDetail;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.aop.framework.ProxyFactoryBean;\n import org.springframework.beans.MutablePropertyValues;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -36,6 +38,9 @@\n \n @Component\n public class JobInstanceLoader extends AbstractLoader {\n+    \n+    private static final Logger LOG = LoggerFactory.getLogger(\n+                    JobInstanceLoader.class);\n \n     @Autowired\n     private SchedulerFactoryBean scheduler;"},{"sha":"3b3116abad5538cbab84ee19573f78a91eb2a2c4","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractVirAttr.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -60,7 +60,7 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n         LOG.debug(\"{}: retrieving external values for {}\",\n                 new Object[]{attributable, attributeName});\n \n-        List<Object> values;\n+        List<Object> virAttrValues;\n \n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n@@ -70,7 +70,7 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n             LOG.error(\"Could not get to ConnInstanceLoader\");\n             return null;\n         } else {\n-            values = new ArrayList<Object>();\n+            virAttrValues = new ArrayList<Object>();\n         }\n \n         JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n@@ -128,8 +128,7 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n \n                 connInstance = resource.getConnector();\n \n-                connector = connInstanceLoader.getConnector(\n-                        ConnInstanceLoader.getBeanName(connInstance.getId()));\n+                connector = connInstanceLoader.getConnector(resource);\n \n                 try {\n                     attributes = connector.getObjectAttributes(\n@@ -141,7 +140,7 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n                     LOG.debug(\"Retrieved {}\", attributes);\n \n                     for (Attribute attribute : attributes) {\n-                        values.addAll(attribute.getValue());\n+                        virAttrValues.addAll(attribute.getValue());\n                     }\n                 } catch (Exception e) {\n                     LOG.warn(\"Error connecting to {}\", resource.getName(), e);\n@@ -150,7 +149,7 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n             }\n         }\n \n-        return values;\n+        return virAttrValues;\n     }\n \n     public abstract List<String> getValues();"},{"sha":"8c9a7eb0b670ffcfa6bed7903026a74f5023f47f","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnInstance.java","status":"modified","additions":38,"deletions":32,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -14,18 +14,15 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import com.thoughtworks.xstream.XStream;\n-import java.beans.XMLDecoder;\n-import java.beans.XMLEncoder;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.net.URLDecoder;\n import java.net.URLEncoder;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.EnumSet;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.ElementCollection;\n@@ -36,13 +33,17 @@\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n+\n import org.hibernate.annotations.Type;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.core.persistence.util.XmlConfiguration;\n import org.syncope.core.util.ApplicationContextManager;\n import org.syncope.types.ConnConfProperty;\n import org.syncope.types.ConnectorCapability;\n \n+import com.thoughtworks.xstream.XStream;\n+\n @Entity\n public class ConnInstance extends AbstractBaseBean {\n \n@@ -105,10 +106,34 @@ public class ConnInstance extends AbstractBaseBean {\n \n     public ConnInstance() {\n         super();\n-\n         capabilities = EnumSet.noneOf(ConnectorCapability.class);\n     }\n \n+    /**\n+     * Copy constructor.\n+     * \n+     * @param that\n+     */\n+    public ConnInstance(final ConnInstance that) {\n+        super();\n+        this.bundleName = that.bundleName;\n+        this.capabilities = that.capabilities.isEmpty()\n+                ? EnumSet.noneOf(ConnectorCapability.class)\n+                : EnumSet.copyOf(that.capabilities);\n+        this.connectorName = that.connectorName;\n+        this.displayName = that.displayName;\n+        this.id = that.id;\n+\n+        this.resources = new ArrayList<TargetResource>();\n+        if (that.resources != null) {\n+            this.resources.addAll(that.resources);\n+        }\n+\n+        this.serializedSyncToken = that.serializedSyncToken;\n+        this.version = that.version;\n+        this.xmlConfiguration = that.xmlConfiguration;\n+    }\n+\n     public String getVersion() {\n         return version;\n     }\n@@ -134,37 +159,18 @@ public void setConnectorName(String connectorName) {\n     }\n \n     public Set<ConnConfProperty> getConfiguration() {\n-        Set<ConnConfProperty> result = Collections.EMPTY_SET;\n-\n-        try {\n-            ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(\n-                    URLDecoder.decode(xmlConfiguration, \"UTF-8\").getBytes());\n-\n-            XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n-            Object object = decoder.readObject();\n-            decoder.close();\n-\n-            result = (Set<ConnConfProperty>) object;\n-        } catch (Throwable t) {\n-            LOG.error(\"During connector properties deserialization\", t);\n+        Set<ConnConfProperty> result =\n+                XmlConfiguration.<HashSet<ConnConfProperty>>deserialize(\n+                xmlConfiguration);\n+        if (result == null) {\n+            result = Collections.emptySet();\n         }\n-\n         return result;\n     }\n \n     public void setConfiguration(final Set<ConnConfProperty> configuration) {\n-        try {\n-            ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n-            XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n-            encoder.writeObject(configuration);\n-            encoder.flush();\n-            encoder.close();\n-\n-            xmlConfiguration = URLEncoder.encode(tokenContentOS.toString(),\n-                    \"UTF-8\");\n-        } catch (Throwable t) {\n-            LOG.error(\"During connector properties serialization\", t);\n-        }\n+        xmlConfiguration = XmlConfiguration.serialize(\n+                new HashSet<ConnConfProperty>(configuration));\n     }\n \n     public Long getId() {"},{"sha":"8badcda376e7e70c5d3cfb4cb4566daff7e848d1","filename":"core/src/main/java/org/syncope/core/persistence/beans/Policy.java","status":"modified","additions":4,"deletions":34,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -14,19 +14,15 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.beans.XMLDecoder;\n-import java.beans.XMLEncoder;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.net.URLDecoder;\n-import java.net.URLEncoder;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n+\n import org.hibernate.annotations.Type;\n+import org.syncope.core.persistence.util.XmlConfiguration;\n import org.syncope.core.persistence.validation.entity.PolicyCheck;\n import org.syncope.types.AbstractPolicy;\n import org.syncope.types.PolicyType;\n@@ -76,37 +72,11 @@ public void setType(PolicyType type) {\n     }\n \n     public <T extends AbstractPolicy> T getSpecification() {\n-        T result = null;\n-\n-        try {\n-            ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(\n-                    URLDecoder.decode(specification, \"UTF-8\").getBytes());\n-\n-            XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n-            Object object = decoder.readObject();\n-            decoder.close();\n-\n-            result = (T) object;\n-        } catch (Throwable t) {\n-            LOG.error(\"During connector properties deserialization\", t);\n-        }\n-\n+        T result = XmlConfiguration.<T>deserialize(specification);\n         return result;\n     }\n \n     public <T extends AbstractPolicy> void setSpecification(final T policy) {\n-        try {\n-            ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n-            XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n-            encoder.writeObject(policy);\n-            encoder.flush();\n-            encoder.close();\n-\n-            specification = URLEncoder.encode(\n-                    tokenContentOS.toString(), \"UTF-8\");\n-\n-        } catch (Throwable t) {\n-            LOG.error(\"During connector properties serialization\", t);\n-        }\n+        specification = XmlConfiguration.serialize(policy);\n     }\n }"},{"sha":"a9d68273bc003d7b5439887cbf0977d1687577b8","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -15,9 +15,11 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n@@ -27,15 +29,20 @@\n import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.Lob;\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.validation.Valid;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+\n+import org.hibernate.annotations.Type;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.util.XmlConfiguration;\n import org.syncope.core.persistence.validation.entity.TargetResourceCheck;\n+import org.syncope.types.ConnConfProperty;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.SourceMappingType;\n import org.syncope.types.TraceLevel;\n@@ -116,6 +123,13 @@ public class TargetResource extends AbstractBaseBean {\n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n     private Policy passwordPolicy;\n \n+    /**\n+     * Configuration properties that are overridden from the connector instance.\n+     */\n+    @Lob\n+    @Type(type = \"org.hibernate.type.StringClobType\")\n+    private String xmlConfiguration;\n+\n     /**\n      * Default constructor.\n      */\n@@ -291,4 +305,24 @@ public Policy getPasswordPolicy() {\n     public void setPasswordPolicy(Policy passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n+\n+    public void setConnectorConfigurationProperties(\n+            final Set<ConnConfProperty> properties) {\n+        \n+        // create new set to make sure it's a serializable set implementation.\n+        xmlConfiguration = XmlConfiguration.serialize(\n+                new HashSet<ConnConfProperty>(properties));\n+    }\n+\n+    public Set<ConnConfProperty> getConfiguration() {\n+        Set<ConnConfProperty> deserializedSet =\n+                XmlConfiguration.<HashSet<ConnConfProperty>>deserialize(\n+                xmlConfiguration);\n+\n+        if (deserializedSet == null) {\n+            deserializedSet = Collections.emptySet();\n+        }\n+\n+        return deserializedSet;\n+    }\n }"},{"sha":"5369a864643f84ebe4f120c03579474b029b817b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConnInstanceDAOImpl.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -15,7 +15,6 @@\n package org.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-import javassist.NotFoundException;\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -43,15 +42,7 @@ public List<ConnInstance> findAll() {\n \n     @Override\n     public ConnInstance save(final ConnInstance connector) {\n-        ConnInstance actual = entityManager.merge(connector);\n-        try {\n-            connInstanceLoader.registerConnector(actual);\n-        } catch (NotFoundException e) {\n-            LOG.error(\"While registering the connector for instance \"\n-                    + actual, e);\n-        }\n-\n-        return actual;\n+        return entityManager.merge(connector);\n     }\n \n     @Override"},{"sha":"30eb986fd7da5bcdabdb2874b6c6b0bd0a0ec248","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -15,11 +15,15 @@\n package org.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n+\n+import javassist.NotFoundException;\n+\n import javax.persistence.CacheRetrieveMode;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n@@ -37,6 +41,9 @@ public class ResourceDAOImpl extends AbstractDAOImpl\n     @Autowired\n     private TaskDAO taskDAO;\n \n+    @Autowired\n+    private ConnInstanceLoader connInstanceLoader;\n+\n     @Override\n     public TargetResource find(final String name) {\n         Query query = entityManager.createQuery(\n@@ -61,7 +68,13 @@ public List<TargetResource> findAll() {\n \n     @Override\n     public TargetResource save(final TargetResource resource) {\n-        return entityManager.merge(resource);\n+        TargetResource merged = entityManager.merge(resource);\n+        try {\n+            connInstanceLoader.registerConnector(merged);\n+        } catch (NotFoundException e) {\n+            LOG.error(\"While registering connector for resource\", e);\n+        }\n+        return merged;\n     }\n \n     @Override"},{"sha":"696e465906ab8ccfbda7bd1bc5978019c46d358a","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ConnectorFacadeProxy.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -21,7 +21,9 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n import javassist.NotFoundException;\n+\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.api.APIConfiguration;\n@@ -44,10 +46,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.ClassUtils;\n-import org.syncope.core.init.ConnInstanceLoader;\n+import org.syncope.core.util.ConnBundleManager;\n+import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.types.ConnConfProperty;\n-import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.types.ConnectorCapability;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.ResourceOperationType;\n@@ -81,16 +83,17 @@ public class ConnectorFacadeProxy {\n      * be used to make all wrapped calls.\n      *\n      * @param connInstance the connector instance configuration\n-     * @param connInstanceLoader connector instance loader\n+     * @param connBundleManager connector bundle loader\n      * @throws NotFoundException when not able to fetch all the required data\n      * @see ConnectorKey\n      * @see ConnectorInfo\n      * @see APIConfiguration\n      * @see ConfigurationProperties\n      * @see ConnectorFacade\n      */\n-    public ConnectorFacadeProxy(final ConnInstance connInstance,\n-            final ConnInstanceLoader connInstanceLoader)\n+    public ConnectorFacadeProxy(\n+            final ConnInstance connInstance,\n+            final ConnBundleManager connBundleManager)\n             throws NotFoundException {\n \n         // specify a connector.\n@@ -112,7 +115,7 @@ public ConnectorFacadeProxy(final ConnInstance connInstance,\n         // get the specified connector.\n         ConnectorInfo info;\n         try {\n-            info = connInstanceLoader.getConnectorManager().\n+            info = connBundleManager.getConnectorManager().\n                     findConnectorInfo(key);\n             if (info == null) {\n                 throw new NotFoundException(\"Connector Info for key \" + key);"},{"sha":"de557151814dbcd1f5a09cb686c9a772d3310d5d","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -578,19 +578,19 @@ public TaskExec propagate(final PropagationTask task,\n         Set<String> propagationAttempted = new HashSet<String>();\n \n         try {\n-            ConnInstance connInstance =\n+            final ConnInstance connInstance =\n                     task.getResource().getConnector();\n \n-            ConnectorFacadeProxy connector = connLoader.getConnector(\n-                    ConnInstanceLoader.getBeanName(connInstance.getId()));\n+            final ConnectorFacadeProxy connector =\n+                    connLoader.getConnector(task.getResource());\n \n             if (connector == null) {\n-                LOG.error(\"Connector instance bean \"\n-                        + ConnInstanceLoader.getBeanName(connInstance.getId())\n-                        + \" not found\");\n+                final String msg = String.format(\n+                        \"Connector instance bean for resource %s and \"\n+                        + \"connInstance %s not found\",\n+                        task.getResource(), connInstance);\n \n-                throw new NoSuchBeanDefinitionException(\n-                        \"Connector instance bean not found\");\n+                throw new NoSuchBeanDefinitionException(msg);\n             }\n \n             switch (task.getResourceOperationType()) {"},{"sha":"0712c0079c4e155e441310f2afbe544aa9d80a69","filename":"core/src/main/java/org/syncope/core/persistence/util/XmlConfiguration.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FXmlConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FXmlConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FXmlConfiguration.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -0,0 +1,69 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.util;\n+\n+import java.beans.XMLDecoder;\n+import java.beans.XMLEncoder;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.net.URLDecoder;\n+import java.net.URLEncoder;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Helper class for serialization and deserialization of configuration objects.\n+ * It uses the JDK XMLEncoder and XMLDecoder.\n+ * \n+ */\n+public class XmlConfiguration {\n+\n+    protected static final Logger LOG =\n+            LoggerFactory.getLogger(XmlConfiguration.class);\n+\n+    public static String serialize(Serializable object) {\n+        try {\n+            OutputStream os = new ByteArrayOutputStream();\n+            XMLEncoder encoder = new XMLEncoder(os);\n+            encoder.writeObject(object);\n+            encoder.flush();\n+            encoder.close();\n+\n+            return URLEncoder.encode(os.toString(), \"UTF-8\");\n+        } catch (Throwable t) {\n+            LOG.error(\"During serialization\", t);\n+            return null;\n+        }\n+    }\n+\n+    public static <T extends Serializable> T deserialize(String serialized) {\n+        try {\n+            InputStream is = new ByteArrayInputStream(\n+                    URLDecoder.decode(serialized, \"UTF-8\").getBytes());\n+\n+            XMLDecoder decoder = new XMLDecoder(is);\n+            T object = (T) decoder.readObject();\n+            decoder.close();\n+            return object;\n+        } catch (Throwable t) {\n+            LOG.error(\"During deserialization\", t);\n+            return null;\n+        }\n+    }\n+}"},{"sha":"ce955d200545ece39b7d01d364a51215160a23a5","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":70,"deletions":32,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -15,36 +15,44 @@\n package org.syncope.core.rest.controller;\n \n import java.util.ArrayList;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n import java.util.List;\n+\n import javassist.NotFoundException;\n+\n import javax.servlet.http.HttpServletResponse;\n+\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorKey;\n import org.springframework.beans.BeansException;\n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n+import org.syncope.client.to.ResourceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.init.ConnInstanceLoader;\n+import org.syncope.core.util.ConnBundleManager;\n import org.syncope.core.persistence.beans.ConnInstance;\n+import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.data.ConnInstanceDataBinder;\n+import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.types.ConnConfPropSchema;\n+import org.syncope.types.ConnConfProperty;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller\n@@ -57,9 +65,18 @@ public class ConnInstanceController extends AbstractController {\n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n+    @Autowired\n+    private ResourceDAO respourceDAO;\n+\n+    @Autowired\n+    private ResourceDataBinder resourceDataBinder;\n+\n     @Autowired\n     private ConnInstanceDataBinder binder;\n \n+    @Autowired\n+    private ConnBundleManager connBundleManager;\n+\n     @PreAuthorize(\"hasRole('CONNECTOR_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n@@ -175,15 +192,24 @@ public ConnInstanceTO read(\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n-    value = \"/check/{connectorId}\")\n-    public ModelAndView check(@PathVariable(\"connectorId\") String connectorId)\n+    value = \"/check/{resourceName}\")\n+    public ModelAndView check(@PathVariable(\"resourceName\") String resourceName)\n             throws NotFoundException {\n \n+        final TargetResource resource = respourceDAO.find(resourceName);\n+\n+        if (resource == null) {\n+            LOG.error(\"Missing resource: {}\", resourceName);\n+            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n+        }\n+\n         ConnectorFacadeProxy connector;\n+\n         try {\n-            connector = connInstanceLoader.getConnector(connectorId);\n+            connector = connInstanceLoader.getConnector(resource);\n         } catch (BeansException e) {\n-            throw new NotFoundException(\"Connector \" + connectorId, e);\n+            throw new NotFoundException(\n+                    \"Connector \" + resource.getConnector().getId(), e);\n         }\n \n         ModelAndView mav = new ModelAndView();\n@@ -210,7 +236,7 @@ public List<ConnBundleTO> getBundles()\n             throws NotFoundException, MissingConfKeyException {\n \n         ConnectorInfoManager manager =\n-                connInstanceLoader.getConnectorManager();\n+                connBundleManager.getConnectorManager();\n \n         List<ConnectorInfo> bundles = manager.getConnectorInfos();\n \n@@ -292,41 +318,53 @@ public List<ConnBundleTO> getBundles()\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/{connectorId}/schema/list\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/schema/list\")\n     public List<String> getSchemaNames(\n-            @PathVariable(\"connectorId\") final Long connectorId)\n+            @RequestBody final ResourceTO resourceTO)\n             throws NotFoundException {\n \n-        return getSchemaNames(connectorId, false);\n+        return getSchemaNames(\n+                resourceDataBinder.getResource(resourceTO), false);\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/{connectorId}/schema/list/all\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/schema/list/all\")\n     public List<String> getAllSchemaNames(\n+            @RequestBody final ResourceTO resourceTO)\n+            throws NotFoundException {\n+\n+        return getSchemaNames(\n+                resourceDataBinder.getResource(resourceTO), true);\n+    }\n+\n+    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/{connectorId}/configurationProperty/list\")\n+    public List<ConnConfProperty> getConfigurationProperties(\n             @PathVariable(\"connectorId\") final Long connectorId)\n             throws NotFoundException {\n-        return getSchemaNames(connectorId, true);\n+\n+        final ConnInstance connector = connInstanceDAO.find(connectorId);\n+        if (connector == null) {\n+            throw new NotFoundException(String.format(\n+                    \"Connector instance with id %d not found\", connectorId));\n+        }\n+        return new ArrayList<ConnConfProperty>(connector.getConfiguration());\n     }\n \n     private List<String> getSchemaNames(\n-            final Long connectorId, final boolean showall)\n+            final TargetResource resource, final boolean showall)\n             throws NotFoundException {\n-        try {\n-            final ConnectorFacadeProxy connector = connInstanceLoader.getConnector(\n-                    ConnInstanceLoader.getBeanName(connectorId));\n-\n-            if (connector == null) {\n-                throw new NoSuchBeanDefinitionException(\n-                        \"Connector instance bean not found\");\n-            }\n \n-            return connector.getSchema(showall);\n+        // We cannot use bean because this method could be used in phase of\n+        // resource definition or modification: bean couldn't exist or bean\n+        // couldn't be updated.\n+        // This is the reason why we should take a \"not mature\" connector\n+        // facade proxy to ask for schema names.\n \n-        } catch (BeansException e) {\n-            LOG.error(\"Connector instance bean '{}' not found\", connectorId);\n-            throw new NotFoundException(\"Connector bean not found\", e);\n-        }\n+        return connInstanceLoader.createConnectorBean(resource).\n+                getSchema(showall);\n     }\n }"},{"sha":"1ab134749c1b52a288aa70df47e46ecba53f5a0c","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -124,7 +124,7 @@ public ResourceTO update(final HttpServletResponse response,\n             resource = resourceDAO.find(resourceTO.getName());\n         }\n         if (resource == null) {\n-            LOG.error(\"Missing resource: \" + resourceTO.getName());\n+            LOG.error(\"Missing resource: {}\", resourceTO.getName());\n             throw new NotFoundException(\n                     \"Resource '\" + resourceTO.getName() + \"'\");\n         }"},{"sha":"57e6b577368237504467ca9b6f54e7be8158e0d2","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":25,"deletions":9,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -16,7 +16,9 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.List;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -28,11 +30,12 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.ConnInstance;\n-import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.util.JexlUtil;\n+import org.syncope.types.ConnConfProperty;\n import org.syncope.types.SourceMappingType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -86,7 +89,7 @@ public TargetResource getResource(final TargetResource resource,\n             resource.setConnector(connector);\n             connector.addResource(resource);\n         }\n-        \n+\n         resource.setForceMandatoryConstraint(\n                 resourceTO.isForceMandatoryConstraint());\n \n@@ -104,7 +107,9 @@ public TargetResource getResource(final TargetResource resource,\n \n         resource.setPasswordPolicy(resourceTO.getPasswordPolicy() != null\n                 ? policyDAO.find(resourceTO.getPasswordPolicy()) : null);\n-\n+        resource.setConnectorConfigurationProperties(\n+                new HashSet<ConnConfProperty>(\n+                resourceTO.getConnectorConfigurationProperties()));\n         return resource;\n     }\n \n@@ -157,7 +162,8 @@ public ResourceTO getResourceTO(TargetResource resource) {\n \n         resourceTO.setPasswordPolicy(resource.getPasswordPolicy() != null\n                 ? resource.getPasswordPolicy().getId() : null);\n-\n+        resourceTO.setConnectorConfigurationProperties(\n+                resource.getConfiguration());\n         return resourceTO;\n     }\n \n@@ -168,9 +174,15 @@ private List<SchemaMapping> getSchemaMappings(\n             return null;\n         }\n \n-        List<SchemaMapping> schemaMappings = new ArrayList<SchemaMapping>();\n+        final List<SchemaMapping> schemaMappings =\n+                new ArrayList<SchemaMapping>();\n+\n+        SchemaMapping schemaMapping;\n         for (SchemaMappingTO mapping : mappings) {\n-            schemaMappings.add(getSchemaMapping(resource, mapping));\n+            schemaMapping = getSchemaMapping(resource, mapping);\n+            if (schemaMapping != null) {\n+                schemaMappings.add(schemaMapping);\n+            }\n         }\n \n         return schemaMappings;\n@@ -188,9 +200,10 @@ private SchemaMapping getSchemaMapping(TargetResource resource,\n                 new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);\n \n-        if (mappingTO == null) {\n+        // this control needs to be free to get schema names\n+        // without a complete/good resourceTO object\n+        if (mappingTO == null || mappingTO.getSourceMappingType() == null) {\n             LOG.error(\"Null mappingTO provided\");\n-\n             return null;\n         }\n \n@@ -217,7 +230,10 @@ private SchemaMapping getSchemaMapping(TargetResource resource,\n             compositeErrorException.addException(requiredValuesMissing);\n         }\n \n-        if (!jexlUtil.isExpressionValid(mappingTO.getMandatoryCondition())) {\n+        // no mandatory condition implies mandatory condition false\n+        if (!jexlUtil.isExpressionValid(\n+                mappingTO.getMandatoryCondition() != null\n+                ? mappingTO.getMandatoryCondition() : \"false\")) {\n             SyncopeClientException invalidMandatoryCondition =\n                     new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidValues);"},{"sha":"1d8fe1e308df96f799409292d11664f5cf90f071","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -18,6 +18,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -33,7 +34,6 @@\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.core.init.ConnInstanceLoader;\n-import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.TargetResource;\n@@ -322,22 +322,23 @@ protected String doExecute()\n         }\n         final SyncTask syncTask = (SyncTask) this.task;\n \n-        ConnInstance connInstance =\n-                syncTask.getResource().getConnector();\n-\n         ConnectorFacadeProxy connector;\n         try {\n-            connector = connInstanceLoader.getConnector(\n-                    ConnInstanceLoader.getBeanName(connInstance.getId()));\n+            connector = connInstanceLoader.getConnector(syncTask.getResource());\n         } catch (BeansException e) {\n-            throw new JobExecutionException(\"Connector instance bean \"\n-                    + ConnInstanceLoader.getBeanName(connInstance.getId())\n-                    + \" not found\", e);\n+            final String msg = String.format(\n+                    \"Connector instance bean for resource %s \"\n+                    + \"and connInstance %s not found\",\n+                    syncTask.getResource(),\n+                    syncTask.getResource().getConnector());\n+\n+            throw new JobExecutionException(msg, e);\n         }\n \n         List<SyncDelta> deltas;\n         try {\n-            deltas = connector.sync(connInstance.getSyncToken());\n+            deltas = connector.sync(\n+                    syncTask.getResource().getConnector().getSyncToken());\n         } catch (Throwable t) {\n             throw new JobExecutionException(\"While syncing on connector\", t);\n         }\n@@ -447,8 +448,9 @@ protected String doExecute()\n         LOG.debug(\"Sync result: {}\", result);\n \n         try {\n-            connInstance.setSyncToken(connector.getLatestSyncToken());\n-            connInstanceDAO.save(connInstance);\n+            syncTask.getResource().getConnector().setSyncToken(\n+                    connector.getLatestSyncToken());\n+            connInstanceDAO.save(syncTask.getResource().getConnector());\n         } catch (Throwable t) {\n             throw new JobExecutionException(\"While updating SyncToken\", t);\n         }"},{"sha":"53e432023284fdc9c5116476e485e6672c343642","filename":"core/src/main/java/org/syncope/core/util/ConnBundleManager.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnBundleManager.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -0,0 +1,87 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.util;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javassist.NotFoundException;\n+\n+import org.identityconnectors.common.IOUtil;\n+import org.identityconnectors.framework.api.ConnectorInfoManager;\n+import org.identityconnectors.framework.api.ConnectorInfoManagerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.syncope.core.persistence.beans.SyncopeConf;\n+import org.syncope.core.persistence.dao.ConfDAO;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n+\n+@Component\n+public class ConnBundleManager {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+                    ConnBundleManager.class);\n+    @Autowired\n+    private ConfDAO confDAO;\n+\n+    public ConnectorInfoManager getConnectorManager()\n+            throws NotFoundException, MissingConfKeyException {\n+    \n+        // 1. Bundles directory\n+        SyncopeConf connectorBundleDir =\n+                confDAO.find(\"connid.bundles.directory\");\n+    \n+        // 2. Find bundles inside that directory\n+        File bundleDirectory = new File(connectorBundleDir.getValue());\n+        String[] bundleFiles = bundleDirectory.list();\n+        if (bundleFiles == null) {\n+            throw new NotFoundException(\"Bundles from dir \"\n+                    + connectorBundleDir.getValue());\n+        }\n+    \n+        List<URL> bundleFileURLs = new ArrayList<URL>();\n+        for (String file : bundleFiles) {\n+            try {\n+                bundleFileURLs.add(IOUtil.makeURL(bundleDirectory, file));\n+            } catch (Exception ignore) {\n+                // ignore exception and don't add bundle\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(bundleDirectory.toString() + \"/\" + file + \"\\\"\"\n+                            + \" is not a valid connector bundle.\", ignore);\n+                }\n+            }\n+        }\n+        if (bundleFileURLs.isEmpty()) {\n+            throw new NotFoundException(\"Bundles from dir \"\n+                    + connectorBundleDir.getValue());\n+        }\n+        LOG.debug(\"Bundle file URLs: {}\", bundleFileURLs);\n+    \n+        // 3. Get connector info manager\n+        ConnectorInfoManager manager =\n+                ConnectorInfoManagerFactory.getInstance().getLocalManager(\n+                bundleFileURLs.toArray(new URL[0]));\n+        if (manager == null) {\n+            throw new NotFoundException(\"Connector Info Manager\");\n+        }\n+    \n+        return manager;\n+    }\n+\n+}"},{"sha":"9eabc5661cfe09aaaec7792e783f0f91bf8427d6","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -34,5 +34,6 @@\n     <bean class=\"org.syncope.core.util.ApplicationContextProvider\"/>\n \n     <context:component-scan base-package=\"org.syncope.core.init\"/>\n+    <context:component-scan base-package=\"org.syncope.core.util\"/>\n \n </beans>"},{"sha":"cd52933535c799250557b73536abe86bd7a57f24","filename":"core/src/test/java/org/syncope/core/init/ConnInstanceLoaderTest.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -0,0 +1,70 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.init;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Collections;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n+import org.springframework.context.support.StaticApplicationContext;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.syncope.core.persistence.beans.ConnInstance;\n+import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.core.persistence.dao.ConnInstanceDAO;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n+import org.syncope.core.util.ApplicationContextManager;\n+\n+public class ConnInstanceLoaderTest {\n+\n+    private ConnInstanceLoader cil;\n+\n+    private ConnInstanceDAO connInstanceDAOMock;\n+\n+    private ResourceDAO resourceDAOMock;\n+\n+    @Before\n+    public void before() {\n+        ApplicationContextManager.setApplicationContext(new StaticApplicationContext());\n+        cil = new ConnInstanceLoader();\n+        connInstanceDAOMock = mock(ConnInstanceDAO.class);\n+        resourceDAOMock = mock(ResourceDAO.class);\n+        ReflectionTestUtils.setField(cil, \"connInstanceDAO\",\n+                connInstanceDAOMock);\n+        ReflectionTestUtils.setField(cil, \"resourceDAO\", resourceDAOMock);\n+    }\n+\n+    @Test\n+    public void loadEmpty() {\n+        when(resourceDAOMock.findAll()).thenReturn(\n+                Collections.<TargetResource>emptyList());\n+        cil.load();\n+        assertEquals(0, ApplicationContextManager.getApplicationContext().\n+                getBeanNamesForType(ConnectorFacadeProxy.class).length);\n+    }\n+\n+    @Test(expected = NoSuchBeanDefinitionException.class)\n+    public void getConnectorWhenEmpty() {\n+        ConnInstance instance = new ConnInstance();\n+        TargetResource resource = new TargetResource();\n+        resource.setConnector(instance);\n+        cil.getConnector(resource);\n+    }\n+}"},{"sha":"8ccb29a0e196881db8cdb7bd415b8ea13b17f5f9","filename":"core/src/test/java/org/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -92,10 +92,16 @@ public final void save() {\n \n         resource.addMapping(accountId);\n \n+        ConnInstance connector =\n+                resourceDAO.find(\"ws-target-resource-1\").getConnector();\n+\n+        resource.setConnector(connector);\n+\n         // save the resource\n         TargetResource actual = resourceDAO.save(resource);\n \n         assertNotNull(actual);\n+        assertNotNull(actual.getConnector());\n     }\n \n     @Test"},{"sha":"10037547436130f9d4b00e2e5c713395fa13e2b0","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":45,"deletions":14,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -14,14 +14,19 @@\n  */\n package org.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n import java.io.InputStream;\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Properties;\n import java.util.Set;\n+\n import org.connid.bundles.soap.WebServiceConnector;\n import org.junit.Before;\n import org.junit.Test;\n@@ -30,10 +35,10 @@\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n-import org.syncope.types.ConnConfProperty;\n+import org.syncope.client.to.ResourceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.types.ConnConfPropSchema;\n+import org.syncope.types.ConnConfProperty;\n import org.syncope.types.ConnectorCapability;\n \n public class ConnInstanceTestITCase extends AbstractTest {\n@@ -261,8 +266,8 @@ public void read() {\n     @Test\n     public void check() {\n         Boolean verify = restTemplate.getForObject(\n-                BASE_URL + \"connector/check/{connectorId}.json\",\n-                Boolean.class, ConnInstanceLoader.getBeanName(100L));\n+                BASE_URL + \"connector/check/{resourceName}.json\",\n+                Boolean.class, \"ws-target-resource-1\");\n \n         assertTrue(verify);\n     }\n@@ -282,25 +287,51 @@ public void getBundles() {\n \n     @Test\n     public void getSchemaNames() {\n-        List<String> schemaNames = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"connector/{connectorId}/schema/list/all\",\n-                String[].class, 100));\n+        ResourceTO resourceTO = null;\n+\n+        resourceTO = restTemplate.getForObject(\n+                BASE_URL + \"/resource/read/{resourceName}.json\",\n+                ResourceTO.class, \"ws-target-resource-1\");\n+        assertNotNull(resourceTO);\n+\n+        List<String> schemaNames = Arrays.asList(restTemplate.postForObject(\n+                BASE_URL + \"connector/schema/list/all\",\n+                resourceTO, String[].class));\n \n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n \n-        schemaNames = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"connector/{connectorId}/schema/list\",\n-                String[].class, 101));\n+        resourceTO = restTemplate.getForObject(\n+                BASE_URL + \"/resource/read/{resourceName}.json\",\n+                ResourceTO.class, \"ws-target-resource-testdb\");\n+        assertNotNull(resourceTO);\n+\n+        schemaNames = Arrays.asList(restTemplate.postForObject(\n+                BASE_URL + \"connector/schema/list\",\n+                resourceTO, String[].class));\n \n         assertNotNull(schemaNames);\n         assertTrue(schemaNames.isEmpty());\n \n-        schemaNames = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"connector/{connectorId}/schema/list\",\n-                String[].class, 104));\n+        resourceTO = restTemplate.getForObject(\n+                BASE_URL + \"/resource/read/{resourceName}.json\",\n+                ResourceTO.class, \"resource-csv\");\n+        assertNotNull(resourceTO);\n+\n+        schemaNames = Arrays.asList(restTemplate.postForObject(\n+                BASE_URL + \"connector/schema/list\",\n+                resourceTO, String[].class));\n \n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n     }\n+\n+    @Test\n+    public void getConnectorConfiguration() {\n+        List<ConnConfProperty> props = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"connector/{connectorId}/configurationProperty/list\",\n+                ConnConfProperty[].class, 104));\n+        assertNotNull(props);\n+        assertFalse(props.isEmpty());\n+    }\n }"},{"sha":"9b1d5a66f0e5039d9a8fe24edd780a4a7bad29a9","filename":"core/src/test/java/org/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -16,7 +16,9 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n@@ -27,6 +29,8 @@\n import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.types.ConnConfPropSchema;\n+import org.syncope.types.ConnConfProperty;\n import org.syncope.types.SourceMappingType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -89,6 +93,62 @@ public void create() {\n         assertNotNull(actual);\n     }\n \n+    @Test\n+    public void createOverridingProps() {\n+        String resourceName = \"overriding-conn-conf-target-resource-create\";\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n+        schemaMappingTO.setDestAttrName(\"uid\");\n+        schemaMappingTO.setSourceAttrName(\"userId\");\n+        schemaMappingTO.setSourceMappingType(SourceMappingType.UserSchema);\n+        resourceTO.addMapping(schemaMappingTO);\n+\n+        schemaMappingTO = new SchemaMappingTO();\n+        schemaMappingTO.setDestAttrName(\"username\");\n+        schemaMappingTO.setSourceAttrName(\"username\");\n+        schemaMappingTO.setSourceMappingType(SourceMappingType.SyncopeUserId);\n+        schemaMappingTO.setAccountid(true);\n+        resourceTO.addMapping(schemaMappingTO);\n+\n+        schemaMappingTO = new SchemaMappingTO();\n+        schemaMappingTO.setDestAttrName(\"fullname\");\n+        schemaMappingTO.setSourceAttrName(\"cn\");\n+        schemaMappingTO.setSourceMappingType(SourceMappingType.UserSchema);\n+        schemaMappingTO.setAccountid(false);\n+        resourceTO.addMapping(schemaMappingTO);\n+\n+        resourceTO.setName(resourceName);\n+        resourceTO.setConnectorId(102L);\n+\n+        ConnConfProperty p = new ConnConfProperty();\n+        ConnConfPropSchema schema = new ConnConfPropSchema();\n+        schema.setType(\"java.lang.String\");\n+        schema.setName(\"endpoint\");\n+        schema.setRequired(true);\n+        p.setSchema(schema);\n+        p.setValue(\"http://invalidurl/\");\n+\n+        Set<ConnConfProperty> connectorConfigurationProperties =\n+                new HashSet<ConnConfProperty>(Arrays.asList(p));\n+\n+        resourceTO.setConnectorConfigurationProperties(\n+                connectorConfigurationProperties);\n+\n+        ResourceTO actual = restTemplate.postForObject(BASE_URL\n+                + \"resource/create.json\", resourceTO, ResourceTO.class);\n+\n+        assertNotNull(actual);\n+\n+        // check the existence\n+\n+        actual = restTemplate.getForObject(BASE_URL\n+                + \"resource/read/{resourceName}.json\", ResourceTO.class,\n+                resourceName);\n+\n+        assertNotNull(actual);\n+    }\n+\n     @Test\n     public void createWithSingleMapping() {\n         String resourceName = \"ws-target-resource-create-single\";\n@@ -315,4 +375,13 @@ public void list() {\n             assertNotNull(resourceTO);\n         }\n     }\n+\n+    @Test\n+    public void read() {\n+        ResourceTO actual = restTemplate.getForObject(\n+                BASE_URL + \"/resource/read/{resourceName}.json\",\n+                ResourceTO.class, \"ws-target-resource-testdb\");\n+\n+        assertNotNull(actual);\n+    }\n }"},{"sha":"cfa266eefc1fbc1f481d8ed6a614e027707dd7ac","filename":"core/src/test/java/org/syncope/core/rest/data/ResourceDataBinderTest.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinderTest.java?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -0,0 +1,64 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.syncope.client.to.ResourceTO;\n+import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.types.ConnConfProperty;\n+\n+public class ResourceDataBinderTest {\n+\n+    private ResourceDataBinder rdb;\n+\n+    private ResourceTO resourceTO;\n+\n+    private TargetResource resource;\n+\n+    @Before\n+    public void before() {\n+        rdb = new ResourceDataBinder();\n+        resourceTO = new ResourceTO();\n+        resource = new TargetResource();\n+    }\n+\n+    @Test\n+    public void getResource() {\n+        Set<ConnConfProperty> props = new HashSet<ConnConfProperty>();\n+        resourceTO.setConnectorConfigurationProperties(props);\n+\n+        TargetResource res = rdb.getResource(resourceTO);\n+\n+        assertEquals(\"configuration properties should be filled\",\n+                props, res.getConfiguration());\n+    }\n+\n+    @Test\n+    public void getResourceTO() {\n+        Set<ConnConfProperty> props = new HashSet<ConnConfProperty>();\n+        resource.setConnectorConfigurationProperties(props);\n+\n+        ResourceTO resTO = rdb.getResourceTO(resource);\n+\n+        assertEquals(\"configuration properties should be filled\",\n+                props, resTO.getConnectorConfigurationProperties());\n+    }\n+}"},{"sha":"bdcae0facb921ff5815edb4bcee3d73e8c568baa","filename":"core/src/test/resources/content.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -16,7 +16,7 @@\n     <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n     <SyncopeConf confKey=\"token.encryption.confKey\" confValue=\"1abcdefghil3mnopqrstuvz2\"/>\n-    <SyncopeConf confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>\n+    <SyncopeConf confKey=\"smtp.host\" confValue=\"nonexistinghost-on-purpose\"/>\n     <SyncopeConf confKey=\"optin.email.from\" confValue=\"syncope@googlecode.com\"/>\n     <SyncopeConf confKey=\"optin.email.subject\" confValue=\"Welcome to Syncope!\"/>\n     <SyncopeConf confKey=\"connid.bundles.directory\" confValue=\"${bundles.directory}\"/>\n@@ -198,7 +198,7 @@\n                        bundleName=\"org.connid.bundles.soap\"\n                        connectorName=\"org.connid.bundles.soap.WebServiceConnector\"\n                        version=\"${connid.soap.version}\"\n-\t\t       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_24%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.types.ConnConfProperty%22%3E+%0A++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.types.ConnConfPropSchema%22%3E+%0A++++++%3Cvoid+property%3D%22name%22%3E+%0A+++++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22required%22%3E+%0A+++++++%3Cboolean%3Etrue%3C%2Fboolean%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cstring%3Ejava.lang.String%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A9080%2Fwssample%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.types.ConnConfProperty%22%3E+%0A++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.types.ConnConfPropSchema%22%3E+%0A++++++%3Cvoid+property%3D%22name%22%3E+%0A+++++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22required%22%3E+%0A+++++++%3Cboolean%3Etrue%3C%2Fboolean%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cstring%3Ejava.lang.String%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.connid.bundles.soap.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+\t\t       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.types.ConnConfProperty%22%3E+%0A++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.types.ConnConfPropSchema%22%3E+%0A++++++%3Cvoid+property%3D%22name%22%3E+%0A+++++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22required%22%3E+%0A+++++++%3Cboolean%3Etrue%3C%2Fboolean%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cstring%3Ejava.lang.String%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.connid.bundles.soap.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.types.ConnConfProperty%22%3E+%0A++++%3Cvoid+property%3D%22overridable%22%3E+%0A+++++%3Cboolean%3Etrue%3C%2Fboolean%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.types.ConnConfPropSchema%22%3E+%0A++++++%3Cvoid+property%3D%22name%22%3E+%0A+++++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22required%22%3E+%0A+++++++%3Cboolean%3Etrue%3C%2Fboolean%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cstring%3Ejava.lang.String%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A9080%2Fwssample%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n     <ConnInstance_capabilities ConnInstance_id=\"102\" capabilities=\"SYNC_CREATE\"/>\n     <ConnInstance_capabilities ConnInstance_id=\"102\" capabilities=\"SYNC_UPDATE\"/>\n     <ConnInstance_capabilities ConnInstance_id=\"102\" capabilities=\"SYNC_DELETE\"/>"},{"sha":"307c4cac660aba1a360528d124c51a837d071e13","filename":"pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3757a3263eada8899d319eb29f39cd37fe242ea7/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3757a3263eada8899d319eb29f39cd37fe242ea7/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=3757a3263eada8899d319eb29f39cd37fe242ea7","patch":"@@ -470,6 +470,12 @@\n                 <version>${connid.csvdir.version}</version>\n                 <scope>test</scope>\n             </dependency>\n+           \t<dependency>\n+\t        \t<groupId>org.mockito</groupId>\n+\t        \t<artifactId>mockito-core</artifactId>\n+                <scope>test</scope>\n+                <version>1.8.5</version>\n+\t        </dependency>\n             <!-- /TEST -->\n \n         </dependencies>"}]}