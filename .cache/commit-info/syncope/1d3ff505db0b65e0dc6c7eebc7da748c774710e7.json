{"sha":"1d3ff505db0b65e0dc6c7eebc7da748c774710e7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFkM2ZmNTA1ZGIwYjY1ZTBkYzZjN2VlYmM3ZGE3NDhjNzc0NzEwZTc=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2019-09-24T10:50:12Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@users.noreply.github.com","date":"2019-09-24T10:50:12Z"},"message":"NOJIRA: Clean up SpringBoot set up and @Bean methods (#118)","tree":{"sha":"d9bd9c47b890634c83f5ad12453fe895a1a11010","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d9bd9c47b890634c83f5ad12453fe895a1a11010"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1d3ff505db0b65e0dc6c7eebc7da748c774710e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1d3ff505db0b65e0dc6c7eebc7da748c774710e7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1d3ff505db0b65e0dc6c7eebc7da748c774710e7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8b693ee0d9326c08354e48aa8e26b41e12e86f5e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b693ee0d9326c08354e48aa8e26b41e12e86f5e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8b693ee0d9326c08354e48aa8e26b41e12e86f5e"}],"stats":{"total":146,"additions":83,"deletions":63},"files":[{"sha":"5087c055a050d6cf797ff6b445a634c6399236a3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=1d3ff505db0b65e0dc6c7eebc7da748c774710e7","patch":"@@ -22,8 +22,8 @@\n import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.console.init.MIMETypesLoader;\n import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n@@ -32,8 +32,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.web.filter.HiddenHttpMethodFilter;\n \n-@SpringBootApplication\n-@EnableAutoConfiguration(exclude = {\n+@SpringBootApplication(exclude = {\n     ErrorMvcAutoConfiguration.class,\n     HttpMessageConvertersAutoConfiguration.class })\n public class SyncopeConsoleApplication extends SpringBootServletInitializer {\n@@ -48,13 +47,15 @@ protected SpringApplicationBuilder configure(final SpringApplicationBuilder buil\n         return super.configure(builder);\n     }\n \n+    @ConditionalOnMissingBean(name = \"classPathScanImplementationLookup\")\n     @Bean\n     public ClassPathScanImplementationLookup classPathScanImplementationLookup() {\n         ClassPathScanImplementationLookup lookup = new ClassPathScanImplementationLookup();\n         lookup.load();\n         return lookup;\n     }\n \n+    @ConditionalOnMissingBean(name = \"mimeTypesLoader\")\n     @Bean\n     public MIMETypesLoader mimeTypesLoader() {\n         MIMETypesLoader mimeTypesLoader = new MIMETypesLoader();"},{"sha":"e85251a944ac176a032d7b828c2670136524e6c6","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java?ref=1d3ff505db0b65e0dc6c7eebc7da748c774710e7","patch":"@@ -22,8 +22,8 @@\n import org.apache.syncope.client.enduser.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.enduser.init.MIMETypesLoader;\n import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n@@ -32,8 +32,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.web.filter.HiddenHttpMethodFilter;\n \n-@SpringBootApplication\n-@EnableAutoConfiguration(exclude = {\n+@SpringBootApplication(exclude = {\n     ErrorMvcAutoConfiguration.class,\n     HttpMessageConvertersAutoConfiguration.class })\n public class SyncopeEnduserApplication extends SpringBootServletInitializer {\n@@ -48,13 +47,15 @@ protected SpringApplicationBuilder configure(final SpringApplicationBuilder buil\n         return super.configure(builder);\n     }\n \n+    @ConditionalOnMissingBean(name = \"classPathScanImplementationLookup\")\n     @Bean\n     public ClassPathScanImplementationLookup classPathScanImplementationLookup() {\n         ClassPathScanImplementationLookup lookup = new ClassPathScanImplementationLookup();\n         lookup.load();\n         return lookup;\n     }\n \n+    @ConditionalOnMissingBean(name = \"mimeTypesLoader\")\n     @Bean\n     public MIMETypesLoader mimeTypesLoader() {\n         MIMETypesLoader mimeTypesLoader = new MIMETypesLoader();"},{"sha":"aeb8c7b1def4c4f7eec2cd59f0f821c16eebe60e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/MasterDomain.java","status":"modified","additions":32,"deletions":26,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java?ref=1d3ff505db0b65e0dc6c7eebc7da748c774710e7","patch":"@@ -30,10 +30,9 @@\n import org.apache.syncope.core.persistence.jpa.spring.DomainEntityManagerFactoryBean;\n import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.springframework.context.EnvironmentAware;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.DependsOn;\n@@ -50,16 +49,17 @@\n @PropertySource(\"classpath:domains/Master.properties\")\n @PropertySource(value = \"file:${conf.directory}/domains/Master.properties\", ignoreResourceNotFound = true)\n @Configuration\n-public class MasterDomain implements EnvironmentAware {\n-\n-    private Environment env;\n+public class MasterDomain {\n \n     @Autowired\n     private CommonEntityManagerFactoryConf commonEMFConf;\n \n     @Autowired\n     private ConfigurableApplicationContext ctx;\n \n+    @Autowired\n+    private Environment env;\n+    \n     @Value(\"${Master.driverClassName}\")\n     private String driverClassName;\n \n@@ -96,11 +96,8 @@ public class MasterDomain implements EnvironmentAware {\n     @Value(\"${content.directory}\")\n     private String contentDirectory;\n \n-    @Override\n-    public void setEnvironment(final Environment env) {\n-        this.env = env;\n-    }\n-\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"localMasterDataSource\")\n     public DataSource localMasterDataSource() {\n         HikariConfig hikariConfig = new HikariConfig();\n         hikariConfig.setDriverClassName(driverClassName);\n@@ -113,15 +110,17 @@ public DataSource localMasterDataSource() {\n         return new HikariDataSource(hikariConfig);\n     }\n \n-    @Bean(\"MasterDataSource\")\n+    @Bean(name = \"MasterDataSource\")\n+    @ConditionalOnMissingBean(name = \"MasterDataSource\")\n     public JndiObjectFactoryBean masterDataSource() {\n         JndiObjectFactoryBean masterDataSource = new JndiObjectFactoryBean();\n         masterDataSource.setJndiName(\"java:comp/env/jdbc/syncopeMasterDataSource\");\n         masterDataSource.setDefaultObject(localMasterDataSource());\n         return masterDataSource;\n     }\n \n-    @Bean\n+    @Bean(name = \"MasterResourceDatabasePopulator\")\n+    @ConditionalOnMissingBean(name = \"MasterResourceDatabasePopulator\")\n     public ResourceDatabasePopulator masterResourceDatabasePopulator() {\n         ResourceDatabasePopulator databasePopulator = new ResourceDatabasePopulator();\n         databasePopulator.setContinueOnError(true);\n@@ -131,17 +130,19 @@ public ResourceDatabasePopulator masterResourceDatabasePopulator() {\n         return databasePopulator;\n     }\n \n-    @Bean\n+    @Bean(name = \"MasterDataSourceInitializer\")\n+    @ConditionalOnMissingBean(name = \"MasterDataSourceInitializer\")\n     public DataSourceInitializer masterDataSourceInitializer() {\n         DataSourceInitializer dataSourceInitializer = new DataSourceInitializer();\n-        dataSourceInitializer.setDataSource((DataSource) masterDataSource().getObject());\n+        dataSourceInitializer.setDataSource((DataSource) Objects.requireNonNull(masterDataSource().getObject()));\n         dataSourceInitializer.setEnabled(true);\n         dataSourceInitializer.setDatabasePopulator(masterResourceDatabasePopulator());\n         return dataSourceInitializer;\n     }\n \n-    @Bean(\"MasterEntityManagerFactory\")\n+    @Bean(name = \"MasterEntityManagerFactory\")\n     @DependsOn(\"commonEMFConf\")\n+    @ConditionalOnMissingBean(name = \"MasterEntityManagerFactory\")\n     public DomainEntityManagerFactoryBean masterEntityManagerFactory() {\n         OpenJpaVendorAdapter vendorAdapter = new OpenJpaVendorAdapter();\n         vendorAdapter.setShowSql(false);\n@@ -150,52 +151,57 @@ public DomainEntityManagerFactoryBean masterEntityManagerFactory() {\n         DomainEntityManagerFactoryBean masterEntityManagerFactory = new DomainEntityManagerFactoryBean();\n         masterEntityManagerFactory.setMappingResources(orm);\n         masterEntityManagerFactory.setPersistenceUnitName(\"Master\");\n-        masterEntityManagerFactory.setDataSource((DataSource) masterDataSource().getObject());\n+        \n+        masterEntityManagerFactory.setDataSource(Objects.requireNonNull((DataSource) masterDataSource().getObject()));\n         masterEntityManagerFactory.setJpaVendorAdapter(vendorAdapter);\n         masterEntityManagerFactory.setCommonEntityManagerFactoryConf(commonEMFConf);\n \n         if (env.containsProperty(\"openjpaMetaDataFactory\")) {\n             masterEntityManagerFactory.setJpaPropertyMap(Map.of(\n-                    \"openjpa.MetaDataFactory\",\n-                    Objects.requireNonNull(env.getProperty(\"openjpaMetaDataFactory\")).replace(\"##orm##\", orm)));\n+                \"openjpa.MetaDataFactory\",\n+                Objects.requireNonNull(env.getProperty(\"openjpaMetaDataFactory\")).replace(\"##orm##\", orm)));\n         }\n \n         return masterEntityManagerFactory;\n     }\n \n-    @Bean(\"MasterTransactionManager\")\n-    @Qualifier(\"Master\")\n+    @Bean(name = {\"MasterTransactionManager\", \"Master\"})\n+    @ConditionalOnMissingBean(name = \"MasterTransactionManager\")\n     public PlatformTransactionManager transactionManager() {\n         return new JpaTransactionManager(Objects.requireNonNull(masterEntityManagerFactory().getObject()));\n     }\n \n-    @Bean(\"MasterProperties\")\n+    @Bean(name = \"MasterProperties\")\n+    @ConditionalOnMissingBean(name = \"MasterProperties\")\n     public ResourceWithFallbackLoader masterProperties() {\n         ResourceWithFallbackLoader masterProperties = new ResourceWithFallbackLoader();\n         masterProperties.setPrimary(\"file:\" + contentDirectory + \"/domains/Master.properties\");\n         masterProperties.setFallback(\"classpath:domains/Master.properties\");\n         return masterProperties;\n     }\n \n-    @Bean(\"MasterContentXML\")\n+    @Bean(name = \"MasterContentXML\")\n+    @ConditionalOnMissingBean(name = \"MasterContentXML\")\n     public InputStream masterContentXML() throws IOException {\n         ResourceWithFallbackLoader masterContentXML =\n-                ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n+            ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n         masterContentXML.setPrimary(\"file:\" + contentDirectory + \"/domains/MasterContent.xml\");\n         masterContentXML.setFallback(\"classpath:domains/MasterContent.xml\");\n         return masterContentXML.getResource().getInputStream();\n     }\n \n-    @Bean(\"MasterKeymasterConfParamsJSON\")\n+    @Bean(name = \"MasterKeymasterConfParamsJSON\")\n+    @ConditionalOnMissingBean(name = \"MasterKeymasterConfParamsJSON\")\n     public InputStream masterKeymasterConfParamsJSON() throws IOException {\n         ResourceWithFallbackLoader keymasterConfParamsJSON =\n-                ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n+            ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n         keymasterConfParamsJSON.setPrimary(\"file:\" + contentDirectory + \"/domains/MasterKeymasterConfParams.json\");\n         keymasterConfParamsJSON.setFallback(\"classpath:domains/MasterKeymasterConfParams.json\");\n         return keymasterConfParamsJSON.getResource().getInputStream();\n     }\n \n-    @Bean(\"MasterDatabaseSchema\")\n+    @Bean(name = \"MasterDatabaseSchema\")\n+    @ConditionalOnMissingBean(name = \"MasterDatabaseSchema\")\n     public String masterDatabaseSchema() {\n         return schema;\n     }"},{"sha":"a26084fa55b300b8e7fabd134a07c91c6902e55e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":27,"deletions":18,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=1d3ff505db0b65e0dc6c7eebc7da748c774710e7","patch":"@@ -80,13 +80,13 @@ public CommonEntityManagerFactoryConf commonEMFConf() {\n         if (OPENJPA_LOG.isDebugEnabled()) {\n             jpaPropertyMap.put(\"openjpa.Log\", \"SQL=TRACE\");\n             jpaPropertyMap.put(\"openjpa.ConnectionFactoryProperties\",\n-                    \"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=120\");\n+                \"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=120\");\n         }\n \n         jpaPropertyMap.put(\"openjpa.NontransactionalWrite\", false);\n \n         jpaPropertyMap.put(\"openjpa.jdbc.MappingDefaults\",\n-                \"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict,\"\n+            \"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict,\"\n                 + \"FieldStrategies='\"\n                 + \"java.util.Locale=org.apache.syncope.core.persistence.jpa.openjpa.LocaleValueHandler,\"\n                 + \"java.lang.Boolean=org.apache.syncope.core.persistence.jpa.openjpa.BooleanValueHandler'\");\n@@ -102,64 +102,71 @@ public CommonEntityManagerFactoryConf commonEMFConf() {\n \n     @Bean\n     public EntityFactory entityFactory()\n-            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-            IllegalArgumentException, InvocationTargetException {\n+        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+        IllegalArgumentException, InvocationTargetException {\n \n         return (EntityFactory) Class.forName(env.getProperty(\"entity.factory\")).getConstructor().newInstance();\n     }\n \n+    @ConditionalOnMissingBean(name = \"plainSchemaDAO\")\n     @Bean\n     public PlainSchemaDAO plainSchemaDAO()\n-            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-            IllegalArgumentException, InvocationTargetException {\n+        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+        IllegalArgumentException, InvocationTargetException {\n \n         return (PlainSchemaDAO) Class.forName(env.getProperty(\"plainSchema.dao\")).getConstructor().newInstance();\n     }\n \n+    @ConditionalOnMissingBean(name = \"plainAttrDAO\")\n     @Bean\n     public PlainAttrDAO plainAttrDAO()\n-            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-            IllegalArgumentException, InvocationTargetException {\n+        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+        IllegalArgumentException, InvocationTargetException {\n \n         return (PlainAttrDAO) Class.forName(env.getProperty(\"plainAttr.dao\")).getConstructor().newInstance();\n     }\n \n+    @ConditionalOnMissingBean(name = \"plainAttrValueDAO\")\n     @Bean\n     public PlainAttrValueDAO plainAttrValueDAO()\n-            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-            IllegalArgumentException, InvocationTargetException {\n+        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+        IllegalArgumentException, InvocationTargetException {\n \n         return (PlainAttrValueDAO) Class.forName(env.getProperty(\"plainAttrValue.dao\")).getConstructor().newInstance();\n     }\n \n+    @ConditionalOnMissingBean(name = \"anySearchDAO\")\n     @Bean\n     public AnySearchDAO anySearchDAO()\n-            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-            IllegalArgumentException, InvocationTargetException {\n+        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+        IllegalArgumentException, InvocationTargetException {\n \n         return (AnySearchDAO) Class.forName(env.getProperty(\"any.search.dao\")).getConstructor().newInstance();\n     }\n \n+    @ConditionalOnMissingBean(name = \"userDAO\")\n     @Bean\n     public UserDAO userDAO()\n-            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-            IllegalArgumentException, InvocationTargetException {\n+        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+        IllegalArgumentException, InvocationTargetException {\n \n         return (UserDAO) Class.forName(env.getProperty(\"user.dao\")).getConstructor().newInstance();\n     }\n \n+    @ConditionalOnMissingBean(name = \"groupDAO\")\n     @Bean\n     public GroupDAO groupDAO()\n-            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-            IllegalArgumentException, InvocationTargetException {\n+        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+        IllegalArgumentException, InvocationTargetException {\n \n         return (GroupDAO) Class.forName(env.getProperty(\"group.dao\")).getConstructor().newInstance();\n     }\n \n+    @ConditionalOnMissingBean(name = \"anyObjectDAO\")\n     @Bean\n     public AnyObjectDAO anyObjectDAO()\n-            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-            IllegalArgumentException, InvocationTargetException {\n+        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+        IllegalArgumentException, InvocationTargetException {\n \n         return (AnyObjectDAO) Class.forName(env.getProperty(\"anyObject.dao\")).getConstructor().newInstance();\n     }\n@@ -169,6 +176,7 @@ public Validator localValidatorFactoryBean() {\n         return new LocalValidatorFactoryBean();\n     }\n \n+    @ConditionalOnMissingBean(name = \"viewsXML\")\n     @Bean\n     public ResourceWithFallbackLoader viewsXML() {\n         ResourceWithFallbackLoader viewsXML = new ResourceWithFallbackLoader();\n@@ -177,6 +185,7 @@ public ResourceWithFallbackLoader viewsXML() {\n         return viewsXML;\n     }\n \n+    @ConditionalOnMissingBean(name = \"indexesXML\")\n     @Bean\n     public ResourceWithFallbackLoader indexesXML() {\n         ResourceWithFallbackLoader indexesXML = new ResourceWithFallbackLoader();"},{"sha":"9c9aaf4045874a6a6f0f3a9286e6980054c4f5a2","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreApplication.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java?ref=1d3ff505db0b65e0dc6c7eebc7da748c774710e7","patch":"@@ -21,8 +21,8 @@\n import java.io.IOException;\n import org.apache.cxf.spring.boot.autoconfigure.openapi.OpenApiAutoConfiguration;\n import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\n@@ -34,22 +34,22 @@\n import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n \n-@SpringBootApplication\n-@EnableTransactionManagement\n-@EnableAutoConfiguration(exclude = {\n+@SpringBootApplication(exclude = {\n     ErrorMvcAutoConfiguration.class,\n     HttpMessageConvertersAutoConfiguration.class,\n     OpenApiAutoConfiguration.class,\n     DataSourceAutoConfiguration.class,\n     DataSourceTransactionManagerAutoConfiguration.class,\n     JdbcTemplateAutoConfiguration.class,\n     QuartzAutoConfiguration.class })\n+@EnableTransactionManagement\n public class SyncopeCoreApplication extends SpringBootServletInitializer {\n \n     public static void main(final String[] args) {\n         SpringApplication.run(SyncopeCoreApplication.class, args);\n     }\n \n+    @ConditionalOnMissingBean(name = \"propertySourcesPlaceholderConfigurer\")\n     @Bean\n     public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() throws IOException {\n         PropertySourcesPlaceholderConfigurer pspc = new PropertySourcesPlaceholderConfigurer();"},{"sha":"6590302596d69ec73ba52b84611a38de33a3c5b5","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterClientContext.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java?ref=1d3ff505db0b65e0dc6c7eebc7da748c774710e7","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.PropertySource;\n@@ -49,6 +50,7 @@ public class SelfKeymasterClientContext {\n \n     @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^http.+'}\")\n     @Bean\n+    @ConditionalOnMissingBean(name = \"selfKeymasterRESTClientFactoryBean\")\n     public JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean() {\n         JAXRSClientFactoryBean restClientFactoryBean = new JAXRSClientFactoryBean();\n         restClientFactoryBean.setAddress(address);\n@@ -58,25 +60,29 @@ public JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean() {\n         restClientFactoryBean.setInheritHeaders(true);\n         restClientFactoryBean.setFeatures(List.of(new LoggingFeature()));\n         restClientFactoryBean.setProviders(\n-                List.of(new JacksonJsonProvider(), new SelfKeymasterClientExceptionMapper()));\n+            List.of(new JacksonJsonProvider(), new SelfKeymasterClientExceptionMapper()));\n         return restClientFactoryBean;\n     }\n \n     @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^http.+'}\")\n     @Bean\n+    @ConditionalOnMissingBean(name = \"selfConfParamOps\")\n     public ConfParamOps selfConfParamOps() {\n         return new SelfKeymasterConfParamOps(selfKeymasterRESTClientFactoryBean());\n     }\n \n     @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^http.+'}\")\n     @Bean\n+    @ConditionalOnMissingBean(name = \"selfServiceOps\")\n     public ServiceOps selfServiceOps() {\n         return new SelfKeymasterServiceOps(selfKeymasterRESTClientFactoryBean(), 5);\n     }\n \n     @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^http.+'}\")\n     @Bean\n+    @ConditionalOnMissingBean(name = \"domainOps\")\n     public DomainOps domainOps() {\n         return new SelfKeymasterDomainOps(selfKeymasterRESTClientFactoryBean());\n     }\n }\n+"},{"sha":"fc319f25abec944b9b002863103e47522b70fc51","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/SyncopeBuildToolsApplication.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ff505db0b65e0dc6c7eebc7da748c774710e7/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java?ref=1d3ff505db0b65e0dc6c7eebc7da748c774710e7","patch":"@@ -34,23 +34,20 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n import org.springframework.jdbc.datasource.DriverManagerDataSource;\n \n-@SpringBootApplication\n-@ComponentScan(\"org.apache.syncope.fit.buildtools\")\n-@EnableAutoConfiguration(exclude = {\n-    ErrorMvcAutoConfiguration.class,\n-    WebMvcAutoConfiguration.class,\n-    HttpMessageConvertersAutoConfiguration.class })\n+@SpringBootApplication(scanBasePackages = \"org.apache.syncope.fit.buildtools\",\n+    exclude = {\n+        ErrorMvcAutoConfiguration.class,\n+        WebMvcAutoConfiguration.class,\n+        HttpMessageConvertersAutoConfiguration.class })\n public class SyncopeBuildToolsApplication extends SpringBootServletInitializer {\n \n     public static void main(final String[] args) {"}]}