{"sha":"1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE3MzhjMWMzMjkxZmU0NTlkODkzZjBlNWNjNGIzYTQyYzllOTlhZGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-08T14:25:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-08T14:25:07Z"},"message":"[SYNCOPE-744] Sample widget from Camel ext","tree":{"sha":"6a9abb800d60b832f7184f00d58ad2e8848bd2bb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6a9abb800d60b832f7184f00d58ad2e8848bd2bb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"09e696b3d0a64ba4790365501aa2f5bf1606af0e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/09e696b3d0a64ba4790365501aa2f5bf1606af0e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/09e696b3d0a64ba4790365501aa2f5bf1606af0e"}],"stats":{"total":613,"additions":565,"deletions":48},"files":[{"sha":"6741e8547a75b0d1cf10771a58b53a4e24c0c40b","filename":"client/console/src/main/java/org/apache/syncope/client/console/annotations/ExtWidget.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fannotations%2FExtWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fannotations%2FExtWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fannotations%2FExtWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface ExtWidget {\n+\n+    /**\n+     * @return Bootstrap CSS class name for setting column width\n+     */\n+    String cssClass() default \"col-md-6\";\n+\n+    /**\n+     * @return the priority used to determine the display order under the \"Extensions\" tab, on the dashboard; the\n+     * higher value, the higher rank\n+     */\n+    int priority() default 0;\n+}"},{"sha":"13ce3ba356065002c469226556d18aa34d291c85","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/PreviewUtils.java","status":"modified","additions":3,"deletions":15,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -18,31 +18,20 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.console.init.ConsoleInitializer;\n import org.apache.syncope.client.console.wicket.markup.html.form.preview.AbstractBinaryPreviewer;\n import org.apache.syncope.client.console.wicket.markup.html.form.preview.DefaultPreviewer;\n-import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n \n public final class PreviewUtils {\n \n     public static PreviewUtils getInstance() {\n         return new PreviewUtils();\n     }\n \n-    private static <T> Constructor<T> getConstructorIfAvailable(final Class<T> clazz, final Class<?>... paramTypes) {\n-        Assert.notNull(clazz, \"Class must not be null\");\n-        try {\n-            return clazz.getConstructor(paramTypes);\n-        } catch (NoSuchMethodException ex) {\n-            return null;\n-        }\n-    }\n-\n     private final ClassPathScanImplementationLookup classPathScanImplementationLookup;\n \n     private PreviewUtils() {\n@@ -64,10 +53,9 @@ public AbstractBinaryPreviewer getPreviewer(final String mimeType) {\n         try {\n             return previewer == null\n                     ? null\n-                    : getConstructorIfAvailable(previewer, String.class, String.class).\n+                    : ClassUtils.getConstructorIfAvailable(previewer, String.class, String.class).\n                     newInstance(new Object[] { \"previewer\", mimeType });\n-        } catch (InstantiationException | IllegalAccessException \n-                | IllegalArgumentException | InvocationTargetException e) {\n+        } catch (Exception e) {\n             return null;\n         }\n     }"},{"sha":"194d3dd4ae4364bef18f7cdd13a3aa46a8ed32af","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":36,"deletions":8,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -23,13 +23,16 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import org.apache.commons.collections4.ComparatorUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.pages.BaseExtPage;\n import org.apache.syncope.client.console.annotations.BinaryPreview;\n import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.console.annotations.ExtWidget;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.wicket.markup.html.form.preview.AbstractBinaryPreviewer;\n+import org.apache.syncope.client.console.widgets.BaseExtWidget;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.config.BeanDefinition;\n@@ -47,16 +50,20 @@ public class ClassPathScanImplementationLookup {\n \n     private List<Class<? extends BaseExtPage>> extPages;\n \n+    private List<Class<? extends BaseExtWidget>> extWidgets;\n+\n     @SuppressWarnings(\"unchecked\")\n     public void load() {\n         pages = new ArrayList<>();\n         previewers = new ArrayList<>();\n         extPages = new ArrayList<>();\n+        extWidgets = new ArrayList<>();\n \n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n         scanner.addIncludeFilter(new AssignableTypeFilter(BasePage.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AbstractBinaryPreviewer.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(BaseExtPage.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(BaseExtWidget.class));\n \n         for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n             try {\n@@ -72,6 +79,13 @@ public void load() {\n                             LOG.error(\"Could not find annotation {} in {}, ignoring\",\n                                     ExtPage.class.getName(), clazz.getName());\n                         }\n+                    } else if (BaseExtWidget.class.isAssignableFrom(clazz)) {\n+                        if (clazz.isAnnotationPresent(ExtWidget.class)) {\n+                            extWidgets.add((Class<? extends BaseExtWidget>) clazz);\n+                        } else {\n+                            LOG.error(\"Could not find annotation {} in {}, ignoring\",\n+                                    ExtWidget.class.getName(), clazz.getName());\n+                        }\n                     } else if (BasePage.class.isAssignableFrom(clazz)) {\n                         pages.add((Class<? extends BasePage>) clazz);\n                     } else if (AbstractBinaryPreviewer.class.isAssignableFrom(clazz)) {\n@@ -92,20 +106,30 @@ public int compare(\n                     final Class<? extends BaseExtPage> o1,\n                     final Class<? extends BaseExtPage> o2) {\n \n-                int prio1 = o1.getAnnotation(ExtPage.class).priority();\n-                int prio2 = o2.getAnnotation(ExtPage.class).priority();\n-\n-                return prio1 > prio2\n-                        ? 1\n-                        : prio1 == prio2\n-                                ? 0\n-                                : -1;\n+                return ComparatorUtils.<Integer>naturalComparator().compare(\n+                        o1.getAnnotation(ExtPage.class).priority(),\n+                        o2.getAnnotation(ExtPage.class).priority());\n             }\n         });\n         extPages = Collections.unmodifiableList(extPages);\n \n+        Collections.sort(extWidgets, new Comparator<Class<? extends BaseExtWidget>>() {\n+\n+            @Override\n+            public int compare(\n+                    final Class<? extends BaseExtWidget> o1,\n+                    final Class<? extends BaseExtWidget> o2) {\n+\n+                return ComparatorUtils.<Integer>naturalComparator().compare(\n+                        o1.getAnnotation(ExtWidget.class).priority(),\n+                        o2.getAnnotation(ExtWidget.class).priority());\n+            }\n+        });\n+        extWidgets = Collections.unmodifiableList(extWidgets);\n+\n         LOG.debug(\"Binary previewers found: {}\", previewers);\n         LOG.debug(\"Extension pages found: {}\", extPages);\n+        LOG.debug(\"Extension widgets found: {}\", extWidgets);\n     }\n \n     public Class<? extends AbstractBinaryPreviewer> getPreviewerClass(final String mimeType) {\n@@ -134,4 +158,8 @@ public List<Class<? extends BaseExtPage>> getExtPageClasses() {\n         return extPages;\n     }\n \n+    public List<Class<? extends BaseExtWidget>> getExtWidgetClasses() {\n+        return extWidgets;\n+    }\n+\n }"},{"sha":"50a7ae8bf21fbe8a6a86a2f94b0504188fcbdf17","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Dashboard.java","status":"modified","additions":20,"deletions":9,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -21,9 +21,13 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.client.console.SyncopeConsoleApplication;\n+import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.client.console.init.ConsoleInitializer;\n import org.apache.syncope.client.console.panels.DashboardControlPanel;\n import org.apache.syncope.client.console.panels.DashboardExtensionsPanel;\n import org.apache.syncope.client.console.panels.DashboardOverviewPanel;\n+import org.apache.syncope.client.console.widgets.BaseExtWidget;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -67,15 +71,22 @@ public Panel getPanel(final String panelId) {\n             }\n         });\n \n-        tabs.add(new AbstractTab(new ResourceModel(\"extensions\")) {\n-\n-            private static final long serialVersionUID = -6815067322125799251L;\n-\n-            @Override\n-            public Panel getPanel(final String panelId) {\n-                return new DashboardExtensionsPanel(panelId, getPageReference());\n-            }\n-        });\n+        ClassPathScanImplementationLookup classPathScanImplementationLookup =\n+                (ClassPathScanImplementationLookup) SyncopeConsoleApplication.get().\n+                getServletContext().getAttribute(ConsoleInitializer.CLASSPATH_LOOKUP);\n+        final List<Class<? extends BaseExtWidget>> extWidgetClasses =\n+                classPathScanImplementationLookup.getExtWidgetClasses();\n+        if (!extWidgetClasses.isEmpty()) {\n+            tabs.add(new AbstractTab(new ResourceModel(\"extensions\")) {\n+\n+                private static final long serialVersionUID = -6815067322125799251L;\n+\n+                @Override\n+                public Panel getPanel(final String panelId) {\n+                    return new DashboardExtensionsPanel(panelId, extWidgetClasses, getPageReference());\n+                }\n+            });\n+        }\n \n         return tabs;\n     }"},{"sha":"14ac72fb8c8e3a44ffe60b2db26a01c537e8eac8","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DashboardExtensionsPanel.java","status":"modified","additions":53,"deletions":1,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardExtensionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardExtensionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardExtensionsPanel.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -18,14 +18,66 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.console.annotations.ExtWidget;\n+import org.apache.syncope.client.console.widgets.BaseExtWidget;\n+import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.markup.html.panel.Panel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.ClassUtils;\n \n public class DashboardExtensionsPanel extends Panel {\n \n     private static final long serialVersionUID = 6381578992589664490L;\n \n-    public DashboardExtensionsPanel(final String id, final PageReference pageRef) {\n+    protected static final Logger LOG = LoggerFactory.getLogger(DashboardExtensionsPanel.class);\n+\n+    public DashboardExtensionsPanel(\n+            final String id, final List<Class<? extends BaseExtWidget>> extWidgetClasses, final PageReference pageRef) {\n+\n         super(id);\n+\n+        List<BaseExtWidget> instances = new ArrayList<>();\n+\n+        for (final Class<? extends BaseExtWidget> clazz : extWidgetClasses) {\n+            final Constructor<? extends BaseExtWidget> constructor =\n+                    ClassUtils.getConstructorIfAvailable(clazz, String.class, PageReference.class);\n+            if (constructor == null) {\n+                LOG.error(\"Could not find required construtor in {}, ignoring\", clazz);\n+            } else {\n+                try {\n+                    instances.add(constructor.newInstance(\"widget\", pageRef));\n+                } catch (Exception e) {\n+                    LOG.error(\"While creating instance of {}\", clazz, e);\n+                }\n+            }\n+        }\n+\n+        ListView<BaseExtWidget> widgets = new ListView<BaseExtWidget>(\"widgets\", instances) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<BaseExtWidget> item) {\n+                WebMarkupContainer widgetContainer = new WebMarkupContainer(\"widgetContainer\");\n+                widgetContainer.setOutputMarkupId(true);\n+                ExtWidget ann = item.getModelObject().getClass().getAnnotation(ExtWidget.class);\n+                if (ann != null) {\n+                    widgetContainer.add(new AttributeModifier(\"class\", ann.cssClass()));\n+                }\n+                item.add(widgetContainer);\n+\n+                item.getModelObject().setOutputMarkupId(true);\n+                widgetContainer.add(item.getModelObject());\n+            }\n+        };\n+        add(widgets);\n     }\n }"},{"sha":"e2c2c3acff39cbbc1eaf9f442ecc565dd83e0775","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/AnyByRealmWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAnyByRealmWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAnyByRealmWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAnyByRealmWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.wicket.model.Model;\n \n-public class AnyByRealmWidget extends AbstractWidget {\n+public class AnyByRealmWidget extends BaseWidget {\n \n     private static final long serialVersionUID = -816175678514035085L;\n "},{"sha":"a66480b34517d2b2ddaa699898fd2d8dd4ccedc1","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/BaseExtWidget.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FBaseExtWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FBaseExtWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FBaseExtWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.widgets;\n+\n+import org.apache.wicket.PageReference;\n+\n+public abstract class BaseExtWidget extends BaseWidget {\n+\n+    private static final long serialVersionUID = 8457902382090657976L;\n+\n+    protected final PageReference pageRef;\n+\n+    public BaseExtWidget(final String id, final PageReference pageRef) {\n+        super(id);\n+        this.pageRef = pageRef;\n+    }\n+\n+}"},{"sha":"048591115a3d44092431db943dbd3bcf414ca533","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/BaseWidget.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FBaseWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FBaseWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FBaseWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -20,11 +20,11 @@\n \n import org.apache.wicket.markup.html.panel.Panel;\n \n-public abstract class AbstractWidget extends Panel {\n+public abstract class BaseWidget extends Panel {\n \n     private static final long serialVersionUID = -4186604985011430091L;\n \n-    public AbstractWidget(final String id) {\n+    public BaseWidget(final String id) {\n         super(id);\n     }\n ","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/AbstractWidget.java"},{"sha":"99bdca584e54157f57ef3560f57ef99a37d719ab","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/CompletenessWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCompletenessWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCompletenessWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCompletenessWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -38,7 +38,7 @@\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n import org.apache.wicket.model.Model;\n \n-public class CompletenessWidget extends AbstractWidget {\n+public class CompletenessWidget extends BaseWidget {\n \n     private static final long serialVersionUID = 7667120094526529934L;\n "},{"sha":"0e611286d6adede17d498c8be711f4430aac63bd","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -71,7 +71,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class JobWidget extends AbstractWidget {\n+public class JobWidget extends BaseWidget {\n \n     private static final long serialVersionUID = 7667120094526529934L;\n "},{"sha":"c9f95e131ba885862136e71e6f95f7bbe8a0c855","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/LoadWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -28,7 +28,7 @@\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.model.Model;\n \n-public class LoadWidget extends AbstractWidget {\n+public class LoadWidget extends BaseWidget {\n \n     private static final long serialVersionUID = -816175678514035085L;\n "},{"sha":"94ba5703aceb3efc16b7e94829799ad059841aa6","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/NumberWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -22,7 +22,7 @@\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n \n-public class NumberWidget extends AbstractWidget {\n+public class NumberWidget extends BaseWidget {\n \n     private static final long serialVersionUID = -816175678514035085L;\n "},{"sha":"7d52d8172ab360e4acbea4b15267b7d1fed391be","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -91,7 +91,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class ReconciliationWidget extends AbstractWidget {\n+public class ReconciliationWidget extends BaseWidget {\n \n     private static final long serialVersionUID = -816175678514035085L;\n "},{"sha":"e11b5db6c45d526e8259d11e79b00e4847ffde0c","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/UsersByStatusWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUsersByStatusWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUsersByStatusWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUsersByStatusWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -23,7 +23,7 @@\n import java.util.Map;\n import org.apache.wicket.model.Model;\n \n-public class UsersByStatusWidget extends AbstractWidget {\n+public class UsersByStatusWidget extends BaseWidget {\n \n     private static final long serialVersionUID = -816175678514035085L;\n "},{"sha":"e8c6190a30301f6e1a68fe0854533b9e02014dbc","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/DashboardExtensionsPanel.html","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardExtensionsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardExtensionsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardExtensionsPanel.html?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -18,5 +18,12 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n+    <span wicket:id=\"widgets\">\n+      <div class=\"row\">\n+        <div wicket:id=\"widgetContainer\">\n+          <span wicket:id=\"widget\"/>\n+        </div>\n+      </div>\n+    </span>\n   </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"642e4dcba54b973e1c572ca080a6beb87f81ae84","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/widgets/CamelMetricsWidget.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.widgets;\n+\n+import com.pingunaut.wicket.chartjs.chart.impl.Bar;\n+import com.pingunaut.wicket.chartjs.core.panel.BarChartPanel;\n+import com.pingunaut.wicket.chartjs.data.sets.BarDataSet;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.annotations.ExtWidget;\n+import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n+import org.apache.syncope.common.lib.to.CamelMetrics;\n+import org.apache.syncope.common.rest.api.service.CamelRouteService;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.util.time.Duration;\n+\n+@ExtWidget(cssClass = \"col-md-6\")\n+public class CamelMetricsWidget extends BaseExtWidget {\n+\n+    private static final long serialVersionUID = 4157815058487313617L;\n+\n+    private List<CamelMetrics.MeanRate> meanRates;\n+\n+    private final BarChartPanel chart;\n+\n+    public CamelMetricsWidget(final String id, final PageReference pageRef) {\n+        super(id, pageRef);\n+\n+        WebMarkupContainer container = new WebMarkupContainer(\"container\");\n+        container.setOutputMarkupId(true);\n+        add(container);\n+\n+        CamelMetrics metrics = SyncopeConsoleSession.get().getService(CamelRouteService.class).metrics();\n+        meanRates = new ArrayList<>(5);\n+        for (int i = 0; i < 5; i++) {\n+            meanRates.add(metrics.getResponseMeanRates().get(i));\n+        }\n+\n+        chart = new BarChartPanel(\"chart\", Model.of(build(meanRates)));\n+        container.add(chart);\n+\n+        container.add(new IndicatorAjaxTimerBehavior(Duration.seconds(60)) {\n+\n+            private static final long serialVersionUID = -4426283634345968585L;\n+\n+            @Override\n+            protected void onTimer(final AjaxRequestTarget target) {\n+                CamelMetrics metrics = SyncopeConsoleSession.get().getService(CamelRouteService.class).metrics();\n+                List<CamelMetrics.MeanRate> updatedMeanRates = new ArrayList<>(5);\n+                for (int i = 0; i < 5; i++) {\n+                    updatedMeanRates.add(metrics.getResponseMeanRates().get(i));\n+                }\n+\n+                if (refresh(updatedMeanRates)) {\n+                    target.add(CamelMetricsWidget.this);\n+                }\n+            }\n+        });\n+    }\n+\n+    private Bar build(final List<CamelMetrics.MeanRate> meanRates) {\n+        Bar bar = new Bar();\n+        bar.getOptions().setScaleBeginAtZero(true);\n+        bar.getOptions().setScaleShowGridLines(true);\n+        bar.getOptions().setScaleGridLineWidth(1);\n+        bar.getOptions().setBarShowStroke(true);\n+        bar.getOptions().setBarStrokeWidth(2);\n+        bar.getOptions().setBarValueSpacing(5);\n+        bar.getOptions().setBarDatasetSpacing(1);\n+        bar.getOptions().setResponsive(true);\n+        bar.getOptions().setMaintainAspectRatio(true);\n+\n+        bar.getData().setLabels(CollectionUtils.collect(meanRates, new Transformer<CamelMetrics.MeanRate, String>() {\n+\n+            @Override\n+            public String transform(final CamelMetrics.MeanRate input) {\n+                return input.getRouteId();\n+            }\n+        }, new ArrayList<String>()));\n+\n+        BarDataSet dataset = new BarDataSet(CollectionUtils.collect(meanRates,\n+                new Transformer<CamelMetrics.MeanRate, Double>() {\n+\n+            @Override\n+            public Double transform(final CamelMetrics.MeanRate input) {\n+                return input.getValue();\n+            }\n+        }, new ArrayList<Double>()));\n+        dataset.setFillColor(\"blue\");\n+        bar.getData().setDatasets(Collections.singletonList(dataset));\n+\n+        return bar;\n+    }\n+\n+    private boolean refresh(final List<CamelMetrics.MeanRate> meanRates) {\n+        if (!this.meanRates.equals(meanRates)) {\n+            this.meanRates = meanRates;\n+\n+            chart.setDefaultModelObject(build(meanRates));\n+            return true;\n+        }\n+        return false;\n+    }\n+}"},{"sha":"acbce551f7a05f9128703e46ae7734d0dc4dc17c","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/widgets/CamelMetricsWidget.html","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.html?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -0,0 +1,33 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"box box-default box-solid\">\n+      <div class=\"box-header with-border\">\n+        <h3 class=\"box-title\"><wicket:message key=\"camelMetrics\"/></h3>\n+        <div class=\"box-tools pull-right\">\n+          <button class=\"btn btn-box-tool\" data-widget=\"collapse\"><i class=\"fa fa-minus\"></i></button>\n+        </div>\n+      </div>\n+      <div class=\"box-body\" wicket:id=\"container\">\n+        <div class=\"chart\" wicket:id=\"chart\"/>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"c8bdd12874489b9b1461ed040f44b8d22920de8a","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/widgets/CamelMetricsWidget.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.properties?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+camelMetrics=Camel Metrics"},{"sha":"7df012d5283a0a3d5355d6e58e4a59e018c8d34b","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/widgets/CamelMetricsWidget_it.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_it.properties?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+camelMetrics=Metriche Camel"},{"sha":"57a15ed5113c965f374bf153122519f17538b9d5","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/widgets/CamelMetricsWidget_pt_BR.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_pt_BR.properties?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+camelMetrics=M\\u00e9tricas Camel"},{"sha":"050c63ceae7e480fba6bc3d59f1eb789b56a11b9","filename":"ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelMetrics.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelMetrics.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelMetrics.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelMetrics.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"camelMetrics\")\n+@XmlType\n+public class CamelMetrics extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -391404198406614231L;\n+\n+    @XmlRootElement(name = \"meanRate\")\n+    @XmlType\n+    public static class MeanRate extends AbstractBaseBean {\n+\n+        private static final long serialVersionUID = -233921226510124154L;\n+\n+        private String routeId;\n+\n+        private double value;\n+\n+        public String getRouteId() {\n+            return routeId;\n+        }\n+\n+        public void setRouteId(final String routeId) {\n+            this.routeId = routeId;\n+        }\n+\n+        public double getValue() {\n+            return value;\n+        }\n+\n+        public void setValue(final double value) {\n+            this.value = value;\n+        }\n+\n+    }\n+\n+    private final List<MeanRate> responseMeanRates = new ArrayList<>();\n+\n+    @XmlElementWrapper(name = \"responseMeanRates\")\n+    @XmlElement(name = \"meanRate\")\n+    @JsonProperty(\"responseMeanRates\")\n+    public List<MeanRate> getResponseMeanRates() {\n+        return responseMeanRates;\n+    }\n+\n+}"},{"sha":"b30a01055d0f1531e55e1cff69854c431651f7b9","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelRouteLogic.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -18,10 +18,19 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n+import org.apache.camel.component.metrics.routepolicy.MetricsRegistryService;\n+import java.util.Map;\n+import org.apache.commons.collections4.ComparatorUtils;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.CamelMetrics;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CamelEntitlement;\n@@ -87,6 +96,35 @@ public void restartContext() {\n         context.restartContext();\n     }\n \n+    @PreAuthorize(\"isAuthenticated()\")\n+    public CamelMetrics metrics() {\n+        CamelMetrics metrics = new CamelMetrics();\n+\n+        MetricsRegistryService registryService = context.getContext().hasService(MetricsRegistryService.class);\n+        if (registryService == null) {\n+            LOG.warn(\"Camel metrics not available\");\n+        } else {\n+            MetricRegistry registry = registryService.getMetricsRegistry();\n+            for (Map.Entry<String, Timer> entry : registry.getTimers().entrySet()) {\n+                CamelMetrics.MeanRate meanRate = new CamelMetrics.MeanRate();\n+                meanRate.setRouteId(StringUtils.substringBetween(entry.getKey(), \":\", \".\"));\n+                meanRate.setValue(entry.getValue().getMeanRate());\n+                metrics.getResponseMeanRates().add(meanRate);\n+            }\n+\n+            Collections.sort(metrics.getResponseMeanRates(), new Comparator<CamelMetrics.MeanRate>() {\n+\n+                @Override\n+                public int compare(final CamelMetrics.MeanRate o1, final CamelMetrics.MeanRate o2) {\n+                    return ComparatorUtils.reversedComparator(ComparatorUtils.<Double>naturalComparator()).\n+                            compare(o1.getValue(), o2.getValue());\n+                }\n+            });\n+        }\n+\n+        return metrics;\n+    }\n+\n     @Override\n     protected CamelRouteTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {"},{"sha":"e75927d29eddf5e27c9c6785db4b1423d4a235cf","filename":"ext/camel/provisioning-camel/pom.xml","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fprovisioning-camel%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fprovisioning-camel%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fpom.xml?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -50,7 +50,11 @@ under the License.\n       <groupId>org.apache.camel</groupId>\n       <artifactId>camel-script</artifactId>\n     </dependency>\n-      \n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-metrics</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.core</groupId>\n       <artifactId>syncope-core-provisioning-java</artifactId>"},{"sha":"04b3952c47af0f72cf6db91a247b79270c6d94e7","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import javax.xml.bind.JAXBContext;\n import javax.xml.bind.Unmarshaller;\n+import org.apache.camel.component.metrics.routepolicy.MetricsRoutePolicyFactory;\n import org.apache.camel.model.Constants;\n import org.apache.camel.model.RouteDefinition;\n import org.apache.camel.spring.SpringCamelContext;\n@@ -55,6 +56,7 @@ public SpringCamelContext getContext() {\n         synchronized (this) {\n             if (camelContext == null) {\n                 camelContext = new SpringCamelContext(ApplicationContextProvider.getApplicationContext());\n+                camelContext.addRoutePolicyFactory(new MetricsRoutePolicyFactory());\n             }\n         }\n \n@@ -103,11 +105,9 @@ private void loadContext(final List<CamelRoute> routes) {\n     public void updateContext(final String routeKey) {\n         if (camelContext == null) {\n             getContext();\n-        } else {\n-            if (!camelContext.getRouteDefinitions().isEmpty()) {\n-                camelContext.getRouteDefinitions().remove(camelContext.getRouteDefinition(routeKey));\n-                loadContext(Collections.singletonList(routeDAO.find(routeKey)));\n-            }\n+        } else if (!camelContext.getRouteDefinitions().isEmpty()) {\n+            camelContext.getRouteDefinitions().remove(camelContext.getRouteDefinition(routeKey));\n+            loadContext(Collections.singletonList(routeDAO.find(routeKey)));\n         }\n     }\n "},{"sha":"d31a90356e7e65f0a42cca3943956107e1bb6cbf","filename":"ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -29,6 +29,7 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.CamelMetrics;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n@@ -75,4 +76,14 @@ public interface CamelRouteService extends JAXRSService {\n     @POST\n     @Path(\"restartContext\")\n     void restartContext();\n+\n+    /**\n+     * Provides Camel metrics.\n+     *\n+     * @return Camel metrics\n+     */\n+    @GET\n+    @Path(\"metrics\")\n+    @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    CamelMetrics metrics();\n }"},{"sha":"163847f0cb8625cbd6d93a8016346c00ce9e143f","filename":"ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.to.CamelMetrics;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n@@ -52,4 +53,9 @@ public void restartContext() {\n         logic.restartContext();\n     }\n \n+    @Override\n+    public CamelMetrics metrics() {\n+        return logic.metrics();\n+    }\n+\n }"},{"sha":"985817bdfa362aa63c76216aa72c53dfc2b08fef","filename":"fit/core-reference/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -823,6 +823,13 @@ under the License.\n                       <exclude>workflowActivitiContext.xml</exclude>\n                     </excludes>\n                   </resource>\n+\n+                  <resource>\n+                    <directory>${basedir}/../../ext/camel/common-lib/target/classes</directory>\n+                  </resource>\n+                  <resource>\n+                    <directory>${basedir}/../../ext/camel/logic/target/classes</directory>\n+                  </resource>\n                   <resource>\n                     <directory>${basedir}/../../ext/camel/provisioning-camel/target/classes</directory>\n                     <excludes>"},{"sha":"8840194d15ad1d129ed92666c2f50d73ad909a59","filename":"pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1738c1c3291fe459d893f0e5cc4b3a42c9e99adc/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=1738c1c3291fe459d893f0e5cc4b3a42c9e99adc","patch":"@@ -570,6 +570,11 @@ under the License.\n         <artifactId>camel-script</artifactId>\n         <version>${camel.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>camel-metrics</artifactId>\n+        <version>${camel.version}</version>\n+      </dependency>\n       <!-- /Camel -->\n       \n       <dependency>"}]}