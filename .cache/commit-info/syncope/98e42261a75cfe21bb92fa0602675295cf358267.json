{"sha":"98e42261a75cfe21bb92fa0602675295cf358267","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk4ZTQyMjYxYTc1Y2ZlMjFiYjkyZmEwNjAyNjc1Mjk1Y2YzNTgyNjc=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-06-23T10:55:39Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-06-23T10:55:39Z"},"message":"Fixes issue 111\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246994 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b2663824101728eb99c369fbcc2a77305b4ac7e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0b2663824101728eb99c369fbcc2a77305b4ac7e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/98e42261a75cfe21bb92fa0602675295cf358267","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/98e42261a75cfe21bb92fa0602675295cf358267","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/98e42261a75cfe21bb92fa0602675295cf358267","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/98e42261a75cfe21bb92fa0602675295cf358267/comments","author":null,"committer":null,"parents":[{"sha":"87174da318040c3ae9832eb578013b2e7390febe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/87174da318040c3ae9832eb578013b2e7390febe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/87174da318040c3ae9832eb578013b2e7390febe"}],"stats":{"total":211,"additions":171,"deletions":40},"files":[{"sha":"e16d7049cb97c284ef0e4e98a9aeb8390921179d","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=98e42261a75cfe21bb92fa0602675295cf358267","patch":"@@ -19,6 +19,8 @@\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n+import org.apache.commons.jexl2.JexlContext;\n+import org.apache.commons.jexl2.MapContext;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.syncope.core.util.ApplicationContextManager;\n import org.syncope.core.util.JexlUtil;\n@@ -47,8 +49,15 @@ public String getValue(\n                 ApplicationContextManager.getApplicationContext();\n         JexlUtil jexlUtil = (JexlUtil) context.getBean(\"jexlUtil\");\n \n+        // Prepare context using user attributes\n+        JexlContext jexlContext = new MapContext();\n+\n+        jexlContext = jexlUtil.addAttributesToContext(\n+                attributes, jexlContext);\n+\n+        // Evaluate expression using the context prepared before\n         return jexlUtil.evaluateWithAttributes(\n-                getDerivedSchema().getExpression(), attributes);\n+                getDerivedSchema().getExpression(), jexlContext);\n     }\n \n     public abstract <T extends AbstractAttributable> T getOwner();"},{"sha":"e455b9810b14c07e54dac642d7d8929522b9f3c7","filename":"core/src/main/java/org/syncope/core/persistence/dao/DAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java?ref=98e42261a75cfe21bb92fa0602675295cf358267","patch":"@@ -14,11 +14,14 @@\n  */\n package org.syncope.core.persistence.dao;\n \n+import javax.persistence.EntityManager;\n import org.syncope.core.persistence.beans.AbstractBaseBean;\n \n public interface DAO {\n \n     <T extends AbstractBaseBean> T refresh(T entity);\n \n     void flush();\n+\n+    void setEntityManager(final EntityManager em);\n }"},{"sha":"49f98be4b9ec95e37f867ab661c5a271ba873b1c","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=98e42261a75cfe21bb92fa0602675295cf358267","patch":"@@ -14,6 +14,8 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.lang.reflect.Field;\n+import java.util.logging.Level;\n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n import javax.persistence.PersistenceContextType;\n@@ -45,4 +47,19 @@ public <T extends AbstractBaseBean> T refresh(final T entity) {\n     public void flush() {\n         entityManager.flush();\n     }\n+\n+    @Override\n+    public void setEntityManager(final EntityManager em) {\n+        try {\n+\n+            Field field = getClass().getDeclaredField(\"entityManager\");\n+            field.set(this, em);\n+\n+        } catch (NoSuchFieldException e) {\n+            LOG.error(\"Field {} not found\", \"entityManager\", e);\n+        } catch (Exception e) {\n+            LOG.error(\"Security exception during field retrieving\", e);\n+        }\n+        //entityManager = em;\n+    }\n }"},{"sha":"dd26363635ffbf3a470b9bdbd22fe131ddec6be5","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":45,"deletions":25,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=98e42261a75cfe21bb92fa0602675295cf358267","patch":"@@ -27,6 +27,8 @@\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n+import org.apache.commons.jexl2.JexlContext;\n+import org.apache.commons.jexl2.MapContext;\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -73,6 +75,7 @@\n import org.syncope.types.SourceMappingType;\n import org.syncope.types.SchemaType;\n import org.syncope.types.TaskExecutionStatus;\n+import sun.security.util.Password;\n \n /**\n  * Manage the data propagation to target resources.\n@@ -84,38 +87,46 @@ public class PropagationManager {\n      */\n     protected static final Logger LOG =\n             LoggerFactory.getLogger(PropagationManager.class);\n+\n     @Autowired\n     private ConnInstanceLoader connInstanceLoader;\n+\n     /**\n      * Schema DAO.\n      */\n     @Autowired\n     private SchemaDAO schemaDAO;\n+\n     /**\n      * Derived Schema DAO.\n      */\n     @Autowired\n     private DerSchemaDAO derSchemaDAO;\n+\n     /**\n      * Virtual Schema DAO.\n      */\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n+\n     /**\n      * Task DAO.\n      */\n     @Autowired\n     private TaskDAO taskDAO;\n+\n     /**\n      * Task execution DAO.\n      */\n     @Autowired\n     private TaskExecutionDAO taskExecutionDAO;\n+\n     /**\n      * Task execution workflow.\n      */\n     @Resource(name = \"taskExecutionWorkflow\")\n     private Workflow workflow;\n+\n     /**\n      * JEXL engine for evaluating connector's account link.\n      */\n@@ -284,8 +295,7 @@ protected void provision(\n                     workflowId = workflow.initialize(\n                             Constants.TASKEXECUTION_WORKFLOW, 0, null);\n                     execution.setWorkflowId(workflowId);\n-                }\n-                catch (WorkflowException e) {\n+                } catch (WorkflowException e) {\n                     LOG.error(\"While initializing workflow for {}\",\n                             execution, e);\n                 }\n@@ -392,10 +402,10 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                                 mapping.getSourceAttrName());\n \n                         values = attr != null\n-                                ? ( schema.isUniqueConstraint()\n+                                ? (schema.isUniqueConstraint()\n                                 ? Collections.singletonList(\n                                 attr.getUniqueValue())\n-                                : attr.getValues() )\n+                                : attr.getValues())\n                                 : Collections.EMPTY_LIST;\n \n                         LOG.debug(\"Retrieved attribute {}\", attr\n@@ -506,9 +516,9 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                     LOG.debug(\"Define mapping for: \"\n                             + \"\\n* DestAttrName \" + mapping.getDestAttrName()\n                             + \"\\n* is accountId \" + mapping.isAccountid()\n-                            + \"\\n* is password \" + ( mapping.isPassword()\n+                            + \"\\n* is password \" + (mapping.isPassword()\n                             || mapping.getSourceMappingType().equals(\n-                            SourceMappingType.Password) )\n+                            SourceMappingType.Password))\n                             + \"\\n* mandatory condition \"\n                             + mapping.getMandatoryCondition()\n                             + \"\\n* Schema \" + mapping.getSourceAttrName()\n@@ -575,8 +585,7 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                                 objValues.iterator().next()));\n                     }\n                 }\n-            }\n-            catch (Throwable t) {\n+            } catch (Throwable t) {\n                 LOG.debug(\"Attribute '{}' processing failed\",\n                         mapping.getSourceAttrName(), t);\n             }\n@@ -590,8 +599,9 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n \n         final String key = accountId.keySet().iterator().next();\n \n-        String evaluatedAccountLink = jexlUtil.evaluateWithAttributes(\n-                resource.getAccountLink(), user.getAttributes());\n+        // Evaluate AccountLink expression\n+        String evaluatedAccountLink =\n+                evaluateAccountLink(user, resource.getAccountLink());\n \n         // AccountId must be propagated. It could be a simple attribute for\n         // the target resource or the key (depending on the accountLink)\n@@ -651,8 +661,7 @@ public void propagate(final TaskExecution execution) {\n                                 ? task.getAccountId()\n                                 : task.getOldAccountId()),\n                                 null);\n-                    }\n-                    catch (RuntimeException ignore) {\n+                    } catch (RuntimeException ignore) {\n                         if (LOG.isDebugEnabled()) {\n                             LOG.debug(\"To be ignored, when resolving \"\n                                     + \"username on connector\", ignore);\n@@ -719,8 +728,7 @@ public void propagate(final TaskExecution execution) {\n \n             LOG.debug(\"Successfully propagated to resource {}\",\n                     task.getResource());\n-        }\n-        catch (Throwable t) {\n+        } catch (Throwable t) {\n             LOG.error(\"Exception during provision on resource \"\n                     + task.getResource().getName(), t);\n \n@@ -742,15 +750,13 @@ public void propagate(final TaskExecution execution) {\n                         ? Collections.singletonMap(\n                         PropagationMode.SYNC.toString(), null)\n                         : null);\n-            }\n-            catch (Throwable wft) {\n+            } catch (Throwable wft) {\n                 LOG.error(\"While executing KO action on {}\", execution, wft);\n             }\n \n             triedPropagationRequests.add(\n                     task.getResourceOperationType().toString().toLowerCase());\n-        }\n-        finally {\n+        } finally {\n             LOG.debug(\"Update execution for {}\", task);\n \n             if (!triedPropagationRequests.isEmpty()) {\n@@ -819,18 +825,15 @@ public <T extends AbstractAttributable> Set<String> getObjectAttributeValue(\n                         accountId = attributable.getAttribute(\n                                 mapping.getSourceAttrName()).\n                                 getValuesAsStrings().get(0);\n-                    }\n-                    catch (NullPointerException e) {\n+                    } catch (NullPointerException e) {\n                         // ignore exception\n                         LOG.debug(\"Invalid accountId specified\", e);\n                     }\n                 }\n             }\n \n             if (accountId == null && accountLink != null) {\n-                accountId = jexlUtil.evaluateWithAttributes(\n-                        resource.getAccountLink(),\n-                        attributable.getAttributes());\n+                accountId = evaluateAccountLink(attributable, accountLink);\n             }\n \n             if (attributeNames != null && accountId != null) {\n@@ -853,8 +856,7 @@ public <T extends AbstractAttributable> Set<String> getObjectAttributeValue(\n                     for (Attribute attribute : attributes) {\n                         values.addAll(attribute.getValue());\n                     }\n-                }\n-                catch (Exception e) {\n+                } catch (Exception e) {\n                     LOG.warn(\"Error connecting to {}\", resource.getName(), e);\n                     // ignore exception and go ahead\n                 }\n@@ -863,4 +865,22 @@ public <T extends AbstractAttributable> Set<String> getObjectAttributeValue(\n \n         return new HashSet<String>(values);\n     }\n+\n+    private String evaluateAccountLink(\n+            final AbstractAttributable attributable, final String accountLink) {\n+\n+        final JexlContext jexlContext = new MapContext();\n+\n+        jexlUtil.addAttributesToContext(\n+                attributable.getAttributes(),\n+                jexlContext);\n+\n+        jexlUtil.addDerAttributesToContext(\n+                attributable.getDerivedAttributes(),\n+                attributable.getAttributes(),\n+                jexlContext);\n+\n+        // Evaluate expression using the context prepared before\n+        return jexlUtil.evaluateWithAttributes(accountLink, jexlContext);\n+    }\n }"},{"sha":"a9559ca08914e86258f68754e720ede34186b5ef","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=98e42261a75cfe21bb92fa0602675295cf358267","patch":"@@ -22,6 +22,8 @@\n import java.util.List;\n import java.util.Set;\n import javax.validation.ValidationException;\n+import org.apache.commons.jexl2.JexlContext;\n+import org.apache.commons.jexl2.MapContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -195,9 +197,12 @@ private boolean evaluateMandatoryCondition(\n             final String mandatoryCondition,\n             final List<? extends AbstractAttr> attributes) {\n \n+        JexlContext jexlContext = new MapContext();\n+        jexlUtil.addAttributesToContext(attributes, jexlContext);\n+\n         return Boolean.parseBoolean(\n                 jexlUtil.evaluateWithAttributes(\n-                mandatoryCondition, attributes));\n+                mandatoryCondition, jexlContext));\n     }\n \n     private boolean evaluateMandatoryCondition("},{"sha":"b6d6d6a35651bb4979f61ed014b9fab2789a935b","filename":"core/src/main/java/org/syncope/core/util/JexlUtil.java","status":"modified","additions":90,"deletions":13,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98e42261a75cfe21bb92fa0602675295cf358267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java?ref=98e42261a75cfe21bb92fa0602675295cf358267","patch":"@@ -26,7 +26,8 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.syncope.core.persistence.beans.AbstractAttr;\n-import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n \n /**\n  * @see http://commons.apache.org/jexl/reference/index.html\n@@ -53,13 +54,37 @@ public boolean isExpressionValid(final String expression) {\n     }\n \n     public String evaluateWithAttributes(final String expression,\n-            final Collection<? extends AbstractAttr> attributes) {\n+            final JexlContext jexlContext) {\n \n-        if (expression == null || expression.isEmpty()) {\n-            return \"\";\n+        String result;\n+\n+        if (expression != null\n+                && !expression.isEmpty() && jexlContext != null) {\n+\n+            try {\n+                Expression jexlExpression =\n+                        jexlEngine.createExpression(expression);\n+                result = jexlExpression.evaluate(jexlContext).toString();\n+            } catch (JexlException e) {\n+                LOG.error(\"Invalid jexl expression: \" + expression, e);\n+                result = \"\";\n+            }\n+\n+        } else {\n+            LOG.debug(\"Expression not provided or invalid context\");\n+            result = \"\";\n         }\n \n-        JexlContext jexlContext = new MapContext();\n+        return result;\n+    }\n+\n+    public JexlContext addAttributesToContext(\n+            final Collection<? extends AbstractAttr> attributes,\n+            JexlContext jexlContext) {\n+\n+        if (jexlContext == null) {\n+            jexlContext = new MapContext();\n+        }\n \n         List<String> attributeValues;\n         String expressionValue;\n@@ -83,15 +108,67 @@ public String evaluateWithAttributes(final String expression,\n             jexlContext.set(attribute.getSchema().getName(), expressionValue);\n         }\n \n-        String result;\n-        try {\n-            Expression jexlExpression = jexlEngine.createExpression(expression);\n-            result = jexlExpression.evaluate(jexlContext).toString();\n-        } catch (JexlException e) {\n-            LOG.error(\"Invalid jexl expression: \" + expression, e);\n-            result = \"\";\n+        return jexlContext;\n+    }\n+\n+    public JexlContext addVirAttributesToContext(\n+            final Collection<? extends AbstractVirAttr> attributes,\n+            JexlContext jexlContext) {\n+\n+        if (jexlContext == null) {\n+            jexlContext = new MapContext();\n         }\n \n-        return result;\n+        List<String> attributeValues;\n+        String expressionValue;\n+\n+        for (AbstractVirAttr attribute : attributes) {\n+            attributeValues = attribute.getValues();\n+            if (attributeValues.isEmpty()) {\n+                expressionValue = \"\";\n+            } else {\n+                expressionValue = attributeValues.iterator().next();\n+            }\n+\n+            LOG.debug(\"Add virtual attribute {} with value {}\",\n+                    new Object[]{attribute.getVirtualSchema().getName(),\n+                        expressionValue\n+                    });\n+\n+            jexlContext.set(\n+                    attribute.getVirtualSchema().getName(), expressionValue);\n+        }\n+\n+        return jexlContext;\n+    }\n+\n+    public JexlContext addDerAttributesToContext(\n+            final Collection<? extends AbstractDerAttr> derAttributes,\n+            final Collection<? extends AbstractAttr> attributes,\n+            JexlContext jexlContext) {\n+\n+        if (jexlContext == null) {\n+            jexlContext = new MapContext();\n+        }\n+\n+        String expressionValue;\n+\n+        for (AbstractDerAttr attribute : derAttributes) {\n+            expressionValue = attribute.getValue(attributes);\n+\n+            if (expressionValue == null) {\n+                expressionValue = \"\";\n+            }\n+\n+            LOG.debug(\"Add derived attribute {} with value {}\",\n+                    new Object[]{attribute.getDerivedSchema().getName(),\n+                        expressionValue\n+                    });\n+\n+            jexlContext.set(\n+                    attribute.getDerivedSchema().getName(), expressionValue);\n+        }\n+\n+        return jexlContext;\n     }\n }"}]}