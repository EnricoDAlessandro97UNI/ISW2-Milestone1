{"sha":"026df269ee32d8fadf5741ee40578c4f2bea315a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAyNmRmMjY5ZWUzMmQ4ZmFkZjU3NDFlZTQwNTc4YzRmMmJlYTMxNWE=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-05-31T08:06:12Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-05-31T08:06:12Z"},"message":"[SYNCOPE-1311] Removed useless PullActions and added small fix","tree":{"sha":"3a37384cea1199389d7718dceb51f28f0fea1a69","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3a37384cea1199389d7718dceb51f28f0fea1a69"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/026df269ee32d8fadf5741ee40578c4f2bea315a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/026df269ee32d8fadf5741ee40578c4f2bea315a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/026df269ee32d8fadf5741ee40578c4f2bea315a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/026df269ee32d8fadf5741ee40578c4f2bea315a/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"be8ae795d4c2ee42ea84cb8eb7712079dc403016","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/be8ae795d4c2ee42ea84cb8eb7712079dc403016","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/be8ae795d4c2ee42ea84cb8eb7712079dc403016"}],"stats":{"total":745,"additions":34,"deletions":711},"files":[{"sha":"4c8dfa79e7e0100a7f24de743add1f294366ce4e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026df269ee32d8fadf5741ee40578c4f2bea315a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026df269ee32d8fadf5741ee40578c4f2bea315a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=026df269ee32d8fadf5741ee40578c4f2bea315a","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n@@ -385,7 +386,10 @@ public Set<ExternalResource> getAllResources(final Any<?> any) {\n     @Override\n     public void addAttr(final String key, final PlainSchema schema, final String value) {\n         Any any = dao().find(key);\n-        if (!dao().findAllowedSchemas(any, PlainSchema.class).forSelfContains(schema)) {\n+        Set<AnyTypeClass> typeOwnClasses = new HashSet<>();\n+        typeOwnClasses.addAll(any.getType().getClasses());\n+        typeOwnClasses.addAll(any.getAuxClasses());\n+        if (!typeOwnClasses.stream().anyMatch(clazz -> clazz.getPlainSchemas().contains(schema))) {\n             LOG.warn(\"Schema {} not allowed for {}, ignoring\", schema, any);\n             return;\n         }"},{"sha":"8e6903e85cbb80651b946df7996a13249e4591f9","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningReport.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026df269ee32d8fadf5741ee40578c4f2bea315a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026df269ee32d8fadf5741ee40578c4f2bea315a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningReport.java?ref=026df269ee32d8fadf5741ee40578c4f2bea315a","patch":"@@ -47,6 +47,8 @@ public enum Status {\n \n     private String name;\n \n+    private String uidValue;\n+\n     public String getMessage() {\n         return message;\n     }\n@@ -95,6 +97,14 @@ public void setOperation(final ResourceOperation operation) {\n         this.operation = operation;\n     }\n \n+    public String getUidValue() {\n+        return uidValue;\n+    }\n+\n+    public void setUidValue(final String uidValue) {\n+        this.uidValue = uidValue;\n+    }\n+\n     @Override\n     public String toString() {\n         return new ReflectionToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE).toString();"},{"sha":"e51690e07711777b8ec6171c08b731d827c62eb3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":4,"deletions":11,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026df269ee32d8fadf5741ee40578c4f2bea315a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026df269ee32d8fadf5741ee40578c4f2bea315a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=026df269ee32d8fadf5741ee40578c4f2bea315a","patch":"@@ -208,6 +208,7 @@ protected List<ProvisioningReport> assign(\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningReport.Status.SUCCESS);\n         result.setName(getName(anyTO));\n+        result.setUidValue(delta.getUid().getUidValue());\n \n         if (profile.isDryRun()) {\n             result.setKey(null);\n@@ -240,6 +241,7 @@ protected List<ProvisioningReport> provision(\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningReport.Status.SUCCESS);\n         result.setName(getName(anyTO));\n+        result.setUidValue(delta.getUid().getUidValue());\n \n         if (profile.isDryRun()) {\n             result.setKey(null);\n@@ -821,16 +823,13 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n \n             if (SyncDeltaType.CREATE_OR_UPDATE == processed.getDeltaType()) {\n                 if (anyKeys.isEmpty()) {\n-                    List<ProvisioningReport> forUidOnCreate = null;\n                     switch (profile.getTask().getUnmatchingRule()) {\n                         case ASSIGN:\n-                            forUidOnCreate = assign(processed, provision, anyUtils);\n-                            profile.getResults().addAll(forUidOnCreate);\n+                            profile.getResults().addAll(assign(processed, provision, anyUtils));\n                             break;\n \n                         case PROVISION:\n-                            forUidOnCreate = provision(processed, provision, anyUtils);\n-                            profile.getResults().addAll(forUidOnCreate);\n+                            profile.getResults().addAll(provision(processed, provision, anyUtils));\n                             break;\n \n                         case IGNORE:\n@@ -840,12 +839,6 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                         default:\n                         // do nothing\n                     }\n-\n-                    if (forUidOnCreate != null && provision.getUidOnCreate() != null) {\n-                        forUidOnCreate.forEach(report -> {\n-                            anyUtils.addAttr(report.getKey(), provision.getUidOnCreate(), delta.getUid().getUidValue());\n-                        });\n-                    }\n                 } else {\n                     // update VirAttrCache\n                     for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {"},{"sha":"67e8fd3fd6f6a47b2867ae95262b12c64cd90acc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AzurePullActions.java","status":"removed","additions":0,"deletions":216,"changes":216,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/be8ae795d4c2ee42ea84cb8eb7712079dc403016/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAzurePullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/be8ae795d4c2ee42ea84cb8eb7712079dc403016/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAzurePullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAzurePullActions.java?ref=be8ae795d4c2ee42ea84cb8eb7712079dc403016","patch":"@@ -1,216 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.pushpull;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n-import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n-import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.quartz.JobExecutionException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-/**\n- * This class is required during setup of an External Resource based on the ConnId\n- * <a href=\"https://github.com/Tirasa/ConnIdAzureBundle\">Azure connector</a>.\n- *\n- * It manages:\n- * <ol>\n- * <li>the id provided by Azure in response to create, which will need to be used for all subsequent operations</li>\n- * <li>the e-mail address</li>\n- * </ol>\n- */\n-public class AzurePullActions implements PullActions {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(AzurePullActions.class);\n-\n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n-    private final Map<EntityTO, String> azureRefs = new HashMap<>();\n-\n-    protected String getAzureUserIdSchema() {\n-        return \"AzureUserId\";\n-    }\n-\n-    protected String getAzureGroupIdSchema() {\n-        return \"AzureGroupId\";\n-    }\n-\n-    @Override\n-    public void beforeProvision(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity) throws JobExecutionException {\n-\n-        if (entity instanceof UserTO) {\n-            UserTO userTO = (UserTO) entity;\n-            if (userTO.getUsername() == null) {\n-                userTO.setUsername(delta.getObject().getName().getNameValue());\n-            }\n-        } else if (entity instanceof GroupTO) {\n-            GroupTO groupTO = (GroupTO) entity;\n-            if (groupTO.getName() == null) {\n-                groupTO.setName(delta.getObject().getName().getNameValue());\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public <P extends AnyPatch> void beforeUpdate(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity,\n-            final P anyPatch) throws JobExecutionException {\n-\n-        if (anyPatch instanceof UserPatch) {\n-            UserPatch userPatch = (UserPatch) anyPatch;\n-            if (userPatch.getUsername() == null) {\n-                userPatch.setUsername(new StringReplacePatchItem.Builder().\n-                        value(delta.getObject().getName().getNameValue()).build());\n-            }\n-        } else if (entity instanceof GroupPatch) {\n-            GroupPatch groupPatch = (GroupPatch) entity;\n-            if (groupPatch.getName() == null) {\n-                groupPatch.setName(new StringReplacePatchItem.Builder().\n-                        value(delta.getObject().getName().getNameValue()).build());\n-            }\n-        }\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void after(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity,\n-            final ProvisioningReport result) throws JobExecutionException {\n-\n-        if (!(entity instanceof UserTO) && !(entity instanceof GroupTO)) {\n-            return;\n-        }\n-\n-        azureRefs.put(entity, delta.getUid().getUidValue());\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n-        for (Map.Entry<EntityTO, String> entry : azureRefs.entrySet()) {\n-            if (entry.getKey() instanceof UserTO) {\n-                User user = userDAO.find(entry.getKey().getKey());\n-                if (user == null) {\n-                    LOG.error(\"Could not find user {}, skipping\", entry.getKey().getKey());\n-                } else {\n-                    AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n-\n-                    // 1. stores the __UID__ received by Azure\n-                    PlainSchema azureId = plainSchemaDAO.find(getAzureUserIdSchema());\n-                    if (azureId == null) {\n-                        LOG.error(\"Could not find schema {}, skipping\", getAzureUserIdSchema());\n-                    } else {\n-                        UPlainAttr attr = user.getPlainAttr(getAzureUserIdSchema()).orElse(null);\n-                        if (attr == null) {\n-                            attr = entityFactory.newEntity(UPlainAttr.class);\n-                            attr.setSchema(azureId);\n-                            attr.setOwner(user);\n-                            user.add(attr);\n-\n-                            try {\n-                                attr.add(entry.getValue(), anyUtils);\n-                                userDAO.save(user);\n-                            } catch (InvalidPlainAttrValueException e) {\n-                                LOG.error(\"Invalid value for attribute {}: {}\", azureId.getKey(), entry.getValue(), e);\n-                            }\n-                        } else {\n-                            LOG.debug(\"User {} has already a {} assigned: {}\", user, getAzureUserIdSchema(),\n-                                    attr.getValuesAsStrings());\n-                        }\n-                    }\n-                }\n-            } else if (entry.getKey() instanceof GroupTO) {\n-                Group group = groupDAO.find(entry.getKey().getKey());\n-                if (group == null) {\n-                    LOG.error(\"Could not find group {}, skipping\", entry.getKey().getKey());\n-                } else {\n-                    AnyUtils anyUtils = anyUtilsFactory.getInstance(group);\n-\n-                    // 1. stores the __UID__ received by Azure\n-                    PlainSchema azureId = plainSchemaDAO.find(getAzureGroupIdSchema());\n-                    if (azureId == null) {\n-                        LOG.error(\"Could not find schema {}, skipping\", getAzureGroupIdSchema());\n-                    } else {\n-                        GPlainAttr attr = group.getPlainAttr(getAzureGroupIdSchema()).orElse(null);\n-                        if (attr == null) {\n-                            attr = entityFactory.newEntity(GPlainAttr.class);\n-                            attr.setSchema(azureId);\n-                            attr.setOwner(group);\n-                            group.add(attr);\n-\n-                            try {\n-                                attr.add(entry.getValue(), anyUtils);\n-                                groupDAO.save(group);\n-                            } catch (InvalidPlainAttrValueException e) {\n-                                LOG.error(\"Invalid value for attribute {}: {}\", azureId.getKey(), entry.getValue(), e);\n-                            }\n-                        } else {\n-                            LOG.debug(\"Group {} has already a {} assigned: {}\", group, getAzureGroupIdSchema(),\n-                                    attr.getValuesAsStrings());\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}"},{"sha":"446997e68b986af67e5e505cd15e4de85b5e97ce","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java","status":"removed","additions":0,"deletions":160,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/be8ae795d4c2ee42ea84cb8eb7712079dc403016/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/be8ae795d4c2ee42ea84cb8eb7712079dc403016/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java?ref=be8ae795d4c2ee42ea84cb8eb7712079dc403016","patch":"@@ -1,160 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.pushpull;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n-import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n-import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.quartz.JobExecutionException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-/**\n- * This class is required during setup of an External Resource based on the ConnId\n- * <a href=\"https://github.com/Tirasa/ConnIdGoogleAppsBundle\">GoogleApps connector</a>.\n- *\n- * It manages:\n- * <ol>\n- * <li>the id provided by Google in response to create, which will need to be used for all subsequent operations</li>\n- * <li>the e-mail address</li>\n- * </ol>\n- */\n-public class GoogleAppsPullActions implements PullActions {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(GoogleAppsPullActions.class);\n-\n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n-    private final Map<String, String> googleAppsIds = new HashMap<>();\n-\n-    protected String getGoogleAppsIdSchema() {\n-        return \"GoogleAppsId\";\n-    }\n-\n-    @Override\n-    public void beforeProvision(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity) throws JobExecutionException {\n-\n-        if (entity instanceof UserTO) {\n-            UserTO userTO = (UserTO) entity;\n-            if (userTO.getUsername() == null) {\n-                userTO.setUsername(delta.getObject().getName().getNameValue());\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public <P extends AnyPatch> void beforeUpdate(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity,\n-            final P anyPatch) throws JobExecutionException {\n-\n-        if (anyPatch instanceof UserPatch) {\n-            UserPatch userPatch = (UserPatch) anyPatch;\n-            if (userPatch.getUsername() == null) {\n-                userPatch.setUsername(new StringReplacePatchItem.Builder().\n-                        value(delta.getObject().getName().getNameValue()).build());\n-            }\n-        }\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void after(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity,\n-            final ProvisioningReport result) throws JobExecutionException {\n-\n-        if (!(entity instanceof UserTO)) {\n-            return;\n-        }\n-\n-        googleAppsIds.put(entity.getKey(), delta.getUid().getUidValue());\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n-        googleAppsIds.forEach((key, value) -> {\n-            User user = userDAO.find(key);\n-            if (user == null) {\n-                LOG.error(\"Could not find user {}, skipping\", key);\n-            } else {\n-                AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n-\n-                // 1. stores the __UID__ received by Google\n-                PlainSchema googleAppsId = plainSchemaDAO.find(getGoogleAppsIdSchema());\n-                if (googleAppsId == null) {\n-                    LOG.error(\"Could not find schema googleAppsId, skipping\");\n-                } else {\n-                    UPlainAttr attr = user.getPlainAttr(getGoogleAppsIdSchema()).orElse(null);\n-                    if (attr == null) {\n-                        attr = entityFactory.newEntity(UPlainAttr.class);\n-                        attr.setSchema(googleAppsId);\n-                        attr.setOwner(user);\n-                        user.add(attr);\n-\n-                        try {\n-                            attr.add(value, anyUtils);\n-                            userDAO.save(user);\n-                        } catch (InvalidPlainAttrValueException e) {\n-                            LOG.error(\"Invalid value for attribute {}: {}\", googleAppsId.getKey(), value, e);\n-                        }\n-                    } else {\n-                        LOG.debug(\"User {} has already a googleAppsId assigned: {}\", user, attr.getValuesAsStrings());\n-                    }\n-                }\n-            }\n-        });\n-    }\n-\n-}"},{"sha":"4b4d6924a48f2012ffd75d9ee761822ec5b24b05","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026df269ee32d8fadf5741ee40578c4f2bea315a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026df269ee32d8fadf5741ee40578c4f2bea315a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=026df269ee32d8fadf5741ee40578c4f2bea315a","patch":"@@ -31,11 +31,14 @@\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.commons.lang3.tuple.MutablePair;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n@@ -75,6 +78,9 @@ public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> i\n     @Autowired\n     protected PullUtils pullUtils;\n \n+    @Autowired\n+    protected AnyUtilsFactory anyUtilsFactory;\n+\n     protected final Map<ObjectClass, SyncToken> latestSyncTokens = new HashMap<>();\n \n     protected final Map<ObjectClass, MutablePair<Integer, String>> handled = new HashMap<>();\n@@ -345,6 +351,15 @@ protected String doExecuteProvisioning(\n                                     options);\n                             break;\n                     }\n+\n+                    if (provision.getUidOnCreate() != null) {\n+                        AnyUtils anyUtils = anyUtilsFactory.getInstance(provision.getAnyType().getKind());\n+                        profile.getResults().stream().filter(result\n+                                -> result.getUidValue() != null && result.getOperation() == ResourceOperation.CREATE)\n+                                .forEach(result -> {\n+                                    anyUtils.addAttr(result.getKey(), provision.getUidOnCreate(), result.getUidValue());\n+                                });\n+                    }\n                 } catch (Throwable t) {\n                     throw new JobExecutionException(\"While pulling from connector\", t);\n                 }"},{"sha":"a477aa53ddc876f86933a83729b606b35d7d79db","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SCIMv11PullActions.java","status":"removed","additions":0,"deletions":161,"changes":161,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/be8ae795d4c2ee42ea84cb8eb7712079dc403016/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSCIMv11PullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/be8ae795d4c2ee42ea84cb8eb7712079dc403016/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSCIMv11PullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSCIMv11PullActions.java?ref=be8ae795d4c2ee42ea84cb8eb7712079dc403016","patch":"@@ -1,161 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.pushpull;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n-import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n-import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.quartz.JobExecutionException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-/**\n- * This class is required during setup of an External Resource based on the ConnId\n- * <a href=\"https://github.com/Tirasa/ConnIdSCIMv11Bundle\">SCIM connector</a>.\n- *\n- * It manages:\n- * <ol>\n- * <li>the id provided by SCIM in response to create, which will need to be used for all subsequent operations</li>\n- * </ol>\n- */\n-public class SCIMv11PullActions implements PullActions {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SCIMv11PullActions.class);\n-\n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n-    private final Map<String, String> scimRefs = new HashMap<>();\n-\n-    protected String getSCIMIdSchema() {\n-        return \"SCIMUserId\";\n-    }\n-\n-    @Override\n-    public void beforeProvision(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity) throws JobExecutionException {\n-\n-        if (entity instanceof UserTO) {\n-            UserTO userTO = (UserTO) entity;\n-            if (userTO.getUsername() == null) {\n-                userTO.setUsername(delta.getObject().getName().getNameValue());\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public <P extends AnyPatch> void beforeUpdate(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity,\n-            final P anyPatch) throws JobExecutionException {\n-\n-        if (anyPatch instanceof UserPatch) {\n-            UserPatch userPatch = (UserPatch) anyPatch;\n-            if (userPatch.getUsername() == null) {\n-                userPatch.setUsername(new StringReplacePatchItem.Builder().\n-                        value(delta.getObject().getName().getNameValue()).build());\n-            }\n-        }\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void after(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity,\n-            final ProvisioningReport result) throws JobExecutionException {\n-\n-        if (!(entity instanceof UserTO)) {\n-            return;\n-        }\n-\n-        scimRefs.put(entity.getKey(), delta.getUid().getUidValue());\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n-        for (Map.Entry<String, String> entry : scimRefs.entrySet()) {\n-            User user = userDAO.find(entry.getKey());\n-            if (user == null) {\n-                LOG.error(\"Could not find user {}, skipping\", entry.getKey());\n-            } else {\n-                AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n-\n-                // stores the __UID__ received by SCIM\n-                PlainSchema scimId = plainSchemaDAO.find(getSCIMIdSchema());\n-                if (scimId == null) {\n-                    LOG.error(\"Could not find schema {}, skipping\", getSCIMIdSchema());\n-                } else {\n-                    UPlainAttr attr = user.getPlainAttr(getSCIMIdSchema()).orElse(null);\n-                    if (attr == null) {\n-                        attr = entityFactory.newEntity(UPlainAttr.class);\n-                        attr.setSchema(scimId);\n-                        attr.setOwner(user);\n-                        user.add(attr);\n-\n-                        try {\n-                            attr.add(entry.getValue(), anyUtils);\n-                            userDAO.save(user);\n-                        } catch (InvalidPlainAttrValueException e) {\n-                            LOG.error(\"Invalid value for attribute {}: {}\",\n-                                    scimId.getKey(), entry.getValue(), e);\n-                        }\n-                    } else {\n-                        LOG.debug(\"User {} has already a {} assigned: {}\", user, getSCIMIdSchema(),\n-                                attr.getValuesAsStrings());\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-}"},{"sha":"1d805e28fb4d3b4242eb1265a3febedc13566007","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/ServiceNowPullActions.java","status":"removed","additions":0,"deletions":162,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/be8ae795d4c2ee42ea84cb8eb7712079dc403016/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FServiceNowPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/be8ae795d4c2ee42ea84cb8eb7712079dc403016/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FServiceNowPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FServiceNowPullActions.java?ref=be8ae795d4c2ee42ea84cb8eb7712079dc403016","patch":"@@ -1,162 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.pushpull;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n-import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n-import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.quartz.JobExecutionException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-/**\n- * This class is required during setup of an External Resource based on the ConnId\n- * <a href=\"https://github.com/Tirasa/ConnIdServiceNowBundle\">ServiceNow connector</a>.\n- *\n- * It manages:\n- * <ol>\n- * <li>the id provided by ServiceNow in response to create, which will need to be used for all subsequent\n- * operations</li>\n- * </ol>\n- */\n-public class ServiceNowPullActions implements PullActions {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(ServiceNowPullActions.class);\n-\n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n-    private final Map<String, String> serviceNowRefs = new HashMap<>();\n-\n-    protected String getServiceNowIdSchema() {\n-        return \"ServiceNowUserId\";\n-    }\n-\n-    @Override\n-    public void beforeProvision(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity) throws JobExecutionException {\n-\n-        if (entity instanceof UserTO) {\n-            UserTO userTO = (UserTO) entity;\n-            if (userTO.getUsername() == null) {\n-                userTO.setUsername(delta.getObject().getName().getNameValue());\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public <P extends AnyPatch> void beforeUpdate(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity,\n-            final P anyPatch) throws JobExecutionException {\n-\n-        if (anyPatch instanceof UserPatch) {\n-            UserPatch userPatch = (UserPatch) anyPatch;\n-            if (userPatch.getUsername() == null) {\n-                userPatch.setUsername(new StringReplacePatchItem.Builder().\n-                        value(delta.getObject().getName().getNameValue()).build());\n-            }\n-        }\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void after(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entity,\n-            final ProvisioningReport result) throws JobExecutionException {\n-\n-        if (!(entity instanceof UserTO)) {\n-            return;\n-        }\n-\n-        serviceNowRefs.put(entity.getKey(), delta.getUid().getUidValue());\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n-        for (Map.Entry<String, String> entry : serviceNowRefs.entrySet()) {\n-            User user = userDAO.find(entry.getKey());\n-            if (user == null) {\n-                LOG.error(\"Could not find user {}, skipping\", entry.getKey());\n-            } else {\n-                AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n-\n-                // stores the __UID__ received by ServiceNow\n-                PlainSchema serviceNowId = plainSchemaDAO.find(getServiceNowIdSchema());\n-                if (serviceNowId == null) {\n-                    LOG.error(\"Could not find schema {}, skipping\", getServiceNowIdSchema());\n-                } else {\n-                    UPlainAttr attr = user.getPlainAttr(getServiceNowIdSchema()).orElse(null);\n-                    if (attr == null) {\n-                        attr = entityFactory.newEntity(UPlainAttr.class);\n-                        attr.setSchema(serviceNowId);\n-                        attr.setOwner(user);\n-                        user.add(attr);\n-\n-                        try {\n-                            attr.add(entry.getValue(), anyUtils);\n-                            userDAO.save(user);\n-                        } catch (InvalidPlainAttrValueException e) {\n-                            LOG.error(\"Invalid value for attribute {}: {}\",\n-                                    serviceNowId.getKey(), entry.getValue(), e);\n-                        }\n-                    } else {\n-                        LOG.debug(\"User {} has already a {} assigned: {}\", user, getServiceNowIdSchema(),\n-                                attr.getValuesAsStrings());\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-}"}]}