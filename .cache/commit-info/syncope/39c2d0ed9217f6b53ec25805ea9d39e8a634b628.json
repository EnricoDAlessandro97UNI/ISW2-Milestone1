{"sha":"39c2d0ed9217f6b53ec25805ea9d39e8a634b628","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM5YzJkMGVkOTIxN2Y2YjUzZWMyNTgwNWVhOWQzOWU4YTYzNGI2Mjg=","commit":{"author":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-30T15:29:51Z"},"committer":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-30T15:29:51Z"},"message":"SYNCOPE-231 Handling client side exceptions in SchemaService create\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1440464 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d250117c4bf797b9781dcdedf9e47a8222a5e127","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d250117c4bf797b9781dcdedf9e47a8222a5e127"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/39c2d0ed9217f6b53ec25805ea9d39e8a634b628","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39c2d0ed9217f6b53ec25805ea9d39e8a634b628","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/39c2d0ed9217f6b53ec25805ea9d39e8a634b628","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/comments","author":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"committer":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"parents":[{"sha":"7b8a31b4fc3c2109bcebad1a230879f16600ff52","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7b8a31b4fc3c2109bcebad1a230879f16600ff52","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7b8a31b4fc3c2109bcebad1a230879f16600ff52"}],"stats":{"total":42,"additions":29,"deletions":13},"files":[{"sha":"bb05f8c916446cb4f4d5f15ce543e9a9a8aa1d0c","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=39c2d0ed9217f6b53ec25805ea9d39e8a634b628","patch":"@@ -25,6 +25,7 @@\n import java.util.UUID;\n \n import javax.sql.DataSource;\n+import javax.ws.rs.PathParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.Response;\n@@ -67,8 +68,11 @@\n import org.apache.syncope.common.services.UserRequestService;\n import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.services.WorkflowService;\n+import org.apache.syncope.common.services.SchemaService.SchemaType;\n+import org.apache.syncope.common.to.AbstractSchemaTO;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.validation.SyncopeClientErrorHandler;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n@@ -341,4 +345,16 @@ protected void assertCreated(final Response response) {\n                     + builder.toString());\n         }\n     }\n+    \n+    <T extends AbstractSchemaTO> Response createSchema(@PathParam(\"kind\") AttributableType kind,\n+            @PathParam(\"type\") SchemaType type, T schemaTO) {\n+        Response response = schemaService.create(kind, type, schemaTO);\n+        if (response.getStatus() != HttpStatus.SC_CREATED) {\n+            Exception ex = clientExceptionMapper.fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return response;\n+    }\n }"},{"sha":"b835fc6a2e779bbfbb2335e518c8c7adae80781c","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=39c2d0ed9217f6b53ec25805ea9d39e8a634b628","patch":"@@ -88,7 +88,7 @@ public void testUserSchemaAuthorization() {\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n \n-        response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         SchemaTO newSchemaTO = getObject(response, SchemaTO.class, entitlementService);\n         assertEquals(schemaTO, newSchemaTO);\n "},{"sha":"e35f7302ccf68d56026fd243523e44a30b886719","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=39c2d0ed9217f6b53ec25805ea9d39e8a634b628","patch":"@@ -63,7 +63,7 @@ public void create() {\n         schema.setName(\"derived\");\n         schema.setExpression(\"derived_sx + '_' + derived_dx\");\n \n-        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.DERIVED, schema);\n+        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.DERIVED, schema);\n         DerivedSchemaTO actual = getObject(response, DerivedSchemaTO.class, schemaService);\n         assertNotNull(actual);\n \n@@ -89,7 +89,7 @@ public void delete() {\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n         } finally {\n             // Recreate schema to make test re-runnable\n-            Response response = schemaService.create(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, schema);\n+            Response response = createSchema(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, schema);\n             assertNotNull(response);\n             assertEquals(HttpStatus.SC_CREATED, response.getStatus());\n         }"},{"sha":"2bf2d643f3be858fce725e7af71522b831857856","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=39c2d0ed9217f6b53ec25805ea9d39e8a634b628","patch":"@@ -55,11 +55,11 @@ public void create() {\n         SchemaTO schemaTO = buildSchemaTO(\"testAttribute\", SchemaType.String);\n         schemaTO.setMandatoryCondition(\"false\");\n \n-        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         SchemaTO newSchemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertEquals(schemaTO, newSchemaTO);\n \n-        response = schemaService.create(AttributableType.MEMBERSHIP, SchemaService.SchemaType.NORMAL, schemaTO);\n+        response = createSchema(AttributableType.MEMBERSHIP, SchemaService.SchemaType.NORMAL, schemaTO);\n         newSchemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertEquals(schemaTO, newSchemaTO);\n     }\n@@ -71,7 +71,7 @@ public void createWithNotPermittedName() {\n         schemaTO.setType(SchemaType.String);\n \n         try {\n-            schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+            createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -89,7 +89,7 @@ public void createREnumWithoutEnumeration() {\n         schemaTO.setType(SchemaType.Enum);\n \n         try {\n-            schemaService.create(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO);\n+            createSchema(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n@@ -108,7 +108,7 @@ public void createUEnumWithoutEnumeration() {\n         schemaTO.setType(SchemaType.Enum);\n \n         try {\n-            schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+            createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -124,7 +124,7 @@ public void createUEnumWithoutEnumeration() {\n     public void delete() {\n         SchemaTO schemaTO = buildSchemaTO(\"todelete\", SchemaType.String);\n         schemaTO.setMandatoryCondition(\"false\");\n-        schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n \n         schemaService.delete(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName());\n         SchemaTO firstname = null;\n@@ -185,7 +185,7 @@ public void issue258() {\n         schemaTO.setName(\"schema_issue258\");\n         schemaTO.setType(SchemaType.Double);\n \n-        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         schemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n@@ -210,7 +210,7 @@ public void issue259() {\n         SchemaTO schemaTO = buildSchemaTO(\"schema_issue259\", SchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         schemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n@@ -235,7 +235,7 @@ public void issue260() {\n         SchemaTO schemaTO = buildSchemaTO(\"schema_issue260\", SchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         schemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n "},{"sha":"cea21816278b2f8b7f578d6be7b17a8e407dac60","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39c2d0ed9217f6b53ec25805ea9d39e8a634b628/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=39c2d0ed9217f6b53ec25805ea9d39e8a634b628","patch":"@@ -59,7 +59,7 @@ public void create() {\n         VirtualSchemaTO schema = new VirtualSchemaTO();\n         schema.setName(\"virtual\");\n \n-        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, schema);\n+        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, schema);\n         VirtualSchemaTO actual = getObject(response, VirtualSchemaTO.class, schemaService);\n         assertNotNull(actual);\n "}]}