{"sha":"b2e84011274c072130fae8c8f082f7394c27c1e1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIyZTg0MDExMjc0YzA3MjEzMGZhZThjOGYwODJmNzM5NGMyN2MxZTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-07-21T09:35:52Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-13T15:16:50Z"},"message":"[SYNCOPE-652] Cleaning up OpenJPA slices","tree":{"sha":"70685fd82aa3fed4a21f5a92c5a4968c2de6be65","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/70685fd82aa3fed4a21f5a92c5a4968c2de6be65"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b2e84011274c072130fae8c8f082f7394c27c1e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2e84011274c072130fae8c8f082f7394c27c1e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b2e84011274c072130fae8c8f082f7394c27c1e1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2e84011274c072130fae8c8f082f7394c27c1e1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0d6187d1ff992e563bda761a91e69649f4e950f7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0d6187d1ff992e563bda761a91e69649f4e950f7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0d6187d1ff992e563bda761a91e69649f4e950f7"}],"stats":{"total":567,"additions":292,"deletions":275},"files":[{"sha":"f426f8ca3e9744096a9ac17b717db4b4be0a0516","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractSchemaTO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -35,6 +35,8 @@ public abstract class AbstractSchemaTO extends AbstractBaseBean {\n \n     private String key;\n \n+    private String anyTypeClass;\n+\n     public String getKey() {\n         return key;\n     }\n@@ -43,4 +45,13 @@ public String getKey() {\n     public void setKey(final String key) {\n         this.key = key;\n     }\n+\n+    public String getAnyTypeClass() {\n+        return anyTypeClass;\n+    }\n+\n+    public void setAnyTypeClass(final String anyTypeClass) {\n+        this.anyTypeClass = anyTypeClass;\n+    }\n+\n }"},{"sha":"43c3d232b1ad139d4ac940c205154f5a4df4884d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -38,7 +38,7 @@\n /**\n  * REST operations for any type classes.\n  */\n-@Path(\"anyTypeClassClasses\")\n+@Path(\"anyTypeClasses\")\n public interface AnyTypeClassService extends JAXRSService {\n \n     /**"},{"sha":"3da4a76ef44f73e541f220e2207cd3b9f209b87c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":9,"deletions":24,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -39,7 +39,6 @@\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;\n@@ -62,9 +61,6 @@ public class SchemaLogic extends AbstractTransactionalLogic<AbstractSchemaTO> {\n     @Autowired\n     private SchemaDataBinder binder;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n     private boolean doesSchemaExist(final SchemaType schemaType, final String name) {\n         boolean found;\n \n@@ -104,27 +100,19 @@ public <T extends AbstractSchemaTO> T create(final SchemaType schemaType, final\n         T created;\n         switch (schemaType) {\n             case VIRTUAL:\n-                VirSchema virSchema = entityFactory.newEntity(VirSchema.class);\n-                binder.create((VirSchemaTO) schemaTO, virSchema);\n-                virSchema = virSchemaDAO.save(virSchema);\n+                VirSchema virSchema = virSchemaDAO.save(binder.create((VirSchemaTO) schemaTO));\n                 created = (T) binder.getVirSchemaTO(virSchema);\n                 break;\n \n             case DERIVED:\n-                DerSchema derSchema = entityFactory.newEntity(DerSchema.class);\n-                binder.create((DerSchemaTO) schemaTO, derSchema);\n-                derSchema = derSchemaDAO.save(derSchema);\n-\n+                DerSchema derSchema = derSchemaDAO.save(binder.create((DerSchemaTO) schemaTO));\n                 created = (T) binder.getDerSchemaTO(derSchema);\n                 break;\n \n             case PLAIN:\n             default:\n-                PlainSchema normalSchema = entityFactory.newEntity(PlainSchema.class);\n-                binder.create((PlainSchemaTO) schemaTO, normalSchema);\n-                normalSchema = plainSchemaDAO.save(normalSchema);\n-\n-                created = (T) binder.getPlainSchemaTO(normalSchema);\n+                PlainSchema plainSchema = plainSchemaDAO.save(binder.create((PlainSchemaTO) schemaTO));\n+                created = (T) binder.getPlainSchemaTO(plainSchema);\n         }\n         return created;\n     }\n@@ -241,8 +229,7 @@ public <T extends AbstractSchemaTO> void update(final SchemaType schemaType, fin\n                     throw new NotFoundException(\"Virtual Schema '\" + schemaTO.getKey() + \"'\");\n                 }\n \n-                binder.update((VirSchemaTO) schemaTO, virSchema);\n-                virSchemaDAO.save(virSchema);\n+                virSchemaDAO.save(binder.update((VirSchemaTO) schemaTO, virSchema));\n                 break;\n \n             case DERIVED:\n@@ -251,19 +238,17 @@ public <T extends AbstractSchemaTO> void update(final SchemaType schemaType, fin\n                     throw new NotFoundException(\"Derived schema '\" + schemaTO.getKey() + \"'\");\n                 }\n \n-                binder.update((DerSchemaTO) schemaTO, derSchema);\n-                derSchemaDAO.save(derSchema);\n+                derSchemaDAO.save(binder.update((DerSchemaTO) schemaTO, derSchema));\n                 break;\n \n             case PLAIN:\n             default:\n-                PlainSchema schema = plainSchemaDAO.find(schemaTO.getKey());\n-                if (schema == null) {\n+                PlainSchema plainSchema = plainSchemaDAO.find(schemaTO.getKey());\n+                if (plainSchema == null) {\n                     throw new NotFoundException(\"Schema '\" + schemaTO.getKey() + \"'\");\n                 }\n \n-                binder.update((PlainSchemaTO) schemaTO, schema);\n-                plainSchemaDAO.save(schema);\n+                plainSchemaDAO.save(binder.update((PlainSchemaTO) schemaTO, plainSchema));\n         }\n     }\n "},{"sha":"f60f3da0a34be4a2fda343f7f534ece81762b80d","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -55,10 +55,6 @@ under the License.\n       <groupId>org.apache.openjpa</groupId>\n       <artifactId>openjpa-persistence-jdbc</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.openjpa</groupId>\n-      <artifactId>openjpa-slice</artifactId>\n-    </dependency>\n     \n     <dependency>\n       <groupId>org.apache.commons</groupId>"},{"sha":"f4916c7768efeff7ed8c8405c65cb0c71f014c4a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":1,"deletions":37,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -19,13 +19,10 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n-import javax.persistence.CacheRetrieveMode;\n-import javax.persistence.CacheStoreMode;\n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n import javax.persistence.PersistenceContextType;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.openjpa.slice.SlicePersistence;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.DAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -41,38 +38,10 @@\n \n     protected static final Logger LOG = LoggerFactory.getLogger(DAO.class);\n \n-    private static final String CACHE_STORE_MODE = \"javax.persistence.cache.storeMode\";\n-\n-    private static final String CACHE_RETRIEVE_MODE = \"javax.persistence.cache.retrieveMode\";\n-\n     @Value(\"#{entityManager}\")\n     @PersistenceContext(type = PersistenceContextType.TRANSACTION)\n     protected EntityManager entityManager;\n \n-    protected CacheRetrieveMode getCacheRetrieveMode() {\n-        return entityManager.getProperties().containsKey(CACHE_RETRIEVE_MODE)\n-                ? (CacheRetrieveMode) entityManager.getProperties().get(CACHE_RETRIEVE_MODE)\n-                : CacheRetrieveMode.BYPASS;\n-    }\n-\n-    protected void setCacheRetrieveMode(final CacheRetrieveMode retrieveMode) {\n-        if (retrieveMode != null) {\n-            entityManager.getProperties().put(CACHE_RETRIEVE_MODE, retrieveMode);\n-        }\n-    }\n-\n-    protected CacheStoreMode getCacheStoreMode() {\n-        return entityManager.getProperties().containsKey(CACHE_STORE_MODE)\n-                ? (CacheStoreMode) entityManager.getProperties().get(CACHE_STORE_MODE)\n-                : CacheStoreMode.BYPASS;\n-    }\n-\n-    protected void setCacheStoreMode(final CacheStoreMode storeMode) {\n-        if (storeMode != null) {\n-            entityManager.getProperties().put(CACHE_STORE_MODE, storeMode);\n-        }\n-    }\n-\n     protected String toOrderByStatement(final Class<? extends Entity<KEY>> beanClass, final String prefix,\n             final List<OrderByClause> orderByClauses) {\n \n@@ -96,12 +65,7 @@ protected String toOrderByStatement(final Class<? extends Entity<KEY>> beanClass\n \n     @Override\n     public String getDomain(final E entity) {\n-        try {\n-            return SlicePersistence.getSlice(entity);\n-        } catch (Exception e) {\n-            LOG.debug(\"While fetching slice for {}\", entity, e);\n-            return SyncopeConstants.MASTER_DOMAIN;\n-        }\n+        return SyncopeConstants.MASTER_DOMAIN;\n     }\n \n     @Override"},{"sha":"58b547d9624ef1a44bfda6cb74d36c3d720e9ef9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -63,7 +63,19 @@ public List<AnyTypeClass> findAll() {\n \n     @Override\n     public AnyTypeClass save(final AnyTypeClass anyTypeClass) {\n-        return entityManager.merge(anyTypeClass);\n+        AnyTypeClass merge = entityManager.merge(anyTypeClass);\n+\n+        for (PlainSchema schema : merge.getPlainSchemas()) {\n+            schema.setAnyTypeClass(merge);\n+        }\n+        for (DerSchema schema : merge.getDerSchemas()) {\n+            schema.setAnyTypeClass(merge);\n+        }\n+        for (VirSchema schema : merge.getVirSchemas()) {\n+            schema.setAnyTypeClass(merge);\n+        }\n+\n+        return merge;\n     }\n \n     @Override"},{"sha":"17553a22f0881b9ce491f5d979a32cedf6194a78","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n@@ -70,9 +69,6 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource, String\n     @Autowired\n     private ConnectorRegistry connRegistry;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n     @Override\n     public ExternalResource find(final String name) {\n         return entityManager.find(JPAExternalResource.class, name);"},{"sha":"944afc4c7ffe263310135eaf891149d803016c9f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADerSchema.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -21,6 +21,7 @@\n import javax.persistence.Cacheable;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n@@ -42,7 +43,7 @@ public class JPADerSchema extends AbstractEntity<String> implements DerSchema {\n     @Id\n     private String name;\n \n-    @OneToOne\n+    @OneToOne(fetch = FetchType.EAGER)\n     private JPAAnyTypeClass anyTypeClass;\n \n     @Column(nullable = false)"},{"sha":"68eeacf3dc5120323c125b5c0c9eb98b615b3d10","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -24,6 +24,7 @@\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.OneToOne;\n@@ -54,7 +55,7 @@ public class JPAPlainSchema extends AbstractEntity<String> implements PlainSchem\n     @Id\n     private String name;\n \n-    @OneToOne\n+    @OneToOne(fetch = FetchType.EAGER)\n     private JPAAnyTypeClass anyTypeClass;\n \n     @Column(nullable = false)"},{"sha":"6c1dd7338e9d9cbdaf635ee4deb9832d2437830e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAVirSchema.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -21,6 +21,7 @@\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n@@ -44,7 +45,7 @@ public class JPAVirSchema extends AbstractEntity<String> implements VirSchema {\n     @Id\n     private String name;\n \n-    @OneToOne\n+    @OneToOne(fetch = FetchType.EAGER)\n     private JPAAnyTypeClass anyTypeClass;\n \n     @Basic"},{"sha":"2e61b06711db1bffb76d89aa7abbe203fbc77423","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/slice/DomainDistributionPolicy.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d6187d1ff992e563bda761a91e69649f4e950f7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainDistributionPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d6187d1ff992e563bda761a91e69649f4e950f7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainDistributionPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainDistributionPolicy.java?ref=0d6187d1ff992e563bda761a91e69649f4e950f7","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.slice;\n-\n-import java.util.List;\n-import org.apache.openjpa.slice.DistributionPolicy;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n-\n-public class DomainDistributionPolicy implements DistributionPolicy {\n-\n-    @Override\n-    public String distribute(final Object pc, final List<String> slices, final Object context) {\n-        return (pc instanceof Domain)\n-                ? SyncopeConstants.MASTER_DOMAIN\n-                : AuthContextUtils.getDomain();\n-    }\n-\n-}"},{"sha":"c6cad6e4af32d7191782da047f179ed150f16df7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/slice/DomainFinderTargetPolicy.java","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d6187d1ff992e563bda761a91e69649f4e950f7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainFinderTargetPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d6187d1ff992e563bda761a91e69649f4e950f7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainFinderTargetPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainFinderTargetPolicy.java?ref=0d6187d1ff992e563bda761a91e69649f4e950f7","patch":"@@ -1,38 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.slice;\n-\n-import java.util.List;\n-import org.apache.openjpa.slice.FinderTargetPolicy;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.persistence.jpa.entity.JPADomain;\n-\n-public class DomainFinderTargetPolicy implements FinderTargetPolicy {\n-\n-    @Override\n-    public String[] getTargets(final Class<?> cls, final Object oid, final List<String> slices, final Object context) {\n-        return new String[] {\n-            JPADomain.class.equals(cls)\n-            ? SyncopeConstants.MASTER_DOMAIN\n-            : AuthContextUtils.getDomain()\n-        };\n-    }\n-\n-}"},{"sha":"193ef2b567de190851e1f3f1a50a5666cc32ff5a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/slice/DomainQueryTargetPolicy.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d6187d1ff992e563bda761a91e69649f4e950f7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainQueryTargetPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d6187d1ff992e563bda761a91e69649f4e950f7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainQueryTargetPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainQueryTargetPolicy.java?ref=0d6187d1ff992e563bda761a91e69649f4e950f7","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.slice;\n-\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.openjpa.slice.QueryTargetPolicy;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.persistence.jpa.entity.JPADomain;\n-\n-public class DomainQueryTargetPolicy implements QueryTargetPolicy {\n-\n-    @Override\n-    public String[] getTargets(final String query, final Map<Object, Object> params, final String language,\n-            final List<String> slices, final Object context) {\n-\n-        return new String[] {\n-            query.contains(JPADomain.class.getSimpleName())\n-            ? SyncopeConstants.MASTER_DOMAIN\n-            : AuthContextUtils.getDomain()\n-        };\n-    }\n-\n-}"},{"sha":"57f1af02ca1b2be70adf017ee311459a41cb00b4","filename":"core/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -26,4 +26,5 @@ jpa.orm=META-INF/spring-orm.xml\n quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n quartz.sql=tables_postgres.sql\n audit.sql=audit.sql\n-database.schema=\n\\ No newline at end of file\n+database.schema=\n+"},{"sha":"5983ca6744a6ecb28f10fae0c5747b428b9abcea","filename":"core/persistence-jpa/src/main/resources/persistenceContextEMFactory.xml","status":"modified","additions":5,"deletions":26,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -21,7 +21,7 @@ under the License.\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n-  \n+\n   <bean id=\"entityManagerFactory\"\n         class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n     <property name=\"packagesToScan\" value=\"org.apache.syncope.core.persistence.jpa.entity\"/>\n@@ -47,43 +47,22 @@ under the License.\n     </property>\n     <property name=\"jpaPropertyMap\">\n       <map>\n-        <entry key=\"openjpa.Log\" value=\"DefaultLevel=INFO, Runtime=TRACE, Tool=TRACE, SQL=TRACE\"/>\n-        \n         <!--<entry key=\"openjpa.Log\" value=\"SQL=TRACE\"/>\n         <entry key=\"openjpa.ConnectionFactoryProperties\" \n         value=\"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n-        \n+                                \n         <entry key=\"openjpa.NontransactionalWrite\" value=\"false\"/>\n         <entry key=\"openjpa.AutoDetach\" value=\"close, commit, nontx-read, rollback\"/>\n \n         <entry key=\"openjpa.jdbc.SchemaFactory\" value=\"native(ForeignKeys=true)\"/>\n         <entry key=\"openjpa.jdbc.MappingDefaults\" \n                value=\"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict\"/>\n-                        \n+                \n         <entry key=\"openjpa.DataCache\" value=\"true\"/>\n-        <entry key=\"openjpa.QueryCache\" value=\"false\"/>\n-        <entry key=\"openjpa.QueryCompilationCache\" value=\"false\"/>\n+        <entry key=\"openjpa.QueryCache\" value=\"true\"/>\n         <entry key=\"openjpa.RemoteCommitProvider\" value=\"sjvm\"/>\n-        \n-        <entry key=\"openjpa.BrokerFactory\" value=\"slice\"/>       \n-        <entry key=\"openjpa.BrokerImpl\" value=\"org.apache.openjpa.slice.DistributedBrokerImpl\"/> \n-        <entry key=\"openjpa.slice.Lenient\" value=\"false\"/>\n-        \n-        <entry key=\"openjpa.slice.DistributionPolicy\" \n-               value=\"org.apache.syncope.core.persistence.jpa.slice.DomainDistributionPolicy\"/>\n-        <entry key=\"openjpa.slice.QueryTargetPolicy\" \n-               value=\"org.apache.syncope.core.persistence.jpa.slice.DomainQueryTargetPolicy\"/>\n-        <entry key=\"openjpa.slice.FinderTargetPolicy\" \n-               value=\"org.apache.syncope.core.persistence.jpa.slice.DomainFinderTargetPolicy\"/>\n-\n-        <entry key=\"openjpa.slice.Names\" value=\"Master\"/>        \n-        <entry key=\"openjpa.slice.Master\"  value=\"Master\"/>\n-        <entry key=\"openjpa.slice.Lenient\" value=\"false\"/>\n-        \n-        <entry key=\"openjpa.slice.Master.ConnectionFactory\" value-ref=\"dataSource\"/>\n-        <entry key=\"openjpa.slice.Master.jdbc.DBDictionary\" value=\"${jpa.dialect}\"/>\n       </map>\n     </property>\n   </bean>\n \n-</beans>\n+</beans>\n\\ No newline at end of file"},{"sha":"a3bfedd5c8227b89e4e0d12527168ee94a84b6e9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -22,7 +22,9 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -33,8 +35,10 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -62,6 +66,29 @@ public void findWithoutExecs() {\n         assertEquals(3, tasks.size());\n     }\n \n+    @Test\n+    public void findPaginated() {\n+        List<Task> tasks = taskDAO.findAll(1, 2, Collections.<OrderByClause>emptyList(), TaskType.PROPAGATION);\n+        assertNotNull(tasks);\n+        assertEquals(2, tasks.size());\n+\n+        for (Task task : tasks) {\n+            assertNotNull(task);\n+        }\n+\n+        tasks = taskDAO.findAll(2, 2, Collections.<OrderByClause>emptyList(), TaskType.PROPAGATION);\n+        assertNotNull(tasks);\n+        assertEquals(2, tasks.size());\n+\n+        for (Task task : tasks) {\n+            assertNotNull(task);\n+        }\n+\n+        tasks = taskDAO.findAll(1000, 2, Collections.<OrderByClause>emptyList(), TaskType.PROPAGATION);\n+        assertNotNull(tasks);\n+        assertTrue(tasks.isEmpty());\n+    }\n+\n     @Test\n     public void findAll() {\n         assertEquals(5, taskDAO.findAll(TaskType.PROPAGATION).size());"},{"sha":"d0f021361f1d3157d1db365cea9c8ccb8d2f348c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeClassTest.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -23,6 +23,8 @@\n \n import static org.junit.Assert.assertTrue;\n \n+import javax.persistence.EntityManager;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -41,6 +43,40 @@ public class AnyTypeClassTest extends AbstractTest {\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n+    @Autowired\n+    private EntityManager entityManager;\n+\n+    @Test\n+    public void create() {\n+        PlainSchema newSchema = entityFactory.newEntity(PlainSchema.class);\n+        newSchema.setKey(\"new_plain_schema\");\n+        newSchema.setType(AttrSchemaType.String);\n+\n+        plainSchemaDAO.save(newSchema);\n+\n+        plainSchemaDAO.flush();\n+\n+        newSchema = plainSchemaDAO.find(newSchema.getKey());\n+        assertNotNull(newSchema);\n+\n+        AnyTypeClass newClass = entityFactory.newEntity(AnyTypeClass.class);\n+        newClass.setKey(\"new class\");\n+        newClass.add(newSchema);\n+\n+        anyTypeClassDAO.save(newClass);\n+\n+        anyTypeClassDAO.flush();\n+\n+        newClass = anyTypeClassDAO.find(newClass.getKey());\n+        assertNotNull(newClass);\n+        assertEquals(1, newClass.getPlainSchemas().size());\n+        assertEquals(newSchema, newClass.getPlainSchemas().get(0));\n+        assertEquals(newClass, newClass.getPlainSchemas().get(0).getAnyTypeClass());\n+\n+        newSchema = plainSchemaDAO.find(newSchema.getKey());\n+        assertNotNull(newSchema.getAnyTypeClass());\n+    }\n+\n     @Test\n     public void delete() {\n         AnyTypeClass minimalUser = anyTypeClassDAO.find(\"minimal user\");"},{"sha":"31ea1b070f4c564666d9592e6f971dca9048f276","filename":"core/persistence-jpa/src/test/resources/persistence.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -27,4 +27,5 @@ quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n quartz.scheduler.idleWaitTime=5000\n quartz.sql=tables_h2.sql\n audit.sql=audit.sql\n-database.schema=\n\\ No newline at end of file\n+database.schema=\n+"},{"sha":"b185ca8a4f8718f9ca80d8ea9925073648221e13","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SchemaDataBinder.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSchemaDataBinder.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -27,22 +27,22 @@\n \n public interface SchemaDataBinder {\n \n-    <T extends PlainSchema> void create(PlainSchemaTO schemaTO, T schema);\n+    PlainSchema create(PlainSchemaTO schemaTO);\n \n-    <T extends DerSchema> T create(DerSchemaTO derSchemaTO, T derSchema);\n+    DerSchema create(DerSchemaTO schemaTO);\n \n-    <T extends VirSchema> T create(VirSchemaTO virSchemaTO, T virSchema);\n+    VirSchema create(VirSchemaTO schemaTO);\n \n-    <T extends DerSchema> DerSchemaTO getDerSchemaTO(T derSchema);\n+    DerSchemaTO getDerSchemaTO(DerSchema schema);\n \n-    <T extends PlainSchema> PlainSchemaTO getPlainSchemaTO(T schema);\n+    PlainSchemaTO getPlainSchemaTO(PlainSchema schema);\n \n-    <T extends VirSchema> VirSchemaTO getVirSchemaTO(T virSchema);\n+    VirSchemaTO getVirSchemaTO(VirSchema schema);\n \n-    <T extends PlainSchema> void update(PlainSchemaTO schemaTO, T schema);\n+    PlainSchema update(PlainSchemaTO schemaTO, PlainSchema schema);\n \n-    <T extends DerSchema> T update(DerSchemaTO derSchemaTO, T derSchema);\n+    DerSchema update(DerSchemaTO schemaTO, DerSchema derSchema);\n \n-    <T extends VirSchema> T update(VirSchemaTO virSchemaTO, T virSchema);\n+    VirSchema update(VirSchemaTO schemaTO, VirSchema virSchema);\n \n }"},{"sha":"8a33e12881f6883b334ae6851e7f09d62ca40424","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeClassDataBinderImpl.java","status":"modified","additions":21,"deletions":6,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -63,31 +63,46 @@ public void update(final AnyTypeClass anyTypeClass, final AnyTypeClassTO anyType\n             anyTypeClass.setKey(anyTypeClassTO.getKey());\n         }\n \n+        for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+            schema.setAnyTypeClass(null);\n+        }\n+\n         anyTypeClass.getPlainSchemas().clear();\n         for (String schemaName : anyTypeClassTO.getPlainSchemas()) {\n             PlainSchema schema = plainSchemaDAO.find(schemaName);\n-            if (schema == null) {\n-                LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName() + \"{}, ignoring...\", schemaName);\n+            if (schema == null || schema.getAnyTypeClass() != null) {\n+                LOG.debug(\"Invalid or already in use\" + PlainSchema.class.getSimpleName()\n+                        + \"{}, ignoring...\", schemaName);\n             } else {\n                 anyTypeClass.add(schema);\n             }\n         }\n \n+        for (DerSchema schema : derSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+            schema.setAnyTypeClass(null);\n+        }\n+\n         anyTypeClass.getDerSchemas().clear();\n         for (String schemaName : anyTypeClassTO.getDerSchemas()) {\n             DerSchema schema = derSchemaDAO.find(schemaName);\n-            if (schema == null) {\n-                LOG.debug(\"Invalid \" + DerSchema.class.getSimpleName() + \"{}, ignoring...\", schemaName);\n+            if (schema == null || schema.getAnyTypeClass() != null) {\n+                LOG.debug(\"Invalid or already in use\" + DerSchema.class.getSimpleName()\n+                        + \"{}, ignoring...\", schemaName);\n             } else {\n                 anyTypeClass.add(schema);\n             }\n         }\n \n+        for (VirSchema schema : virSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+            schema.setAnyTypeClass(null);\n+        }\n+\n         anyTypeClass.getVirSchemas().clear();\n         for (String schemaName : anyTypeClassTO.getVirSchemas()) {\n             VirSchema schema = virSchemaDAO.find(schemaName);\n-            if (schema == null) {\n-                LOG.debug(\"Invalid \" + VirSchema.class.getSimpleName() + \"{}, ignoring...\", schemaName);\n+            if (schema == null || schema.getAnyTypeClass() != null) {\n+                LOG.debug(\"Invalid or already in use\" + VirSchema.class.getSimpleName()\n+                        + \"{}, ignoring...\", schemaName);\n             } else {\n                 anyTypeClass.add(schema);\n             }"},{"sha":"0794f8caa9088af3bde821a3f97e832559124f5c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":120,"deletions":35,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -33,44 +33,88 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class SchemaDataBinderImpl implements SchemaDataBinder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(SchemaDataBinder.class);\n+\n+    private static final String[] IGNORE_PROPERTIES = { \"anyTypeClass\" };\n+\n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n     @Autowired\n-    private PlainSchemaDAO schemaDAO;\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n \n     @Autowired\n     private AnyUtilsFactory anyUtilsFactory;\n \n     // --------------- PLAIN -----------------\n-    private <T extends PlainSchema> void fill(final T schema, final PlainSchemaTO schemaTO) {\n+    private PlainSchema fill(final PlainSchema schema, final PlainSchemaTO schemaTO) {\n         if (!JexlUtils.isExpressionValid(schemaTO.getMandatoryCondition())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n             sce.getElements().add(schemaTO.getMandatoryCondition());\n             throw sce;\n         }\n \n-        BeanUtils.copyProperties(schemaTO, schema);\n+        BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);\n+\n+        PlainSchema merged = plainSchemaDAO.save(schema);\n+\n+        if (schemaTO.getAnyTypeClass() != null\n+                && (merged.getAnyTypeClass() == null\n+                || !schemaTO.getAnyTypeClass().equals(merged.getAnyTypeClass().getKey()))) {\n+\n+            AnyTypeClass anyTypeClass = anyTypeClassDAO.find(schemaTO.getAnyTypeClass());\n+            if (anyTypeClass == null) {\n+                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName()\n+                        + \"{}, ignoring...\", schemaTO.getAnyTypeClass());\n+            } else {\n+                anyTypeClass.add(merged);\n+                merged.setAnyTypeClass(anyTypeClass);\n+            }\n+        } else if (schemaTO.getAnyTypeClass() == null && merged.getAnyTypeClass() != null) {\n+            merged.getAnyTypeClass().remove(merged);\n+            merged.setAnyTypeClass(null);\n+        }\n+\n+        return merged;\n     }\n \n     @Override\n-    public <T extends PlainSchema> void create(final PlainSchemaTO schemaTO, final T schema) {\n-        fill(schema, schemaTO);\n+    public PlainSchema create(final PlainSchemaTO schemaTO) {\n+        return fill(entityFactory.newEntity(PlainSchema.class), schemaTO);\n     }\n \n     @Override\n-    public <T extends PlainSchema> void update(final PlainSchemaTO schemaTO, final T schema) {\n+    public PlainSchema update(final PlainSchemaTO schemaTO, final PlainSchema schema) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n         boolean hasAttrs = false;\n         for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n             AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n-            hasAttrs |= schemaDAO.findAttrs(schema, anyUtils.plainAttrClass()).isEmpty();\n+            hasAttrs |= plainSchemaDAO.findAttrs(schema, anyUtils.plainAttrClass()).isEmpty();\n         }\n \n         if (hasAttrs) {\n@@ -92,30 +136,31 @@ public <T extends PlainSchema> void update(final PlainSchemaTO schemaTO, final T\n             throw scce;\n         }\n \n-        fill(schema, schemaTO);\n+        return fill(schema, schemaTO);\n     }\n \n     @Override\n-    public <T extends PlainSchema> PlainSchemaTO getPlainSchemaTO(final T schema) {\n+    public PlainSchemaTO getPlainSchemaTO(final PlainSchema schema) {\n         PlainSchemaTO schemaTO = new PlainSchemaTO();\n-        BeanUtils.copyProperties(schema, schemaTO);\n+        BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);\n+        schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n \n         return schemaTO;\n     }\n \n     // --------------- DERIVED -----------------\n-    private <T extends DerSchema> T populate(final T derSchema, final DerSchemaTO derSchemaTO) {\n+    private DerSchema fill(final DerSchema schema, final DerSchemaTO schemaTO) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n-        if (StringUtils.isBlank(derSchemaTO.getExpression())) {\n+        if (StringUtils.isBlank(schemaTO.getExpression())) {\n             SyncopeClientException requiredValuesMissing =\n                     SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n             requiredValuesMissing.getElements().add(\"expression\");\n \n             scce.addException(requiredValuesMissing);\n-        } else if (!JexlUtils.isExpressionValid(derSchemaTO.getExpression())) {\n+        } else if (!JexlUtils.isExpressionValid(schemaTO.getExpression())) {\n             SyncopeClientException e = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n-            e.getElements().add(derSchemaTO.getExpression());\n+            e.getElements().add(schemaTO.getExpression());\n \n             scce.addException(e);\n         }\n@@ -124,51 +169,91 @@ private <T extends DerSchema> T populate(final T derSchema, final DerSchemaTO de\n             throw scce;\n         }\n \n-        BeanUtils.copyProperties(derSchemaTO, derSchema);\n+        BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);\n+\n+        DerSchema merged = derSchemaDAO.save(schema);\n+\n+        if (schemaTO.getAnyTypeClass() != null\n+                && (merged.getAnyTypeClass() == null\n+                || !schemaTO.getAnyTypeClass().equals(merged.getAnyTypeClass().getKey()))) {\n+\n+            AnyTypeClass anyTypeClass = anyTypeClassDAO.find(schemaTO.getAnyTypeClass());\n+            if (anyTypeClass == null) {\n+                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName()\n+                        + \"{}, ignoring...\", schemaTO.getAnyTypeClass());\n+            } else {\n+                anyTypeClass.add(merged);\n+                merged.setAnyTypeClass(anyTypeClass);\n+            }\n+        } else if (schemaTO.getAnyTypeClass() == null && merged.getAnyTypeClass() != null) {\n+            merged.getAnyTypeClass().remove(merged);\n+            merged.setAnyTypeClass(null);\n+        }\n \n-        return derSchema;\n+        return merged;\n     }\n \n     @Override\n-    public <T extends DerSchema> T create(final DerSchemaTO derSchemaTO, final T derSchema) {\n-        return populate(derSchema, derSchemaTO);\n+    public DerSchema create(final DerSchemaTO schemaTO) {\n+        return fill(entityFactory.newEntity(DerSchema.class), schemaTO);\n     }\n \n     @Override\n-    public <T extends DerSchema> T update(final DerSchemaTO derSchemaTO, final T derSchema) {\n-        return populate(derSchema, derSchemaTO);\n+    public DerSchema update(final DerSchemaTO schemaTO, final DerSchema schema) {\n+        return fill(schema, schemaTO);\n     }\n \n     @Override\n-    public <T extends DerSchema> DerSchemaTO getDerSchemaTO(final T derSchema) {\n-        DerSchemaTO derSchemaTO = new DerSchemaTO();\n-        BeanUtils.copyProperties(derSchema, derSchemaTO);\n+    public DerSchemaTO getDerSchemaTO(final DerSchema schema) {\n+        DerSchemaTO schemaTO = new DerSchemaTO();\n+        BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);\n+        schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n \n-        return derSchemaTO;\n+        return schemaTO;\n     }\n \n     // --------------- VIRTUAL -----------------\n-    private <T extends VirSchema> T fill(final T virSchema, final VirSchemaTO virSchemaTO) {\n-        BeanUtils.copyProperties(virSchemaTO, virSchema);\n+    private VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n+        BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);\n+\n+        VirSchema merged = virSchemaDAO.save(schema);\n+\n+        if (schemaTO.getAnyTypeClass() != null\n+                && (merged.getAnyTypeClass() == null\n+                || !schemaTO.getAnyTypeClass().equals(merged.getAnyTypeClass().getKey()))) {\n+\n+            AnyTypeClass anyTypeClass = anyTypeClassDAO.find(schemaTO.getAnyTypeClass());\n+            if (anyTypeClass == null) {\n+                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName()\n+                        + \"{}, ignoring...\", schemaTO.getAnyTypeClass());\n+            } else {\n+                anyTypeClass.add(merged);\n+                merged.setAnyTypeClass(anyTypeClass);\n+            }\n+        } else if (schemaTO.getAnyTypeClass() == null && merged.getAnyTypeClass() != null) {\n+            merged.getAnyTypeClass().remove(merged);\n+            merged.setAnyTypeClass(null);\n+        }\n \n-        return virSchema;\n+        return merged;\n     }\n \n     @Override\n-    public <T extends VirSchema> T create(final VirSchemaTO virSchemaTO, final T virSchema) {\n-        return fill(virSchema, virSchemaTO);\n+    public VirSchema create(final VirSchemaTO schemaTO) {\n+        return fill(entityFactory.newEntity(VirSchema.class), schemaTO);\n     }\n \n     @Override\n-    public <T extends VirSchema> T update(final VirSchemaTO virSchemaTO, final T virSchema) {\n-        return fill(virSchema, virSchemaTO);\n+    public VirSchema update(final VirSchemaTO schemaTO, final VirSchema schema) {\n+        return fill(schema, schemaTO);\n     }\n \n     @Override\n-    public <T extends VirSchema> VirSchemaTO getVirSchemaTO(final T virSchema) {\n-        VirSchemaTO virSchemaTO = new VirSchemaTO();\n-        BeanUtils.copyProperties(virSchema, virSchemaTO);\n+    public VirSchemaTO getVirSchemaTO(final VirSchema schema) {\n+        VirSchemaTO schemaTO = new VirSchemaTO();\n+        BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);\n+        schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n \n-        return virSchemaTO;\n+        return schemaTO;\n     }\n }"},{"sha":"6e88c71d7a092b135dba12b0800b7d0b743d5a37","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AnyTypeClassITCase.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyTypeClassITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyTypeClassITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyTypeClassITCase.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -21,13 +21,15 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -58,9 +60,21 @@ public void list() {\n \n     @Test\n     public void crud() {\n+        // 1. create sample schemas\n+        PlainSchemaTO plainSchema = new PlainSchemaTO();\n+        plainSchema.setKey(\"new_plain_schema\" + getUUIDString());\n+        plainSchema.setType(AttrSchemaType.String);\n+        plainSchema = createSchema(SchemaType.PLAIN, plainSchema);\n+\n+        DerSchemaTO derSchema = new DerSchemaTO();\n+        derSchema.setKey(\"new_der_schema\" + getUUIDString());\n+        derSchema.setExpression(plainSchema.getKey() + \" + '_' + derived_dx\");\n+        derSchema = createSchema(SchemaType.DERIVED, derSchema);\n+\n+        // 2. actual CRUD\n         AnyTypeClassTO newClass = new AnyTypeClassTO();\n         newClass.setKey(\"new class\" + getUUIDString());\n-        newClass.getPlainSchemas().add(\"firstname\");\n+        newClass.getPlainSchemas().add(plainSchema.getKey());\n \n         Response response = anyTypeClassService.create(newClass);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n@@ -71,7 +85,7 @@ public void crud() {\n         assertTrue(newClass.getDerSchemas().isEmpty());\n         assertTrue(newClass.getVirSchemas().isEmpty());\n \n-        newClass.getDerSchemas().add(\"cn\");\n+        newClass.getDerSchemas().add(derSchema.getKey());\n         anyTypeClassService.update(newClass);\n \n         newClass = anyTypeClassService.read(newClass.getKey());\n@@ -80,6 +94,9 @@ public void crud() {\n         assertFalse(newClass.getDerSchemas().isEmpty());\n         assertTrue(newClass.getVirSchemas().isEmpty());\n \n+        assertEquals(newClass.getKey(), schemaService.read(SchemaType.PLAIN, plainSchema.getKey()).getAnyTypeClass());\n+        assertEquals(newClass.getKey(), schemaService.read(SchemaType.DERIVED, derSchema.getKey()).getAnyTypeClass());\n+\n         anyTypeClassService.delete(newClass.getKey());\n \n         try {\n@@ -88,6 +105,9 @@ public void crud() {\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n+\n+        assertNull(schemaService.read(SchemaType.PLAIN, plainSchema.getKey()).getAnyTypeClass());\n+        assertNull(schemaService.read(SchemaType.DERIVED, derSchema.getKey()).getAnyTypeClass());\n     }\n \n     @Test"},{"sha":"bc1e2f49420d7aa7f2ee2879459e0a40422c583e","filename":"pom.xml","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -335,7 +335,7 @@ under the License.\n     <spring.version>4.1.7.RELEASE</spring.version>\n     <spring-security.version>4.0.2.RELEASE</spring-security.version>\n \n-    <openjpa.version>2.4.1-SNAPSHOT</openjpa.version>\n+    <openjpa.version>2.4.0</openjpa.version>\n     <commons-dbcp.version>2.1</commons-dbcp.version>\n     <hibernate-validator.version>5.2.1.Final</hibernate-validator.version>\n \n@@ -533,11 +533,6 @@ under the License.\n         <artifactId>openjpa-persistence-jdbc</artifactId>\n         <version>${openjpa.version}</version>\n       </dependency>\n-      <dependency>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-slice</artifactId>\n-        <version>${openjpa.version}</version>\n-      </dependency>\n     \n       <dependency>\n         <groupId>org.apache.commons</groupId>\n@@ -1111,6 +1106,12 @@ under the License.\n           <version>2.10.3</version>          \n         </plugin>\n         \n+        <plugin>\n+          <groupId>org.apache.cxf</groupId>\n+          <artifactId>cxf-java2wadl-plugin</artifactId>\n+          <version>${cxf.version}</version>\n+        </plugin>\n+        \n         <plugin>\n           <groupId>org.apache.openjpa</groupId>\n           <artifactId>openjpa-maven-plugin</artifactId>"}]}