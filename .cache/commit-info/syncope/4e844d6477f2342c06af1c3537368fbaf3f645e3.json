{"sha":"4e844d6477f2342c06af1c3537368fbaf3f645e3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRlODQ0ZDY0NzdmMjM0MmMwNmFmMWMzNTM3MzY4ZmJhZjNmNjQ1ZTM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-08-16T07:35:34Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-08-16T07:35:34Z"},"message":"[SYNCOPE-411] Applying provided patch + some minor tweaks + audit\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1514600 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da1aa0168ab39f3afc0f332eb7e7184d4feba9d1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/da1aa0168ab39f3afc0f332eb7e7184d4feba9d1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4e844d6477f2342c06af1c3537368fbaf3f645e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4e844d6477f2342c06af1c3537368fbaf3f645e3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4e844d6477f2342c06af1c3537368fbaf3f645e3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4e844d6477f2342c06af1c3537368fbaf3f645e3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"cfea4511649744c9088b3aee67a20b81d86625df","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cfea4511649744c9088b3aee67a20b81d86625df","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cfea4511649744c9088b3aee67a20b81d86625df"}],"stats":{"total":163,"additions":151,"deletions":12},"files":[{"sha":"780e5eb7ab15e686ba85fddc9001122ed129c6af","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4e844d6477f2342c06af1c3537368fbaf3f645e3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4e844d6477f2342c06af1c3537368fbaf3f645e3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=4e844d6477f2342c06af1c3537368fbaf3f645e3","patch":"@@ -125,7 +125,8 @@ public enum NotificationSubCategory {\n         read,\r\n         update,\r\n         delete,\r\n-        sent\r\n+        send,\r\n+        retry\r\n \r\n     }\r\n \r"},{"sha":"546b68a3b4df6e6fd410da41e5b4a5581666a22b","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationJob.java","status":"modified","additions":41,"deletions":3,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4e844d6477f2342c06af1c3537368fbaf3f645e3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4e844d6477f2342c06af1c3537368fbaf3f645e3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java?ref=4e844d6477f2342c06af1c3537368fbaf3f645e3","patch":"@@ -91,6 +91,8 @@ enum Status {\n \n     private String smtpPassword;\n \n+    private long maxRetries;\n+\n     private void init() {\n         smtpHost = confDAO.find(\"smtp.host\", \"\").getValue();\n         smtpPort = 25;\n@@ -103,6 +105,13 @@ private void init() {\n         smtpPassword = confDAO.find(\"smtp.password\", \"\").getValue();\n \n         LOG.debug(\"SMTP details fetched: {}:{} / {}:[PASSWORD_NOT_SHOWN]\", smtpHost, smtpPort, smtpUsername);\n+\n+        try {\n+            maxRetries = Long.valueOf(confDAO.find(\"notification.maxRetries\", \"0\").getValue());\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid maximum number of retries, retries disabled\", e);\n+            maxRetries = 0;\n+        }\n     }\n \n     public TaskExec executeSingle(final NotificationTask task) {\n@@ -112,6 +121,8 @@ public TaskExec executeSingle(final NotificationTask task) {\n         execution.setTask(task);\n         execution.setStartDate(new Date());\n \n+        boolean retryPossible = true;\n+\n         if (StringUtils.isBlank(smtpHost) || StringUtils.isBlank(task.getSender())\n                 || StringUtils.isBlank(task.getSubject()) || task.getRecipients().isEmpty()\n                 || StringUtils.isBlank(task.getHtmlBody()) || StringUtils.isBlank(task.getTextBody())) {\n@@ -126,6 +137,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n             LOG.error(message);\n \n             execution.setStatus(Status.NOT_SENT.name());\n+            retryPossible = false;\n \n             if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n                 execution.setMessage(message);\n@@ -187,7 +199,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         execution.setMessage(report.toString());\n                     }\n \n-                    auditManager.audit(Category.notification, NotificationSubCategory.sent, Result.success,\n+                    auditManager.audit(Category.notification, NotificationSubCategory.send, Result.success,\n                             \"Successfully sent notification to \" + to);\n                 } catch (Exception e) {\n                     LOG.error(\"Could not send e-mail\", e);\n@@ -201,7 +213,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         execution.setMessage(exceptionWriter.toString());\n                     }\n \n-                    auditManager.audit(Category.notification, NotificationSubCategory.sent, Result.failure,\n+                    auditManager.audit(Category.notification, NotificationSubCategory.send, Result.failure,\n                             \"Could not send notification to \" + to, e);\n                 }\n \n@@ -211,8 +223,11 @@ public TaskExec executeSingle(final NotificationTask task) {\n \n         if (hasToBeRegistered(execution)) {\n             execution = notificationManager.storeExec(execution);\n+            if (retryPossible && (Status.valueOf(execution.getStatus()) == Status.NOT_SENT)) {\n+                handleRetries(execution);\n+            }\n         } else {\n-            notificationManager.setTaskExecuted(execution.getTask().getId());\n+            notificationManager.setTaskExecuted(execution.getTask().getId(), true);\n         }\n \n         return execution;\n@@ -242,4 +257,27 @@ private boolean hasToBeRegistered(final TaskExec execution) {\n                 && task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n                 || task.getTraceLevel() == TraceLevel.ALL;\n     }\n+\n+    private void handleRetries(final TaskExec execution) {\n+        if (maxRetries <= 0) {\n+            return;\n+        }\n+\n+        long failedExecutionsCount = notificationManager.countExecutionsWithStatus(\n+                execution.getTask().getId(), Status.NOT_SENT.name());\n+\n+        if (failedExecutionsCount <= maxRetries) {\n+            LOG.debug(\"Execution of notification task {} will be retried [{}/{}]\",\n+                    execution.getTask(), failedExecutionsCount, maxRetries);\n+            notificationManager.setTaskExecuted(execution.getTask().getId(), false);\n+\n+            auditManager.audit(Category.notification, NotificationSubCategory.retry, Result.success,\n+                    \"Notification task \" + execution.getTask().getId() + \" will be retried\");\n+        } else {\n+            LOG.error(\"Maximum number of retries reached for task {} - giving up\", execution.getTask());\n+\n+            auditManager.audit(Category.notification, NotificationSubCategory.retry, Result.failure,\n+                    \"Giving up retries on notification task \" + execution.getTask().getId());\n+        }\n+    }\n }"},{"sha":"996b5ac83b8c79cdde583eb31c35dd6cc0d46661","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":30,"deletions":6,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4e844d6477f2342c06af1c3537368fbaf3f645e3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4e844d6477f2342c06af1c3537368fbaf3f645e3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=4e844d6477f2342c06af1c3537368fbaf3f645e3","patch":"@@ -263,22 +263,46 @@ public TaskExec storeExec(final TaskExec execution) {\n         NotificationTask task = taskDAO.find(execution.getTask().getId());\n         task.addExec(execution);\n         task.setExecuted(true);\n-        task = taskDAO.save(task);\n-        // NotificationTasks always have a single execution at most\n-        return task.getExecs().get(0);\n+        taskDAO.save(task);\n+        // this flush call is needed to generate a value for the execution id\n+        taskDAO.flush();\n+        return execution;\n     }\n \n     /**\n-     * Mark NotificationTask with provided id as executed.\n+     * Set execution state of NotificationTask with provided id.\n      *\n      * @param taskId task to be updated\n+     * @param executed execution state\n      */\n-    public void setTaskExecuted(final Long taskId) {\n+    public void setTaskExecuted(final Long taskId, final boolean executed) {\n         NotificationTask task = taskDAO.find(taskId);\n-        task.setExecuted(true);\n+        task.setExecuted(executed);\n         taskDAO.save(task);\n     }\n \n+    /**\n+     * Count the number of task executions of a given task with a given status.\n+     *\n+     * @param taskId task id\n+     * @param status status\n+     * @return number of task executions\n+     */\n+    public long countExecutionsWithStatus(final Long taskId, final String status) {\n+        NotificationTask task = taskDAO.find(taskId);\n+        long count = 0;\n+        for (TaskExec taskExec : task.getExecs()) {\n+            if (status == null) {\n+                if (taskExec.getStatus() == null) {\n+                    count++;\n+                }\n+            } else if (status.equals(taskExec.getStatus())) {\n+                count++;\n+            }\n+        }\n+        return count;\n+    }\n+\n     protected Map<String, String> findAllSyncopeConfs() {\n         Map<String, String> syncopeConfMap = new HashMap<String, String>();\n         for (SyncopeConf conf : confDAO.findAll()) {"},{"sha":"bd564d534e8206ce61700d35634e73a1087037ea","filename":"core/src/main/resources/content.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4e844d6477f2342c06af1c3537368fbaf3f645e3/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4e844d6477f2342c06af1c3537368fbaf3f645e3/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=4e844d6477f2342c06af1c3537368fbaf3f645e3","patch":"@@ -29,6 +29,7 @@ under the License.\n   <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n   <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n   <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n+  <SyncopeConf confKey=\"notification.maxRetries\" confValue=\"0\"/>\n     \n   <!-- Authentication and authorization -->\n   <Entitlement name=\"SCHEMA_CREATE\"/>"},{"sha":"0f21b32a6d47effe95bd9ad3422f05ce74a4a95d","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":76,"deletions":2,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4e844d6477f2342c06af1c3537368fbaf3f645e3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4e844d6477f2342c06af1c3537368fbaf3f645e3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=4e844d6477f2342c06af1c3537368fbaf3f645e3","patch":"@@ -20,6 +20,7 @@\n \n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertEquals;\n \n import com.icegreen.greenmail.util.GreenMail;\n import com.icegreen.greenmail.util.ServerSetup;\n@@ -125,6 +126,9 @@ public class NotificationTest {\n     @Autowired\n     private NotificationJob notificationJob;\n \n+    @Autowired\n+    private NotificationManager notificationManager;\n+\n     @BeforeClass\n     public static void startGreenMail() {\n         ServerSetup[] config = new ServerSetup[2];\n@@ -307,15 +311,15 @@ public void issueSYNCOPE192() throws Exception {\n         assertTrue(task.isExecuted());\n         assertTrue(StringUtils.isNotBlank(task.getLatestExecStatus()));\n     }\n-    \n+\n     @Test\n     public void notifyByMailEmptyAbout() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n         notification.addEvent(\"create\");\n \n         notification.setAbout(null);\n-        \n+\n         MembershipCond membCond = new MembershipCond();\n         membCond.setRoleId(8L);\n         notification.setRecipients(NodeCond.getLeafCond(membCond));\n@@ -361,4 +365,74 @@ public void notifyByMailEmptyAbout() throws Exception {\n         taskController.execute(taskId, false);\n         assertTrue(verifyMail(sender, subject));\n     }\n+\n+    @Test\n+    public void notifyByMailWithRetry() throws Exception {\n+        // 1. create suitable notification for subsequent tests\n+        Notification notification = new Notification();\n+        notification.addEvent(\"create\");\n+\n+        notification.setAbout(null);\n+\n+        MembershipCond membCond = new MembershipCond();\n+        membCond.setRoleId(8L);\n+        notification.setRecipients(NodeCond.getLeafCond(membCond));\n+        notification.setSelfAsRecipient(true);\n+\n+        notification.setRecipientAttrName(\"email\");\n+        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+\n+        Random random = new Random(System.currentTimeMillis());\n+        String sender = \"syncopetest-\" + random.nextLong() + \"@syncope.apache.org\";\n+        notification.setSender(sender);\n+        String subject = \"Test notification \" + random.nextLong();\n+        notification.setSubject(subject);\n+        notification.setTemplate(\"optin\");\n+\n+        Notification actual = notificationDAO.save(notification);\n+        assertNotNull(actual);\n+\n+        notificationDAO.flush();\n+\n+        // 2. create user\n+        UserTO userTO = UserTestITCase.getSampleTO(mailAddress);\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7);\n+        userTO.addMembership(membershipTO);\n+\n+        userController.create(new MockHttpServletResponse(), userTO);\n+\n+        // 3. Set number of retries\n+        SyncopeConf retryConf = confDAO.find(\"notification.maxRetries\");\n+        retryConf.setValue(\"5\");\n+        confDAO.save(retryConf);\n+        confDAO.flush();\n+\n+        // 4. Stop mail server to force error sending mail\n+        stopGreenMail();\n+\n+        // 5. force Quartz job execution multiple times\n+        for (int i = 0; i < 10; i++) {\n+            notificationJob.execute(null);\n+        }\n+\n+        // 6. get NotificationTask, count number of executions\n+        NotificationTask foundTask = null;\n+        for (NotificationTask task : taskDAO.findAll(NotificationTask.class)) {\n+            if (sender.equals(task.getSender())) {\n+                foundTask = task;\n+            }\n+        }\n+        assertNotNull(foundTask);\n+        assertEquals(6, notificationManager.countExecutionsWithStatus(foundTask.getId(),\n+                NotificationJob.Status.NOT_SENT.name()));\n+\n+        // 7. start mail server again\n+        startGreenMail();\n+\n+        // 8. reset number of retries\n+        retryConf.setValue(\"0\");\n+        confDAO.save(retryConf);\n+        confDAO.flush();\n+    }\n }"},{"sha":"098892886aaf81cbc030a264b94cc37bb0019d6e","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4e844d6477f2342c06af1c3537368fbaf3f645e3/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4e844d6477f2342c06af1c3537368fbaf3f645e3/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=4e844d6477f2342c06af1c3537368fbaf3f645e3","patch":"@@ -29,6 +29,7 @@ under the License.\n   <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n   <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n   <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n+  <SyncopeConf confKey=\"notification.maxRetries\" confValue=\"3\"/>\n \n   <!-- sample policies -->\n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"sync policy 1\" type=\"GLOBAL_SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%2F%3E\"/>"}]}