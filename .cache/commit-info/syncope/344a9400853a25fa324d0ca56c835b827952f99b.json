{"sha":"344a9400853a25fa324d0ca56c835b827952f99b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM0NGE5NDAwODUzYTI1ZmEzMjRkMGNhNTZjODM1YjgyNzk1MmY5OWI=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-01-26T09:08:00Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-01-26T09:08:00Z"},"message":"Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/syncope","tree":{"sha":"c544fd8ebaf45e0f86051c7a4fdcfe1d8273576e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c544fd8ebaf45e0f86051c7a4fdcfe1d8273576e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/344a9400853a25fa324d0ca56c835b827952f99b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/344a9400853a25fa324d0ca56c835b827952f99b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/344a9400853a25fa324d0ca56c835b827952f99b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/344a9400853a25fa324d0ca56c835b827952f99b/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"ed3993b6dfb7223c24e79e30898fe4bdd5654d2b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ed3993b6dfb7223c24e79e30898fe4bdd5654d2b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ed3993b6dfb7223c24e79e30898fe4bdd5654d2b"},{"sha":"9df1e03de222148e3e2bdc62d8e2870c555293fe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9df1e03de222148e3e2bdc62d8e2870c555293fe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9df1e03de222148e3e2bdc62d8e2870c555293fe"}],"stats":{"total":79,"additions":42,"deletions":37},"files":[{"sha":"1f981acc92cdbccb049ca6f8eba3d2617f7fc1e6","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":42,"deletions":37,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/344a9400853a25fa324d0ca56c835b827952f99b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/344a9400853a25fa324d0ca56c835b827952f99b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=344a9400853a25fa324d0ca56c835b827952f99b","patch":"@@ -151,22 +151,22 @@ public void issueSYNCOPE418() {\n             assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n         }\n     }\n-    \n+\n     @Test\n-    public void issueSYNCOPE629() throws IOException{\n+    public void issueSYNCOPE629() throws IOException {\n         SchemaTO membershipKey = new SchemaTO();\n-        membershipKey.setName(\"membershipKey\"+getUUIDString());\n+        membershipKey.setName(\"membershipKey\" + getUUIDString());\n         membershipKey.setType(AttributeSchemaType.String);\n         createSchema(AttributableType.MEMBERSHIP, SchemaType.NORMAL, membershipKey);\n-        \n+\n         SchemaTO roleKey = new SchemaTO();\n-        roleKey.setName(\"roleKey\"+getUUIDString());\n+        roleKey.setName(\"roleKey\" + getUUIDString());\n         roleKey.setType(AttributeSchemaType.String);\n-        createSchema(AttributableType.ROLE, SchemaType.NORMAL, roleKey);        \n-                \n+        createSchema(AttributableType.ROLE, SchemaType.NORMAL, roleKey);\n+\n         RoleTO roleTO = new RoleTO();\n         roleTO.setName(\"aRole\" + getUUIDString());\n-        roleTO.setParent(8L);        \n+        roleTO.setParent(8L);\n         // verify inheritance password and account policies\n         roleTO.setInheritAccountPolicy(false);\n         // not inherited so setter execution shouldn't be ignored\n@@ -176,39 +176,44 @@ public void issueSYNCOPE629() throws IOException{\n         roleTO.setPasswordPolicy(2L);\n         roleTO.getRAttrTemplates().add(\"icon\");\n         roleTO.getAttrs().add(attributeTO(\"icon\", \"anIcon\"));\n-        roleTO.getResources().add(RESOURCE_NAME_LDAP);       \n+        roleTO.getResources().add(RESOURCE_NAME_LDAP);\n         roleTO.getMAttrTemplates().add(membershipKey.getName());\n         roleTO.getRAttrTemplates().add(roleKey.getName());\n         RoleTO testRole = createRole(roleTO);\n-                       \n-        Response response = configurationService.export();\n-        assertNotNull(response);\n-        assertEquals(Response.Status.OK.getStatusCode(), response.getStatusInfo().getStatusCode());\n-        assertTrue(response.getMediaType().toString().startsWith(MediaType.TEXT_XML));\n-        String contentDisposition = response.getHeaderString(HttpHeaders.CONTENT_DISPOSITION);\n-        assertNotNull(contentDisposition);\n \n-        Object entity = response.getEntity();\n-        assertTrue(entity instanceof InputStream);\n-        String configExport = IOUtils.toString((InputStream) entity, SyncopeConstants.DEFAULT_ENCODING);\n-        assertFalse(configExport.isEmpty());\n-        assertTrue(configExport.length() > 1000);\n-        \n-        String[] result = StringUtils.substringsBetween(configExport, \"<RATTRTEMPLATE\", \"/>\");\n-        boolean rattrExists = false;\n-        for(String entry : result){\n-            if(entry.contains(roleKey.getName())) rattrExists = true;\n-        }\n-        assertTrue(rattrExists);\n-        \n-        result = StringUtils.substringsBetween(configExport, \"<MATTRTEMPLATE\", \"/>\");\n-        boolean mattrExists = false;\n-        for(String entry : result){\n-            if(entry.contains(membershipKey.getName())) mattrExists = true;\n+        try {\n+            Response response = configurationService.export();\n+            assertNotNull(response);\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatusInfo().getStatusCode());\n+            assertTrue(response.getMediaType().toString().startsWith(MediaType.TEXT_XML));\n+            String contentDisposition = response.getHeaderString(HttpHeaders.CONTENT_DISPOSITION);\n+            assertNotNull(contentDisposition);\n+\n+            Object entity = response.getEntity();\n+            assertTrue(entity instanceof InputStream);\n+            String configExport = IOUtils.toString((InputStream) entity, SyncopeConstants.DEFAULT_ENCODING);\n+            assertFalse(configExport.isEmpty());\n+            assertTrue(configExport.length() > 1000);\n+\n+            String[] result = StringUtils.substringsBetween(configExport, \"<RATTRTEMPLATE\", \"/>\");\n+            boolean rattrExists = false;\n+            for (String entry : result) {\n+                if (entry.contains(roleKey.getName())) {\n+                    rattrExists = true;\n+                }\n+            }\n+            assertTrue(rattrExists);\n+\n+            result = StringUtils.substringsBetween(configExport, \"<MATTRTEMPLATE\", \"/>\");\n+            boolean mattrExists = false;\n+            for (String entry : result) {\n+                if (entry.contains(membershipKey.getName())) {\n+                    mattrExists = true;\n+                }\n+            }\n+            assertTrue(mattrExists);\n+        } finally {\n+            deleteRole(testRole.getId());\n         }\n-        assertTrue(mattrExists);\n-        \n-        deleteRole(testRole.getId());\n-\n     }\n }"}]}