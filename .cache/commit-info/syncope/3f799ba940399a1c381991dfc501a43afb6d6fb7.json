{"sha":"3f799ba940399a1c381991dfc501a43afb6d6fb7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNmNzk5YmE5NDAzOTlhMWMzODE5OTFkZmM1MDFhNDNhZmI2ZDZmYjc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-04-14T09:01:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-04-14T09:48:02Z"},"message":"[SYNCOPE-1628] Returning errored ConnInstanceTO instead of null in case of troubles with ConnId initialization","tree":{"sha":"8ccae225da513d65785ce64109f878de53535995","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8ccae225da513d65785ce64109f878de53535995"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3f799ba940399a1c381991dfc501a43afb6d6fb7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3f799ba940399a1c381991dfc501a43afb6d6fb7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3f799ba940399a1c381991dfc501a43afb6d6fb7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3f799ba940399a1c381991dfc501a43afb6d6fb7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f143c12644c786bf7f9b9176ae1a839a616d9f12","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f143c12644c786bf7f9b9176ae1a839a616d9f12","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f143c12644c786bf7f9b9176ae1a839a616d9f12"}],"stats":{"total":393,"additions":224,"deletions":169},"files":[{"sha":"ca67ed07a07f0452d927de1e7f7819730a6b4ed7","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":53,"deletions":66,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -50,7 +50,6 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.Component;\n@@ -105,7 +104,7 @@ protected Map<String, List<ConnInstanceTO>> load() {\n             final Map<String, List<ConnInstanceTO>> res = new HashMap<>();\n \n             ConnectorRestClient.getAllConnectors().forEach(conn -> {\n-                final List<ConnInstanceTO> conns;\n+                List<ConnInstanceTO> conns;\n                 if (res.containsKey(conn.getLocation())) {\n                     conns = res.get(conn.getLocation());\n                 } else {\n@@ -162,7 +161,7 @@ public void onClose(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final TopologyWebSocketBehavior websocket = new TopologyWebSocketBehavior();\n+        TopologyWebSocketBehavior websocket = new TopologyWebSocketBehavior();\n         body.add(websocket);\n \n         togglePanel = new TopologyTogglePanel(\"toggle\", getPageReference());\n@@ -171,7 +170,7 @@ public void onClose(final AjaxRequestTarget target) {\n         // -----------------------------------------\n         // Add Zoom panel\n         // -----------------------------------------\n-        final ActionsPanel<Serializable> zoomActionPanel = new ActionsPanel<>(\"zoom\", null);\n+        ActionsPanel<Serializable> zoomActionPanel = new ActionsPanel<>(\"zoom\", null);\n \n         zoomActionPanel.add(new ActionLink<Serializable>() {\n \n@@ -203,25 +202,25 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n         syncopeTopologyNode.setX(origX);\n         syncopeTopologyNode.setY(origY);\n \n-        final URI uri = WebClient.client(BaseRestClient.getSyncopeService()).getBaseURI();\n+        URI uri = WebClient.client(BaseRestClient.getSyncopeService()).getBaseURI();\n         syncopeTopologyNode.setHost(uri.getHost());\n         syncopeTopologyNode.setPort(uri.getPort());\n \n-        body.add(topologyNodePanel(Constants.SYNCOPE, syncopeTopologyNode));\n+        body.add(topologyNodePanel(Constants.SYNCOPE, syncopeTopologyNode, false));\n \n-        final Map<Serializable, Map<Serializable, TopologyNode>> connections = new HashMap<>();\n-        final Map<Serializable, TopologyNode> syncopeConnections = new HashMap<>();\n+        Map<Serializable, Map<Serializable, TopologyNode>> connections = new HashMap<>();\n+        Map<Serializable, TopologyNode> syncopeConnections = new HashMap<>();\n         connections.put(syncopeTopologyNode.getKey(), syncopeConnections);\n \n         // required to retrieve parent positions\n-        final Map<String, TopologyNode> servers = new HashMap<>();\n-        final Map<String, TopologyNode> connectors = new HashMap<>();\n+        Map<String, TopologyNode> servers = new HashMap<>();\n+        Map<String, TopologyNode> connectors = new HashMap<>();\n         // -----------------------------------------\n \n         // -----------------------------------------\n         // Add Connector Servers\n         // -----------------------------------------\n-        final ListView<URI> connectorServers = new ListView<URI>(\"connectorServers\", csModel.getObject().getLeft()) {\n+        ListView<URI> connectorServers = new ListView<URI>(\"connectorServers\", csModel.getObject().getLeft()) {\n \n             private static final long serialVersionUID = 6978621871488360380L;\n \n@@ -234,10 +233,10 @@ protected void populateItem(final ListItem<URI> item) {\n                 int x = (int) Math.round(origX + kx * Math.cos(Math.PI + Math.PI * (item.getIndex() + 1) / size));\n                 int y = (int) Math.round(origY + 100 * Math.sin(Math.PI + Math.PI * (item.getIndex() + 1) / size));\n \n-                final URI location = item.getModelObject();\n-                final String url = location.toASCIIString();\n+                URI location = item.getModelObject();\n+                String url = location.toASCIIString();\n \n-                final TopologyNode topologynode = new TopologyNode(url, url, TopologyNode.Kind.CONNECTOR_SERVER);\n+                TopologyNode topologynode = new TopologyNode(url, url, TopologyNode.Kind.CONNECTOR_SERVER);\n \n                 topologynode.setHost(location.getHost());\n                 topologynode.setPort(location.getPort());\n@@ -246,7 +245,7 @@ protected void populateItem(final ListItem<URI> item) {\n \n                 servers.put(String.class.cast(topologynode.getKey()), topologynode);\n \n-                item.add(topologyNodePanel(\"cs\", topologynode));\n+                item.add(topologyNodePanel(\"cs\", topologynode, false));\n \n                 syncopeConnections.put(url, topologynode);\n                 connections.put(url, new HashMap<>());\n@@ -260,7 +259,7 @@ protected void populateItem(final ListItem<URI> item) {\n         // -----------------------------------------\n         // Add File Paths\n         // -----------------------------------------\n-        final ListView<URI> filePaths = new ListView<URI>(\"filePaths\", csModel.getObject().getRight()) {\n+        ListView<URI> filePaths = new ListView<URI>(\"filePaths\", csModel.getObject().getRight()) {\n \n             private static final long serialVersionUID = 6978621871488360380L;\n \n@@ -273,10 +272,10 @@ protected void populateItem(final ListItem<URI> item) {\n                 int x = (int) Math.round(origX + kx * Math.cos(Math.PI * (item.getIndex() + 1) / size));\n                 int y = (int) Math.round(origY + 100 * Math.sin(Math.PI * (item.getIndex() + 1) / size));\n \n-                final URI location = item.getModelObject();\n-                final String url = location.toASCIIString();\n+                URI location = item.getModelObject();\n+                String url = location.toASCIIString();\n \n-                final TopologyNode topologynode = new TopologyNode(url, url, TopologyNode.Kind.FS_PATH);\n+                TopologyNode topologynode = new TopologyNode(url, url, TopologyNode.Kind.FS_PATH);\n \n                 topologynode.setHost(location.getHost());\n                 topologynode.setPort(location.getPort());\n@@ -285,7 +284,7 @@ protected void populateItem(final ListItem<URI> item) {\n \n                 servers.put(String.class.cast(topologynode.getKey()), topologynode);\n \n-                item.add(topologyNodePanel(\"fp\", topologynode));\n+                item.add(topologyNodePanel(\"fp\", topologynode, false));\n \n                 syncopeConnections.put(url, topologynode);\n                 connections.put(url, new HashMap<>());\n@@ -299,43 +298,36 @@ protected void populateItem(final ListItem<URI> item) {\n         // -----------------------------------------\n         // Add Connector Intances\n         // -----------------------------------------\n-        final List<List<ConnInstanceTO>> allConns = new ArrayList<>(connModel.getObject().values());\n-\n-        final ListView<List<ConnInstanceTO>> conns = new ListView<List<ConnInstanceTO>>(\"conns\", allConns) {\n+        ListView<List<ConnInstanceTO>> conns =\n+                new ListView<List<ConnInstanceTO>>(\"conns\", new ArrayList<>(connModel.getObject().values())) {\n \n             private static final long serialVersionUID = 697862187148836036L;\n \n             @Override\n             protected void populateItem(final ListItem<List<ConnInstanceTO>> item) {\n+                int size = item.getModelObject().size() + 1;\n \n-                final int size = item.getModelObject().size() + 1;\n-\n-                final ListView<ConnInstanceTO> conns = new ListView<ConnInstanceTO>(\"conns\", item.getModelObject()) {\n+                ListView<ConnInstanceTO> conns = new ListView<ConnInstanceTO>(\"conns\", item.getModelObject()) {\n \n                     private static final long serialVersionUID = 6978621871488360381L;\n \n                     @Override\n                     protected void populateItem(final ListItem<ConnInstanceTO> item) {\n-                        final ConnInstanceTO conn = item.getModelObject();\n+                        ConnInstanceTO conn = item.getModelObject();\n \n-                        final TopologyNode topologynode = new TopologyNode(\n+                        TopologyNode topologynode = new TopologyNode(\n                                 conn.getKey(),\n                                 StringUtils.isBlank(conn.getDisplayName()) // [SYNCOPE-1233]\n                                 ? conn.getBundleName() : conn.getDisplayName(),\n                                 TopologyNode.Kind.CONNECTOR);\n \n                         // Define the parent note\n-                        final TopologyNode parent = servers.get(conn.getLocation());\n+                        TopologyNode parent = servers.get(conn.getLocation());\n \n                         // Set the position\n                         int kx = size >= 6 ? 800 : (130 * size);\n \n-                        final double hpos;\n-                        if (conn.getLocation().startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n-                            hpos = Math.PI;\n-                        } else {\n-                            hpos = 0.0;\n-                        }\n+                        double hpos = conn.getLocation().startsWith(CONNECTOR_SERVER_LOCATION_PREFIX) ? Math.PI : 0.0;\n \n                         int x = (int) Math.round((Optional.ofNullable(parent).map(TopologyNode::getX).orElse(origX))\n                                 + kx * Math.cos(hpos + Math.PI * (item.getIndex() + 1) / size));\n@@ -347,11 +339,10 @@ protected void populateItem(final ListItem<ConnInstanceTO> item) {\n                         topologynode.setY(y);\n \n                         connectors.put(String.class.cast(topologynode.getKey()), topologynode);\n-                        item.add(topologyNodePanel(\"conn\", topologynode));\n+                        item.add(topologyNodePanel(\"conn\", topologynode, conn.isErrored()));\n \n                         // Update connections\n-                        final Map<Serializable, TopologyNode> remoteConnections;\n-\n+                        Map<Serializable, TopologyNode> remoteConnections;\n                         if (connections.containsKey(conn.getLocation())) {\n                             remoteConnections = connections.get(conn.getLocation());\n                         } else {\n@@ -374,18 +365,19 @@ protected void populateItem(final ListItem<ConnInstanceTO> item) {\n         // -----------------------------------------\n         // Add Resources\n         // -----------------------------------------\n-        final Collection<String> adminConns = new HashSet<>();\n+        Collection<String> adminConns = new HashSet<>();\n         connModel.getObject().values().forEach(connInstances -> adminConns.addAll(\n-                connInstances.stream().map(EntityTO::getKey).collect(Collectors.toList())));\n+                connInstances.stream().map(ConnInstanceTO::getKey).collect(Collectors.toList())));\n \n-        final Set<String> adminRes = new HashSet<>();\n-        final List<String> connToBeProcessed = new ArrayList<>();\n+        Set<String> adminRes = new HashSet<>();\n+        List<String> connToBeProcessed = new ArrayList<>();\n         resModel.getObject().stream().\n-                filter((resourceTO) -> (adminConns.contains(resourceTO.getConnector()))).\n-                forEachOrdered(resourceTO -> {\n-                    final TopologyNode topologynode = new TopologyNode(\n+                filter(resourceTO -> adminConns.contains(resourceTO.getConnector())).\n+                forEach(resourceTO -> {\n+                    TopologyNode topologynode = new TopologyNode(\n                             resourceTO.getKey(), resourceTO.getKey(), TopologyNode.Kind.RESOURCE);\n-                    final Map<Serializable, TopologyNode> remoteConnections;\n+\n+                    Map<Serializable, TopologyNode> remoteConnections;\n                     if (connections.containsKey(resourceTO.getConnector())) {\n                         remoteConnections = connections.get(resourceTO.getConnector());\n                     } else {\n@@ -401,15 +393,15 @@ protected void populateItem(final ListItem<ConnInstanceTO> item) {\n                     }\n                 });\n \n-        final ListView<String> resources = new ListView<String>(\"resources\", connToBeProcessed) {\n+        ListView<String> resources = new ListView<String>(\"resources\", connToBeProcessed) {\n \n             private static final long serialVersionUID = 697862187148836038L;\n \n             @Override\n             protected void populateItem(final ListItem<String> item) {\n-                final String connectorKey = item.getModelObject();\n+                String connectorKey = item.getModelObject();\n \n-                final ListView<TopologyNode> innerListView = new ListView<TopologyNode>(\"resources\",\n+                ListView<TopologyNode> innerListView = new ListView<TopologyNode>(\"resources\",\n                         new ArrayList<>(connections.get(connectorKey).values())) {\n \n                     private static final long serialVersionUID = -3447760771863754342L;\n@@ -418,19 +410,14 @@ protected void populateItem(final ListItem<String> item) {\n \n                     @Override\n                     protected void populateItem(final ListItem<TopologyNode> item) {\n-                        final TopologyNode topologynode = item.getModelObject();\n-                        final TopologyNode parent = connectors.get(connectorKey);\n+                        TopologyNode topologynode = item.getModelObject();\n+                        TopologyNode parent = connectors.get(connectorKey);\n \n                         // Set position\n                         int kx = size >= 16 ? 800 : (48 * size);\n                         int ky = size < 4 ? 100 : size < 6 ? 350 : 750;\n \n-                        final double hpos;\n-                        if (parent == null || parent.getY() < syncopeTopologyNode.getY()) {\n-                            hpos = Math.PI;\n-                        } else {\n-                            hpos = 0.0;\n-                        }\n+                        double hpos = (parent == null || parent.getY() < syncopeTopologyNode.getY()) ? Math.PI : 0.0;\n \n                         int x = (int) Math.round((Optional.ofNullable(parent).map(TopologyNode::getX).orElse(origX))\n                                 + kx * Math.cos(hpos + Math.PI * (item.getIndex() + 1) / size));\n@@ -440,7 +427,7 @@ protected void populateItem(final ListItem<TopologyNode> item) {\n                         topologynode.setX(x);\n                         topologynode.setY(y);\n \n-                        item.add(topologyNodePanel(\"res\", topologynode));\n+                        item.add(topologyNodePanel(\"res\", topologynode, false));\n                     }\n                 };\n \n@@ -456,7 +443,7 @@ protected void populateItem(final ListItem<TopologyNode> item) {\n         // -----------------------------------------\n         // Create connections\n         // -----------------------------------------\n-        final WebMarkupContainer jsPlace = new WebMarkupContainerNoVeil(\"jsPlace\");\n+        WebMarkupContainer jsPlace = new WebMarkupContainerNoVeil(\"jsPlace\");\n         jsPlace.setOutputMarkupId(true);\n         body.add(jsPlace);\n \n@@ -514,7 +501,7 @@ protected void onTimer(final AjaxRequestTarget target) {\n \n             @Override\n             protected void populateItem(final ListItem<TopologyNode> item) {\n-                item.add(topologyNodePanel(\"el\", item.getModelObject()));\n+                item.add(topologyNodePanel(\"el\", item.getModelObject(), false));\n             }\n         };\n         newlyCreated.setOutputMarkupId(true);\n@@ -528,16 +515,16 @@ private static List<String> createConnections(final Map<Serializable, Map<Serial\n \n         targets.forEach((key, value) -> value.forEach((label, node) -> list.add(\n                 String.format(\"connect('%s','%s','%s');\", key, label, node.getKind()))));\n+\n         return list;\n     }\n \n-    private TopologyNodePanel topologyNodePanel(final String id, final TopologyNode node) {\n-\n-        final TopologyNodePanel panel = new TopologyNodePanel(id, node);\n+    private TopologyNodePanel topologyNodePanel(final String id, final TopologyNode node, final boolean errored) {\n+        TopologyNodePanel panel = new TopologyNodePanel(id, node, errored);\n         panel.setMarkupId(String.valueOf(node.getKey()));\n         panel.setOutputMarkupId(true);\n \n-        final List<Behavior> behaviors = new ArrayList<>();\n+        List<Behavior> behaviors = new ArrayList<>();\n \n         behaviors.add(new Behavior() {\n \n@@ -580,9 +567,9 @@ public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);\n \n         if (event.getPayload() instanceof CreateEvent) {\n-            final CreateEvent resourceCreateEvent = CreateEvent.class.cast(event.getPayload());\n+            CreateEvent resourceCreateEvent = CreateEvent.class.cast(event.getPayload());\n \n-            final TopologyNode node = new TopologyNode(\n+            TopologyNode node = new TopologyNode(\n                     resourceCreateEvent.getKey(),\n                     resourceCreateEvent.getDisplayName(),\n                     resourceCreateEvent.getKind());"},{"sha":"44f2e25bc9842d1e1fa997889a1992ab15c2b747","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java","status":"modified","additions":20,"deletions":41,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -25,12 +25,8 @@\n import org.apache.syncope.client.console.topology.TopologyTogglePanel.UpdateEvent;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.wicket.AttributeModifier;\n-import org.apache.wicket.Component;\n-import org.apache.wicket.MarkupContainer;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.IAjaxIndicatorAware;\n import org.apache.wicket.behavior.AttributeAppender;\n-import org.apache.wicket.behavior.Behavior;\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -49,38 +45,42 @@ protected enum Status {\n \n     }\n \n-    public TopologyNodePanel(final String id, final TopologyNode node) {\n+    public TopologyNodePanel(final String id, final TopologyNode node, final boolean errored) {\n         super(id);\n         this.node = node;\n \n-        final String resourceName = node.getDisplayName().length() > 14\n-                ? node.getDisplayName().subSequence(0, 10) + \"...\"\n-                : node.getDisplayName();\n-\n-        label = new Label(\"label\", resourceName);\n+        label = new Label(\"label\", StringUtils.abbreviate(node.getDisplayName(), 10));\n         label.setOutputMarkupId(true);\n         add(label);\n \n-        final String title;\n-\n+        String title;\n         switch (node.getKind()) {\n             case SYNCOPE:\n                 title = \"\";\n                 add(new AttributeAppender(\"class\", \"topology_root\", \" \"));\n                 break;\n+\n             case CONNECTOR_SERVER:\n                 title = node.getDisplayName();\n                 add(new AttributeAppender(\"class\", \"topology_cs\", \" \"));\n                 break;\n+\n             case FS_PATH:\n                 title = node.getDisplayName();\n                 add(new AttributeAppender(\"class\", \"topology_cs\", \" \"));\n                 break;\n+\n             case CONNECTOR:\n                 title = (StringUtils.isBlank(node.getConnectionDisplayName())\n                         ? \"\" : node.getConnectionDisplayName() + ':') + node.getDisplayName();\n-                add(new AttributeAppender(\"class\", \"topology_conn\", \" \"));\n+                if (errored) {\n+                    add(new AttributeAppender(\"class\", \"topology_conn_errored\", \" \"));\n+                } else {\n+                    add(new AttributeAppender(\"class\", \"topology_conn\", \" \"));\n+                }\n                 break;\n+\n+            case RESOURCE:\n             default:\n                 title = node.getDisplayName().length() > 14 ? node.getDisplayName() : \"\";\n                 add(new AttributeAppender(\"class\", \"topology_res\", \" \"));\n@@ -93,21 +93,6 @@ public TopologyNodePanel(final String id, final TopologyNode node) {\n         this.setMarkupId(node.getDisplayName());\n     }\n \n-    @Override\n-    public final MarkupContainer add(final Component... childs) {\n-        return super.add(childs);\n-    }\n-\n-    @Override\n-    public final Component add(final Behavior... behaviors) {\n-        return super.add(behaviors);\n-    }\n-\n-    @Override\n-    public final Component setMarkupId(final String markupId) {\n-        return super.setMarkupId(markupId);\n-    }\n-\n     @Override\n     public String getAjaxIndicatorMarkupId() {\n         return Constants.VEIL_INDICATOR_MARKUP_ID;\n@@ -116,26 +101,20 @@ public String getAjaxIndicatorMarkupId() {\n     @Override\n     public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof UpdateEvent) {\n-            final UpdateEvent updateEvent = UpdateEvent.class.cast(event.getPayload());\n-            final String key = updateEvent.getKey();\n-            final AjaxRequestTarget target = updateEvent.getTarget();\n+            UpdateEvent updateEvent = UpdateEvent.class.cast(event.getPayload());\n+            String key = updateEvent.getKey();\n \n             if (node.getKind() == Kind.CONNECTOR && key.equalsIgnoreCase(node.getKey())) {\n                 ConnInstanceTO conn = ConnectorRestClient.read(key);\n \n-                String displayName =\n-                        // [SYNCOPE-1233]\n-                        StringUtils.isBlank(conn.getDisplayName()) ? conn.getBundleName() : conn.getDisplayName();\n+                // [SYNCOPE-1233]\n+                String displayName = StringUtils.isBlank(conn.getDisplayName())\n+                        ? conn.getBundleName() : conn.getDisplayName();\n \n-                final String resourceName = displayName.length() > 14\n-                        ? displayName.subSequence(0, 10) + \"...\"\n-                        : displayName;\n-\n-                label.setDefaultModelObject(resourceName);\n-                target.add(label);\n+                label.setDefaultModelObject(StringUtils.abbreviate(displayName, 10));\n+                updateEvent.getTarget().add(label);\n                 node.setDisplayName(displayName);\n             }\n         }\n     }\n-\n }"},{"sha":"9e7c0a36cf84fdedc43fe9d0ff729cf1ebf82553","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -248,7 +248,6 @@ public void onClick(final AjaxRequestTarget target) {\n             public String getAjaxIndicatorMarkupId() {\n                 return Constants.VEIL_INDICATOR_MARKUP_ID;\n             }\n-\n         };\n         fragment.add(create);\n         MetaDataRoleAuthorizationStrategy.authorize(create, RENDER, IdMEntitlement.CONNECTOR_CREATE);\n@@ -336,7 +335,6 @@ public void onClick(final AjaxRequestTarget target) {\n             public String getAjaxIndicatorMarkupId() {\n                 return Constants.VEIL_INDICATOR_MARKUP_ID;\n             }\n-\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(edit, RENDER, IdMEntitlement.CONNECTOR_READ);\n         fragment.add(edit);\n@@ -385,7 +383,6 @@ protected void restore(final String json, final AjaxRequestTarget target) {\n             public String getAjaxIndicatorMarkupId() {\n                 return Constants.VEIL_INDICATOR_MARKUP_ID;\n             }\n-\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(history, RENDER,\n                 String.format(\"%s,%s\", IdMEntitlement.CONNECTOR_READ, IdRepoEntitlement.AUDIT_LIST));\n@@ -468,7 +465,6 @@ public void onClick(final AjaxRequestTarget target) {\n             public String getAjaxIndicatorMarkupId() {\n                 return Constants.VEIL_INDICATOR_MARKUP_ID;\n             }\n-\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(status, RENDER, IdRepoEntitlement.USER_UPDATE);\n         fragment.add(status);\n@@ -504,7 +500,6 @@ public void onClick(final AjaxRequestTarget target) {\n             public String getAjaxIndicatorMarkupId() {\n                 return Constants.VEIL_INDICATOR_MARKUP_ID;\n             }\n-\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(edit, RENDER, IdMEntitlement.RESOURCE_READ);\n         fragment.add(provision);\n@@ -526,7 +521,6 @@ public void onClick(final AjaxRequestTarget target) {\n             public String getAjaxIndicatorMarkupId() {\n                 return Constants.VEIL_INDICATOR_MARKUP_ID;\n             }\n-\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(explore, RENDER, IdMEntitlement.RESOURCE_LIST_CONNOBJECT);\n         fragment.add(explore);\n@@ -549,7 +543,6 @@ public void onClick(final AjaxRequestTarget target) {\n             public String getAjaxIndicatorMarkupId() {\n                 return Constants.VEIL_INDICATOR_MARKUP_ID;\n             }\n-\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(propagation, RENDER, IdRepoEntitlement.TASK_LIST);\n         fragment.add(propagation);\n@@ -569,7 +562,6 @@ public void onClick(final AjaxRequestTarget target) {\n             public String getAjaxIndicatorMarkupId() {\n                 return Constants.VEIL_INDICATOR_MARKUP_ID;\n             }\n-\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(pull, RENDER, IdRepoEntitlement.TASK_LIST);\n         fragment.add(pull);\n@@ -589,7 +581,6 @@ public void onClick(final AjaxRequestTarget target) {\n             public String getAjaxIndicatorMarkupId() {\n                 return Constants.VEIL_INDICATOR_MARKUP_ID;\n             }\n-\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(push, RENDER, IdRepoEntitlement.TASK_LIST);\n         fragment.add(push);\n@@ -638,7 +629,6 @@ protected void restore(final String json, final AjaxRequestTarget target) {\n             public String getAjaxIndicatorMarkupId() {\n                 return Constants.VEIL_INDICATOR_MARKUP_ID;\n             }\n-\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(history, RENDER,\n                 String.format(\"%s,%s\", IdMEntitlement.RESOURCE_READ, IdRepoEntitlement.AUDIT_LIST));\n@@ -731,6 +721,5 @@ public AjaxRequestTarget getTarget() {\n         public String getKey() {\n             return key;\n         }\n-\n     }\n }"},{"sha":"f70d6dd9a8308ac45afabcf374514e66dc19154d","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -47,14 +47,14 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {\n \n     private static final long serialVersionUID = -1653665542635275551L;\n \n-    private static final String CONNECTOR_TEST_TIMEOUT_PARAMETER = \"connector.test.timeout\";\n-\n-    private static final String RESOURCE_TEST_TIMEOUT_PARAMETER = \"resource.test.timeout\";\n-\n     private static final Logger LOG = LoggerFactory.getLogger(TopologyWebSocketBehavior.class);\n \n     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n+    private static final String CONNECTOR_TEST_TIMEOUT_PARAMETER = \"connector.test.timeout\";\n+\n+    private static final String RESOURCE_TEST_TIMEOUT_PARAMETER = \"resource.test.timeout\";\n+\n     private static void timeoutHandlingConnectionChecker(\n             final Checker checker,\n             final Integer timeout,"},{"sha":"f435ed17bc4c6cdc9cb1b1c2633bc4ad14949488","filename":"client/idrepo/common-ui/src/main/resources/META-INF/resources/ui-commons/css/topology.scss","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2Ftopology.scss","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2Ftopology.scss","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2Ftopology.scss?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -73,6 +73,10 @@\n   background-color: rgba(100, 200, 200, 0.08);\n }\n \n+.topology_conn_errored {\n+  background-color:rgba(217,83,79,0.56);\n+}\n+\n .topology_res {\n   background-color: rgba(250, 230, 0, 0.09);\n }\n@@ -232,4 +236,4 @@ div.alert-widget > a > .badge {\n   top: 0;\n   right: 25px;\n   z-index: 1;\n-}\n\\ No newline at end of file\n+}"},{"sha":"6dcdb7bf6e3fb7bea97b51edd50431f267772f11","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ConnInstanceTO.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.EnumSet;\n import java.util.List;\n@@ -38,6 +39,8 @@ public class ConnInstanceTO implements EntityTO {\n \n     private String key;\n \n+    private boolean errored;\n+\n     private String adminRealm;\n \n     private String location;\n@@ -69,6 +72,15 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public boolean isErrored() {\n+        return errored;\n+    }\n+\n+    public void setErrored(final boolean errored) {\n+        this.errored = errored;\n+    }\n+\n     public String getAdminRealm() {\n         return adminRealm;\n     }\n@@ -176,6 +188,7 @@ public boolean equals(final Object obj) {\n         ConnInstanceTO other = (ConnInstanceTO) obj;\n         return new EqualsBuilder().\n                 append(key, other.key).\n+                append(errored, other.errored).\n                 append(adminRealm, other.adminRealm).\n                 append(location, other.location).\n                 append(connectorName, other.connectorName).\n@@ -193,6 +206,7 @@ public boolean equals(final Object obj) {\n     public int hashCode() {\n         return new HashCodeBuilder().\n                 append(key).\n+                append(errored).\n                 append(adminRealm).\n                 append(location).\n                 append(connectorName)."},{"sha":"a3c5d53b432ed0d9b6374287180e8ebc9abde632","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":1,"deletions":14,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -22,7 +22,6 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n-import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -142,19 +141,7 @@ public ConnInstanceTO delete(final String key) {\n     public List<ConnInstanceTO> list(final String lang) {\n         CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n \n-        return connInstanceDAO.findAll().stream().\n-                filter(Objects::nonNull).\n-                map(connInstance -> {\n-                    ConnInstanceTO result = null;\n-                    try {\n-                        result = binder.getConnInstanceTO(connInstance);\n-                    } catch (NotFoundException e) {\n-                        LOG.error(\"Connector '{}#{}' not found\",\n-                                connInstance.getBundleName(), connInstance.getVersion());\n-                    }\n-\n-                    return result;\n-                }).collect(Collectors.toList());\n+        return connInstanceDAO.findAll().stream().map(binder::getConnInstanceTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_READ + \"')\")"},{"sha":"c424fea8bdc8fade8bf47aa10d66bcd12019afe9","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -578,6 +578,14 @@ under the License.\n   <PushCorrelationRuleEntity id=\"24463935-32a0-4272-bc78-04d6d0adc69e\" pushPolicy_id=\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\" \n                              anyType_id=\"USER\" implementation_id=\"TestPushCorrelationRule\"/>\n   \n+  <ConnInstance id=\"413bf072-678a-41d3-9d20-8c453b3a39d1\" displayName=\"Errored\"\n+                adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n+                location=\"${connid.location}\"\n+                bundleName=\"net.tirasa.connid.bundles.missing\"\n+                connectorName=\"net.tirasa.connid.bundles.missing.MissingConnector\"\n+                version=\"none\"\n+                jsonConf='[]'/>\n+\n   <ConnInstance id=\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\" displayName=\"ConnInstance100\"\n                 adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"${connid.location}\""},{"sha":"1d5f396376823ed0fb882454dadd208eef87adf4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":31,"deletions":15,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -43,12 +43,16 @@\n import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n import org.identityconnectors.framework.api.ConnectorInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(ConnInstanceDataBinder.class);\n+\n     @Autowired\n     private ConnIdBundleManager connIdBundleManager;\n \n@@ -210,8 +214,6 @@ public ConnConfPropSchema build(final ConfigurationProperty property) {\n \n     @Override\n     public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n-        Pair<URI, ConnectorInfo> info = connIdBundleManager.getConnectorInfo(connInstance);\n-\n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n         connInstanceTO.setKey(connInstance.getKey());\n         connInstanceTO.setBundleName(connInstance.getBundleName());\n@@ -220,21 +222,35 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         connInstanceTO.setDisplayName(connInstance.getDisplayName());\n         connInstanceTO.setConnRequestTimeout(connInstance.getConnRequestTimeout());\n         connInstanceTO.setAdminRealm(connInstance.getAdminRealm().getFullPath());\n-        connInstanceTO.setLocation(info.getLeft().toASCIIString());\n         connInstanceTO.getCapabilities().addAll(connInstance.getCapabilities());\n         connInstanceTO.getConf().addAll(connInstance.getConf());\n-        // refresh stored properties in the given connInstance with direct information from underlying connector\n-        ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(info.getRight());\n-        properties.getPropertyNames().forEach(propName -> {\n-            ConnConfPropSchema schema = build(properties.getProperty(propName));\n-\n-            Optional<ConnConfProperty> property = connInstanceTO.getConf(propName);\n-            if (property.isEmpty()) {\n-                property = Optional.of(new ConnConfProperty());\n-                connInstanceTO.getConf().add(property.get());\n-            }\n-            property.get().setSchema(schema);\n-        });\n+\n+        try {\n+            Pair<URI, ConnectorInfo> info = connIdBundleManager.getConnectorInfo(connInstance);\n+\n+            connInstanceTO.setLocation(info.getLeft().toASCIIString());\n+\n+            // refresh stored properties in the given connInstance with direct information from underlying connector\n+            ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(info.getRight());\n+            properties.getPropertyNames().forEach(propName -> {\n+                ConnConfPropSchema schema = build(properties.getProperty(propName));\n+\n+                Optional<ConnConfProperty> property = connInstanceTO.getConf(propName);\n+                if (property.isEmpty()) {\n+                    property = Optional.of(new ConnConfProperty());\n+                    connInstanceTO.getConf().add(property.get());\n+                }\n+                property.get().setSchema(schema);\n+            });\n+        } catch (Exception e) {\n+            LOG.error(\"Could not get ConnId information for {} / {}#{}#{}\",\n+                    connInstance.getLocation(), connInstance.getBundleName(), connInstance.getConnectorName(),\n+                    connInstance.getVersion(), e);\n+\n+            connInstanceTO.setErrored(true);\n+            connInstanceTO.setLocation(connInstance.getLocation());\n+        }\n+\n         Collections.sort(connInstanceTO.getConf());\n \n         // pool configuration"},{"sha":"116220943fc8c77557c0537197a09e9538795a5e","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderTest.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderTest.java?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class ConnInstanceDataBinderTest extends AbstractTest {\n+\n+    @Autowired\n+    private ConnInstanceDataBinder binder;\n+\n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n+    @Test\n+    public void working() {\n+        ConnInstanceTO connInstance = binder.getConnInstanceTO(\n+                connInstanceDAO.find(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\"));\n+        assertNotNull(connInstance);\n+        assertFalse(connInstance.isErrored());\n+        assertNotNull(connInstance.getLocation());\n+        assertFalse(connInstance.getConf().isEmpty());\n+    }\n+\n+    @Test\n+    public void errored() {\n+        ConnInstanceTO connInstance = binder.getConnInstanceTO(\n+                connInstanceDAO.find(\"413bf072-678a-41d3-9d20-8c453b3a39d1\"));\n+        assertNotNull(connInstance);\n+        assertTrue(connInstance.isErrored());\n+        assertNotNull(connInstance.getLocation());\n+        assertTrue(connInstance.getConf().isEmpty());\n+    }\n+}"},{"sha":"88556b933285b03b35e628de1c22b2a198becfe2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/TopologyITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -160,10 +160,10 @@ public void editProvisioning() {\n \n     @Test\n     public void createNewResurceAndProvisionRules() {\n-        final String res = UUID.randomUUID().toString();\n+        String res = UUID.randomUUID().toString();\n \n         TESTER.executeAjaxEvent(\n-                \"body:conns:0:conns:0:conn\", Constants.ON_CLICK);\n+                \"body:conns:0:conns:1:conn\", Constants.ON_CLICK);\n         TESTER.executeAjaxEvent(\n                 \"body:toggle:container:content:togglePanelContainer:container:actions:create\", Constants.ON_CLICK);\n "},{"sha":"d0ad8926ea0a228e165b4031922a0d2fc92506db","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConnectorITCase.java","status":"modified","additions":25,"deletions":15,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f799ba940399a1c381991dfc501a43afb6d6fb7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f799ba940399a1c381991dfc501a43afb6d6fb7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java?ref=3f799ba940399a1c381991dfc501a43afb6d6fb7","patch":"@@ -285,17 +285,27 @@ public void deleteWithException() {\n \n     @Test\n     public void list() {\n-        List<ConnInstanceTO> connectorInstanceTOs = connectorService.list(null);\n-        assertNotNull(connectorInstanceTOs);\n-        assertFalse(connectorInstanceTOs.isEmpty());\n-        connectorInstanceTOs.forEach(Assertions::assertNotNull);\n+        List<ConnInstanceTO> connInstances = connectorService.list(null);\n+        assertNotNull(connInstances);\n+        assertFalse(connInstances.isEmpty());\n+        connInstances.forEach(Assertions::assertNotNull);\n     }\n \n     @Test\n     public void read() {\n-        ConnInstanceTO connectorInstanceTO = connectorService.read(\n+        ConnInstanceTO connInstance = connectorService.read(\n                 \"88a7a819-dab5-46b4-9b90-0b9769eabdb8\", Locale.ENGLISH.getLanguage());\n-        assertNotNull(connectorInstanceTO);\n+        assertNotNull(connInstance);\n+        assertFalse(connInstance.isErrored());\n+        assertNotNull(connInstance.getLocation());\n+        assertFalse(connInstance.getConf().isEmpty());\n+\n+        connInstance = connectorService.read(\n+                \"413bf072-678a-41d3-9d20-8c453b3a39d1\", Locale.ENGLISH.getLanguage());\n+        assertNotNull(connInstance);\n+        assertTrue(connInstance.isErrored());\n+        assertNotNull(connInstance.getLocation());\n+        assertTrue(connInstance.getConf().isEmpty());\n     }\n \n     @Test\n@@ -332,18 +342,18 @@ public void checkHiddenProperty() {\n     @Test\n     public void checkSelectedLanguage() {\n         // 1. Check Italian\n-        List<ConnInstanceTO> connectorInstanceTOs = connectorService.list(\"it\");\n+        List<ConnInstanceTO> connInstances = connectorService.list(\"it\");\n \n-        for (ConnInstanceTO instance : connectorInstanceTOs) {\n+        for (ConnInstanceTO instance : connInstances) {\n             if (\"net.tirasa.connid.bundles.db.table\".equals(instance.getBundleName())) {\n                 assertEquals(\"Utente\", instance.getConf(\"user\").get().getSchema().getDisplayName());\n             }\n         }\n \n         // 2. Check English (default)\n-        connectorInstanceTOs = connectorService.list(null);\n+        connInstances = connectorService.list(null);\n \n-        for (ConnInstanceTO instance : connectorInstanceTOs) {\n+        for (ConnInstanceTO instance : connInstances) {\n             if (\"net.tirasa.connid.bundles.db.table\".equals(instance.getBundleName())) {\n                 assertEquals(\"User\", instance.getConf(\"user\").get().getSchema().getDisplayName());\n             }\n@@ -712,15 +722,15 @@ public void issueSYNCOPE112() {\n \n     @Test\n     public void issueSYNCOPE605() {\n-        ConnInstanceTO connectorInstanceTO = connectorService.read(\n+        ConnInstanceTO connInstance = connectorService.read(\n                 \"fcf9f2b0-f7d6-42c9-84a6-61b28255a42b\", Locale.ENGLISH.getLanguage());\n-        assertTrue(connectorInstanceTO.getCapabilities().isEmpty());\n+        assertTrue(connInstance.getCapabilities().isEmpty());\n \n-        connectorInstanceTO.getCapabilities().add(ConnectorCapability.SEARCH);\n-        connectorService.update(connectorInstanceTO);\n+        connInstance.getCapabilities().add(ConnectorCapability.SEARCH);\n+        connectorService.update(connInstance);\n \n         ConnInstanceTO updatedCapabilities = connectorService.read(\n-                connectorInstanceTO.getKey(), Locale.ENGLISH.getLanguage());\n+                connInstance.getKey(), Locale.ENGLISH.getLanguage());\n         assertNotNull(updatedCapabilities.getCapabilities());\n         assertTrue(updatedCapabilities.getCapabilities().size() == 1);\n     }"}]}