{"sha":"ccb30f53bdb9bf46daafb1052495149aeefee648","node_id":"C_kwDOJfYA1toAKGNjYjMwZjUzYmRiOWJmNDZkYWFmYjEwNTI0OTUxNDlhZWVmZWU2NDg","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-05-24T06:37:46Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-05-24T06:37:46Z"},"message":"[SYNCOPE-1679] Adding support for $auxClasses (#347)","tree":{"sha":"5cc4011e4babb58ac801ffecd984af70b8e5c013","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5cc4011e4babb58ac801ffecd984af70b8e5c013"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ccb30f53bdb9bf46daafb1052495149aeefee648","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJijH06CRBK7hj4Ov3rIwAAg9YIABwFekGWlIklcLUEGDvHaiJY\nXj8B4wU7bhA1GiHk9ZkoAhSX6Ui955tlulFgUWw2Fs31H4HVPOCi/dV2hg+VCkcf\nWRV5A3xyke6m4/EsXlUP8Ft2gUrXiN5ZP0XR/cp8pEUStFra6K4cTHAaxpp7Ep7D\nc42R8zcMaJF+8doRkA5iA6ZgRuIxAjWY/56cL2TRCZo9v2Cfe9VZjX81a2Ag+kAb\nY+FdGpEfsiG6vkAvBnSiPQ/UVS5qOUJHFEv5Ky7RxM3xEHSPRazaUIIA7iRiSzAK\nYgq0t0r57U6zL2nNGKMHiPjw5BYVmwZUjX8/J6G8cJ8EzV+mrdMTl6BSfY7AOxM=\n=Dg5t\n-----END PGP SIGNATURE-----\n","payload":"tree 5cc4011e4babb58ac801ffecd984af70b8e5c013\nparent 8a2690568f7e3653a7112c0bdf795654efb236c5\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1653374266 +0200\ncommitter GitHub <noreply@github.com> 1653374266 +0200\n\n[SYNCOPE-1679] Adding support for $auxClasses (#347)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ccb30f53bdb9bf46daafb1052495149aeefee648","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ccb30f53bdb9bf46daafb1052495149aeefee648","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ccb30f53bdb9bf46daafb1052495149aeefee648/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"8a2690568f7e3653a7112c0bdf795654efb236c5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a2690568f7e3653a7112c0bdf795654efb236c5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a2690568f7e3653a7112c0bdf795654efb236c5"}],"stats":{"total":463,"additions":427,"deletions":36},"files":[{"sha":"1b624b5e6de940d46ea44c97885bde97beaf5f11","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -22,13 +22,16 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.search.SearchableFields;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -51,6 +54,8 @@ public abstract class AbstractSearchPanel extends Panel {\n \n     protected IModel<Map<String, PlainSchemaTO>> anames;\n \n+    protected IModel<List<String>> auxClassNames;\n+\n     protected IModel<List<String>> resourceNames;\n \n     protected IModel<List<SearchClause.Type>> types;\n@@ -159,7 +164,7 @@ protected Integer load() {\n                 required,\n                 types,\n                 builder.customizer,\n-                anames, dnames, groupInfo, roleNames, privilegeNames, resourceNames);\n+                anames, dnames, groupInfo, roleNames, privilegeNames, auxClassNames, resourceNames);\n \n         if (enableSearch) {\n             searchClausePanel.enableSearch(builder.resultContainer);\n@@ -195,6 +200,19 @@ protected Map<String, PlainSchemaTO> load() {\n             }\n         };\n \n+        auxClassNames = new LoadableDetachableModel<>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return AnyTypeClassRestClient.list().stream().\n+                        filter(c -> c.getInUseByTypes().isEmpty()).\n+                        map(AnyTypeClassTO::getKey).\n+                        collect(Collectors.toList());\n+            }\n+        };\n+\n         resourceNames = new LoadableDetachableModel<>() {\n \n             private static final long serialVersionUID = 5275935387613157437L;"},{"sha":"282059878f15c3352ff4b41f6504062cbc4bd446","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -112,6 +112,7 @@ protected List<SearchClause.Type> getAvailableTypes() {\n         List<SearchClause.Type> result = new ArrayList<>();\n         result.add(SearchClause.Type.ATTRIBUTE);\n         result.add(SearchClause.Type.GROUP_MEMBERSHIP);\n+        result.add(SearchClause.Type.AUX_CLASS);\n         result.add(SearchClause.Type.RESOURCE);\n         result.add(SearchClause.Type.RELATIONSHIP);\n         return result;"},{"sha":"a7ae709ad6f9783a7394bbe08b9f43afdbac5f1d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/GroupSearchPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -66,6 +66,7 @@ protected void populate() {\n             protected List<SearchClause.Type> load() {\n                 List<SearchClause.Type> result = new ArrayList<>();\n                 result.add(SearchClause.Type.ATTRIBUTE);\n+                result.add(SearchClause.Type.AUX_CLASS);\n                 result.add(SearchClause.Type.RESOURCE);\n                 result.add(SearchClause.Type.GROUP_MEMBER);\n                 return result;"},{"sha":"1c84c5a3016feb48b93c22447fa4c6350f1d0477","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClause.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -41,6 +41,7 @@ public enum Type {\n         GROUP_MEMBER,\n         ROLE_MEMBERSHIP,\n         PRIVILEGE,\n+        AUX_CLASS,\n         RESOURCE,\n         RELATIONSHIP,\n         CUSTOM;"},{"sha":"1996a976931c4111b246ab64aaa09f28dfde4455","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -150,6 +150,8 @@ default void setFieldAccess(\n \n     private final IModel<List<String>> privilegeNames;\n \n+    private final IModel<List<String>> auxClassNames;\n+\n     private final IModel<List<String>> resourceNames;\n \n     private IModel<SearchClause> clause;\n@@ -183,6 +185,7 @@ public SearchClausePanel(\n             final Pair<IModel<List<String>>, IModel<Integer>> groupInfo,\n             final IModel<List<String>> roleNames,\n             final IModel<List<String>> privilegeNames,\n+            final IModel<List<String>> auxClassNames,\n             final IModel<List<String>> resourceNames) {\n \n         super(id, name, clause);\n@@ -197,6 +200,7 @@ public SearchClausePanel(\n         this.groupInfo = groupInfo;\n         this.roleNames = roleNames;\n         this.privilegeNames = privilegeNames;\n+        this.auxClassNames = auxClassNames;\n         this.resourceNames = resourceNames;\n \n         searchButton = new AjaxLink<>(\"search\") {\n@@ -239,6 +243,7 @@ protected List<Comparator> load() {\n                     case ATTRIBUTE:\n                         return List.of(SearchClause.Comparator.values());\n \n+                    case AUX_CLASS:\n                     case ROLE_MEMBERSHIP:\n                     case PRIVILEGE:\n                     case GROUP_MEMBERSHIP:\n@@ -293,6 +298,10 @@ protected List<String> load() {\n                         return privilegeNames.getObject().stream().\n                                 sorted().collect(Collectors.toList());\n \n+                    case AUX_CLASS:\n+                        return auxClassNames.getObject().stream().\n+                                sorted().collect(Collectors.toList());\n+\n                     case RESOURCE:\n                         return resourceNames.getObject().stream().\n                                 sorted().collect(Collectors.toList());\n@@ -647,6 +656,7 @@ private void setFieldAccess(\n                     property.setModelObject(StringUtils.EMPTY);\n                     break;\n \n+                case AUX_CLASS:\n                 case RESOURCE:\n                     value.setEnabled(false);\n                     value.setModelObject(StringUtils.EMPTY);\n@@ -759,6 +769,7 @@ public Object getDisplayValue(final SearchClause.Comparator object) {\n                         }\n                         break;\n \n+                    case AUX_CLASS:\n                     case ROLE_MEMBERSHIP:\n                     case PRIVILEGE:\n                     case RESOURCE:\n@@ -1026,7 +1037,7 @@ protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n     public FieldPanel<SearchClause> clone() {\n         SearchClausePanel panel = new SearchClausePanel(\n                 getId(), name, null, required, types, customizer, anames, dnames, groupInfo,\n-                roleNames, privilegeNames, resourceNames);\n+                roleNames, privilegeNames, auxClassNames, resourceNames);\n         panel.setReadOnly(this.isReadOnly());\n         panel.setRequired(this.isRequired());\n         if (searchButton.isEnabled()) {"},{"sha":"89efc1de18ee0690bcfde41f0f8e7c3c61a08d0e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -149,6 +149,9 @@ private static SearchClause getPrimitiveSearchClause(final SearchCondition<Searc\n         } else if (SpecialAttr.GROUPS.toString().equals(property)) {\n             clause.setType(SearchClause.Type.GROUP_MEMBERSHIP);\n             clause.setProperty(value);\n+        } else if (SpecialAttr.AUX_CLASSES.toString().equals(property)) {\n+            clause.setType(SearchClause.Type.AUX_CLASS);\n+            clause.setProperty(value);\n         } else if (SpecialAttr.RESOURCES.toString().equals(property)) {\n             clause.setType(SearchClause.Type.RESOURCE);\n             clause.setProperty(value);\n@@ -277,6 +280,14 @@ public static String buildFIQL(\n                         }\n                         break;\n \n+                    case AUX_CLASS:\n+                        if (StringUtils.isNotBlank(clause.getProperty())) {\n+                            condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n+                                    ? builder.hasAuxClasses(clause.getProperty())\n+                                    : builder.hasNotAuxClasses(clause.getProperty());\n+                        }\n+                        break;\n+\n                     case RESOURCE:\n                         if (StringUtils.isNotBlank(clause.getProperty())) {\n                             condition = clause.getComparator() == SearchClause.Comparator.EQUALS"},{"sha":"47b2a0e41af27ff6fd233e3f2ecbc374f03ea5ee","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -71,8 +71,8 @@ protected List<String> load() {\n             @Override\n             protected List<String> load() {\n                 return ApplicationRestClient.list().stream().\n-                    flatMap(application -> application.getPrivileges().stream()).\n-                    map(EntityTO::getKey).collect(Collectors.toList());\n+                        flatMap(application -> application.getPrivileges().stream()).\n+                        map(EntityTO::getKey).collect(Collectors.toList());\n             }\n         };\n     }\n@@ -84,6 +84,7 @@ protected List<SearchClause.Type> getAvailableTypes() {\n         result.add(SearchClause.Type.ROLE_MEMBERSHIP);\n         result.add(SearchClause.Type.PRIVILEGE);\n         result.add(SearchClause.Type.GROUP_MEMBERSHIP);\n+        result.add(SearchClause.Type.AUX_CLASS);\n         result.add(SearchClause.Type.RESOURCE);\n         result.add(SearchClause.Type.RELATIONSHIP);\n         return result;"},{"sha":"fbeb54a36ad9e4d104ae6856941ceaf2ec7fd4b4","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/AbstractFiqlSearchConditionBuilder.java","status":"modified","additions":30,"deletions":10,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -82,6 +82,14 @@ public C notInDynRealms(final String dynRealm, final String... moreDynRealms) {\n                 notInDynRealms(dynRealm, moreDynRealms);\n     }\n \n+    public C hasAuxClasses(final String auxClass, final String... moreAuxClasses) {\n+        return newBuilderInstance().is(SpecialAttr.AUX_CLASSES.toString()).hasAuxClasses(auxClass, moreAuxClasses);\n+    }\n+\n+    public C hasNotAuxClasses(final String auxClass, final String... moreAuxClasses) {\n+        return newBuilderInstance().is(SpecialAttr.AUX_CLASSES.toString()).hasNotAuxClasses(auxClass, moreAuxClasses);\n+    }\n+\n     public C hasResources(final String resource, final String... moreResources) {\n         return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasResources(resource, moreResources);\n     }\n@@ -121,6 +129,16 @@ protected C condition(\n             return (C) this;\n         }\n \n+        @Override\n+        public C equalToIgnoreCase(final String value, final String... moreValues) {\n+            return condition(SyncopeFiqlParser.IEQ, value, (Object[]) moreValues);\n+        }\n+\n+        @Override\n+        public C notEqualTolIgnoreCase(final String literalOrPattern) {\n+            return condition(SyncopeFiqlParser.NIEQ, literalOrPattern);\n+        }\n+\n         @Override\n         public C nullValue() {\n             return condition(FiqlParser.EQ, SpecialAttr.NULL);\n@@ -132,25 +150,27 @@ public C notNullValue() {\n         }\n \n         @Override\n-        public C hasResources(final String resource, final String... moreResources) {\n-            this.result = SpecialAttr.RESOURCES.toString();\n-            return condition(FiqlParser.EQ, resource, (Object[]) moreResources);\n+        public C hasAuxClasses(final String auxClass, final String... moreAuxClasses) {\n+            this.result = SpecialAttr.AUX_CLASSES.toString();\n+            return condition(FiqlParser.EQ, auxClass, (Object[]) moreAuxClasses);\n         }\n \n         @Override\n-        public C hasNotResources(final String resource, final String... moreResources) {\n-            this.result = SpecialAttr.RESOURCES.toString();\n-            return condition(FiqlParser.NEQ, resource, (Object[]) moreResources);\n+        public C hasNotAuxClasses(final String auxClass, final String... moreAuxClasses) {\n+            this.result = SpecialAttr.AUX_CLASSES.toString();\n+            return condition(FiqlParser.NEQ, auxClass, (Object[]) moreAuxClasses);\n         }\n \n         @Override\n-        public C equalToIgnoreCase(final String value, final String... moreValues) {\n-            return condition(SyncopeFiqlParser.IEQ, value, (Object[]) moreValues);\n+        public C hasResources(final String resource, final String... moreResources) {\n+            this.result = SpecialAttr.RESOURCES.toString();\n+            return condition(FiqlParser.EQ, resource, (Object[]) moreResources);\n         }\n \n         @Override\n-        public C notEqualTolIgnoreCase(final String literalOrPattern) {\n-            return condition(SyncopeFiqlParser.NIEQ, literalOrPattern);\n+        public C hasNotResources(final String resource, final String... moreResources) {\n+            this.result = SpecialAttr.RESOURCES.toString();\n+            return condition(FiqlParser.NEQ, resource, (Object[]) moreResources);\n         }\n \n         @Override"},{"sha":"3bd37291bc9a9150eab7282c227078594af4ffd6","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -22,7 +22,7 @@\n import java.util.Optional;\n \n public enum SpecialAttr {\n-    \n+\n     /**\n      * Applies to users, groups and any objects.\n      */\n@@ -31,6 +31,10 @@ public enum SpecialAttr {\n      * Applies to any objects.\n      */\n     TYPE(\"$type\"),\n+    /**\n+     * Applies to users, groups and any objects.\n+     */\n+    AUX_CLASSES(\"$auxClasses\"),\n     /**\n      * Applies to users, groups and any objects.\n      */"},{"sha":"01f01c8c2ba0027d7c08504dba5a36d2c48c64d2","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeFiqlParser.java","status":"modified","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.common.lib.search;\n \n import java.util.Map;\n+import java.util.Optional;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import org.apache.commons.lang3.StringUtils;\n-\n import org.apache.cxf.jaxrs.ext.search.ConditionType;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n@@ -77,18 +77,13 @@ protected ASTNode<T> parseComparison(final String expr) throws SearchParseExcept\n                 throw new SearchParseException(\"Not a comparison expression: \" + expr);\n             }\n \n-            String name = unwrapSetter(propertyName);\n-\n-            name = getActualSetterName(name);\n-            TypeInfoObject castedValue = parseType(propertyName, name, value);\n-            if (castedValue != null) {\n-                return new SyncopeComparison(name, operator, castedValue);\n-            } else {\n-                return null;\n-            }\n-        } else {\n-            throw new SearchParseException(\"Not a comparison expression: \" + expr);\n+            String name = getActualSetterName(unwrapSetter(propertyName));\n+            return Optional.ofNullable(parseType(propertyName, name, value)).\n+                    map(typeInfoObject -> new SyncopeComparison(name, operator, typeInfoObject)).\n+                    orElse(null);\n         }\n+\n+        throw new SearchParseException(\"Not a comparison expression: \" + expr);\n     }\n \n     private class SyncopeComparison implements ASTNode<T> {\n@@ -148,5 +143,4 @@ private T createTemplate(final String setter) throws SearchParseException {\n             }\n         }\n     }\n-\n }"},{"sha":"31fe477c68376159e84099e74f9eb07cc73aac50","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeFiqlSearchCondition.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlSearchCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlSearchCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlSearchCondition.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -55,5 +55,4 @@ public SyncopeFiqlSearchCondition(\n     public String getOperator() {\n         return operator;\n     }\n-\n }"},{"sha":"3b40a90b8c767ba1d322605d5261c28881870cfc","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeProperty.java","status":"modified","additions":44,"deletions":6,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -28,50 +28,88 @@\n  */\n public interface SyncopeProperty<C extends SyncopeCompleteCondition<?, ?>> extends Property {\n \n-    /** Is textual property equal to (ignoring case) given literal or matching given pattern?\n+    /**\n+     * Is textual property equal to (ignoring case) given literal or matching given pattern?\n      *\n      * @param value first value\n      * @param moreValues more values\n      * @return updated condition\n      */\n     C equalToIgnoreCase(String value, String... moreValues);\n \n-    /** Is textual property different (ignoring case) than given literal or not matching given pattern?\n+    /**\n+     * Is textual property different (ignoring case) than given literal or not matching given pattern?\n      *\n      * @param literalOrPattern The literal or Pattern String\n      * @return updated condition\n      */\n     C notEqualTolIgnoreCase(String literalOrPattern);\n \n-    /** Is property null?\n+    /**\n+     * Is property null?\n      *\n      * @return updated condition\n      */\n     C nullValue();\n \n-    /** Is property not null?\n+    /**\n+     * Is property not null?\n      *\n      * @return updated condition\n      */\n     C notNullValue();\n \n-    /** Is user, group or any object owning given resource(s)?\n+    /**\n+     * Has user, group or any object assigned the given auxiliary class(es)?\n+     *\n+     * @param auxClass first auxiliary class\n+     * @param moreAuxClasses more auxiliary classes\n+     * @return updated condition\n+     */\n+    C hasAuxClasses(String auxClass, String... moreAuxClasses);\n+\n+    /**\n+     * Has user, group or any object not assigned the given auxiliary class(es)?\n+     *\n+     * @param auxClass first auxiliary class\n+     * @param moreAuxClasses more auxiliary classes\n+     * @return updated condition\n+     */\n+    C hasNotAuxClasses(String auxClass, String... moreAuxClasses);\n+\n+    /**\n+     * Is user, group or any object owning given resource(s)?\n      *\n      * @param resource first resource\n      * @param moreResources more resources\n      * @return updated condition\n      */\n     C hasResources(String resource, String... moreResources);\n \n-    /** Is user, group or any object not owning given resource(s)?\n+    /**\n+     * Is user, group or any object not owning given resource(s)?\n      *\n      * @param resource first resource\n      * @param moreResources more resources\n      * @return updated condition\n      */\n     C hasNotResources(String resource, String... moreResources);\n \n+    /**\n+     * Is user, group or any object in the given dynamic realm(s)?\n+     *\n+     * @param dynRealm first dynamic realm\n+     * @param moreDynRealms more dynamic realms\n+     * @return updated condition\n+     */\n     C inDynRealms(String dynRealm, String... moreDynRealms);\n \n+    /**\n+     * Is user, group or any object not in the given dynamic realm(s)?\n+     *\n+     * @param dynRealm first dynamic realm\n+     * @param moreDynRealms more dynamic realms\n+     * @return updated condition\n+     */\n     C notInDynRealms(String dynRealm, String... moreDynRealms);\n }"},{"sha":"b479fd43b84c99651071df1d55feb1ab1e811506","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AuxClassCond.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAuxClassCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAuxClassCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAuxClassCond.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.search;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n+public class AuxClassCond extends AbstractSearchCond {\n+\n+    private static final long serialVersionUID = 4298076973281246633L;\n+\n+    private String auxClass;\n+\n+    public String getAuxClass() {\n+        return auxClass;\n+    }\n+\n+    public void setAuxClass(final String auxClass) {\n+        this.auxClass = auxClass;\n+    }\n+\n+    @Override\n+    public boolean isValid() {\n+        return auxClass != null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(auxClass).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final AuxClassCond other = (AuxClassCond) obj;\n+        return new EqualsBuilder().\n+                append(auxClass, other.auxClass).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(auxClass).\n+                build();\n+    }\n+}"},{"sha":"ddd027d02786c26715a327bc8b25c5bac6846f13","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n@@ -151,6 +152,12 @@ protected SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                             leaf = SearchCond.getLeaf(typeCond);\n                             break;\n \n+                        case AUX_CLASSES:\n+                            AuxClassCond auxClassCond = new AuxClassCond();\n+                            auxClassCond.setAuxClass(value);\n+                            leaf = SearchCond.getLeaf(auxClassCond);\n+                            break;\n+                            \n                         case RESOURCES:\n                             ResourceCond resourceCond = new ResourceCond();\n                             resourceCond.setResourceKey(value);"},{"sha":"353ae27bb778c94b33ec293748bf6c1e0630a841","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/FilterConverterTest.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -192,6 +192,26 @@ public void notInDynRealms() {\n         }\n     }\n \n+    @Test\n+    public void hasAuxClasses() {\n+        try {\n+            FilterConverter.convert(SpecialAttr.AUX_CLASSES + \"==clazz1\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void hasNotAuxClasses() {\n+        try {\n+            FilterConverter.convert(SpecialAttr.AUX_CLASSES + \"!=clazz1\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n+        }\n+    }\n+\n     @Test\n     public void hasResources() {\n         try {"},{"sha":"7bee68e818e9ef20935b7511d2908d119181ddf5","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n@@ -226,6 +227,18 @@ public void dynRealms() {\n         assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n+    @Test\n+    public void auxClasses() {\n+        String fiql = new UserFiqlSearchConditionBuilder().hasAuxClasses(\"clazz1\").query();\n+        assertEquals(SpecialAttr.AUX_CLASSES + \"==clazz1\", fiql);\n+\n+        AuxClassCond cond = new AuxClassCond();\n+        cond.setAuxClass(\"clazz1\");\n+        SearchCond leaf = SearchCond.getLeaf(cond);\n+\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n+    }\n+\n     @Test\n     public void resources() {\n         String fiql = new UserFiqlSearchConditionBuilder().hasResources(\"resource-ldap\").query();"},{"sha":"24e8f8b6ce2a929de57f96082e481d7027ed682e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n@@ -297,6 +298,30 @@ protected String getQuery(\n         return query.toString();\n     }\n \n+    @Override\n+    protected String getQuery(\n+            final AuxClassCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        StringBuilder query = new StringBuilder();\n+\n+        if (not) {\n+            query.append(\"id NOT IN (\");\n+        } else {\n+            query.append(\"id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.auxClass().name).\n+                append(\" WHERE anyTypeClass_id=?\").\n+                append(setParameter(parameters, cond.getAuxClass())).\n+                append(')');\n+\n+        return query.toString();\n+    }\n+\n     @Override\n     protected String getQuery(\n             final RoleCond cond,"},{"sha":"1744dc06d907517a42842e4fb78311504b30277f","filename":"core/persistence-jpa-json/src/main/resources/myjson/views.xml","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -96,6 +96,12 @@ under the License.\n     FROM DynRoleMembers drm, SyncopeRole_Privilege rp\n     WHERE drm.role_id = rp.role_id\n   </entry>\n+  <entry key=\"user_search_auxClass\">\n+    CREATE VIEW user_search_auxClass AS\n+\n+    SELECT st.user_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM SyncopeUser_AnyTypeClass st\n+  </entry>\n   <entry key=\"user_search_resource\">\n     CREATE VIEW user_search_resource AS\n \n@@ -140,6 +146,12 @@ under the License.\n     FROM AMembership m, SyncopeGroup g\n     WHERE m.group_id = g.id\n   </entry>\n+  <entry key=\"anyObject_search_auxClass\">\n+    CREATE VIEW anyObject_search_auxClass AS\n+\n+    SELECT st.anyObject_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM AnyObject_AnyTypeClass st\n+  </entry>\n   <entry key=\"anyObject_search_resource\">\n     CREATE VIEW anyObject_search_resource AS\n \n@@ -171,6 +183,12 @@ under the License.\n     attrUniqueValue JSON PATH '$.uniqueValue')\n     ) AS attrs\n   </entry>\n+  <entry key=\"group_search_auxClass\">\n+    CREATE VIEW group_search_auxClass AS\n+\n+    SELECT st.group_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM SyncopeGroup_AnyTypeClass st\n+  </entry>\n   <entry key=\"group_search_resource\">\n     CREATE VIEW group_search_resource AS\n "},{"sha":"e25da2f66febf1b0eede4ad5236f7457f5996402","filename":"core/persistence-jpa-json/src/main/resources/pgjsonb/views.xml","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fviews.xml?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -80,6 +80,12 @@ under the License.\n     FROM DynRoleMembers drm, SyncopeRole_Privilege rp\n     WHERE drm.role_id = rp.role_id\n   </entry>\n+  <entry key=\"user_search_auxClass\">\n+    CREATE VIEW user_search_auxClass AS\n+\n+    SELECT st.user_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM SyncopeUser_AnyTypeClass st\n+  </entry>\n   <entry key=\"user_search_resource\">\n     CREATE VIEW user_search_resource AS\n \n@@ -108,6 +114,12 @@ under the License.\n     FROM AMembership m, SyncopeGroup g\n     WHERE m.group_id = g.id\n   </entry>\n+  <entry key=\"anyObject_search_auxClass\">\n+    CREATE VIEW anyObject_search_auxClass AS\n+\n+    SELECT st.anyObject_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM AnyObject_AnyTypeClass st\n+  </entry>\n   <entry key=\"anyObject_search_resource\">\n     CREATE VIEW anyObject_search_resource AS\n \n@@ -123,6 +135,12 @@ under the License.\n   </entry>\n \n   <!-- group -->\n+  <entry key=\"group_search_auxClass\">\n+    CREATE VIEW group_search_auxClass AS\n+\n+    SELECT st.group_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM SyncopeGroup_AnyTypeClass st\n+  </entry>\n   <entry key=\"group_search_resource\">\n     CREATE VIEW group_search_resource AS\n "},{"sha":"f7dacda6fdd23eb49d8c7f2a211090a68a3eabca","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -51,6 +51,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n@@ -542,6 +543,9 @@ protected Pair<StringBuilder, Set<String>> getQuery(\n                         filter(leaf -> AnyTypeKind.ANY_OBJECT == svs.anyTypeKind).\n                         ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n \n+                cond.getLeaf(AuxClassCond.class).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n+\n                 cond.getLeaf(RelationshipTypeCond.class).\n                         filter(leaf -> AnyTypeKind.GROUP != svs.anyTypeKind).\n                         ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n@@ -639,6 +643,30 @@ protected String getQuery(\n         return query.toString();\n     }\n \n+    protected String getQuery(\n+            final AuxClassCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.field().name).append(\" WHERE \");\n+\n+        if (not) {\n+            query.append(\"any_id NOT IN (\");\n+        } else {\n+            query.append(\"any_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.auxClass().name).\n+                append(\" WHERE anyTypeClass_id=?\").\n+                append(setParameter(parameters, cond.getAuxClass())).\n+                append(')');\n+\n+        return query.toString();\n+    }\n+\n     protected String getQuery(\n             final RelationshipTypeCond cond,\n             final boolean not,"},{"sha":"936315574d94f5067086795508a2b4d549c6d9b3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -150,6 +150,10 @@ public static SearchView dynrealmmembership() {\n         return new SearchView(\"svdrealm\", JPADynRealmDAO.DYNMEMB_TABLE);\n     }\n \n+    public SearchView auxClass() {\n+        return new SearchView(\"svac\", field().name + \"_auxClass\");\n+    }\n+\n     public SearchView resource() {\n         return new SearchView(\"svr\", field().name + \"_resource\");\n     }"},{"sha":"83dd7873a66fbab04d5e5d171e36e8b07c454ce0","filename":"core/persistence-jpa/src/main/resources/sqlserver_views.xml","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fsqlserver_views.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fsqlserver_views.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fsqlserver_views.xml?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -111,6 +111,12 @@ under the License.\n     FROM DynRoleMembers drm, SyncopeRole_Privilege rp\n     WHERE drm.role_id = rp.role_id\n   </entry>\n+  <entry key=\"user_search_auxClass\">\n+    CREATE VIEW user_search_auxClass AS\n+\n+    SELECT st.user_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM SyncopeUser_AnyTypeClass st\n+  </entry>\n   <entry key=\"user_search_resource\">\n     CREATE VIEW user_search_resource AS\n \n@@ -170,6 +176,12 @@ under the License.\n     FROM AMembership m, SyncopeGroup g\n     WHERE m.group_id = g.id\n   </entry>\n+  <entry key=\"anyObject_search_auxClass\">\n+    CREATE VIEW anyObject_search_auxClass AS\n+\n+    SELECT st.anyObject_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM AnyObject_AnyTypeClass st\n+  </entry>\n   <entry key=\"anyObject_search_resource\">\n     CREATE VIEW anyObject_search_resource AS\n \n@@ -216,6 +228,12 @@ under the License.\n     FROM GPlainAttrValue uav, GPlainAttr ua\n     WHERE uav.attribute_id = ua.id\n   </entry>\n+  <entry key=\"group_search_auxClass\">\n+    CREATE VIEW group_search_auxClass AS\n+\n+    SELECT st.group_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM SyncopeGroup_AnyTypeClass st\n+  </entry>\n   <entry key=\"group_search_resource\">\n     CREATE VIEW group_search_resource AS\n "},{"sha":"e242f0ff922abe7a6806a8d8819bd9a0a91a18d5","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -111,6 +111,12 @@ under the License.\n     FROM DynRoleMembers drm, SyncopeRole_Privilege rp\n     WHERE drm.role_id = rp.role_id\n   </entry>\n+  <entry key=\"user_search_auxClass\">\n+    CREATE VIEW user_search_auxClass AS\n+\n+    SELECT st.user_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM SyncopeUser_AnyTypeClass st\n+  </entry>\n   <entry key=\"user_search_resource\">\n     CREATE VIEW user_search_resource AS\n \n@@ -170,6 +176,12 @@ under the License.\n     FROM AMembership m, SyncopeGroup g\n     WHERE m.group_id = g.id\n   </entry>\n+  <entry key=\"anyObject_search_auxClass\">\n+    CREATE VIEW anyObject_search_auxClass AS\n+\n+    SELECT st.anyObject_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM AnyObject_AnyTypeClass st\n+  </entry>\n   <entry key=\"anyObject_search_resource\">\n     CREATE VIEW anyObject_search_resource AS\n \n@@ -216,6 +228,12 @@ under the License.\n     FROM GPlainAttrValue uav, GPlainAttr ua\n     WHERE uav.attribute_id = ua.id\n   </entry>\n+  <entry key=\"group_search_auxClass\">\n+    CREATE VIEW group_search_auxClass AS\n+\n+    SELECT st.group_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM SyncopeGroup_AnyTypeClass st\n+  </entry>\n   <entry key=\"group_search_resource\">\n     CREATE VIEW group_search_resource AS\n "},{"sha":"926ce35b012a225f54c967c8ee71961ab1487263","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n@@ -361,6 +362,16 @@ public void searchByIsNull() {\n         assertEquals(1, users.size());\n     }\n \n+    @Test\n+    public void searchByAuxClass() {\n+        AuxClassCond ac = new AuxClassCond();\n+        ac.setAuxClass(\"csv\");\n+\n+        List<Group> groups = searchDAO.search(SearchCond.getLeaf(ac), AnyTypeKind.GROUP);\n+        assertNotNull(groups);\n+        assertEquals(2, groups.size());\n+    }\n+\n     @Test\n     public void searchByResource() {\n         ResourceCond ws2 = new ResourceCond();"},{"sha":"a95d09162cb96aaa02e59ad8b0e47e277dffb7d4","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n@@ -139,6 +140,7 @@ public Map<String, Object> document(final Any<?> any, final String domain) throw\n         builder.put(\"lastModifier\", any.getLastModifier());\n         builder.put(\"lastChangeContext\", any.getLastChangeContext());\n         builder.put(\"status\", any.getStatus());\n+        builder.put(\"auxClasses\", any.getAuxClasses().stream().map(AnyTypeClass::getKey).collect(Collectors.toList()));\n         builder.put(\"resources\", resources);\n         builder.put(\"dynRealms\", dynRealms);\n "},{"sha":"7bc554eab07ed3524b2567b7e86fdde9a5f94d7b","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -58,6 +58,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n@@ -371,6 +372,12 @@ protected Query getQuery(final SearchCond cond, final AnyTypeKind kind) {\n                             orElse(null);\n                 }\n \n+                if (query == null) {\n+                    query = cond.getLeaf(AuxClassCond.class).\n+                            map(this::getQuery).\n+                            orElse(null);\n+                }\n+\n                 if (query == null) {\n                     query = cond.getLeaf(ResourceCond.class).\n                             map(this::getQuery).\n@@ -503,6 +510,12 @@ protected Query getQuery(final MemberCond cond) {\n                 build();\n     }\n \n+    protected Query getQuery(final AuxClassCond cond) {\n+        return new Query.Builder().term(QueryBuilders.term().\n+                field(\"auxClasses\").value(FieldValue.of(cond.getAuxClass())).build()).\n+                build();\n+    }\n+\n     protected Query getQuery(final ResourceCond cond) {\n         return new Query.Builder().term(QueryBuilders.term().\n                 field(\"resources\").value(FieldValue.of(cond.getResourceKey())).build())."},{"sha":"8d9bcddfd89818cfd445cfcbe7a6a6a2700fefd0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -256,7 +256,23 @@ public void searchByDynRole() {\n     }\n \n     @Test\n-    public void searchUserByResourceName() {\n+    public void searchByAuxClass() {\n+        PagedResult<GroupTO> matchingGroups = groupService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(SyncopeClient.getGroupSearchConditionBuilder().\n+                                hasAuxClasses(\"csv\").query()).\n+                        build());\n+        assertNotNull(matchingGroups);\n+        assertFalse(matchingGroups.getResult().isEmpty());\n+\n+        assertTrue(matchingGroups.getResult().stream().\n+                anyMatch(group -> \"0626100b-a4ba-4e00-9971-86fad52a6216\".equals(group.getKey())));\n+        assertTrue(matchingGroups.getResult().stream().\n+                anyMatch(group -> \"ba9ed509-b1f5-48ab-a334-c8530a6422dc\".equals(group.getKey())));\n+    }\n+\n+    @Test\n+    public void searchByResource() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                         fiql(SyncopeClient.getUserSearchConditionBuilder()."},{"sha":"f4e85db687091fc90e339a7fe3b0dedb903cca10","filename":"src/main/asciidoc/reference-guide/usage/core.adoc","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccb30f53bdb9bf46daafb1052495149aeefee648/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcore.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccb30f53bdb9bf46daafb1052495149aeefee648/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcore.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcore.adoc?ref=ccb30f53bdb9bf46daafb1052495149aeefee648","patch":"@@ -454,6 +454,13 @@ lastLoginDate=ge=2016-03-02 15:21:22\n ----\n ====\n \n+.Auxiliary Any Type class assignment\n+====\n+----\n+$auxClasses==csv\n+----\n+====\n+\n .Resource assignment match\n ====\n ----"}]}