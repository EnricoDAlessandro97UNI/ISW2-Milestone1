{"sha":"0f2e91542068a3e0bcaa26c8e979ea676a4da65f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBmMmU5MTU0MjA2OGEzZTBiY2FhMjZjOGU5NzllYTY3NmE0ZGE2NWY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-08-19T15:15:08Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-08-19T15:15:08Z"},"message":"password policy management core implementation\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247082 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"74bfa04dff3f4b5b3c1299bd9ee5b0d246b75250","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/74bfa04dff3f4b5b3c1299bd9ee5b0d246b75250"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0f2e91542068a3e0bcaa26c8e979ea676a4da65f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0f2e91542068a3e0bcaa26c8e979ea676a4da65f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0f2e91542068a3e0bcaa26c8e979ea676a4da65f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/comments","author":null,"committer":null,"parents":[{"sha":"a9aa835479dae6cbafb0ca7e9db1e987d7c58d8a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a9aa835479dae6cbafb0ca7e9db1e987d7c58d8a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a9aa835479dae6cbafb0ca7e9db1e987d7c58d8a"}],"stats":{"total":1220,"additions":1203,"deletions":17},"files":[{"sha":"430764b67d9a98e519c45cf663aa8b8266437481","filename":"archetype/src/main/resources/archetype-resources/core/src/test/resources/content.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -34,6 +34,7 @@\n     <hibernate_sequences sequence_name=\"SEQ_JPAHistoryStep\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPAPropertySetItem\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPAWorkflowEntry\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_Policy\" sequence_next_hi_value=\"10\"/>\n     \n     <SyncopeConf key=\"token.length\" value=\"256\"/>\n     <SyncopeConf key=\"token.expireTime\" value=\"60\"/>\n@@ -370,6 +371,10 @@\n     <RDerAttr id=\"1001\" derivedSchema_name=\"displayProperty\" owner_id=\"1\"/>\n     <RDerAttr id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n \n+    <!-- sample policies -->\n+    <Policy id=\"1\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyntaxPolicy%22%3E+%0A++%3Cvoid+property%3D%22maxLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E%0A+%3C/object%3E+%0A%3C/java%3E+%0A\" type=\"SCHEMA\"/>\n+    <Policy id=\"2\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyntaxPolicy%22%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+%0A\" type=\"PASSWORD\"/>\n+\n     <!-- Authentication and authorization -->\n     <Entitlement name=\"base\"/>\n     <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>"},{"sha":"df6a0e6164c188a5e3a60977776a68018b7f637f","filename":"client/src/main/java/org/syncope/types/AbstractPolicy.java","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAbstractPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAbstractPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAbstractPolicy.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,20 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+import org.syncope.client.AbstractBaseBean;\n+\n+public abstract class AbstractPolicy extends AbstractBaseBean {\n+}"},{"sha":"07ac16d0683697f89d8915ba275050f9c3f97157","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -36,7 +36,11 @@ public enum EntityViolationType {\n     InvalidSchedTask(\n     \"org.syncope.core.validation.schedtask.invalid\"),\n     InvalidSyncTask(\n-    \"org.syncope.core.validation.synctask.invalid\");\n+    \"org.syncope.core.validation.synctask.invalid\"),\n+    InvalidPassword(\n+    \"org.syncope.core.validation.password.invalid\"),\n+    InvalidPolicy(\n+    \"org.syncope.core.validation.policy.invalid\");\n \n     private String message;\n "},{"sha":"be1095851a5a9c4ba0737cf200e6f091ae4fe3e5","filename":"client/src/main/java/org/syncope/types/PolicyType.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,32 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public enum PolicyType {\n+\n+    /**\n+     * Account policy like:\n+     * password expire time, chenage password at first access, ...\n+     */\n+    ACCOUNT,\n+    /**\n+     * Password policy regarding password synctax.\n+     */\n+    PASSWORD,\n+    /**\n+     * Schema policy regarding attribute value syntax.\n+     */\n+    SCHEMA\n+}"},{"sha":"4149c6676706743468f112ffe52981d41caecfaa","filename":"client/src/main/java/org/syncope/types/SyntaxPolicy.java","status":"added","additions":267,"deletions":0,"changes":267,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyntaxPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyntaxPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyntaxPolicy.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,267 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SyntaxPolicy extends AbstractPolicy {\n+\n+    /**\n+     * Minimum length.\n+     */\n+    private int maxLength;\n+\n+    /**\n+     * Maximum length.\n+     */\n+    private int minLength;\n+\n+    /**\n+     * Substrings not permitted.\n+     */\n+    private List<String> wordsNotPermitted;\n+\n+    /**\n+     * User attribute values not permitted.\n+     */\n+    private List<String> schemasNotPermitted;\n+\n+    /**\n+     * Specify if one or more non alphanumeric characters are required.\n+     */\n+    private boolean nonAlphanumericRequired;\n+\n+    /**\n+     * Specify if one or more digits are required.\n+     */\n+    private boolean digitRequired;\n+\n+    /**\n+     * Specify if one or more lowercase alphabetic characters are required.\n+     */\n+    private boolean lowercaseRequired;\n+\n+    /**\n+     * Specify if one or more uppercase alphabetic characters are required.\n+     */\n+    private boolean uppercaseRequired;\n+\n+    /**\n+     * Specify if must start with a digit.\n+     */\n+    private boolean mustStartWithDigit;\n+\n+    /**\n+     * Specify if mustn't start with a digit.\n+     */\n+    private boolean mustntStartWithDigit;\n+\n+    /**\n+     * Specify if must end with a digit.\n+     */\n+    private boolean mustEndWithDigit;\n+\n+    /**\n+     * Specify if mustn't end with a digit.\n+     */\n+    private boolean mustntEndWithDigit;\n+\n+    /**\n+     * Specify if must start with a non alphanumeric caracther.\n+     */\n+    private boolean mustStartWithNonAlpha;\n+\n+    /**\n+     * Specify if mustn't start with a non alphanumeric caracther.\n+     */\n+    private boolean mustntStartWithNonAlpha;\n+\n+    /**\n+     * Specify if must end with a non alphanumeric caracther.\n+     */\n+    private boolean mustEndWithNonAlpha;\n+\n+    /**\n+     * Specify if mustn't end with a non alphanumeric caracther.\n+     */\n+    private boolean mustntEndWithNonAlpha;\n+\n+    /**\n+     * Substrings not permitted as prefix.\n+     */\n+    private List<String> prefixesNotPermitted;\n+\n+    /**\n+     * Substrings not permitted as suffix.\n+     */\n+    private List<String> suffixesNotPermitted;\n+\n+    public boolean isDigitRequired() {\n+        return digitRequired;\n+    }\n+\n+    public void setDigitRequired(boolean digitRequired) {\n+        this.digitRequired = digitRequired;\n+    }\n+\n+    public boolean isLowercaseRequired() {\n+        return lowercaseRequired;\n+    }\n+\n+    public void setLowercaseRequired(boolean lowercaseRequired) {\n+        this.lowercaseRequired = lowercaseRequired;\n+    }\n+\n+    public int getMaxLength() {\n+        return maxLength;\n+    }\n+\n+    public void setMaxLength(int maxLength) {\n+        this.maxLength = maxLength;\n+    }\n+\n+    public int getMinLength() {\n+        return minLength;\n+    }\n+\n+    public void setMinLength(int minLength) {\n+        this.minLength = minLength;\n+    }\n+\n+    public boolean isMustEndWithDigit() {\n+        return mustEndWithDigit;\n+    }\n+\n+    public void setMustEndWithDigit(boolean mustEndWithDigit) {\n+        this.mustEndWithDigit = mustEndWithDigit;\n+    }\n+\n+    public boolean isMustEndWithNonAlpha() {\n+        return mustEndWithNonAlpha;\n+    }\n+\n+    public void setMustEndWithNonAlpha(boolean mustEndWithNonAlpha) {\n+        this.mustEndWithNonAlpha = mustEndWithNonAlpha;\n+    }\n+\n+    public boolean isMustStartWithDigit() {\n+        return mustStartWithDigit;\n+    }\n+\n+    public void setMustStartWithDigit(boolean mustStartWithDigit) {\n+        this.mustStartWithDigit = mustStartWithDigit;\n+    }\n+\n+    public boolean isMustStartWithNonAlpha() {\n+        return mustStartWithNonAlpha;\n+    }\n+\n+    public void setMustStartWithNonAlpha(boolean mustStartWithNonAlpha) {\n+        this.mustStartWithNonAlpha = mustStartWithNonAlpha;\n+    }\n+\n+    public boolean isMustntEndWithDigit() {\n+        return mustntEndWithDigit;\n+    }\n+\n+    public void setMustntEndWithDigit(boolean mustntEndWithDigit) {\n+        this.mustntEndWithDigit = mustntEndWithDigit;\n+    }\n+\n+    public boolean isMustntEndWithNonAlpha() {\n+        return mustntEndWithNonAlpha;\n+    }\n+\n+    public void setMustntEndWithNonAlpha(boolean mustntEndWithNonAlpha) {\n+        this.mustntEndWithNonAlpha = mustntEndWithNonAlpha;\n+    }\n+\n+    public boolean isMustntStartWithDigit() {\n+        return mustntStartWithDigit;\n+    }\n+\n+    public void setMustntStartWithDigit(boolean mustntStartWithDigit) {\n+        this.mustntStartWithDigit = mustntStartWithDigit;\n+    }\n+\n+    public boolean isMustntStartWithNonAlpha() {\n+        return mustntStartWithNonAlpha;\n+    }\n+\n+    public void setMustntStartWithNonAlpha(boolean mustntStartWithNonAlpha) {\n+        this.mustntStartWithNonAlpha = mustntStartWithNonAlpha;\n+    }\n+\n+    public boolean isNonAlphanumericRequired() {\n+        return nonAlphanumericRequired;\n+    }\n+\n+    public void setNonAlphanumericRequired(boolean nonAlphanumericRequired) {\n+        this.nonAlphanumericRequired = nonAlphanumericRequired;\n+    }\n+\n+    public List<String> getPrefixesNotPermitted() {\n+        if (prefixesNotPermitted == null) {\n+            prefixesNotPermitted = new ArrayList<String>();\n+        }\n+        return prefixesNotPermitted;\n+    }\n+\n+    public void setPrefixesNotPermitted(List<String> prefixesNotPermitted) {\n+        this.prefixesNotPermitted = prefixesNotPermitted;\n+    }\n+\n+    public List<String> getSchemasNotPermitted() {\n+        if (schemasNotPermitted == null) {\n+            schemasNotPermitted = new ArrayList<String>();\n+        }\n+        return schemasNotPermitted;\n+    }\n+\n+    public void setSchemasNotPermitted(List<String> schemasNotPermitted) {\n+        this.schemasNotPermitted = schemasNotPermitted;\n+    }\n+\n+    public List<String> getSuffixesNotPermitted() {\n+        if (suffixesNotPermitted == null) {\n+            suffixesNotPermitted = new ArrayList<String>();\n+        }\n+        return suffixesNotPermitted;\n+    }\n+\n+    public void setSuffixesNotPermitted(List<String> suffixesNotPermitted) {\n+        this.suffixesNotPermitted = suffixesNotPermitted;\n+    }\n+\n+    public boolean isUppercaseRequired() {\n+        return uppercaseRequired;\n+    }\n+\n+    public void setUppercaseRequired(boolean uppercaseRequired) {\n+        this.uppercaseRequired = uppercaseRequired;\n+    }\n+\n+    public List<String> getWordsNotPermitted() {\n+        if (wordsNotPermitted == null) {\n+            wordsNotPermitted = new ArrayList<String>();\n+        }\n+        return wordsNotPermitted;\n+    }\n+\n+    public void setWordsNotPermitted(List<String> wordsNotPermitted) {\n+        this.wordsNotPermitted = wordsNotPermitted;\n+    }\n+}"},{"sha":"2f8b6aba02d8ce15b8f726cb3e11767ef89d411b","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -22,8 +22,10 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.MappedSuperclass;\n+import org.syncope.core.persistence.validation.entity.AttributableCheck;\n \n @MappedSuperclass\n+@AttributableCheck\n public abstract class AbstractAttributable extends AbstractBaseBean {\n \n     /**"},{"sha":"3d6746f4ca3d37c313bb148cd1bd8bc1c1d620dd","filename":"core/src/main/java/org/syncope/core/persistence/beans/Policy.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,100 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.beans.XMLDecoder;\n+import java.beans.XMLEncoder;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.net.URLDecoder;\n+import java.net.URLEncoder;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import org.hibernate.annotations.Type;\n+import org.syncope.core.persistence.validation.entity.PolicyCheck;\n+import org.syncope.types.AbstractPolicy;\n+import org.syncope.types.PolicyType;\n+\n+@Entity\n+@PolicyCheck\n+public class Policy extends AbstractBaseBean {\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private PolicyType type;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public PolicyType getType() {\n+        return type;\n+    }\n+\n+    public void setType(PolicyType type) {\n+        this.type = type;\n+    }\n+\n+    // TODO: http://code.google.com/p/syncope/issues/detail?id=127\n+    @Lob\n+    @Type(type = \"org.hibernate.type.TextType\")\n+    private String specification;\n+\n+    public <T extends AbstractPolicy> T getSpecification() {\n+        T result = null;\n+\n+        try {\n+            ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(\n+                    URLDecoder.decode(specification, \"UTF-8\").getBytes());\n+\n+            XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n+            Object object = decoder.readObject();\n+            decoder.close();\n+\n+            result = (T) object;\n+        } catch (Throwable t) {\n+            LOG.error(\"During connector properties deserialization\", t);\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractPolicy> void setSpecification(final T policy) {\n+        try {\n+            ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n+            XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n+            encoder.writeObject(policy);\n+            encoder.flush();\n+            encoder.close();\n+\n+            specification = URLEncoder.encode(\n+                    tokenContentOS.toString(), \"UTF-8\");\n+\n+        } catch (Throwable t) {\n+            LOG.error(\"During connector properties serialization\", t);\n+        }\n+    }\n+}"},{"sha":"55ef66e9035bff82d483e7315fe9d367fa99ac69","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -70,6 +70,8 @@ public class SyncopeUser extends AbstractAttributable {\n \n     private String password;\n \n+    private transient String clearPassword;\n+\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeUser\")\n     @Valid\n     private List<Membership> memberships;\n@@ -176,12 +178,19 @@ public String getPassword() {\n         return password;\n     }\n \n+    public String getClearPassword() {\n+        return clearPassword;\n+    }\n+\n     /**\n-     * TODO: password policies.\n      * @param password the password to be set\n      */\n     public void setPassword(\n-            final String password, final CipherAlgorithm cipherAlgoritm) {\n+            final String password,\n+            final CipherAlgorithm cipherAlgoritm) {\n+\n+        // clear password\n+        clearPassword = password;\n \n         try {\n             if (cipherAlgoritm == null"},{"sha":"640e8eb60feba72783ab3febaa9ccbf4c8b32191","filename":"core/src/main/java/org/syncope/core/persistence/dao/PolicyDAO.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,33 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.Policy;\n+\n+public interface PolicyDAO extends DAO {\n+\n+    Policy find(Long id);\n+\n+    Policy getPasswordPolicy();\n+\n+    Policy getAccountPolicy();\n+\n+    List<Policy> findAll();\n+\n+    Policy save(Policy policy);\n+\n+    void delete(Long id);\n+}"},{"sha":"be201350013dc8d2b7a2bbc0b24970c6d76c4de0","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/PolicyDAOImpl.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,75 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.dao.PolicyDAO;\n+\n+@Repository\n+public class PolicyDAOImpl extends AbstractDAOImpl\n+        implements PolicyDAO {\n+\n+    @Override\n+    public Policy find(final Long id) {\n+        return entityManager.find(Policy.class, id);\n+    }\n+\n+    @Override\n+    public Policy getPasswordPolicy() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM Policy e WHERE type='PASSWORD'\");\n+\n+        final List<Policy> policies = query.getResultList();\n+\n+        if (policies != null && !policies.isEmpty()) {\n+            return policies.get(0);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public Policy getAccountPolicy() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM Policy e WHERE type='ACCOUNT'\");\n+\n+        final List<Policy> policies = query.getResultList();\n+\n+        if (policies != null && !policies.isEmpty()) {\n+            return policies.get(0);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public List<Policy> findAll() {\n+        Query query = entityManager.createQuery(\"SELECT e FROM Policy e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Policy save(final Policy policy) {\n+        return entityManager.merge(policy);\n+    }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        entityManager.remove(find(id));\n+    }\n+}"},{"sha":"b102808fe68b04f273e4edca424a3fd04437ac0f","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/InvalidAttrValueException.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -19,7 +19,12 @@\n \n public class InvalidAttrValueException extends ValidationException {\n \n-    public InvalidAttrValueException(AbstractAttrValue value) {\n+    public InvalidAttrValueException(final AbstractAttrValue value) {\n         super(\"Could not validate \" + value);\n     }\n+\n+    public InvalidAttrValueException(\n+            final AbstractAttrValue value, Throwable t) {\n+        super(\"Could not validate \" + value, t);\n+    }\n }"},{"sha":"2d444333855ee3bcbf91e05ab012008192f4291e","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttributableCheck.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableCheck.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = AttributableValidator.class)\n+@Documented\n+public @interface AttributableCheck {\n+\n+    String message() default \"{org.syncope.core.validation.attributable}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"60708bcff7fd1ae280e6af2c4255890f1836a54c","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttributableValidator.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,87 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.PolicyDAO;\n+import org.syncope.core.policy.PolicyEnforcer;\n+import org.syncope.core.policy.PolicyEvaluator;\n+import org.syncope.types.EntityViolationType;\n+import org.syncope.types.SyntaxPolicy;\n+\n+public class AttributableValidator extends AbstractValidator\n+        implements ConstraintValidator<AttributableCheck, AbstractAttributable> {\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Autowired\n+    private PolicyEvaluator evaluator;\n+\n+    @Autowired\n+    private PolicyEnforcer enforcer;\n+\n+    @Override\n+    public void initialize(final AttributableCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(\n+            final AbstractAttributable object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid = Boolean.TRUE;\n+        context.disableDefaultConstraintViolation();\n+        \n+        if (object instanceof SyncopeUser) {\n+            // ------------------------------\n+            // Verify password policy\n+            // ------------------------------\n+            LOG.debug(\"Password Policy enforcement\");\n+\n+            final Policy policy = policyDAO.getPasswordPolicy();\n+\n+            // evaluate policy\n+            SyntaxPolicy syntaxPolicy = evaluator.evaluate(policy, object);\n+\n+            try {\n+                final String password =\n+                        ((SyncopeUser) object).getClearPassword();\n+\n+                if (password != null) {\n+                    enforcer.enforce(syntaxPolicy, policy.getType(), password);\n+                }\n+\n+            } catch (Exception e) {\n+                LOG.debug(\"Invalid password\");\n+\n+                context.buildConstraintViolationWithTemplate(e.getMessage()).\n+                        addNode(EntityViolationType.InvalidPassword.toString()).\n+                        addConstraintViolation();\n+                isValid = Boolean.FALSE;\n+            }\n+            // ------------------------------\n+        }\n+\n+        // Let's verify other policies ....\n+\n+        return isValid;\n+    }\n+}"},{"sha":"e7966bf0a868a4f5d79a0e61f0ddba8a930827fb","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PolicyCheck.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyCheck.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = PolicyValidator.class)\n+@Documented\n+public @interface PolicyCheck {\n+\n+    String message() default \"{org.syncope.core.validation.policy}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"92ba26db2a21381c22ed8e729ebf679512684389","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,77 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.dao.PolicyDAO;\n+import org.syncope.types.EntityViolationType;\n+\n+public class PolicyValidator extends AbstractValidator\n+        implements ConstraintValidator<PolicyCheck, Policy> {\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Override\n+    public void initialize(final PolicyCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(\n+            final Policy object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid = Boolean.TRUE;\n+        context.disableDefaultConstraintViolation();\n+\n+        switch (object.getType()) {\n+            case PASSWORD:\n+                // just one policy with type PASSWORD\n+                Policy passwordPolicy = policyDAO.getPasswordPolicy();\n+                if (passwordPolicy != null\n+                        && !passwordPolicy.getId().equals(object.getId())) {\n+                    isValid = Boolean.FALSE;\n+\n+                    context.buildConstraintViolationWithTemplate(\n+                            \"Password policy already exists\").addNode(\n+                            EntityViolationType.InvalidPolicy.toString()).\n+                            addConstraintViolation();\n+                }\n+                break;\n+\n+            case ACCOUNT:\n+                // just one policy with type ACCOUNT\n+                Policy accountPolicy = policyDAO.getAccountPolicy();\n+                if (accountPolicy != null\n+                        && !accountPolicy.getId().equals(object.getId())) {\n+                    isValid = Boolean.FALSE;\n+\n+                    context.buildConstraintViolationWithTemplate(\n+                            \"Account policy already exists\").\n+                            addNode(EntityViolationType.InvalidPolicy.toString()).\n+                            addConstraintViolation();\n+                }\n+                break;\n+\n+            case SCHEMA:\n+            default:\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"17292af6b0489ceb77d2a705543f17ff7d2c580b","filename":"core/src/main/java/org/syncope/core/policy/PolicyEnforcer.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,85 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.policy;\n+\n+import java.io.InvalidObjectException;\n+import org.springframework.stereotype.Component;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.types.AbstractPolicy;\n+import org.syncope.types.PolicyType;\n+import org.syncope.types.SyntaxPolicy;\n+\n+@Component\n+public class PolicyEnforcer<E> {\n+\n+    public <T extends AbstractPolicy> void enforce(\n+            final T policy, final PolicyType type, final E object)\n+            throws InvalidObjectException, Exception {\n+\n+        switch (type) {\n+            case PASSWORD:\n+            case SCHEMA:\n+                if (!(object instanceof String)) {\n+                    throw new InvalidObjectException(\"Invalid object type\");\n+                }\n+                syntaxVerification((SyntaxPolicy) policy, (String) object);\n+                break;\n+            case ACCOUNT:\n+                if (!(object instanceof SyncopeUser)) {\n+                    throw new InvalidObjectException(\"Invalid object type\");\n+                }\n+                break;\n+            default:\n+        }\n+    }\n+\n+    private void syntaxVerification(\n+            final SyntaxPolicy policy, final String object) throws Exception {\n+\n+        // check length\n+        if (policy.getMinLength() > 0\n+                && policy.getMinLength() > object.length()) {\n+            throw new Exception(\"Password too short\");\n+        }\n+\n+        if (policy.getMaxLength() > 0\n+                && policy.getMaxLength() < object.length()) {\n+            throw new Exception(\"Password too long\");\n+        }\n+        // check words not permitted\n+\n+        // check non alphanumeric characters occurence\n+\n+        // check digits occurrence\n+\n+        // check lowercase alphabetic characters occurrence\n+\n+        // check uppercase alphabetic characters occurrence\n+\n+        // check prefix\n+\n+        // check suffix\n+\n+        // check non alphanumeric character first occurrence\n+\n+        // check digit first occurrence\n+\n+        // check non alphanumeric character last occurrence\n+\n+        // check digit last occurrence\n+\n+        // check schemas\n+    }\n+}"},{"sha":"1e29964b2f0c3e32b6b9ceb16e0222de7331a7c1","filename":"core/src/main/java/org/syncope/core/policy/PolicyEvaluator.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,71 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.policy;\n+\n+import java.util.List;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.stereotype.Component;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.types.AbstractPolicy;\n+import org.syncope.types.SyntaxPolicy;\n+\n+@Component\n+public class PolicyEvaluator {\n+\n+    public <T extends AbstractPolicy> T evaluate(\n+            final Policy policy, final AbstractAttributable attributable) {\n+\n+        T result = null;\n+\n+        if (policy != null) {\n+            switch (policy.getType()) {\n+                case PASSWORD:\n+                case SCHEMA:\n+                    final SyntaxPolicy specification = policy.getSpecification();\n+                    final SyntaxPolicy syntaxPolicy = new SyntaxPolicy();\n+\n+                    BeanUtils.copyProperties(\n+                            specification,\n+                            syntaxPolicy,\n+                            new String[]{\"schemasNotPermitted\"});\n+\n+                    AbstractAttr attribute;\n+                    List<String> values;\n+                    for (String schema : specification.getSchemasNotPermitted()) {\n+                        attribute = attributable.getAttribute(schema);\n+                        if (attribute != null) {\n+                            values = attribute.getValuesAsStrings();\n+                            if (values != null && !values.isEmpty()) {\n+                                syntaxPolicy.getWordsNotPermitted().add(\n+                                        values.get(0));\n+                            }\n+                        }\n+                    }\n+\n+                    result = (T) syntaxPolicy;\n+                    break;\n+                case ACCOUNT:\n+                    result = null;\n+                    break;\n+                default:\n+                    result = null;\n+            }\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"0a79ddbfc2a195e226b4e440984b9b4a3933f888","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":47,"deletions":4,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -56,10 +56,12 @@\n import org.syncope.core.persistence.dao.UserSearchDAO;\n import org.syncope.core.persistence.propagation.PropagationManager;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.core.rest.data.UserDataBinder.CheckInResult;\n import org.syncope.core.util.EntitlementUtil;\n import org.syncope.core.workflow.Constants;\n import org.syncope.core.workflow.WFUtils;\n+import org.syncope.types.EntityViolationType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller\n@@ -344,8 +346,7 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n         }\n \n         List<SyncopeUser> matchingUsers = userSearchDAO.search(\n-                EntitlementUtil.getRoleIds(EntitlementUtil.\n-                getOwnedEntitlementNames()), searchCondition);\n+                EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user, workflow));\n@@ -440,7 +441,28 @@ public SyncopeUser create(UserTO userTO, Set<Long> mandatoryRoles,\n         // Create the user\n         SyncopeUser user = new SyncopeUser();\n         userDataBinder.create(user, userTO);\n-        user = userDAO.save(user);\n+\n+        try {\n+            user = userDAO.save(user);\n+        } catch (InvalidEntityException e) {\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            SyncopeClientException sce = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidPassword);\n+\n+            for (Map.Entry<Class, Set<EntityViolationType>> violation :\n+                    e.getViolations().entrySet()) {\n+\n+                for (EntityViolationType violationType : violation.getValue()) {\n+                    sce.addElement(violationType.toString());\n+                }\n+            }\n+\n+            scce.addException(sce);\n+            throw scce;\n+        }\n \n         // User is created locally and propagated, let's advance on the workflow\n         final Long workflowId =\n@@ -562,7 +584,28 @@ public SyncopeUser update(SyncopeUser user, UserMod userMod,\n         // Update user with provided userMod\n         ResourceOperations resourceOperations =\n                 userDataBinder.update(user, userMod);\n-        user = userDAO.save(user);\n+\n+        try {\n+            user = userDAO.save(user);\n+        } catch (InvalidEntityException e) {\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            SyncopeClientException sce = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidPassword);\n+\n+            for (Map.Entry<Class, Set<EntityViolationType>> violation :\n+                    e.getViolations().entrySet()) {\n+\n+                for (EntityViolationType violationType : violation.getValue()) {\n+                    sce.addElement(violationType.toString());\n+                }\n+            }\n+\n+            scce.addException(sce);\n+            throw scce;\n+        }\n \n         // Now that user is update locally, let's propagate\n         Set<String> mandatoryResourceNames = getMandatoryResourceNames(user,"},{"sha":"380a2e8779972862984b3a498d404ad2fc057bce","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -108,7 +108,6 @@ public void create(final SyncopeUser user, final UserTO userTO)\n                 HttpStatus.BAD_REQUEST);\n \n         // password\n-        // TODO: check password policies\n         SyncopeClientException invalidPassword = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidPassword);\n         if (userTO.getPassword() == null || userTO.getPassword().isEmpty()) {"},{"sha":"996304d5da0f401957692c300b1f2f201f4ad63e","filename":"core/src/main/resources/META-INF/orm.xml","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -251,5 +251,12 @@\n             </id>\n         </attributes>\n     </entity>\n-\n+    <entity class=\"org.syncope.core.persistence.beans.Policy\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_Policy\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_Policy\" pk-column-value=\"SEQ_Policy\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n </entity-mappings>"},{"sha":"25f6a1cd5e30b6f6b23522cd765c32db8f15da17","filename":"core/src/main/resources/META-INF/orm.xml.oracle","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -215,4 +215,12 @@\n             </id>\n         </attributes>\n     </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.Policy\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_Policy\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_Policy\" pk-column-value=\"SEQ_Policy\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n </entity-mappings>"},{"sha":"036a17cc0d666ebab5a267ae54eaaf508d322172","filename":"core/src/main/resources/content.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -34,6 +34,7 @@\n     <hibernate_sequences sequence_name=\"SEQ_JPAHistoryStep\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPAPropertySetItem\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPAWorkflowEntry\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_Policy\" sequence_next_hi_value=\"10\"/>\n \n     <SyncopeConf key=\"token.length\" value=\"256\"/>\n     <SyncopeConf key=\"token.expireTime\" value=\"60\"/>"},{"sha":"ced6f989833451ffb152c5c6089bfc740d437b9d","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -32,6 +32,7 @@\n     <context:annotation-config/>\n     <context:component-scan base-package=\"org.syncope.core.persistence\"/>\n     <context:component-scan base-package=\"org.syncope.core.rest.data\"/>\n+    <context:component-scan base-package=\"org.syncope.core.policy\"/>\n \n     <aop:aspectj-autoproxy/>\n     <bean class=\"org.syncope.core.monitor.CacheMonitor\"/>"},{"sha":"5bd428e8c06bf669c8a25946efe2ce6bdddb4796","filename":"core/src/test/java/org/syncope/core/persistence/dao/PolicyTest.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -0,0 +1,105 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.syncope.types.PolicyType;\n+import org.syncope.types.SyntaxPolicy;\n+\n+@Transactional\n+public class PolicyTest extends AbstractTest {\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Test\n+    public final void findAll() {\n+        List<Policy> policies = policyDAO.findAll();\n+        assertNotNull(policies);\n+        assertFalse(policies.isEmpty());\n+    }\n+\n+    @Test\n+    public final void findById() {\n+        Policy policy = policyDAO.find(1L);\n+        assertNotNull(\"findById did not work\", policy);\n+\n+        assertEquals(\"invalid policy values\",\n+                8, ((SyntaxPolicy) policy.getSpecification()).getMaxLength());\n+    }\n+\n+    @Test\n+    public final void findPasswordPolicy() {\n+        Policy policy = policyDAO.getPasswordPolicy();\n+        assertNotNull(\"findById did not work\", policy);\n+\n+        assertEquals(PolicyType.PASSWORD, policy.getType());\n+\n+        assertEquals(\"invalid policy values\",\n+                8, ((SyntaxPolicy) policy.getSpecification()).getMinLength());\n+    }\n+\n+    @Test\n+    public final void save() {\n+\n+        SyntaxPolicy syntaxPolicy = new SyntaxPolicy();\n+        syntaxPolicy.setMaxLength(8);\n+        syntaxPolicy.setMinLength(6);\n+\n+        Policy policy = new Policy();\n+        policy.setSpecification(syntaxPolicy);\n+        policy.setType(PolicyType.PASSWORD);\n+\n+        Throwable t = null;\n+        try {\n+            policy = policyDAO.save(policy);\n+        } catch (InvalidEntityException e) {\n+            t = e;\n+        }\n+        assertNotNull(t);\n+\n+        Policy passwordPolicy = policyDAO.getPasswordPolicy();\n+        assertNotNull(passwordPolicy);\n+        passwordPolicy.setSpecification(policy.getSpecification());\n+\n+\n+        policy = policyDAO.save(passwordPolicy);\n+\n+        assertNotNull(policy);\n+        assertEquals(PolicyType.PASSWORD, policy.getType());\n+        assertEquals(\n+                ((SyntaxPolicy) policy.getSpecification()).getMaxLength(), 8);\n+        assertEquals(\n+                ((SyntaxPolicy) policy.getSpecification()).getMinLength(), 6);\n+    }\n+\n+    @Test\n+    public final void delete() {\n+        Policy policy = policyDAO.find(1L);\n+        assertNotNull(\"find to delete did not work\", policy);\n+\n+        policyDAO.delete(policy.getId());\n+\n+        Policy actual = policyDAO.find(1L);\n+        assertNull(\"delete did not work\", actual);\n+    }\n+}"},{"sha":"94e0fc58f36a0622c0f8b81f75e3e055cb3d2463","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -25,6 +25,7 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.core.rest.controller.InvalidSearchConditionException;\n import org.syncope.core.util.EntitlementUtil;\n import org.syncope.types.CipherAlgorithm;\n@@ -130,11 +131,21 @@ public final void findById() {\n     @Test\n     public final void save() {\n         SyncopeUser user = new SyncopeUser();\n-        user.setPassword(\"password\", CipherAlgorithm.SHA256);\n \n-        user = userDAO.save(user);\n+        user.setPassword(\"pass\", CipherAlgorithm.SHA256);\n+\n+        Throwable t = null;\n+        try {\n+            userDAO.save(user);\n+        } catch (InvalidEntityException e) {\n+            t = e;\n+        }\n+\n+        assertNotNull(t);\n+\n+        user.setPassword(\"password\", CipherAlgorithm.SHA256);\n \n-        SyncopeUser actual = userDAO.find(user.getId());\n+        SyncopeUser actual = userDAO.save(user);\n         assertNotNull(\"expected save to work\", actual);\n     }\n "},{"sha":"842a0e60121c6b3f332195228f364a73deeba97d","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":62,"deletions":4,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -143,7 +143,7 @@ public final void createUserWithNoPropagation() {\n         attributeTO.addValue(\"xxx\");\n         userTO.addAttribute(attributeTO);\n \n-        userTO.setPassword(\"xxx\");\n+        userTO.setPassword(\"password\");\n         userTO.addResource(\"ws-target-resource-nopropagation\");\n \n         restTemplate.postForObject(BASE_URL + \"user/create\"\n@@ -201,14 +201,24 @@ public final void createUserWithDbPropagation() {\n         attributeTO.addValue(\"yyy\");\n         userTO.addAttribute(attributeTO);\n \n-        userTO.setPassword(\"yyy\");\n+        userTO.setPassword(\"password\");\n         userTO.addResource(\"ws-target-resource-testdb\");\n \n         restTemplate.postForObject(BASE_URL + \"user/create\"\n                 + \"?mandatoryResources=ws-target-resource-testdb\",\n                 userTO, UserTO.class);\n     }\n \n+    @Test\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public final void createWithInvalidPassword() {\n+        UserTO userTO = getSampleTO(\"invalidpasswd@passwd.com\");\n+        userTO.setPassword(\"pass\");\n+\n+        restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+    }\n+\n     @Test\n     @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n     public final void createWithException() {\n@@ -663,6 +673,55 @@ public final void paginatedSearch() {\n         assertTrue(userIds.contains(3L));\n     }\n \n+    @Test\n+    public final void updateWithouPassword() {\n+        UserTO userTO = getSampleTO(\"updatewithout@password.com\");\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+\n+        assertNotNull(userTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n+                userTO, UserTO.class);\n+\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.addDerivedAttributeToBeRemoved(\"cn\");\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/update\", userMod, UserTO.class);\n+\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getDerivedAttributeMap());\n+        assertFalse(userTO.getDerivedAttributeMap().containsKey(\"cn\"));\n+    }\n+\n+    @Test\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public final void updateInvalidPassword() {\n+        UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+\n+        assertNotNull(userTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n+                userTO, UserTO.class);\n+\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.setPassword(\"pass\");\n+\n+        restTemplate.postForObject(\n+                BASE_URL + \"user/update\", userMod, UserTO.class);\n+    }\n+\n     @Test\n     public final void update() {\n         UserTO userTO = getSampleTO(\"g.h@t.com\");\n@@ -716,8 +775,7 @@ public final void update() {\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n         passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.MD5);\n-        assertEquals(passwordTestUser.getPassword(),\n-                userTO.getPassword());\n+        assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(1, userTO.getMemberships().iterator().next()."},{"sha":"430764b67d9a98e519c45cf663aa8b8266437481","filename":"core/src/test/resources/content.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f2e91542068a3e0bcaa26c8e979ea676a4da65f/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=0f2e91542068a3e0bcaa26c8e979ea676a4da65f","patch":"@@ -34,6 +34,7 @@\n     <hibernate_sequences sequence_name=\"SEQ_JPAHistoryStep\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPAPropertySetItem\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPAWorkflowEntry\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_Policy\" sequence_next_hi_value=\"10\"/>\n     \n     <SyncopeConf key=\"token.length\" value=\"256\"/>\n     <SyncopeConf key=\"token.expireTime\" value=\"60\"/>\n@@ -370,6 +371,10 @@\n     <RDerAttr id=\"1001\" derivedSchema_name=\"displayProperty\" owner_id=\"1\"/>\n     <RDerAttr id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n \n+    <!-- sample policies -->\n+    <Policy id=\"1\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyntaxPolicy%22%3E+%0A++%3Cvoid+property%3D%22maxLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E%0A+%3C/object%3E+%0A%3C/java%3E+%0A\" type=\"SCHEMA\"/>\n+    <Policy id=\"2\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyntaxPolicy%22%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+%0A\" type=\"PASSWORD\"/>\n+\n     <!-- Authentication and authorization -->\n     <Entitlement name=\"base\"/>\n     <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>"}]}