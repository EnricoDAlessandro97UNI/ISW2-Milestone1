{"sha":"e8e189aaf32fd8526469d3528c6c38efe38d372f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU4ZTE4OWFhZjMyZmQ4NTI2NDY5ZDM1MjhjNmMzOGVmZTM4ZDM3MmY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-10T14:02:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-10T14:10:08Z"},"message":"[SYNCOPE-1298] Now TaskService#listJobs also reports custom Quartz jobs","tree":{"sha":"98539d1bf16310d04c466feeab064c96d5a855d4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/98539d1bf16310d04c466feeab064c96d5a855d4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e8e189aaf32fd8526469d3528c6c38efe38d372f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e8e189aaf32fd8526469d3528c6c38efe38d372f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e8e189aaf32fd8526469d3528c6c38efe38d372f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e8e189aaf32fd8526469d3528c6c38efe38d372f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"eabaeecb35a9b37386cb5a3131f06e6253bce79b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eabaeecb35a9b37386cb5a3131f06e6253bce79b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eabaeecb35a9b37386cb5a3131f06e6253bce79b"}],"stats":{"total":147,"additions":90,"deletions":57},"files":[{"sha":"17d671718d353c37b47926f6d8893d36fb4cf352","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -171,8 +171,9 @@ public void onClick() {\n         body.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"topology\", Topology.class);\n         MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER,\n-                StringUtils.join(\n-                        new String[] { StandardEntitlement.CONNECTOR_LIST, StandardEntitlement.CONNECTOR_LIST }, \",\"));\n+                String.format(\"%s,%s\",\n+                        StandardEntitlement.CONNECTOR_LIST,\n+                        StandardEntitlement.RESOURCE_LIST));\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"reports\"));\n@@ -222,8 +223,9 @@ public void onClick() {\n         confULContainer.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"security\", Security.class);\n         MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER,\n-                StringUtils.join(\n-                        new String[] { StandardEntitlement.ROLE_LIST, StandardEntitlement.APPLICATION_LIST }, \",\"));\n+                String.format(\"%s,%s\",\n+                        StandardEntitlement.ROLE_LIST,\n+                        StandardEntitlement.APPLICATION_LIST));\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"policies\"));"},{"sha":"7a642dc5187f94371486e5a3c840946751fae4a6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyObjectDirectoryPanel.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -109,8 +109,8 @@ public void onClick(final AjaxRequestTarget target, final AnyObjectTO ignore) {\n                                 new AnyWrapper<>(new AnyObjectRestClient().read(model.getObject().getKey())),\n                                 target));\n             }\n-        }, ActionType.EDIT, StringUtils.join(\n-                new String[] { AnyEntitlement.READ.getFor(type), AnyEntitlement.UPDATE.getFor(type) }, \",\")).\n+        }, ActionType.EDIT,\n+                String.format(\"%s,%s\", AnyEntitlement.READ.getFor(type), AnyEntitlement.UPDATE.getFor(type))).\n                 setRealm(realm);\n \n         panel.add(new ActionLink<AnyObjectTO>() {\n@@ -154,7 +154,9 @@ public void onClick(final AjaxRequestTarget target, final AnyObjectTO ignore) {\n \n                     altDefaultModal.show(true);\n                 }\n-            }, ActionType.MANAGE_RESOURCES, AnyEntitlement.UPDATE.getFor(type)).setRealm(realm);\n+            }, ActionType.MANAGE_RESOURCES,\n+                    String.format(\"%s,%s\", AnyEntitlement.READ.getFor(type), AnyEntitlement.UPDATE.getFor(type))).\n+                    setRealm(realm);\n \n             panel.add(\n                     new ActionLink<AnyObjectTO>() {"},{"sha":"6bef561a4d7175e164c5f63575e4c5582174f16a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -214,8 +214,8 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                         new AjaxWizard.EditItemActionEvent<>(new GroupWrapper(\n                                 restClient.read(model.getObject().getKey())), target));\n             }\n-        }, ActionType.EDIT, StringUtils.join(\n-                new String[] { StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE }, \",\")).\n+        }, ActionType.EDIT,\n+                String.format(\"%s,%s\", StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE)).\n                 setRealm(realm);\n \n         panel.add(new ActionLink<GroupTO>() {\n@@ -263,7 +263,9 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n             public boolean isIndicatorEnabled() {\n                 return false;\n             }\n-        }, ActionType.MEMBERS, StandardEntitlement.GROUP_UPDATE).setRealm(realm);\n+        }, ActionType.MEMBERS,\n+                String.format(\"%s,%s\", StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE)).\n+                setRealm(realm);\n \n         panel.add(new ActionLink<GroupTO>() {\n \n@@ -283,7 +285,8 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionType.PROVISION_MEMBERS,\n-                String.format(\"%s,%s\", StandardEntitlement.TASK_CREATE, StandardEntitlement.TASK_EXECUTE));\n+                String.format(\"%s,%s\", StandardEntitlement.TASK_CREATE, StandardEntitlement.TASK_EXECUTE)).\n+                setRealm(realm);\n \n         panel.add(\n                 new ActionLink<GroupTO>() {\n@@ -304,7 +307,8 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionType.DEPROVISION_MEMBERS,\n-                String.format(\"%s,%s\", StandardEntitlement.TASK_CREATE, StandardEntitlement.TASK_EXECUTE));\n+                String.format(\"%s,%s\", StandardEntitlement.TASK_CREATE, StandardEntitlement.TASK_EXECUTE)).\n+                setRealm(realm);\n \n         panel.add(new ActionLink<GroupTO>() {\n \n@@ -328,7 +332,9 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n \n                 altDefaultModal.show(true);\n             }\n-        }, ActionType.MANAGE_RESOURCES, StandardEntitlement.GROUP_READ).setRealm(realm);\n+        }, ActionType.MANAGE_RESOURCES,\n+                String.format(\"%s,%s\", StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE)).\n+                setRealm(realm);\n \n         panel.add(new ActionLink<GroupTO>() {\n "},{"sha":"54528539a20b901569e91fcb5aa0e8c2b840b5b6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -141,8 +141,8 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                                 new UserWrapper(new UserRestClient().read(model.getObject().getKey())),\n                                 target));\n             }\n-        }, ActionType.EDIT, StringUtils.join(\n-                new String[] { StandardEntitlement.USER_READ, StandardEntitlement.USER_UPDATE }, \",\")).\n+        }, ActionType.EDIT,\n+                String.format(\"%s,%s\", StandardEntitlement.USER_READ, StandardEntitlement.USER_UPDATE)).\n                 setRealm(realm);\n \n         panel.add(new ActionLink<UserTO>() {\n@@ -281,7 +281,9 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n \n                     altDefaultModal.show(true);\n                 }\n-            }, ActionType.MANAGE_RESOURCES, StandardEntitlement.USER_UPDATE).setRealm(realm);\n+            }, ActionType.MANAGE_RESOURCES,\n+                    String.format(\"%s,%s\", StandardEntitlement.USER_READ, StandardEntitlement.USER_UPDATE)).\n+                    setRealm(realm);\n \n             panel.add(new ActionLink<UserTO>() {\n "},{"sha":"71e5ef4e71ccb44daf85309f19f67f70c5ba6876","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -71,8 +71,7 @@ public ActionLinksTogglePanel(final String id, final PageReference pageRef) {\n         container.add(getEmptyFragment());\n     }\n \n-    public void updateHeader(\n-            final AjaxRequestTarget target, final Serializable modelObject) {\n+    public void updateHeader(final AjaxRequestTarget target, final Serializable modelObject) {\n         final String header;\n         if (modelObject == null) {\n             header = new ResourceModel(\"actions\", StringUtils.EMPTY).getObject();\n@@ -125,6 +124,7 @@ public void updateHeader(\n         } else {\n             header = new ResourceModel(\"actions\", StringUtils.EMPTY).getObject();\n         }\n+\n         setHeader(target, StringUtils.abbreviate(header, HEADER_FIRST_ABBREVIATION));\n     }\n "},{"sha":"efd27b5d5eee987ff4be6874bcf1d93e7e36e4d8","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -393,7 +393,7 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                             break;\n \n                         case REPORT:\n-                            ReportTO reportTO = new ReportRestClient().read(jobTO.getRefKey());\n+                            ReportTO reportTO = reportRestClient.read(jobTO.getRefKey());\n \n                             ReportWizardBuilder rwb = new ReportWizardBuilder(reportTO, pageRef);\n                             rwb.setEventSink(AvailableJobsPanel.this);\n@@ -411,11 +411,11 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                         case TASK:\n                             ProvisioningTaskTO schedTaskTO;\n                             try {\n-                                schedTaskTO = new TaskRestClient().readTask(TaskType.PULL, jobTO.getRefKey());\n+                                schedTaskTO = taskRestClient.readTask(TaskType.PULL, jobTO.getRefKey());\n                             } catch (Exception e) {\n                                 LOG.debug(\"Failed to read {} as {}, attempting {}\",\n                                         jobTO.getRefKey(), TaskType.PULL, TaskType.PUSH, e);\n-                                schedTaskTO = new TaskRestClient().readTask(TaskType.PUSH, jobTO.getRefKey());\n+                                schedTaskTO = taskRestClient.readTask(TaskType.PUSH, jobTO.getRefKey());\n                             }\n \n                             SchedTaskWizardBuilder<ProvisioningTaskTO> swb =\n@@ -459,7 +459,7 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n \n                             case REPORT:\n \n-                                final ReportTO reportTO = new ReportRestClient().read(jobTO.getRefKey());\n+                                final ReportTO reportTO = reportRestClient.read(jobTO.getRefKey());\n \n                                 target.add(AvailableJobsPanel.this.reportModal.setContent(\n                                         new ReportletDirectoryPanel(reportModal, jobTO.getRefKey(), pageRef)));\n@@ -506,11 +506,11 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                                     break;\n \n                                 case REPORT:\n-                                    new ReportRestClient().actionJob(jobTO.getRefKey(), JobAction.DELETE);\n+                                    reportRestClient.actionJob(jobTO.getRefKey(), JobAction.DELETE);\n                                     break;\n \n                                 case TASK:\n-                                    new TaskRestClient().actionJob(jobTO.getRefKey(), JobAction.DELETE);\n+                                    taskRestClient.actionJob(jobTO.getRefKey(), JobAction.DELETE);\n                                     break;\n \n                                 default:"},{"sha":"bc2657a703c16cd0d80c44b813bd0706f0c9988a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/JobType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobType.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -24,6 +24,7 @@\n public enum JobType {\n     NOTIFICATION,\n     REPORT,\n-    TASK;\n+    TASK,\n+    CUSTOM;\n \n }"},{"sha":"38bb876ba9297682a935a61ec8ca568b5e349fe4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":47,"deletions":27,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -27,7 +27,12 @@\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.java.job.AbstractInterruptableJob;\n+import org.apache.syncope.core.provisioning.java.job.SystemLoadReporterJob;\n+import org.apache.syncope.core.provisioning.java.job.TaskJob;\n+import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n+import org.apache.syncope.core.provisioning.java.job.report.ReportJob;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.quartz.JobDetail;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n@@ -47,52 +52,67 @@\n \n     protected abstract Triple<JobType, String, String> getReference(final JobKey jobKey);\n \n-    protected JobTO getJobTO(final JobKey jobKey) throws SchedulerException {\n+    protected JobTO getJobTO(final JobKey jobKey, final boolean includeCustom) throws SchedulerException {\n         JobTO jobTO = null;\n \n-        Triple<JobType, String, String> reference = getReference(jobKey);\n-        if (reference != null) {\n-            jobTO = new JobTO();\n-\n-            jobTO.setType(reference.getLeft());\n-            jobTO.setRefKey(reference.getMiddle());\n-            jobTO.setRefDesc(reference.getRight());\n-\n-            List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n-            if (jobTriggers.isEmpty()) {\n-                jobTO.setScheduled(false);\n-            } else {\n-                jobTO.setScheduled(true);\n-                jobTO.setStart(jobTriggers.get(0).getStartTime());\n+        if (scheduler.getScheduler().checkExists(jobKey)) {\n+            Triple<JobType, String, String> reference = getReference(jobKey);\n+            if (reference != null) {\n+                jobTO = new JobTO();\n+                jobTO.setType(reference.getLeft());\n+                jobTO.setRefKey(reference.getMiddle());\n+                jobTO.setRefDesc(reference.getRight());\n+            } else if (includeCustom) {\n+                JobDetail jobDetail = scheduler.getScheduler().getJobDetail(jobKey);\n+                if (!TaskJob.class.isAssignableFrom(jobDetail.getJobClass())\n+                        && !ReportJob.class.isAssignableFrom(jobDetail.getJobClass())\n+                        && !SystemLoadReporterJob.class.isAssignableFrom(jobDetail.getJobClass())\n+                        && !NotificationJob.class.isAssignableFrom(jobDetail.getJobClass())) {\n+\n+                    jobTO = new JobTO();\n+                    jobTO.setType(JobType.CUSTOM);\n+                    jobTO.setRefKey(jobKey.getName());\n+                    jobTO.setRefDesc(jobDetail.getJobClass().getName());\n+                }\n             }\n \n-            jobTO.setRunning(jobManager.isRunning(jobKey));\n+            if (jobTO != null) {\n+                List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n+                if (jobTriggers.isEmpty()) {\n+                    jobTO.setScheduled(false);\n+                } else {\n+                    jobTO.setScheduled(true);\n+                    jobTO.setStart(jobTriggers.get(0).getStartTime());\n+                }\n+\n+                jobTO.setRunning(jobManager.isRunning(jobKey));\n \n-            jobTO.setStatus(\"UNKNOWN\");\n-            if (jobTO.isRunning()) {\n-                try {\n-                    Object job = ApplicationContextProvider.getBeanFactory().getBean(jobKey.getName());\n-                    if (job instanceof AbstractInterruptableJob\n-                            && ((AbstractInterruptableJob) job).getDelegate() != null) {\n+                jobTO.setStatus(\"UNKNOWN\");\n+                if (jobTO.isRunning()) {\n+                    try {\n+                        Object job = ApplicationContextProvider.getBeanFactory().getBean(jobKey.getName());\n+                        if (job instanceof AbstractInterruptableJob\n+                                && ((AbstractInterruptableJob) job).getDelegate() != null) {\n \n-                        jobTO.setStatus(((AbstractInterruptableJob) job).getDelegate().currentStatus());\n+                            jobTO.setStatus(((AbstractInterruptableJob) job).getDelegate().currentStatus());\n+                        }\n+                    } catch (NoSuchBeanDefinitionException e) {\n+                        LOG.warn(\"Could not find job {} implementation\", jobKey, e);\n                     }\n-                } catch (NoSuchBeanDefinitionException e) {\n-                    LOG.warn(\"Could not find job {} implementation\", jobKey, e);\n                 }\n             }\n         }\n \n         return jobTO;\n     }\n \n-    protected List<JobTO> doListJobs() {\n+    protected List<JobTO> doListJobs(final boolean includeCustom) {\n         List<JobTO> jobTOs = new ArrayList<>();\n         try {\n             for (JobKey jobKey : scheduler.getScheduler().\n                     getJobKeys(GroupMatcher.jobGroupEquals(Scheduler.DEFAULT_GROUP))) {\n \n-                JobTO jobTO = getJobTO(jobKey);\n+                JobTO jobTO = getJobTO(jobKey, includeCustom);\n                 if (jobTO != null) {\n                     jobTOs.add(jobTO);\n                 }"},{"sha":"7b9aa90937af9b5c821c950d8d64566bf0f8392f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -110,7 +110,7 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n     public JobTO getJob() {\n-        List<JobTO> jobs = super.doListJobs();\n+        List<JobTO> jobs = super.doListJobs(false);\n         return jobs.isEmpty() ? null : jobs.get(0);\n     }\n "},{"sha":"523b75ab5e6d492aa3b14fdf02cab4799348b111","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -369,7 +369,7 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n     @Override\n     public List<JobTO> listJobs() {\n-        return super.doListJobs();\n+        return super.doListJobs(false);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n@@ -382,7 +382,7 @@ public JobTO getJob(final String key) {\n \n         JobTO jobTO = null;\n         try {\n-            jobTO = getJobTO(JobNamer.getJobKey(report));\n+            jobTO = getJobTO(JobNamer.getJobKey(report), false);\n         } catch (SchedulerException e) {\n             LOG.error(\"Problems while retrieving scheduled job {}\", JobNamer.getJobKey(report), e);\n "},{"sha":"2da812ee2d77d90d34da21f09b72b5297cbfba7c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e8e189aaf32fd8526469d3528c6c38efe38d372f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e8e189aaf32fd8526469d3528c6c38efe38d372f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=e8e189aaf32fd8526469d3528c6c38efe38d372f","patch":"@@ -386,7 +386,7 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n     @Override\n     public List<JobTO> listJobs() {\n-        return super.doListJobs();\n+        return super.doListJobs(true);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n@@ -399,7 +399,7 @@ public JobTO getJob(final String key) {\n \n         JobTO jobTO = null;\n         try {\n-            jobTO = getJobTO(JobNamer.getJobKey(task));\n+            jobTO = getJobTO(JobNamer.getJobKey(task), false);\n         } catch (SchedulerException e) {\n             LOG.error(\"Problems while retrieving scheduled job {}\", JobNamer.getJobKey(task), e);\n "}]}