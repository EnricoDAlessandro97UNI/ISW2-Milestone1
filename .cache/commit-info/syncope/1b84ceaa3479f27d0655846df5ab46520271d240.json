{"sha":"1b84ceaa3479f27d0655846df5ab46520271d240","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFiODRjZWFhMzQ3OWYyN2QwNjU1ODQ2ZGY1YWI0NjUyMDI3MWQyNDA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-12T09:05:37Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-12T09:05:37Z"},"message":"[SYNCOPE-830] Feature provided","tree":{"sha":"e9097b7707b6001ad1e0140370c51fa3084378ed","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e9097b7707b6001ad1e0140370c51fa3084378ed"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1b84ceaa3479f27d0655846df5ab46520271d240","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1b84ceaa3479f27d0655846df5ab46520271d240","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1b84ceaa3479f27d0655846df5ab46520271d240","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1b84ceaa3479f27d0655846df5ab46520271d240/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5e85d830a0a3fa24c4736ac65f5736f31f5bd57e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5e85d830a0a3fa24c4736ac65f5736f31f5bd57e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5e85d830a0a3fa24c4736ac65f5736f31f5bd57e"}],"stats":{"total":444,"additions":320,"deletions":124},"files":[{"sha":"6fd1e1d99f4cd97382e041e736471ab810a8fba6","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -45,11 +45,11 @@ public void delete(final String taskKey) {\n     }\n \n     public List<AbstractTaskTO> list(final String type) {\n-        return taskService.list(new TaskQuery.Builder().type(TaskType.valueOf(type)).build()).getResult();\n+        return taskService.list(new TaskQuery.Builder(TaskType.valueOf(type)).build()).getResult();\n     }\n \n     public List<AbstractTaskTO> listPropagationTask() {\n-        return taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult();\n+        return taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).build()).getResult();\n     }\n \n     public void deleteExecution(final String executionKey) {"},{"sha":"a7c040fdf814073ee8cad34bc301bff75c7a6632","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -46,18 +46,18 @@ public class TaskRestClient extends BaseRestClient implements ExecutionRestClien\n \n     public int count(final TaskType kind) {\n         return getService(TaskService.class).list(\n-                new TaskQuery.Builder().type(kind).page(1).size(1).build()).getTotalCount();\n+                new TaskQuery.Builder(kind).page(1).size(1).build()).getTotalCount();\n     }\n \n     public int count(final String resource, final TaskType kind) {\n         return getService(TaskService.class).list(\n-                new TaskQuery.Builder().resource(resource).type(kind).page(1).size(1).\n+                new TaskQuery.Builder(kind).resource(resource).page(1).size(1).\n                 build()).getTotalCount();\n     }\n \n     public int count(final AnyTypeKind anyTypeKind, final Long anyTypeKey, final TaskType kind) {\n         return getService(TaskService.class).list(\n-                new TaskQuery.Builder().anyTypeKind(anyTypeKind).anyTypeKey(anyTypeKey).type(kind).page(1).size(1).\n+                new TaskQuery.Builder(kind).anyTypeKind(anyTypeKind).anyTypeKey(anyTypeKey).page(1).size(1).\n                 build()).getTotalCount();\n     }\n \n@@ -70,7 +70,7 @@ public List<PropagationTaskTO> listPropagationTasks(\n             final String resource, final int page, final int size, final SortParam<String> sort) {\n \n         return getService(TaskService.class).\n-                <PropagationTaskTO>list(new TaskQuery.Builder().type(TaskType.PROPAGATION).\n+                <PropagationTaskTO>list(new TaskQuery.Builder(TaskType.PROPAGATION).\n                         resource(resource).\n                         page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).\n@@ -82,7 +82,7 @@ public List<PropagationTaskTO> listPropagationTasks(\n             final int page, final int size, final SortParam<String> sort) {\n \n         return getService(TaskService.class).\n-                <PropagationTaskTO>list(new TaskQuery.Builder().type(TaskType.PROPAGATION).\n+                <PropagationTaskTO>list(new TaskQuery.Builder(TaskType.PROPAGATION).\n                         anyTypeKind(anyTypeKind).anyTypeKey(anyTypeKey).\n                         page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).\n@@ -94,7 +94,7 @@ public <T extends AbstractTaskTO> List<T> list(\n             final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n-                list(new TaskQuery.Builder().type(getTaskType(reference)).page(page).size(size).\n+                list(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }\n@@ -108,7 +108,7 @@ public <T extends AbstractTaskTO> List<T> list(\n             final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n-                list(new TaskQuery.Builder().type(getTaskType(reference)).page(page).size(size).resource(resource).\n+                list(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).resource(resource).\n                         orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }"},{"sha":"4cfbf32d70e17cde7516a3fd34e24a8e07409a4a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTaskTO.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTaskTO.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -26,6 +26,7 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TraceLevel;\n \n @XmlRootElement(name = \"notificationTask\")\n@@ -34,6 +35,12 @@ public class NotificationTaskTO extends AbstractTaskTO {\n \n     private static final long serialVersionUID = 371671242591093846L;\n \n+    private Long notification;\n+\n+    private AnyTypeKind anyTypeKind;\n+\n+    private Long anyKey;\n+\n     private final Set<String> recipients = new HashSet<>();\n \n     private String sender;\n@@ -48,6 +55,30 @@ public class NotificationTaskTO extends AbstractTaskTO {\n \n     private TraceLevel traceLevel;\n \n+    public Long getNotification() {\n+        return notification;\n+    }\n+\n+    public void setNotification(final Long notification) {\n+        this.notification = notification;\n+    }\n+\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n+    }\n+\n+    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n+        this.anyTypeKind = anyTypeKind;\n+    }\n+\n+    public Long getAnyKey() {\n+        return anyKey;\n+    }\n+\n+    public void setAnyKey(final Long anyKey) {\n+        this.anyKey = anyKey;\n+    }\n+\n     @XmlElementWrapper(name = \"recipients\")\n     @XmlElement(name = \"recipient\")\n     @JsonProperty(\"recipients\")"},{"sha":"fb8b048b147809a7c6e44bbf9ec788a147354498","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskQuery.java","status":"modified","additions":54,"deletions":10,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -33,29 +33,62 @@ public class TaskQuery extends AbstractQuery {\n \n     public static class Builder extends AbstractQuery.Builder<TaskQuery, Builder> {\n \n+        public Builder(final TaskType type) {\n+            super();\n+            getInstance().setType(type);\n+        }\n+\n         @Override\n         protected TaskQuery newInstance() {\n             return new TaskQuery();\n         }\n \n-        public Builder type(final TaskType type) {\n-            getInstance().setType(type);\n-            return this;\n+        public Builder resource(final String resource) {\n+            switch (getInstance().getType()) {\n+                case PROPAGATION:\n+                case PULL:\n+                case PUSH:\n+                    getInstance().setResource(resource);\n+                    return this;\n+\n+                default:\n+                    throw new IllegalArgumentException(\"resource not allowed for \" + getInstance().getType());\n+            }\n         }\n \n-        public Builder resource(final String resource) {\n-            getInstance().setResource(resource);\n-            return this;\n+        public Builder notification(final Long notification) {\n+            switch (getInstance().getType()) {\n+                case NOTIFICATION:\n+                    getInstance().setNotification(notification);\n+                    return this;\n+\n+                default:\n+                    throw new IllegalArgumentException(\"notification not allowed for \" + getInstance().getType());\n+            }\n         }\n \n         public Builder anyTypeKind(final AnyTypeKind anyTypeKind) {\n-            getInstance().setAnyTypeKind(anyTypeKind);\n-            return this;\n+            switch (getInstance().getType()) {\n+                case PROPAGATION:\n+                case NOTIFICATION:\n+                    getInstance().setAnyTypeKind(anyTypeKind);\n+                    return this;\n+\n+                default:\n+                    throw new IllegalArgumentException(\"anyTypeKind not allowed for \" + getInstance().getType());\n+            }\n         }\n \n         public Builder anyTypeKey(final Long anyTypeKey) {\n-            getInstance().setAnyTypeKey(anyTypeKey);\n-            return this;\n+            switch (getInstance().getType()) {\n+                case PROPAGATION:\n+                case NOTIFICATION:\n+                    getInstance().setAnyTypeKey(anyTypeKey);\n+                    return this;\n+\n+                default:\n+                    throw new IllegalArgumentException(\"anyTypeKey not allowed for \" + getInstance().getType());\n+            }\n         }\n \n         public Builder details(final boolean details) {\n@@ -77,6 +110,8 @@ public TaskQuery build() {\n \n     private String resource;\n \n+    private Long notification;\n+\n     private AnyTypeKind anyTypeKind;\n \n     private Long anyTypeKey;\n@@ -102,6 +137,15 @@ public void setResource(final String resource) {\n         this.resource = resource;\n     }\n \n+    public Long getNotification() {\n+        return notification;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_NOTIFICATION)\n+    public void setNotification(final Long notification) {\n+        this.notification = notification;\n+    }\n+\n     public AnyTypeKind getAnyTypeKind() {\n         return anyTypeKind;\n     }"},{"sha":"1753176405adab6d28aea2495f498d6f70ba7b92","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -30,6 +30,8 @@ public interface JAXRSService {\n \n     String PARAM_RESOURCE = \"resource\";\n \n+    String PARAM_NOTIFICATION = \"notification\";\n+\n     String PARAM_ANYTYPE_KIND = \"anyTypeKind\";\n \n     String PARAM_ANYTYPE_KEY = \"anyTypeKey\";"},{"sha":"515d440de326cdfeb1091ad6d29ef2256339f56a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":44,"deletions":31,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.core.logic.notification.NotificationJobDelegate;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n@@ -78,6 +79,9 @@ public class TaskLogic extends AbstractJobLogic<AbstractTaskTO> {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    @Autowired\n+    private NotificationDAO notificationDAO;\n+\n     @Autowired\n     private TaskDataBinder binder;\n \n@@ -143,49 +147,58 @@ public <T extends SchedTaskTO> T updateSchedTask(final SchedTaskTO taskTO) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n     public int count(\n-            final TaskType type, final String resource, final AnyTypeKind anyTypeKind, final Long anyTypeKey) {\n-\n-        return taskDAO.count(type, resourceDAO.find(resource), anyTypeKind, anyTypeKey);\n+            final TaskType type,\n+            final String resource,\n+            final Long notification,\n+            final AnyTypeKind anyTypeKind,\n+            final Long anyTypeKey) {\n+\n+        return taskDAO.count(\n+                type, resourceDAO.find(resource), notificationDAO.find(notification), anyTypeKind, anyTypeKey);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractTaskTO> List<T> list(\n-            final TaskType type, final String resource, final AnyTypeKind anyTypeKind, final Long anyTypeKey,\n-            final int page, final int size, final List<OrderByClause> orderByClauses, final boolean details) {\n-\n-        final TaskUtils taskUtils = taskUtilsFactory.getInstance(type);\n+            final TaskType type,\n+            final String resource,\n+            final Long notification,\n+            final AnyTypeKind anyTypeKind,\n+            final Long anyTypeKey,\n+            final int page,\n+            final int size,\n+            final List<OrderByClause> orderByClauses,\n+            final boolean details) {\n \n         return CollectionUtils.collect(taskDAO.findAll(\n-                type, resourceDAO.find(resource), anyTypeKind, anyTypeKey, page, size, orderByClauses),\n-                new Transformer<Task, T>() {\n+                type, resourceDAO.find(resource), notificationDAO.find(notification), anyTypeKind, anyTypeKey,\n+                page, size, orderByClauses), new Transformer<Task, T>() {\n \n             @Override\n             public T transform(final Task task) {\n-                return (T) binder.getTaskTO(task, taskUtils, details);\n+                return (T) binder.getTaskTO(task, taskUtilsFactory.getInstance(type), details);\n             }\n         }, new ArrayList<T>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n-    public <T extends AbstractTaskTO> T read(final Long taskKey, final boolean details) {\n-        Task task = taskDAO.find(taskKey);\n+    public <T extends AbstractTaskTO> T read(final Long key, final boolean details) {\n+        Task task = taskDAO.find(key);\n         if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskKey);\n+            throw new NotFoundException(\"Task \" + key);\n         }\n         return binder.getTaskTO(task, taskUtilsFactory.getInstance(task), details);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n-    public ExecTO execute(final Long taskKey, final Date startAt, final boolean dryRun) {\n-        Task task = taskDAO.find(taskKey);\n+    public ExecTO execute(final Long key, final Date startAt, final boolean dryRun) {\n+        Task task = taskDAO.find(key);\n         if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskKey);\n+            throw new NotFoundException(\"Task \" + key);\n         }\n-        TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n \n         ExecTO result = null;\n-        switch (taskUtils.getType()) {\n+        switch (taskUtilsFactory.getInstance(task).getType()) {\n             case PROPAGATION:\n                 TaskExec propExec = taskExecutor.execute((PropagationTask) task);\n                 result = binder.getExecTO(propExec);\n@@ -201,7 +214,7 @@ public ExecTO execute(final Long taskKey, final Date startAt, final boolean dryR\n             case PUSH:\n                 if (!((SchedTask) task).isActive()) {\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Scheduling);\n-                    sce.getElements().add(\"Task \" + taskKey + \" is not active\");\n+                    sce.getElements().add(\"Task \" + key + \" is not active\");\n                     throw sce;\n                 }\n \n@@ -242,10 +255,10 @@ public ExecTO execute(final Long taskKey, final Date startAt, final boolean dryR\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n-    public <T extends AbstractTaskTO> T delete(final Long taskKey) {\n-        Task task = taskDAO.find(taskKey);\n+    public <T extends AbstractTaskTO> T delete(final Long key) {\n+        Task task = taskDAO.find(key);\n         if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskKey);\n+            throw new NotFoundException(\"Task \" + key);\n         }\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n \n@@ -263,17 +276,17 @@ public <T extends AbstractTaskTO> T delete(final Long taskKey) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n-    public int countExecutions(final Long taskId) {\n-        return taskExecDAO.count(taskId);\n+    public int countExecutions(final Long key) {\n+        return taskExecDAO.count(key);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n     public List<ExecTO> listExecutions(\n-            final Long taskKey, final int page, final int size, final List<OrderByClause> orderByClauses) {\n+            final Long key, final int page, final int size, final List<OrderByClause> orderByClauses) {\n \n-        Task task = taskDAO.find(taskKey);\n+        Task task = taskDAO.find(key);\n         if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskKey);\n+            throw new NotFoundException(\"Task \" + key);\n         }\n \n         return CollectionUtils.collect(taskExecDAO.findAll(task, page, size, orderByClauses),\n@@ -311,12 +324,12 @@ public ExecTO deleteExecution(final Long execKey) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n     public BulkActionResult deleteExecutions(\n-            final Long taskKey,\n+            final Long key,\n             final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n \n-        Task task = taskDAO.find(taskKey);\n+        Task task = taskDAO.find(key);\n         if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskKey);\n+            throw new NotFoundException(\"Task \" + key);\n         }\n \n         BulkActionResult result = new BulkActionResult();\n@@ -326,7 +339,7 @@ public BulkActionResult deleteExecutions(\n                 taskExecDAO.delete(exec);\n                 result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.SUCCESS);\n             } catch (Exception e) {\n-                LOG.error(\"Error deleting execution {} of task {}\", exec.getKey(), taskKey, e);\n+                LOG.error(\"Error deleting execution {} of task {}\", exec.getKey(), key, e);\n                 result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.FAILURE);\n             }\n         }"},{"sha":"19eb2e4e2e35612e3d7ccf14578ab923cc66f4ea","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n \n@@ -36,10 +37,11 @@ public interface TaskDAO extends DAO<Task, Long> {\n     <T extends Task> List<T> findAll(TaskType type);\n \n     <T extends Task> List<T> findAll(\n-            TaskType type, ExternalResource resource, AnyTypeKind anyTypeKind, Long anyKey,\n+            TaskType type, ExternalResource resource, Notification notification, AnyTypeKind anyTypeKind, Long anyKey,\n             int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n \n-    int count(TaskType type, ExternalResource resource, AnyTypeKind anyTypeKind, Long anyKey);\n+    int count(\n+            TaskType type, ExternalResource resource, Notification notification, AnyTypeKind anyTypeKind, Long anyKey);\n \n     <T extends Task> T save(T task);\n "},{"sha":"92fb6d2f1056b94b3cd4c1828623835bb259b1ab","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/NotificationTask.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FNotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FNotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FNotificationTask.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -19,10 +19,24 @@\n package org.apache.syncope.core.persistence.api.entity.task;\n \n import java.util.Set;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.core.persistence.api.entity.Notification;\n \n public interface NotificationTask extends Task {\n \n+    Notification getNotification();\n+\n+    void setNotification(Notification notification);\n+\n+    Long getAnyKey();\n+\n+    void setAnyKey(Long anyKey);\n+\n+    AnyTypeKind getAnyTypeKind();\n+\n+    void setAnyTypeKind(AnyTypeKind anyTypeKind);\n+\n     void setSender(String sender);\n \n     String getSender();"},{"sha":"fa4567e733bc538639db71c133dc40b6cc648a61","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java","status":"modified","additions":27,"deletions":1,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -18,18 +18,29 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n+import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.jpa.entity.JPANotification;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPANotificationDAO extends AbstractDAO<Notification, Long> implements NotificationDAO {\n \n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n     @Transactional(readOnly = true)\n     @Override\n     public Notification find(final Long key) {\n@@ -61,6 +72,21 @@ public Notification save(final Notification notification) {\n \n     @Override\n     public void delete(final Long key) {\n-        entityManager().remove(find(key));\n+        Notification notification = find(key);\n+        if (notification == null) {\n+            return;\n+        }\n+\n+        IterableUtils.forEach(taskDAO.findAll(\n+                TaskType.NOTIFICATION, null, notification, null, null, -1, -1, Collections.<OrderByClause>emptyList()),\n+                new Closure<Task>() {\n+\n+            @Override\n+            public void execute(final Task input) {\n+                delete(input.getKey());\n+            }\n+        });\n+\n+        entityManager().remove(notification);\n     }\n }"},{"sha":"aa98a22e6d74512a1fad7b74cd93a4eb3af9aad9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTask;\n@@ -115,12 +116,13 @@ public <T extends Task> List<T> findToExec(final TaskType type) {\n     @Transactional(readOnly = true)\n     @Override\n     public <T extends Task> List<T> findAll(final TaskType type) {\n-        return findAll(type, null, null, null, -1, -1, Collections.<OrderByClause>emptyList());\n+        return findAll(type, null, null, null, null, -1, -1, Collections.<OrderByClause>emptyList());\n     }\n \n     private StringBuilder buildFindAllQuery(\n             final TaskType type,\n             final ExternalResource resource,\n+            final Notification notification,\n             final AnyTypeKind anyTypeKind,\n             final Long anyKey) {\n \n@@ -139,6 +141,9 @@ private StringBuilder buildFindAllQuery(\n         if (resource != null) {\n             queryString.append(\"AND t.resource=:resource \");\n         }\n+        if (notification != null) {\n+            queryString.append(\"AND t.notification=:notification \");\n+        }\n         if (anyTypeKind != null && anyKey != null) {\n             queryString.append(\"AND t.anyTypeKind=:anyTypeKind AND t.anyKey=:anyKey \");\n         }\n@@ -171,19 +176,23 @@ private String toOrderByStatement(\n     public <T extends Task> List<T> findAll(\n             final TaskType type,\n             final ExternalResource resource,\n+            final Notification notification,\n             final AnyTypeKind anyTypeKind,\n             final Long anyKey,\n             final int page,\n             final int itemsPerPage,\n             final List<OrderByClause> orderByClauses) {\n \n-        StringBuilder queryString = buildFindAllQuery(type, resource, anyTypeKind, anyKey).\n+        StringBuilder queryString = buildFindAllQuery(type, resource, notification, anyTypeKind, anyKey).\n                 append(toOrderByStatement(getEntityReference(type), orderByClauses));\n \n         Query query = entityManager().createQuery(queryString.toString());\n         if (resource != null) {\n             query.setParameter(\"resource\", resource);\n         }\n+        if (notification != null) {\n+            query.setParameter(\"notification\", notification);\n+        }\n         if (anyTypeKind != null && anyKey != null) {\n             query.setParameter(\"anyTypeKind\", anyTypeKind);\n             query.setParameter(\"anyKey\", anyKey);\n@@ -204,16 +213,20 @@ public <T extends Task> List<T> findAll(\n     public int count(\n             final TaskType type,\n             final ExternalResource resource,\n+            final Notification notification,\n             final AnyTypeKind anyTypeKind,\n             final Long anyKey) {\n \n-        StringBuilder queryString = buildFindAllQuery(type, resource, anyTypeKind, anyKey);\n+        StringBuilder queryString = buildFindAllQuery(type, resource, notification, anyTypeKind, anyKey);\n \n         Query query = entityManager().createQuery(StringUtils.replaceOnce(\n                 queryString.toString(), \"SELECT t\", \"SELECT COUNT(t)\"));\n         if (resource != null) {\n             query.setParameter(\"resource\", resource);\n         }\n+        if (notification != null) {\n+            query.setParameter(\"notification\", notification);\n+        }\n         if (anyTypeKind != null && anyKey != null) {\n             query.setParameter(\"anyTypeKind\", anyTypeKind);\n             query.setParameter(\"anyKey\", anyKey);\n@@ -246,7 +259,7 @@ public void delete(final Task task) {\n     @Override\n     public void deleteAll(final ExternalResource resource, final TaskType type) {\n         IterableUtils.forEach(\n-                findAll(type, resource, null, null, -1, -1, Collections.<OrderByClause>emptyList()),\n+                findAll(type, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()),\n                 new Closure<Task>() {\n \n             @Override"},{"sha":"83cc170c846843811e072ee76b9083fd5e5aa224","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPANotificationTask.java","status":"modified","additions":43,"deletions":6,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -32,24 +32,37 @@\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n+import org.apache.syncope.core.persistence.jpa.entity.JPANotification;\n \n @Entity\n @DiscriminatorValue(\"NotificationTask\")\n public class JPANotificationTask extends AbstractTask implements NotificationTask {\n \n     private static final long serialVersionUID = 95731573485279180L;\n \n+    @NotNull\n+    @ManyToOne\n+    private JPANotification notification;\n+\n+    @Enumerated(EnumType.STRING)\n+    private AnyTypeKind anyTypeKind;\n+\n+    private Long anyKey;\n+\n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"address\")\n     @CollectionTable(name = \"NotificationTask_recipients\",\n             joinColumns =\n             @JoinColumn(name = \"notificationTask_id\", referencedColumnName = \"id\"))\n-    private Set<String> recipients;\n+    private Set<String> recipients = new HashSet<>();\n \n     @NotNull\n     private String sender;\n@@ -68,17 +81,41 @@ public class JPANotificationTask extends AbstractTask implements NotificationTas\n     @Basic\n     @Min(0)\n     @Max(1)\n-    private Integer executed;\n+    private Integer executed = getBooleanAsInteger(false);\n \n     @Enumerated(EnumType.STRING)\n     @NotNull\n     private TraceLevel traceLevel;\n \n-    public JPANotificationTask() {\n-        super();\n+    @Override\n+    public Notification getNotification() {\n+        return notification;\n+    }\n+\n+    @Override\n+    public void setNotification(final Notification notification) {\n+        checkType(notification, JPANotification.class);\n+        this.notification = (JPANotification) notification;\n+    }\n+\n+    @Override\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n+    }\n+\n+    @Override\n+    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n+        this.anyTypeKind = anyTypeKind;\n+    }\n+\n+    @Override\n+    public Long getAnyKey() {\n+        return anyKey;\n+    }\n \n-        recipients = new HashSet<>();\n-        executed = getBooleanAsInteger(false);\n+    @Override\n+    public void setAnyKey(final Long anyKey) {\n+        this.anyKey = anyKey;\n     }\n \n     @Override"},{"sha":"d0675db048fa28e1fbf65b72a5730b87ca08e277","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -68,7 +68,7 @@ public void findWithoutExecs() {\n     @Test\n     public void findPaginated() {\n         List<Task> tasks = taskDAO.findAll(\n-                TaskType.PROPAGATION, null, null, null, 1, 2, Collections.<OrderByClause>emptyList());\n+                TaskType.PROPAGATION, null, null, null, null, 1, 2, Collections.<OrderByClause>emptyList());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.size());\n \n@@ -77,7 +77,7 @@ public void findPaginated() {\n         }\n \n         tasks = taskDAO.findAll(\n-                TaskType.PROPAGATION, null, null, null, 2, 2, Collections.<OrderByClause>emptyList());\n+                TaskType.PROPAGATION, null, null, null, null, 2, 2, Collections.<OrderByClause>emptyList());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.size());\n \n@@ -86,11 +86,11 @@ public void findPaginated() {\n         }\n \n         tasks = taskDAO.findAll(\n-                TaskType.PROPAGATION, null, null, null, 1000, 2, Collections.<OrderByClause>emptyList());\n+                TaskType.PROPAGATION, null, null, null, null, 1000, 2, Collections.<OrderByClause>emptyList());\n         assertNotNull(tasks);\n         assertTrue(tasks.isEmpty());\n \n-        assertEquals(5, taskDAO.count(TaskType.PROPAGATION, null, null, null));\n+        assertEquals(5, taskDAO.count(TaskType.PROPAGATION, null, null, null, null));\n     }\n \n     @Test\n@@ -144,7 +144,7 @@ public void delete() {\n         resource = resourceDAO.find(resource.getKey());\n         assertNotNull(resource);\n         assertFalse(taskDAO.findAll(\n-                TaskType.PROPAGATION, resource, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n+                TaskType.PROPAGATION, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n                 contains(task));\n     }\n }"},{"sha":"8d94adb090b7eb7bd647b102529a6bfe41509c66","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -224,7 +224,7 @@ public void delete() {\n \n         // Get tasks\n         List<PropagationTask> propagationTasks = taskDAO.findAll(\n-                TaskType.PROPAGATION, resource, null, null, -1, -1, Collections.<OrderByClause>emptyList());\n+                TaskType.PROPAGATION, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList());\n         assertFalse(propagationTasks.isEmpty());\n \n         // delete resource"},{"sha":"715188d6c2ef8dd49569c68adda79401d73d0d7a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -112,7 +112,7 @@ public void save() {\n \n         resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertTrue(taskDAO.findAll(\n-                TaskType.PROPAGATION, resource, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n+                TaskType.PROPAGATION, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n                 contains(task));\n     }\n "},{"sha":"11cd7df6603cf754eecb9d96123c4f709739b9a0","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -648,7 +648,7 @@ under the License.\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   \n-  <!-- The following three resources have been added to verify the issue PULLOPE-68 -->\n+  <!-- The following three resources have been added to verify the issue SYNCOPE-68 -->\n   <ExternalResource name=\"ws-target-resource-nopropagation2\" connector_id=\"103\" \n                     enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" pullTraceLevel=\"ALL\"\n@@ -665,15 +665,15 @@ under the License.\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n                     \n-  <!-- External resource for issue PULLOPE-230 -->\n+  <!-- External resource for issue SYNCOPE-230 -->\n   <ExternalResource name=\"resource-db-pull\" connector_id=\"107\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" pullTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n                     enforceMandatoryCondition=\"0\" \n                     overrideCapabilities=\"0\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n                     \n-  <!-- External resource for issue PULLOPE-267 -->\n+  <!-- External resource for issue SYNCOPE-267 -->\n   <ExternalResource name=\"resource-db-virattr\" connector_id=\"107\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" pullTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n                     enforceMandatoryCondition=\"0\" \n@@ -688,7 +688,7 @@ under the License.\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n \n-  <!-- Use resource-testdb for passthrough authentication (PULLOPE-164) -->\n+  <!-- Use resource-testdb for passthrough authentication (SYNCOPE-164) -->\n   <AccountPolicy_ExternalResource accountPolicy_id=\"5\" resource_name=\"resource-testdb\"/>\n     \n   <SyncopeUser_ExternalResource user_id=\"1\" resource_name=\"resource-testdb2\"/>\n@@ -998,8 +998,6 @@ under the License.\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"ctype\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}]}'/>\n   <AnyTemplatePullTask id=\"72\" pullTask_id=\"7\" anyType_name=\"GROUP\"\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"plainAttrs\":[]}'/>\n-  <Task DTYPE=\"NotificationTask\" id=\"8\" sender=\"admin@prova.org\" subject=\"Notification for PULLOPE-81\" \n-        textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <Task DTYPE=\"PullTask\" id=\"9\" name=\"TestDB2 Task\" resource_name=\"resource-testdb2\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" pullStatus=\"1\" pullMode=\"FULL_RECONCILIATION\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\"/>\n@@ -1194,22 +1192,24 @@ $$ }&#10;\n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template_name=\"requestPasswordReset\" \n                 traceLevel=\"FAILURES\"/> \n   <AnyAbout id=\"1\" anyType_name=\"USER\" notification_id=\"1\" filter=\"token!=$null\"/>\n-  <Notification_events Notification_id=\"1\" event=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n+  <Notification_events notification_id=\"1\" event=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n+  <Task DTYPE=\"NotificationTask\" id=\"8\" notification_id=\"1\"\n+        sender=\"admin@prova.org\" subject=\"Notification for PULLOPE-81\" \n+        textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n+  <NotificationTask_recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>  \n   \n   <Notification id=\"2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template_name=\"confirmPasswordReset\" \n                 traceLevel=\"FAILURES\"/> \n-  <Notification_events Notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n+  <Notification_events notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n \n   <Notification id=\"10\" sender=\"test@syncope.apache.org\" subject=\"Test subject\" template_name=\"test\" selfAsRecipient=\"0\" \n                 traceLevel=\"FAILURES\"\n                 recipientsFIQL=\"$groups==7\"\n                 recipientAttrType=\"UserPlainSchema\" recipientAttrName=\"email\" active=\"1\"/>\n   <AnyAbout id=\"10\" anyType_name=\"USER\" notification_id=\"10\" filter=\"fullname==*o*;fullname==*i*\"/>\n-  <Notification_events Notification_id=\"10\" event=\"[CUSTOM]:[]:[]:[unexisting1]:[FAILURE]\"/>\n-  <Notification_events Notification_id=\"10\" event=\"[CUSTOM]:[]:[]:[unexisting2]:[SUCCESS]\"/>\n-    \n-  <NotificationTask_recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>  \n+  <Notification_events notification_id=\"10\" event=\"[CUSTOM]:[]:[]:[unexisting1]:[FAILURE]\"/>\n+  <Notification_events notification_id=\"10\" event=\"[CUSTOM]:[]:[]:[unexisting2]:[SUCCESS]\"/>\n \n   <ReportTemplate name=\"empty\"/>  \n   <ReportTemplate name=\"sample\""},{"sha":"ce1f0de4d36ee2034c7932e7bd6c6b90edd83c94","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":6,"deletions":17,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n@@ -79,7 +80,8 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n     private static final String[] IGNORE_TASK_PROPERTIES = {\n-        \"destinationRealm\", \"templates\", \"filters\", \"executions\", \"resource\", \"matchingRule\", \"unmatchingRule\" };\n+        \"destinationRealm\", \"templates\", \"filters\", \"executions\", \"resource\", \"matchingRule\", \"unmatchingRule\",\n+        \"notification\" };\n \n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"key\", \"task\" };\n \n@@ -318,27 +320,15 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n \n         switch (taskUtils.getType()) {\n             case PROPAGATION:\n-                if (!(task instanceof PropagationTask)) {\n-                    throw new IllegalArgumentException(\"taskUtils is type Propagation but task is not PropagationTask: \"\n-                            + task.getClass().getName());\n-                }\n                 ((PropagationTaskTO) taskTO).setResource(((PropagationTask) task).getResource().getKey());\n                 ((PropagationTaskTO) taskTO).setAttributes(((PropagationTask) task).getSerializedAttributes());\n                 break;\n \n             case SCHEDULED:\n-                if (!(task instanceof SchedTask)) {\n-                    throw new IllegalArgumentException(\"taskUtils is type Sched but task is not SchedTask: \"\n-                            + task.getClass().getName());\n-                }\n                 setExecTime((SchedTaskTO) taskTO, task);\n                 break;\n \n             case PULL:\n-                if (!(task instanceof PullTask)) {\n-                    throw new IllegalArgumentException(\"taskUtils is type Pull but task is not PullTask: \"\n-                            + task.getClass().getName());\n-                }\n                 setExecTime((SchedTaskTO) taskTO, task);\n                 ((PullTaskTO) taskTO).setDestinationRealm(((PullTask) task).getDestinatioRealm().getFullPath());\n                 ((PullTaskTO) taskTO).setResource(((PullTask) task).getResource().getKey());\n@@ -353,10 +343,6 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n                 break;\n \n             case PUSH:\n-                if (!(task instanceof PushTask)) {\n-                    throw new IllegalArgumentException(\"taskUtils is type Push but task is not PushTask: \"\n-                            + task.getClass().getName());\n-                }\n                 setExecTime((SchedTaskTO) taskTO, task);\n                 ((PushTaskTO) taskTO).setResource(((PushTask) task).getResource().getKey());\n                 ((PushTaskTO) taskTO).setMatchingRule(((PushTask) task).getMatchingRule() == null\n@@ -370,6 +356,9 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n                 break;\n \n             case NOTIFICATION:\n+                ((NotificationTaskTO) taskTO).setNotification(((NotificationTask) task).getNotification().getKey());\n+                ((NotificationTaskTO) taskTO).setAnyTypeKind(((NotificationTask) task).getAnyTypeKind());\n+                ((NotificationTaskTO) taskTO).setAnyKey(((NotificationTask) task).getAnyKey());\n                 if (((NotificationTask) task).isExecuted() && StringUtils.isBlank(taskTO.getLatestExecStatus())) {\n                     taskTO.setLatestExecStatus(\"[EXECUTED]\");\n                 }"},{"sha":"27a73b6fa14ba4d2609f21f8253ac1ce67898003","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -216,6 +216,11 @@ private NotificationTask getNotificationTask(\n         jexlVars.put(\"events\", notification.getEvents());\n \n         NotificationTask task = entityFactory.newEntity(NotificationTask.class);\n+        task.setNotification(notification);\n+        if (any != null) {\n+            task.setAnyKey(any.getKey());\n+            task.setAnyTypeKind(any.getType().getKind());\n+        }\n         task.setTraceLevel(notification.getTraceLevel());\n         task.getRecipients().addAll(recipientEmails);\n         task.setSender(notification.getSender());"},{"sha":"083b49e185e3dc4740aeaf66341e4164478a9fed","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -80,6 +80,7 @@ public <T extends AbstractTaskTO> PagedResult<T> list(final TaskQuery query) {\n                 logic.list(\n                         query.getType(),\n                         query.getResource(),\n+                        query.getNotification(),\n                         query.getAnyTypeKind(),\n                         query.getAnyTypeKey(),\n                         query.getPage(),\n@@ -91,6 +92,7 @@ public <T extends AbstractTaskTO> PagedResult<T> list(final TaskQuery query) {\n                 logic.count(\n                         query.getType(),\n                         query.getResource(),\n+                        query.getNotification(),\n                         query.getAnyTypeKind(),\n                         query.getAnyTypeKey()));\n     }"},{"sha":"99fadcfa13a0dba24a478cfb72c1b02ce7cd8f5a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -162,7 +162,7 @@ protected void execProvisioningTasks(final TaskService taskService,\n \n     protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n         PagedResult<NotificationTaskTO> tasks =\n-                taskService.list(new TaskQuery.Builder().type(TaskType.NOTIFICATION).build());\n+                taskService.list(new TaskQuery.Builder(TaskType.NOTIFICATION).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n "},{"sha":"65193251eb6945ee42a65105f9a3fc2c35c0a8e7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -47,8 +47,10 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.core.logic.notification.NotificationJob;\n import org.apache.syncope.fit.core.reference.TestNotificationRecipientsProvider;\n@@ -139,6 +141,7 @@ public void notifyByMail() throws Exception {\n         String recipient = createNotificationTask(true, true, TraceLevel.ALL, sender, subject);\n         NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n         assertNotNull(taskTO);\n+        assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         execNotificationTask(taskService, taskTO.getKey(), 50);\n@@ -188,6 +191,7 @@ public void notifyByMailWithRetry() throws Exception {\n             createNotificationTask(true, true, TraceLevel.ALL, sender, subject);\n             NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n             assertNotNull(taskTO);\n+            assertNotNull(taskTO.getNotification());\n             assertTrue(taskTO.getExecutions().isEmpty());\n \n             // 4. verify notification could not be delivered\n@@ -214,6 +218,7 @@ public void issueSYNCOPE81() {\n         createNotificationTask(true, true, TraceLevel.ALL, sender, \"Test notification\");\n         NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n         assertNotNull(taskTO);\n+        assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         // generate an execution in order to verify the deletion of a notification task with one or more executions\n@@ -235,6 +240,7 @@ public void issueSYNCOPE86() {\n         // 2. get NotificationTaskTO for user just created\n         NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n         assertNotNull(taskTO);\n+        assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         try {\n@@ -259,6 +265,7 @@ public void issueSYNCOPE192() throws Exception {\n         String recipient = createNotificationTask(true, true, TraceLevel.NONE, sender, subject);\n         NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n         assertNotNull(taskTO);\n+        assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         taskService.execute(new ExecuteQuery.Builder().key(taskTO.getKey()).build());\n@@ -286,6 +293,7 @@ public void issueSYNCOPE445() throws Exception {\n                 true, true, TraceLevel.ALL, sender, subject, \"syncope445@syncope.apache.org\");\n         NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n         assertNotNull(taskTO);\n+        assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         execNotificationTask(taskService, taskTO.getKey(), 50);\n@@ -339,9 +347,15 @@ public void issueSYNCOPE446() throws Exception {\n         // 3. verify\n         NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n         assertNotNull(taskTO);\n+        assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getRecipients().containsAll(\n                 new TestNotificationRecipientsProvider().provideRecipients(null)));\n \n+        NotificationTaskTO foundViaList = taskService.<NotificationTaskTO>list(\n+                new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification.getKey()).build()).\n+                getResult().get(0);\n+        assertEquals(taskTO, foundViaList);\n+\n         execNotificationTask(taskService, taskTO.getKey(), 50);\n \n         assertTrue(verifyMail(sender, subject, MAIL_ADDRESS));\n@@ -357,8 +371,13 @@ public void issueSYNCOPE492() throws Exception {\n         assertNull(findNotificationTaskBySender(sender));\n     }\n \n-    private String createNotificationTask(final boolean active, final boolean includeAbout, final TraceLevel traceLevel,\n-            final String sender, final String subject, final String... staticRecipients) {\n+    private String createNotificationTask(\n+            final boolean active,\n+            final boolean includeAbout,\n+            final TraceLevel traceLevel,\n+            final String sender,\n+            final String subject,\n+            final String... staticRecipients) {\n \n         // 1. Create notification\n         NotificationTO notification = new NotificationTO();"},{"sha":"6a19e940e72d612adc018519338eb183c20c53db","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -45,7 +45,7 @@ public class PropagationTaskITCase extends AbstractTaskITCase {\n     @Test\n     public void paginatedList() {\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getResult().size());\n \n@@ -54,7 +54,7 @@ public void paginatedList() {\n         }\n \n         tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(2).size(2).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(2).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getPage());\n         assertEquals(2, tasks.getResult().size());\n@@ -64,7 +64,7 @@ public void paginatedList() {\n         }\n \n         tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1000).size(2).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1000).size(2).build());\n         assertNotNull(tasks);\n         assertTrue(tasks.getResult().isEmpty());\n     }\n@@ -80,15 +80,15 @@ public void read() {\n     @Test\n     public void bulkAction() {\n         PagedResult<PropagationTaskTO> before = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).build());\n \n         // create user with testdb resource\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         createUser(userTO);\n \n         List<PropagationTaskTO> after = new ArrayList<>(\n-                taskService.<PropagationTaskTO>list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).\n+                taskService.<PropagationTaskTO>list(new TaskQuery.Builder(TaskType.PROPAGATION).build()).\n                 getResult());\n         after.removeAll(before.getResult());\n         assertFalse(after.isEmpty());\n@@ -102,7 +102,7 @@ public void bulkAction() {\n \n         taskService.bulk(bulkAction);\n \n-        assertFalse(taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult().\n+        assertFalse(taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).build()).getResult().\n                 containsAll(after));\n     }\n \n@@ -120,13 +120,13 @@ public void issueSYNCOPE741() {\n \n         // check list\n         PagedResult<AbstractTaskTO> tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).details(false).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(2).details(false).build());\n         for (AbstractTaskTO item : tasks.getResult()) {\n             assertTrue(item.getExecutions().isEmpty());\n         }\n \n         tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).details(true).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(2).details(true).build());\n         for (AbstractTaskTO item : tasks.getResult()) {\n             assertFalse(item.getExecutions().isEmpty());\n         }"},{"sha":"e386c0db95d327cb5a8150c19272400c462e29ff","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -102,8 +102,7 @@ public void getPullActionsClasses() {\n \n     @Test\n     public void list() {\n-        PagedResult<PullTaskTO> tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PULL).build());\n+        PagedResult<PullTaskTO> tasks = taskService.list(new TaskQuery.Builder(TaskType.PULL).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof PullTaskTO)) {"},{"sha":"15a87f7b1f17e979bbbe851fbc9eba014b5ac6dd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -80,7 +80,7 @@ public void read() {\n \n     @Test\n     public void list() {\n-        PagedResult<PushTaskTO> tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PUSH).build());\n+        PagedResult<PushTaskTO> tasks = taskService.list(new TaskQuery.Builder(TaskType.PUSH).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof PushTaskTO)) {"},{"sha":"b847a067789478f53e4284f5cc8a241497a4d813","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -63,7 +63,7 @@ public void getJobClasses() {\n     @Test\n     public void list() {\n         PagedResult<SchedTaskTO> tasks =\n-                taskService.list(new TaskQuery.Builder().type(TaskType.SCHEDULED).build());\n+                taskService.list(new TaskQuery.Builder(TaskType.SCHEDULED).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SchedTaskTO) || task instanceof PullTaskTO || task instanceof PushTaskTO) {"},{"sha":"79ec811a39c536fe87006d93a084e2fee1a2057e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b84ceaa3479f27d0655846df5ab46520271d240/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=1b84ceaa3479f27d0655846df5ab46520271d240","patch":"@@ -143,7 +143,7 @@ public static UserTO getSampleTO(final String email) {\n     public void createUserWithNoPropagation() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -158,7 +158,7 @@ public void createUserWithNoPropagation() {\n \n         // get the new task list\n         tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -347,7 +347,7 @@ public void createWithException() {\n     public void create() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -387,7 +387,7 @@ public void create() {\n         assertNotNull(newUserTO.getCreationDate());\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -682,7 +682,7 @@ public void update() {\n     @Test\n     public void updatePasswordOnly() {\n         int beforeTasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n         UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n@@ -700,7 +700,7 @@ public void updatePasswordOnly() {\n         assertNotNull(userTO.getChangePwdDate());\n \n         int afterTasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n         assertTrue(beforeTasks < afterTasks);\n@@ -711,7 +711,7 @@ public void updatePasswordOnly() {\n     public void verifyTaskRegistration() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -730,7 +730,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -754,7 +754,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();\n@@ -774,7 +774,7 @@ public void verifyTaskRegistration() {\n         userService.delete(userTO.getKey());\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();"}]}