{"sha":"c14a20d7422805fe5b93e40915722e3e9474ddd2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMxNGEyMGQ3NDIyODA1ZmU1YjkzZTQwOTE1NzIyZTNlOTQ3NGRkZDI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-24T11:47:58Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-24T11:47:58Z"},"message":"[SYNCOPE-696] Implementation provided, some clean up","tree":{"sha":"a3437d16eb7166095eb18e543a585d146afd715c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a3437d16eb7166095eb18e543a585d146afd715c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c14a20d7422805fe5b93e40915722e3e9474ddd2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c14a20d7422805fe5b93e40915722e3e9474ddd2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c14a20d7422805fe5b93e40915722e3e9474ddd2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c14a20d7422805fe5b93e40915722e3e9474ddd2/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"271052a88e7a24e6391cc2fd6e53abc0aa3a3434","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/271052a88e7a24e6391cc2fd6e53abc0aa3a3434","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/271052a88e7a24e6391cc2fd6e53abc0aa3a3434"}],"stats":{"total":835,"additions":523,"deletions":312},"files":[{"sha":"def8f5077dc60279c0606849bcfc3ba541361c17","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -28,7 +28,6 @@\n import javax.xml.transform.TransformerException;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.util.XMLUtils;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -94,7 +93,7 @@ public void execute() {\n         } else if (list) {\n             LOG.debug(\"- report list command\");\n             try {\n-                for (ReportTO reportTO : reportService.list(SyncopeClient.getListQueryBuilder().build()).getResult()) {\n+                for (ReportTO reportTO : reportService.list()) {\n                     System.out.println(reportTO);\n                 }\n             } catch (final SyncopeClientException ex) {"},{"sha":"95f3bab58a1fd3b9841f107b6fece9d737c76118","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":1,"deletions":17,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -20,11 +20,9 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.service.ReportService;\n-import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -37,21 +35,7 @@ public ReportTO read(final Long reportId) {\n     }\n \n     public List<ReportTO> list() {\n-        return getService(ReportService.class).\n-                list(SyncopeClient.getListQueryBuilder().build()).\n-                getResult();\n-    }\n-\n-    public List<ReportTO> list(final int page, final int size, final SortParam<String> sort) {\n-        return getService(ReportService.class).\n-                list(SyncopeClient.getListQueryBuilder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n-                getResult();\n-    }\n-\n-    public int count() {\n-        return getService(ReportService.class).\n-                list(SyncopeClient.getListQueryBuilder().page(1).size(1).build()).\n-                getTotalCount();\n+        return getService(ReportService.class).list();\n     }\n \n     public void create(final ReportTO reportTO) {"},{"sha":"974b78c50d5709f82ce9cbb0856e263c304db290","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -62,7 +62,7 @@ public List<String> getPushActionsClasses() {\n      */\n     public int count(final String kind) {\n         return getService(TaskService.class).\n-                list(TaskType.fromString(kind), SyncopeClient.getListQueryBuilder().page(1).size(1).build()).\n+                list(TaskType.fromString(kind), SyncopeClient.getTaskQueryBuilder().page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n@@ -71,7 +71,7 @@ public <T extends AbstractTaskTO> List<T> list(final Class<T> reference,\n             final int page, final int size, final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n-                list(getTaskType(reference), SyncopeClient.getListQueryBuilder().page(page).size(size).\n+                list(getTaskType(reference), SyncopeClient.getTaskQueryBuilder().page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }"},{"sha":"9717d53a886b8cb1ee8f8ff85c0cb2d6b7315074","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":16,"deletions":5,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -31,10 +31,11 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.cxf.transport.http.URLConnectionHTTPConduit;\n-import org.apache.syncope.client.lib.builders.ListQueryBuilder;\n+import org.apache.syncope.client.lib.builders.AnyQueryBuilder;\n import org.apache.syncope.client.lib.builders.AnyListQueryBuilder;\n import org.apache.syncope.client.lib.builders.AnySearchQueryBuilder;\n import org.apache.syncope.client.lib.builders.ConnObjectTOListQueryBuilder;\n+import org.apache.syncope.client.lib.builders.TaskQueryBuilder;\n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n@@ -110,13 +111,23 @@ public static OrderByClauseBuilder getOrderByClauseBuilder() {\n     }\n \n     /**\n-     * Returns a new instance of {@link ListQueryBuilder}, for assisted building of some service's {@code list()}\n+     * Returns a new instance of {@link TaskQueryBuilder}, for assisted building of some service's {@code list()}\n      * arguments.\n      *\n-     * @return default instance of {@link ListQueryBuilder}\n+     * @return default instance of {@link AnyQueryBuilder}\n      */\n-    public static ListQueryBuilder getListQueryBuilder() {\n-        return new ListQueryBuilder();\n+    public static TaskQueryBuilder getTaskQueryBuilder() {\n+        return new TaskQueryBuilder();\n+    }\n+\n+    /**\n+     * Returns a new instance of {@link AnyQueryBuilder}, for assisted building of some service's {@code list()}\n+     * arguments.\n+     *\n+     * @return default instance of {@link AnyQueryBuilder}\n+     */\n+    public static AnyQueryBuilder getAnyQueryBuilder() {\n+        return new AnyQueryBuilder();\n     }\n \n     /**"},{"sha":"4c615545daa08b7f6d408f75666a26914bb7dbde","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/AbstractQueryBuilder.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAbstractQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAbstractQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAbstractQueryBuilder.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.builders;\n+\n+import org.apache.syncope.common.rest.api.beans.AbstractQuery;\n+\n+public abstract class AbstractQueryBuilder<Q extends AbstractQuery, B extends AbstractQueryBuilder<Q, B>> {\n+\n+    private Q instance;\n+\n+    protected abstract Q newInstance();\n+\n+    protected Q getInstance() {\n+        if (instance == null) {\n+            instance = newInstance();\n+        }\n+        return instance;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public B page(final Integer page) {\n+        getInstance().setPage(page);\n+        return (B) this;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public B size(final Integer size) {\n+        getInstance().setSize(size);\n+        return (B) this;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public B orderBy(final String orderBy) {\n+        getInstance().setOrderBy(orderBy);\n+        return (B) this;\n+    }\n+\n+    public Q build() {\n+        return getInstance();\n+    }\n+}"},{"sha":"da069cc63612b2bce6a048f042c3866251acabfb","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/AnyListQueryBuilder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyListQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyListQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyListQueryBuilder.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.client.lib.builders;\n \n import java.util.ArrayList;\n-import org.apache.syncope.common.rest.api.beans.ListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n \n-public class AnyListQueryBuilder extends ListQueryBuilder {\n+public class AnyListQueryBuilder extends AnyQueryBuilder {\n \n     private final AnyListQuery instance = new AnyListQuery();\n \n@@ -57,7 +57,7 @@ public AnyListQueryBuilder realm(final String realm) {\n \n     @Override\n     public AnyListQuery build() {\n-        ListQuery lq = super.build();\n+        AnyQuery lq = super.build();\n         instance.setPage(lq.getPage());\n         instance.setSize(lq.getSize());\n         instance.setOrderBy(lq.getOrderBy());"},{"sha":"ad5457ef37f272e211529dbbc261dbfa7583c720","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/AnyQueryBuilder.java","status":"renamed","additions":17,"deletions":22,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyQueryBuilder.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -18,37 +18,32 @@\n  */\n package org.apache.syncope.client.lib.builders;\n \n-import org.apache.syncope.common.rest.api.beans.ListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n \n-public class ListQueryBuilder {\n+public class AnyQueryBuilder extends AbstractQueryBuilder<AnyQuery, AnyQueryBuilder> {\n \n-    private final ListQuery instance = new ListQuery();\n-\n-    public ListQueryBuilder page(final Integer page) {\n-        instance.setPage(page);\n-\n-        return this;\n+    @Override\n+    protected AnyQuery newInstance() {\n+        return new AnyQuery();\n     }\n \n-    public ListQueryBuilder size(final Integer size) {\n-        instance.setSize(size);\n-\n-        return this;\n+    @Override\n+    public AnyQueryBuilder page(final Integer page) {\n+        return AnyQueryBuilder.class.cast(super.page(page));\n     }\n \n-    public ListQueryBuilder orderBy(final String orderBy) {\n-        instance.setOrderBy(orderBy);\n-\n-        return this;\n+    @Override\n+    public AnyQueryBuilder size(final Integer size) {\n+        return AnyQueryBuilder.class.cast(super.size(size));\n     }\n \n-    public ListQueryBuilder details(final boolean details) {\n-        instance.setDetails(details);\n-\n-        return this;\n+    @Override\n+    public AnyQueryBuilder orderBy(final String orderBy) {\n+        return AnyQueryBuilder.class.cast(super.orderBy(orderBy));\n     }\n \n-    public ListQuery build() {\n-        return instance;\n+    public AnyQueryBuilder details(final boolean details) {\n+        getInstance().setDetails(details);\n+        return this;\n     }\n }","previous_filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/ListQueryBuilder.java"},{"sha":"c87b68cd996eae21d48eb46ea907a173367a036c","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/TaskQueryBuilder.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FTaskQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FTaskQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FTaskQueryBuilder.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.builders;\n+\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n+\n+public class TaskQueryBuilder extends AbstractQueryBuilder<TaskQuery, TaskQueryBuilder> {\n+\n+    @Override\n+    protected TaskQuery newInstance() {\n+        return new TaskQuery();\n+    }\n+\n+    @Override\n+    public TaskQueryBuilder page(final Integer page) {\n+        return TaskQueryBuilder.class.cast(super.page(page));\n+    }\n+\n+    @Override\n+    public TaskQueryBuilder size(final Integer size) {\n+        return TaskQueryBuilder.class.cast(super.size(size));\n+    }\n+\n+    @Override\n+    public TaskQueryBuilder orderBy(final String orderBy) {\n+        return TaskQueryBuilder.class.cast(super.orderBy(orderBy));\n+    }\n+\n+    public TaskQueryBuilder resource(final String resource) {\n+        getInstance().setResource(resource);\n+        return this;\n+    }\n+\n+    public TaskQueryBuilder anyTypeKind(final AnyTypeKind anyTypeKind) {\n+        getInstance().setAnyTypeKind(anyTypeKind);\n+        return this;\n+    }\n+\n+    public TaskQueryBuilder anyTypeKey(final Long anyTypeKey) {\n+        getInstance().setAnyTypeKey(anyTypeKey);\n+        return this;\n+    }\n+}"},{"sha":"bf30e246c145fef14aadc09b3a93c0f7ec58bcb3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -30,9 +30,9 @@ public class PropagationTaskTO extends AbstractTaskTO {\n \n     private static final long serialVersionUID = 386450127003321197L;\n \n-    private PropagationMode propagationMode;\n+    private PropagationMode mode;\n \n-    private ResourceOperation propagationOperation;\n+    private ResourceOperation operation;\n \n     private String connObjectKey;\n \n@@ -64,12 +64,12 @@ public void setOldConnObjectKey(final String oldConnObjectKey) {\n         this.oldConnObjectKey = oldConnObjectKey;\n     }\n \n-    public PropagationMode getPropagationMode() {\n-        return propagationMode;\n+    public PropagationMode getMode() {\n+        return mode;\n     }\n \n-    public void setPropagationMode(final PropagationMode propagationMode) {\n-        this.propagationMode = propagationMode;\n+    public void setPropagationMode(final PropagationMode mode) {\n+        this.mode = mode;\n     }\n \n     public String getResource() {\n@@ -80,12 +80,12 @@ public void setResource(final String resource) {\n         this.resource = resource;\n     }\n \n-    public ResourceOperation getPropagationOperation() {\n-        return propagationOperation;\n+    public ResourceOperation getOperation() {\n+        return operation;\n     }\n \n-    public void setPropagationOperation(final ResourceOperation propagationOperation) {\n-        this.propagationOperation = propagationOperation;\n+    public void setOperation(final ResourceOperation operation) {\n+        this.operation = operation;\n     }\n \n     public String getXmlAttributes() {"},{"sha":"a8c6bb8b30ea631000eb9f029c1dafa9b1026426","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AbstractQuery.java","status":"renamed","additions":2,"deletions":33,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -18,17 +18,13 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n-import java.io.Serializable;\n import javax.validation.constraints.Min;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.QueryParam;\n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n-public class ListQuery implements Serializable {\n+public abstract class AbstractQuery extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -371488230250055359L;\n \n@@ -38,8 +34,6 @@ public class ListQuery implements Serializable {\n \n     private String orderBy;\n \n-    private Boolean details;\n-\n     public Integer getPage() {\n         return page;\n     }\n@@ -70,29 +64,4 @@ public String getOrderBy() {\n     public void setOrderBy(final String orderBy) {\n         this.orderBy = orderBy;\n     }\n-\n-    @QueryParam(JAXRSService.PARAM_DETAILS)\n-    @DefaultValue(\"true\")\n-    public boolean isDetails() {\n-        return details == null ? true : details;\n-    }\n-\n-    public void setDetails(final boolean details) {\n-        this.details = details;\n-    }\n-\n-    @Override\n-    public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n-    }\n }","previous_filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ListQuery.java"},{"sha":"ef9b93d3cd63eb5689ec14c35c25b7a963155195","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyListQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -23,7 +23,7 @@\n import javax.ws.rs.MatrixParam;\n import org.apache.syncope.common.lib.SyncopeConstants;\n \n-public class AnyListQuery extends ListQuery {\n+public class AnyListQuery extends AnyQuery {\n \n     private static final long serialVersionUID = -5197167078435619636L;\n "},{"sha":"bcf10ce47371204279af5e6fa536c6cb0c6f63b9","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyQuery.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+public class AnyQuery extends AbstractQuery {\n+\n+    private static final long serialVersionUID = -371488230250055359L;\n+\n+    private Boolean details;\n+\n+    public boolean isDetails() {\n+        return details == null ? true : details;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_DETAILS)\n+    @DefaultValue(\"true\")\n+    public void setDetails(final boolean details) {\n+        this.details = details;\n+    }\n+}"},{"sha":"7f59abf668135bf72195347283ae94ed45a21e89","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskQuery.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import javax.validation.constraints.Min;\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+public class TaskQuery extends AbstractQuery {\n+\n+    private static final long serialVersionUID = -8792519310029596796L;\n+\n+    private String resource;\n+\n+    private AnyTypeKind anyTypeKind;\n+\n+    private Long anyTypeKey;\n+\n+    public String getResource() {\n+        return resource;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_RESOURCE)\n+    public void setResource(final String resource) {\n+        this.resource = resource;\n+    }\n+\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_ANYTYPE_KIND)\n+    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n+        this.anyTypeKind = anyTypeKind;\n+    }\n+\n+    public Long getAnyTypeKey() {\n+        return anyTypeKey;\n+    }\n+\n+    @Min(1)\n+    @QueryParam(JAXRSService.PARAM_ANYTYPE_KEY)\n+    public void setAnyTypeKey(final Long anyTypeKey) {\n+        this.anyTypeKey = anyTypeKey;\n+    }\n+\n+}"},{"sha":"68afb1a405f3508f976f27e327163f842dd6dbd0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -28,6 +28,12 @@ public interface JAXRSService {\n \n     String PARAM_ORDERBY = \"orderby\";\n \n+    String PARAM_RESOURCE = \"resource\";\n+\n+    String PARAM_ANYTYPE_KIND = \"anyTypeKind\";\n+\n+    String PARAM_ANYTYPE_KEY = \"anyTypeKey\";\n+\n     String PARAM_DETAILS = \"details\";\n \n     String PARAM_CONNID_PAGED_RESULTS_COOKIE = \"connIdPagedResultsCookie\";"},{"sha":"bc8b34659b91dbd1ad9c7f7b52126a929a6f4542","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n-import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n@@ -33,13 +32,11 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.rest.api.beans.ListQuery;\n \n /**\n  * REST operations for reports.\n@@ -70,14 +67,13 @@ public interface ReportService extends JAXRSService {\n     ReportExecTO readExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n \n     /**\n-     * Returns a paged list of all existing reports matching the given query;\n+     * Returns a list of all existing reports.\n      *\n-     * @param listQuery query conditions\n      * @return paged list of existing reports matching the given query\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<ReportTO> list(@BeanParam ListQuery listQuery);\n+    List<ReportTO> list();\n \n     /**\n      * Creates a new report."},{"sha":"2d70b2be747125dae4584488835f8227a28579d0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -44,7 +44,7 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.rest.api.beans.ListQuery;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n \n /**\n  * REST operations for tasks.\n@@ -78,16 +78,16 @@ public interface TaskService extends JAXRSService {\n     /**\n      * Returns a paged list of existing tasks matching type and the given query.\n      *\n-     * @param taskType type of tasks to be listed\n-     * @param listQuery query conditions\n+     * @param type type of tasks to be listed\n+     * @param query query conditions\n      * @param <T> type of taskTO\n      * @return paged list of existing tasks matching type and the given query\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     <T extends AbstractTaskTO> PagedResult<T> list(\n-            @NotNull @MatrixParam(\"type\") TaskType taskType,\n-            @BeanParam ListQuery listQuery);\n+            @NotNull @MatrixParam(\"type\") TaskType type,\n+            @BeanParam TaskQuery query);\n \n     /**\n      * Creates a new task."},{"sha":"29cd65ab3d8af77b97bd845d509200e2e1ae4796","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -47,7 +47,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -128,13 +127,8 @@ public ReportTO update(final ReportTO reportTO) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n-    public int count() {\n-        return reportDAO.count();\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n-    public List<ReportTO> list(final int page, final int size, final List<OrderByClause> orderByClauses) {\n-        return CollectionUtils.collect(reportDAO.findAll(page, size, orderByClauses),\n+    public List<ReportTO> list() {\n+        return CollectionUtils.collect(reportDAO.findAll(),\n                 new Transformer<Report, ReportTO>() {\n \n                     @Override"},{"sha":"09d855ef6de043c738bc0d65f133e523199b42fe","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":17,"deletions":8,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.JobAction;\n@@ -56,6 +57,7 @@\n import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.core.logic.notification.NotificationJobDelegate;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n@@ -76,6 +78,9 @@ public class TaskLogic extends AbstractJobLogic<AbstractTaskTO> {\n     @Autowired\n     private ConfDAO confDAO;\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n     @Autowired\n     private TaskDataBinder binder;\n \n@@ -146,23 +151,27 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.TASK_LIST + \"')\")\n-    public int count(final TaskType taskType) {\n-        return taskDAO.count(taskType);\n+    public int count(\n+            final TaskType type, final String resource, final AnyTypeKind anyTypeKind, final Long anyTypeKey) {\n+\n+        return taskDAO.count(type, resourceDAO.find(resource), anyTypeKind, anyTypeKey);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.TASK_LIST + \"')\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractTaskTO> List<T> list(final TaskType taskType,\n+    public <T extends AbstractTaskTO> List<T> list(\n+            final TaskType type, final String resource, final AnyTypeKind anyTypeKind, final Long anyTypeKey,\n             final int page, final int size, final List<OrderByClause> orderByClauses) {\n \n-        final TaskUtils taskUtilss = taskUtilsFactory.getInstance(taskType);\n+        final TaskUtils taskUtils = taskUtilsFactory.getInstance(type);\n \n-        return CollectionUtils.collect(taskDAO.findAll(page, size, orderByClauses, taskType),\n+        return CollectionUtils.collect(taskDAO.findAll(\n+                type, resourceDAO.find(resource), anyTypeKind, anyTypeKey, page, size, orderByClauses),\n                 new Transformer<Task, T>() {\n \n                     @Override\n                     public T transform(final Task task) {\n-                        return (T) binder.getTaskTO(task, taskUtilss);\n+                        return (T) binder.getTaskTO(task, taskUtils);\n                     }\n                 }, new ArrayList<T>());\n     }\n@@ -250,8 +259,8 @@ public TaskExecTO report(final Long execKey, final PropagationTaskExecStatus sta\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(exec.getTask());\n         if (TaskType.PROPAGATION == taskUtils.getType()) {\n             PropagationTask task = (PropagationTask) exec.getTask();\n-            if (task.getPropagationMode() != PropagationMode.TWO_PHASES) {\n-                sce.getElements().add(\"Propagation mode: \" + task.getPropagationMode());\n+            if (task.getMode() != PropagationMode.TWO_PHASES) {\n+                sce.getElements().add(\"Propagation mode: \" + task.getMode());\n             }\n         } else {\n             sce.getElements().add(\"Task type: \" + taskUtils);"},{"sha":"0c949a715dd2903b5929c130a18dd0d5ba9f5516","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportDAO.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportDAO.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Report;\n \n public interface ReportDAO extends DAO<Report, Long> {\n@@ -28,10 +27,6 @@ public interface ReportDAO extends DAO<Report, Long> {\n \n     List<Report> findAll();\n \n-    List<Report> findAll(int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n-\n-    int count();\n-\n     Report save(Report report);\n \n     void delete(Long key);"},{"sha":"999660ed0bfcbd06874f5df28a44642e8cefade5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -32,14 +33,13 @@ public interface TaskDAO extends DAO<Task, Long> {\n \n     <T extends Task> List<T> findToExec(TaskType type);\n \n-    <T extends Task> List<T> findAll(ExternalResource resource, TaskType type);\n-\n     <T extends Task> List<T> findAll(TaskType type);\n \n     <T extends Task> List<T> findAll(\n-            int page, int itemsPerPage, List<OrderByClause> orderByClauses, TaskType type);\n+            TaskType type, ExternalResource resource, AnyTypeKind anyTypeKind, Long anyTypeKey,\n+            int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n \n-    int count(TaskType type);\n+    int count(TaskType type, ExternalResource resource, AnyTypeKind anyTypeKind, Long anyTypeKey);\n \n     <T extends Task> T save(T task);\n "},{"sha":"9c5ef29a9164aa183a09ed0b2a9458efdd5f2158","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PropagationTask.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -43,13 +43,13 @@ public interface PropagationTask extends Task {\n \n     void setObjectClassName(String objectClassName);\n \n-    PropagationMode getPropagationMode();\n+    PropagationMode getMode();\n \n-    void setPropagationMode(PropagationMode propagationMode);\n+    void setMode(PropagationMode mode);\n \n-    ResourceOperation getPropagationOperation();\n+    ResourceOperation getOperation();\n \n-    void setPropagationOperation(ResourceOperation operation);\n+    void setOperation(ResourceOperation operation);\n \n     Long getAnyKey();\n "},{"sha":"3dbf25d1f2afd33f39a7c7aa0305424c54300763","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -18,19 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.List;\n import javax.persistence.EntityManager;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Configurable;\n import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n-import org.springframework.util.ReflectionUtils;\n \n @Configurable\n public abstract class AbstractDAO<E extends Entity<KEY>, KEY> implements DAO<E, KEY> {\n@@ -48,27 +44,6 @@ protected EntityManager entityManager() {\n         return entityManager;\n     }\n \n-    protected String toOrderByStatement(final Class<? extends Entity<KEY>> beanClass, final String prefix,\n-            final List<OrderByClause> orderByClauses) {\n-\n-        StringBuilder statement = new StringBuilder();\n-\n-        for (OrderByClause clause : orderByClauses) {\n-            String field = clause.getField().trim();\n-            if (ReflectionUtils.findField(beanClass, field) != null) {\n-                if (StringUtils.isNotBlank(prefix)) {\n-                    statement.append(prefix).append('.');\n-                }\n-                statement.append(field).append(' ').append(clause.getDirection().name());\n-            }\n-        }\n-\n-        if (statement.length() > 0) {\n-            statement.insert(0, \"ORDER BY \");\n-        }\n-        return statement.toString();\n-    }\n-\n     @Override\n     public void refresh(final E entity) {\n         entityManager().refresh(entity);"},{"sha":"c227152e3d2fc4f90e138b3deea11d7c7197faca","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportDAO.java","status":"modified","additions":2,"deletions":25,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -18,12 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Collections;\n import java.util.List;\n-import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReport;\n import org.springframework.stereotype.Repository;\n@@ -41,32 +38,12 @@ public Report find(final Long key) {\n     @Transactional(readOnly = true)\n     @Override\n     public List<Report> findAll() {\n-        return findAll(-1, -1, Collections.<OrderByClause>emptyList());\n-    }\n-\n-    @Override\n-    public List<Report> findAll(final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n-        final TypedQuery<Report> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAReport.class.getSimpleName() + \" e \"\n-                + toOrderByStatement(Report.class, \"e\", orderByClauses), Report.class);\n-\n-        query.setFirstResult(itemsPerPage * (page <= 0\n-                ? 0\n-                : page - 1));\n-\n-        if (itemsPerPage > 0) {\n-            query.setMaxResults(itemsPerPage);\n-        }\n+        TypedQuery<Report> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAReport.class.getSimpleName() + \" e\", Report.class);\n \n         return query.getResultList();\n     }\n \n-    @Override\n-    public int count() {\n-        Query countQuery = entityManager().createNativeQuery(\"SELECT COUNT(id) FROM \" + JPAReport.TABLE);\n-        return ((Number) countQuery.getSingleResult()).intValue();\n-    }\n-\n     @Override\n     @Transactional(rollbackFor = Throwable.class)\n     public Report save(final Report report) {"},{"sha":"21a32e6d2fdf1e6a559467a29dccd16207501efe","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":104,"deletions":36,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -23,6 +23,7 @@\n import javax.persistence.Query;\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -36,6 +37,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.ReflectionUtils;\n \n @Repository\n public class JPATaskDAO extends AbstractDAO<Task, Long> implements TaskDAO {\n@@ -78,59 +80,106 @@ public <T extends Task> T find(final Long key) {\n         return (T) entityManager().find(AbstractTask.class, key);\n     }\n \n-    private <T extends Task> StringBuilder buildfindAllQuery(final TaskType type) {\n-        return new StringBuilder(\"SELECT e FROM \").\n+    private <T extends Task> StringBuilder buildFindAllQuery(final TaskType type) {\n+        return new StringBuilder(\"SELECT t FROM \").\n                 append(getEntityReference(type).getSimpleName()).\n-                append(\" e WHERE e.type=:type \");\n+                append(\" t WHERE t.type=:type \");\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Task> List<T> findToExec(final TaskType type) {\n-        StringBuilder queryString = buildfindAllQuery(type).append(\"AND \");\n+        StringBuilder queryString = buildFindAllQuery(type).append(\"AND \");\n \n         if (type == TaskType.NOTIFICATION) {\n-            queryString.append(\"e.executed = 0 \");\n+            queryString.append(\"t.executed = 0 \");\n         } else {\n-            queryString.append(\"e.executions IS EMPTY \");\n+            queryString.append(\"t.executions IS EMPTY \");\n         }\n-        queryString.append(\"ORDER BY e.id DESC\");\n+        queryString.append(\"ORDER BY t.id DESC\");\n \n         Query query = entityManager().createQuery(queryString.toString());\n         query.setParameter(\"type\", type);\n         return query.getResultList();\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Task> List<T> findAll(final ExternalResource resource, final TaskType type) {\n-        StringBuilder queryString = buildfindAllQuery(type).append(\"AND e.resource=:resource ORDER BY e.id DESC\");\n+    public <T extends Task> List<T> findAll(final TaskType type) {\n+        return findAll(type, null, null, null, -1, -1, Collections.<OrderByClause>emptyList());\n+    }\n \n-        final Query query = entityManager().createQuery(queryString.toString());\n-        query.setParameter(\"type\", type);\n-        query.setParameter(\"resource\", resource);\n+    private StringBuilder buildFindAllQuery(\n+            final TaskType type,\n+            final ExternalResource resource,\n+            final AnyTypeKind anyTypeKind,\n+            final Long anyTypeKey) {\n \n-        return query.getResultList();\n+        if (resource != null\n+                && type != TaskType.PROPAGATION && type != TaskType.PUSH && type != TaskType.SYNCHRONIZATION) {\n+\n+            throw new IllegalArgumentException(type + \" is not related to \" + ExternalResource.class.getSimpleName());\n+        }\n+\n+        if ((anyTypeKind != null || anyTypeKey != null) && type != TaskType.PROPAGATION) {\n+            throw new IllegalArgumentException(type + \" is not related to users, groups or any objects\");\n+        }\n+\n+        StringBuilder queryString = buildFindAllQuery(type);\n+\n+        if (resource != null) {\n+            queryString.append(\"AND t.resource=:resource \");\n+        }\n+        if (anyTypeKind != null && anyTypeKey != null) {\n+            queryString.append(\"AND t.anyTypeKind=:anyTypeKind AND t.anyTypeKey=:anyTypeKey \");\n+        }\n+\n+        return queryString;\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public <T extends Task> List<T> findAll(final TaskType type) {\n-        return findAll(-1, -1, Collections.<OrderByClause>emptyList(), type);\n+    private String toOrderByStatement(\n+            final Class<? extends Task> beanClass, final List<OrderByClause> orderByClauses) {\n+\n+        StringBuilder statement = new StringBuilder();\n+\n+        for (OrderByClause clause : orderByClauses) {\n+            String field = clause.getField().trim();\n+            if (ReflectionUtils.findField(beanClass, field) != null) {\n+                statement.append(\"t.\").append(field).append(' ').append(clause.getDirection().name());\n+            }\n+        }\n+\n+        if (statement.length() > 0) {\n+            statement.insert(0, \"ORDER BY \");\n+        }\n+        return statement.toString();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends Task> List<T> findAll(final int page, final int itemsPerPage,\n-            final List<OrderByClause> orderByClauses, final TaskType type) {\n-\n-        StringBuilder queryString = buildfindAllQuery(type);\n-        queryString.append(orderByClauses.isEmpty()\n-                ? \"ORDER BY e.id DESC\"\n-                : toOrderByStatement(getEntityReference(type), \"e\", orderByClauses));\n+    public <T extends Task> List<T> findAll(\n+            final TaskType type,\n+            final ExternalResource resource,\n+            final AnyTypeKind anyTypeKind,\n+            final Long anyTypeKey,\n+            final int page,\n+            final int itemsPerPage,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        StringBuilder queryString = buildFindAllQuery(type, resource, anyTypeKind, anyTypeKey).\n+                append(orderByClauses.isEmpty()\n+                                ? \"ORDER BY t.id DESC\"\n+                                : toOrderByStatement(getEntityReference(type), orderByClauses));\n \n         Query query = entityManager().createQuery(queryString.toString());\n         query.setParameter(\"type\", type);\n+        if (resource != null) {\n+            query.setParameter(\"resource\", resource);\n+        }\n+        if (anyTypeKind != null && anyTypeKey != null) {\n+            query.setParameter(\"anyTypeKind\", anyTypeKind);\n+            query.setParameter(\"anyTypeKey\", anyTypeKey);\n+        }\n \n         query.setFirstResult(itemsPerPage * (page <= 0\n                 ? 0\n@@ -144,10 +193,27 @@ public <T extends Task> List<T> findAll(final int page, final int itemsPerPage,\n     }\n \n     @Override\n-    public int count(final TaskType type) {\n-        Query countQuery = entityManager().createNativeQuery(\"SELECT COUNT(id) FROM Task WHERE TYPE=?1\");\n-        countQuery.setParameter(1, type.name());\n-        return ((Number) countQuery.getSingleResult()).intValue();\n+    public int count(\n+            final TaskType type,\n+            final ExternalResource resource,\n+            final AnyTypeKind anyTypeKind,\n+            final Long anyTypeKey) {\n+\n+        StringBuilder queryString = buildFindAllQuery(type, resource, anyTypeKind, anyTypeKey);\n+\n+        Query query = entityManager().createQuery(queryString.toString().replace(\n+                \"SELECT t\",\n+                \"SELECT COUNT(t)\"));\n+        query.setParameter(\"type\", type);\n+        if (resource != null) {\n+            query.setParameter(\"resource\", resource);\n+        }\n+        if (anyTypeKind != null && anyTypeKey != null) {\n+            query.setParameter(\"anyTypeKind\", anyTypeKind);\n+            query.setParameter(\"anyTypeKey\", anyTypeKey);\n+        }\n+\n+        return ((Number) query.getSingleResult()).intValue();\n     }\n \n     @Transactional(rollbackFor = { Throwable.class })\n@@ -173,12 +239,14 @@ public void delete(final Task task) {\n \n     @Override\n     public void deleteAll(final ExternalResource resource, final TaskType type) {\n-        CollectionUtils.forAllDo(findAll(resource, type), new Closure<Task>() {\n-\n-            @Override\n-            public void execute(final Task input) {\n-                delete(input.getKey());\n-            }\n-        });\n+        CollectionUtils.forAllDo(\n+                findAll(type, resource, null, null, -1, -1, Collections.<OrderByClause>emptyList()),\n+                new Closure<Task>() {\n+\n+                    @Override\n+                    public void execute(final Task input) {\n+                        delete(input.getKey());\n+                    }\n+                });\n     }\n }"},{"sha":"961fea0c363388cf6fbe550b8ea0fd588274ab3b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -67,9 +67,12 @@ public <T extends Task> TaskExec findLatestEnded(final T task) {\n \n     @Override\n     public List<TaskExec> findAll(final TaskType type) {\n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPATaskExec.class.getSimpleName()).\n-                append(\" e WHERE e.task IN (\").append(\"SELECT t FROM \").\n-                append(taskDAO.getEntityReference(type).getSimpleName()).append(\" t)\");\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPATaskExec.class.getSimpleName()).\n+                append(\" e WHERE e.task IN (\").\n+                append(\"SELECT t FROM \").\n+                append(taskDAO.getEntityReference(type).getSimpleName()).\n+                append(\" t)\");\n \n         TypedQuery<TaskExec> query = entityManager().createQuery(queryString.toString(), TaskExec.class);\n         return query.getResultList();"},{"sha":"19fc9f6f821702be0dbcf28ff1d52758dd7f02b1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -53,13 +53,13 @@ public class JPAPropagationTask extends AbstractTask implements PropagationTask\n      * @see PropagationMode\n      */\n     @Enumerated(EnumType.STRING)\n-    private PropagationMode propagationMode;\n+    private PropagationMode mode;\n \n     /**\n      * @see ResourceOperation\n      */\n     @Enumerated(EnumType.STRING)\n-    private ResourceOperation propagationOperation;\n+    private ResourceOperation operation;\n \n     /**\n      * The connObjectKey on the external resource.\n@@ -132,26 +132,26 @@ public void setAttributes(final Set<Attribute> attributes) {\n \n     @Override\n \n-    public PropagationMode getPropagationMode() {\n-        return propagationMode;\n+    public PropagationMode getMode() {\n+        return mode;\n     }\n \n     @Override\n \n-    public void setPropagationMode(final PropagationMode propagationMode) {\n-        this.propagationMode = propagationMode;\n+    public void setMode(final PropagationMode mode) {\n+        this.mode = mode;\n     }\n \n     @Override\n \n-    public ResourceOperation getPropagationOperation() {\n-        return propagationOperation;\n+    public ResourceOperation getOperation() {\n+        return operation;\n     }\n \n     @Override\n \n-    public void setPropagationOperation(final ResourceOperation propagationOperation) {\n-        this.propagationOperation = propagationOperation;\n+    public void setOperation(final ResourceOperation operation) {\n+        this.operation = operation;\n     }\n \n     @Override"},{"sha":"48d0cc3299b66eb35683c8c3e5ae192da48010c2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PropagationTaskValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -35,8 +35,8 @@ public boolean isValid(final PropagationTask task, final ConstraintValidatorCont\n         if (task == null) {\n             isValid = true;\n         } else {\n-            isValid = task.getPropagationMode() != null\n-                    && task.getPropagationOperation() != null\n+            isValid = task.getMode() != null\n+                    && task.getOperation() != null\n                     && !task.getAttributes().isEmpty()\n                     && task.getResource() != null;\n "},{"sha":"8c419aacd2266ca4df620f4ec674799d8c9d2882","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ReportTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -55,7 +55,7 @@ public void findAll() {\n \n     @Test\n     public void save() {\n-        int beforeCount = reportDAO.count();\n+        int beforeCount = reportDAO.findAll().size();\n \n         Report report = entityFactory.newEntity(Report.class);\n         report.setName(\"new report\");\n@@ -66,7 +66,7 @@ public void save() {\n         assertNotNull(report);\n         assertNotNull(report.getKey());\n \n-        int afterCount = reportDAO.count();\n+        int afterCount = reportDAO.findAll().size();\n         assertEquals(afterCount, beforeCount + 1);\n     }\n "},{"sha":"9055fbc525ae636b8dd96d2c71bfb9a4af823ad4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -68,25 +68,30 @@ public void findWithoutExecs() {\n \n     @Test\n     public void findPaginated() {\n-        List<Task> tasks = taskDAO.findAll(1, 2, Collections.<OrderByClause>emptyList(), TaskType.PROPAGATION);\n+        List<Task> tasks = taskDAO.findAll(\n+                TaskType.PROPAGATION, null, null, null, 1, 2, Collections.<OrderByClause>emptyList());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.size());\n \n         for (Task task : tasks) {\n             assertNotNull(task);\n         }\n \n-        tasks = taskDAO.findAll(2, 2, Collections.<OrderByClause>emptyList(), TaskType.PROPAGATION);\n+        tasks = taskDAO.findAll(\n+                TaskType.PROPAGATION, null, null, null, 2, 2, Collections.<OrderByClause>emptyList());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.size());\n \n         for (Task task : tasks) {\n             assertNotNull(task);\n         }\n \n-        tasks = taskDAO.findAll(1000, 2, Collections.<OrderByClause>emptyList(), TaskType.PROPAGATION);\n+        tasks = taskDAO.findAll(\n+                TaskType.PROPAGATION, null, null, null, 1000, 2, Collections.<OrderByClause>emptyList());\n         assertNotNull(tasks);\n         assertTrue(tasks.isEmpty());\n+\n+        assertEquals(5, taskDAO.count(TaskType.PROPAGATION, null, null, null));\n     }\n \n     @Test\n@@ -109,8 +114,8 @@ public void savePropagationTask() {\n         PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n         task.setResource(resource);\n         task.setAnyTypeKind(AnyTypeKind.USER);\n-        task.setPropagationMode(PropagationMode.TWO_PHASES);\n-        task.setPropagationOperation(ResourceOperation.CREATE);\n+        task.setMode(PropagationMode.TWO_PHASES);\n+        task.setOperation(ResourceOperation.CREATE);\n         task.setConnObjectKey(\"one@two.com\");\n \n         Set<Attribute> attributes = new HashSet<>();\n@@ -139,6 +144,8 @@ public void delete() {\n \n         resource = resourceDAO.find(resource.getKey());\n         assertNotNull(resource);\n-        assertFalse(taskDAO.findAll(resource, TaskType.PROPAGATION).contains(task));\n+        assertFalse(taskDAO.findAll(\n+                TaskType.PROPAGATION, resource, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n+                contains(task));\n     }\n }"},{"sha":"5628c297ae34d0e4f9b0d6890fac7c0e192748e3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -25,6 +25,7 @@\n import static org.junit.Assert.assertTrue;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -37,6 +38,7 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n@@ -216,7 +218,8 @@ public void delete() {\n         // -------------------------------------\n \n         // Get tasks\n-        List<PropagationTask> propagationTasks = taskDAO.findAll(resource, TaskType.PROPAGATION);\n+        List<PropagationTask> propagationTasks = taskDAO.findAll(\n+                TaskType.PROPAGATION, resource, null, null, -1, -1, Collections.<OrderByClause>emptyList());\n         assertFalse(propagationTasks.isEmpty());\n \n         // delete resource"},{"sha":"7ef25aa6657522b36d6b17e8c063c0416cc8f189","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -24,6 +24,7 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n@@ -40,12 +41,12 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n@@ -92,8 +93,8 @@ public void save() {\n         PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n         task.setResource(resource);\n         task.setAnyTypeKind(AnyTypeKind.USER);\n-        task.setPropagationMode(PropagationMode.TWO_PHASES);\n-        task.setPropagationOperation(ResourceOperation.CREATE);\n+        task.setMode(PropagationMode.TWO_PHASES);\n+        task.setOperation(ResourceOperation.CREATE);\n         task.setConnObjectKey(\"one@two.com\");\n \n         Set<Attribute> attributes = new HashSet<>();\n@@ -110,7 +111,9 @@ public void save() {\n         taskDAO.flush();\n \n         resource = resourceDAO.find(\"ws-target-resource-1\");\n-        assertTrue(taskDAO.findAll(resource, TaskType.PROPAGATION).contains(task));\n+        assertTrue(taskDAO.findAll(\n+                TaskType.PROPAGATION, resource, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n+                contains(task));\n     }\n \n     @Test"},{"sha":"0d1e67b347dc6e7d7ea25f3e78e12a2befb50e02","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -984,14 +984,14 @@ under the License.\n                intAttrName=\"location\" intMappingType=\"AnyObjectPlainSchema\"\n                mandatoryCondition=\"false\" connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n     \n-  <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"1\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n+  <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"1\" mode=\"TWO_PHASES\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1\"\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <TaskExec id=\"1\" task_id=\"1\" status=\"SUCCESS\"/>\n-  <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"2\" propagationMode=\"ONE_PHASE\" propagationOperation=\"CREATE\"\n+  <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"2\" mode=\"ONE_PHASE\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1\"\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"3\" propagationMode=\"TWO_PHASES\" propagationOperation=\"DELETE\"\n+  <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"3\" mode=\"TWO_PHASES\" operation=\"DELETE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1\"\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"4\" name=\"CSV (update matching; assign unmatching)\" resource_name=\"resource-csv\"\n@@ -1003,7 +1003,7 @@ under the License.\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"SchedTask\" type=\"SCHEDULED\" id=\"5\" name=\"SampleJob Task\" \n         jobDelegateClassName=\"org.apache.syncope.fit.core.reference.TestSampleJobDelegate\" cronExpression=\"0 0 0 1 * ?\"/>\n-  <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n+  <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" mode=\"TWO_PHASES\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" anyKey=\"1\"\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <TaskExec id=\"6\" task_id=\"6\" status=\"SUCCESS\"/>\n@@ -1102,7 +1102,7 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"26\" name=\"CSV (ignore matching; assign unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\"/>\n-  <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"27\" propagationMode=\"ONE_PHASE\" propagationOperation=\"CREATE\"\n+  <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"27\" mode=\"ONE_PHASE\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"resource-testdb\" anyTypeKind=\"USER\" anyKey=\"1\"\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"28\" name=\"Scripted SQL\" resource_name=\"resource-db-scripted\""},{"sha":"90d3dbc26d967f4727e77c96a304825a9c8dadc9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -303,7 +303,7 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n                 LOG.debug(\"Delete {} on {}\", beforeObj.getUid(), task.getResource().getKey());\n \n                 connector.delete(\n-                        task.getPropagationMode(),\n+                        task.getMode(),\n                         beforeObj.getObjectClass(),\n                         beforeObj.getUid(),\n                         null,\n@@ -346,7 +346,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 action.before(task, beforeObj);\n             }\n \n-            switch (task.getPropagationOperation()) {\n+            switch (task.getOperation()) {\n                 case CREATE:\n                 case UPDATE:\n                     createOrUpdate(task, beforeObj, connector, propagationAttempted);\n@@ -359,7 +359,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 default:\n             }\n \n-            execution.setStatus(task.getPropagationMode() == PropagationMode.ONE_PHASE\n+            execution.setStatus(task.getMode() == PropagationMode.ONE_PHASE\n                     ? PropagationTaskExecStatus.SUCCESS.name()\n                     : PropagationTaskExecStatus.SUBMITTED.name());\n \n@@ -390,14 +390,14 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n             }\n \n             try {\n-                execution.setStatus(task.getPropagationMode() == PropagationMode.ONE_PHASE\n+                execution.setStatus(task.getMode() == PropagationMode.ONE_PHASE\n                         ? PropagationTaskExecStatus.FAILURE.name()\n                         : PropagationTaskExecStatus.UNSUBMITTED.name());\n             } catch (Exception wft) {\n                 LOG.error(\"While executing KO action on {}\", execution, wft);\n             }\n \n-            propagationAttempted.add(task.getPropagationOperation().name().toLowerCase());\n+            propagationAttempted.add(task.getOperation().name().toLowerCase());\n \n             for (PropagationActions action : actions) {\n                 action.onError(task, execution, e);\n@@ -449,7 +449,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 AuditElements.EventCategoryType.PROPAGATION,\n                 task.getAnyTypeKind().name().toLowerCase(),\n                 task.getResource().getKey(),\n-                task.getPropagationOperation().name().toLowerCase(),\n+                task.getOperation().name().toLowerCase(),\n                 result,\n                 beforeObj, // searching for before object is too much expensive ... \n                 new Object[] { execution, afterObj },\n@@ -459,7 +459,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 AuditElements.EventCategoryType.PROPAGATION,\n                 task.getAnyTypeKind().name().toLowerCase(),\n                 task.getResource().getKey(),\n-                task.getPropagationOperation().name().toLowerCase(),\n+                task.getOperation().name().toLowerCase(),\n                 result,\n                 beforeObj, // searching for before object is too much expensive ... \n                 new Object[] { execution, afterObj },\n@@ -488,7 +488,7 @@ protected boolean hasToBeregistered(final PropagationTask task, final TaskExec e\n \n         final boolean failed = !PropagationTaskExecStatus.valueOf(execution.getStatus()).isSuccessful();\n \n-        switch (task.getPropagationOperation()) {\n+        switch (task.getOperation()) {\n \n             case CREATE:\n                 result = (failed && task.getResource().getCreateTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n@@ -530,8 +530,8 @@ protected ConnectorObject getRemoteObject(final PropagationTask task, final Conn\n \n         ConnectorObject obj = null;\n         try {\n-            obj = connector.getObject(task.getPropagationMode(),\n-                    task.getPropagationOperation(),\n+            obj = connector.getObject(task.getMode(),\n+                    task.getOperation(),\n                     new ObjectClass(task.getObjectClassName()),\n                     new Uid(connObjectKey),\n                     connector.getOperationOptions(MappingUtils.getMappingItems(provision, MappingPurpose.PROPAGATION)));"},{"sha":"870be79e7efc7a372a4994cfa2b63b6f27bc0dc6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -82,7 +82,7 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n                     Attribute passwordAttribute = AttributeBuilder.buildPassword(\n                             new GuardedString(cipherPlusPassword.toCharArray()));\n \n-                    Set<Attribute> attributes = new HashSet<Attribute>(task.getAttributes());\n+                    Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n                     attributes.add(passwordAttribute);\n                     attributes.remove(missing);\n "},{"sha":"53d55a98620ce8165bdc3ab31dd9ff292ad1a028","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -379,8 +379,8 @@ protected List<PropagationTask> createTasks(final Any<?, ?, ?> any,\n                     if (!deleteOnResource) {\n                         task.setAnyKey(any.getKey());\n                     }\n-                    task.setPropagationOperation(operation);\n-                    task.setPropagationMode(resource.getPropagationMode());\n+                    task.setOperation(operation);\n+                    task.setMode(resource.getPropagationMode());\n                     task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n                     Pair<String, Set<Attribute>> preparedAttrs = MappingUtils.prepareAttrs("},{"sha":"642ffe04fa3764dc9ec62a5c7c8339040d451267","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -25,14 +25,12 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n-import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.ListQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.core.logic.ReportLogic;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -60,15 +58,8 @@ public void update(final ReportTO reportTO) {\n     }\n \n     @Override\n-    public PagedResult<ReportTO> list(final ListQuery listQuery) {\n-        return buildPagedResult(\n-                logic.list(\n-                        listQuery.getPage(),\n-                        listQuery.getSize(),\n-                        getOrderByClauses(listQuery.getOrderBy())),\n-                listQuery.getPage(),\n-                listQuery.getSize(),\n-                logic.count());\n+    public List<ReportTO> list() {\n+        return logic.list();\n     }\n \n     @Override"},{"sha":"3744583783fdb5f2ac64fd5f92a6f18cdd7ba0b9","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.ListQuery;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.logic.TaskLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -80,16 +80,23 @@ public TaskExecTO execute(final Long key, final boolean dryRun) {\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType, final ListQuery listQuery) {\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType type, final TaskQuery query) {\n         return (PagedResult<T>) buildPagedResult(\n                 logic.list(\n-                        taskType,\n-                        listQuery.getPage(),\n-                        listQuery.getSize(),\n-                        getOrderByClauses(listQuery.getOrderBy())),\n-                listQuery.getPage(),\n-                listQuery.getSize(),\n-                logic.count(taskType));\n+                        type,\n+                        query.getResource(),\n+                        query.getAnyTypeKind(),\n+                        query.getAnyTypeKey(),\n+                        query.getPage(),\n+                        query.getSize(),\n+                        getOrderByClauses(query.getOrderBy())),\n+                query.getPage(),\n+                query.getSize(),\n+                logic.count(\n+                        type,\n+                        query.getResource(),\n+                        query.getAnyTypeKind(),\n+                        query.getAnyTypeKey()));\n     }\n \n     @Override"},{"sha":"c118224747c3f602a2eef7f693ca773b1526f7bf","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -166,7 +166,7 @@ protected Map<Long, TaskExecTO> execProvisioningTasks(final TaskService taskServ\n \n     protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n         PagedResult<NotificationTaskTO> tasks =\n-                taskService.list(TaskType.NOTIFICATION, SyncopeClient.getListQueryBuilder().build());\n+                taskService.list(TaskType.NOTIFICATION, SyncopeClient.getTaskQueryBuilder().build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n "},{"sha":"31258411b6147352e03fc585f7bc3d6212e5ad80","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -48,7 +48,7 @@ public class PropagationTaskITCase extends AbstractTaskITCase {\n     public void paginatedList() {\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(2).build());\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getResult().size());\n \n@@ -58,7 +58,7 @@ public void paginatedList() {\n \n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(2).size(2).build());\n+                SyncopeClient.getTaskQueryBuilder().page(2).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getPage());\n         assertEquals(2, tasks.getResult().size());\n@@ -69,7 +69,7 @@ public void paginatedList() {\n \n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1000).size(2).build());\n+                SyncopeClient.getTaskQueryBuilder().page(1000).size(2).build());\n         assertNotNull(tasks);\n         assertTrue(tasks.getResult().isEmpty());\n     }\n@@ -127,15 +127,15 @@ public void issue196() {\n     @Test\n     public void bulkAction() {\n         PagedResult<PropagationTaskTO> before = taskService.list(\n-                TaskType.PROPAGATION, SyncopeClient.getListQueryBuilder().build());\n+                TaskType.PROPAGATION, SyncopeClient.getTaskQueryBuilder().build());\n \n         // create user with testdb resource\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         createUser(userTO);\n \n         List<PropagationTaskTO> after = new ArrayList<>(\n-                taskService.<PropagationTaskTO>list(TaskType.PROPAGATION, SyncopeClient.getListQueryBuilder().build()).\n+                taskService.<PropagationTaskTO>list(TaskType.PROPAGATION, SyncopeClient.getTaskQueryBuilder().build()).\n                 getResult());\n         after.removeAll(before.getResult());\n         assertFalse(after.isEmpty());\n@@ -149,7 +149,7 @@ public void bulkAction() {\n \n         taskService.bulk(bulkAction);\n \n-        assertFalse(taskService.list(TaskType.PROPAGATION, SyncopeClient.getListQueryBuilder().build()).getResult().\n+        assertFalse(taskService.list(TaskType.PROPAGATION, SyncopeClient.getTaskQueryBuilder().build()).getResult().\n                 containsAll(after));\n     }\n }"},{"sha":"5ddcae4224165726d41ac1a35e8f04ecbcacc004","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -81,7 +81,7 @@ public void read() {\n     @Test\n     public void list() {\n         PagedResult<PushTaskTO> tasks = taskService.list(\n-                TaskType.PUSH, SyncopeClient.getListQueryBuilder().build());\n+                TaskType.PUSH, SyncopeClient.getTaskQueryBuilder().build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof PushTaskTO)) {"},{"sha":"49c24e70bbd91a5fced0df15ea47993ac4de9865","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ReportITCase.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -30,11 +30,9 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n-import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n@@ -62,10 +60,10 @@ public void getReportletClasses() {\n \n     @Test\n     public void list() {\n-        PagedResult<ReportTO> reports = reportService.list(SyncopeClient.getListQueryBuilder().build());\n+        List<ReportTO> reports = reportService.list();\n         assertNotNull(reports);\n-        assertFalse(reports.getResult().isEmpty());\n-        for (ReportTO report : reports.getResult()) {\n+        assertFalse(reports.isEmpty());\n+        for (ReportTO report : reports) {\n             assertNotNull(report);\n         }\n     }"},{"sha":"42493af4424d4ead7c6915c83fa39a2c7479e496","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -55,7 +55,7 @@ public void getJobClasses() {\n     @Test\n     public void list() {\n         PagedResult<SchedTaskTO> tasks =\n-                taskService.list(TaskType.SCHEDULED, SyncopeClient.getListQueryBuilder().build());\n+                taskService.list(TaskType.SCHEDULED, SyncopeClient.getTaskQueryBuilder().build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SchedTaskTO) || task instanceof SyncTaskTO || task instanceof PushTaskTO) {"},{"sha":"f4db643268d9e53053058e1ab2a84aa5ca272020","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -90,7 +90,7 @@ public void getSyncActionsClasses() {\n     @Test\n     public void list() {\n         PagedResult<SyncTaskTO> tasks =\n-                taskService.list(TaskType.SYNCHRONIZATION, SyncopeClient.getListQueryBuilder().build());\n+                taskService.list(TaskType.SYNCHRONIZATION, SyncopeClient.getTaskQueryBuilder().build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SyncTaskTO)) {"},{"sha":"146c51b5900614ccfcc08652155978aa38e0552e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c14a20d7422805fe5b93e40915722e3e9474ddd2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=c14a20d7422805fe5b93e40915722e3e9474ddd2","patch":"@@ -146,7 +146,7 @@ public void createUserWithNoPropagation() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -163,7 +163,7 @@ public void createUserWithNoPropagation() {\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -348,7 +348,7 @@ public void create() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -399,7 +399,7 @@ public void create() {\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -694,7 +694,7 @@ public void update() {\n     @Test\n     public void updatePasswordOnly() {\n         int beforeTasks = taskService.list(TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(1).build()).getTotalCount();\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n         UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n@@ -712,7 +712,7 @@ public void updatePasswordOnly() {\n         assertNotNull(userTO.getChangePwdDate());\n \n         int afterTasks = taskService.list(TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(1).build()).getTotalCount();\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n         assertTrue(beforeTasks < afterTasks);\n@@ -724,7 +724,7 @@ public void verifyTaskRegistration() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -745,7 +745,7 @@ public void verifyTaskRegistration() {\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -771,7 +771,7 @@ public void verifyTaskRegistration() {\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();\n@@ -793,7 +793,7 @@ public void verifyTaskRegistration() {\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n+                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();"}]}