{"sha":"04e36d9190a5b1054199a5dc283b64265aac670d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA0ZTM2ZDkxOTBhNWIxMDU0MTk5YTVkYzI4M2I2NDI2NWFhYzY3MGQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-14T10:03:17Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-14T10:03:17Z"},"message":"bug-fix + review propagation manager\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246386 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b56bec33fcabac4cf84cb611b79e02d6b00c8eb0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b56bec33fcabac4cf84cb611b79e02d6b00c8eb0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/04e36d9190a5b1054199a5dc283b64265aac670d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04e36d9190a5b1054199a5dc283b64265aac670d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/04e36d9190a5b1054199a5dc283b64265aac670d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04e36d9190a5b1054199a5dc283b64265aac670d/comments","author":null,"committer":null,"parents":[{"sha":"f58943556bcd1273aaab69b07e92f502d45573fa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f58943556bcd1273aaab69b07e92f502d45573fa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f58943556bcd1273aaab69b07e92f502d45573fa"}],"stats":{"total":110,"additions":74,"deletions":36},"files":[{"sha":"406a7f97fd4f666522851bfe9996a0cadf4f5165","filename":"core/src/main/java/org/syncope/core/persistence/PropagationManager.java","status":"modified","additions":60,"deletions":24,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FPropagationManager.java?ref=04e36d9190a5b1054199a5dc283b64265aac670d","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence;\n \n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n import org.identityconnectors.framework.api.ConnectorFacade;\n@@ -46,19 +47,20 @@ public class PropagationManager {\n      * @return a set of provisioned resources.\n      */\n     public Set<String> provision(SyncopeUser user) {\n-        return provision(user, false, false);\n+        return provision(user, null, false);\n     }\n \n     /**\n      * Performs provisioning on each resource associated to the user.\n-     * If we ask for a synchronous provisioning passing true as second argument,\n-     * than exceptions won't be ignored but the process will be stoppend and a\n-     * runtime exception will be returned.\n+     * It is possible to ask for a synchronous provisioning for some resources\n+     * specifying a set of resource names.\n+     * Exceptions won't be ignored and the process will be stoppend if the\n+     * provisioning fails onto a synchronous resource.\n      * @param user to be created.\n      * @param synchronous to ask for a synchronous or asynchronous provisioning.\n      * @return a set of provisioned resources.\n      */\n-    public Set<String> provision(SyncopeUser user, boolean synchronous) {\n+    public Set<String> provision(SyncopeUser user, Set<String> synchronous) {\n         return provision(user, synchronous, false);\n     }\n \n@@ -69,19 +71,20 @@ public Set<String> provision(SyncopeUser user, boolean synchronous) {\n      * @return a set of updated resources.\n      */\n     public Set<String> update(SyncopeUser user) {\n-        return provision(user, false, true);\n+        return provision(user, null, true);\n     }\n \n     /**\n      * Performs update on each resource associated to the user.\n-     * If we ask for a synchronous update passing true as second argument,\n-     * than exceptions won't be ignored but the process will be stoppend and a\n-     * runtime exception will be returned.\n+     * It is possible to ask for a synchronous provisioning for some resources\n+     * specifying a set of resource names.\n+     * Exceptions won't be ignored and the process will be stoppend if the\n+     * provisioning fails onto a synchronous resource.\n      * @param user to be updated.\n      * @param synchronous to ask for a synchronous or asynchronous update.\n      * @return a set of updated resources.\n      */\n-    public Set<String> update(SyncopeUser user, boolean synchronous) {\n+    public Set<String> update(SyncopeUser user, Set<String> synchronous) {\n         return provision(user, synchronous, true);\n     }\n \n@@ -93,52 +96,85 @@ public Set<String> update(SyncopeUser user, boolean synchronous) {\n      * @return\n      */\n     private Set<String> provision(\n-            SyncopeUser user, boolean synchronous, boolean merge) {\n+            SyncopeUser user, Set<String> synchronous, boolean merge) {\n \n+        if (synchronous == null) {\n+            synchronous = Collections.EMPTY_SET;\n+        }\n+\n+        // set of provisioned resources\n         Set<String> provisioned = new HashSet<String>();\n \n+        // All of the resource to be provisioned\n         Set<Resource> resources = user.getResources();\n+\n         Set<SyncopeRole> roles = user.getRoles();\n \n         for (SyncopeRole role : roles) {\n             resources.addAll(role.getResources());\n         }\n \n+        // Resource to be provisioned synchronously\n+        Set<Resource> syncResources = new HashSet<Resource>();\n+\n+        // Resource to be provisioned asynchronously\n+        Set<Resource> asyncResources = new HashSet<Resource>();\n+\n+        for (Resource resource : resources) {\n+            if (synchronous.contains(resource.getName())) {\n+                syncResources.add(resource);\n+            } else {\n+                asyncResources.add(resource);\n+            }\n+        }\n+\n+        // synchronous propagation ...\n+\n         if (log.isDebugEnabled()) {\n             log.debug(\n-                    \"Provisioning \" + resources +\n+                    \"Synchronous provisioning of \" + resources +\n                     \" with user \" + user.getId());\n         }\n \n-        for (Resource resource : resources) {\n+        for (Resource resource : syncResources) {\n             try {\n \n                 propagate(user, resource, merge);\n                 provisioned.add(resource.getName());\n \n-            } catch (RuntimeException re) {\n+            } catch (Throwable t) {\n \n                 if (log.isErrorEnabled()) {\n                     log.error(\n-                            \"Runtime exception during provision on resource \" +\n-                            resource.getName(), re);\n+                            \"Exception during provision on resource \" +\n+                            resource.getName(), t);\n                 }\n \n-                if (synchronous) {\n-                    throw re;\n-                }\n+                throw new RuntimeException(t);\n+            }\n+        }\n+\n+        // asynchronous propagation ...\n+        \n+        if (log.isDebugEnabled()) {\n+            log.debug(\n+                    \"Asynchronous provisioning of \" + resources +\n+                    \" with user \" + user.getId());\n+        }\n+\n+        for (Resource resource : asyncResources) {\n+            try {\n+\n+                propagate(user, resource, merge);\n+                provisioned.add(resource.getName());\n \n             } catch (Throwable t) {\n \n                 if (log.isErrorEnabled()) {\n                     log.error(\n-                            \"Unknown exception during provision on resource \" +\n+                            \"Exception during provision on resource \" +\n                             resource.getName(), t);\n                 }\n-\n-                if (synchronous) {\n-                    throw new RuntimeException(t.getMessage());\n-                }\n             }\n         }\n "},{"sha":"a418939debb15fcfbe07df32783fade0c468f97d","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnectorInstance.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java?ref=04e36d9190a5b1054199a5dc283b64265aac670d","patch":"@@ -16,6 +16,7 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -67,7 +68,7 @@ public class ConnectorInstance extends AbstractBaseBean {\n      * Provisioning target resources associated to the connector.\n      * The connector can be considered the resource's type.\n      */\n-    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n+    @OneToMany(cascade = {CascadeType.REFRESH, CascadeType.MERGE},\n     fetch = FetchType.EAGER, mappedBy = \"connector\")\n     private Set<Resource> resources;\n "},{"sha":"fc99fa843bec7114c64aed967c49f67b4903b406","filename":"core/src/main/java/org/syncope/core/persistence/beans/Resource.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java?ref=04e36d9190a5b1054199a5dc283b64265aac670d","patch":"@@ -16,6 +16,7 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n@@ -55,7 +56,7 @@ public class Resource extends AbstractBaseBean {\n     /**\n      * Attribute mappings.\n      */\n-    @OneToMany(cascade = javax.persistence.CascadeType.MERGE,\n+    @OneToMany(cascade = {CascadeType.REFRESH, CascadeType.MERGE},\n     fetch = FetchType.EAGER, mappedBy = \"resource\")\n     private Set<SchemaMapping> mappings;\n "},{"sha":"a35c0505debb80e677a8ee709f535700129ac8f2","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=04e36d9190a5b1054199a5dc283b64265aac670d","patch":"@@ -556,8 +556,7 @@ public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n         }\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"Mappings found: \" +\n-                    roleMappings.getMappings());\n+            log.debug(\"Mappings found: \" + roleMappings.getMappings());\n         }\n \n         return roleMappings;"},{"sha":"4db40f6fd9066c55a9f303a2e34023ff3e01d56d","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=04e36d9190a5b1054199a5dc283b64265aac670d","patch":"@@ -49,14 +49,14 @@ public class ResourceDataBinder {\n \n     private SchemaDAO schemaDAO;\n \n-    private ConnectorInstanceDAO connectoInstanceDAO;\n+    private ConnectorInstanceDAO connectorInstanceDAO;\n \n     @Autowired\n     public ResourceDataBinder(\n             SchemaDAO schemaDAO, ConnectorInstanceDAO connectorInstanceDAO) {\n \n         this.schemaDAO = schemaDAO;\n-        this.connectoInstanceDAO = connectorInstanceDAO;\n+        this.connectorInstanceDAO = connectorInstanceDAO;\n     }\n \n     public Resource getResource(ResourceTO resourceTO)\n@@ -85,7 +85,7 @@ public Resource getResource(Resource resource, ResourceTO resourceTO)\n         ConnectorInstance connector = null;\n \n         if (resourceTO.getConnectorId() != null) {\n-            connector = connectoInstanceDAO.find(resourceTO.getConnectorId());\n+            connector = connectorInstanceDAO.find(resourceTO.getConnectorId());\n         }\n \n         if (connector == null) {\n@@ -108,8 +108,7 @@ public Resource getResource(Resource resource, ResourceTO resourceTO)\n                 getSchemaMappings(resource, resourceTO.getMappings()));\n \n         resource.setConnector(connector);\n-        // TODO: to be verified\n-        //connector.addResource(resource);\n+        connector.addResource(resource);\n \n         return resource;\n     }"},{"sha":"d681e93428a9eff9df440d115c5fd0d4a69ab2f7","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/PropagationManagerTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java?ref=04e36d9190a5b1054199a5dc283b64265aac670d","patch":"@@ -85,7 +85,8 @@ public final void provisionWithException() {\n         try {\n \n             PropagationManager propagationManager = new PropagationManager();\n-            propagationManager.provision(user, true);\n+            propagationManager.provision(\n+                    user, Collections.singleton(\"ws-target-resource-2\"));\n \n         } catch (RuntimeException e) {\n             re = e;\n@@ -109,7 +110,8 @@ public final void updateWithException() {\n         try {\n \n             PropagationManager propagationManager = new PropagationManager();\n-            propagationManager.update(user, true);\n+            propagationManager.update(\n+                    user, Collections.singleton(\"ws-target-resource-2\"));\n \n         } catch (RuntimeException e) {\n             re = e;"},{"sha":"68ceead7a581c14baf798838c7d2974c005d3159","filename":"core/src/test/java/org/syncope/core/test/rest/ResourceTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04e36d9190a5b1054199a5dc283b64265aac670d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java?ref=04e36d9190a5b1054199a5dc283b64265aac670d","patch":"@@ -37,7 +37,7 @@ public void create() {\n         ResourceTO resourceTO = new ResourceTO();\n \n         resourceTO.setName(resourceName);\n-        resourceTO.setConnectorId(100L);\n+        resourceTO.setConnectorId(102L);\n \n         SchemaMappingTOs schemaMappingTOs = new SchemaMappingTOs();\n "}]}