{"sha":"c1502d5db7c8d3d4bca05380627108986738dc32","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMxNTAyZDVkYjdjOGQzZDRiY2EwNTM4MDYyNzEwODk4NjczOGRjMzI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-29T13:47:15Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-29T14:25:11Z"},"message":"[SYNCOPE-1511] Enhancements for PostgreSQL JSONB and MySQL JSON","tree":{"sha":"10ba1961ec33fabdd3ea4ac90c9c87cae6fe89d2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/10ba1961ec33fabdd3ea4ac90c9c87cae6fe89d2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c1502d5db7c8d3d4bca05380627108986738dc32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1502d5db7c8d3d4bca05380627108986738dc32","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c1502d5db7c8d3d4bca05380627108986738dc32","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1502d5db7c8d3d4bca05380627108986738dc32/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3227eb13405fd33301c4da2f26470a3965defb30","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3227eb13405fd33301c4da2f26470a3965defb30","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3227eb13405fd33301c4da2f26470a3965defb30"}],"stats":{"total":906,"additions":645,"deletions":261},"files":[{"sha":"54a749a5ae5702c993faed569f3b2fff888bb611","filename":"archetype/pom.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/archetype%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/archetype%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fpom.xml?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -42,7 +42,7 @@ under the License.\n       <extension>\n         <groupId>org.apache.maven.archetype</groupId>\n         <artifactId>archetype-packaging</artifactId>\n-        <version>3.1.1</version>\n+        <version>3.1.2</version>\n       </extension>\n     </extensions>\n \n@@ -51,7 +51,7 @@ under the License.\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-archetype-plugin</artifactId>\n-          <version>3.1.1</version>\n+          <version>3.1.2</version>\n           <extensions>true</extensions>\n         </plugin>\n       </plugins>\n@@ -151,6 +151,7 @@ under the License.\n         <directory>../core/persistence-jpa-json/src/main/resources/</directory>\n         <includes>\n           <include>META-INF/*</include>\n+          <include>audit/*</include>\n         </includes>\n         <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/main/resources</targetPath>\n       </resource>"},{"sha":"9d183e64358fbb9c55e7b26ee6c66cf67f6b9992","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AuditEntryTO.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuditEntryTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuditEntryTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuditEntryTO.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -18,21 +18,18 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n-import org.apache.syncope.common.lib.BaseBean;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.BaseBean;\n \n @XmlRootElement(name = \"audit\")\n @XmlType\n-public class AuditEntryTO extends BaseBean implements EntityTO  {\n-    private static final long serialVersionUID = 1215115961911228005L;\n+public class AuditEntryTO extends BaseBean implements EntityTO {\n \n-    private final List<String> inputs = new ArrayList<>();\n+    private static final long serialVersionUID = 1215115961911228005L;\n \n     private String who;\n \n@@ -44,6 +41,8 @@ public class AuditEntryTO extends BaseBean implements EntityTO  {\n \n     private String before;\n \n+    private final List<String> inputs = new ArrayList<>();\n+\n     private String output;\n \n     private Date date;"},{"sha":"53a767519067ef13d5db87181844620f796e588c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -45,7 +45,7 @@ public static String getAuditEventLoggerName(final String domain, final String l\n         return domain + '.' + loggerName;\n     }\n \n-    private final AuditElements.EventCategoryType type;\n+    private final EventCategoryType type;\n \n     private final String category;\n "},{"sha":"5992024d0278ce2bab45d680e760acdc7dd401d0","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AuditQuery.java","status":"modified","additions":106,"deletions":49,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -18,68 +18,49 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n-import org.apache.syncope.common.lib.types.AuditElements;\n-\n-import javax.ws.rs.QueryParam;\n-\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.media.ArraySchema;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public class AuditQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -2863334226169614417L;\n \n-    private String key;\n-\n-    private final List<AuditElements.Result> results = new ArrayList<>();\n-\n-    private final List<String> events = new ArrayList<>();\n-\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @QueryParam(\"key\")\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n-    public List<AuditElements.Result> getResults() {\n-        return results;\n-    }\n+    public static class Builder extends AbstractQuery.Builder<AuditQuery, Builder> {\n \n-    @QueryParam(\"results\")\n-    public void setResults(final List<AuditElements.Result> results) {\n-        if (results != null) {\n-            this.results.addAll(results);\n+        public Builder(final String entityKey) {\n+            super();\n+            getInstance().setEntityKey(entityKey);\n         }\n-    }\n \n-    public List<String> getEvents() {\n-        return events;\n-    }\n-\n-    @QueryParam(\"events\")\n-    public void setEvents(final List<String> events) {\n-        if (events != null) {\n-            this.events.addAll(events);\n+        @Override\n+        protected AuditQuery newInstance() {\n+            return new AuditQuery();\n         }\n-    }\n \n-    public static class Builder extends AbstractQuery.Builder<AuditQuery, Builder> {\n+        public Builder type(final AuditElements.EventCategoryType type) {\n+            getInstance().setType(type);\n+            return this;\n+        }\n \n-        public Builder key(final String keyword) {\n-            getInstance().setKey(keyword);\n+        public Builder category(final String category) {\n+            getInstance().setCategory(category);\n             return this;\n         }\n \n-        public Builder results(final List<AuditElements.Result> results) {\n-            getInstance().setResults(results);\n+        public Builder subcategory(final String subcategory) {\n+            getInstance().setSubcategory(subcategory);\n             return this;\n         }\n \n-        public Builder result(final AuditElements.Result result) {\n-            getInstance().getResults().add(result);\n+        public Builder event(final String event) {\n+            getInstance().getEvents().add(event);\n             return this;\n         }\n \n@@ -88,15 +69,91 @@ public Builder events(final List<String> events) {\n             return this;\n         }\n \n-        public Builder event(final String event) {\n-            getInstance().getEvents().add(event);\n+        public Builder result(final AuditElements.Result result) {\n+            getInstance().setResult(result);\n             return this;\n         }\n+    }\n \n-        @Override\n-        protected AuditQuery newInstance() {\n-            return new AuditQuery();\n-        }\n+    private String entityKey;\n+\n+    private AuditElements.EventCategoryType type;\n+\n+    private String category;\n+\n+    private String subcategory;\n+\n+    private final List<String> events = new ArrayList<>();\n+\n+    private AuditElements.Result result;\n+\n+    @Parameter(name = JAXRSService.PARAM_ENTITY_KEY, description = \"audit entity key to match\", schema =\n+            @Schema(implementation = String.class, example = \"50592942-73ec-44c4-a377-e859524245e4\"))\n+    public String getEntityKey() {\n+        return entityKey;\n+    }\n+\n+    @NotNull\n+    @QueryParam(JAXRSService.PARAM_ENTITY_KEY)\n+    public void setEntityKey(final String entityKey) {\n+        this.entityKey = entityKey;\n+    }\n+\n+    @Parameter(name = \"type\", description = \"audit type to match\", schema =\n+            @Schema(implementation = AuditElements.EventCategoryType.class))\n+    public AuditElements.EventCategoryType getType() {\n+        return type;\n     }\n \n+    @QueryParam(\"type\")\n+    public void setType(final AuditElements.EventCategoryType type) {\n+        this.type = type;\n+    }\n+\n+    @Parameter(name = \"category\", description = \"audit category to match\", schema =\n+            @Schema(implementation = String.class))\n+    public String getCategory() {\n+        return category;\n+    }\n+\n+    @QueryParam(\"category\")\n+    public void setCategory(final String category) {\n+        this.category = category;\n+    }\n+\n+    @Parameter(name = \"subcategory\", description = \"audit subcategory to match\", schema =\n+            @Schema(implementation = String.class))\n+    public String getSubcategory() {\n+        return subcategory;\n+    }\n+\n+    @QueryParam(\"subcategory\")\n+    public void setSubcategory(final String subcategory) {\n+        this.subcategory = subcategory;\n+    }\n+\n+    @Parameter(name = \"result\", description = \"audit result to match\", schema =\n+            @Schema(implementation = AuditElements.Result.class))\n+    public AuditElements.Result getResult() {\n+        return result;\n+    }\n+\n+    @QueryParam(\"result\")\n+    public void setResult(final AuditElements.Result result) {\n+        this.result = result;\n+    }\n+\n+    @Parameter(name = \"events\", description = \"audit events(s) to match\", array =\n+            @ArraySchema(uniqueItems = true, schema =\n+                    @Schema(implementation = String.class)))\n+    public List<String> getEvents() {\n+        return events;\n+    }\n+\n+    @QueryParam(\"events\")\n+    public void setEvents(final List<String> events) {\n+        if (events != null) {\n+            this.events.addAll(events);\n+        }\n+    }\n }"},{"sha":"6a5ac6147f2e48ab46701c9403a2adbba5de3b90","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskQuery.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -133,8 +133,6 @@ public String getEntityKey() {\n         return entityKey;\n     }\n \n-    @Parameter(name = JAXRSService.PARAM_RESOURCE, description = \" key\", schema =\n-            @Schema(implementation = String.class, example = \"resource-ldap\"))\n     @QueryParam(JAXRSService.PARAM_ENTITY_KEY)\n     public void setEntityKey(final String entityKey) {\n         this.entityKey = entityKey;"},{"sha":"503549426c373e2d22b458264237b2bf17f82222","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuditService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuditService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuditService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuditService.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -38,7 +38,7 @@\n @Tag(name = \"Audits\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"audits\")\n public interface AuditService {\n \n@@ -49,6 +49,6 @@ public interface AuditService {\n      * @return paged list of objects matching the given query\n      */\n     @GET\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<AuditEntryTO> search(@BeanParam AuditQuery auditQuery);\n }"},{"sha":"f57eda98a26d255627876cd3750b67892614adee","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AuditLogic.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -46,17 +46,21 @@ public class AuditLogic extends AbstractTransactionalLogic<AuditEntryTO> {\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     public Pair<Integer, List<AuditEntryTO>> search(\n-            final String key,\n+            final String entityKey,\n             final int page,\n             final int size,\n-            final List<AuditElements.Result> results,\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n             final List<String> events,\n+            final AuditElements.Result result,\n             final List<OrderByClause> orderByClauses) {\n \n-        Integer count = auditDAO.count(key);\n-        List<AuditEntry> matching = auditDAO.findByEntityKey(key, page, size, results, events, orderByClauses);\n+        Integer count = auditDAO.count(entityKey);\n+        List<AuditEntry> matching = auditDAO.findByEntityKey(\n+                entityKey, page, size, type, category, subcategory, events, result, orderByClauses);\n         List<AuditEntryTO> searchResults = matching.stream().\n-                map(binder::getAuditTO).\n+                map(auditEntry -> binder.getAuditTO(entityKey, auditEntry)).\n                 collect(Collectors.toList());\n         return Pair.of(count, searchResults);\n     }"},{"sha":"282d726ee561e2a84e4b97cf1c1c4080ae999c21","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -20,6 +20,7 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.sql.Timestamp;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -31,7 +32,6 @@\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.appender.db.ColumnMapping;\n import org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource;\n-import org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig;\n import org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;\n import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n@@ -65,21 +65,19 @@ public int getOrder() {\n         return 300;\n     }\n \n-    private static ColumnConfig[] buildColumnConfigs(final LoggerContext ctx) {\n-        ColumnConfig[] columnConfigs = {\n-            ColumnConfig.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).setName(\"EVENT_DATE\").setEventTimestamp(true).build(),\n-            ColumnConfig.newBuilder().setUnicode(false).\n+    private static ColumnMapping[] buildColumnMappings(final LoggerContext ctx) {\n+        return new ColumnMapping[] {\n+            ColumnMapping.newBuilder().\n+            setConfiguration(ctx.getConfiguration()).setName(\"EVENT_DATE\").setType(Timestamp.class).build(),\n+            ColumnMapping.newBuilder().\n             setConfiguration(ctx.getConfiguration()).setName(\"LOGGER_LEVEL\").setPattern(\"%level\").build(),\n-            ColumnConfig.newBuilder().setUnicode(false).\n+            ColumnMapping.newBuilder().\n             setConfiguration(ctx.getConfiguration()).setName(\"LOGGER\").setPattern(\"%logger\").build(),\n-            ColumnConfig.newBuilder().setUnicode(false).\n-            setConfiguration(ctx.getConfiguration()).setName(\"MESSAGE\").setPattern(\"%message\").build(),\n-            ColumnConfig.newBuilder().setUnicode(false).\n+            ColumnMapping.newBuilder().\n+            setConfiguration(ctx.getConfiguration()).setName(AuditDAO.MESSAGE_COLUMN).setPattern(\"%message\").build(),\n+            ColumnMapping.newBuilder().\n             setConfiguration(ctx.getConfiguration()).setName(\"THROWABLE\").setPattern(\"%ex{full}\").build()\n         };\n-\n-        return columnConfigs;\n     }\n \n     @Override\n@@ -98,9 +96,8 @@ public void load(final String domain, final DataSource datasource) {\n                     setIgnoreExceptions(false).\n                     setConnectionSource(new DataSourceConnectionSource(domain, datasource)).\n                     setBufferSize(0).\n-                    setTableName(AuditDAO.TABLE_NAME).\n-                    setColumnConfigs(buildColumnConfigs(ctx)).\n-                    setColumnMappings(new ColumnMapping[0]).\n+                    setTableName(AuditDAO.TABLE).\n+                    setColumnMappings(buildColumnMappings(ctx)).\n                     build();\n             appender.start();\n             ctx.getConfiguration().addAppender(appender);"},{"sha":"b646f9155e02fdfa61c6ebfaa2fd7597acfe875a","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuditServiceImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -38,11 +38,14 @@ public class AuditServiceImpl extends AbstractServiceImpl implements AuditServic\n     @Override\n     public PagedResult<AuditEntryTO> search(final AuditQuery auditQuery) {\n         Pair<Integer, List<AuditEntryTO>> result = logic.search(\n-                auditQuery.getKey(),\n+                auditQuery.getEntityKey(),\n                 auditQuery.getPage(),\n                 auditQuery.getSize(),\n-                auditQuery.getResults(),\n+                auditQuery.getType(),\n+                auditQuery.getCategory(),\n+                auditQuery.getSubcategory(),\n                 auditQuery.getEvents(),\n+                auditQuery.getResult(),\n                 getOrderByClauses(auditQuery.getOrderBy()));\n         return buildPagedResult(result.getRight(), auditQuery.getPage(), auditQuery.getSize(), result.getLeft());\n     }"},{"sha":"5a78787c0a4203becfc5de92ec344bf76178fc26","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AuditDAO.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditDAO.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -26,12 +26,20 @@\n \n public interface AuditDAO {\n \n-    String TABLE_NAME = \"SYNCOPEAUDIT\";\n+    String TABLE = \"SYNCOPEAUDIT\";\n \n-    List<AuditEntry> findByEntityKey(String key, int page, int size,\n-                                     List<AuditElements.Result> results,\n-                                     List<String> events,\n-                                     List<OrderByClause> orderByClauses);\n+    String MESSAGE_COLUMN = \"MESSAGE\";\n \n-    Integer count(String key);\n+    List<AuditEntry> findByEntityKey(\n+            String entityKey,\n+            int page,\n+            int size,\n+            AuditElements.EventCategoryType type,\n+            String category,\n+            String subcategory,\n+            List<String> events,\n+            AuditElements.Result result,\n+            List<OrderByClause> orderByClauses);\n+\n+    int count(String key);\n }"},{"sha":"2b10e43a275d07d798560ee8580258c150ea26c3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AuditEntry.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAuditEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAuditEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAuditEntry.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -18,10 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-\n import java.io.Serializable;\n import java.util.Date;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n \n public interface AuditEntry extends Serializable {\n \n@@ -38,6 +37,4 @@ public interface AuditEntry extends Serializable {\n     String getThrowable();\n \n     Date getDate();\n-\n-    String getKey();\n }"},{"sha":"a921db1e64c2300628dc11970d4018c50cfb940d","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAuditDAO.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAuditDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAuditDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAuditDAO.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.springframework.util.CollectionUtils;\n+\n+public abstract class AbstractJPAJSONAuditDAO extends JPAAuditDAO {\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    protected abstract static class JSONMessageCriteriaBuilder extends MessageCriteriaBuilder {\n+\n+        protected String entityKey;\n+\n+        private AuditElements.EventCategoryType type;\n+\n+        private String category;\n+\n+        private String subcategory;\n+\n+        private List<String> events;\n+\n+        private AuditElements.Result result;\n+\n+        @Override\n+        protected MessageCriteriaBuilder entityKey(final String entityKey) {\n+            this.entityKey = entityKey;\n+            return this;\n+        }\n+\n+        @Override\n+        public MessageCriteriaBuilder type(final AuditElements.EventCategoryType type) {\n+            this.type = type;\n+            return this;\n+        }\n+\n+        @Override\n+        public MessageCriteriaBuilder category(final String category) {\n+            this.category = category;\n+            return this;\n+        }\n+\n+        @Override\n+        public MessageCriteriaBuilder subcategory(final String subcategory) {\n+            this.subcategory = subcategory;\n+            return this;\n+        }\n+\n+        @Override\n+        public MessageCriteriaBuilder events(final List<String> events) {\n+            this.events = events;\n+            return this;\n+        }\n+\n+        @Override\n+        public MessageCriteriaBuilder result(final AuditElements.Result result) {\n+            this.result = result;\n+            return this;\n+        }\n+\n+        private Optional<ObjectNode> buildContainer() {\n+            ObjectNode logger = MAPPER.createObjectNode();\n+            if (type != null) {\n+                logger.put(\"type\", type.name());\n+            }\n+            if (StringUtils.isNotBlank(category)) {\n+                logger.put(\"category\", category);\n+            }\n+            if (StringUtils.isNotBlank(subcategory)) {\n+                logger.put(\"subcategory\", subcategory);\n+            }\n+            if (result != null) {\n+                logger.put(\"result\", result.name());\n+            }\n+\n+            if (!logger.isEmpty()) {\n+                ObjectNode container = MAPPER.createObjectNode();\n+                container.set(\"logger\", logger);\n+                return Optional.of(container);\n+            }\n+\n+            return Optional.empty();\n+        }\n+\n+        protected abstract String doBuild(List<ObjectNode> containers);\n+\n+        @Override\n+        public String build() {\n+            List<ObjectNode> containers = new ArrayList<>();\n+            if (CollectionUtils.isEmpty(events)) {\n+                buildContainer().ifPresent(containers::add);\n+            } else {\n+                events.forEach(event -> buildContainer().ifPresent(container -> {\n+                    ((ObjectNode) container.get(\"logger\")).put(\"event\", event);\n+                    containers.add(container);\n+                }));\n+            }\n+\n+            return doBuild(containers);\n+        }\n+    }\n+}"},{"sha":"020069be062fc576192c714b3981ffc505ac6446","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAuditDAO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditDAO.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+public class MyJPAJSONAuditDAO extends AbstractJPAJSONAuditDAO {\n+\n+    private static class MyMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n+\n+        @Override\n+        protected String doBuild(final List<ObjectNode> containers) {\n+            query.append('(').append(MESSAGE_COLUMN).append(\" -> '$.before' LIKE '%\").append(entityKey).\n+                    append(\"%' OR \").append(MESSAGE_COLUMN).append(\" -> '$.input' LIKE '%\").append(entityKey).\n+                    append(\"%' OR \").append(MESSAGE_COLUMN).append(\" -> '$.output' LIKE '%\").append(entityKey).\n+                    append(\"%')\");\n+\n+            if (!containers.isEmpty()) {\n+                query.append(\" AND (\").\n+                        append(containers.stream().map(container -> \"JSON_CONTAINS(\" + MESSAGE_COLUMN + \", '\"\n+                        + POJOHelper.serialize(container).replace(\"'\", \"''\")\n+                        + \"')\").collect(Collectors.joining(\" OR \"))).\n+                        append(')');\n+            }\n+\n+            return query.toString();\n+        }\n+    }\n+\n+    @Override\n+    protected MessageCriteriaBuilder messageCriteriaBuilder(final String entityKey) {\n+        return new MyMessageCriteriaBuilder().entityKey(entityKey);\n+    }\n+}"},{"sha":"54ea8285f786300671acee3e5dff22d331eb4388","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAuditDAO.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditDAO.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractJPAJSONAuditDAO.JSONMessageCriteriaBuilder;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+public class PGJPAJSONAuditDAO extends AbstractJPAJSONAuditDAO {\n+\n+    private static class PGMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n+\n+        @Override\n+        protected String doBuild(final List<ObjectNode> containers) {\n+            query.append('(').append(MESSAGE_COLUMN).append(\" ->> 'before' LIKE '%\").append(entityKey).\n+                    append(\"%' OR \").append(MESSAGE_COLUMN).append(\" ->> 'input' LIKE '%\").append(entityKey).\n+                    append(\"%' OR \").append(MESSAGE_COLUMN).append(\" ->> 'output' LIKE '%\").append(entityKey).\n+                    append(\"%')\");\n+\n+            if (!containers.isEmpty()) {\n+                query.append(\" AND (\").\n+                        append(containers.stream().map(container -> MESSAGE_COLUMN + \" @> '\"\n+                        + POJOHelper.serialize(container).replace(\"'\", \"''\")\n+                        + \"'::jsonb\").collect(Collectors.joining(\" OR \"))).\n+                        append(')');\n+            }\n+\n+            return query.toString();\n+        }\n+    }\n+\n+    @Override\n+    protected String select() {\n+        return MESSAGE_COLUMN + \"::text\";\n+    }\n+\n+    @Override\n+    protected MessageCriteriaBuilder messageCriteriaBuilder(final String entityKey) {\n+        return new PGMessageCriteriaBuilder().entityKey(entityKey);\n+    }\n+}"},{"sha":"af5d37b1e29c427a63cfb6178b6d1ab32544993e","filename":"core/persistence-jpa-json/src/main/resources/audit/audit_myjson.sql","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_myjson.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_myjson.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_myjson.sql?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -0,0 +1,24 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--   http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n+CREATE TABLE IF NOT EXISTS SYNCOPEAUDIT (\n+  EVENT_DATE TIMESTAMP,\n+  LOGGER_LEVEL VARCHAR(255) NOT NULL,\n+  LOGGER VARCHAR(255) NOT NULL,\n+  MESSAGE JSON NOT NULL,\n+  THROWABLE TEXT\n+) ENGINE=InnoDB;"},{"sha":"0edbdf8bdbe593cc8d806651298c895d76b72739","filename":"core/persistence-jpa-json/src/main/resources/audit/audit_pgjsonb.sql","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_pgjsonb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_pgjsonb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_pgjsonb.sql?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -0,0 +1,25 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--   http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n+CREATE TABLE IF NOT EXISTS SYNCOPEAUDIT (\n+  EVENT_DATE TIMESTAMP,\n+  LOGGER_LEVEL VARCHAR(255) NOT NULL,\n+  LOGGER VARCHAR(255) NOT NULL,\n+  MESSAGE JSONB NOT NULL,\n+  THROWABLE TEXT\n+);\n+CREATE INDEX SYNCOPEAUDIT_idx ON SYNCOPEAUDIT USING gin ((MESSAGE) jsonb_path_ops)"},{"sha":"6dfdf264a7b08488962bf989acf210cf97b3b459","filename":"core/persistence-jpa-json/src/main/resources/myjson/domains/Master.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -25,4 +25,4 @@ Master.orm=META-INF/spring-orm-myjson.xml\n Master.pool.maxActive=10\n Master.pool.minIdle=2\n \n-Master.audit.sql=audit_mysql_innodb.sql\n+Master.audit.sql=audit_myjson.sql"},{"sha":"a80d72e9c581ea53fd4fa640d94694a42bd98698","filename":"core/persistence-jpa-json/src/main/resources/myjson/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"4ab67b09b619d1f0b5c46c79892b8e10d99b68f5","filename":"core/persistence-jpa-json/src/main/resources/pgjsonb/domains/Master.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fdomains%2FMaster.properties?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -25,4 +25,4 @@ Master.orm=META-INF/spring-orm-pgjsonb.xml\n Master.pool.maxActive=10\n Master.pool.minIdle=2\n \n-Master.audit.sql=audit.sql\n+Master.audit.sql=audit_pgjsonb.sql"},{"sha":"0912595d0c31e1e725ab3f2ef68ea7c8b10ab5be","filename":"core/persistence-jpa-json/src/main/resources/pgjsonb/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnySearchDAO\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"4ce8ec68d714fff10c728150bfe4c49e7f93a76c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":28,"deletions":18,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -25,6 +25,7 @@\n import javax.validation.Validator;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuditDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n@@ -80,13 +81,13 @@ public CommonEntityManagerFactoryConf commonEMFConf() {\n         if (OPENJPA_LOG.isDebugEnabled()) {\n             jpaPropertyMap.put(\"openjpa.Log\", \"SQL=TRACE\");\n             jpaPropertyMap.put(\"openjpa.ConnectionFactoryProperties\",\n-                \"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=120\");\n+                    \"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=120\");\n         }\n \n         jpaPropertyMap.put(\"openjpa.NontransactionalWrite\", false);\n \n         jpaPropertyMap.put(\"openjpa.jdbc.MappingDefaults\",\n-            \"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict,\"\n+                \"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict,\"\n                 + \"FieldStrategies='\"\n                 + \"java.util.Locale=org.apache.syncope.core.persistence.jpa.openjpa.LocaleValueHandler,\"\n                 + \"java.lang.Boolean=org.apache.syncope.core.persistence.jpa.openjpa.BooleanValueHandler'\");\n@@ -102,75 +103,84 @@ public CommonEntityManagerFactoryConf commonEMFConf() {\n \n     @Bean\n     public EntityFactory entityFactory()\n-        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-        IllegalArgumentException, InvocationTargetException {\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+            IllegalArgumentException, InvocationTargetException {\n \n         return (EntityFactory) Class.forName(env.getProperty(\"entity.factory\")).getConstructor().newInstance();\n     }\n \n     @ConditionalOnMissingBean(name = \"plainSchemaDAO\")\n     @Bean\n     public PlainSchemaDAO plainSchemaDAO()\n-        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-        IllegalArgumentException, InvocationTargetException {\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+            IllegalArgumentException, InvocationTargetException {\n \n         return (PlainSchemaDAO) Class.forName(env.getProperty(\"plainSchema.dao\")).getConstructor().newInstance();\n     }\n \n     @ConditionalOnMissingBean(name = \"plainAttrDAO\")\n     @Bean\n     public PlainAttrDAO plainAttrDAO()\n-        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-        IllegalArgumentException, InvocationTargetException {\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+            IllegalArgumentException, InvocationTargetException {\n \n         return (PlainAttrDAO) Class.forName(env.getProperty(\"plainAttr.dao\")).getConstructor().newInstance();\n     }\n \n     @ConditionalOnMissingBean(name = \"plainAttrValueDAO\")\n     @Bean\n     public PlainAttrValueDAO plainAttrValueDAO()\n-        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-        IllegalArgumentException, InvocationTargetException {\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+            IllegalArgumentException, InvocationTargetException {\n \n         return (PlainAttrValueDAO) Class.forName(env.getProperty(\"plainAttrValue.dao\")).getConstructor().newInstance();\n     }\n \n     @ConditionalOnMissingBean(name = \"anySearchDAO\")\n     @Bean\n     public AnySearchDAO anySearchDAO()\n-        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-        IllegalArgumentException, InvocationTargetException {\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+            IllegalArgumentException, InvocationTargetException {\n \n         return (AnySearchDAO) Class.forName(env.getProperty(\"any.search.dao\")).getConstructor().newInstance();\n     }\n \n     @ConditionalOnMissingBean(name = \"userDAO\")\n     @Bean\n     public UserDAO userDAO()\n-        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-        IllegalArgumentException, InvocationTargetException {\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+            IllegalArgumentException, InvocationTargetException {\n \n         return (UserDAO) Class.forName(env.getProperty(\"user.dao\")).getConstructor().newInstance();\n     }\n \n     @ConditionalOnMissingBean(name = \"groupDAO\")\n     @Bean\n     public GroupDAO groupDAO()\n-        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-        IllegalArgumentException, InvocationTargetException {\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+            IllegalArgumentException, InvocationTargetException {\n \n         return (GroupDAO) Class.forName(env.getProperty(\"group.dao\")).getConstructor().newInstance();\n     }\n \n     @ConditionalOnMissingBean(name = \"anyObjectDAO\")\n     @Bean\n     public AnyObjectDAO anyObjectDAO()\n-        throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n-        IllegalArgumentException, InvocationTargetException {\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+            IllegalArgumentException, InvocationTargetException {\n \n         return (AnyObjectDAO) Class.forName(env.getProperty(\"anyObject.dao\")).getConstructor().newInstance();\n     }\n \n+    @ConditionalOnMissingBean(name = \"auditDAO\")\n+    @Bean\n+    public AuditDAO auditDAO()\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+            IllegalArgumentException, InvocationTargetException {\n+\n+        return (AuditDAO) Class.forName(env.getProperty(\"audit.dao\")).getConstructor().newInstance();\n+    }\n+\n     @Bean\n     public Validator localValidatorFactoryBean() {\n         return new LocalValidatorFactoryBean();"},{"sha":"be47a8115f1e29d8e3685dc5b2e128be027c6b58","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAuditDAO.java","status":"modified","additions":106,"deletions":88,"changes":194,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditDAO.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -18,128 +18,146 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import javax.sql.DataSource;\n-import java.sql.Timestamp;\n-import java.util.Collections;\n-import java.util.Date;\n+import java.sql.Clob;\n+import java.sql.SQLException;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n-import org.apache.syncope.core.persistence.api.DomainHolder;\n+import javax.persistence.Query;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.core.persistence.api.dao.AuditDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n import org.apache.syncope.core.provisioning.api.AuditEntryImpl;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = Throwable.class)\n-@Repository\n public class JPAAuditDAO extends AbstractDAO<AbstractEntity> implements AuditDAO {\n \n-    @Autowired\n-    private DomainHolder domainHolder;\n+    protected static class MessageCriteriaBuilder {\n \n-    private static String buildWhereClauseForEntityKey(final String key) {\n-        return \" WHERE MESSAGE LIKE '%\" + key + \"%' \";\n-    }\n-\n-    @Override\n-    public List<AuditEntry> findByEntityKey(\n-            final String key,\n-            final int page,\n-            final int itemsPerPage,\n-            final List<AuditElements.Result> results,\n-            final List<String> events,\n-            final List<OrderByClause> orderByClauses) {\n-\n-        try {\n-            String query = new MessageCriteriaBuilder().\n-                    results(results).\n-                    events(events).\n-                    key(key).\n-                    build();\n-            String queryString = \"SELECT * FROM \" + TABLE_NAME + \" WHERE \" + query;\n-            if (!orderByClauses.isEmpty()) {\n-                queryString += \" ORDER BY \" + orderByClauses.stream().\n-                        map(orderBy -> orderBy.getField() + ' ' + orderBy.getDirection().name()).\n-                        collect(Collectors.joining(\",\"));\n-            }\n-            JdbcTemplate template = getJdbcTemplate();\n-            template.setMaxRows(itemsPerPage);\n-            template.setFetchSize(itemsPerPage * (page <= 0 ? 0 : page - 1));\n-            return template.query(queryString, (resultSet, i) -> {\n-                AuditEntryImpl entry = POJOHelper.deserialize(resultSet.getString(\"MESSAGE\"), AuditEntryImpl.class);\n-                String throwable = resultSet.getString(\"THROWABLE\");\n-                entry.setThrowable(throwable);\n-                Timestamp date = resultSet.getTimestamp(\"EVENT_DATE\");\n-                entry.setDate(new Date(date.getTime()));\n-                entry.setKey(key);\n-                return entry;\n-            });\n-        } catch (Exception e) {\n-            LOG.error(\"Unable to execute search query to find entity \" + key, e);\n-        }\n-        return Collections.emptyList();\n-    }\n+        protected final StringBuilder query = new StringBuilder();\n \n-    @Override\n-    public Integer count(final String key) {\n-        try {\n-            String queryString = \"SELECT COUNT(0) FROM \" + AuditDAO.TABLE_NAME + buildWhereClauseForEntityKey(key);\n-            return Objects.requireNonNull(getJdbcTemplate().queryForObject(queryString, Integer.class));\n-        } catch (Exception e) {\n-            LOG.error(\"Unable to execute count query for entity \" + key, e);\n+        protected MessageCriteriaBuilder entityKey(final String entityKey) {\n+            query.append(' ').append(MESSAGE_COLUMN).append(\" LIKE '%\\\"key\\\":\\\"\").append(entityKey).append(\"\\\"%'\");\n+            return this;\n         }\n-        return 0;\n-    }\n \n-    private JdbcTemplate getJdbcTemplate() {\n-        String domain = AuthContextUtils.getDomain();\n-        DataSource datasource = domainHolder.getDomains().get(domain);\n-        if (datasource == null) {\n-            throw new IllegalArgumentException(\"Could not get to DataSource for domain \" + domain);\n+        public MessageCriteriaBuilder type(final AuditElements.EventCategoryType type) {\n+            if (type != null) {\n+                query.append(\" AND \" + MESSAGE_COLUMN + \" LIKE '%\\\"type\\\":\\\"\").append(type.name()).append(\"\\\"%'\");\n+            }\n+            return this;\n         }\n-        return new JdbcTemplate(datasource);\n-    }\n \n-    private static class MessageCriteriaBuilder {\n-\n-        private final StringBuilder query = new StringBuilder(\" 1=1 \");\n-\n-        public MessageCriteriaBuilder key(final String key) {\n-            query.append(\" AND MESSAGE LIKE '%\\\"key\\\":\\\"\").append(key).append(\"\\\"%' \");\n+        public MessageCriteriaBuilder category(final String category) {\n+            if (StringUtils.isNotBlank(category)) {\n+                query.append(\" AND \" + MESSAGE_COLUMN + \" LIKE '%\\\"category\\\":\\\"\").append(category).append(\"\\\"%'\");\n+            }\n             return this;\n         }\n \n-        public MessageCriteriaBuilder results(final List<AuditElements.Result> results) {\n-            buildCriteriaFor(results.stream().map(Enum::name).collect(Collectors.toList()), \"result\");\n+        public MessageCriteriaBuilder subcategory(final String subcategory) {\n+            if (StringUtils.isNotBlank(subcategory)) {\n+                query.append(\" AND \" + MESSAGE_COLUMN + \" LIKE '%\\\"subcategory\\\":\\\"\").\n+                        append(subcategory).append(\"\\\"%'\");\n+            }\n             return this;\n         }\n \n-        private void buildCriteriaFor(final List<String> items, final String field) {\n-            if (!items.isEmpty()) {\n-                query.append(\" AND ( \");\n-                query.append(items.stream().map(res -> \"MESSAGE LIKE '%\\\"\" + field + \"\\\":\\\"\" + res + \"\\\"%'\").\n-                        collect(Collectors.joining(\" OR \")));\n-                query.append(\" )\");\n+        public MessageCriteriaBuilder events(final List<String> events) {\n+            if (!events.isEmpty()) {\n+                query.append(\" AND ( \").\n+                        append(events.stream().\n+                                map(event -> MESSAGE_COLUMN + \" LIKE '%\\\"event\\\":\\\"\" + event + \"\\\"%'\").\n+                                collect(Collectors.joining(\" OR \"))).\n+                        append(\" )\");\n             }\n+            return this;\n         }\n \n-        public MessageCriteriaBuilder events(final List<String> events) {\n-            buildCriteriaFor(events, \"event\");\n+        public MessageCriteriaBuilder result(final AuditElements.Result result) {\n+            if (result != null) {\n+                query.append(\" AND \").\n+                        append(MESSAGE_COLUMN).append(\" LIKE '%\\\"result\\\":\\\"\").append(result.name()).append(\"\\\"%' \");\n+            }\n             return this;\n         }\n \n         public String build() {\n-            query.trimToSize();\n             return query.toString();\n         }\n     }\n+\n+    protected MessageCriteriaBuilder messageCriteriaBuilder(final String entityKey) {\n+        return new MessageCriteriaBuilder().entityKey(entityKey);\n+    }\n+\n+    protected String select() {\n+        return MESSAGE_COLUMN;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<AuditEntry> findByEntityKey(\n+            final String entityKey,\n+            final int page,\n+            final int itemsPerPage,\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final List<String> events,\n+            final AuditElements.Result result,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        String queryString = \"SELECT \" + select()\n+                + \" FROM \" + TABLE\n+                + \" WHERE \" + messageCriteriaBuilder(entityKey).\n+                        type(type).\n+                        category(category).\n+                        subcategory(subcategory).\n+                        result(result).\n+                        events(events).\n+                        build();\n+        if (!orderByClauses.isEmpty()) {\n+            queryString += \" ORDER BY \" + orderByClauses.stream().\n+                    map(orderBy -> orderBy.getField() + ' ' + orderBy.getDirection().name()).\n+                    collect(Collectors.joining(\",\"));\n+        }\n+\n+        Query query = entityManager().createNativeQuery(queryString);\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+        if (itemsPerPage >= 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object> entries = query.getResultList();\n+        return entries.stream().map(row -> {\n+            String value;\n+            if (row instanceof Clob) {\n+                Clob clob = (Clob) row;\n+                try {\n+                    value = clob.getSubString(1, (int) clob.length());\n+                } catch (SQLException e) {\n+                    LOG.error(\"Unexpected error reading Audit Entry for entity key {}\", entityKey, e);\n+                    return null;\n+                }\n+            } else {\n+                value = row.toString();\n+            }\n+            return POJOHelper.deserialize(value, AuditEntryImpl.class);\n+        }).filter(Objects::nonNull).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public int count(final String key) {\n+        String queryString = \"SELECT COUNT(0) FROM \" + TABLE\n+                + \" WHERE \" + messageCriteriaBuilder(key).build();\n+        Query countQuery = entityManager().createNativeQuery(queryString);\n+\n+        return ((Number) countQuery.getSingleResult()).intValue();\n+    }\n }"},{"sha":"1526b50f955089479c650a4d5a26ac239925c9b6","filename":"core/persistence-jpa/src/main/resources/audit/audit.sql","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -22,5 +22,3 @@ CREATE TABLE IF NOT EXISTS SYNCOPEAUDIT (\n   MESSAGE TEXT NOT NULL,\n   THROWABLE TEXT\n );\n-\n-COMMIT;"},{"sha":"4615af6b3fe4caa05e2387e015bd66daf7529271","filename":"core/persistence-jpa/src/main/resources/audit/audit_sqlserver.sql","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_sqlserver.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_sqlserver.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_sqlserver.sql?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -15,14 +15,13 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-IF NOT EXISTS\n-(SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SYNCOPEAUDIT]') AND type in (N'U'))\n-BEGIN\n+IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[SYNCOPEAUDIT]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n+DROP TABLE [dbo].[SYNCOPEAUDIT];\n+\n CREATE TABLE SYNCOPEAUDIT (\n   EVENT_DATE DATETIME,\n   LOGGER_LEVEL VARCHAR(255) NOT NULL,\n   LOGGER VARCHAR(255) NOT NULL,\n   MESSAGE TEXT NOT NULL,\n   THROWABLE TEXT\n-)\n-END\n+)  ON [PRIMARY];"},{"sha":"448aaef901080bb86a2b13269c0643156372083a","filename":"core/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"9681919f7002861f4f1b304b8872a50484f43b84","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditEntryImpl.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -49,8 +49,6 @@ public class AuditEntryImpl implements AuditEntry {\n \n     private Date date;\n \n-    private String key;\n-\n     @JsonCreator\n     public AuditEntryImpl(\n             @JsonProperty(\"who\") final String who,\n@@ -145,15 +143,6 @@ public void setDate(final Date date) {\n         this.date = date;\n     }\n \n-    @Override\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n     public static Builder builder() {\n         return new Builder();\n     }\n@@ -223,7 +212,6 @@ public AuditEntryImpl build() {\n             AuditEntryImpl entry = new AuditEntryImpl(who, logger, before, output, input);\n             entry.setDate(date);\n             entry.setThrowable(throwable);\n-            entry.setKey(key);\n             return entry;\n         }\n     }"},{"sha":"082f71f2cfa885ae2d924a13716c9aa5ca342f0c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AuditDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuditDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuditDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuditDataBinder.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -23,5 +23,5 @@\n \n public interface AuditDataBinder {\n \n-    AuditEntryTO getAuditTO(AuditEntry auditEntry);\n+    AuditEntryTO getAuditTO(String key, AuditEntry auditEntry);\n }"},{"sha":"de49702435b37f36c91184119788c0dc531e3018","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuditDataBinderImpl.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -31,36 +31,36 @@\n public class AuditDataBinderImpl implements AuditDataBinder {\n \n     @Override\n-    public AuditEntryTO getAuditTO(final AuditEntry auditEntry) {\n-        AuditEntryTO auditTO = new AuditEntryTO();\n-        auditTO.setKey(auditEntry.getKey());\n-        auditTO.setWho(auditEntry.getWho());\n-        auditTO.setDate(auditEntry.getDate());\n-        auditTO.setThrowable(auditEntry.getThrowable());\n-        auditTO.setLoggerName(auditEntry.getLogger().toLoggerName());\n+    public AuditEntryTO getAuditTO(final String key, final AuditEntry auditEntry) {\n+        AuditEntryTO auditEntryTO = new AuditEntryTO();\n+        auditEntryTO.setKey(key);\n+        auditEntryTO.setWho(auditEntry.getWho());\n+        auditEntryTO.setDate(auditEntry.getDate());\n+        auditEntryTO.setThrowable(auditEntry.getThrowable());\n+        auditEntryTO.setLoggerName(auditEntry.getLogger().toLoggerName());\n \n-        auditTO.setSubCategory(auditEntry.getLogger().getSubcategory());\n-        auditTO.setEvent(auditEntry.getLogger().getEvent());\n+        auditEntryTO.setSubCategory(auditEntry.getLogger().getSubcategory());\n+        auditEntryTO.setEvent(auditEntry.getLogger().getEvent());\n \n         if (auditEntry.getLogger().getResult() != null) {\n-            auditTO.setResult(auditEntry.getLogger().getResult().name());\n+            auditEntryTO.setResult(auditEntry.getLogger().getResult().name());\n         }\n \n         if (auditEntry.getBefore() != null) {\n-            auditTO.setBefore(POJOHelper.serialize(auditEntry.getBefore()));\n+            auditEntryTO.setBefore(POJOHelper.serialize(auditEntry.getBefore()));\n         }\n \n         if (auditEntry.getInput() != null) {\n-            auditTO.getInputs().addAll(Arrays.stream(auditEntry.getInput()).\n+            auditEntryTO.getInputs().addAll(Arrays.stream(auditEntry.getInput()).\n                     filter(Objects::nonNull).\n                     map(POJOHelper::serialize).\n                     collect(Collectors.toList()));\n         }\n \n         if (auditEntry.getOutput() != null) {\n-            auditTO.setOutput(POJOHelper.serialize(auditEntry.getOutput()));\n+            auditEntryTO.setOutput(POJOHelper.serialize(auditEntry.getOutput()));\n         }\n \n-        return auditTO;\n+        return auditEntryTO;\n     }\n }"},{"sha":"a0632d48820d283e66d443da43a2fc5e9b37e86b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/AuditReportlet.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -49,12 +49,12 @@ public class AuditReportlet extends AbstractReportlet {\n     private DataSource datasource;\n \n     private void doExtractConf(final ContentHandler handler, final AtomicReference<String> status) throws SAXException {\n-        status.set(\"Fetching \" + conf.getSize() + \" rows from the \" + AuditDAO.TABLE_NAME + \" table\");\n+        status.set(\"Fetching \" + conf.getSize() + \" rows from the \" + AuditDAO.TABLE + \" table\");\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(datasource);\n         jdbcTemplate.setMaxRows(conf.getSize());\n         List<Map<String, Object>> rows = jdbcTemplate.\n-                queryForList(\"SELECT * FROM \" + AuditDAO.TABLE_NAME + \" ORDER BY EVENT_DATE DESC\");\n+                queryForList(\"SELECT * FROM \" + AuditDAO.TABLE + \" ORDER BY EVENT_DATE DESC\");\n \n         handler.startElement(\"\", \"\", \"events\", null);\n         AttributesImpl atts = new AttributesImpl();"},{"sha":"42f77584fc6e19cea5f553749a53d0f3e3a2e479","filename":"docker/core/src/main/resources/persistence.properties.all","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditDAO\n openjpa.RemoteCommitProvider=${OPENJPA_REMOTE_COMMIT}"},{"sha":"cac21af75f29a93cafe8e0396a9032aa74ac8ae3","filename":"docker/core/src/main/resources/persistence.properties.myjson","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -24,4 +24,5 @@ user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONConfDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"b88b0525e70f71b808d0be732b40ef20fa65fe03","filename":"docker/core/src/main/resources/persistence.properties.pgjsonb","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnySearchDAO\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditDAO\n openjpa.RemoteCommitProvider=${OPENJPA_REMOTE_COMMIT}"},{"sha":"14b51433c412952b7dd8e9b90fd164a709bc786f","filename":"ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearc\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"a761142c5e333eecebfb74b5da9cbc546a2f850d","filename":"fit/core-reference/pom.xml","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -1251,14 +1251,15 @@ under the License.\n                   </build>\n                   <run>\n                     <env>\n-                      <ORACLE_DISABLE_ASYNCH_IO>true</ORACLE_DISABLE_ASYNCH_IO>\n+                      <ORACLE_ALLOW_REMOTE>true</ORACLE_ALLOW_REMOTE>\n+                      <ORACLE_ENABLE_XDB>true</ORACLE_ENABLE_XDB>\n                     </env>\n                     <ports>\n                       <port>1521:1521</port>\n                     </ports>\n                     <wait>\n-                      <log>Disconnected from Oracle Database</log>\n-                      <time>300000</time>\n+                      <log>Disconnected from Oracle Database 11g Express Edition</log>\n+                      <time>30000</time>\n                     </wait>                \n                   </run>\n                 </image>"},{"sha":"14b51433c412952b7dd8e9b90fd164a709bc786f","filename":"fit/core-reference/src/main/resources/elasticsearch/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearc\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"6dfdf264a7b08488962bf989acf210cf97b3b459","filename":"fit/core-reference/src/main/resources/myjson/domains/Master.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -25,4 +25,4 @@ Master.orm=META-INF/spring-orm-myjson.xml\n Master.pool.maxActive=10\n Master.pool.minIdle=2\n \n-Master.audit.sql=audit_mysql_innodb.sql\n+Master.audit.sql=audit_myjson.sql"},{"sha":"ede2331203f836791a27514966bf863046b7f074","filename":"fit/core-reference/src/main/resources/oracle/Dockerfile","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2FDockerfile","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2FDockerfile","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2FDockerfile?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -15,5 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-FROM store/oracle/database-enterprise:12.2.0.1-slim\n+FROM oracleinanutshell/oracle-xe-11g\n+\n ADD init.sql /docker-entrypoint-initdb.d/\n+"},{"sha":"4ab67b09b619d1f0b5c46c79892b8e10d99b68f5","filename":"fit/core-reference/src/main/resources/pgjsonb/domains/Master.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fdomains%2FMaster.properties?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -25,4 +25,4 @@ Master.orm=META-INF/spring-orm-pgjsonb.xml\n Master.pool.maxActive=10\n Master.pool.minIdle=2\n \n-Master.audit.sql=audit.sql\n+Master.audit.sql=audit_pgjsonb.sql"},{"sha":"7fa490448d9fadc25d08459473f5a9cbf08529af","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -47,7 +47,7 @@ private AuditEntryTO query(final AuditQuery query, final int maxWaitSeconds) {\n             i++;\n         } while (results.isEmpty() && i < maxWaitSeconds);\n         if (results.isEmpty()) {\n-            fail(\"Timeout when executing query for key \" + query.getKey());\n+            fail(\"Timeout when executing query for key \" + query.getEntityKey());\n         }\n \n         return results.get(0);\n@@ -58,24 +58,24 @@ public void findByUser() {\n         UserTO userTO = createUser(UserITCase.getUniqueSample(\"audit@syncope.org\")).getEntity();\n         assertNotNull(userTO.getKey());\n \n-        AuditQuery query = new AuditQuery.Builder().\n-                key(userTO.getKey()).orderBy(\"event_date desc\").\n+        AuditQuery query = new AuditQuery.Builder(userTO.getKey()).orderBy(\"event_date desc\").\n                 page(1).size(1).build();\n         AuditEntryTO entry = query(query, 50);\n         assertEquals(userTO.getKey(), entry.getKey());\n         userService.delete(userTO.getKey());\n     }\n \n     @Test\n-    public void findByUserAndByEventAndByResults() {\n+    public void findByUserAndOther() {\n         UserTO userTO = createUser(UserITCase.getUniqueSample(\"audit-2@syncope.org\")).getEntity();\n         assertNotNull(userTO.getKey());\n \n-        AuditQuery query = new AuditQuery.Builder().\n-                key(userTO.getKey()).\n+        AuditQuery query = new AuditQuery.Builder(userTO.getKey()).\n                 orderBy(\"event_date desc\").\n                 page(1).\n                 size(1).\n+                type(AuditElements.EventCategoryType.LOGIC).\n+                category(\"UserLogic\").\n                 event(\"create\").\n                 result(AuditElements.Result.SUCCESS).\n                 build();\n@@ -89,8 +89,7 @@ public void findByGroup() {\n         GroupTO groupTO = createGroup(GroupITCase.getBasicSample(\"AuditGroup\")).getEntity();\n         assertNotNull(groupTO.getKey());\n \n-        AuditQuery query = new AuditQuery.Builder().\n-                key(groupTO.getKey()).orderBy(\"event_date desc\").\n+        AuditQuery query = new AuditQuery.Builder(groupTO.getKey()).orderBy(\"event_date desc\").\n                 page(1).size(1).build();\n         AuditEntryTO entry = query(query, 50);\n         assertEquals(groupTO.getKey(), entry.getKey());"},{"sha":"6048c2f9b6cb543e06f2c03074152fbf35c1c188","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc","status":"modified","additions":18,"deletions":7,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1502d5db7c8d3d4bca05380627108986738dc32/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1502d5db7c8d3d4bca05380627108986738dc32/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc?ref=c1502d5db7c8d3d4bca05380627108986738dc32","patch":"@@ -90,6 +90,7 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnySearchDAO\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditDAO\n ....\n \n In `provisioning.properties`, replace as follows:\n@@ -109,6 +110,7 @@ Master.username=syncope\n Master.password=syncope\n Master.databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary\n Master.orm=META-INF/spring-orm-pgjsonb.xml\n+Master.audit.sql=audit_pgjsonb.sql\n ....\n \n [WARNING]\n@@ -209,6 +211,20 @@ Add the following dependency to `core/pom.xml`:\n </dependency>\n ----\n \n+In `persistence.properties`, replace as follows:\n+\n+....\n+entity.factory=org.apache.syncope.core.persistence.jpa.entity.MyJPAJSONEntityFactory\n+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainSchemaDAO\n+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO\n+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO\n+any.search.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO\n+user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n+group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditDAO\n+....\n+\n In `provisioning.properties`, replace as follows:\n \n ....\n@@ -217,8 +233,7 @@ quartz.sql=tables_mysql_innodb.sql\n ....\n \n [WARNING]\n-This assumes that the InnoDB engine is enabled in your MySQL instance - if this is not the case, then change the value\n-for `quartz.sql` to `tables_mysql.sql`.\n+This assumes that the InnoDB engine is enabled in your MySQL instance.\n \n In `domains/Master.properties` (for the `Master` domain), replace as follows:\n \n@@ -230,16 +245,12 @@ Master.username=syncope\n Master.password=syncope\n Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB,dateFractionDigits=3)\n Master.orm=META-INF/spring-orm-myjson.xml\n-Master.audit.sql=audit_mysql_innodb.sql\n+Master.audit.sql=audit_myjson.sql\n ....\n \n [CAUTION]\n It is important to set the collation to `utf8_general_ci` after creation of `syncope` database.\n \n-[WARNING]\n-This assumes that the InnoDB engine is enabled in your MySQL instance - if this is not the case, then change the value\n-for `Master.audit` to `audit.sql`.\n-\n [WARNING]\n This assumes that you have a MySQL instance running on localhost, listening on its default port 3306 with a database\n `syncope` fully accessible by user `syncope` with password `syncope`."}]}