{"sha":"df4bd83c9d4c8374991a57e33a496e93aeaa0f12","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRmNGJkODNjOWQ0YzgzNzQ5OTFhNTdlMzNhNDk2ZTkzYWVhYTBmMTI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-09-05T07:12:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-09-05T07:34:41Z"},"message":"[SYNCOPE-1199] Simpler check for assignable groups / any objects","tree":{"sha":"ef6b7f4d178c6ffc209703416faacf5da6d1635c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ef6b7f4d178c6ffc209703416faacf5da6d1635c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/df4bd83c9d4c8374991a57e33a496e93aeaa0f12","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/df4bd83c9d4c8374991a57e33a496e93aeaa0f12","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/df4bd83c9d4c8374991a57e33a496e93aeaa0f12","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/df4bd83c9d4c8374991a57e33a496e93aeaa0f12/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a7e8b95a5e585048ff2bbf23bab9e910f4b83527","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a7e8b95a5e585048ff2bbf23bab9e910f4b83527","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a7e8b95a5e585048ff2bbf23bab9e910f4b83527"}],"stats":{"total":60,"additions":8,"deletions":52},"files":[{"sha":"a0620e628ba0458c51684d0cd1c834c0a8c9e902","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/df4bd83c9d4c8374991a57e33a496e93aeaa0f12/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/df4bd83c9d4c8374991a57e33a496e93aeaa0f12/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=df4bd83c9d4c8374991a57e33a496e93aeaa0f12","patch":"@@ -43,15 +43,13 @@\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -121,15 +119,9 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    protected PolicyDAO policyDAO;\n-\n     @Autowired\n     protected RelationshipTypeDAO relationshipTypeDAO;\n \n-    @Autowired\n-    protected AnySearchDAO searchDAO;\n-\n     @Autowired\n     protected EntityFactory entityFactory;\n "},{"sha":"40bb036a28309c2901fc209d364e16e4c45e8d76","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":4,"deletions":22,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/df4bd83c9d4c8374991a57e33a496e93aeaa0f12/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/df4bd83c9d4c8374991a57e33a496e93aeaa0f12/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=df4bd83c9d4c8374991a57e33a496e93aeaa0f12","patch":"@@ -158,11 +158,6 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT);\n         if (anyObject.getRealm() != null) {\n             // relationships\n-            Collection<String> assignableAnyObjects = anyObjectTO.getRelationships().isEmpty()\n-                    ? Collections.<String>emptyList()\n-                    : searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n-                            map(a -> a.getKey()).collect(Collectors.toList());\n-\n             anyObjectTO.getRelationships().forEach(relationshipTO -> {\n                 if (StringUtils.isBlank(relationshipTO.getRightType())\n                         || AnyTypeKind.USER.name().equals(relationshipTO.getRightType())\n@@ -177,7 +172,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n                     AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n                     if (otherEnd == null) {\n                         LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-                    } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n+                    } else if (anyObject.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {\n                         RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n                         if (relationshipType == null) {\n                             LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n@@ -201,19 +196,14 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             });\n \n             // memberships\n-            Collection<String> assignableGroups = anyObjectTO.getMemberships().isEmpty()\n-                    ? Collections.<String>emptyList()\n-                    : searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n-                            map(g -> g.getKey()).collect(Collectors.toList());\n-\n             anyObjectTO.getMemberships().forEach(membershipTO -> {\n                 Group group = membershipTO.getRightKey() == null\n                         ? groupDAO.findByName(membershipTO.getGroupName())\n                         : groupDAO.find(membershipTO.getRightKey());\n                 if (group == null) {\n                     LOG.debug(\"Ignoring invalid group \"\n                             + membershipTO.getRightKey() + \" / \" + membershipTO.getGroupName());\n-                } else if (assignableGroups.contains(group.getKey())) {\n+                } else if (anyObject.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n                     AMembership membership = entityFactory.newEntity(AMembership.class);\n                     membership.setRightEnd(group);\n                     membership.setLeftEnd(anyObject);\n@@ -275,10 +265,6 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         Set<String> toBeProvisioned = new HashSet<>();\n \n         // relationships\n-        Collection<String> assignableAnyObjects =\n-                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n-                        map(a -> a.getKey()).collect(Collectors.toList());\n-\n         anyObjectPatch.getRelationships().stream().\n                 filter(patch -> patch.getRelationshipTO() != null).forEachOrdered((patch) -> {\n             RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n@@ -309,7 +295,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                         AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n                         if (otherEnd == null) {\n                             LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                        } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n+                        } else if (anyObject.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {\n                             ARelationship newRelationship = entityFactory.newEntity(ARelationship.class);\n                             newRelationship.setType(relationshipType);\n                             newRelationship.setRightEnd(otherEnd);\n@@ -335,10 +321,6 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n-        Collection<String> assignableGroups =\n-                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n-                        map(g -> g.getKey()).collect(Collectors.toList());\n-\n         anyObjectPatch.getMemberships().stream().\n                 filter((membPatch) -> (membPatch.getGroup() != null)).forEachOrdered(membPatch -> {\n             Optional<? extends AMembership> membership = anyObject.getMembership(membPatch.getGroup());\n@@ -356,7 +338,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                 Group group = groupDAO.find(membPatch.getGroup());\n                 if (group == null) {\n                     LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n-                } else if (assignableGroups.contains(group.getKey())) {\n+                } else if (anyObject.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n                     AMembership newMembership = entityFactory.newEntity(AMembership.class);\n                     newMembership.setRightEnd(group);\n                     newMembership.setLeftEnd(anyObject);"},{"sha":"989a0761e193191ae246af35e4c670c9cea3ea1b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":4,"deletions":22,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/df4bd83c9d4c8374991a57e33a496e93aeaa0f12/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/df4bd83c9d4c8374991a57e33a496e93aeaa0f12/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=df4bd83c9d4c8374991a57e33a496e93aeaa0f12","patch":"@@ -203,16 +203,11 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.USER);\n         if (user.getRealm() != null) {\n             // relationships\n-            Collection<String> assignableAnyObjects = userTO.getRelationships().isEmpty()\n-                    ? Collections.<String>emptyList()\n-                    : searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n-                            map(a -> a.getKey()).collect(Collectors.toList());\n-\n             userTO.getRelationships().forEach(relationshipTO -> {\n                 AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n                 if (otherEnd == null) {\n                     LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-                } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n+                } else if (user.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {\n                     RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n                     if (relationshipType == null) {\n                         LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n@@ -235,19 +230,14 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             });\n \n             // memberships\n-            Collection<String> assignableGroups = userTO.getMemberships().isEmpty()\n-                    ? Collections.<String>emptyList()\n-                    : searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n-                            map(g -> g.getKey()).collect(Collectors.toList());\n-\n             userTO.getMemberships().forEach(membershipTO -> {\n                 Group group = membershipTO.getRightKey() == null\n                         ? groupDAO.findByName(membershipTO.getGroupName())\n                         : groupDAO.find(membershipTO.getRightKey());\n                 if (group == null) {\n                     LOG.debug(\"Ignoring invalid group \"\n                             + membershipTO.getRightKey() + \" / \" + membershipTO.getGroupName());\n-                } else if (assignableGroups.contains(group.getKey())) {\n+                } else if (user.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n                     UMembership membership = entityFactory.newEntity(UMembership.class);\n                     membership.setRightEnd(group);\n                     membership.setLeftEnd(user);\n@@ -378,10 +368,6 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         Set<String> toBeProvisioned = new HashSet<>();\n \n         // relationships\n-        Collection<String> assignableAnyObjects =\n-                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n-                        map(a -> a.getKey()).collect(Collectors.toList());\n-\n         userPatch.getRelationships().stream().\n                 filter(patch -> patch.getRelationshipTO() != null).forEachOrdered((patch) -> {\n             RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n@@ -402,7 +388,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                     AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n                     if (otherEnd == null) {\n                         LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                    } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n+                    } else if (user.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {\n                         URelationship newRelationship = entityFactory.newEntity(URelationship.class);\n                         newRelationship.setType(relationshipType);\n                         newRelationship.setRightEnd(otherEnd);\n@@ -427,10 +413,6 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n-        Collection<String> assignableGroups =\n-                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n-                        map(g -> g.getKey()).collect(Collectors.toList());\n-\n         userPatch.getMemberships().stream().\n                 filter(membPatch -> membPatch.getGroup() != null).forEachOrdered((membPatch) -> {\n             Optional<? extends UMembership> membership = user.getMembership(membPatch.getGroup());\n@@ -449,7 +431,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                 Group group = groupDAO.find(membPatch.getGroup());\n                 if (group == null) {\n                     LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n-                } else if (assignableGroups.contains(group.getKey())) {\n+                } else if (user.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n                     UMembership newMembership = entityFactory.newEntity(UMembership.class);\n                     newMembership.setRightEnd(group);\n                     newMembership.setLeftEnd(user);"}]}