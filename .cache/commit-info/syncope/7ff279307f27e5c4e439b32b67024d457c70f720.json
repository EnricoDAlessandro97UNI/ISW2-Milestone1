{"sha":"7ff279307f27e5c4e439b32b67024d457c70f720","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdmZjI3OTMwN2YyN2U1YzRlNDM5YjMyYjY3MDI0ZDQ1N2M3MGY3MjA=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2019-10-09T10:50:19Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2019-10-09T10:50:19Z"},"message":"SYNCOPE-1465: Add executor information to Report executions (#124)\n\n* SYNCOPE-1465: Add executor information to Task and Report executions","tree":{"sha":"a2b4e5a0198cde7bfd570aa17cfcf06874342e8c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a2b4e5a0198cde7bfd570aa17cfcf06874342e8c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7ff279307f27e5c4e439b32b67024d457c70f720","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnbtrCRBK7hj4Ov3rIwAAdHIIAF1iSjPCSRoaGIth0Le73oqa\ngPkgHqiwaZIOz7XHhBNLk7Zvo7QT72bLUHalV4Q9BJvyE12f872tEZ7DvK/RT60l\nzSGhzzpCgcHoaAlu+AMXztV5VMz0ZgZBocRwSjoVKxk1060YubwyZEdNVWQ4oBFu\ntdEjpNkL65wTNkj57TJVDPOgAVYjm+omiURdOFgSeMJXyHihSqXKp90e7fVnAR/r\nUig/gCDTSCPPRzhr7P4xYzc9G0gqTkdQ4r17u4J9Jc19jGva6E2v8QARo11E/Jiy\nsXw4y2NZuVcRRRqPBydABa9btmJU5fvYpmzo2pst8msGhZFAuieu2yk9cvotbVY=\n=P32E\n-----END PGP SIGNATURE-----\n","payload":"tree a2b4e5a0198cde7bfd570aa17cfcf06874342e8c\nparent cb560bf69bf951bdff34abf3ffcad8fff82c6a11\nauthor Misagh Moayyed <mm1844@gmail.com> 1570618219 +0400\ncommitter GitHub <noreply@github.com> 1570618219 +0400\n\nSYNCOPE-1465: Add executor information to Report executions (#124)\n\n* SYNCOPE-1465: Add executor information to Task and Report executions"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7ff279307f27e5c4e439b32b67024d457c70f720","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7ff279307f27e5c4e439b32b67024d457c70f720","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7ff279307f27e5c4e439b32b67024d457c70f720/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"cb560bf69bf951bdff34abf3ffcad8fff82c6a11","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb560bf69bf951bdff34abf3ffcad8fff82c6a11","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cb560bf69bf951bdff34abf3ffcad8fff82c6a11"}],"stats":{"total":445,"additions":319,"deletions":126},"files":[{"sha":"da638bc9dc48c11ca4f451e7e90833d8e864b563","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportExecutionDetails.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -82,7 +82,7 @@ protected void next(\n         }\n \n         @Override\n-        protected void addFurtherAcions(final ActionsPanel<ExecTO> panel, final IModel<ExecTO> model) {\n+        protected void addFurtherActions(final ActionsPanel<ExecTO> panel, final IModel<ExecTO> model) {\n             panel.add(new ActionLink<ExecTO>() {\n \n                 private static final long serialVersionUID = -3722207913631435501L;"},{"sha":"9acb60e73e2aee5bbef3d22ff923f28bfc5bc511","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -96,7 +96,8 @@ protected List<IColumn<ExecTO, String>> getColumns() {\n         final List<IColumn<ExecTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n-\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"executor\", this), \"executor\", \"executor\"));\n+        \n         columns.add(new DatePropertyColumn<>(new StringResourceModel(\"start\", this), \"start\", \"start\"));\n \n         columns.add(new DatePropertyColumn<>(new StringResourceModel(\"end\", this), \"end\", \"end\"));\n@@ -139,12 +140,12 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n             }\n         }, ActionLink.ActionType.DELETE, IdRepoEntitlement.TASK_DELETE, true);\n \n-        addFurtherAcions(panel, model);\n+        addFurtherActions(panel, model);\n \n         return panel;\n     }\n \n-    protected void addFurtherAcions(final ActionsPanel<ExecTO> panel, final IModel<ExecTO> model) {\n+    protected void addFurtherActions(final ActionsPanel<ExecTO> panel, final IModel<ExecTO> model) {\n     }\n \n     @Override\n@@ -179,7 +180,7 @@ public ExecProvider(final String taskKey, final int paginatorRows) {\n \n         @Override\n         public Iterator<ExecTO> iterator(final long first, final long count) {\n-            int page = ((int) first / paginatorRows);\n+            int page = (int) first / paginatorRows;\n             return restClient.listExecutions(\n                     taskKey, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n                     iterator();"},{"sha":"33bfd9ea8b6c4fc0c9552db16c2f8bff79d5993d","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.properties?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -17,4 +17,5 @@\n start=Start\n end=End\n status=Status\n+executor=Executor\n execution.view=Result status of execution '${key}'"},{"sha":"dcc952b410a2cda18a5422f7d6a3e6b17fd07beb","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_it.properties?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -17,4 +17,5 @@\n start=Start\n end=End\n status=Stato\n+executor=Esecutore\n execution.view=Risultato dello stato dell'esecuzione '${key}'"},{"sha":"2325930d295a13f1fd8f22424020e93da733f55a","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel_ja.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_ja.properties?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -17,4 +17,5 @@\n start=\\u958b\\u59cb\n end=\\u7d42\\u4e86\n status=\\u30b9\\u30c6\\u30fc\\u30bf\\u30b9\n+executor=Executor\n execution.view=\\u5b9f\\u884c '${key}' \\u306e\\u7d50\\u679c\\u30b9\\u30c6\\u30fc\\u30bf\\u30b9"},{"sha":"33bfd9ea8b6c4fc0c9552db16c2f8bff79d5993d","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_pt_BR.properties?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -17,4 +17,5 @@\n start=Start\n end=End\n status=Status\n+executor=Executor\n execution.view=Result status of execution '${key}'"},{"sha":"4239465ebfacef70971ed7466ea784692e399d89","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel_ru.properties?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -22,4 +22,5 @@ end=\\u041e\\u043a\\u043e\\u043d\\u0447\\u0430\\u043d\\u0438\\u0435\n # status=Статус\n status=\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441\n # execution.view=Итоговый статус запуска задачи '${key}'\n+executor=Executor\n execution.view=\\u0418\\u0442\\u043e\\u0433\\u043e\\u0432\\u044b\\u0439 \\u0441\\u0442\\u0430\\u0442\\u0443\\u0441 \\u0437\\u0430\\u043f\\u0443\\u0441\\u043a\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 '${key}'"},{"sha":"1f98a5d2c50188fc0693d36d0c36810fa1487535","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ExecTO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FExecTO.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -42,6 +42,8 @@ public class ExecTO extends AbstractStartEndBean implements EntityTO {\n \n     private String message;\n \n+    private String executor;\n+\n     @Override\n     public String getKey() {\n         return key;\n@@ -92,6 +94,14 @@ public void setStatus(final String status) {\n         this.status = status;\n     }\n \n+    public String getExecutor() {\n+        return executor;\n+    }\n+\n+    public void setExecutor(final String executor) {\n+        this.executor = executor;\n+    }\n+\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n@@ -102,6 +112,7 @@ public int hashCode() {\n                 append(refDesc).\n                 append(status).\n                 append(message).\n+                append(executor).\n                 build();\n     }\n \n@@ -125,6 +136,7 @@ public boolean equals(final Object obj) {\n                 append(refDesc, other.refDesc).\n                 append(status, other.status).\n                 append(message, other.message).\n+                append(executor, other.executor).\n                 build();\n     }\n }"},{"sha":"2c034ff211c81c8583ee3c6fd439ee92815da717","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ReportTO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -58,6 +58,8 @@ public class ReportTO extends AbstractStartEndBean implements NamedEntityTO {\n \n     private String template;\n \n+    private String lastExecutor;\n+    \n     @Override\n     public String getKey() {\n         return key;\n@@ -141,6 +143,14 @@ public void setTemplate(final String template) {\n         this.template = template;\n     }\n \n+    public String getLastExecutor() {\n+        return lastExecutor;\n+    }\n+\n+    public void setLastExecutor(final String lastExecutor) {\n+        this.lastExecutor = lastExecutor;\n+    }\n+\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n@@ -155,6 +165,7 @@ public int hashCode() {\n                 append(nextExec).\n                 append(active).\n                 append(template).\n+                append(lastExecutor).\n                 build();\n     }\n \n@@ -182,6 +193,7 @@ public boolean equals(final Object obj) {\n                 append(nextExec, other.nextExec).\n                 append(active, other.active).\n                 append(template, other.template).\n+                append(lastExecutor, other.lastExecutor).\n                 build();\n     }\n }"},{"sha":"a3875fcd0b9da92f4b0567ad51a882c245d7262d","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -410,10 +410,12 @@ public ExecTO provisionMembers(final String key, final ProvisionAction action) {\n         task = taskDAO.save(task);\n \n         try {\n+            String executor = AuthContextUtils.getUsername();\n             Map<String, Object> jobDataMap = jobManager.register(\n                     task,\n                     null,\n-                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class));\n+                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n+                    executor);\n \n             jobDataMap.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, false);\n             jobDataMap.put(GroupMemberProvisionTaskJobDelegate.GROUP_KEY_JOBDETAIL_KEY, key);"},{"sha":"b3d5585cec0ef2f9854f847e61998ad816627c4b","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -117,11 +117,11 @@ public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO\n         }\n \n         Realm realm = realmDAO.save(binder.create(parent, realmTO));\n-\n+        String executor = AuthContextUtils.getUsername();\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.CREATE, realm.getResourceKeys());\n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false, executor);\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getRealmTO(realm, true));\n@@ -138,12 +138,12 @@ public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n \n             throw new NotFoundException(realmTO.getFullPath());\n         }\n-\n+        String executor = AuthContextUtils.getUsername();\n         PropagationByResource<String> propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false, executor);\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getRealmTO(realm, true));\n@@ -180,11 +180,11 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n             containedAnys.getElements().add(anyObjects + \" anyObject(s)\");\n             throw containedAnys;\n         }\n-\n+        String executor = AuthContextUtils.getUsername();\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false, executor);\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getRealmTO(realm, true));"},{"sha":"e471af20b8f2af2756fda1b3050a306d40122b45","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -75,6 +75,7 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.Assert;\n \n @Component\n public class ReportLogic extends AbstractExecutableLogic<ReportTO> {\n@@ -99,12 +100,14 @@ public ReportTO create(final ReportTO reportTO) {\n         Report report = entityFactory.newEntity(Report.class);\n         binder.getReport(report, reportTO);\n         report = reportDAO.save(report);\n-\n+        String executor = AuthContextUtils.getUsername();\n+        Assert.notNull(executor, \"executor cannot be null when creating report\");\n         try {\n             jobManager.register(\n                     report,\n                     null,\n-                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class));\n+                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n+                    executor);\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getKey(), e);\n \n@@ -125,12 +128,13 @@ public ReportTO update(final ReportTO reportTO) {\n \n         binder.getReport(report, reportTO);\n         report = reportDAO.save(report);\n-\n+        String executor = AuthContextUtils.getUsername();\n         try {\n             jobManager.register(\n                     report,\n                     null,\n-                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class));\n+                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n+                    executor);\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getKey(), e);\n \n@@ -171,12 +175,14 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n             sce.getElements().add(\"Report \" + key + \" is not active\");\n             throw sce;\n         }\n-\n+        String executor = AuthContextUtils.getUsername();\n+        Assert.notNull(executor, \"executor cannot be null when executing report\");\n         try {\n             jobManager.register(\n                     report,\n                     startAt,\n-                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class));\n+                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n+                    executor);\n \n             scheduler.getScheduler().triggerJob(JobNamer.getJobKey(report));\n         } catch (Exception e) {\n@@ -194,7 +200,7 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n         result.setStart(new Date());\n         result.setStatus(ReportExecStatus.STARTED.name());\n         result.setMessage(\"Job fired; waiting for results...\");\n-\n+        result.setExecutor(executor);\n         return result;\n     }\n "},{"sha":"96fba5dc2a5f37d8ab68b78d813d2eae7b0106c1","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -110,15 +110,16 @@ public <T extends SchedTaskTO> T createSchedTask(final TaskType type, final T ta\n             sce.getElements().add(\"Found \" + type + \", expected \" + taskUtils.getType());\n             throw sce;\n         }\n-\n+        String executor = AuthContextUtils.getUsername();\n         SchedTask task = binder.createSchedTask(taskTO, taskUtils);\n         task = taskDAO.save(task);\n \n         try {\n             jobManager.register(\n                     task,\n                     task.getStartAt(),\n-                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class));\n+                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n+                    executor);\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n \n@@ -146,12 +147,13 @@ public <T extends SchedTaskTO> T updateSchedTask(final TaskType type, final Sche\n \n         binder.updateSchedTask(task, taskTO, taskUtils);\n         task = taskDAO.save(task);\n-\n+        String executor = AuthContextUtils.getUsername();\n         try {\n             jobManager.register(\n                     task,\n                     task.getStartAt(),\n-                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class));\n+                    confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n+                    executor);\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n \n@@ -231,7 +233,8 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n         }\n \n         TaskUtils taskUtil = taskUtilsFactory.getInstance(task);\n-\n+        String executor = AuthContextUtils.getUsername();\n+        \n         ExecTO result = null;\n         switch (taskUtil.getType()) {\n             case PROPAGATION:\n@@ -248,12 +251,12 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n                 taskInfo.setAnyType(taskTO.getAnyType());\n                 taskInfo.setEntityKey(taskTO.getEntityKey());\n \n-                TaskExec propExec = taskExecutor.execute(taskInfo);\n+                TaskExec propExec = taskExecutor.execute(taskInfo, executor);\n                 result = binder.getExecTO(propExec);\n                 break;\n \n             case NOTIFICATION:\n-                TaskExec notExec = notificationJobDelegate.executeSingle((NotificationTask) task);\n+                TaskExec notExec = notificationJobDelegate.executeSingle((NotificationTask) task, executor);\n                 result = binder.getExecTO(notExec);\n                 break;\n \n@@ -271,7 +274,7 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n                             (SchedTask) task,\n                             startAt,\n                             confParamOps.get(AuthContextUtils.getDomain(),\n-                                    \"tasks.interruptMaxRetries\", 1L, Long.class));\n+                                    \"tasks.interruptMaxRetries\", 1L, Long.class), executor);\n \n                     jobDataMap.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, dryRun);\n "},{"sha":"ca4141daf5a7076c3073bcc4b7569a0b76b9a7eb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Exec.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExec.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -43,4 +43,7 @@ public interface Exec extends Entity {\n \n     Date getEnd();\n \n+    String getExecutor();\n+\n+    void setExecutor(String executor);\n }"},{"sha":"e2ca193581c6ded3f25e0ae1f301eef2263c5fa3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractExec.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -38,6 +38,9 @@ public abstract class AbstractExec extends AbstractGeneratedKeyEntity implements\n     @NotNull\n     protected String status;\n \n+    @NotNull\n+    protected String executor;\n+\n     /**\n      * Any information to be accompanied to this execution's result.\n      */\n@@ -69,6 +72,16 @@ public void setStatus(final String status) {\n         this.status = status;\n     }\n \n+    @Override\n+    public String getExecutor() {\n+        return this.executor;\n+    }\n+\n+    @Override\n+    public void setExecutor(final String executor) {\n+        this.executor = executor;\n+    }\n+\n     @Override\n     public String getMessage() {\n         return message;"},{"sha":"73910266c16a622f2a8665b27561d0a7fa968331","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskExecTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -80,6 +80,7 @@ public void issueSYNCOPE214() {\n         exec.setEnd(new Date());\n         exec.setStatus(ExecStatus.SUCCESS.name());\n         exec.setMessage(faultyMessage);\n+        exec.setExecutor(\"admin\");\n \n         task.add(exec);\n         exec.setTask(task);"},{"sha":"c3bbd2437b2cdd326be401f90cca2a15bb1d2ba6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ReportTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -88,6 +88,7 @@ public void save() {\n         reportExec.setStart(new Date());\n         reportExec.setEnd(new Date());\n         reportExec.setStatus(ReportExecStatus.SUCCESS);\n+        reportExec.setExecutor(\"admin\");\n \n         report.add(reportExec);\n         reportDAO.save(report);"},{"sha":"1516f303c7e2d702b573f404ce858e14ab3ea048","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -151,6 +151,7 @@ public void addPropagationTaskExecution() {\n         execution.setTask(task);\n         execution.setStatus(ExecStatus.CREATED.name());\n         execution.setStart(new Date());\n+        execution.setExecutor(\"admin\");\n         task.add(execution);\n \n         taskDAO.save(task);\n@@ -174,6 +175,7 @@ public void addPullTaskExecution() {\n         execution.setTask(task);\n         execution.setStart(new Date());\n         execution.setMessage(\"A message\");\n+        execution.setExecutor(\"admin\");\n         task.add(execution);\n \n         taskDAO.save(task);\n@@ -197,6 +199,7 @@ public void addPushTaskExecution() {\n         execution.setTask(task);\n         execution.setStart(new Date());\n         execution.setMessage(\"A message\");\n+        execution.setExecutor(\"admin\");\n         task.add(execution);\n \n         taskDAO.save(task);"},{"sha":"ed34fc378b93f54601a561282b58eb487672db64","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -30,15 +30,16 @@\n public interface JobManager {\n \n     String DOMAIN_KEY = \"domain\";\n+    String EXECUTOR_KEY = \"executor\";\n \n     JobKey NOTIFICATION_JOB = new JobKey(\"notificationJob\", Scheduler.DEFAULT_GROUP);\n \n     boolean isRunning(JobKey jobKey) throws SchedulerException;\n \n-    Map<String, Object> register(SchedTask task, Date startAt, long interruptMaxRetries)\n+    Map<String, Object> register(SchedTask task, Date startAt, long interruptMaxRetries, String executor)\n             throws SchedulerException;\n \n-    void register(Report report, Date startAt, long interruptMaxRetries)\n+    void register(Report report, Date startAt, long interruptMaxRetries, String executor)\n             throws SchedulerException;\n \n     void unregister(Task task);"},{"sha":"9aad7aa6fada9aa0dd2ac97d4af45a0f05d66d33","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/report/ReportJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2Freport%2FReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2Freport%2FReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2Freport%2FReportJobDelegate.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -23,5 +23,5 @@\n \n public interface ReportJobDelegate extends JobDelegate {\n \n-    void execute(String reportKey) throws JobExecutionException;\n+    void execute(String reportKey, String executor) throws JobExecutionException;\n }"},{"sha":"16b2e79121e53c9570e4c2b25f2cfec5f6047890","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/notification/NotificationJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationJobDelegate.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -25,7 +25,7 @@\n \n public interface NotificationJobDelegate extends JobDelegate {\n \n-    TaskExec executeSingle(NotificationTask task);\n+    TaskExec executeSingle(NotificationTask task, String executor);\n \n-    void execute() throws JobExecutionException;\n+    void execute(String executor) throws JobExecutionException;\n }"},{"sha":"6447fca1a52f7cee448fb1c2fab39a6323c05231","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -45,18 +45,20 @@ public interface PropagationTaskExecutor {\n      * Execute the given PropagationTask and returns the generated {@link TaskExec}.\n      *\n      * @param taskInfo to be executed\n+     * @param executor the executor of this task\n      * @return the generated TaskExec\n      */\n-    TaskExec execute(PropagationTaskInfo taskInfo);\n+    TaskExec execute(PropagationTaskInfo taskInfo, String executor);\n \n     /**\n      * Execute the given PropagationTask and returns the generated {@link TaskExec}.\n      *\n      * @param taskInfo to be executed\n      * @param reporter to report propagation execution status\n+     * @param executor the executor of this task\n      * @return the generated TaskExec\n      */\n-    TaskExec execute(PropagationTaskInfo taskInfo, PropagationReporter reporter);\n+    TaskExec execute(PropagationTaskInfo taskInfo, PropagationReporter reporter, String executor);\n \n     /**\n      * Execute a collection of PropagationTask objects.\n@@ -65,7 +67,9 @@ public interface PropagationTaskExecutor {\n      *\n      * @param taskInfos to be execute, in given order\n      * @param nullPriorityAsync asynchronously executes tasks related to resources with no priority\n+     * @param executor the executor of this task\n      * @return reporter to report propagation execution status\n      */\n-    PropagationReporter execute(Collection<PropagationTaskInfo> taskInfos, boolean nullPriorityAsync);\n+    PropagationReporter execute(Collection<PropagationTaskInfo> taskInfos, boolean nullPriorityAsync,\n+                                String executor);\n }"},{"sha":"1efe3b675807c208e0904386c54fb25973f61dea","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -43,8 +43,13 @@\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n+import javax.annotation.Resource;\n+\n public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisioningManager {\n \n+    @Resource(name = \"adminUser\")\n+    protected String adminUser;\n+\n     @Autowired\n     protected AnyObjectWorkflowAdapter awfAdapter;\n \n@@ -81,7 +86,7 @@ public Pair<String, List<PropagationStatus>> create(\n                 created.getPropByRes(),\n                 anyObjectCR.getVirAttrs(),\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return Pair.of(created.getResult(), propagationReporter.getStatuses());\n     }\n@@ -109,7 +114,7 @@ public Pair<AnyObjectUR, List<PropagationStatus>> update(\n                 null,\n                 anyObjectUR.getVirAttrs(),\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return Pair.of(updated.getResult(), propagationReporter.getStatuses());\n     }\n@@ -138,7 +143,7 @@ public List<PropagationStatus> delete(\n                 propByRes,\n                 null,\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         try {\n             awfAdapter.delete(key);\n@@ -175,7 +180,7 @@ public List<PropagationStatus> provision(\n                 null,\n                 null,\n                 null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -195,7 +200,7 @@ public List<PropagationStatus> deprovision(\n                 anyObjectDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return propagationReporter.getStatuses();\n     }"},{"sha":"08783bbc35e3fa67f5d79486b3ac0257e94f2fe4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -46,8 +46,13 @@\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n+import javax.annotation.Resource;\n+\n public class DefaultGroupProvisioningManager implements GroupProvisioningManager {\n \n+    @Resource(name = \"adminUser\")\n+    protected String adminUser;\n+\n     @Autowired\n     protected GroupWorkflowAdapter gwfAdapter;\n \n@@ -77,7 +82,7 @@ public Pair<String, List<PropagationStatus>> create(final GroupCR groupCR, final\n                 created.getPropByRes(),\n                 groupCR.getVirAttrs(),\n                 Set.of());\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync, this.adminUser);\n \n         return Pair.of(created.getResult(), propagationReporter.getStatuses());\n     }\n@@ -103,7 +108,7 @@ public Pair<String, List<PropagationStatus>> create(\n                 created.getPropByRes(),\n                 groupCR.getVirAttrs(),\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync, this.adminUser);\n \n         return Pair.of(created.getResult(), propagationReporter.getStatuses());\n     }\n@@ -131,7 +136,7 @@ public Pair<GroupUR, List<PropagationStatus>> update(\n                 null,\n                 groupUR.getVirAttrs(),\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync, this.adminUser);\n \n         return Pair.of(updated.getResult(), propagationReporter.getStatuses());\n     }\n@@ -175,7 +180,7 @@ public List<PropagationStatus> delete(\n                 null,\n                 null));\n \n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         gwfAdapter.delete(key);\n \n@@ -203,7 +208,7 @@ public List<PropagationStatus> provision(\n                 null,\n                 null,\n                 null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -223,7 +228,7 @@ public List<PropagationStatus> deprovision(\n                 groupDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return propagationReporter.getStatuses();\n     }"},{"sha":"4439bc6260873e069d7edf600369c055aa71a276","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -53,10 +53,15 @@\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n+import javax.annotation.Resource;\n+\n public class DefaultUserProvisioningManager implements UserProvisioningManager {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(UserProvisioningManager.class);\n \n+    @Resource(name = \"adminUser\")\n+    protected String adminUser;\n+\n     @Autowired\n     protected UserWorkflowAdapter uwfAdapter;\n \n@@ -96,7 +101,7 @@ public Pair<String, List<PropagationStatus>> create(\n                 created.getPropByLinkedAccount(),\n                 userCR.getVirAttrs(),\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return Pair.of(created.getResult().getLeft(), propagationReporter.getStatuses());\n     }\n@@ -106,7 +111,7 @@ public Pair<UserUR, List<PropagationStatus>> update(final UserUR userUR, final b\n         UserWorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.update(userUR);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(updated);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return Pair.of(updated.getResult().getLeft(), propagationReporter.getStatuses());\n     }\n@@ -167,7 +172,7 @@ public Pair<UserUR, List<PropagationStatus>> update(\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(\n                 updated, updated.getResult().getLeft().getPassword() != null, excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return Pair.of(updated.getResult().getLeft(), propagationReporter.getStatuses());\n     }\n@@ -200,7 +205,7 @@ public List<PropagationStatus> delete(\n                 propByRes,\n                 propByLinkedAccount,\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         try {\n             uwfAdapter.delete(key);\n@@ -261,7 +266,7 @@ protected List<PropagationStatus> propagateStatus(final StatusR statusR, final b\n                 null,\n                 null,\n                 null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -280,7 +285,7 @@ public void internalSuspend(final String key) {\n                     updated.getLeft().getPropByRes(),\n                     updated.getLeft().getPropByLinkedAccount(),\n                     updated.getLeft().getPerformedTasks()));\n-            taskExecutor.execute(taskInfos, false);\n+            taskExecutor.execute(taskInfos, false, this.adminUser);\n         }\n     }\n \n@@ -313,7 +318,7 @@ public List<PropagationStatus> provision(\n                 Pair.of(userUR, (Boolean) null), propByRes, null, \"update\");\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -340,7 +345,7 @@ public List<PropagationStatus> deprovision(\n                 userDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, this.adminUser);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -355,7 +360,6 @@ public void confirmPasswordReset(final String key, final String token, final Str\n         UserWorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.confirmPasswordReset(key, token, password);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(updated);\n-\n-        taskExecutor.execute(taskInfos, false);\n+        taskExecutor.execute(taskInfos, false, this.adminUser);\n     }\n }"},{"sha":"ea9a33bc7029d31cc4cc819800a517d247f81f70","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -108,6 +108,7 @@ public ReportTO getReportTO(final Report report) {\n             reportTO.setStart(latestExec.getStart());\n             reportTO.setEnd(latestExec.getEnd());\n \n+            reportTO.setLastExecutor(latestExec.getExecutor());\n             reportTO.setLastExec(reportTO.getStart());\n         }\n \n@@ -148,6 +149,7 @@ public ExecTO getExecTO(final ReportExec execution) {\n         execTO.setStart(execution.getStart());\n         execTO.setEnd(execution.getEnd());\n \n+        execTO.setExecutor(execution.getExecutor());\n         return execTO;\n     }\n }"},{"sha":"ab952cd2497c5eec47959e5f764ad2fa7211aff8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -21,6 +21,7 @@\n import java.util.Date;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n@@ -110,9 +111,11 @@ public void execute(final String taskKey, final boolean dryRun, final JobExecuti\n             return;\n         }\n \n+        String executor = context.getMergedJobDataMap().getString(JobManager.EXECUTOR_KEY);\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStart(new Date());\n         execution.setTask(task);\n+        execution.setExecutor(executor);\n \n         status.set(\"Initialization completed\");\n "},{"sha":"b14bf094bc628bf81fad2be64b446d974c889385","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java","status":"modified","additions":24,"deletions":11,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -28,6 +28,8 @@\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Set;\n+\n+import javax.annotation.Resource;\n import javax.sql.DataSource;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -98,6 +100,9 @@ public class JobManagerImpl implements JobManager, SyncopeCoreLoader {\n     @Autowired\n     private ConfParamOps confParamOps;\n \n+    @Resource(name = \"adminUser\")\n+    private String adminUser;\n+    \n     private boolean disableQuartzInstance;\n \n     public void setDisableQuartzInstance(final boolean disableQuartzInstance) {\n@@ -216,7 +221,8 @@ private static <T> T createSpringBean(final Class<T> jobClass) {\n     }\n \n     @Override\n-    public Map<String, Object> register(final SchedTask task, final Date startAt, final long interruptMaxRetries)\n+    public Map<String, Object> register(final SchedTask task, final Date startAt, final long interruptMaxRetries,\n+                                        final String executor)\n             throws SchedulerException {\n \n         TaskJob job = createSpringBean(TaskJob.class);\n@@ -238,8 +244,7 @@ public Map<String, Object> register(final SchedTask task, final Date startAt, fi\n                     + \" does not provide any \" + SchedTaskJobDelegate.class.getSimpleName());\n         }\n \n-        Map<String, Object> jobMap = new HashMap<>();\n-        jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n+        Map<String, Object> jobMap = createJobMapForExecutionContext(executor);\n         jobMap.put(TaskJob.DELEGATE_IMPLEMENTATION, jobDelegate.getKey());\n \n         registerJob(\n@@ -252,18 +257,24 @@ public Map<String, Object> register(final SchedTask task, final Date startAt, fi\n     }\n \n     @Override\n-    public void register(final Report report, final Date startAt, final long interruptMaxRetries)\n-            throws SchedulerException {\n+    public void register(final Report report, final Date startAt, final long interruptMaxRetries,\n+                         final String executor) throws SchedulerException {\n \n         ReportJob job = createSpringBean(ReportJob.class);\n         job.setReportKey(report.getKey());\n \n-        Map<String, Object> jobMap = new HashMap<>();\n-        jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n+        Map<String, Object> jobMap = createJobMapForExecutionContext(executor);\n \n         registerJob(JobNamer.getJobKey(report).getName(), job, report.getCronExpression(), startAt, jobMap);\n     }\n \n+    private static Map<String, Object> createJobMapForExecutionContext(final String executor) {\n+        Map<String, Object> jobMap = new HashMap<>();\n+        jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n+        jobMap.put(JobManager.EXECUTOR_KEY, executor);\n+        return jobMap;\n+    }\n+\n     private void unregisterJob(final String jobName) {\n         try {\n             scheduler.getScheduler().unscheduleJob(new TriggerKey(jobName, Scheduler.DEFAULT_GROUP));\n@@ -336,7 +347,7 @@ public void load(final String domain, final DataSource datasource) {\n             for (Iterator<SchedTask> it = tasks.iterator(); it.hasNext() && !loadException;) {\n                 SchedTask task = it.next();\n                 try {\n-                    register(task, task.getStartAt(), conf.getRight());\n+                    register(task, task.getStartAt(), conf.getRight(), this.adminUser);\n                 } catch (Exception e) {\n                     LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n                     loadException = true;\n@@ -350,7 +361,7 @@ public void load(final String domain, final DataSource datasource) {\n                 for (Iterator<Report> it = reportDAO.findAll().iterator(); it.hasNext() && !loadException;) {\n                     Report report = it.next();\n                     try {\n-                        register(report, null, conf.getRight());\n+                        register(report, null, conf.getRight(), this.adminUser);\n                     } catch (Exception e) {\n                         LOG.error(\"While loading job instance for report \" + report.getName(), e);\n                         loadException = true;\n@@ -376,12 +387,13 @@ public void load(final String domain, final DataSource datasource) {\n \n                 try {\n                     NotificationJob job = createSpringBean(NotificationJob.class);\n+                    Map<String, Object> jobData = createJobMapForExecutionContext(this.adminUser);\n                     registerJob(\n                             NOTIFICATION_JOB.getName(),\n                             job,\n                             conf.getLeft(),\n                             null,\n-                            Map.of());\n+                            jobData);\n                 } catch (Exception e) {\n                     LOG.error(\"While loading {} instance\", NotificationJob.class.getSimpleName(), e);\n                 }\n@@ -391,12 +403,13 @@ public void load(final String domain, final DataSource datasource) {\n             LOG.debug(\"Registering {}\", SystemLoadReporterJob.class);\n             try {\n                 SystemLoadReporterJob job = createSpringBean(SystemLoadReporterJob.class);\n+                Map<String, Object> jobData = createJobMapForExecutionContext(this.adminUser);\n                 registerJob(\n                         StringUtils.uncapitalize(SystemLoadReporterJob.class.getSimpleName()),\n                         job,\n                         \"0 * * * * ?\",\n                         null,\n-                        Map.of());\n+                        jobData);\n             } catch (Exception e) {\n                 LOG.error(\"While loading {} instance\", SystemLoadReporterJob.class.getSimpleName(), e);\n             }"},{"sha":"6c5ff848115a10c890e8133b3044dd3eda260d55","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -127,11 +127,11 @@ public boolean isInterrupted() {\n \n     @Transactional\n     @Override\n-    public TaskExec executeSingle(final NotificationTask task) {\n+    public TaskExec executeSingle(final NotificationTask task, final String executor) {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n         execution.setStart(new Date());\n-\n+        execution.setExecutor(executor);\n         boolean retryPossible = true;\n \n         if (StringUtils.isBlank(task.getSubject()) || task.getRecipients().isEmpty()\n@@ -250,14 +250,14 @@ public TaskExec executeSingle(final NotificationTask task) {\n \n     @Transactional\n     @Override\n-    public void execute() throws JobExecutionException {\n+    public void execute(final String executor) throws JobExecutionException {\n         List<NotificationTask> tasks = taskDAO.<NotificationTask>findToExec(TaskType.NOTIFICATION);\n \n         status.set(\"Sending out \" + tasks.size() + \" notifications\");\n \n         for (int i = 0; i < tasks.size() && !interrupt; i++) {\n             LOG.debug(\"Found notification task {} to be executed: starting...\", tasks.get(i));\n-            executeSingle(tasks.get(i));\n+            executeSingle(tasks.get(i), executor);\n             LOG.debug(\"Notification task {} executed\", tasks.get(i));\n         }\n         if (interrupt) {"},{"sha":"f5afad8056a1140c5dbc3909f20321dab51682ec","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/NotificationJob.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.java.job.notification;\n \n import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n@@ -63,12 +64,12 @@ public JobDelegate getDelegate() {\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n         LOG.debug(\"Waking up...\");\n-\n+        String executor = context.getMergedJobDataMap().getString(JobManager.EXECUTOR_KEY);\n         for (String domain : domainHolder.getDomains().keySet()) {\n             try {\n                 AuthContextUtils.callAsAdmin(domain, () -> {\n                     try {\n-                        delegate.execute();\n+                        delegate.execute(executor);\n                     } catch (Exception e) {\n                         LOG.error(\"While sending out notifications\", e);\n                         throw new RuntimeException(e);"},{"sha":"c95aa203f6b320bcc8fd57b8e062c6b42282abb6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/DefaultReportJobDelegate.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -35,6 +35,7 @@\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n+\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n@@ -108,7 +109,7 @@ public boolean isInterrupted() {\n \n     @Transactional\n     @Override\n-    public void execute(final String reportKey) throws JobExecutionException {\n+    public void execute(final String reportKey, final String executor) throws JobExecutionException {\n         Report report = reportDAO.find(reportKey);\n         if (report == null) {\n             throw new JobExecutionException(\"Report \" + reportKey + \" not found\");\n@@ -124,6 +125,8 @@ public void execute(final String reportKey) throws JobExecutionException {\n         execution.setStatus(ReportExecStatus.STARTED);\n         execution.setStart(new Date());\n         execution.setReport(report);\n+\n+        execution.setExecutor(executor);\n         execution = reportExecDAO.save(execution);\n \n         report.add(execution);"},{"sha":"fa80c4210b69a325ec318305bb8a80d4f2cdb4fa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJob.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -61,10 +61,13 @@ public JobDelegate getDelegate() {\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n         try {\n-            AuthContextUtils.callAsAdmin(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n+            String domainKey = context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY);\n+            String executor = context.getMergedJobDataMap().getString(JobManager.EXECUTOR_KEY);\n+\n+            AuthContextUtils.callAsAdmin(domainKey,\n                     () -> {\n                         try {\n-                            delegate.execute(reportKey);\n+                            delegate.execute(reportKey, executor);\n                         } catch (Exception e) {\n                             LOG.error(\"While executing report {}\", reportKey, e);\n                             throw new RuntimeException(e);"},{"sha":"40e9943f091fbfa849536e9e46a1cdc9c19bbcba","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -342,12 +342,13 @@ protected Uid delete(\n     }\n \n     @Override\n-    public TaskExec execute(final PropagationTaskInfo taskInfo) {\n-        return execute(taskInfo, null);\n+    public TaskExec execute(final PropagationTaskInfo taskInfo, final String executor) {\n+        return execute(taskInfo, null, executor);\n     }\n \n     @Override\n-    public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationReporter reporter) {\n+    public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationReporter reporter,\n+                            final String executor) {\n         PropagationTask task;\n         if (taskInfo.getKey() == null) {\n             task = entityFactory.newEntity(PropagationTask.class);\n@@ -376,6 +377,7 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n \n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(ExecStatus.CREATED.name());\n+        execution.setExecutor(executor);\n \n         String taskExecutionMessage = null;\n         String failureReason = null;\n@@ -553,16 +555,18 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n     }\n \n     protected abstract void doExecute(\n-            Collection<PropagationTaskInfo> taskInfos, PropagationReporter reporter, boolean nullPriorityAsync);\n+            Collection<PropagationTaskInfo> taskInfos, PropagationReporter reporter, boolean nullPriorityAsync,\n+            String executor);\n \n     @Override\n     public PropagationReporter execute(\n             final Collection<PropagationTaskInfo> taskInfos,\n-            final boolean nullPriorityAsync) {\n+            final boolean nullPriorityAsync,\n+            final String executor) {\n \n         PropagationReporter reporter = new DefaultPropagationReporter();\n         try {\n-            doExecute(taskInfos, reporter, nullPriorityAsync);\n+            doExecute(taskInfos, reporter, nullPriorityAsync, executor);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation priority resource\", e);\n             reporter.onPriorityResourceFailure(e.getResourceName(), taskInfos);"},{"sha":"1c8ece28fe575baa6947aa7cf0f562be050e21c6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationTaskCallable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationTaskCallable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationTaskCallable.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -79,7 +79,7 @@ public TaskExec call() throws Exception {\n \n         LOG.debug(\"Execution started for {}\", taskInfo);\n \n-        TaskExec execution = taskExecutor.execute(taskInfo, reporter);\n+        TaskExec execution = taskExecutor.execute(taskInfo, reporter, username);\n \n         LOG.debug(\"Execution completed for {}, {}\", taskInfo, execution);\n "},{"sha":"0a60ba2b3c42b9574a82eeb2392ca335fab2defb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -82,7 +82,8 @@ protected static PropagationTaskCallable newPropagationTaskCallable(\n     protected void doExecute(\n             final Collection<PropagationTaskInfo> taskInfos,\n             final PropagationReporter reporter,\n-            final boolean nullPriorityAsync) {\n+            final boolean nullPriorityAsync,\n+            final String executorId) {\n \n         Map<PropagationTaskInfo, ExternalResource> taskToResource = new HashMap<>(taskInfos.size());\n         List<PropagationTaskInfo> prioritizedTasks = new ArrayList<>();"},{"sha":"5097e9e55897bd612ab3f58fb46ac45409bd3c61","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -69,10 +69,15 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n+import javax.annotation.Resource;\n+\n @Transactional(rollbackFor = Throwable.class)\n public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHandler<PullTask, PullActions>\n         implements SyncopePullResultHandler {\n \n+    @Resource(name = \"adminUser\")\n+    protected String adminUser;\n+    \n     @Autowired\n     protected PullUtils pullUtils;\n \n@@ -454,7 +459,8 @@ protected List<ProvisioningReport> deprovision(\n                                 propByRes,\n                                 null,\n                                 null),\n-                                false);\n+                                false,\n+                                this.adminUser);\n \n                         AnyUR anyUR = null;\n                         if (matchingRule == MatchingRule.UNASSIGN) {"},{"sha":"73ced5db489a320ea411ddf22a87552e5338b666","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -62,12 +62,17 @@\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n+import javax.annotation.Resource;\n+\n public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHandler<PushTask, PushActions>\n         implements SyncopePushResultHandler {\n \n     @Autowired\n     protected PushUtils pushUtils;\n \n+    @Resource(name = \"adminUser\")\n+    protected String adminUser;\n+\n     /**\n      * Notification Manager.\n      */\n@@ -124,7 +129,7 @@ protected void update(\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter);\n+            taskExecutor.execute(taskInfos.get(0), reporter, this.adminUser);\n             reportPropagation(result, reporter);\n         }\n     }\n@@ -148,7 +153,7 @@ protected void deprovision(final Any<?> any, final ConnectorObject beforeObj, fi\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter);\n+            taskExecutor.execute(taskInfos.get(0), reporter, this.adminUser);\n             reportPropagation(result, reporter);\n         }\n     }\n@@ -172,7 +177,7 @@ protected void provision(final Any<?> any, final Boolean enable, final Provision\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.ofNullable(null));\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter);\n+            taskExecutor.execute(taskInfos.get(0), reporter, this.adminUser);\n             reportPropagation(result, reporter);\n         }\n     }"},{"sha":"af39823b09971169863cb1a16178f0f0c2829b0b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -57,11 +57,16 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n+import javax.annotation.Resource;\n+\n @Transactional(rollbackFor = Throwable.class)\n public class DefaultRealmPullResultHandler\n         extends AbstractRealmResultHandler<PullTask, PullActions>\n         implements RealmPullResultHandler {\n \n+    @Resource(name = \"adminUser\")\n+    protected String adminUser;\n+\n     @Autowired\n     private PullUtils pullUtils;\n \n@@ -239,7 +244,7 @@ private void create(\n             propByRes.addAll(ResourceOperation.CREATE, realm.getResourceKeys());\n             if (unmatchingRule == UnmatchingRule.ASSIGN) {\n                 List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n-                taskExecutor.execute(taskInfos, false);\n+                taskExecutor.execute(taskInfos, false, this.adminUser);\n             }\n \n             RealmTO actual = binder.getRealmTO(realm, true);\n@@ -325,7 +330,7 @@ private List<ProvisioningReport> update(final SyncDelta delta, final List<String\n                         RealmTO updated = binder.getRealmTO(realm, true);\n \n                         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n-                        taskExecutor.execute(taskInfos, false);\n+                        taskExecutor.execute(taskInfos, false, this.adminUser);\n \n                         for (PullActions action : profile.getActions()) {\n                             action.after(profile, delta, updated, result);\n@@ -414,7 +419,8 @@ private List<ProvisioningReport> deprovision(final SyncDelta delta, final List<S\n \n                         PropagationByResource<String> propByRes = new PropagationByResource<>();\n                         propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n-                        taskExecutor.execute(propagationManager.createTasks(realm, propByRes, null), false);\n+                        taskExecutor.execute(propagationManager.createTasks(realm, propByRes, null),\n+                            false, this.adminUser);\n \n                         RealmTO realmTO;\n                         if (unlink) {\n@@ -609,7 +615,7 @@ private List<ProvisioningReport> delete(final SyncDelta delta, final List<String\n                         PropagationByResource<String> propByRes = new PropagationByResource<>();\n                         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n                         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n-                        taskExecutor.execute(taskInfos, false);\n+                        taskExecutor.execute(taskInfos, false, this.adminUser);\n \n                         realmDAO.delete(realm);\n "},{"sha":"1460e6a830831e59cd9d7d505ba24767767661ac","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -60,10 +60,15 @@\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n+import javax.annotation.Resource;\n+\n public class DefaultRealmPushResultHandler\n         extends AbstractRealmResultHandler<PushTask, PushActions>\n         implements RealmPushResultHandler {\n \n+    @Resource(name = \"adminUser\")\n+    protected String adminUser;\n+\n     @Autowired\n     private MappingManager mappingManager;\n \n@@ -110,7 +115,7 @@ private Realm update(final RealmTO realmTO, final ConnectorObject beforeObj, fin\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.ofNullable(beforeObj));\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter);\n+            taskExecutor.execute(taskInfos.get(0), reporter, this.adminUser);\n             reportPropagation(result, reporter);\n         }\n \n@@ -128,7 +133,7 @@ private void deprovision(final Realm realm, final ConnectorObject beforeObj, fin\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.ofNullable(beforeObj));\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter);\n+            taskExecutor.execute(taskInfos.get(0), reporter, this.adminUser);\n             reportPropagation(result, reporter);\n         }\n     }\n@@ -141,7 +146,7 @@ private void provision(final Realm realm, final ProvisioningReport result) {\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n         PropagationReporter reporter = taskExecutor.execute(\n-                propagationManager.createTasks(realm, propByRes, noPropResources), false);\n+                propagationManager.createTasks(realm, propByRes, noPropResources), false, this.adminUser);\n         reportPropagation(result, reporter);\n     }\n "},{"sha":"535d7052e663a156aca93074a26e9133a6c284a9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -82,7 +82,8 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n                 propByLinkedAccount,\n                 before.getVirAttrs(),\n                 noPropResources),\n-                false);\n+                false,\n+                this.adminUser);\n         reportPropagation(result, reporter);\n     }\n \n@@ -121,7 +122,7 @@ protected void update(\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter);\n+            taskExecutor.execute(taskInfos.get(0), reporter, this.adminUser);\n             reportPropagation(result, reporter);\n         }\n     }\n@@ -152,7 +153,7 @@ protected void deprovision(final Any<?> any, final ConnectorObject beforeObj, fi\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter);\n+            taskExecutor.execute(taskInfos.get(0), reporter, this.adminUser);\n             reportPropagation(result, reporter);\n         }\n     }"},{"sha":"8bc34fab93e7ba2039647f5f4548ffd50feef52f","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateComponent.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -31,6 +31,8 @@\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n \n+import javax.annotation.Resource;\n+\n public class PropagateComponent extends DefaultComponent {\n \n     @Autowired\n@@ -54,6 +56,9 @@ public class PropagateComponent extends DefaultComponent {\n     @Autowired\n     protected UserWorkflowAdapter uwfAdapter;\n \n+    @Resource(name = \"adminUser\")\n+    protected String adminUser;\n+\n     @Override\n     protected Endpoint createEndpoint(final String uri, final String remaining,\n             final Map<String, Object> parameters) throws Exception {\n@@ -67,7 +72,8 @@ protected Endpoint createEndpoint(final String uri, final String remaining,\n         endpoint.setAnyObjectDAO(anyObjectDAO);\n         endpoint.setGroupDataBinder(groupDataBinder);\n         endpoint.setUwfAdapter(uwfAdapter);\n-\n+        endpoint.setExecutor(adminUser);\n+        \n         setProperties(endpoint, parameters);\n         return endpoint;\n     }"},{"sha":"469dd52557d30246871fd1f9b896f89376da2043","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateEndpoint.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -72,6 +72,8 @@ public class PropagateEndpoint extends DefaultEndpoint {\n \n     private UserWorkflowAdapter uwfAdapter;\n \n+    private String executor;\n+    \n     public PropagateEndpoint(final String endpointUri, final Component component) {\n         super(endpointUri, component);\n     }\n@@ -114,6 +116,7 @@ public Producer createProducer() throws Exception {\n             producer.setPropagationManager(propagationManager);\n             producer.setPropagationTaskExecutor(taskExecutor);\n             producer.setPull(pull);\n+            producer.setExecutor(this.executor);\n         }\n         return producer;\n     }\n@@ -179,4 +182,8 @@ public void setPull(final boolean pull) {\n     public void setUwfAdapter(final UserWorkflowAdapter uwfAdapter) {\n         this.uwfAdapter = uwfAdapter;\n     }\n+\n+    public void setExecutor(final String executor) {\n+        this.executor = executor;\n+    }\n }"},{"sha":"5a411a9070dc05964cb61f664a782e8e2ad7f5b6","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/AbstractProducer.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -34,6 +34,8 @@ public abstract class AbstractProducer extends DefaultProducer {\n \n     private boolean pull;\n \n+    private String executor;\n+\n     public AbstractProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind) {\n         super(endpoint);\n         this.anyTypeKind = anyTypeKind;\n@@ -66,4 +68,12 @@ public boolean isPull() {\n     public void setPull(final boolean pull) {\n         this.pull = pull;\n     }\n+\n+    public String getExecutor() {\n+        return executor;\n+    }\n+\n+    public void setExecutor(final String executor) {\n+        this.executor = executor;\n+    }\n }"},{"sha":"c6eb70a2dc07920af5c976c6c84f99eb3ae9feda","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -43,7 +43,7 @@ public void process(final Exchange exchange) throws Exception {\n \n             List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(updated);\n \n-            getPropagationTaskExecutor().execute(taskInfos, false);\n+            getPropagationTaskExecutor().execute(taskInfos, false, getExecutor());\n         }\n     }\n }"},{"sha":"7eac9e0e5538de367ae194f6b8abb55497e11549","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -61,7 +61,8 @@ public void process(final Exchange exchange) throws Exception {\n                         created.getPropByLinkedAccount(),\n                         ((UserCR) actual).getVirAttrs(),\n                         excludedResources);\n-                PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                PropagationReporter reporter = getPropagationTaskExecutor()\n+                    .execute(taskInfos, nullPriorityAsync, getExecutor());\n \n                 exchange.getMessage().setBody(\n                         Pair.of(created.getResult().getKey(), reporter.getStatuses()));\n@@ -80,7 +81,7 @@ public void process(final Exchange exchange) throws Exception {\n                             created.getPropByRes(),\n                             ((AnyCR) actual).getVirAttrs(),\n                             excludedResources);\n-                    getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n \n                     exchange.getMessage().setBody(Pair.of(created.getResult(), null));\n                 } else {\n@@ -91,7 +92,8 @@ public void process(final Exchange exchange) throws Exception {\n                             created.getPropByRes(),\n                             ((AnyCR) actual).getVirAttrs(),\n                             excludedResources);\n-                    PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    PropagationReporter reporter =\n+                        getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n \n                     exchange.getMessage().setBody(Pair.of(created.getResult(), reporter.getStatuses()));\n                 }"},{"sha":"7049b8cfcd15331728b147f62048ef2283f2083f","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -79,7 +79,7 @@ public void process(final Exchange exchange) throws Exception {\n                             propByRes,\n                             propByLinkedAccount,\n                             excludedResources);\n-                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n                     exchange.setProperty(\"statuses\", reporter.getStatuses());\n                     break;\n \n@@ -111,7 +111,7 @@ public void process(final Exchange exchange) throws Exception {\n                             null,\n                             null,\n                             null));\n-                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n                     exchange.setProperty(\"statuses\", reporter.getStatuses());\n                     break;\n \n@@ -122,7 +122,7 @@ public void process(final Exchange exchange) throws Exception {\n                             null,\n                             null,\n                             excludedResources);\n-                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n                     exchange.setProperty(\"statuses\", reporter.getStatuses());\n                     break;\n "},{"sha":"d9cc56897de9f85935a2dd4f0dac21acf14a98f5","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -82,7 +82,8 @@ public void process(final Exchange exchange) throws Exception {\n                             propByLinkedAccount,\n                             userDAO.findAllResourceKeys(key).stream().\n                                     filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n-                    propagationReporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    propagationReporter =\n+                        getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n                     exchange.getMessage().setBody(propagationReporter.getStatuses());\n                     break;\n \n@@ -95,7 +96,8 @@ public void process(final Exchange exchange) throws Exception {\n                             null,\n                             groupDAO.findAllResourceKeys(key).stream().\n                                     filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n-                    propagationReporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    propagationReporter =\n+                        getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n                     exchange.getMessage().setBody(propagationReporter.getStatuses());\n                     break;\n \n@@ -108,7 +110,8 @@ public void process(final Exchange exchange) throws Exception {\n                             null,\n                             anyObjectDAO.findAllResourceKeys(key).stream().\n                                     filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n-                    propagationReporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    propagationReporter =\n+                        getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n                     exchange.getMessage().setBody(propagationReporter.getStatuses());\n                     break;\n "},{"sha":"48459b9fd4d5288b316271cd2ac713d4de9c0c4a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -73,7 +73,8 @@ public void process(final Exchange exchange) throws Exception {\n                     Pair.of(userUR, (Boolean) null), propByRes, null, \"update\");\n \n             List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);\n-            PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+            PropagationReporter reporter =\n+                getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n \n             exchange.getMessage().setBody(reporter.getStatuses());\n         } else {\n@@ -101,7 +102,8 @@ public void process(final Exchange exchange) throws Exception {\n                     propByLinkedAccount,\n                     null,\n                     null);\n-            PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+            PropagationReporter reporter =\n+                getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n \n             exchange.getMessage().setBody(reporter.getStatuses());\n         }"},{"sha":"a30289ffa3e38b320027d22a3b2425129ad164fe","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -108,7 +108,8 @@ public void process(final Exchange exchange) throws Exception {\n                     propByLinkedAccount,\n                     null,\n                     null);\n-            PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+            PropagationReporter reporter =\n+                getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n \n             exchange.getMessage().setBody(Pair.of(updated.getResult(), reporter.getStatuses()));\n         }"},{"sha":"a6699320b772d67b5e468576795c2946d62ddb8f","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -51,7 +51,7 @@ public void process(final Exchange exchange) throws Exception {\n                                 updated.getLeft().getPropByRes(),\n                                 updated.getKey().getPropByLinkedAccount(),\n                                 updated.getLeft().getPerformedTasks()));\n-                getPropagationTaskExecutor().execute(taskInfos, false);\n+                getPropagationTaskExecutor().execute(taskInfos, false, getExecutor());\n             }\n         }\n     }"},{"sha":"b3bb1691819fef2a8737b9bd9c58010241dc1e13","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -57,7 +57,8 @@ public void process(final Exchange exchange) throws Exception {\n                 } else {\n                     taskInfos = getPropagationManager().getUserUpdateTasks(updated);\n                 }\n-                PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                PropagationReporter reporter =\n+                    getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n \n                 exchange.getMessage().setBody(Pair.of(updated.getResult().getLeft(), reporter.getStatuses()));\n             } else if (actual instanceof AnyUR) {\n@@ -73,7 +74,8 @@ public void process(final Exchange exchange) throws Exception {\n                         null,\n                         ((AnyUR) actual).getVirAttrs(),\n                         excludedResources);\n-                PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                PropagationReporter reporter =\n+                    getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n \n                 exchange.getMessage().setBody(Pair.of(updated.getResult(), reporter.getStatuses()));\n             }"},{"sha":"2df4c590ee58ffcb0cb60cc44453b51a491da646","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -184,7 +184,7 @@ public UserTO submitForm(final UserRequestForm form) {\n         }\n \n         UserWorkflowResult<UserUR> wfResult = userRequestHandler.submitForm(form);\n-\n+        String executor = AuthContextUtils.getUsername();\n         // propByRes can be made empty by the workflow definition if no propagation should occur \n         // (for example, with rejected users)\n         if (wfResult.getPropByRes() != null && !wfResult.getPropByRes().isEmpty()) {\n@@ -195,7 +195,7 @@ public UserTO submitForm(final UserRequestForm form) {\n                             wfResult.getPropByLinkedAccount(),\n                             wfResult.getPerformedTasks()));\n \n-            taskExecutor.execute(taskInfos, false);\n+            taskExecutor.execute(taskInfos, false, executor);\n         }\n \n         UserTO userTO;"},{"sha":"0de8c7034c62442b4edc62fa8cdf81c4e2e74795","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowTaskLogic.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.core.flowable.api.WorkflowTaskManager;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -79,8 +80,8 @@ public UserTO executeNextTask(final WorkflowTaskExecInput workflowTaskExecInput)\n                         updated.getPropByRes(),\n                         updated.getPropByLinkedAccount(),\n                         updated.getPerformedTasks()));\n-\n-        taskExecutor.execute(taskInfos, false);\n+        String executor = AuthContextUtils.getUsername();\n+        taskExecutor.execute(taskInfos, false, executor);\n \n         return binder.getUserTO(updated.getResult());\n     }"},{"sha":"d458347d6c39bb70e612b0a13362ea5d645de5ae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":19,"deletions":6,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -54,21 +54,36 @@\n import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.User;\n \n public class ReportITCase extends AbstractITCase {\n \n+    @BeforeAll\n+    public static void setup() {\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+            new User(\"admin\", \"FAKE_PASSWORD\", List.of()), \"FAKE_PASSWORD\", List.of());\n+        auth.setDetails(new SyncopeAuthenticationDetails(\"Master\"));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+    }\n+    \n     protected static String execReport(final String reportKey) {\n         ReportTO reportTO = reportService.read(reportKey);\n         assertNotNull(reportTO);\n         assertNotNull(reportTO.getExecutions());\n \n         int preExecSize = reportTO.getExecutions().size();\n-        ExecTO exec = reportService.execute(new ExecuteQuery.Builder().key(reportKey).build());\n+        ExecuteQuery query = new ExecuteQuery.Builder().key(reportKey).build();\n+        ExecTO exec = reportService.execute(query);\n         assertNotNull(exec);\n-\n+        assertNotNull(exec.getExecutor());\n+        \n         int i = 0;\n         int maxit = 50;\n \n@@ -83,7 +98,7 @@ protected static String execReport(final String reportKey) {\n \n             assertNotNull(reportTO);\n             assertNotNull(reportTO.getExecutions());\n-\n+            \n             i++;\n         } while (preExecSize == reportTO.getExecutions().size() && i < maxit);\n         if (i == maxit) {\n@@ -146,10 +161,8 @@ public void create() {\n \n         report = createReport(report);\n         assertNotNull(report);\n-\n         ReportTO actual = reportService.read(report.getKey());\n         assertNotNull(actual);\n-\n         assertEquals(actual, report);\n     }\n \n@@ -357,7 +370,7 @@ public void issueSYNCOPE43() {\n         reportTO.setTemplate(\"sample\");\n         reportTO = createReport(reportTO);\n         assertNotNull(reportTO);\n-\n+        \n         ExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportTO.getKey()).build());\n         assertNotNull(execution);\n "},{"sha":"535b84fe438b566361e95cbd841b5aac35193368","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportTemplateITCase.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ff279307f27e5c4e439b32b67024d457c70f720/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ff279307f27e5c4e439b32b67024d457c70f720/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java?ref=7ff279307f27e5c4e439b32b67024d457c70f720","patch":"@@ -36,11 +36,23 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.User;\n \n public class ReportTemplateITCase extends AbstractITCase {\n-\n+    @BeforeAll\n+    public static void setup() {\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+            new User(\"admin\", \"FAKE_PASSWORD\", List.of()), \"FAKE_PASSWORD\", List.of());\n+        auth.setDetails(new SyncopeAuthenticationDetails(\"Master\"));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+    }\n+    \n     @Test\n     public void read() {\n         ReportTemplateTO reportTemplateTO = reportTemplateService.read(\"sample\");"}]}