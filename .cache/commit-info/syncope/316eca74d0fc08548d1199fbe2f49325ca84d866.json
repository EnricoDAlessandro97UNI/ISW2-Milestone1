{"sha":"316eca74d0fc08548d1199fbe2f49325ca84d866","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMxNmVjYTc0ZDBmYzA4NTQ4ZDExOTlmYmUyZjQ5MzI1Y2E4NGQ4NjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-06-03T14:48:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-06-03T14:48:51Z"},"message":"[SYNCOPE-498] Primitive type values are always mandatory in wicket: converting primitive classes to wrapper before instantiating SpinnerFieldPanel\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1599592 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fe53427893454b422b54fbe38b05d7e0805117ed","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fe53427893454b422b54fbe38b05d7e0805117ed"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/316eca74d0fc08548d1199fbe2f49325ca84d866","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/316eca74d0fc08548d1199fbe2f49325ca84d866","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/316eca74d0fc08548d1199fbe2f49325ca84d866","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/316eca74d0fc08548d1199fbe2f49325ca84d866/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ffc61f0e328a2ec702f0e9ca72cae31ed38d9b53","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ffc61f0e328a2ec702f0e9ca72cae31ed38d9b53","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ffc61f0e328a2ec702f0e9ca72cae31ed38d9b53"}],"stats":{"total":176,"additions":68,"deletions":108},"files":[{"sha":"11f25012c519792cd76fe2359af4dc6cdf645adc","filename":"console/src/main/java/org/apache/syncope/console/pages/AbstractBasePage.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractBasePage.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -98,10 +98,7 @@ public AbstractBasePage() {\n \n     public AbstractBasePage(final PageParameters parameters) {\n         super(parameters);\n-        setupFeedbackPanel();\n-    }\n \n-    protected final void setupFeedbackPanel() {\n         feedbackPanel = new NotificationPanel(Constants.FEEDBACK);\n         feedbackPanel.setOutputMarkupId(true);\n         add(feedbackPanel);"},{"sha":"19734b8e687ae605f6ef784b91332cef5c930489","filename":"console/src/main/java/org/apache/syncope/console/pages/ApprovalModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -142,7 +142,7 @@ public Serializable getObject() {\n                             case Long:\n                                 field = new SpinnerFieldPanel<Long>(\"value\", label.getDefaultModelObjectAsString(),\n                                         Long.class, new Model<Long>(NumberUtils.toLong(prop.getValue())),\n-                                        null, null, false);\n+                                        null, null);\n                                 break;\n \n                             case String:"},{"sha":"8072ac0a00a2fcdf2fa2ef835e9c383709e56857","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -191,7 +191,7 @@ public ConnectorModalPage(final PageReference pageRef, final ModalWindow window,\n \n         final SpinnerFieldPanel<Integer> connRequestTimeout =\n                 new SpinnerFieldPanel<Integer>(\"connRequestTimeout\", \"connRequestTimeout\", Integer.class,\n-                        new PropertyModel<Integer>(connInstanceTO, \"connRequestTimeout\"), 0, null, true);\n+                        new PropertyModel<Integer>(connInstanceTO, \"connRequestTimeout\"), 0, null);\n         connRequestTimeout.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n         connectorForm.add(connRequestTimeout);\n \n@@ -200,28 +200,28 @@ public ConnectorModalPage(final PageReference pageRef, final ModalWindow window,\n         }\n         final SpinnerFieldPanel<Integer> poolMaxObjects =\n                 new SpinnerFieldPanel<Integer>(\"poolMaxObjects\", \"poolMaxObjects\", Integer.class,\n-                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxObjects\"), 0, null, true);\n+                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxObjects\"), 0, null);\n         poolMaxObjects.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n         connectorForm.add(poolMaxObjects);\n         final SpinnerFieldPanel<Integer> poolMinIdle =\n                 new SpinnerFieldPanel<Integer>(\"poolMinIdle\", \"poolMinIdle\", Integer.class,\n-                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"minIdle\"), 0, null, true);\n+                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"minIdle\"), 0, null);\n         poolMinIdle.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n         connectorForm.add(poolMinIdle);\n         final SpinnerFieldPanel<Integer> poolMaxIdle =\n                 new SpinnerFieldPanel<Integer>(\"poolMaxIdle\", \"poolMaxIdle\", Integer.class,\n-                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxIdle\"), 0, null, true);\n+                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxIdle\"), 0, null);\n         poolMaxIdle.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n         connectorForm.add(poolMaxIdle);\n         final SpinnerFieldPanel<Long> poolMaxWait =\n                 new SpinnerFieldPanel<Long>(\"poolMaxWait\", \"poolMaxWait\", Long.class,\n-                        new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"maxWait\"), 0L, null, true);\n+                        new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"maxWait\"), 0L, null);\n         poolMaxWait.getField().add(new RangeValidator<Long>(0L, Long.MAX_VALUE));\n         connectorForm.add(poolMaxWait);\n         final SpinnerFieldPanel<Long> poolMinEvictableIdleTime =\n                 new SpinnerFieldPanel<Long>(\"poolMinEvictableIdleTime\", \"poolMinEvictableIdleTime\", Long.class,\n                         new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"minEvictableIdleTimeMillis\"),\n-                        0L, null, true);\n+                        0L, null);\n         poolMinEvictableIdleTime.getField().add(new RangeValidator<Long>(0L, Long.MAX_VALUE));\n         connectorForm.add(poolMinEvictableIdleTime);\n \n@@ -323,13 +323,17 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                             try {\n                                 propertySchemaClass =\n                                 ClassUtils.forName(property.getSchema().getType(), ClassUtils.getDefaultClassLoader());\n+                                if (ClassUtils.isPrimitiveOrWrapper(propertySchemaClass)) {\n+                                    propertySchemaClass =\n+                                    org.apache.commons.lang3.ClassUtils.primitiveToWrapper(propertySchemaClass);\n+                                }\n                             } catch (Exception e) {\n                                 LOG.error(\"Error parsing attribute type\", e);\n                                 propertySchemaClass = String.class;\n                             }\n                             if (ClassUtils.isAssignable(Number.class, propertySchemaClass)) {\n                                 field = new SpinnerFieldPanel<Number>(\"panel\", label.getDefaultModelObjectAsString(),\n-                                        (Class<Number>) propertySchemaClass, new Model<Number>(), null, null, false);\n+                                        (Class<Number>) propertySchemaClass, new Model<Number>(), null, null);\n \n                                 required = property.getSchema().isRequired();\n                             } else if (ClassUtils.isAssignable(Boolean.class, propertySchemaClass)) {\n@@ -509,7 +513,7 @@ private List<ConnConfProperty> fillProperties(final ConnBundleTO bundleTO, final\n             for (ConnConfPropSchema key : bundleTO.getProperties()) {\n                 final ConnConfProperty propertyTO = new ConnConfProperty();\n                 propertyTO.setSchema(key);\n-                if (connInstanceTO.getId() != 0 \n+                if (connInstanceTO.getId() != 0\n                         && connInstanceTO.getConfigurationMap().containsKey(key.getName())\n                         && connInstanceTO.getConfigurationMap().get(key.getName()).getValues() != null) {\n                     propertyTO.getValues().addAll(connInstanceTO.getConfigurationMap().get(key.getName()).getValues());"},{"sha":"52915b83fd6aa54fc46493781fb9788b073dfb50","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportletConfModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -206,7 +206,7 @@ private FieldPanel buildSinglePanel(final Class<?> type, final String fieldName,\n         if (ClassUtils.isAssignable(Boolean.class, type)) {\n             result = new AjaxCheckBoxPanel(id, fieldName, model);\n         } else if (ClassUtils.isAssignable(Number.class, type)) {\n-            result = new SpinnerFieldPanel<Number>(id, fieldName, (Class<Number>) type, model, null, null, false);\n+            result = new SpinnerFieldPanel<Number>(id, fieldName, (Class<Number>) type, model, null, null);\n         } else if (Date.class.equals(type)) {\n             result = new DateTimeFieldPanel(id, fieldName, model, SyncopeConstants.DEFAULT_DATE_PATTERN);\n         } else if (type.isEnum()) {"},{"sha":"2e21cb7169cf1a39f91ecc24ebc81e2bdd58fd11","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AttributesPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -266,10 +266,10 @@ public String getIdValue(final String value, final int i) {\n                     panel.addRequiredLabel();\n                 }\n                 break;\n-                \n+\n             case Long:\n                 panel = new SpinnerFieldPanel<Long>(\"panel\", schemaTO.getName(),\n-                        Long.class, new Model<Long>(), null, null, false);\n+                        Long.class, new Model<Long>(), null, null);\n \n                 if (required) {\n                     panel.addRequiredLabel();\n@@ -278,15 +278,16 @@ public String getIdValue(final String value, final int i) {\n \n             case Double:\n                 panel = new SpinnerFieldPanel<Double>(\"panel\", schemaTO.getName(),\n-                        Double.class, new Model<Double>(), null, null, false);\n+                        Double.class, new Model<Double>(), null, null);\n \n                 if (required) {\n                     panel.addRequiredLabel();\n                 }\n                 break;\n-                \n+\n             default:\n                 panel = new AjaxTextFieldPanel(\"panel\", schemaTO.getName(), new Model<String>());\n+\n                 if (required) {\n                     panel.addRequiredLabel();\n                 }"},{"sha":"80b24beba3e6bc4213a0e0e73a5b1a33393b6b84","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/NotificationPanel.java","status":"modified","additions":23,"deletions":33,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationPanel.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.feedback.FeedbackMessage;\n@@ -29,55 +30,43 @@ public class NotificationPanel extends FeedbackPanel {\n \n     private static final long serialVersionUID = 5895940553202128621L;\n \n-    private final String cssClass = \"notificationpanel\";\n+    private static final String CSS_CLASS = \"notificationpanel\";\n \n-    private String additionalCSSClass = \"notificationpanel_top_right\";\n+    private static final String DEFAULT_ADDITIONAL_CSS_CLASS = \"notificationpanel_top_right\";\n \n-    // Create a notifcation panel with the default additional class, specified as a field variable\n-    public NotificationPanel(final String id) {\n-        super(id);\n-\n-        init(id, additionalCSSClass);\n-    }\n-\n-    // Create a notifcation panel with a custom additional class, overwriting the field variable\n-    public NotificationPanel(final String id, final String additionalCSSClass) {\n-        super(id);\n+    private final String additionalCSSClass;\n \n-        this.additionalCSSClass = additionalCSSClass;\n-\n-        init(id, additionalCSSClass);\n+    public NotificationPanel(final String id) {\n+        this(id, null, null);\n     }\n \n     public NotificationPanel(final String id, final String additionalCSSClass,\n             final IFeedbackMessageFilter feedbackMessageFilter) {\n+\n         super(id, feedbackMessageFilter);\n \n-        this.additionalCSSClass = additionalCSSClass;\n+        this.additionalCSSClass = StringUtils.isBlank(additionalCSSClass)\n+                ? DEFAULT_ADDITIONAL_CSS_CLASS\n+                : additionalCSSClass;\n \n-        init(id, additionalCSSClass);\n-    }\n-\n-    private void init(final String id, final String additionalCSSClass) {\n         // set custom markup id and ouput it, to find the component later on in the js function\n         setMarkupId(id);\n         setOutputMarkupId(true);\n \n         // Add the additional cssClass and hide the element by default\n-        add(new AttributeModifier(\"class\", new Model<String>(cssClass + \" \" + additionalCSSClass)));\n+        add(new AttributeModifier(\"class\", new Model<String>(this.CSS_CLASS + \" \" + this.additionalCSSClass)));\n         add(new AttributeModifier(\"style\", new Model<String>(\"opacity: 0;\")));\n     }\n \n     /**\n-     * Method to refresh the notification panel\n+     * Method to refresh the notification panel.\n      *\n-     * if there are any feedback messages for the user, find the gravest level, format the notification panel\n-     * accordingly and show it\n+     * If there are any feedback messages for the user, find the gravest level, format the notification panel\n+     * accordingly and show it.\n      *\n      * @param target AjaxRequestTarget to add panel and the calling javascript function\n      */\n     public void refresh(final AjaxRequestTarget target) {\n-\n         // any feedback at all in the current form?\n         if (anyMessage()) {\n             int highestFeedbackLevel = FeedbackMessage.INFO;\n@@ -93,22 +82,23 @@ public void refresh(final AjaxRequestTarget target) {\n             // add the css classes to the notification panel, \n             // including the border css which represents the highest level of feedback\n             add(new AttributeModifier(\"class\",\n-                    new Model<String>(cssClass\n+                    new Model<String>(CSS_CLASS\n                             + \" \" + additionalCSSClass\n-                            + \" notificationpanel_border_\" + String.valueOf(highestFeedbackLevel))));\n+                            + \" notificationpanel_border_\" + highestFeedbackLevel)));\n \n             // refresh the panel and call the js function with the panel markup id \n             // and the total count of messages\n             target.add(this);\n-            target.appendJavaScript(\"showNotification('\" + getMarkupId() + \"', \" + getCurrentMessages().size() + \");\");\n+            if (anyMessage(FeedbackMessage.ERROR)) {\n+                target.appendJavaScript(\n+                        \"$('div#\" + getMarkupId() + \"').fadeTo('normal', 1.0);\");\n+            } else {\n+                target.appendJavaScript(\n+                        \"showNotification('\" + getMarkupId() + \"', \" + getCurrentMessages().size() + \");\");\n+            }\n         }\n     }\n \n-    /**\n-     * Returns css class for the single rows of the panel\n-     *\n-     * @param message\n-     */\n     @Override\n     protected String getCSSClass(final FeedbackMessage message) {\n         return \"notificationpanel_row_\" + message.getLevelAsString();"},{"sha":"f3ecee2defbe31dd9bb6d3eb52803c8e059b6b2d","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PolicyBeanPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -227,7 +227,7 @@ protected void populateItem(final ListItem<FieldWrapper> item) {\n                     } else if (ClassUtils.isAssignable(Number.class, field.getType())) {\n                         component = new SpinnerFieldPanel<Number>(\"field\", field.getName(),\n                                 (Class<Number>) field.getType(), new PropertyModel<Number>(policy, field.getName()),\n-                                null, null, false);\n+                                null, null);\n                         item.add(component);\n \n                         item.add(getActivationControl(component,"},{"sha":"d7ede2bbe7db27d05db54a0f0505362bac706e86","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceConnConfPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -157,7 +157,7 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                             if (ClassUtils.isAssignable(Number.class, propertySchemaClass)) {\n                                 Class<Number> numberClass = (Class<Number>) propertySchemaClass;\n                                 field = new SpinnerFieldPanel<Number>(\"panel\", label.getDefaultModelObjectAsString(),\n-                                        numberClass, new Model<Number>(), null, null, false);\n+                                        numberClass, new Model<Number>(), null, null);\n \n                                 required = property.getSchema().isRequired();\n                             } else if (ClassUtils.isAssignable(Boolean.class, propertySchemaClass)) {"},{"sha":"12cefa2c201da61adca4ede484525d8b8f5549b2","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceDetailsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -84,7 +84,7 @@ public ResourceDetailsPanel(final String id, final ResourceTO resourceTO, final\n \n         final SpinnerFieldPanel<Integer> propagationPriority =\n                 new SpinnerFieldPanel<Integer>(\"propagationPriority\", \"propagationPriority\", Integer.class,\n-                        new PropertyModel<Integer>(resourceTO, \"propagationPriority\"), null, null, false);\n+                        new PropertyModel<Integer>(resourceTO, \"propagationPriority\"), null, null);\n         add(propagationPriority);\n \n         final AjaxDropDownChoicePanel<PropagationMode> propagationMode = new AjaxDropDownChoicePanel<PropagationMode>("},{"sha":"2dcb2b591dea27d4653a0997b5b79df460a5927a","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/FieldPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -127,7 +127,7 @@ public FieldPanel<T> removeRequiredLabel() {\n     }\n \n     @Override\n-    public FieldPanel<T> setModelObject(T object) {\n+    public FieldPanel<T> setModelObject(final T object) {\n         field.setModelObject(object);\n         return this;\n     }"},{"sha":"7938e3f54edde822b53838621d0c7b808f0bff70","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/SpinnerFieldPanel.java","status":"modified","additions":21,"deletions":48,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -25,12 +25,12 @@\n import org.apache.syncope.console.commons.Constants;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n+import org.springframework.util.StringUtils;\n \n public class SpinnerFieldPanel<T extends Number> extends FieldPanel<T> {\n \n@@ -44,8 +44,9 @@\n \n     private final T max;\n \n+    @SuppressWarnings(\"unchecked\")\n     public SpinnerFieldPanel(final String id, final String name, final Class<T> reference, final IModel<T> model,\n-            final T min, final T max, final boolean disableVisible) {\n+            final T min, final T max) {\n \n         super(id, name, model);\n         this.reference = reference;\n@@ -70,21 +71,6 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             });\n         }\n \n-        AjaxLink<Void> spinnerFieldDisable = new AjaxLink<Void>(\"spinnerFieldDisable\") {\n-\n-            private static final long serialVersionUID = -7978723352517770644L;\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target) {\n-                // nothing to do\n-            }\n-\n-        };\n-        spinnerFieldDisable.setMarkupId(\"spinnerFieldDisable-\" + uuid);\n-        spinnerFieldDisable.setOutputMarkupPlaceholderTag(true);\n-        spinnerFieldDisable.setVisible(disableVisible);\n-        add(spinnerFieldDisable);\n-\n         final StringBuilder statements = new StringBuilder();\n         statements.append(\"jQuery(function() {\").\n                 append(\"var spinner = $('#\").append(uuid).append(\"').spinner();\").\n@@ -100,16 +86,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     append(\"$('#\").append(uuid).append(\"').spinner(\").\n                     append(\"'option', 'max', \").append(this.max).append(\");\");\n         }\n-        statements.\n-                append(\"$('#spinnerFieldDisable-\").append(uuid).append(\"').click(function() {\").\n-                append(\"if (spinner.spinner('option', 'disabled')) {\").\n-                append(\"spinner.spinner('enable');\").\n-                append(\"} else {\").\n-                append(\"spinner.spinner('disable');\").\n-                append(\"spinner.spinner('value', null)\").\n-                append(\"}\").\n-                append(\"});\").\n-                append(\"});\");\n+        statements.append(\"});\");\n         Label spinnerFieldJS = new Label(\"spinnerFieldJS\", statements.toString());\n         spinnerFieldJS.setEscapeModelStrings(false);\n         add(spinnerFieldJS);\n@@ -122,22 +99,21 @@ public SpinnerFieldPanel<T> setNewModel(final List<Serializable> list) {\n             private static final long serialVersionUID = 527651414610325237L;\n \n             @Override\n-            @SuppressWarnings(\"unchecked\")\n             public T getObject() {\n                 T value = null;\n \n-                if (list != null && !list.isEmpty()) {\n+                if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {\n                     value = reference.equals(Integer.class)\n-                            ? (T) Integer.valueOf(NumberUtils.toInt(list.get(0).toString()))\n+                            ? reference.cast(NumberUtils.toInt(list.get(0).toString()))\n                             : reference.equals(Long.class)\n-                            ? (T) Short.valueOf(NumberUtils.toShort(list.get(0).toString()))\n+                            ? reference.cast(NumberUtils.toLong(list.get(0).toString()))\n                             : reference.equals(Short.class)\n-                            ? (T) Long.valueOf(NumberUtils.toLong(list.get(0).toString()))\n+                            ? reference.cast(NumberUtils.toShort(list.get(0).toString()))\n                             : reference.equals(Float.class)\n-                            ? (T) Float.valueOf(NumberUtils.toFloat(list.get(0).toString()))\n-                            : reference.equals(Byte.class)\n-                            ? (T) Byte.valueOf(NumberUtils.toByte(list.get(0).toString()))\n-                            : (T) Double.valueOf(NumberUtils.toDouble(list.get(0).toString()));\n+                            ? reference.cast(NumberUtils.toFloat(list.get(0).toString()))\n+                            : reference.equals(byte.class)\n+                            ? reference.cast(NumberUtils.toByte(list.get(0).toString()))\n+                            : reference.cast(NumberUtils.toDouble(list.get(0).toString()));\n                 }\n \n                 return value;\n@@ -163,7 +139,6 @@ public SpinnerFieldPanel<T> setNewModel(final ListItem item) {\n             private static final long serialVersionUID = 6799404673615637845L;\n \n             @Override\n-            @SuppressWarnings(\"unchecked\")\n             public T getObject() {\n                 T number = null;\n \n@@ -172,20 +147,19 @@ public T getObject() {\n                 if (obj != null && !obj.toString().isEmpty()) {\n                     if (obj instanceof String) {\n                         number = reference.equals(Integer.class)\n-                                ? (T) Integer.valueOf((String) obj)\n+                                ? reference.cast(Integer.valueOf((String) obj))\n                                 : reference.equals(Long.class)\n-                                ? (T) Short.valueOf((String) obj)\n+                                ? reference.cast(Short.valueOf((String) obj))\n                                 : reference.equals(Short.class)\n-                                ? (T) Long.valueOf((String) obj)\n+                                ? reference.cast(Long.valueOf((String) obj))\n                                 : reference.equals(Float.class)\n-                                ? (T) Float.valueOf((String) obj)\n-                                : reference.equals(Byte.class)\n-                                ? (T) Byte.valueOf((String) obj)\n-                                : (T) Double.valueOf((String) obj);\n-\n+                                ? reference.cast(Float.valueOf((String) obj))\n+                                : reference.equals(byte.class)\n+                                ? reference.cast(Byte.valueOf((String) obj))\n+                                : reference.cast(Double.valueOf((String) obj));\n                     } else if (obj instanceof Number) {\n                         // Don't parse anything\n-                        number = (T) obj;\n+                        number = reference.cast(obj);\n                     }\n                 }\n \n@@ -204,8 +178,7 @@ public void setObject(final T object) {\n \n     @Override\n     public SpinnerFieldPanel<T> clone() {\n-        SpinnerFieldPanel<T> panel = new SpinnerFieldPanel<T>(\n-                id, name, reference, model, min, max, isRequiredLabelAdded);\n+        SpinnerFieldPanel<T> panel = new SpinnerFieldPanel<T>(id, name, reference, model, min, max);\n \n         panel.setRequired(isRequired());\n         panel.setReadOnly(isReadOnly());"},{"sha":"a6f0e515879542fa5b8911a8cecb4f97536c498c","filename":"console/src/main/resources/org/apache/syncope/console/wicket/markup/html/form/SpinnerFieldPanel.html","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.html?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -24,11 +24,6 @@\n       <div style=\"display: table-cell;\">\n         <input wicket:id=\"spinnerField\"/>\n       </div>\n-      <div style=\"display: table-cell;vertical-align: middle;padding-left: 5px;\">\n-        <a wicket:id=\"spinnerFieldDisable\">\n-          <img src=\"img/disable.png\" alt=\"Toggle disable/enable\" title=\"Toggle disable/enable\"/>\n-        </a>\n-      </div>\n     </div>\n   </wicket:extend>\n </html>"},{"sha":"524ac9c646e78052daa390b0615363e1f3f5c1b8","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/316eca74d0fc08548d1199fbe2f49325ca84d866/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/316eca74d0fc08548d1199fbe2f49325ca84d866/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=316eca74d0fc08548d1199fbe2f49325ca84d866","patch":"@@ -356,7 +356,7 @@ under the License.\n \n     <jasypt.version>1.9.2</jasypt.version>\n  \n-    <jquery.version>1.11.0-1</jquery.version>\n+    <jquery.version>1.11.1</jquery.version>\n     <jquery-ui.version>1.10.4</jquery-ui.version>\n     <highlightjs.version>7.3-1</highlightjs.version>\n     <codemirror.version>3.23</codemirror.version>"}]}