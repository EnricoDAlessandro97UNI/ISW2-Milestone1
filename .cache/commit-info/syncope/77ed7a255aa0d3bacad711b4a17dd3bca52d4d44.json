{"sha":"77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc3ZWQ3YTI1NWFhMGQzYmFjYWQ3MTFiNGExN2RkM2JjYTUyZDRkNDQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-13T13:47:29Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-13T13:47:29Z"},"message":"Fixes issue 246\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247250 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"602fe72e13707e4c48230094e00333a403c8b895","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/602fe72e13707e4c48230094e00333a403c8b895"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/comments","author":null,"committer":null,"parents":[{"sha":"6ed93261318cb03c1ccb01fb82a6478800935c3e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6ed93261318cb03c1ccb01fb82a6478800935c3e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6ed93261318cb03c1ccb01fb82a6478800935c3e"}],"stats":{"total":144,"additions":90,"deletions":54},"files":[{"sha":"8f3d8787733665230a8f013addcdad6fd40141ab","filename":"console/src/main/java/org/syncope/console/SyncopeSession.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeSession.java?ref=77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","patch":"@@ -14,7 +14,6 @@\n  */\n package org.syncope.console;\n \n-import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import org.apache.wicket.Session;\n import org.apache.wicket.authroles.authorization.strategies.role.Roles;\n@@ -75,13 +74,13 @@ public boolean hasAnyRole(final Roles roles) {\n         return this.roles.hasAnyRole(roles);\n     }\n \n-    public DateFormat getDateFormat() {\n+    public SimpleDateFormat getDateFormat() {\n         String language = \"en\";\n         if (getLocale() != null) {\n             language = getLocale().getLanguage();\n         }\n \n-        DateFormat formatter;\n+        SimpleDateFormat formatter;\n         if (\"it\".equals(language)) {\n             formatter = new SimpleDateFormat(Constants.ITALIAN_DATE_FORMAT);\n         } else {"},{"sha":"8d07fd675c348adc8c067f3e66406fec32eca768","filename":"console/src/main/java/org/syncope/console/pages/ApprovalModalPage.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java?ref=77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","patch":"@@ -14,7 +14,6 @@\n package org.syncope.console.pages;\n \n import java.io.Serializable;\n-import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n@@ -102,7 +101,8 @@ protected void populateItem(\n                                 break;\n \n                             case Date:\n-                                DateFormat df = StringUtils.isNotBlank(prop.\n+                                SimpleDateFormat df =\n+                                        StringUtils.isNotBlank(prop.\n                                         getDatePattern())\n                                         ? new SimpleDateFormat(prop.\n                                         getDatePattern())\n@@ -119,7 +119,8 @@ protected void populateItem(\n \n                                 field = new DateTimeFieldPanel(\"value\",\n                                         label.getDefaultModelObjectAsString(),\n-                                        new Model(parsedDate), true);\n+                                        new Model(parsedDate), true,\n+                                        df.toLocalizedPattern());\n                                 break;\n \n                             case Enum:"},{"sha":"de75f3c01cdb1070efefd8ecaa65eca540212144","filename":"console/src/main/java/org/syncope/console/pages/panels/AttributesPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","patch":"@@ -155,7 +155,6 @@ private List<AttributeTO> initEntityData(\n \n                 // is important to set readonly only after valus setting\n                 attributeTO.setReadonly(schema.isReadonly());\n-\n             } else {\n                 attributeTO.setValues(\n                         attrMap.get(schema.getName()).getValues());\n@@ -200,7 +199,8 @@ private FieldPanel getFieldPanel(\n                     }\n                 } else {\n                     panel = new DateTimeFieldPanel(\n-                            \"panel\", schemaTO.getName(), new Model(), true);\n+                            \"panel\", schemaTO.getName(), new Model(), true,\n+                            schemaTO.getConversionPattern());\n                     if (required) {\n                         panel.addRequiredLabel();\n                         ((DateTimeFieldPanel) panel).setFormValidator(form);"},{"sha":"fe614bc102387d4798905a60692cdb5cac49ce47","filename":"console/src/main/java/org/syncope/console/pages/panels/UserDetailsPanel.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java?ref=77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","patch":"@@ -26,8 +26,10 @@\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n import org.syncope.client.to.AbstractAttributableTO;\n import org.syncope.client.to.UserTO;\n+import org.syncope.console.SyncopeSession;\n import org.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n@@ -64,7 +66,7 @@ public <T extends AbstractAttributableTO> UserDetailsPanel(\n         // ------------------------\n         final FieldPanel password;\n         final Label confirmPasswordLabel = new Label(\"confirmPasswordLabel\",\n-                getString(\"confirmPassword\"));\n+                new ResourceModel(\"confirmPassword\"));\n         final FieldPanel confirmPassword;\n         if (templateMode) {\n             password = new AjaxTextFieldPanel(\"password\", \"password\",\n@@ -139,7 +141,8 @@ public void onComponentTag(\n                 \"creationDate\",\n                 \"creationDate\",\n                 new Model<Date>(userTO.getCreationDate()),\n-                false);\n+                false,\n+                SyncopeSession.get().getDateFormat().toLocalizedPattern());\n \n         creationDate.setReadOnly(true);\n         add(creationDate);\n@@ -152,7 +155,8 @@ public void onComponentTag(\n                 \"changePwdDate\",\n                 \"changePwdDate\",\n                 new Model<Date>(userTO.getChangePwdDate()),\n-                false);\n+                false,\n+                SyncopeSession.get().getDateFormat().toLocalizedPattern());\n \n         changePwdDate.setReadOnly(true);\n         add(changePwdDate);\n@@ -165,7 +169,8 @@ public void onComponentTag(\n                 \"lastLoginDate\",\n                 \"lastLoginDate\",\n                 new Model<Date>(userTO.getLastLoginDate()),\n-                false);\n+                false,\n+                SyncopeSession.get().getDateFormat().toLocalizedPattern());\n \n         lastLoginDate.setReadOnly(true);\n         add(lastLoginDate);\n@@ -204,7 +209,8 @@ public void onComponentTag(\n                 \"tokenExpireTime\",\n                 \"tokenExpireTime\",\n                 new Model<Date>(userTO.getTokenExpireTime()),\n-                false);\n+                false,\n+                SyncopeSession.get().getDateFormat().toLocalizedPattern());\n \n         tokenExpireTime.setReadOnly(true);\n         add(tokenExpireTime);"},{"sha":"4b7600f803d30e0a312b5a06a35b09871efef728","filename":"console/src/main/java/org/syncope/console/pages/panels/UserSearchPanel.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java?ref=77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","patch":"@@ -68,7 +68,8 @@ public class UserSearchPanel extends Panel {\n \n     private List<String> ATTRIBUTES_NOTINCLUDED = Arrays.asList(new String[]{\n                 \"attributes\", \"derivedAttributes\", \"virtualAttributes\",\n-                \"serialVersionUID\", \"memberships\", \"resources\", \"password\"});\n+                \"serialVersionUID\", \"memberships\", \"resources\", \"password\",\n+                \"propagationStatusMap\"});\n \n     @SpringBean\n     private SchemaRestClient schemaRestClient;\n@@ -625,8 +626,10 @@ protected void onError(final AjaxRequestTarget target,\n \n                         if (unames.getObject() != null\n                                 && !unames.getObject().isEmpty()) {\n+\n                             names.addAll(unames.getObject());\n                         }\n+                        Collections.sort(names);\n \n                         filterNameChooser.setChoices(names);\n                         if (!type.isEnabled()) {"},{"sha":"33083c64441e1062d1527d1845f304e78b9805cd","filename":"console/src/main/java/org/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","patch":"@@ -53,23 +53,21 @@ public List<SchemaTO> getSchemas(final String kind) {\n      * @return List of schema names.\n      */\n     public List<String> getSchemaNames(final String kind) {\n-\n-        final List<String> schemasNames = new ArrayList<String>();\n+        final List<String> schemaNames = new ArrayList<String>();\n \n         try {\n             final List<SchemaTO> userSchemas = Arrays.asList(\n                     restTemplate.getForObject(baseURL\n                     + \"schema/\" + kind + \"/list.json\", SchemaTO[].class));\n \n             for (SchemaTO schemaTO : userSchemas) {\n-                schemasNames.add(schemaTO.getName());\n+                schemaNames.add(schemaTO.getName());\n             }\n-\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all user schema names\", e);\n         }\n \n-        return schemasNames;\n+        return schemaNames;\n     }\n \n     /**"},{"sha":"1d6e5ad9fcf1c1dcbf874bb523f9ac893767305b","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/AjaxCheckBoxPanel.java","status":"modified","additions":35,"deletions":2,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java?ref=77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","patch":"@@ -14,11 +14,14 @@\n  */\n package org.syncope.console.wicket.markup.html.form;\n \n+import java.io.Serializable;\n+import java.util.List;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.html.form.CheckBox;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n+import org.springframework.util.StringUtils;\n \n public class AjaxCheckBoxPanel extends FieldPanel<Boolean> {\n \n@@ -42,7 +45,7 @@ public AjaxCheckBoxPanel(\n                         -1107858522700306810L;\n \n                 @Override\n-                protected void onUpdate(AjaxRequestTarget art) {\n+                protected void onUpdate(final AjaxRequestTarget target) {\n                     // nothing to do\n                 }\n             });\n@@ -51,7 +54,6 @@ protected void onUpdate(AjaxRequestTarget art) {\n \n     @Override\n     public FieldPanel addRequiredLabel() {\n-\n         if (!isRequired()) {\n             setRequired(true);\n         }\n@@ -60,4 +62,35 @@ public FieldPanel addRequiredLabel() {\n \n         return this;\n     }\n+\n+    @Override\n+    public FieldPanel setNewModel(final List<Serializable> list) {\n+        setNewModel(new Model() {\n+\n+            private static final long serialVersionUID = 527651414610325237L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                Boolean value = null;\n+\n+                if (list != null && !list.isEmpty()\n+                        && StringUtils.hasText(list.get(0).toString())) {\n+\n+                    value = \"true\".equalsIgnoreCase(list.get(0).toString());\n+                }\n+\n+                return value;\n+            }\n+\n+            @Override\n+            public void setObject(final Serializable object) {\n+                if (object != null) {\n+                    list.clear();\n+                    list.add(((Boolean) object).toString());\n+                }\n+            }\n+        });\n+\n+        return this;\n+    }\n }"},{"sha":"f9e91aaeb3c78c3dd26f64fe89d11a368d8e36b4","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/DateTextFieldPanel.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java?ref=77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","patch":"@@ -33,7 +33,7 @@ public class DateTextFieldPanel extends FieldPanel<Date> {\n \n     private static final long serialVersionUID = 1919852712185883648L;\n \n-    final String datePattern;\n+    private final String datePattern;\n \n     public DateTextFieldPanel(\n             final String id,\n@@ -121,20 +121,18 @@ public Serializable getObject() {\n             }\n \n             @Override\n-            public void setObject(Serializable object) {\n+            public void setObject(final Serializable object) {\n                 if (object != null) {\n                     if (reference.equals(String.class)) {\n                         // Parse string using datePattern\n                         item.setModelObject(\n                                 (String) formatter.format((Date) object));\n                     } else if (reference.equals(Date.class)) {\n                         // Don't parse anything\n-                        item.setModelObject(\n-                                (Date) object);\n+                        item.setModelObject((Date) object);\n                     } else {\n                         // consider Long\n-                        item.setModelObject(\n-                                new Long(((Date) object).getTime()));\n+                        item.setModelObject(((Date) object).getTime());\n                     }\n                 } else {\n                     item.setModelObject(null);\n@@ -152,7 +150,8 @@ public FieldPanel setNewModel(final List<Serializable> list) {\n \n             private static final long serialVersionUID = 527651414610325237L;\n \n-            final DateFormat formatter = new SimpleDateFormat(datePattern);\n+            private final DateFormat formatter =\n+                    new SimpleDateFormat(datePattern);\n \n             @Override\n             public Serializable getObject() {\n@@ -172,7 +171,7 @@ public Serializable getObject() {\n             }\n \n             @Override\n-            public void setObject(Serializable object) {\n+            public void setObject(final Serializable object) {\n                 if (object != null) {\n                     list.clear();\n                     list.add((String) formatter.format((Date) object));"},{"sha":"7c4e49284a2247867c82e64bea45b36a660b09d1","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/DateTimeFieldPanel.java","status":"modified","additions":19,"deletions":14,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java?ref=77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","patch":"@@ -17,6 +17,7 @@\n import java.io.Serializable;\n import java.text.DateFormat;\n import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n@@ -33,22 +34,26 @@\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.model.Model;\n import org.springframework.util.StringUtils;\n-import org.syncope.console.SyncopeSession;\n \n public class DateTimeFieldPanel extends FieldPanel<Date> {\n \n     private static final long serialVersionUID = -428975732068281726L;\n \n+    private final String datePattern;\n+\n     private Form form = null;\n \n     public DateTimeFieldPanel(\n             final String id,\n             final String name,\n             final IModel<Date> model,\n-            final boolean active) {\n+            final boolean active,\n+            final String datePattern) {\n \n         super(id, name, model, active);\n \n+        this.datePattern = datePattern;\n+\n         field = new DateTimeField(\"field\", model);\n \n         final Calendar cal = Calendar.getInstance();\n@@ -79,7 +84,7 @@ protected void onUpdate(AjaxRequestTarget art) {\n                     -1107858522700306810L;\n \n             @Override\n-            protected void onUpdate(AjaxRequestTarget art) {\n+            protected void onUpdate(final AjaxRequestTarget target) {\n                 cal.set(Calendar.MINUTE, ((DateTimeField) field).getMinutes());\n                 field.setModelObject(cal.getTime());\n             }\n@@ -92,7 +97,7 @@ protected void onUpdate(AjaxRequestTarget art) {\n                     -1107858522700306810L;\n \n             @Override\n-            protected void onUpdate(AjaxRequestTarget art) {\n+            protected void onUpdate(final AjaxRequestTarget target) {\n                 cal.setTime(((DateTimeField) field).getDate());\n \n                 if (\"PM\".equals(\"\" + ((DateTimeField) field).getAmOrPm())) {\n@@ -112,7 +117,7 @@ protected void onUpdate(AjaxRequestTarget art) {\n                     -1107858522700306810L;\n \n             @Override\n-            protected void onUpdate(AjaxRequestTarget art) {\n+            protected void onUpdate(final AjaxRequestTarget target) {\n                 if (\"PM\".equals(\"\" + ((DateTimeField) field).getAmOrPm())) {\n                     cal.set(Calendar.AM_PM, Calendar.PM);\n                 } else {\n@@ -136,7 +141,7 @@ private class DateTimeFormValidator extends AbstractFormValidator {\n \n         private FormComponent[] dateTimeComponents;\n \n-        public DateTimeFormValidator(DateTimeField dateTimeComponent) {\n+        public DateTimeFormValidator(final DateTimeField dateTimeComponent) {\n             if (dateTimeComponent == null) {\n                 throw new IllegalArgumentException(\n                         \"argument dateTimeComponent cannot be null\");\n@@ -155,7 +160,7 @@ public FormComponent[] getDependentFormComponents() {\n          * @param form\n          */\n         @Override\n-        public void validate(Form form) {\n+        public void validate(final Form form) {\n             final DateTimeField dateTimeField =\n                     (DateTimeField) dateTimeComponents[0];\n \n@@ -185,7 +190,7 @@ public FieldPanel setFormValidator(final Form form) {\n \n     @Override\n     public FieldPanel setNewModel(final ListItem item, final Class reference) {\n-        final DateFormat formatter = SyncopeSession.get().getDateFormat();\n+        final DateFormat formatter = new SimpleDateFormat(datePattern);\n \n         IModel<Date> model = new Model() {\n \n@@ -218,7 +223,7 @@ public Serializable getObject() {\n             }\n \n             @Override\n-            public void setObject(Serializable object) {\n+            public void setObject(final Serializable object) {\n                 if (object != null) {\n                     if (reference.equals(String.class)) {\n                         // Parse string using datePattern\n@@ -230,8 +235,7 @@ public void setObject(Serializable object) {\n                                 (Date) object);\n                     } else {\n                         // consider Long\n-                        item.setModelObject(\n-                                new Long(((Date) object).getTime()));\n+                        item.setModelObject(((Date) object).getTime());\n                     }\n                 } else {\n                     item.setModelObject(null);\n@@ -249,7 +253,8 @@ public FieldPanel setNewModel(final List<Serializable> list) {\n \n             private static final long serialVersionUID = 527651414610325237L;\n \n-            final DateFormat formatter = SyncopeSession.get().getDateFormat();\n+            private final DateFormat formatter =\n+                    new SimpleDateFormat(datePattern);\n \n             @Override\n             public Serializable getObject() {\n@@ -269,7 +274,7 @@ public Serializable getObject() {\n             }\n \n             @Override\n-            public void setObject(Serializable object) {\n+            public void setObject(final Serializable object) {\n                 if (object != null) {\n                     list.clear();\n                     list.add((String) formatter.format((Date) object));\n@@ -300,7 +305,7 @@ public FieldPanel setStyleShet(String classes) {\n     @Override\n     public FieldPanel clone() {\n         final FieldPanel panel = new DateTimeFieldPanel(\n-                id, name, new Model(null), active);\n+                id, name, new Model(null), active, datePattern);\n \n         panel.setRequired(isRequired());\n         panel.setReadOnly(isReadOnly());"},{"sha":"9b09cdeaaca71881c7d0b97adc594ef19618a778","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/FieldPanel.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77ed7a255aa0d3bacad711b4a17dd3bca52d4d44/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=77ed7a255aa0d3bacad711b4a17dd3bca52d4d44","patch":"@@ -72,7 +72,7 @@ public FieldPanel setTitle(String title) {\n         return this;\n     }\n \n-    public FieldPanel setStyleShet(String classes) {\n+    public FieldPanel setStyleShet(final String classes) {\n         field.add(AttributeModifier.replace(\n                 \"class\", classes != null ? classes : \"\"));\n \n@@ -116,7 +116,6 @@ public boolean isReadOnly() {\n \n     /**\n      * Userd by MultiValueSelectorPanel to attach items.\n-     * @param <E> type of list items.\n      * @param item item to attach.\n      * @return updated FieldPanel object.\n      */\n@@ -133,15 +132,14 @@ public Serializable getObject() {\n             }\n \n             @Override\n-            public void setObject(Serializable object) {\n+            public void setObject(final Serializable object) {\n                 item.setModelObject((T) object);\n             }\n         });\n         return this;\n     }\n \n     public FieldPanel setNewModel(final List<Serializable> list) {\n-\n         setNewModel(new Model() {\n \n             private static final long serialVersionUID = 1088212074765051906L;\n@@ -152,7 +150,7 @@ public Serializable getObject() {\n             }\n \n             @Override\n-            public void setObject(Serializable object) {\n+            public void setObject(final Serializable object) {\n                 list.clear();\n \n                 if (object != null) {\n@@ -166,18 +164,14 @@ public void setObject(Serializable object) {\n \n     @Override\n     public FieldPanel clone() {\n-\n         final FieldPanel panel;\n-\n         try {\n-\n             panel = this.getClass().getConstructor(new Class[]{\n                         String.class,\n                         String.class,\n                         IModel.class,\n                         boolean.class}).newInstance(\n                     id, name, new Model(null), active);\n-\n         } catch (Exception e) {\n             LOG.error(\"Error cloning field panel\", e);\n             return null;\n@@ -195,7 +189,6 @@ public FieldPanel clone() {\n     }\n \n     public FieldPanel addRequiredLabel() {\n-\n         if (!isRequired()) {\n             setRequired(true);\n         }\n@@ -213,7 +206,6 @@ public FieldPanel addRequiredLabel() {\n     }\n \n     public FieldPanel removeRequiredLabel() {\n-\n         if (isRequired()) {\n             setRequired(false);\n         }"}]}