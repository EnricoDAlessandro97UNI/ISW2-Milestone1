{"sha":"52583f13bde308d43b841275e0e223faeef1fab6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUyNTgzZjEzYmRlMzA4ZDQzYjg0MTI3NWUwZTIyM2ZhZWVmMWZhYjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-01T11:29:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-01T11:29:04Z"},"message":"[SYNCOPE-127] Virtual attributes fully working for roles\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/DEV_ROLE_PROVISIONING@1415978 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3cdbb60d84568ad96feca9a7df2f78578017d79f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3cdbb60d84568ad96feca9a7df2f78578017d79f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/52583f13bde308d43b841275e0e223faeef1fab6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52583f13bde308d43b841275e0e223faeef1fab6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/52583f13bde308d43b841275e0e223faeef1fab6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52583f13bde308d43b841275e0e223faeef1fab6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9ed14eab8951eec6d182af3270c295b4d8cfc9c8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9ed14eab8951eec6d182af3270c295b4d8cfc9c8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9ed14eab8951eec6d182af3270c295b4d8cfc9c8"}],"stats":{"total":158,"additions":86,"deletions":72},"files":[{"sha":"b1b89144f91b8426d2f5a4a1954cafe9eb0e7916","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -120,12 +120,10 @@ public class NotificationManager {\n      *\n      * @param notification notification to take as model\n      * @param user the user this task is about\n-     * @param emailSchema name of user schema containing e-mail address\n      * @return notification task, fully populated\n      */\n     private NotificationTask getNotificationTask(final Notification notification, final SyncopeUser user) {\n-\n-        connObjectUtil.retrieveVirAttrValues(user);\n+        connObjectUtil.retrieveVirAttrValues(user, AttributableUtil.getInstance(AttributableType.USER));\n \n         final List<AbstractAttributable> recipients = new ArrayList<AbstractAttributable>();\n \n@@ -141,7 +139,7 @@ private NotificationTask getNotificationTask(final Notification notification, fi\n         Set<String> recipientEmails = new HashSet<String>();\n \n         for (AbstractAttributable recipient : recipients) {\n-            connObjectUtil.retrieveVirAttrValues(recipient);\n+            connObjectUtil.retrieveVirAttrValues(recipient, AttributableUtil.getInstance(AttributableType.USER));\n \n             String email = getRecipientEmail(notification.getRecipientAttrType(),\n                     notification.getRecipientAttrName(), (SyncopeUser) recipient);"},{"sha":"d9396d306a039c121f52d59d70cd683cb62dfc23","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RVirAttr.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.beans.role;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -66,6 +66,9 @@ public <T extends AbstractVirSchema> void setVirtualSchema(final T virtualSchema\n \n     @Override\n     public List<String> getValues() {\n-        return Collections.emptyList();\n+        if (values == null) {\n+            values = new ArrayList<String>();\n+        }\n+        return values;\n     }\n }"},{"sha":"1d785878d183448abf08660bc005ba335e0cb88e","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -23,6 +23,7 @@\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n@@ -221,10 +222,14 @@ public SyncopeRole save(final SyncopeRole role) {\n             role.setPasswordPolicy(null);\n         }\n \n-        final SyncopeRole savedRole = entityManager.merge(role);\n-        entitlementDAO.saveEntitlementRole(savedRole);\n+        final SyncopeRole merged = entityManager.merge(role);\n+        for (AbstractVirAttr virtual : merged.getVirtualAttributes()) {\n+            virtual.setValues(role.getVirtualAttribute(virtual.getVirtualSchema().getName()).getValues());\n+        }\n+\n+        entitlementDAO.saveEntitlementRole(merged);\n \n-        return savedRole;\n+        return merged;\n     }\n \n     @Override"},{"sha":"325d0fff52e404d24afc1ad7f883076578044762","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -194,8 +194,7 @@ public final int count(final Set<Long> adminRoles) {\n \n     @Override\n     public SyncopeUser save(final SyncopeUser user) {\n-        SyncopeUser merged = entityManager.merge(user);\n-\n+        final SyncopeUser merged = entityManager.merge(user);\n         for (AbstractVirAttr virtual : merged.getVirtualAttributes()) {\n             virtual.setValues(user.getVirtualAttribute(virtual.getVirtualSchema().getName()).getValues());\n         }"},{"sha":"81cde0c042ee30abe3ff34d03bd55149a69a7f8e","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/VirSchemaDAOImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -43,13 +43,11 @@ public class VirSchemaDAOImpl extends AbstractDAOImpl implements VirSchemaDAO {\n \n     @Override\n     public <T extends AbstractVirSchema> T find(final String name, final Class<T> reference) {\n-\n         return entityManager.find(reference, name);\n     }\n \n     @Override\n     public <T extends AbstractVirSchema> List<T> findAll(final Class<T> reference) {\n-\n         Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n         return query.getResultList();\n     }\n@@ -61,7 +59,6 @@ public <T extends AbstractVirSchema> T save(final T virtualSchema) {\n \n     @Override\n     public void delete(final String name, final AttributableUtil attributableUtil) {\n-\n         final AbstractVirSchema virtualSchema = find(name, attributableUtil.virSchemaClass());\n \n         if (virtualSchema == null) {"},{"sha":"6fd1939a33032a1673b3fe33f6cb839bf2656647","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -335,7 +335,7 @@ protected List<PropagationTask> getUpdateTaskIds(final AbstractAttributable attr\n                 ? Collections.EMPTY_SET\n                 : vAttrsToBeRemoved, vAttrsToBeUpdated == null\n                 ? Collections.EMPTY_SET\n-                : vAttrsToBeUpdated, AttributableUtil.getInstance(AttributableType.USER));\n+                : vAttrsToBeUpdated, AttributableUtil.getInstance(attributable));\n \n         if (propByRes == null || propByRes.isEmpty()) {\n             localPropByRes.addAll(ResourceOperation.UPDATE, attributable.getResourceNames());\n@@ -441,7 +441,7 @@ protected List<PropagationTask> getDeleteTaskIds(final AbstractAttributable attr\n      * @return account link + prepared attribute\n      * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n      */\n-    private <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n+    protected <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n             final AbstractMappingItem mapItem, final T subject, final String password)\n             throws ClassNotFoundException {\n \n@@ -533,7 +533,7 @@ private <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAtt\n      * @param attrUtil attributable util to get info about subject\n      * @return account link + prepared attributes\n      */\n-    private <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(final T subject,\n+    protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(final T subject,\n             final String password, final Boolean enable, final ExternalResource resource,\n             final AttributableUtil attrUtil) {\n "},{"sha":"4d9e2fd084b53de44cfdbe6f0d93d0da153b7d32","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":30,"deletions":39,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -295,7 +295,6 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n         // 1. virtual attributes to be removed\n         for (String vAttrToBeRemoved : vAttrsToBeRemoved) {\n             AbstractVirSchema virtualSchema = getVirtualSchema(vAttrToBeRemoved, attrUtil.virSchemaClass());\n-\n             if (virtualSchema != null) {\n                 AbstractVirAttr virAttr = attributable.getVirtualAttribute(virtualSchema.getName());\n                 if (virAttr == null) {\n@@ -365,7 +364,7 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n \n     protected PropagationByResource fill(final AbstractAttributable attributable,\n             final AbstractAttributableMod attributableMod, final AttributableUtil attrUtil,\n-            final SyncopeClientCompositeErrorException compositeErrorException)\n+            final SyncopeClientCompositeErrorException scce)\n             throws SyncopeClientCompositeErrorException {\n \n         PropagationByResource propByRes = new PropagationByResource();\n@@ -397,10 +396,8 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n         // 3. attributes to be removed\n         for (String attributeToBeRemoved : attributableMod.getAttributesToBeRemoved()) {\n             AbstractSchema schema = getSchema(attributeToBeRemoved, attrUtil.schemaClass());\n-\n             if (schema != null) {\n                 AbstractAttr attribute = attributable.getAttribute(schema.getName());\n-\n                 if (attribute == null) {\n                     LOG.debug(\"No attribute found for schema {}\", schema);\n                 } else {\n@@ -488,8 +485,7 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n \n                 // 1.2 add values\n                 List<String> valuesToBeAdded = attributeMod.getValuesToBeAdded();\n-                if (valuesToBeAdded != null\n-                        && !valuesToBeAdded.isEmpty()\n+                if (valuesToBeAdded != null && !valuesToBeAdded.isEmpty()\n                         && (!schema.isUniqueConstraint() || attribute.getUniqueValue() == null\n                         || !valuesToBeAdded.iterator().next().equals(attribute.getUniqueValue().getValueAsString()))) {\n \n@@ -504,15 +500,14 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n         }\n \n         if (!invalidValues.isEmpty()) {\n-            compositeErrorException.addException(invalidValues);\n+            scce.addException(invalidValues);\n         }\n \n         LOG.debug(\"Attributes to be updated:\\n{}\", propByRes);\n \n         // 5. derived attributes to be removed\n         for (String derAttrToBeRemoved : attributableMod.getDerivedAttributesToBeRemoved()) {\n             AbstractDerSchema derSchema = getDerivedSchema(derAttrToBeRemoved, attrUtil.derSchemaClass());\n-\n             if (derSchema != null) {\n                 AbstractDerAttr derAttr = attributable.getDerivedAttribute(derSchema.getName());\n                 if (derAttr == null) {\n@@ -567,22 +562,22 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n \n         LOG.debug(\"Derived attributes to be added:\\n{}\", propByRes);\n \n-        // 7. virtual attributes: for users this is delegated to PropagationManager\n-        if (AttributableType.USER != attrUtil.getType()) {\n+        // 7. virtual attributes: for users and roles this is delegated to PropagationManager\n+        if (AttributableType.USER != attrUtil.getType() && AttributableType.ROLE != attrUtil.getType()) {\n             fillVirtual(attributable, attributableMod.getVirtualAttributesToBeRemoved(),\n                     attributableMod.getVirtualAttributesToBeUpdated(), attrUtil);\n         }\n \n         // Finally, check if mandatory values are missing\n         SyncopeClientException requiredValuesMissing = checkMandatory(attrUtil, attributable);\n         if (!requiredValuesMissing.isEmpty()) {\n-            compositeErrorException.addException(requiredValuesMissing);\n+            scce.addException(requiredValuesMissing);\n         }\n \n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n-        if (compositeErrorException.hasExceptions()) {\n-            throw compositeErrorException;\n+        if (scce.hasExceptions()) {\n+            throw scce;\n         }\n \n         return propByRes;\n@@ -593,35 +588,30 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n      *\n      * @param attributable attributable.\n      * @param vAttrs virtual attributes to be added.\n-     * @param attributableUtil attributable util.\n+     * @param attrUtil attributable util.\n      */\n     public void fillVirtual(final AbstractAttributable attributable, final List<AttributeTO> vAttrs,\n-            final AttributableUtil attributableUtil) {\n+            final AttributableUtil attrUtil) {\n \n         for (AttributeTO attributeTO : vAttrs) {\n-            AbstractVirAttr virtualAttribute = attributable.getVirtualAttribute(attributeTO.getSchema());\n-\n-            if (virtualAttribute == null) {\n-                AbstractVirSchema virtualSchema = getVirtualSchema(attributeTO.getSchema(),\n-                        attributableUtil.virSchemaClass());\n-\n-                if (virtualSchema != null) {\n-                    virtualAttribute = attributableUtil.newVirAttr();\n-                    virtualAttribute.setVirtualSchema(virtualSchema);\n-                    virtualAttribute.setOwner(attributable);\n-                    attributable.addVirtualAttribute(virtualAttribute);\n-                    virtualAttribute.setValues(attributeTO.getValues());\n+            AbstractVirAttr virAttr = attributable.getVirtualAttribute(attributeTO.getSchema());\n+            if (virAttr == null) {\n+                AbstractVirSchema virSchema = getVirtualSchema(attributeTO.getSchema(), attrUtil.virSchemaClass());\n+                if (virSchema != null) {\n+                    virAttr = attrUtil.newVirAttr();\n+                    virAttr.setVirtualSchema(virSchema);\n+                    virAttr.setOwner(attributable);\n+                    attributable.addVirtualAttribute(virAttr);\n+                    virAttr.setValues(attributeTO.getValues());\n                 }\n-\n             } else {\n-                virtualAttribute.setValues(attributeTO.getValues());\n+                virAttr.setValues(attributeTO.getValues());\n             }\n-\n         }\n     }\n \n     protected void fill(final AbstractAttributable attributable, final AbstractAttributableTO attributableTO,\n-            final AttributableUtil attributableUtil, final SyncopeClientCompositeErrorException compositeErrorException)\n+            final AttributableUtil attributableUtil, final SyncopeClientCompositeErrorException scce)\n             throws SyncopeClientCompositeErrorException {\n \n         // 1. attributes\n@@ -654,7 +644,7 @@ protected void fill(final AbstractAttributable attributable, final AbstractAttri\n         }\n \n         if (!invalidValues.isEmpty()) {\n-            compositeErrorException.addException(invalidValues);\n+            scce.addException(invalidValues);\n         }\n \n         // 2. derived attributes\n@@ -672,11 +662,12 @@ protected void fill(final AbstractAttributable attributable, final AbstractAttri\n             }\n         }\n \n-        // 3. user virtual attributes will be valued by the propagation manager only (if needed).\n-        if (AttributableType.USER == attributableUtil.getType()) {\n+        // 3. user and role virtual attributes will be evaluated by the propagation manager only (if needed).\n+        if (AttributableType.USER == attributableUtil.getType()\n+                || AttributableType.ROLE == attributableUtil.getType()) {\n+\n             for (AttributeTO vattrTO : attributableTO.getVirtualAttributes()) {\n-                AbstractVirSchema uVirSchema = getVirtualSchema(vattrTO.getSchema(),\n-                        attributableUtil.virSchemaClass());\n+                AbstractVirSchema uVirSchema = getVirtualSchema(vattrTO.getSchema(), attributableUtil.virSchemaClass());\n \n                 if (uVirSchema != null) {\n                     AbstractVirAttr vattr = attributableUtil.newVirAttr();\n@@ -701,13 +692,13 @@ protected void fill(final AbstractAttributable attributable, final AbstractAttri\n \n         SyncopeClientException requiredValuesMissing = checkMandatory(attributableUtil, attributable);\n         if (!requiredValuesMissing.isEmpty()) {\n-            compositeErrorException.addException(requiredValuesMissing);\n+            scce.addException(requiredValuesMissing);\n         }\n \n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n-        if (compositeErrorException.hasExceptions()) {\n-            throw compositeErrorException;\n+        if (scce.hasExceptions()) {\n+            throw scce;\n         }\n     }\n "},{"sha":"9014046eb16644c0eefba7eeac0470c30473f770","filename":"core/src/main/java/org/apache/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.util.ConnObjectUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.util.NotFoundException;\n import org.apache.syncope.types.AttributableType;\n@@ -50,6 +51,9 @@\n @Transactional(rollbackFor = {Throwable.class})\n public class RoleDataBinder extends AbstractAttributableDataBinder {\n \n+    @Autowired\n+    private ConnObjectUtil connObjectUtil;\n+\n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n@@ -257,6 +261,8 @@ public PropagationByResource update(final SyncopeRole role, final RoleMod roleMo\n \n     @Transactional(readOnly = true)\n     public RoleTO getRoleTO(final SyncopeRole role) {\n+        connObjectUtil.retrieveVirAttrValues(role, AttributableUtil.getInstance(AttributableType.ROLE));\n+\n         RoleTO roleTO = new RoleTO();\n         roleTO.setId(role.getId());\n         roleTO.setName(role.getName());"},{"sha":"26d7a6499c5ed6c8ce9bb34896ab67068ffbaaa5","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -343,7 +343,6 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n \n                     // remove virtual attributes\n                     for (AbstractVirAttr virAttr : membership.getVirtualAttributes()) {\n-\n                         attributeIds.add(virAttr.getId());\n                     }\n                     for (Long virAttrId : attributeIds) {\n@@ -411,13 +410,11 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n \n     @Transactional(readOnly = true)\n     public UserTO getUserTO(final SyncopeUser user) {\n-\n         UserTO userTO = new UserTO();\n \n         BeanUtils.copyProperties(user, userTO, IGNORE_USER_PROPERTIES);\n \n-        // retrieve virtual values\n-        connObjectUtil.retrieveVirAttrValues(user);\n+        connObjectUtil.retrieveVirAttrValues(user, AttributableUtil.getInstance(AttributableType.USER));\n \n         fillTO(userTO, user.getAttributes(), user.getDerivedAttributes(), user.getVirtualAttributes(),\n                 user.getResources());"},{"sha":"8d90a17189d0a9abab515ad334e38d4b03cab6ae","filename":"core/src/main/java/org/apache/syncope/core/util/ConnObjectUtil.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -393,8 +393,9 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n      * Query connected external resources for values to populated virtual attributes associated with the given owner.\n      *\n      * @param owner user or role\n+     * @param attrUtil attributable util\n      */\n-    public void retrieveVirAttrValues(final AbstractAttributable owner) {\n+    public void retrieveVirAttrValues(final AbstractAttributable owner, final AttributableUtil attrUtil) {\n         final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n         final ConnInstanceLoader connInstanceLoader = context.getBean(ConnInstanceLoader.class);\n \n@@ -404,8 +405,8 @@ public void retrieveVirAttrValues(final AbstractAttributable owner) {\n         for (ExternalResource resource : owner.getResources()) {\n             LOG.debug(\"Retrieve remote object from '{}'\", resource.getName());\n             try {\n-                final String accountId = resource.getUmapping() == null\n-                        ? null : MappingUtil.getAccountIdValue(owner, resource.getUmapping());\n+                final String accountId = attrUtil.getAccountIdItem(resource) == null\n+                        ? null : MappingUtil.getAccountIdValue(owner, attrUtil.getAccountIdItem(resource));\n \n                 LOG.debug(\"Search for object with accountId '{}'\", accountId);\n \n@@ -414,8 +415,12 @@ public void retrieveVirAttrValues(final AbstractAttributable owner) {\n                     final Set<AbstractMappingItem> virMapItems = new HashSet<AbstractMappingItem>();\n                     final Set<String> extAttrNames = new HashSet<String>();\n \n-                    for (AbstractMappingItem item : resource.getUmapping().getItems()) {\n-                        if (item.getIntMappingType() == IntMappingType.UserVirtualSchema) {\n+                    for (AbstractMappingItem item : attrUtil.getMappingItems(resource)) {\n+                        if ((AttributableType.USER == attrUtil.getType()\n+                                && item.getIntMappingType() == IntMappingType.UserVirtualSchema)\n+                                || (AttributableType.ROLE == attrUtil.getType()\n+                                && item.getIntMappingType() == IntMappingType.RoleVirtualSchema)) {\n+\n                             virMapItems.add(item);\n                             extAttrNames.add(item.getExtAttrName());\n                         }\n@@ -428,7 +433,6 @@ public void retrieveVirAttrValues(final AbstractAttributable owner) {\n                     final ConnectorFacadeProxy connector = connInstanceLoader.getConnector(resource);\n                     final ConnectorObject connObj =\n                             connector.getObject(fromAttributable(owner), new Uid(accountId), oob.build());\n-\n                     if (connObj != null) {\n                         connObj2MapItems.put(connObj, virMapItems);\n                     }"},{"sha":"9b084edd7f981fa0690b2f5c85d23adbacb34d39","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n-import org.apache.syncope.core.persistence.beans.AbstractMapping;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n@@ -138,7 +137,7 @@ public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(fi\n                 for (AbstractAttributable attributable : attributables) {\n                     AbstractVirAttr virAttr = attributable.getVirtualAttribute(mapping.getIntAttrName());\n \n-                    if (virAttr != null && virAttr.getValues() != null) {\n+                    if (virAttr != null) {\n                         for (String value : virAttr.getValues()) {\n                             AbstractAttrValue attrValue = new UAttrValue();\n                             attrValue.setStringValue(value);\n@@ -284,11 +283,13 @@ public static List<String> getIntValueAsStrings(final AbstractAttributable attri\n      * Get accountId internal value.\n      *\n      * @param attributable attributable\n-     * @param mapping mapping\n+     * @param accountIdItem accountid mapping item\n      * @return accountId internal value\n      */\n-    public static String getAccountIdValue(final AbstractAttributable attributable, final AbstractMapping mapping) {\n-        final List<String> values = getIntValueAsStrings(attributable, mapping.getAccountIdItem());\n+    public static String getAccountIdValue(final AbstractAttributable attributable,\n+            final AbstractMappingItem accountIdItem) {\n+\n+        final List<String> values = getIntValueAsStrings(attributable, accountIdItem);\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0);"},{"sha":"f8ad712c5adc475f3c6249d6f7e08c5bb9125505","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -84,13 +84,23 @@ public void create() {\n         ownerDN.setSchema(\"ownerDN\");\n         roleTO.addDerivedAttribute(ownerDN);\n \n+        AttributeTO rvirtualdata = new AttributeTO();\n+        rvirtualdata.setSchema(\"rvirtualdata\");\n+        rvirtualdata.addValue(\"rvirtualvalue\");\n+        roleTO.addVirtualAttribute(rvirtualdata);\n+\n         roleTO.setRoleOwner(8L);\n \n         roleTO.addResource(\"resource-ldap\");\n \n         roleTO = restTemplate.postForObject(BASE_URL + \"role/create\", roleTO, RoleTO.class);\n         assertNotNull(roleTO);\n \n+        assertNotNull(roleTO.getVirtualAttributeMap());\n+        assertNotNull(roleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues());\n+        assertFalse(roleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues().isEmpty());\n+        assertEquals(\"rvirtualvalue\", roleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues().get(0));\n+\n         assertNotNull(roleTO.getAccountPolicy());\n         assertEquals(6L, (long) roleTO.getAccountPolicy());\n "},{"sha":"d137f553c63eafcfda6a218c9016e37a08389acb","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52583f13bde308d43b841275e0e223faeef1fab6/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=52583f13bde308d43b841275e0e223faeef1fab6","patch":"@@ -572,7 +572,10 @@ under the License.\n   <RMappingItem id=\"3\" accountid=\"0\" password=\"0\" mapping_id=\"1\"\n                 extAttrName=\"description\" intAttrName=\"title\" intMappingType=\"RoleSchema\"\n                 mandatoryCondition=\"false\"/>\n-      \n+  <RMappingItem id=\"4\" extAttrName=\"businessCategory\" mapping_id=\"1\"\n+                intAttrName=\"rvirtualdata\" intMappingType=\"RoleVirtualSchema\" mandatoryCondition=\"false\"\n+                accountid=\"0\" password=\"0\"/>\n+        \n   <UMapping id=\"16\" resource_name=\"resource-db-sync\"/>\n   <UMappingItem id=\"321\" accountid=\"0\" mapping_id=\"16\"\n                 extAttrName=\"EMAIL\" intAttrName=\"email\" intMappingType=\"UserSchema\" "}]}